
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdb0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800cf90  0800cf90  0000df90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d280  0800d280  0000f380  2**0
                  CONTENTS
  4 .ARM          00000008  0800d280  0800d280  0000e280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d288  0800d288  0000f380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d288  0800d288  0000e288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d28c  0800d28c  0000e28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000380  20000000  0800d290  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026e4  20000380  0800d610  0000f380  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a64  0800d610  0000fa64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f380  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022aeb  00000000  00000000  0000f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000561b  00000000  00000000  00031e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  000374b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001517  00000000  00000000  00039060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247d3  00000000  00000000  0003a577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025342  00000000  00000000  0005ed4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cee4d  00000000  00000000  0008408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152ed9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000790c  00000000  00000000  00152f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000380 	.word	0x20000380
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cf78 	.word	0x0800cf78

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000384 	.word	0x20000384
 800021c:	0800cf78 	.word	0x0800cf78

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Decode_MC_ReadWrite>:

static uint8_t Page1_seq = 0;
static uint8_t PreOP_seq_cnt = 0;

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	09db      	lsrs	r3, r3, #7
 80005c6:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <Decode_MC_ReadWrite+0x24>
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d002      	beq.n	80005d8 <Decode_MC_ReadWrite+0x28>
 80005d2:	e003      	b.n	80005dc <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e002      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 80005dc:	2358      	movs	r3, #88	@ 0x58
    }
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <Decode_MC_CommunicationChannel>:

static uint8_t Decode_MC_CommunicationChannel (uint8_t Data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d813      	bhi.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
 8000610:	a201      	add	r2, pc, #4	@ (adr r2, 8000618 <Decode_MC_CommunicationChannel+0x2c>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000629 	.word	0x08000629
 800061c:	0800062d 	.word	0x0800062d
 8000620:	08000631 	.word	0x08000631
 8000624:	08000635 	.word	0x08000635
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8000628:	2300      	movs	r3, #0
 800062a:	e005      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 800062c:	2301      	movs	r3, #1
 800062e:	e003      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8000630:	2302      	movs	r3, #2
 8000632:	e001      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8000634:	2303      	movs	r3, #3
 8000636:	e7ff      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
    }
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <Decode_MC_Address>:

static uint8_t Decode_MC_Address (uint8_t Data)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	73fb      	strb	r3, [r7, #15]
    
    return MCdata & 0x1F;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2db      	uxtb	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Decode_CKT_Type>:

static uint8_t Decode_CKT_Type (uint8_t Data)
{
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]
    
    MCdata = Data;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 6) & 0x03;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	099b      	lsrs	r3, r3, #6
 8000680:	b2db      	uxtb	r3, r3
}
 8000682:	4618      	mov	r0, r3
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <Decode_CKT_Checksum>:

static uint8_t Decode_CKT_Checksum (uint8_t Data)
{
 800068e:	b480      	push	{r7}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <Decode_CKS_GetChecksum>:

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80006c0:	2352      	movs	r3, #82	@ 0x52
 80006c2:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	757b      	strb	r3, [r7, #21]

    for (uint8_t i = 0; i < checksumsize; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	75bb      	strb	r3, [r7, #22]
 80006d0:	e009      	b.n	80006e6 <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	4053      	eors	r3, r2
 80006de:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 80006e0:	7dbb      	ldrb	r3, [r7, #22]
 80006e2:	3301      	adds	r3, #1
 80006e4:	75bb      	strb	r3, [r7, #22]
 80006e6:	7dba      	ldrb	r2, [r7, #22]
 80006e8:	7d7b      	ldrb	r3, [r7, #21]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d3f1      	bcc.n	80006d2 <Decode_CKS_GetChecksum+0x1e>
    }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	09db      	lsrs	r3, r3, #7
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4053      	eors	r3, r2
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4053      	eors	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	085b      	lsrs	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4053      	eors	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	099b      	lsrs	r3, r3, #6
 800071c:	b2da      	uxtb	r2, r3
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4053      	eors	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4053      	eors	r3, r2
 8000730:	b2da      	uxtb	r2, r3
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	4053      	eors	r3, r2
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	09db      	lsrs	r3, r3, #7
 8000742:	b2da      	uxtb	r2, r3
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	099b      	lsrs	r3, r3, #6
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4053      	eors	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	b2da      	uxtb	r2, r3
 800075a:	7dfb      	ldrb	r3, [r7, #23]
 800075c:	091b      	lsrs	r3, r3, #4
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4053      	eors	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	089b      	lsrs	r3, r3, #2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4053      	eors	r3, r2
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	085b      	lsrs	r3, r3, #1
 8000784:	b2da      	uxtb	r2, r3
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	4053      	eors	r3, r2
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 8000792:	7d3b      	ldrb	r3, [r7, #20]
 8000794:	015b      	lsls	r3, r3, #5
 8000796:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 8000798:	7cfb      	ldrb	r3, [r7, #19]
 800079a:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 800079c:	b25b      	sxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 80007a2:	7cbb      	ldrb	r3, [r7, #18]
 80007a4:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 80007ac:	7c7b      	ldrb	r3, [r7, #17]
 80007ae:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80007b6:	7c3b      	ldrb	r3, [r7, #16]
 80007b8:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80007c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80007c8:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <OP_CKS_GetChecksum>:

//OP 모드 Event 비트 포함 CKS 생성
uint8_t OP_CKS_GetChecksum (const uint8_t * pData, uint8_t length, uint8_t eventflag)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
 80007e4:	4613      	mov	r3, r2
 80007e6:	70bb      	strb	r3, [r7, #2]
    uint8_t ck8 = 0x52;
 80007e8:	2352      	movs	r3, #82	@ 0x52
 80007ea:	77fb      	strb	r3, [r7, #31]
    uint8_t checksumsize = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	773b      	strb	r3, [r7, #28]
    uint8_t eventbitset = 0x80;
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	76fb      	strb	r3, [r7, #27]

    checksumsize = length;
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	773b      	strb	r3, [r7, #28]

    if (eventflag == 0)
 80007f8:	78bb      	ldrb	r3, [r7, #2]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 8081 	bne.w	8000902 <OP_CKS_GetChecksum+0x12a>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 8000800:	2300      	movs	r3, #0
 8000802:	77bb      	strb	r3, [r7, #30]
 8000804:	e009      	b.n	800081a <OP_CKS_GetChecksum+0x42>
        {
            ck8 ^= *pData++;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	7ffb      	ldrb	r3, [r7, #31]
 8000810:	4053      	eors	r3, r2
 8000812:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 8000814:	7fbb      	ldrb	r3, [r7, #30]
 8000816:	3301      	adds	r3, #1
 8000818:	77bb      	strb	r3, [r7, #30]
 800081a:	7fba      	ldrb	r2, [r7, #30]
 800081c:	7f3b      	ldrb	r3, [r7, #28]
 800081e:	429a      	cmp	r2, r3
 8000820:	d3f1      	bcc.n	8000806 <OP_CKS_GetChecksum+0x2e>
        }
        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8000822:	7ffb      	ldrb	r3, [r7, #31]
 8000824:	09db      	lsrs	r3, r3, #7
 8000826:	b2da      	uxtb	r2, r3
 8000828:	7ffb      	ldrb	r3, [r7, #31]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4053      	eors	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	7ffb      	ldrb	r3, [r7, #31]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4053      	eors	r3, r2
 800083a:	b2da      	uxtb	r2, r3
 800083c:	7ffb      	ldrb	r3, [r7, #31]
 800083e:	085b      	lsrs	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4053      	eors	r3, r2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	74fb      	strb	r3, [r7, #19]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800084c:	7ffb      	ldrb	r3, [r7, #31]
 800084e:	099b      	lsrs	r3, r3, #6
 8000850:	b2da      	uxtb	r2, r3
 8000852:	7ffb      	ldrb	r3, [r7, #31]
 8000854:	091b      	lsrs	r3, r3, #4
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4053      	eors	r3, r2
 800085a:	b2da      	uxtb	r2, r3
 800085c:	7ffb      	ldrb	r3, [r7, #31]
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4053      	eors	r3, r2
 8000864:	b2da      	uxtb	r2, r3
 8000866:	7ffb      	ldrb	r3, [r7, #31]
 8000868:	4053      	eors	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	74bb      	strb	r3, [r7, #18]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8000872:	7ffb      	ldrb	r3, [r7, #31]
 8000874:	09db      	lsrs	r3, r3, #7
 8000876:	b2da      	uxtb	r2, r3
 8000878:	7ffb      	ldrb	r3, [r7, #31]
 800087a:	099b      	lsrs	r3, r3, #6
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4053      	eors	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	747b      	strb	r3, [r7, #17]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8000888:	7ffb      	ldrb	r3, [r7, #31]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	b2da      	uxtb	r2, r3
 800088e:	7ffb      	ldrb	r3, [r7, #31]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4053      	eors	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	743b      	strb	r3, [r7, #16]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800089e:	7ffb      	ldrb	r3, [r7, #31]
 80008a0:	08db      	lsrs	r3, r3, #3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	7ffb      	ldrb	r3, [r7, #31]
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
 80008bc:	4053      	eors	r3, r2
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	73bb      	strb	r3, [r7, #14]
        uint8_t ck6 =   bit5 << 5 |
 80008c6:	7cfb      	ldrb	r3, [r7, #19]
 80008c8:	015b      	lsls	r3, r3, #5
 80008ca:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80008cc:	7cbb      	ldrb	r3, [r7, #18]
 80008ce:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80008d6:	7c7b      	ldrb	r3, [r7, #17]
 80008d8:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80008e0:	7c3b      	ldrb	r3, [r7, #16]
 80008e2:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80008f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 80008fc:	737b      	strb	r3, [r7, #13]
                        bit0;
        
        return ck6;
 80008fe:	7b7b      	ldrb	r3, [r7, #13]
 8000900:	e08b      	b.n	8000a1a <OP_CKS_GetChecksum+0x242>
    }
    else if (eventflag == 1)
 8000902:	78bb      	ldrb	r3, [r7, #2]
 8000904:	2b01      	cmp	r3, #1
 8000906:	f040 8088 	bne.w	8000a1a <OP_CKS_GetChecksum+0x242>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	777b      	strb	r3, [r7, #29]
 800090e:	e009      	b.n	8000924 <OP_CKS_GetChecksum+0x14c>
        {
            ck8 ^= *pData++;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	7ffb      	ldrb	r3, [r7, #31]
 800091a:	4053      	eors	r3, r2
 800091c:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 800091e:	7f7b      	ldrb	r3, [r7, #29]
 8000920:	3301      	adds	r3, #1
 8000922:	777b      	strb	r3, [r7, #29]
 8000924:	7f7a      	ldrb	r2, [r7, #29]
 8000926:	7f3b      	ldrb	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	d3f1      	bcc.n	8000910 <OP_CKS_GetChecksum+0x138>
        }

        ck8 ^= eventbitset;
 800092c:	7ffa      	ldrb	r2, [r7, #31]
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	4053      	eors	r3, r2
 8000932:	77fb      	strb	r3, [r7, #31]

        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8000934:	7ffb      	ldrb	r3, [r7, #31]
 8000936:	09db      	lsrs	r3, r3, #7
 8000938:	b2da      	uxtb	r2, r3
 800093a:	7ffb      	ldrb	r3, [r7, #31]
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4053      	eors	r3, r2
 8000942:	b2da      	uxtb	r2, r3
 8000944:	7ffb      	ldrb	r3, [r7, #31]
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4053      	eors	r3, r2
 800094c:	b2da      	uxtb	r2, r3
 800094e:	7ffb      	ldrb	r3, [r7, #31]
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4053      	eors	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	76bb      	strb	r3, [r7, #26]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800095e:	7ffb      	ldrb	r3, [r7, #31]
 8000960:	099b      	lsrs	r3, r3, #6
 8000962:	b2da      	uxtb	r2, r3
 8000964:	7ffb      	ldrb	r3, [r7, #31]
 8000966:	091b      	lsrs	r3, r3, #4
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4053      	eors	r3, r2
 800096c:	b2da      	uxtb	r2, r3
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4053      	eors	r3, r2
 8000976:	b2da      	uxtb	r2, r3
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	4053      	eors	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	767b      	strb	r3, [r7, #25]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	09db      	lsrs	r3, r3, #7
 8000988:	b2da      	uxtb	r2, r3
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	099b      	lsrs	r3, r3, #6
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4053      	eors	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	763b      	strb	r3, [r7, #24]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 800099a:	7ffb      	ldrb	r3, [r7, #31]
 800099c:	095b      	lsrs	r3, r3, #5
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	7ffb      	ldrb	r3, [r7, #31]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4053      	eors	r3, r2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	75fb      	strb	r3, [r7, #23]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	7ffb      	ldrb	r3, [r7, #31]
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4053      	eors	r3, r2
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	75bb      	strb	r3, [r7, #22]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	4053      	eors	r3, r2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	757b      	strb	r3, [r7, #21]
        uint8_t ck6 =   bit5 << 5 |
 80009d8:	7ebb      	ldrb	r3, [r7, #26]
 80009da:	015b      	lsls	r3, r3, #5
 80009dc:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80009de:	7e7b      	ldrb	r3, [r7, #25]
 80009e0:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80009e8:	7e3b      	ldrb	r3, [r7, #24]
 80009ea:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80009fc:	7dbb      	ldrb	r3, [r7, #22]
 80009fe:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8000a06:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 8000a0e:	753b      	strb	r3, [r7, #20]
                        bit0;
        
        return eventbitset | ck6;
 8000a10:	7efa      	ldrb	r2, [r7, #27]
 8000a12:	7d3b      	ldrb	r3, [r7, #20]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	e7ff      	b.n	8000a1a <OP_CKS_GetChecksum+0x242>
    }
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <IOL_StartUp_Read_MakePacket>:

static uint8_t* IOL_StartUp_Read_MakePacket (uint8_t * pData)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
    
    pData[0] = IOL_Page1_SeqValue[Page1_seq++];
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <IOL_StartUp_Read_MakePacket+0x3c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	b2d1      	uxtb	r1, r2
 8000a3c:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <IOL_StartUp_Read_MakePacket+0x3c>)
 8000a3e:	7011      	strb	r1, [r2, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <IOL_StartUp_Read_MakePacket+0x40>)
 8000a44:	5c9a      	ldrb	r2, [r3, r2]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	701a      	strb	r2, [r3, #0]
    pData[1] = Decode_CKS_GetChecksum(&pData[0], 1);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1c5c      	adds	r4, r3, #1
 8000a4e:	2101      	movs	r1, #1
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fe2f 	bl	80006b4 <Decode_CKS_GetChecksum>
 8000a56:	4603      	mov	r3, r0
 8000a58:	7023      	strb	r3, [r4, #0]
    
    return pData;
 8000a5a:	687b      	ldr	r3, [r7, #4]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	2000039c 	.word	0x2000039c
 8000a68:	20000004 	.word	0x20000004

08000a6c <IOL_StartUp_Write_MakePacket>:

static uint8_t* IOL_StartUp_Write_MakePacket (uint8_t * pData)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
    
    pData[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <IOL_StartUp_Write_MakePacket+0x28>)
 8000a7c:	f7ff fe1a 	bl	80006b4 <Decode_CKS_GetChecksum>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	701a      	strb	r2, [r3, #0]
    
    return pData;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000000 	.word	0x20000000

08000a98 <IOL_State_StartUp>:

static uint8_t IOL_State_StartUp (void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
    uint8_t Page_ChecksumValue = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
    uint8_t Length = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t * pData;

    switch (IOL_M2D_rxpacket.rw)
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <IOL_State_StartUp+0x74>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d008      	beq.n	8000ac0 <IOL_State_StartUp+0x28>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10d      	bne.n	8000ace <IOL_State_StartUp+0x36>
    {
        case IOL_RW_Read :
            //to do
            Length = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	73fb      	strb	r3, [r7, #15]
            pData = IOL_StartUp_Read_MakePacket(uart1_rx_IDLE_buf);
 8000ab6:	4816      	ldr	r0, [pc, #88]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000ab8:	f7ff ffb6 	bl	8000a28 <IOL_StartUp_Read_MakePacket>
 8000abc:	60b8      	str	r0, [r7, #8]
            break;
 8000abe:	e006      	b.n	8000ace <IOL_State_StartUp+0x36>
        case IOL_RW_Write :
            // to do
            Length = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
            pData = IOL_StartUp_Write_MakePacket(uart1_rx_IDLE_buf);
 8000ac4:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000ac6:	f7ff ffd1 	bl	8000a6c <IOL_StartUp_Write_MakePacket>
 8000aca:	60b8      	str	r0, [r7, #8]
            break;
 8000acc:	bf00      	nop
    }

    IOL_ENABLE;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f002 f9fb 	bl	8002ed0 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) pData, Length) != HAL_OK)
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <IOL_State_StartUp+0x7c>)
 8000ae4:	f005 fca0 	bl	8006428 <HAL_UART_Transmit_IT>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <IOL_State_StartUp+0x5a>
    {
        Error_Handler();
 8000aee:	f000 fe2a 	bl	8001746 <Error_Handler>
    }

    //Master Command to PreOP.
    if (uart1_rx_IDLE_buf[2] == 0x9A)
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	2b9a      	cmp	r3, #154	@ 0x9a
 8000af8:	d102      	bne.n	8000b00 <IOL_State_StartUp+0x68>
    {
        stateIOLseq = IOL_PreOP;
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <IOL_State_StartUp+0x80>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
    }

    return ;
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000f8c 	.word	0x20000f8c
 8000b10:	20000bb8 	.word	0x20000bb8
 8000b14:	20001094 	.word	0x20001094
 8000b18:	20001138 	.word	0x20001138

08000b1c <IOL_State_PreOP_Read_Channel>:

//  OP 모드 Read 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_PreOP_Read_Channel (void)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71bb      	strb	r3, [r7, #6]
    uint8_t IOL_Commchannel_value = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	717b      	strb	r3, [r7, #5]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 

    for (i=0; i < PREOP_DATA_LENGTH; i++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e00e      	b.n	8000b4e <IOL_State_PreOP_Read_Channel+0x32>
    {
        preop_data_arr[i]= IOL_PreOP_Packet[PreOP_seq_cnt][i];
 8000b30:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	79fa      	ldrb	r2, [r7, #7]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4833      	ldr	r0, [pc, #204]	@ (8000c08 <IOL_State_PreOP_Read_Channel+0xec>)
 8000b3c:	00c9      	lsls	r1, r1, #3
 8000b3e:	4401      	add	r1, r0
 8000b40:	440a      	add	r2, r1
 8000b42:	7811      	ldrb	r1, [r2, #0]
 8000b44:	4a31      	ldr	r2, [pc, #196]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b46:	54d1      	strb	r1, [r2, r3]
    for (i=0; i < PREOP_DATA_LENGTH; i++)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b07      	cmp	r3, #7
 8000b52:	d9ed      	bls.n	8000b30 <IOL_State_PreOP_Read_Channel+0x14>
    }

    switch (IOL_M2D_rxpacket.commchannel)
 8000b54:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <IOL_State_PreOP_Read_Channel+0xf4>)
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d837      	bhi.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>
 8000b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b64 <IOL_State_PreOP_Read_Channel+0x48>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000b8b 	.word	0x08000b8b
 8000b6c:	08000ba1 	.word	0x08000ba1
 8000b70:	08000bb7 	.word	0x08000bb7
    {
        case IOL_Channel_Process :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000b74:	79fc      	ldrb	r4, [r7, #7]
 8000b76:	2200      	movs	r2, #0
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4824      	ldr	r0, [pc, #144]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b7c:	f7ff fe2c 	bl	80007d8 <OP_CKS_GetChecksum>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b86:	551a      	strb	r2, [r3, r4]
            break;
 8000b88:	e020      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_Page :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000b8a:	79fc      	ldrb	r4, [r7, #7]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2108      	movs	r1, #8
 8000b90:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b92:	f7ff fe21 	bl	80007d8 <OP_CKS_GetChecksum>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b9c:	551a      	strb	r2, [r3, r4]
            break;
 8000b9e:	e015      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_Diagnosis :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 1);
 8000ba0:	79fc      	ldrb	r4, [r7, #7]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4819      	ldr	r0, [pc, #100]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000ba8:	f7ff fe16 	bl	80007d8 <OP_CKS_GetChecksum>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bb2:	551a      	strb	r2, [r3, r4]
            break;
 8000bb4:	e00a      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_ISDU :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000bb6:	79fc      	ldrb	r4, [r7, #7]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bbe:	f7ff fe0b 	bl	80007d8 <OP_CKS_GetChecksum>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bc8:	551a      	strb	r2, [r3, r4]
            break;
 8000bca:	bf00      	nop
    }

    PreOP_seq_cnt++;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000bd6:	701a      	strb	r2, [r3, #0]

    IOL_ENABLE;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be0:	f002 f976 	bl	8002ed0 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, preop_data_arr, 9) != HAL_OK)
 8000be4:	2209      	movs	r2, #9
 8000be6:	4909      	ldr	r1, [pc, #36]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000be8:	480a      	ldr	r0, [pc, #40]	@ (8000c14 <IOL_State_PreOP_Read_Channel+0xf8>)
 8000bea:	f005 fc1d 	bl	8006428 <HAL_UART_Transmit_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <IOL_State_PreOP_Read_Channel+0xdc>
    {
        Error_Handler();
 8000bf4:	f000 fda7 	bl	8001746 <Error_Handler>
    }

    return ;
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	2000039d 	.word	0x2000039d
 8000c08:	20000014 	.word	0x20000014
 8000c0c:	200003a0 	.word	0x200003a0
 8000c10:	20000f8c 	.word	0x20000f8c
 8000c14:	20001094 	.word	0x20001094

08000c18 <IOL_State_PreOP_Write_Channel>:

//  OP 모드 Write 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_PreOP_Write_Channel (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
    uint8_t IOL_Commchannel_value = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71bb      	strb	r3, [r7, #6]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 

    switch (IOL_M2D_rxpacket.commchannel)
 8000c26:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <IOL_State_PreOP_Write_Channel+0xb8>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d832      	bhi.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>
 8000c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <IOL_State_PreOP_Write_Channel+0x1c>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000c45 	.word	0x08000c45
 8000c38:	08000c59 	.word	0x08000c59
 8000c3c:	08000c6d 	.word	0x08000c6d
 8000c40:	08000c81 	.word	0x08000c81
    {
        case IOL_Channel_Process :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	4822      	ldr	r0, [pc, #136]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c4a:	f7ff fdc5 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c54:	701a      	strb	r2, [r3, #0]
            break;
 8000c56:	e01d      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_Page :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	481d      	ldr	r0, [pc, #116]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c5e:	f7ff fdbb 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c68:	701a      	strb	r2, [r3, #0]
            break;
 8000c6a:	e013      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_Diagnosis :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4818      	ldr	r0, [pc, #96]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c72:	f7ff fdb1 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c7c:	701a      	strb	r2, [r3, #0]
            break;
 8000c7e:	e009      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_ISDU :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2100      	movs	r1, #0
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c86:	f7ff fda7 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c90:	701a      	strb	r2, [r3, #0]
            break;
 8000c92:	bf00      	nop
    }

    //Master Command to OP.
    if(uart1_rx_IDLE_buf[2] == 0x99)
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <IOL_State_PreOP_Write_Channel+0xc0>)
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	2b99      	cmp	r3, #153	@ 0x99
 8000c9a:	d102      	bne.n	8000ca2 <IOL_State_PreOP_Write_Channel+0x8a>
    {
        stateIOLseq = IOL_OP;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <IOL_State_PreOP_Write_Channel+0xc4>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	701a      	strb	r2, [r3, #0]
    }
    
    IOL_ENABLE;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	@ 0x40
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000caa:	f002 f911 	bl	8002ed0 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000cb2:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <IOL_State_PreOP_Write_Channel+0xc8>)
 8000cb4:	f005 fbb8 	bl	8006428 <HAL_UART_Transmit_IT>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <IOL_State_PreOP_Write_Channel+0xaa>
    {
        Error_Handler();
 8000cbe:	f000 fd42 	bl	8001746 <Error_Handler>
    }
    return ;
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000f8c 	.word	0x20000f8c
 8000cd4:	200003ac 	.word	0x200003ac
 8000cd8:	20000bb8 	.word	0x20000bb8
 8000cdc:	20001138 	.word	0x20001138
 8000ce0:	20001094 	.word	0x20001094

08000ce4 <IOL_State_PreOP_Process>:

static uint8_t IOL_State_PreOP_Process (void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

    switch ( IOL_M2D_rxpacket.rw)
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <IOL_State_PreOP_Process+0x24>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d004      	beq.n	8000cfa <IOL_State_PreOP_Process+0x16>
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d105      	bne.n	8000d00 <IOL_State_PreOP_Process+0x1c>
    {
        case IOL_RW_Read :
            IOL_State_PreOP_Read_Channel();
 8000cf4:	f7ff ff12 	bl	8000b1c <IOL_State_PreOP_Read_Channel>
            break;
 8000cf8:	e002      	b.n	8000d00 <IOL_State_PreOP_Process+0x1c>
        case IOL_RW_Write :
            IOL_State_PreOP_Write_Channel();
 8000cfa:	f7ff ff8d 	bl	8000c18 <IOL_State_PreOP_Write_Channel>
            break;
 8000cfe:	bf00      	nop
    }

    return ;
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000f8c 	.word	0x20000f8c

08000d0c <IOL_State_OP_Read_Channel>:


//  OP 모드 Read 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_OP_Read_Channel (void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    switch (IOL_M2D_rxpacket.commchannel)
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <IOL_State_OP_Read_Channel+0x3c>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d812      	bhi.n	8000d3e <IOL_State_OP_Read_Channel+0x32>
 8000d18:	a201      	add	r2, pc, #4	@ (adr r2, 8000d20 <IOL_State_OP_Read_Channel+0x14>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000d3d 	.word	0x08000d3d
 8000d24:	08000d31 	.word	0x08000d31
 8000d28:	08000d3d 	.word	0x08000d3d
 8000d2c:	08000d37 	.word	0x08000d37
        case IOL_Channel_Process :
            
            break;

        case IOL_Channel_Page :
            IOL_State_OP_Page_ReadProcess();
 8000d30:	f000 fb4a 	bl	80013c8 <IOL_State_OP_Page_ReadProcess>

            break;
 8000d34:	e003      	b.n	8000d3e <IOL_State_OP_Read_Channel+0x32>
            

            break;

        case IOL_Channel_ISDU :
            IOL_State_OP_ISDU_ReadProcess();
 8000d36:	f000 f9fb 	bl	8001130 <IOL_State_OP_ISDU_ReadProcess>

            break;
 8000d3a:	e000      	b.n	8000d3e <IOL_State_OP_Read_Channel+0x32>
            break;
 8000d3c:	bf00      	nop
    }

    return ;
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000f8c 	.word	0x20000f8c

08000d4c <IOL_State_OP_Write_Channel>:

//  OP 모드 Write 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_OP_Write_Channel (void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
    switch (IOL_M2D_rxpacket.commchannel)
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <IOL_State_OP_Write_Channel+0x40>)
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d815      	bhi.n	8000d84 <IOL_State_OP_Write_Channel+0x38>
 8000d58:	a201      	add	r2, pc, #4	@ (adr r2, 8000d60 <IOL_State_OP_Write_Channel+0x14>)
 8000d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5e:	bf00      	nop
 8000d60:	08000d83 	.word	0x08000d83
 8000d64:	08000d71 	.word	0x08000d71
 8000d68:	08000d83 	.word	0x08000d83
 8000d6c:	08000d77 	.word	0x08000d77
            
            
            break;

        case IOL_Channel_Page :
            IOL_State_OP_Page_WriteProcess();
 8000d70:	f000 fb74 	bl	800145c <IOL_State_OP_Page_WriteProcess>

            break;
 8000d74:	e006      	b.n	8000d84 <IOL_State_OP_Write_Channel+0x38>
            

            break;

        case IOL_Channel_ISDU :
            IOL_Get_ISDU_WR_ODArr(uart1_rx_IDLE_buf);
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <IOL_State_OP_Write_Channel+0x44>)
 8000d78:	f000 f928 	bl	8000fcc <IOL_Get_ISDU_WR_ODArr>
            IOL_State_OP_ISDU_WriteProcess();
 8000d7c:	f000 fabe 	bl	80012fc <IOL_State_OP_ISDU_WriteProcess>

            break;
 8000d80:	e000      	b.n	8000d84 <IOL_State_OP_Write_Channel+0x38>
            break;
 8000d82:	bf00      	nop
    }

    return ;
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000f8c 	.word	0x20000f8c
 8000d90:	20000bb8 	.word	0x20000bb8

08000d94 <IOL_State_OP_Process>:

static uint8_t IOL_State_OP_Process (void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    switch ( IOL_M2D_rxpacket.rw)
 8000d98:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <IOL_State_OP_Process+0x24>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <IOL_State_OP_Process+0x16>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d105      	bne.n	8000db0 <IOL_State_OP_Process+0x1c>
    {
        case IOL_RW_Read :
            IOL_State_OP_Read_Channel();
 8000da4:	f7ff ffb2 	bl	8000d0c <IOL_State_OP_Read_Channel>
            break;
 8000da8:	e002      	b.n	8000db0 <IOL_State_OP_Process+0x1c>
        case IOL_RW_Write :
            IOL_State_OP_Write_Channel();
 8000daa:	f7ff ffcf 	bl	8000d4c <IOL_State_OP_Write_Channel>
            break;
 8000dae:	bf00      	nop
    }

    return ;
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000f8c 	.word	0x20000f8c

08000dbc <IOL_StateM_Process>:

uint8_t IOL_StateM_Process (void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    switch (stateIOLseq)
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <IOL_StateM_Process+0x3c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00c      	beq.n	8000de2 <IOL_StateM_Process+0x26>
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	dc0d      	bgt.n	8000de8 <IOL_StateM_Process+0x2c>
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <IOL_StateM_Process+0x1a>
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d003      	beq.n	8000ddc <IOL_StateM_Process+0x20>
 8000dd4:	e008      	b.n	8000de8 <IOL_StateM_Process+0x2c>
    {
        case IOL_StartUp :
            IOL_State_StartUp();
 8000dd6:	f7ff fe5f 	bl	8000a98 <IOL_State_StartUp>
            break;
 8000dda:	e005      	b.n	8000de8 <IOL_StateM_Process+0x2c>
        case IOL_PreOP :
            IOL_State_PreOP_Process();
 8000ddc:	f7ff ff82 	bl	8000ce4 <IOL_State_PreOP_Process>
            break;
 8000de0:	e002      	b.n	8000de8 <IOL_StateM_Process+0x2c>
        case IOL_OP :
            // IOL_Get_ISDU_WR_ODArr(uart1_rx_IDLE_buf);
            IOL_State_OP_Process();
 8000de2:	f7ff ffd7 	bl	8000d94 <IOL_State_OP_Process>
            break;
 8000de6:	bf00      	nop
    }
    #if 1 // debug Test 
    Test_M2D_TempValue = uart1_rx_IDLE_buf[3];
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <IOL_StateM_Process+0x40>)
 8000dea:	78da      	ldrb	r2, [r3, #3]
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <IOL_StateM_Process+0x44>)
 8000dee:	701a      	strb	r2, [r3, #0]
    #endif
    return ;
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20001138 	.word	0x20001138
 8000dfc:	20000bb8 	.word	0x20000bb8
 8000e00:	20000c1c 	.word	0x20000c1c

08000e04 <IOL_Parse_Rx_data>:

// 마스터로부터 받은 데이터를 분석하기 위해 파싱하여 해당 구조체멤버에 넣어줌
uint8_t IOL_Parse_Rx_data (uint8_t * pData)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    IOL_M2D_rxpacket.rw = Decode_MC_ReadWrite(*pData);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fbcd 	bl	80005b0 <Decode_MC_ReadWrite>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <IOL_Parse_Rx_data+0x74>)
 8000e1c:	701a      	strb	r2, [r3, #0]
    IOL_M2D_rxpacket.commchannel = Decode_MC_CommunicationChannel(*pData);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fbe2 	bl	80005ec <Decode_MC_CommunicationChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <IOL_Parse_Rx_data+0x74>)
 8000e2e:	705a      	strb	r2, [r3, #1]
    IOL_M2D_rxpacket.addr = Decode_MC_Address(*pData);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fc05 	bl	8000644 <Decode_MC_Address>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <IOL_Parse_Rx_data+0x74>)
 8000e40:	709a      	strb	r2, [r3, #2]

    IOL_M2D_rxpacket.mseqtype = Decode_CKT_Type(*(++pData));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3301      	adds	r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fc0c 	bl	800066a <Decode_CKT_Type>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <IOL_Parse_Rx_data+0x74>)
 8000e58:	70da      	strb	r2, [r3, #3]
    IOL_M2D_rxpacket.ckt = Decode_CKT_Checksum(*pData);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fc15 	bl	800068e <Decode_CKT_Checksum>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <IOL_Parse_Rx_data+0x74>)
 8000e6a:	711a      	strb	r2, [r3, #4]

    return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000f8c 	.word	0x20000f8c

08000e7c <IOL_Print_ParsingM2Ddata>:

void IOL_Print_ParsingM2Ddata (void)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af02      	add	r7, sp, #8
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <IOL_Print_ParsingM2Ddata+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4619      	mov	r1, r3
                                                                    , IOL_M2D_rxpacket.commchannel
 8000e88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <IOL_Print_ParsingM2Ddata+0x44>)
 8000e8a:	785b      	ldrb	r3, [r3, #1]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e8c:	4618      	mov	r0, r3
                                                                    , IOL_M2D_rxpacket.addr
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <IOL_Print_ParsingM2Ddata+0x44>)
 8000e90:	789b      	ldrb	r3, [r3, #2]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e92:	461c      	mov	r4, r3
                                                                    , IOL_M2D_rxpacket.mseqtype
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <IOL_Print_ParsingM2Ddata+0x44>)
 8000e96:	78db      	ldrb	r3, [r3, #3]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e98:	461a      	mov	r2, r3
                                                                    , IOL_M2D_rxpacket.ckt);
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <IOL_Print_ParsingM2Ddata+0x44>)
 8000e9c:	791b      	ldrb	r3, [r3, #4]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	9200      	str	r2, [sp, #0]
 8000ea2:	4623      	mov	r3, r4
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <IOL_Print_ParsingM2Ddata+0x48>)
 8000ea8:	f00b f98c 	bl	800c1c4 <iprintf>

    printf("Device State : %d\r\n", stateIOLseq);
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <IOL_Print_ParsingM2Ddata+0x4c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <IOL_Print_ParsingM2Ddata+0x50>)
 8000eb4:	f00b f986 	bl	800c1c4 <iprintf>
}
 8000eb8:	bf00      	nop
 8000eba:	3704      	adds	r7, #4
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	20000f8c 	.word	0x20000f8c
 8000ec4:	0800cf90 	.word	0x0800cf90
 8000ec8:	20001138 	.word	0x20001138
 8000ecc:	0800cfc8 	.word	0x0800cfc8

08000ed0 <IOL_Get_ISDU_Iservice>:
    {0xbd, 0x00},
};

//IO-Link ISDU 의 Iservice
static uint8_t IOL_Get_ISDU_Iservice (uint8_t * pData)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    uint8_t first_od = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
    // IOL_ISDUPacket_t isdudata;

    first_od = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	799b      	ldrb	r3, [r3, #6]
 8000ee0:	73fb      	strb	r3, [r7, #15]
    first_od = (first_od >> 4 ) & 0x0F;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	73fb      	strb	r3, [r7, #15]

    isdudata.iservice = first_od;
 8000ee8:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <IOL_Get_ISDU_Iservice+0x30>)
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	7013      	strb	r3, [r2, #0]
  
    return isdudata.iservice;
 8000eee:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <IOL_Get_ISDU_Iservice+0x30>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000fa4 	.word	0x20000fa4

08000f04 <IOL_Get_ISDU_ExtLength>:

// IO-lInk ISDU 의 extLength 
static uint8_t IOL_Get_ISDU_ExtLength (uint8_t * pData)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    uint8_t od_extlength = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]

    od_extlength = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH];
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	79db      	ldrb	r3, [r3, #7]
 8000f14:	73fb      	strb	r3, [r7, #15]
    
    return od_extlength;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <IOL_Get_ISDU_Length>:

// IO-Link ISDU 의 Length
static uint8_t IOL_Get_ISDU_Length (uint8_t * pData)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    uint8_t first_od = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
    uint8_t extlength = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73bb      	strb	r3, [r7, #14]
    // IOL_ISDUPacket_t isdudata;

    first_od = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	73fb      	strb	r3, [r7, #15]
    extlength = first_od & 0x0F;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	73bb      	strb	r3, [r7, #14]

    // extlength 있는 경우
    if (extlength == 1)
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10b      	bne.n	8000f60 <IOL_Get_ISDU_Length+0x3c>
    {
        extlength_flag = 1;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <IOL_Get_ISDU_Length+0x50>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
        extlength = IOL_Get_ISDU_ExtLength(pData);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffd8 	bl	8000f04 <IOL_Get_ISDU_ExtLength>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73bb      	strb	r3, [r7, #14]
        isdudata.length = extlength;
 8000f58:	4a07      	ldr	r2, [pc, #28]	@ (8000f78 <IOL_Get_ISDU_Length+0x54>)
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	7053      	strb	r3, [r2, #1]
 8000f5e:	e002      	b.n	8000f66 <IOL_Get_ISDU_Length+0x42>
    }
    else // extlegnth 없는 경우
    {
        isdudata.length = extlength;
 8000f60:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <IOL_Get_ISDU_Length+0x54>)
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	7053      	strb	r3, [r2, #1]
    }

    return isdudata.length;
 8000f66:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <IOL_Get_ISDU_Length+0x54>)
 8000f68:	785b      	ldrb	r3, [r3, #1]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200003b5 	.word	0x200003b5
 8000f78:	20000fa4 	.word	0x20000fa4

08000f7c <IOL_Get_ISDU_Index>:

static uint8_t IOL_Get_ISDU_Index (uint8_t * pData)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    //extlegnth 있는 경우
    if (extlength_flag == 1)
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <IOL_Get_ISDU_Index+0x48>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d107      	bne.n	8000f9c <IOL_Get_ISDU_Index+0x20>
    {
        isdudata.index = isdudata.isdu_od[2];
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000f8e:	7b9a      	ldrb	r2, [r3, #14]
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000f92:	709a      	strb	r2, [r3, #2]
        extlength_flag = 0;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <IOL_Get_ISDU_Index+0x48>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	e003      	b.n	8000fa4 <IOL_Get_ISDU_Index+0x28>
    }
    else // extlength 없는 경우
    {
        isdudata.index = isdudata.isdu_od[1];
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000f9e:	7b5a      	ldrb	r2, [r3, #13]
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000fa2:	709a      	strb	r2, [r3, #2]
    }

    // 마스터에서 8bit index 쓰기 요청이 있는 경우
    if(isdudata.iservice == 0x01)
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d103      	bne.n	8000fb4 <IOL_Get_ISDU_Index+0x38>
    {
        // 8bit 쓰기 요청 플래그 셋
        isdudata.isdu_od_writeReq8bit_flag = 1;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }

    return isdudata.index;
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <IOL_Get_ISDU_Index+0x4c>)
 8000fb6:	789b      	ldrb	r3, [r3, #2]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	200003b5 	.word	0x200003b5
 8000fc8:	20000fa4 	.word	0x20000fa4

08000fcc <IOL_Get_ISDU_WR_ODArr>:

// ISDU Write OD 데이터 수신 처리
uint8_t IOL_Get_ISDU_WR_ODArr (uint8_t * pData)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    
    isdudata.isdu_od[isdudata.isdu_od_cnt++] = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8000fd4:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	b2d1      	uxtb	r1, r2
 8000fde:	4a1e      	ldr	r2, [pc, #120]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fe0:	f882 103e 	strb.w	r1, [r2, #62]	@ 0x3e
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	799a      	ldrb	r2, [r3, #6]
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000fec:	440b      	add	r3, r1
 8000fee:	731a      	strb	r2, [r3, #12]
    isdudata.isdu_od[isdudata.isdu_od_cnt++] = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH];
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	b2d1      	uxtb	r1, r2
 8000ffa:	4a17      	ldr	r2, [pc, #92]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8000ffc:	f882 103e 	strb.w	r1, [r2, #62]	@ 0x3e
 8001000:	4619      	mov	r1, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	79da      	ldrb	r2, [r3, #7]
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001008:	440b      	add	r3, r1
 800100a:	731a      	strb	r2, [r3, #12]
    
    // 첫 OD 데이터 수신시 Iservice값과 ISDU의 데이터 길이를 구하기 위함.
    if (isdudata.isdu_od_cnt == 2)
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800100e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001012:	2b02      	cmp	r3, #2
 8001014:	d105      	bne.n	8001022 <IOL_Get_ISDU_WR_ODArr+0x56>
    {
        IOL_Get_ISDU_Iservice(pData);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff5a 	bl	8000ed0 <IOL_Get_ISDU_Iservice>
        IOL_Get_ISDU_Length(pData);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff81 	bl	8000f24 <IOL_Get_ISDU_Length>
    }

    // OD 데이터의 길이까지 데이터 쌓은 경우.
    if (isdudata.isdu_od_cnt >= isdudata.length)
 8001022:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001024:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	429a      	cmp	r2, r3
 800102e:	d30d      	bcc.n	800104c <IOL_Get_ISDU_WR_ODArr+0x80>
    {
        IOL_Get_ISDU_Index(pData);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffa3 	bl	8000f7c <IOL_Get_ISDU_Index>

        isdudata.length = 0;
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001038:	2200      	movs	r2, #0
 800103a:	705a      	strb	r2, [r3, #1]
        isdudata.isdu_od_cnt = 0; // od length clear
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        isdudata.isdu_od_rxcplt = 1;
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001046:	2201      	movs	r2, #1
 8001048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    }

    return ;
 800104c:	bf00      	nop
 800104e:	bf00      	nop
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000fa4 	.word	0x20000fa4

0800105c <IOL_Clear_PDBuffer>:
    return ;
}

// IO-Link 송/수신 데이터를 업데이트 및 갱신하기 전 송신완료시 버퍼를 클리어해 준다
void IOL_Clear_PDBuffer (void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    memset(device_ProcessDataIn_Arr, 0, sizeof(device_ProcessDataIn_Arr));
 8001060:	2207      	movs	r2, #7
 8001062:	2100      	movs	r1, #0
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <IOL_Clear_PDBuffer+0x1c>)
 8001066:	f00b f9f5 	bl	800c454 <memset>
    memset(device_ProcessDataOut_Arr, 0, sizeof(device_ProcessDataOut_Arr));
 800106a:	2205      	movs	r2, #5
 800106c:	2100      	movs	r1, #0
 800106e:	4803      	ldr	r0, [pc, #12]	@ (800107c <IOL_Clear_PDBuffer+0x20>)
 8001070:	f00b f9f0 	bl	800c454 <memset>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000f9c 	.word	0x20000f9c
 800107c:	20000f94 	.word	0x20000f94

08001080 <IOL_Make_Resp_PDOD>:
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
}

// 각 index 응답 송신하는 부분을 모듈화하기 위한 함수
static void IOL_Make_Resp_PDOD (uint8_t * respArray, uint8_t size)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
    uint8_t (* Resp_IndexArray)[IOL_OP_ISDU_OD_LENGTH];
    uint8_t od_size = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

    Resp_IndexArray = respArray;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60bb      	str	r3, [r7, #8]
    od_size = size;
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	73fb      	strb	r3, [r7, #15]

    device_ProcessDataIn_Arr[0] = Resp_IndexArray[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <IOL_Make_Resp_PDOD+0x78>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	4413      	add	r3, r2
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <IOL_Make_Resp_PDOD+0x7c>)
 80010a6:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = Resp_IndexArray[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <IOL_Make_Resp_PDOD+0x78>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	785a      	ldrb	r2, [r3, #1]
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <IOL_Make_Resp_PDOD+0x7c>)
 80010b6:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <IOL_Make_Resp_PDOD+0x78>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <IOL_Make_Resp_PDOD+0x78>)
 80010c2:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= od_size)
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <IOL_Make_Resp_PDOD+0x78>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d806      	bhi.n	80010dc <IOL_Make_Resp_PDOD+0x5c>
    {
        isdudata.isdu_od_writereq_flag = 0;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <IOL_Make_Resp_PDOD+0x80>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        IOL_OP_ISDU_OD_Res_cnt = 0;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <IOL_Make_Resp_PDOD+0x78>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2106      	movs	r1, #6
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <IOL_Make_Resp_PDOD+0x7c>)
 80010e2:	f7ff fb79 	bl	80007d8 <OP_CKS_GetChecksum>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <IOL_Make_Resp_PDOD+0x7c>)
 80010ec:	719a      	strb	r2, [r3, #6]
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200003b6 	.word	0x200003b6
 80010fc:	20000f9c 	.word	0x20000f9c
 8001100:	20000fa4 	.word	0x20000fa4

08001104 <IOL_Make_Resp_default>:

static void IOL_Make_Resp_default (void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    // device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt++; // Test cnt Value 
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <IOL_Make_Resp_default+0x24>)
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <IOL_Make_Resp_default+0x28>)
 800110e:	715a      	strb	r2, [r3, #5]
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2106      	movs	r1, #6
 8001114:	4805      	ldr	r0, [pc, #20]	@ (800112c <IOL_Make_Resp_default+0x28>)
 8001116:	f7ff fb5f 	bl	80007d8 <OP_CKS_GetChecksum>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4b03      	ldr	r3, [pc, #12]	@ (800112c <IOL_Make_Resp_default+0x28>)
 8001120:	719a      	strb	r2, [r3, #6]
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200003e0 	.word	0x200003e0
 800112c:	20000f9c 	.word	0x20000f9c

08001130 <IOL_State_OP_ISDU_ReadProcess>:
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
}

// ISDU OD Read Process
uint8_t IOL_State_OP_ISDU_ReadProcess (void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
            //     break;
        }
        // device_ProcessDataOut_arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
    }
    #else
    if (isdudata.isdu_od_writereq_flag == 1)
 8001134:	4b63      	ldr	r3, [pc, #396]	@ (80012c4 <IOL_State_OP_ISDU_ReadProcess+0x194>)
 8001136:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800113a:	2b01      	cmp	r3, #1
 800113c:	f040 80ac 	bne.w	8001298 <IOL_State_OP_ISDU_ReadProcess+0x168>
    {
        // isdudata.isdudata.isdu_od_writereq_flag = 0;

        switch (isdudata.index)
 8001140:	4b60      	ldr	r3, [pc, #384]	@ (80012c4 <IOL_State_OP_ISDU_ReadProcess+0x194>)
 8001142:	789b      	ldrb	r3, [r3, #2]
 8001144:	3b10      	subs	r3, #16
 8001146:	2b30      	cmp	r3, #48	@ 0x30
 8001148:	f200 80a8 	bhi.w	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>
 800114c:	a201      	add	r2, pc, #4	@ (adr r2, 8001154 <IOL_State_OP_ISDU_ReadProcess+0x24>)
 800114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001152:	bf00      	nop
 8001154:	0800127b 	.word	0x0800127b
 8001158:	0800129d 	.word	0x0800129d
 800115c:	08001219 	.word	0x08001219
 8001160:	08001235 	.word	0x08001235
 8001164:	0800129d 	.word	0x0800129d
 8001168:	08001223 	.word	0x08001223
 800116c:	08001285 	.word	0x08001285
 8001170:	0800128f 	.word	0x0800128f
 8001174:	0800123f 	.word	0x0800123f
 8001178:	08001249 	.word	0x08001249
 800117c:	08001253 	.word	0x08001253
 8001180:	0800129d 	.word	0x0800129d
 8001184:	0800129d 	.word	0x0800129d
 8001188:	0800129d 	.word	0x0800129d
 800118c:	0800129d 	.word	0x0800129d
 8001190:	0800129d 	.word	0x0800129d
 8001194:	0800129d 	.word	0x0800129d
 8001198:	0800129d 	.word	0x0800129d
 800119c:	0800129d 	.word	0x0800129d
 80011a0:	0800129d 	.word	0x0800129d
 80011a4:	08001267 	.word	0x08001267
 80011a8:	08001271 	.word	0x08001271
 80011ac:	0800129d 	.word	0x0800129d
 80011b0:	0800129d 	.word	0x0800129d
 80011b4:	0800129d 	.word	0x0800129d
 80011b8:	0800129d 	.word	0x0800129d
 80011bc:	0800129d 	.word	0x0800129d
 80011c0:	0800129d 	.word	0x0800129d
 80011c4:	0800129d 	.word	0x0800129d
 80011c8:	0800129d 	.word	0x0800129d
 80011cc:	0800129d 	.word	0x0800129d
 80011d0:	0800129d 	.word	0x0800129d
 80011d4:	0800129d 	.word	0x0800129d
 80011d8:	0800129d 	.word	0x0800129d
 80011dc:	0800129d 	.word	0x0800129d
 80011e0:	0800129d 	.word	0x0800129d
 80011e4:	0800129d 	.word	0x0800129d
 80011e8:	0800129d 	.word	0x0800129d
 80011ec:	0800129d 	.word	0x0800129d
 80011f0:	0800129d 	.word	0x0800129d
 80011f4:	0800129d 	.word	0x0800129d
 80011f8:	0800129d 	.word	0x0800129d
 80011fc:	0800129d 	.word	0x0800129d
 8001200:	0800129d 	.word	0x0800129d
 8001204:	0800129d 	.word	0x0800129d
 8001208:	0800129d 	.word	0x0800129d
 800120c:	0800129d 	.word	0x0800129d
 8001210:	0800129d 	.word	0x0800129d
 8001214:	0800125d 	.word	0x0800125d
        {
            case IOL_Index_ProductName :
                // IOL_Make_Resp_ProductName();
                IOL_Make_Resp_PDOD(IOL_OP_ProductName, IOL_OP_ISDU_PRODUCTNAME_LENGTH);
 8001218:	210d      	movs	r1, #13
 800121a:	482b      	ldr	r0, [pc, #172]	@ (80012c8 <IOL_State_OP_ISDU_ReadProcess+0x198>)
 800121c:	f7ff ff30 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 8001220:	e03c      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_SerialNumber :
                DEBUG_GPIO_TOGGLE;
 8001222:	2101      	movs	r1, #1
 8001224:	4829      	ldr	r0, [pc, #164]	@ (80012cc <IOL_State_OP_ISDU_ReadProcess+0x19c>)
 8001226:	f001 fe6b 	bl	8002f00 <HAL_GPIO_TogglePin>
                // IOL_Make_Resp_SerialNumber();
                IOL_Make_Resp_PDOD(IOL_OP_SerialNumber, IOL_OP_ISDU_SERIALNUMBER_LENGTH);
 800122a:	2105      	movs	r1, #5
 800122c:	4828      	ldr	r0, [pc, #160]	@ (80012d0 <IOL_State_OP_ISDU_ReadProcess+0x1a0>)
 800122e:	f7ff ff27 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 8001232:	e033      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>
            //     break;
            // case IOL_Index_ProductText :
            //     break;
            case IOL_Index_ProductID :
                // IOL_Make_Resp_ProductID();
                IOL_Make_Resp_PDOD(IOL_OP_ProductID, IOL_OP_ISDU_PRODUCTID_LENGTH);
 8001234:	2106      	movs	r1, #6
 8001236:	4827      	ldr	r0, [pc, #156]	@ (80012d4 <IOL_State_OP_ISDU_ReadProcess+0x1a4>)
 8001238:	f7ff ff22 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 800123c:	e02e      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_ApplicationSpecificTag :
                // IOL_Make_Resp_ApplicationSpecificTag();
                IOL_Make_Resp_PDOD(IOL_OP_ApplicationSpecificTag, IOL_OP_ISDU_APPLICATIONSPECIFICTAG_LENGTH);
 800123e:	2112      	movs	r1, #18
 8001240:	4825      	ldr	r0, [pc, #148]	@ (80012d8 <IOL_State_OP_ISDU_ReadProcess+0x1a8>)
 8001242:	f7ff ff1d 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 8001246:	e029      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_FunctionTag :
                // IOL_Make_Resp_ApplicationSpecificTag();
                IOL_Make_Resp_PDOD(IOL_OP_ApplicationSpecificTag, IOL_OP_ISDU_APPLICATIONSPECIFICTAG_LENGTH);
 8001248:	2112      	movs	r1, #18
 800124a:	4823      	ldr	r0, [pc, #140]	@ (80012d8 <IOL_State_OP_ISDU_ReadProcess+0x1a8>)
 800124c:	f7ff ff18 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 8001250:	e024      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>
                
            case IOL_Index_LocationTag :
                // IOL_Make_Resp_ApplicationSpecificTag();
                IOL_Make_Resp_PDOD(IOL_OP_ApplicationSpecificTag, IOL_OP_ISDU_APPLICATIONSPECIFICTAG_LENGTH);
 8001252:	2112      	movs	r1, #18
 8001254:	4820      	ldr	r0, [pc, #128]	@ (80012d8 <IOL_State_OP_ISDU_ReadProcess+0x1a8>)
 8001256:	f7ff ff13 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 800125a:	e01f      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_PreferredIndex :
                // DEBUG_GPIO_TOGGLE;
                // IOL_Make_Resp_ExampleParameter();
                IOL_Make_Resp_PDOD(IOL_OP_ExampleParameter, IOL_OP_ISDU_EXAMPLEPARAMETER_LENGTH);
 800125c:	2102      	movs	r1, #2
 800125e:	481f      	ldr	r0, [pc, #124]	@ (80012dc <IOL_State_OP_ISDU_ReadProcess+0x1ac>)
 8001260:	f7ff ff0e 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 8001264:	e01a      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_DeviceStatus :
                // IOL_Make_Resp_DeviceStatus();
                IOL_Make_Resp_PDOD(IOL_OP_DeviceStatus, IOL_OP_ISDU_DEVICESTATUS_LENGTH);
 8001266:	2102      	movs	r1, #2
 8001268:	481d      	ldr	r0, [pc, #116]	@ (80012e0 <IOL_State_OP_ISDU_ReadProcess+0x1b0>)
 800126a:	f7ff ff09 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 800126e:	e015      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_DetailedDeviceStatus :
                // IOL_Make_Resp_DetailedDeviceStatus();
                IOL_Make_Resp_PDOD(IOL_OP_DetailedDeviceStatus, IOL_OP_ISDU_DETAILEDDEVICESTATUS_LENGTH);
 8001270:	2103      	movs	r1, #3
 8001272:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <IOL_State_OP_ISDU_ReadProcess+0x1b4>)
 8001274:	f7ff ff04 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 8001278:	e010      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>
            
            case IOL_Index_VendorName :
                // IOL_Make_Resp_VendorName();
                IOL_Make_Resp_PDOD(IOL_OP_VendorName, IOL_OP_ISDU_VENDORNAME_LENGTH);
 800127a:	2122      	movs	r1, #34	@ 0x22
 800127c:	481a      	ldr	r0, [pc, #104]	@ (80012e8 <IOL_State_OP_ISDU_ReadProcess+0x1b8>)
 800127e:	f7ff feff 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 8001282:	e00b      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_HardwareRevision :
                // IOL_Make_Resp_HWRevision();
                IOL_Make_Resp_PDOD(IOL_OP_HWRevision, IOL_OP_ISDU_HWREVISION_LENGTH);
 8001284:	2122      	movs	r1, #34	@ 0x22
 8001286:	4819      	ldr	r0, [pc, #100]	@ (80012ec <IOL_State_OP_ISDU_ReadProcess+0x1bc>)
 8001288:	f7ff fefa 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 800128c:	e006      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>
            
            case IOL_Index_FirmwareRevision :
                // IOL_Make_Resp_FWRevision();
                IOL_Make_Resp_PDOD(IOL_OP_FWRevision, IOL_OP_ISDU_FWREVISION_LENGTH);
 800128e:	2122      	movs	r1, #34	@ 0x22
 8001290:	4817      	ldr	r0, [pc, #92]	@ (80012f0 <IOL_State_OP_ISDU_ReadProcess+0x1c0>)
 8001292:	f7ff fef5 	bl	8001080 <IOL_Make_Resp_PDOD>
                break;
 8001296:	e001      	b.n	800129c <IOL_State_OP_ISDU_ReadProcess+0x16c>
        // device_ProcessDataOut_arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
    }
    #endif
    else
    {
        IOL_Make_Resp_default();
 8001298:	f7ff ff34 	bl	8001104 <IOL_Make_Resp_default>
    }

    IOL_ENABLE;
 800129c:	2201      	movs	r2, #1
 800129e:	2140      	movs	r1, #64	@ 0x40
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f001 fe14 	bl	8002ed0 <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataIn_Arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 80012a8:	2207      	movs	r2, #7
 80012aa:	4912      	ldr	r1, [pc, #72]	@ (80012f4 <IOL_State_OP_ISDU_ReadProcess+0x1c4>)
 80012ac:	4812      	ldr	r0, [pc, #72]	@ (80012f8 <IOL_State_OP_ISDU_ReadProcess+0x1c8>)
 80012ae:	f005 f8bb 	bl	8006428 <HAL_UART_Transmit_IT>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <IOL_State_OP_ISDU_ReadProcess+0x18c>
    {
        Error_Handler();
 80012b8:	f000 fa45 	bl	8001746 <Error_Handler>
    }

    return ;
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000fa4 	.word	0x20000fa4
 80012c8:	20000054 	.word	0x20000054
 80012cc:	48000400 	.word	0x48000400
 80012d0:	20000070 	.word	0x20000070
 80012d4:	200000a0 	.word	0x200000a0
 80012d8:	2000007c 	.word	0x2000007c
 80012dc:	200000ac 	.word	0x200000ac
 80012e0:	200000b8 	.word	0x200000b8
 80012e4:	200000bc 	.word	0x200000bc
 80012e8:	200000c4 	.word	0x200000c4
 80012ec:	20000108 	.word	0x20000108
 80012f0:	2000014c 	.word	0x2000014c
 80012f4:	20000f9c 	.word	0x20000f9c
 80012f8:	20001094 	.word	0x20001094

080012fc <IOL_State_OP_ISDU_WriteProcess>:

// ISDU OD Process
uint8_t IOL_State_OP_ISDU_WriteProcess (void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    if (isdudata.isdu_od_rxcplt == 1)
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 8001302:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001306:	2b01      	cmp	r3, #1
 8001308:	d107      	bne.n	800131a <IOL_State_OP_ISDU_WriteProcess+0x1e>
    {
        isdudata.isdu_od_rxcplt = 0;
 800130a:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

        isdudata.isdu_od_writereq_flag = 1;
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_Arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
 800131a:	2200      	movs	r2, #0
 800131c:	2104      	movs	r1, #4
 800131e:	480e      	ldr	r0, [pc, #56]	@ (8001358 <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 8001320:	f7ff fa5a 	bl	80007d8 <OP_CKS_GetChecksum>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 800132a:	711a      	strb	r2, [r3, #4]

    IOL_ENABLE;
 800132c:	2201      	movs	r2, #1
 800132e:	2140      	movs	r1, #64	@ 0x40
 8001330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001334:	f001 fdcc 	bl	8002ed0 <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_Arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 8001338:	2205      	movs	r2, #5
 800133a:	4907      	ldr	r1, [pc, #28]	@ (8001358 <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 800133c:	4807      	ldr	r0, [pc, #28]	@ (800135c <IOL_State_OP_ISDU_WriteProcess+0x60>)
 800133e:	f005 f873 	bl	8006428 <HAL_UART_Transmit_IT>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <IOL_State_OP_ISDU_WriteProcess+0x50>
    {
        Error_Handler();
 8001348:	f000 f9fd 	bl	8001746 <Error_Handler>
    }

    return ;
 800134c:	bf00      	nop
 800134e:	bf00      	nop
}
 8001350:	4618      	mov	r0, r3
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000fa4 	.word	0x20000fa4
 8001358:	20000f94 	.word	0x20000f94
 800135c:	20001094 	.word	0x20001094

08001360 <IOL_ConnectToIFM_Read>:
extern uint8_t device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH];
extern uint8_t ProcessDataIn_cnt;

// for 문 수정이 필요. j 카운트 부분이 쓸모없이 중복 실행.
void IOL_ConnectToIFM_Read (void)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	71bb      	strb	r3, [r7, #6]
    uint8_t setpage1first[2] = {0x00, 0x22};
 800136a:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 800136e:	80bb      	strh	r3, [r7, #4]
    // uint8_t Pagevalue[16] = { 0 };

    for (i = 2; i < 16; i++)
 8001370:	2302      	movs	r3, #2
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	e01a      	b.n	80013ac <IOL_ConnectToIFM_Read+0x4c>
    {
        for(j = 0; j < 2; j++)
 8001376:	2300      	movs	r3, #0
 8001378:	71bb      	strb	r3, [r7, #6]
 800137a:	e00a      	b.n	8001392 <IOL_ConnectToIFM_Read+0x32>
        {
            IOL_ISDUPage_value[j] = setpage1first[j];
 800137c:	79ba      	ldrb	r2, [r7, #6]
 800137e:	79bb      	ldrb	r3, [r7, #6]
 8001380:	3208      	adds	r2, #8
 8001382:	443a      	add	r2, r7
 8001384:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <IOL_ConnectToIFM_Read+0x60>)
 800138a:	54d1      	strb	r1, [r2, r3]
        for(j = 0; j < 2; j++)
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	3301      	adds	r3, #1
 8001390:	71bb      	strb	r3, [r7, #6]
 8001392:	79bb      	ldrb	r3, [r7, #6]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d9f1      	bls.n	800137c <IOL_ConnectToIFM_Read+0x1c>
        }
        IOL_ISDUPage_value[i] = IOL_Page1_SeqValue[i - 1];
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	1e5a      	subs	r2, r3, #1
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4909      	ldr	r1, [pc, #36]	@ (80013c4 <IOL_ConnectToIFM_Read+0x64>)
 80013a0:	5c89      	ldrb	r1, [r1, r2]
 80013a2:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <IOL_ConnectToIFM_Read+0x60>)
 80013a4:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < 16; i++)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	3301      	adds	r3, #1
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	d9e1      	bls.n	8001376 <IOL_ConnectToIFM_Read+0x16>
    }
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200003b8 	.word	0x200003b8
 80013c4:	20000190 	.word	0x20000190

080013c8 <IOL_State_OP_Page_ReadProcess>:

uint8_t IOL_State_OP_Page_ReadProcess (void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
    IOL_ConnectToIFM_Read();
 80013cc:	f7ff ffc8 	bl	8001360 <IOL_ConnectToIFM_Read>

    device_Page_OD_arr[0] = IOL_ISDUPage_value[IOL_OP_OD_Page_Res_cnt];
 80013d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <IOL_State_OP_Page_ReadProcess+0x80>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <IOL_State_OP_Page_ReadProcess+0x84>)
 80013d8:	5c9a      	ldrb	r2, [r3, r2]
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <IOL_State_OP_Page_ReadProcess+0x88>)
 80013dc:	701a      	strb	r2, [r3, #0]
    device_Page_OD_arr[1] = IOL_ISDUPage_value[IOL_OP_OD_Page_Res_cnt + 1];
 80013de:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <IOL_State_OP_Page_ReadProcess+0x80>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	4a19      	ldr	r2, [pc, #100]	@ (800144c <IOL_State_OP_Page_ReadProcess+0x84>)
 80013e6:	5cd2      	ldrb	r2, [r2, r3]
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <IOL_State_OP_Page_ReadProcess+0x88>)
 80013ea:	705a      	strb	r2, [r3, #1]
    IOL_OP_OD_Page_Res_cnt++;
 80013ec:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <IOL_State_OP_Page_ReadProcess+0x80>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <IOL_State_OP_Page_ReadProcess+0x80>)
 80013f6:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_OD_Page_Res_cnt >= 16)
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <IOL_State_OP_Page_ReadProcess+0x80>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d906      	bls.n	800140e <IOL_State_OP_Page_ReadProcess+0x46>
    {
        DEBUG_GPIO_TOGGLE; // 디버깅 트리거
 8001400:	2101      	movs	r1, #1
 8001402:	4814      	ldr	r0, [pc, #80]	@ (8001454 <IOL_State_OP_Page_ReadProcess+0x8c>)
 8001404:	f001 fd7c 	bl	8002f00 <HAL_GPIO_TogglePin>
        IOL_OP_OD_Page_Res_cnt = 0;
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <IOL_State_OP_Page_ReadProcess+0x80>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
    }

    device_Page_OD_arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_Page_OD_arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2106      	movs	r1, #6
 8001412:	480f      	ldr	r0, [pc, #60]	@ (8001450 <IOL_State_OP_Page_ReadProcess+0x88>)
 8001414:	f7ff f9e0 	bl	80007d8 <OP_CKS_GetChecksum>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <IOL_State_OP_Page_ReadProcess+0x88>)
 800141e:	719a      	strb	r2, [r3, #6]

    IOL_ENABLE;
 8001420:	2201      	movs	r2, #1
 8001422:	2140      	movs	r1, #64	@ 0x40
 8001424:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001428:	f001 fd52 	bl	8002ed0 <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_Page_OD_arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 800142c:	2207      	movs	r2, #7
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <IOL_State_OP_Page_ReadProcess+0x88>)
 8001430:	4809      	ldr	r0, [pc, #36]	@ (8001458 <IOL_State_OP_Page_ReadProcess+0x90>)
 8001432:	f004 fff9 	bl	8006428 <HAL_UART_Transmit_IT>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <IOL_State_OP_Page_ReadProcess+0x78>
    {
        Error_Handler();
 800143c:	f000 f983 	bl	8001746 <Error_Handler>
    }
}
 8001440:	bf00      	nop
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200003ca 	.word	0x200003ca
 800144c:	200003b8 	.word	0x200003b8
 8001450:	200003cc 	.word	0x200003cc
 8001454:	48000400 	.word	0x48000400
 8001458:	20001094 	.word	0x20001094

0800145c <IOL_State_OP_Page_WriteProcess>:

uint8_t IOL_State_OP_Page_WriteProcess (void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <IOL_State_OP_Page_WriteProcess+0x44>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <IOL_State_OP_Page_WriteProcess+0x48>)
 8001466:	70da      	strb	r2, [r3, #3]
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_Arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2104      	movs	r1, #4
 800146c:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <IOL_State_OP_Page_WriteProcess+0x48>)
 800146e:	f7ff f9b3 	bl	80007d8 <OP_CKS_GetChecksum>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <IOL_State_OP_Page_WriteProcess+0x48>)
 8001478:	711a      	strb	r2, [r3, #4]

    IOL_ENABLE;
 800147a:	2201      	movs	r2, #1
 800147c:	2140      	movs	r1, #64	@ 0x40
 800147e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001482:	f001 fd25 	bl	8002ed0 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_Arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 8001486:	2205      	movs	r2, #5
 8001488:	4906      	ldr	r1, [pc, #24]	@ (80014a4 <IOL_State_OP_Page_WriteProcess+0x48>)
 800148a:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <IOL_State_OP_Page_WriteProcess+0x4c>)
 800148c:	f004 ffcc 	bl	8006428 <HAL_UART_Transmit_IT>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <IOL_State_OP_Page_WriteProcess+0x3e>
    {
        Error_Handler();
 8001496:	f000 f956 	bl	8001746 <Error_Handler>
    }
}
 800149a:	bf00      	nop
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200003e0 	.word	0x200003e0
 80014a4:	20000f94 	.word	0x20000f94
 80014a8:	20001094 	.word	0x20001094

080014ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_DMA_Init+0x50>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b6:	4a11      	ldr	r2, [pc, #68]	@ (80014fc <MX_DMA_Init+0x50>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_DMA_Init+0x50>)
 80014c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_DMA_Init+0x50>)
 80014cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ce:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <MX_DMA_Init+0x50>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_DMA_Init+0x50>)
 80014d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	200b      	movs	r0, #11
 80014e8:	f001 f809 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014ec:	200b      	movs	r0, #11
 80014ee:	f001 f820 	bl	8002532 <HAL_NVIC_EnableIRQ>

}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b43      	ldr	r3, [pc, #268]	@ (8001624 <MX_GPIO_Init+0x124>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a42      	ldr	r2, [pc, #264]	@ (8001624 <MX_GPIO_Init+0x124>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b40      	ldr	r3, [pc, #256]	@ (8001624 <MX_GPIO_Init+0x124>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800152e:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <MX_GPIO_Init+0x124>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a3c      	ldr	r2, [pc, #240]	@ (8001624 <MX_GPIO_Init+0x124>)
 8001534:	f043 0320 	orr.w	r3, r3, #32
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b3a      	ldr	r3, [pc, #232]	@ (8001624 <MX_GPIO_Init+0x124>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <MX_GPIO_Init+0x124>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a36      	ldr	r2, [pc, #216]	@ (8001624 <MX_GPIO_Init+0x124>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b34      	ldr	r3, [pc, #208]	@ (8001624 <MX_GPIO_Init+0x124>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <MX_GPIO_Init+0x124>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a30      	ldr	r2, [pc, #192]	@ (8001624 <MX_GPIO_Init+0x124>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <MX_GPIO_Init+0x124>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800157c:	482a      	ldr	r0, [pc, #168]	@ (8001628 <MX_GPIO_Init+0x128>)
 800157e:	f001 fca7 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2140      	movs	r1, #64	@ 0x40
 8001586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800158a:	f001 fca1 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2101      	movs	r1, #1
 8001592:	4826      	ldr	r0, [pc, #152]	@ (800162c <MX_GPIO_Init+0x12c>)
 8001594:	f001 fc9c 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001598:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	481d      	ldr	r0, [pc, #116]	@ (8001628 <MX_GPIO_Init+0x128>)
 80015b2:	f001 fb0b 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015b6:	23a0      	movs	r3, #160	@ 0xa0
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ce:	f001 fafd 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d2:	2340      	movs	r3, #64	@ 0x40
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f001 faee 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f0:	2301      	movs	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	4809      	ldr	r0, [pc, #36]	@ (800162c <MX_GPIO_Init+0x12c>)
 8001608:	f001 fae0 	bl	8002bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2017      	movs	r0, #23
 8001612:	f000 ff74 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001616:	2017      	movs	r0, #23
 8001618:	f000 ff8b 	bl	8002532 <HAL_NVIC_EnableIRQ>

}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	@ 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	48000800 	.word	0x48000800
 800162c:	48000400 	.word	0x48000400

08001630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001634:	f000 fdf5 	bl	8002222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001638:	f000 f83a 	bl	80016b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163c:	f7ff ff60 	bl	8001500 <MX_GPIO_Init>
  MX_DMA_Init();
 8001640:	f7ff ff34 	bl	80014ac <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001644:	f000 fc2a 	bl	8001e9c <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8001648:	f009 ffd8 	bl	800b5fc <MX_USB_Device_Init>
  MX_TIM1_Init();
 800164c:	f000 fbac 	bl	8001da8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8001650:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001654:	4910      	ldr	r1, [pc, #64]	@ (8001698 <main+0x68>)
 8001656:	4811      	ldr	r0, [pc, #68]	@ (800169c <main+0x6c>)
 8001658:	f000 f87b 	bl	8001752 <Q_Init>

  HAL_Delay(3000);
 800165c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001660:	f000 fe50 	bl	8002304 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8001664:	480e      	ldr	r0, [pc, #56]	@ (80016a0 <main+0x70>)
 8001666:	f004 f9b3 	bl	80059d0 <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 800166a:	f000 fd6f 	bl	800214c <GetClockSourcePrint>
  BootMessagePrint();
 800166e:	f000 fd3d 	bl	80020ec <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001672:	2264      	movs	r2, #100	@ 0x64
 8001674:	490b      	ldr	r1, [pc, #44]	@ (80016a4 <main+0x74>)
 8001676:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <main+0x78>)
 8001678:	f006 fc44 	bl	8007f04 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <main+0x7c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <main+0x7c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0204 	bic.w	r2, r2, #4
 800168a:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 800168c:	f000 fcf6 	bl	800207c <User_Toggle_Led>
    ProcessDataIn_IncreaseCntValue();
 8001690:	f000 fd0a 	bl	80020a8 <ProcessDataIn_IncreaseCntValue>
    User_Toggle_Led();
 8001694:	bf00      	nop
 8001696:	e7f9      	b.n	800168c <main+0x5c>
 8001698:	200007cc 	.word	0x200007cc
 800169c:	20001128 	.word	0x20001128
 80016a0:	20000fe8 	.word	0x20000fe8
 80016a4:	20000bb8 	.word	0x20000bb8
 80016a8:	20001094 	.word	0x20001094
 80016ac:	20001034 	.word	0x20001034

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	@ 0x50
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0318 	add.w	r3, r7, #24
 80016ba:	2238      	movs	r2, #56	@ 0x38
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f00a fec8 	bl	800c454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f003 f952 	bl	800497c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80016d8:	2321      	movs	r3, #33	@ 0x21
 80016da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80016e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016e2:	2301      	movs	r3, #1
 80016e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	2302      	movs	r3, #2
 80016e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ea:	2303      	movs	r3, #3
 80016ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80016ee:	2306      	movs	r3, #6
 80016f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016f2:	2355      	movs	r3, #85	@ 0x55
 80016f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80016fa:	2304      	movs	r3, #4
 80016fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016fe:	2302      	movs	r3, #2
 8001700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	4618      	mov	r0, r3
 8001708:	f003 f9ec 	bl	8004ae4 <HAL_RCC_OscConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001712:	f000 f818 	bl	8001746 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001716:	230f      	movs	r3, #15
 8001718:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171a:	2303      	movs	r3, #3
 800171c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2104      	movs	r1, #4
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fcea 	bl	8005108 <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800173a:	f000 f804 	bl	8001746 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3750      	adds	r7, #80	@ 0x50
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174a:	b672      	cpsid	i
}
 800174c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174e:	bf00      	nop
 8001750:	e7fd      	b.n	800174e <Error_Handler+0x8>

08001752 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	4613      	mov	r3, r2
 800175e:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	88fa      	ldrh	r2, [r7, #6]
 800177c:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	60da      	str	r2, [r3, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	4613      	mov	r3, r2
 800179c:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 800179e:	2300      	movs	r3, #0
 80017a0:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f8ea 	bl	800197c <Q_NumEmptyBytes>
 80017a8:	4603      	mov	r3, r0
 80017aa:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	db44      	blt.n	800183e <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	4413      	add	r3, r2
 80017c0:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	8afa      	ldrh	r2, [r7, #22]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d20b      	bcs.n	80017e4 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80017d6:	4413      	add	r3, r2
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	4618      	mov	r0, r3
 80017de:	f00a feb4 	bl	800c54a <memcpy>
 80017e2:	e01d      	b.n	8001820 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80017fe:	4413      	add	r3, r2
 8001800:	8aba      	ldrh	r2, [r7, #20]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	4618      	mov	r0, r3
 8001806:	f00a fea0 	bl	800c54a <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	68d8      	ldr	r0, [r3, #12]
 800180e:	8abb      	ldrh	r3, [r7, #20]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	18d1      	adds	r1, r2, r3
 8001814:	88fa      	ldrh	r2, [r7, #6]
 8001816:	8abb      	ldrh	r3, [r7, #20]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	461a      	mov	r2, r3
 800181c:	f00a fe95 	bl	800c54a <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	881a      	ldrh	r2, [r3, #0]
 8001824:	8afb      	ldrh	r3, [r7, #22]
 8001826:	fbb3 f1f2 	udiv	r1, r3, r2
 800182a:	fb01 f202 	mul.w	r2, r1, r2
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	b29b      	uxth	r3, r3
 8001832:	b21a      	sxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8001838:	2301      	movs	r3, #1
 800183a:	77fb      	strb	r3, [r7, #31]
 800183c:	e00e      	b.n	800185c <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	88db      	ldrh	r3, [r3, #6]
 8001842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001846:	4293      	cmp	r3, r2
 8001848:	d004      	beq.n	8001854 <Q_Write+0xc4>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	88db      	ldrh	r3, [r3, #6]
 800184e:	3301      	adds	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	e001      	b.n	8001858 <Q_Write+0xc8>
 8001854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	80da      	strh	r2, [r3, #6]
    return ret;    
 800185c:	7ffb      	ldrb	r3, [r7, #31]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	4613      	mov	r3, r2
 8001872:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 f864 	bl	8001942 <Q_NumContents>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	4293      	cmp	r3, r2
 8001882:	d848      	bhi.n	8001916 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800188a:	b29a      	uxth	r2, r3
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4413      	add	r3, r2
 8001890:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	8aba      	ldrh	r2, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	d20b      	bcs.n	80018b4 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	88fa      	ldrh	r2, [r7, #6]
 80018aa:	4619      	mov	r1, r3
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f00a fe4c 	bl	800c54a <memcpy>
 80018b2:	e01d      	b.n	80018f0 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	881a      	ldrh	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	8a7a      	ldrh	r2, [r7, #18]
 80018d2:	4619      	mov	r1, r3
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f00a fe38 	bl	800c54a <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 80018da:	8a7b      	ldrh	r3, [r7, #18]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	18d0      	adds	r0, r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	68d9      	ldr	r1, [r3, #12]
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	8a7b      	ldrh	r3, [r7, #18]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	f00a fe2d 	bl	800c54a <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018f6:	461a      	mov	r2, r3
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	4413      	add	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	8812      	ldrh	r2, [r2, #0]
 8001900:	fb93 f1f2 	sdiv	r1, r3, r2
 8001904:	fb01 f202 	mul.w	r2, r1, r2
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	b21a      	sxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	809a      	strh	r2, [r3, #4]
        ret = true;
 8001910:	2301      	movs	r3, #1
 8001912:	75fb      	strb	r3, [r7, #23]
 8001914:	e010      	b.n	8001938 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	891b      	ldrh	r3, [r3, #8]
 800191a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191e:	4293      	cmp	r3, r2
 8001920:	d004      	beq.n	800192c <Q_Read+0xc6>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	891b      	ldrh	r3, [r3, #8]
 8001926:	3301      	adds	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	e001      	b.n	8001930 <Q_Read+0xca>
 800192c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	811a      	strh	r2, [r3, #8]
        ret = false;
 8001934:	2300      	movs	r3, #0
 8001936:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8001938:	7dfb      	ldrb	r3, [r7, #23]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001956:	4413      	add	r3, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	8812      	ldrh	r2, [r2, #0]
 8001964:	fb93 f1f2 	sdiv	r1, r3, r2
 8001968:	fb01 f202 	mul.w	r2, r1, r2
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	b29b      	uxth	r3, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	881c      	ldrh	r4, [r3, #0]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffda 	bl	8001942 <Q_NumContents>
 800198e:	4603      	mov	r3, r0
 8001990:	1ae3      	subs	r3, r4, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29b      	uxth	r3, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <HAL_MspInit+0x44>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019aa:	4a0e      	ldr	r2, [pc, #56]	@ (80019e4 <HAL_MspInit+0x44>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019b2:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <HAL_MspInit+0x44>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_MspInit+0x44>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c2:	4a08      	ldr	r2, [pc, #32]	@ (80019e4 <HAL_MspInit+0x44>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_MspInit+0x44>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019d6:	f003 f875 	bl	8004ac4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <NMI_Handler+0x4>

080019f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <MemManage_Handler+0x4>

08001a00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3e:	f000 fc43 	bl	80022c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <DMA1_Channel1_IRQHandler+0x10>)
 8001a4e:	f000 ff6e 	bl	800292e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20001034 	.word	0x20001034

08001a5c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <USB_LP_IRQHandler+0x10>)
 8001a62:	f001 fb7a 	bl	800315a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20002788 	.word	0x20002788

08001a70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001a74:	2020      	movs	r0, #32
 8001a76:	f001 fa5d 	bl	8002f34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a7a:	2080      	movs	r0, #128	@ 0x80
 8001a7c:	f001 fa5a 	bl	8002f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a8a:	f004 f80b 	bl	8005aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000fe8 	.word	0x20000fe8

08001a98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <USART1_IRQHandler+0x3c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d006      	beq.n	8001ab8 <USART1_IRQHandler+0x20>
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <USART1_IRQHandler+0x3c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d107      	bne.n	8001ac8 <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <USART1_IRQHandler+0x3c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2208      	movs	r2, #8
 8001abe:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8001ac0:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <USART1_IRQHandler+0x3c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <USART1_IRQHandler+0x3c>)
 8001aca:	f004 fd41 	bl	8006550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20001094 	.word	0x20001094

08001ad8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8001ae4:	4818      	ldr	r0, [pc, #96]	@ (8001b48 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ae6:	f7ff ff2c 	bl	8001942 <Q_NumContents>
 8001aea:	4603      	mov	r3, r0
 8001aec:	81fb      	strh	r3, [r7, #14]
 8001aee:	89fb      	ldrh	r3, [r7, #14]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d016      	beq.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8001af4:	f009 fe78 	bl	800b7e8 <CDC_Transmit_Is_Busy>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d011      	beq.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	89fb      	ldrh	r3, [r7, #14]
 8001b04:	4413      	add	r3, r2
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001b0a:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8001b0c:	89fb      	ldrh	r3, [r7, #14]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	490f      	ldr	r1, [pc, #60]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001b12:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001b14:	f7ff fea7 	bl	8001866 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8001b18:	89fb      	ldrh	r3, [r7, #14]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001b1e:	f009 fe2b 	bl	800b778 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d109      	bne.n	8001b40 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3301      	adds	r3, #1
 8001b32:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001b34:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a07      	ldr	r2, [pc, #28]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b3e:	6013      	str	r3, [r2, #0]
  }
}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20001128 	.word	0x20001128
 8001b4c:	200003e2 	.word	0x200003e2
 8001b50:	200003e4 	.word	0x200003e4
 8001b54:	40012c00 	.word	0x40012c00
 8001b58:	200003d8 	.word	0x200003d8
 8001b5c:	200003dc 	.word	0x200003dc

08001b60 <HAL_UARTEx_RxEventCallback>:

uint8_t IOL_Rx_IDLEFlag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8001b6c:	887a      	ldrh	r2, [r7, #2]
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c2c <HAL_UARTEx_RxEventCallback+0xcc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a2d      	ldr	r2, [pc, #180]	@ (8001c2c <HAL_UARTEx_RxEventCallback+0xcc>)
 8001b76:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a2c      	ldr	r2, [pc, #176]	@ (8001c30 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d150      	bne.n	8001c24 <HAL_UARTEx_RxEventCallback+0xc4>
  {


    if (uart_rx_IDLE_TotalCnt >= 3)
 8001b82:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <HAL_UARTEx_RxEventCallback+0xcc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d90f      	bls.n	8001baa <HAL_UARTEx_RxEventCallback+0x4a>
    {
      // DEBUG_GPIO_TOGGLE;
      if (IOL_Rx_IDLEFlag == 1)
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d103      	bne.n	8001b9a <HAL_UARTEx_RxEventCallback+0x3a>
      {
        IOL_Rx_IDLEFlag = 0;
 8001b92:	4b28      	ldr	r3, [pc, #160]	@ (8001c34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e007      	b.n	8001baa <HAL_UARTEx_RxEventCallback+0x4a>
      }
      else
      {
        // DEBUG_GPIO_TOGGLE;
        IOL_Rx_IDLEFlag = 1;
 8001b9a:	4b26      	ldr	r3, [pc, #152]	@ (8001c34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_Parse_Rx_data(uart1_rx_IDLE_buf);
 8001ba0:	4825      	ldr	r0, [pc, #148]	@ (8001c38 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001ba2:	f7ff f92f 	bl	8000e04 <IOL_Parse_Rx_data>
        // IOL_Parse_Rx_data();
        IOL_StateM_Process();
 8001ba6:	f7ff f909 	bl	8000dbc <IOL_StateM_Process>
        // IOL_StartUp_Seq_Page(Size);
      }

    }

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8001baa:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8001bba:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2264      	movs	r2, #100	@ 0x64
 8001bc0:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	e853 3f00 	ldrex	r3, [r3]
 8001be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f043 0310 	orr.w	r3, r3, #16
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bfa:	6979      	ldr	r1, [r7, #20]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	e841 2300 	strex	r3, r2, [r1]
 8001c02:	613b      	str	r3, [r7, #16]
   return(result);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e6      	bne.n	8001bd8 <HAL_UARTEx_RxEventCallback+0x78>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001c0a:	2264      	movs	r2, #100	@ 0x64
 8001c0c:	490a      	ldr	r1, [pc, #40]	@ (8001c38 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001c0e:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001c10:	f006 f978 	bl	8007f04 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0204 	bic.w	r2, r2, #4
 8001c22:	601a      	str	r2, [r3, #0]

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8001c24:	bf00      	nop
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000bb4 	.word	0x20000bb4
 8001c30:	40013800 	.word	0x40013800
 8001c34:	200003d3 	.word	0x200003d3
 8001c38:	20000bb8 	.word	0x20000bb8
 8001c3c:	20001034 	.word	0x20001034
 8001c40:	20001094 	.word	0x20001094

08001c44 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_UART_TxCpltCallback+0x2c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d107      	bne.n	8001c66 <HAL_UART_TxCpltCallback+0x22>
  {
    IOL_DISABLE;
 8001c56:	2200      	movs	r2, #0
 8001c58:	2140      	movs	r1, #64	@ 0x40
 8001c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c5e:	f001 f937 	bl	8002ed0 <HAL_GPIO_WritePin>
    
    IOL_Clear_PDBuffer();
 8001c62:	f7ff f9fb 	bl	800105c <IOL_Clear_PDBuffer>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40013800 	.word	0x40013800

08001c74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e00a      	b.n	8001c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c86:	f3af 8000 	nop.w
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	b2ca      	uxtb	r2, r1
 8001c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbf0      	blt.n	8001c86 <_read+0x12>
  }

  return len;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_isatty>:

int _isatty(int file)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d20:	4a14      	ldr	r2, [pc, #80]	@ (8001d74 <_sbrk+0x5c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <_sbrk+0x60>)
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d34:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <_sbrk+0x64>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	@ (8001d80 <_sbrk+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d207      	bcs.n	8001d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d48:	f00a fbd2 	bl	800c4f0 <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	220c      	movs	r2, #12
 8001d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <_sbrk+0x64>)
 8001d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20008000 	.word	0x20008000
 8001d78:	00000400 	.word	0x00000400
 8001d7c:	200003d4 	.word	0x200003d4
 8001d80:	20002a68 	.word	0x20002a68

08001d84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <SystemInit+0x20>)
 8001d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <SystemInit+0x20>)
 8001d90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001dc8:	4a20      	ldr	r2, [pc, #128]	@ (8001e4c <MX_TIM1_Init+0xa4>)
 8001dca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001dce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001ddc:	22a9      	movs	r2, #169	@ 0xa9
 8001dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de0:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001de6:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dec:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001df2:	4815      	ldr	r0, [pc, #84]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001df4:	f003 fd94 	bl	8005920 <HAL_TIM_Base_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001dfe:	f7ff fca2 	bl	8001746 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480e      	ldr	r0, [pc, #56]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001e10:	f003 ff98 	bl	8005d44 <HAL_TIM_ConfigClockSource>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001e1a:	f7ff fc94 	bl	8001746 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <MX_TIM1_Init+0xa0>)
 8001e30:	f004 f9e2 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e3a:	f7ff fc84 	bl	8001746 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	3720      	adds	r7, #32
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000fe8 	.word	0x20000fe8
 8001e4c:	40012c00 	.word	0x40012c00

08001e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <HAL_TIM_Base_MspInit+0x44>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d113      	bne.n	8001e8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e62:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <HAL_TIM_Base_MspInit+0x48>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e66:	4a0c      	ldr	r2, [pc, #48]	@ (8001e98 <HAL_TIM_Base_MspInit+0x48>)
 8001e68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <HAL_TIM_Base_MspInit+0x48>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2019      	movs	r0, #25
 8001e80:	f000 fb3d 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e84:	2019      	movs	r0, #25
 8001e86:	f000 fb54 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40012c00 	.word	0x40012c00
 8001e98:	40021000 	.word	0x40021000

08001e9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ea0:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ea2:	4a24      	ldr	r2, [pc, #144]	@ (8001f34 <MX_USART1_UART_Init+0x98>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ea8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001eae:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001eb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eb4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed0:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ed6:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ee8:	4811      	ldr	r0, [pc, #68]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001eea:	f004 fa4d 	bl	8006388 <HAL_UART_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001ef4:	f7ff fc27 	bl	8001746 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	480d      	ldr	r0, [pc, #52]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001efc:	f005 ff86 	bl	8007e0c <HAL_UARTEx_SetTxFifoThreshold>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001f06:	f7ff fc1e 	bl	8001746 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4808      	ldr	r0, [pc, #32]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001f0e:	f005 ffbb 	bl	8007e88 <HAL_UARTEx_SetRxFifoThreshold>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001f18:	f7ff fc15 	bl	8001746 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f1c:	4804      	ldr	r0, [pc, #16]	@ (8001f30 <MX_USART1_UART_Init+0x94>)
 8001f1e:	f005 ff3c 	bl	8007d9a <HAL_UARTEx_DisableFifoMode>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001f28:	f7ff fc0d 	bl	8001746 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20001094 	.word	0x20001094
 8001f34:	40013800 	.word	0x40013800

08001f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b09a      	sub	sp, #104	@ 0x68
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	2244      	movs	r2, #68	@ 0x44
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00a fa7b 	bl	800c454 <memset>
  if(uartHandle->Instance==USART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a38      	ldr	r2, [pc, #224]	@ (8002044 <HAL_UART_MspInit+0x10c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d169      	bne.n	800203c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 fae3 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f80:	f7ff fbe1 	bl	8001746 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f84:	4b30      	ldr	r3, [pc, #192]	@ (8002048 <HAL_UART_MspInit+0x110>)
 8001f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f88:	4a2f      	ldr	r2, [pc, #188]	@ (8002048 <HAL_UART_MspInit+0x110>)
 8001f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f90:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_UART_MspInit+0x110>)
 8001f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_UART_MspInit+0x110>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa0:	4a29      	ldr	r2, [pc, #164]	@ (8002048 <HAL_UART_MspInit+0x110>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa8:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <HAL_UART_MspInit+0x110>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fb4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fb8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd4:	f000 fdfa 	bl	8002bcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <HAL_UART_MspInit+0x114>)
 8001fda:	4a1d      	ldr	r2, [pc, #116]	@ (8002050 <HAL_UART_MspInit+0x118>)
 8001fdc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_UART_MspInit+0x114>)
 8001fe0:	2218      	movs	r2, #24
 8001fe2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_UART_MspInit+0x114>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fea:	4b18      	ldr	r3, [pc, #96]	@ (800204c <HAL_UART_MspInit+0x114>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff0:	4b16      	ldr	r3, [pc, #88]	@ (800204c <HAL_UART_MspInit+0x114>)
 8001ff2:	2280      	movs	r2, #128	@ 0x80
 8001ff4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_UART_MspInit+0x114>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <HAL_UART_MspInit+0x114>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_UART_MspInit+0x114>)
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002008:	4b10      	ldr	r3, [pc, #64]	@ (800204c <HAL_UART_MspInit+0x114>)
 800200a:	2200      	movs	r2, #0
 800200c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800200e:	480f      	ldr	r0, [pc, #60]	@ (800204c <HAL_UART_MspInit+0x114>)
 8002010:	f000 faaa 	bl	8002568 <HAL_DMA_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800201a:	f7ff fb94 	bl	8001746 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <HAL_UART_MspInit+0x114>)
 8002022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002026:	4a09      	ldr	r2, [pc, #36]	@ (800204c <HAL_UART_MspInit+0x114>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	2025      	movs	r0, #37	@ 0x25
 8002032:	f000 fa64 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002036:	2025      	movs	r0, #37	@ 0x25
 8002038:	f000 fa7b 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800203c:	bf00      	nop
 800203e:	3768      	adds	r7, #104	@ 0x68
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40013800 	.word	0x40013800
 8002048:	40021000 	.word	0x40021000
 800204c:	20001034 	.word	0x20001034
 8002050:	40020008 	.word	0x40020008

08002054 <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	b29b      	uxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	4803      	ldr	r0, [pc, #12]	@ (8002078 <_write+0x24>)
 800206a:	f7ff fb91 	bl	8001790 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 800206e:	687b      	ldr	r3, [r7, #4]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20001128 	.word	0x20001128

0800207c <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 8002080:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <User_Toggle_Led+0x24>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002088:	d307      	bcc.n	800209a <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 800208a:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <User_Toggle_Led+0x24>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 8002090:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002094:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <User_Toggle_Led+0x28>)
 8002096:	f000 ff33 	bl	8002f00 <HAL_GPIO_TogglePin>
    }
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200003d8 	.word	0x200003d8
 80020a4:	48000800 	.word	0x48000800

080020a8 <ProcessDataIn_IncreaseCntValue>:

void ProcessDataIn_IncreaseCntValue (void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
    if ( TIM1_CNT_2 >= 1000)
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <ProcessDataIn_IncreaseCntValue+0x34>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020b4:	d310      	bcc.n	80020d8 <ProcessDataIn_IncreaseCntValue+0x30>
    {
        TIM1_CNT_2 = 0;
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <ProcessDataIn_IncreaseCntValue+0x34>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
        ProcessDataIn_cnt++;
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <ProcessDataIn_IncreaseCntValue+0x38>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <ProcessDataIn_IncreaseCntValue+0x38>)
 80020c6:	701a      	strb	r2, [r3, #0]

        printf("Master to Device Temp Value :   %d\r\n", Test_M2D_TempValue);
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <ProcessDataIn_IncreaseCntValue+0x3c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	4806      	ldr	r0, [pc, #24]	@ (80020e8 <ProcessDataIn_IncreaseCntValue+0x40>)
 80020d0:	f00a f878 	bl	800c1c4 <iprintf>
        IOL_Print_ParsingM2Ddata();
 80020d4:	f7fe fed2 	bl	8000e7c <IOL_Print_ParsingM2Ddata>
    }
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200003dc 	.word	0x200003dc
 80020e0:	200003e0 	.word	0x200003e0
 80020e4:	20000c1c 	.word	0x20000c1c
 80020e8:	0800cfdc 	.word	0x0800cfdc

080020ec <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 80020f0:	480c      	ldr	r0, [pc, #48]	@ (8002124 <BootMessagePrint+0x38>)
 80020f2:	f00a f8cf 	bl	800c294 <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 80020f6:	490c      	ldr	r1, [pc, #48]	@ (8002128 <BootMessagePrint+0x3c>)
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <BootMessagePrint+0x40>)
 80020fa:	f00a f863 	bl	800c1c4 <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 80020fe:	490c      	ldr	r1, [pc, #48]	@ (8002130 <BootMessagePrint+0x44>)
 8002100:	480c      	ldr	r0, [pc, #48]	@ (8002134 <BootMessagePrint+0x48>)
 8002102:	f00a f85f 	bl	800c1c4 <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 8002106:	490c      	ldr	r1, [pc, #48]	@ (8002138 <BootMessagePrint+0x4c>)
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <BootMessagePrint+0x50>)
 800210a:	f00a f85b 	bl	800c1c4 <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 800210e:	4a0c      	ldr	r2, [pc, #48]	@ (8002140 <BootMessagePrint+0x54>)
 8002110:	490c      	ldr	r1, [pc, #48]	@ (8002144 <BootMessagePrint+0x58>)
 8002112:	480d      	ldr	r0, [pc, #52]	@ (8002148 <BootMessagePrint+0x5c>)
 8002114:	f00a f856 	bl	800c1c4 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <BootMessagePrint+0x38>)
 800211a:	f00a f8bb 	bl	800c294 <puts>
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	0800d004 	.word	0x0800d004
 8002128:	0800d04c 	.word	0x0800d04c
 800212c:	0800d05c 	.word	0x0800d05c
 8002130:	0800d078 	.word	0x0800d078
 8002134:	0800d080 	.word	0x0800d080
 8002138:	0800d09c 	.word	0x0800d09c
 800213c:	0800d0b0 	.word	0x0800d0b0
 8002140:	0800d0cc 	.word	0x0800d0cc
 8002144:	0800d0d8 	.word	0x0800d0d8
 8002148:	0800d0e4 	.word	0x0800d0e4

0800214c <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8002150:	4819      	ldr	r0, [pc, #100]	@ (80021b8 <GetClockSourcePrint+0x6c>)
 8002152:	f00a f89f 	bl	800c294 <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 8002156:	f003 f913 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 800215a:	4603      	mov	r3, r0
 800215c:	4a17      	ldr	r2, [pc, #92]	@ (80021bc <GetClockSourcePrint+0x70>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9b      	lsrs	r3, r3, #18
 8002164:	4619      	mov	r1, r3
 8002166:	4816      	ldr	r0, [pc, #88]	@ (80021c0 <GetClockSourcePrint+0x74>)
 8002168:	f00a f82c 	bl	800c1c4 <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 800216c:	f003 f96a 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 8002170:	4603      	mov	r3, r0
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <GetClockSourcePrint+0x70>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	0c9b      	lsrs	r3, r3, #18
 800217a:	4619      	mov	r1, r3
 800217c:	4811      	ldr	r0, [pc, #68]	@ (80021c4 <GetClockSourcePrint+0x78>)
 800217e:	f00a f821 	bl	800c1c4 <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8002182:	f003 f96b 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 8002186:	4603      	mov	r3, r0
 8002188:	4a0c      	ldr	r2, [pc, #48]	@ (80021bc <GetClockSourcePrint+0x70>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0c9b      	lsrs	r3, r3, #18
 8002190:	4619      	mov	r1, r3
 8002192:	480d      	ldr	r0, [pc, #52]	@ (80021c8 <GetClockSourcePrint+0x7c>)
 8002194:	f00a f816 	bl	800c1c4 <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8002198:	f003 f976 	bl	8005488 <HAL_RCC_GetPCLK2Freq>
 800219c:	4603      	mov	r3, r0
 800219e:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <GetClockSourcePrint+0x70>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	0c9b      	lsrs	r3, r3, #18
 80021a6:	4619      	mov	r1, r3
 80021a8:	4808      	ldr	r0, [pc, #32]	@ (80021cc <GetClockSourcePrint+0x80>)
 80021aa:	f00a f80b 	bl	800c1c4 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 80021ae:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <GetClockSourcePrint+0x6c>)
 80021b0:	f00a f870 	bl	800c294 <puts>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	0800d004 	.word	0x0800d004
 80021bc:	431bde83 	.word	0x431bde83
 80021c0:	0800d104 	.word	0x0800d104
 80021c4:	0800d134 	.word	0x0800d134
 80021c8:	0800d164 	.word	0x0800d164
 80021cc:	0800d194 	.word	0x0800d194

080021d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021d0:	480d      	ldr	r0, [pc, #52]	@ (8002208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80021d4:	f7ff fdd6 	bl	8001d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d8:	480c      	ldr	r0, [pc, #48]	@ (800220c <LoopForever+0x6>)
  ldr r1, =_edata
 80021da:	490d      	ldr	r1, [pc, #52]	@ (8002210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <LoopForever+0xe>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021f0:	4c0a      	ldr	r4, [pc, #40]	@ (800221c <LoopForever+0x16>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80021fe:	f00a f97d 	bl	800c4fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002202:	f7ff fa15 	bl	8001630 <main>

08002206 <LoopForever>:

LoopForever:
    b LoopForever
 8002206:	e7fe      	b.n	8002206 <LoopForever>
  ldr   r0, =_estack
 8002208:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800220c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002210:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 8002214:	0800d290 	.word	0x0800d290
  ldr r2, =_sbss
 8002218:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 800221c:	20002a64 	.word	0x20002a64

08002220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC1_2_IRQHandler>

08002222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f95b 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002232:	200f      	movs	r0, #15
 8002234:	f000 f80e 	bl	8002254 <HAL_InitTick>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	71fb      	strb	r3, [r7, #7]
 8002242:	e001      	b.n	8002248 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002244:	f7ff fbac 	bl	80019a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002248:	79fb      	ldrb	r3, [r7, #7]

}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002260:	4b16      	ldr	r3, [pc, #88]	@ (80022bc <HAL_InitTick+0x68>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d022      	beq.n	80022ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002268:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <HAL_InitTick+0x6c>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <HAL_InitTick+0x68>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002274:	fbb1 f3f3 	udiv	r3, r1, r3
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f966 	bl	800254e <HAL_SYSTICK_Config>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10f      	bne.n	80022a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	d809      	bhi.n	80022a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800228e:	2200      	movs	r2, #0
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	f04f 30ff 	mov.w	r0, #4294967295
 8002296:	f000 f932 	bl	80024fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <HAL_InitTick+0x70>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e007      	b.n	80022b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	e004      	b.n	80022b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e001      	b.n	80022b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200001a8 	.word	0x200001a8
 80022c0:	200001a0 	.word	0x200001a0
 80022c4:	200001a4 	.word	0x200001a4

080022c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <HAL_IncTick+0x1c>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <HAL_IncTick+0x20>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	4a03      	ldr	r2, [pc, #12]	@ (80022e4 <HAL_IncTick+0x1c>)
 80022d8:	6013      	str	r3, [r2, #0]
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	20001ab4 	.word	0x20001ab4
 80022e8:	200001a8 	.word	0x200001a8

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <HAL_GetTick+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20001ab4 	.word	0x20001ab4

08002304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff ffee 	bl	80022ec <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d004      	beq.n	8002328 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_Delay+0x40>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4413      	add	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002328:	bf00      	nop
 800232a:	f7ff ffdf 	bl	80022ec <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	d8f7      	bhi.n	800232a <HAL_Delay+0x26>
  {
  }
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200001a8 	.word	0x200001a8

08002348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237a:	4a04      	ldr	r2, [pc, #16]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	60d3      	str	r3, [r2, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 0307 	and.w	r3, r3, #7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0b      	blt.n	80023d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4907      	ldr	r1, [pc, #28]	@ (80023e4 <__NVIC_EnableIRQ+0x38>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	@ (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	@ (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	@ 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f1c3 0307 	rsb	r3, r3, #7
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf28      	it	cs
 800245a:	2304      	movcs	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	2b06      	cmp	r3, #6
 8002464:	d902      	bls.n	800246c <NVIC_EncodePriority+0x30>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b03      	subs	r3, #3
 800246a:	e000      	b.n	800246e <NVIC_EncodePriority+0x32>
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	401a      	ands	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43d9      	mvns	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	4313      	orrs	r3, r2
         );
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	@ 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff8e 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff29 	bl	8002348 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff40 	bl	8002390 <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff90 	bl	800243c <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5f 	bl	80023e8 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff33 	bl	80023ac <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa4 	bl	80024a4 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e08d      	b.n	8002696 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	4b47      	ldr	r3, [pc, #284]	@ (80026a0 <HAL_DMA_Init+0x138>)
 8002582:	429a      	cmp	r2, r3
 8002584:	d80f      	bhi.n	80025a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	4b45      	ldr	r3, [pc, #276]	@ (80026a4 <HAL_DMA_Init+0x13c>)
 800258e:	4413      	add	r3, r2
 8002590:	4a45      	ldr	r2, [pc, #276]	@ (80026a8 <HAL_DMA_Init+0x140>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	009a      	lsls	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a42      	ldr	r2, [pc, #264]	@ (80026ac <HAL_DMA_Init+0x144>)
 80025a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80025a4:	e00e      	b.n	80025c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b40      	ldr	r3, [pc, #256]	@ (80026b0 <HAL_DMA_Init+0x148>)
 80025ae:	4413      	add	r3, r2
 80025b0:	4a3d      	ldr	r2, [pc, #244]	@ (80026a8 <HAL_DMA_Init+0x140>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	009a      	lsls	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a3c      	ldr	r2, [pc, #240]	@ (80026b4 <HAL_DMA_Init+0x14c>)
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80025da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa76 	bl	8002b08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002624:	d102      	bne.n	800262c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002640:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <HAL_DMA_Init+0x104>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d80c      	bhi.n	800266c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fa96 	bl	8002b84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	e008      	b.n	800267e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40020407 	.word	0x40020407
 80026a4:	bffdfff8 	.word	0xbffdfff8
 80026a8:	cccccccd 	.word	0xcccccccd
 80026ac:	40020000 	.word	0x40020000
 80026b0:	bffdfbf8 	.word	0xbffdfbf8
 80026b4:	40020400 	.word	0x40020400

080026b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_DMA_Start_IT+0x20>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e066      	b.n	80027a6 <HAL_DMA_Start_IT+0xee>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d155      	bne.n	8002798 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f9bb 	bl	8002a8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 020e 	orr.w	r2, r2, #14
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	e00f      	b.n	8002750 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0204 	bic.w	r2, r2, #4
 800273e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 020a 	orr.w	r2, r2, #10
 800274e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800276c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002784:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e005      	b.n	80027a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
 80027a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d005      	beq.n	80027d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2204      	movs	r2, #4
 80027ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e037      	b.n	8002842 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 020e 	bic.w	r2, r2, #14
 80027e0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027f0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f003 021f 	and.w	r2, r3, #31
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800281e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00c      	beq.n	8002842 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002832:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002836:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002840:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d00d      	beq.n	8002894 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2204      	movs	r2, #4
 800287c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	e047      	b.n	8002924 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 020e 	bic.w	r2, r2, #14
 80028a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c8:	f003 021f 	and.w	r2, r3, #31
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	2101      	movs	r1, #1
 80028d2:	fa01 f202 	lsl.w	r2, r1, r2
 80028d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002902:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
    }
  }
  return status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2204      	movs	r2, #4
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d026      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x7a>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d021      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d107      	bne.n	8002982 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0204 	bic.w	r2, r2, #4
 8002980:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	f003 021f 	and.w	r2, r3, #31
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	2104      	movs	r1, #4
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	2b00      	cmp	r3, #0
 800299c:	d071      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029a6:	e06c      	b.n	8002a82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2202      	movs	r2, #2
 80029b2:	409a      	lsls	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d02e      	beq.n	8002a1a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d029      	beq.n	8002a1a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10b      	bne.n	80029ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 020a 	bic.w	r2, r2, #10
 80029e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	2102      	movs	r1, #2
 80029fa:	fa01 f202 	lsl.w	r2, r1, r2
 80029fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d038      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a18:	e033      	b.n	8002a82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2208      	movs	r2, #8
 8002a24:	409a      	lsls	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d02a      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d025      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020e 	bic.w	r2, r2, #14
 8002a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	2101      	movs	r1, #1
 8002a56:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
}
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002aa2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ab4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	f003 021f 	and.w	r2, r3, #31
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d108      	bne.n	8002aec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002aea:	e007      	b.n	8002afc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d802      	bhi.n	8002b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e001      	b.n	8002b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b24:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3b08      	subs	r3, #8
 8002b32:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	009a      	lsls	r2, r3, #2
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a0b      	ldr	r2, [pc, #44]	@ (8002b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002b52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40020407 	.word	0x40020407
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40020820 	.word	0x40020820
 8002b7c:	cccccccd 	.word	0xcccccccd
 8002b80:	40020880 	.word	0x40020880

08002b84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a08      	ldr	r2, [pc, #32]	@ (8002bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ba6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	1000823f 	.word	0x1000823f
 8002bc8:	40020940 	.word	0x40020940

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bda:	e15a      	b.n	8002e92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 814c 	beq.w	8002e8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d005      	beq.n	8002c0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d130      	bne.n	8002c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c42:	2201      	movs	r2, #1
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0201 	and.w	r2, r3, #1
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d017      	beq.n	8002caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d123      	bne.n	8002cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	6939      	ldr	r1, [r7, #16]
 8002cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0203 	and.w	r2, r3, #3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80a6 	beq.w	8002e8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d40:	4b5b      	ldr	r3, [pc, #364]	@ (8002eb0 <HAL_GPIO_Init+0x2e4>)
 8002d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d44:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb0 <HAL_GPIO_Init+0x2e4>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d4c:	4b58      	ldr	r3, [pc, #352]	@ (8002eb0 <HAL_GPIO_Init+0x2e4>)
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d58:	4a56      	ldr	r2, [pc, #344]	@ (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d82:	d01f      	beq.n	8002dc4 <HAL_GPIO_Init+0x1f8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb8 <HAL_GPIO_Init+0x2ec>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d019      	beq.n	8002dc0 <HAL_GPIO_Init+0x1f4>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a4b      	ldr	r2, [pc, #300]	@ (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d013      	beq.n	8002dbc <HAL_GPIO_Init+0x1f0>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a4a      	ldr	r2, [pc, #296]	@ (8002ec0 <HAL_GPIO_Init+0x2f4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00d      	beq.n	8002db8 <HAL_GPIO_Init+0x1ec>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a49      	ldr	r2, [pc, #292]	@ (8002ec4 <HAL_GPIO_Init+0x2f8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <HAL_GPIO_Init+0x1e8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a48      	ldr	r2, [pc, #288]	@ (8002ec8 <HAL_GPIO_Init+0x2fc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <HAL_GPIO_Init+0x1e4>
 8002dac:	2305      	movs	r3, #5
 8002dae:	e00a      	b.n	8002dc6 <HAL_GPIO_Init+0x1fa>
 8002db0:	2306      	movs	r3, #6
 8002db2:	e008      	b.n	8002dc6 <HAL_GPIO_Init+0x1fa>
 8002db4:	2304      	movs	r3, #4
 8002db6:	e006      	b.n	8002dc6 <HAL_GPIO_Init+0x1fa>
 8002db8:	2303      	movs	r3, #3
 8002dba:	e004      	b.n	8002dc6 <HAL_GPIO_Init+0x1fa>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e002      	b.n	8002dc6 <HAL_GPIO_Init+0x1fa>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_GPIO_Init+0x1fa>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	f002 0203 	and.w	r2, r2, #3
 8002dcc:	0092      	lsls	r2, r2, #2
 8002dce:	4093      	lsls	r3, r2
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd6:	4937      	ldr	r1, [pc, #220]	@ (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	3302      	adds	r3, #2
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002de4:	4b39      	ldr	r3, [pc, #228]	@ (8002ecc <HAL_GPIO_Init+0x300>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e08:	4a30      	ldr	r2, [pc, #192]	@ (8002ecc <HAL_GPIO_Init+0x300>)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ecc <HAL_GPIO_Init+0x300>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e32:	4a26      	ldr	r2, [pc, #152]	@ (8002ecc <HAL_GPIO_Init+0x300>)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e38:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_GPIO_Init+0x300>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ecc <HAL_GPIO_Init+0x300>)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ecc <HAL_GPIO_Init+0x300>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e86:	4a11      	ldr	r2, [pc, #68]	@ (8002ecc <HAL_GPIO_Init+0x300>)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f47f ae9d 	bne.w	8002bdc <HAL_GPIO_Init+0x10>
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	48000400 	.word	0x48000400
 8002ebc:	48000800 	.word	0x48000800
 8002ec0:	48000c00 	.word	0x48000c00
 8002ec4:	48001000 	.word	0x48001000
 8002ec8:	48001400 	.word	0x48001400
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
 8002edc:	4613      	mov	r3, r2
 8002ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee0:	787b      	ldrb	r3, [r7, #1]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eec:	e002      	b.n	8002ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f12:	887a      	ldrh	r2, [r7, #2]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4013      	ands	r3, r2
 8002f18:	041a      	lsls	r2, r3, #16
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	43d9      	mvns	r1, r3
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	400b      	ands	r3, r1
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	619a      	str	r2, [r3, #24]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f4a:	4a05      	ldr	r2, [pc, #20]	@ (8002f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f806 	bl	8002f64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40010400 	.word	0x40010400

08002f64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0c0      	b.n	800310e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f008 fd49 	bl	800ba38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f005 f85f 	bl	8008076 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	e03e      	b.n	800303c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	440b      	add	r3, r1
 8002fcc:	3311      	adds	r3, #17
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fd2:	7bfa      	ldrb	r2, [r7, #15]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	3310      	adds	r3, #16
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3313      	adds	r3, #19
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	3320      	adds	r3, #32
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	3324      	adds	r3, #36	@ 0x24
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	3301      	adds	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	791b      	ldrb	r3, [r3, #4]
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	429a      	cmp	r2, r3
 8003044:	d3bb      	bcc.n	8002fbe <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
 800304a:	e044      	b.n	80030d6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	3301      	adds	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	791b      	ldrb	r3, [r3, #4]
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d3b5      	bcc.n	800304c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80030ec:	f004 ffde 	bl	80080ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7a9b      	ldrb	r3, [r3, #10]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d102      	bne.n	800310c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f001 fc0e 	bl	8004928 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_PCD_Start+0x16>
 8003128:	2302      	movs	r3, #2
 800312a:	e012      	b.n	8003152 <HAL_PCD_Start+0x3c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f004 ff85 	bl	8008048 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f006 fd62 	bl	8009c0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f006 fd67 	bl	8009c3a <USB_ReadInterrupts>
 800316c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fb06 	bl	800378a <PCD_EP_ISR_Handler>

    return;
 800317e:	e110      	b.n	80033a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d013      	beq.n	80031b2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800319c:	b292      	uxth	r2, r2
 800319e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f008 fcd9 	bl	800bb5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80031a8:	2100      	movs	r1, #0
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8fc 	bl	80033a8 <HAL_PCD_SetAddress>

    return;
 80031b0:	e0f7      	b.n	80033a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031ce:	b292      	uxth	r2, r2
 80031d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80031d4:	e0e5      	b.n	80033a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00c      	beq.n	80031fa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031f2:	b292      	uxth	r2, r2
 80031f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80031f8:	e0d3      	b.n	80033a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d034      	beq.n	800326e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0204 	bic.w	r2, r2, #4
 8003216:	b292      	uxth	r2, r2
 8003218:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003224:	b29a      	uxth	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0208 	bic.w	r2, r2, #8
 800322e:	b292      	uxth	r2, r2
 8003230:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800323a:	2b01      	cmp	r3, #1
 800323c:	d107      	bne.n	800324e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003246:	2100      	movs	r1, #0
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f008 fe79 	bl	800bf40 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f008 fcbc 	bl	800bbcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800325c:	b29a      	uxth	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003266:	b292      	uxth	r2, r2
 8003268:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800326c:	e099      	b.n	80033a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003274:	2b00      	cmp	r3, #0
 8003276:	d027      	beq.n	80032c8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0208 	orr.w	r2, r2, #8
 800328a:	b292      	uxth	r2, r2
 800328c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a2:	b292      	uxth	r2, r2
 80032a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0204 	orr.w	r2, r2, #4
 80032ba:	b292      	uxth	r2, r2
 80032bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f008 fc69 	bl	800bb98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80032c6:	e06c      	b.n	80033a2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d040      	beq.n	8003354 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032da:	b29a      	uxth	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032e4:	b292      	uxth	r2, r2
 80032e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d12b      	bne.n	800334c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0204 	orr.w	r2, r2, #4
 8003306:	b292      	uxth	r2, r2
 8003308:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003314:	b29a      	uxth	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0208 	orr.w	r2, r2, #8
 800331e:	b292      	uxth	r2, r2
 8003320:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003334:	b29b      	uxth	r3, r3
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003342:	2101      	movs	r1, #1
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f008 fdfb 	bl	800bf40 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800334a:	e02a      	b.n	80033a2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f008 fc23 	bl	800bb98 <HAL_PCD_SuspendCallback>
    return;
 8003352:	e026      	b.n	80033a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00f      	beq.n	800337e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003370:	b292      	uxth	r2, r2
 8003372:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f008 fbe1 	bl	800bb3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800337c:	e011      	b.n	80033a2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00c      	beq.n	80033a2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800339a:	b292      	uxth	r2, r2
 800339c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80033a0:	bf00      	nop
  }
}
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_PCD_SetAddress+0x1a>
 80033be:	2302      	movs	r3, #2
 80033c0:	e012      	b.n	80033e8 <HAL_PCD_SetAddress+0x40>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f006 fc03 	bl	8009be4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	70fb      	strb	r3, [r7, #3]
 8003402:	460b      	mov	r3, r1
 8003404:	803b      	strh	r3, [r7, #0]
 8003406:	4613      	mov	r3, r2
 8003408:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800340e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003412:	2b00      	cmp	r3, #0
 8003414:	da0e      	bge.n	8003434 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	f003 0207 	and.w	r2, r3, #7
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	3310      	adds	r3, #16
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	705a      	strb	r2, [r3, #1]
 8003432:	e00e      	b.n	8003452 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	f003 0207 	and.w	r2, r3, #7
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800345e:	883b      	ldrh	r3, [r7, #0]
 8003460:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	78ba      	ldrb	r2, [r7, #2]
 800346c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800346e:	78bb      	ldrb	r3, [r7, #2]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d102      	bne.n	800347a <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_PCD_EP_Open+0x98>
 8003484:	2302      	movs	r3, #2
 8003486:	e00e      	b.n	80034a6 <HAL_PCD_EP_Open+0xb6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68f9      	ldr	r1, [r7, #12]
 8003496:	4618      	mov	r0, r3
 8003498:	f004 fe26 	bl	80080e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80034a4:	7afb      	ldrb	r3, [r7, #11]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	460b      	mov	r3, r1
 80034b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da0e      	bge.n	80034e0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	f003 0207 	and.w	r2, r3, #7
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	3310      	adds	r3, #16
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	705a      	strb	r2, [r3, #1]
 80034de:	e00e      	b.n	80034fe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 0207 	and.w	r2, r3, #7
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_PCD_EP_Close+0x6a>
 8003514:	2302      	movs	r3, #2
 8003516:	e00e      	b.n	8003536 <HAL_PCD_EP_Close+0x88>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	4618      	mov	r0, r3
 8003528:	f005 fac6 	bl	8008ab8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	460b      	mov	r3, r1
 800354c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	f003 0207 	and.w	r2, r3, #7
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800357e:	7afb      	ldrb	r3, [r7, #11]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	b2da      	uxtb	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6979      	ldr	r1, [r7, #20]
 8003590:	4618      	mov	r0, r3
 8003592:	f005 fc7e 	bl	8008e92 <USB_EPStartXfer>

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 0207 	and.w	r2, r3, #7
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80035c2:	681b      	ldr	r3, [r3, #0]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	460b      	mov	r3, r1
 80035de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	f003 0207 	and.w	r2, r3, #7
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	3310      	adds	r3, #16
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2200      	movs	r2, #0
 8003614:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2201      	movs	r2, #1
 800361a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800361c:	7afb      	ldrb	r3, [r7, #11]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	b2da      	uxtb	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6979      	ldr	r1, [r7, #20]
 800362e:	4618      	mov	r0, r3
 8003630:	f005 fc2f 	bl	8008e92 <USB_EPStartXfer>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	7912      	ldrb	r2, [r2, #4]
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e03e      	b.n	80036da <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800365c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003660:	2b00      	cmp	r3, #0
 8003662:	da0e      	bge.n	8003682 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 0207 	and.w	r2, r3, #7
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	3310      	adds	r3, #16
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	705a      	strb	r2, [r3, #1]
 8003680:	e00c      	b.n	800369c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	4413      	add	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_PCD_EP_SetStall+0x7e>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e00e      	b.n	80036da <HAL_PCD_EP_SetStall+0x9c>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68f9      	ldr	r1, [r7, #12]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f006 f990 	bl	80099f0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	7912      	ldrb	r2, [r2, #4]
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e040      	b.n	8003782 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003704:	2b00      	cmp	r3, #0
 8003706:	da0e      	bge.n	8003726 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	f003 0207 	and.w	r2, r3, #7
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	3310      	adds	r3, #16
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	705a      	strb	r2, [r3, #1]
 8003724:	e00e      	b.n	8003744 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	f003 0207 	and.w	r2, r3, #7
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_PCD_EP_ClrStall+0x82>
 8003760:	2302      	movs	r3, #2
 8003762:	e00e      	b.n	8003782 <HAL_PCD_EP_ClrStall+0xa0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68f9      	ldr	r1, [r7, #12]
 8003772:	4618      	mov	r0, r3
 8003774:	f006 f98d 	bl	8009a92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b092      	sub	sp, #72	@ 0x48
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003792:	e333      	b.n	8003dfc <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800379c:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800379e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80037aa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 8108 	bne.w	80039c4 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d14c      	bne.n	8003858 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	813b      	strh	r3, [r7, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	893b      	ldrh	r3, [r7, #8]
 80037d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037de:	b29b      	uxth	r3, r3
 80037e0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3310      	adds	r3, #16
 80037e6:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	4413      	add	r3, r2
 8003802:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800380c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	441a      	add	r2, r3
 800381a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800381c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800381e:	2100      	movs	r1, #0
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f008 f972 	bl	800bb0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7b1b      	ldrb	r3, [r3, #12]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 82e5 	beq.w	8003dfc <PCD_EP_ISR_Handler+0x672>
 8003832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 82e0 	bne.w	8003dfc <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7b1b      	ldrb	r3, [r3, #12]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	731a      	strb	r2, [r3, #12]
 8003856:	e2d1      	b.n	8003dfc <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800385e:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003868:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800386a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800386e:	2b00      	cmp	r3, #0
 8003870:	d032      	beq.n	80038d8 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800387a:	b29b      	uxth	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	4413      	add	r3, r2
 800388c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003898:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80038a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f006 fa16 	bl	8009cde <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80038be:	4013      	ands	r3, r2
 80038c0:	817b      	strh	r3, [r7, #10]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	897a      	ldrh	r2, [r7, #10]
 80038c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038cc:	b292      	uxth	r2, r2
 80038ce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f008 f8ed 	bl	800bab0 <HAL_PCD_SetupStageCallback>
 80038d6:	e291      	b.n	8003dfc <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f280 828d 	bge.w	8003dfc <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80038ee:	4013      	ands	r3, r2
 80038f0:	81fb      	strh	r3, [r7, #14]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	89fa      	ldrh	r2, [r7, #14]
 80038f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038fc:	b292      	uxth	r2, r2
 80038fe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003908:	b29b      	uxth	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	4413      	add	r3, r2
 800391a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003926:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d019      	beq.n	8003964 <PCD_EP_ISR_Handler+0x1da>
 8003930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393e:	6959      	ldr	r1, [r3, #20]
 8003940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003942:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003946:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003948:	b29b      	uxth	r3, r3
 800394a:	f006 f9c8 	bl	8009cde <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800394e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	441a      	add	r2, r3
 8003958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800395a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800395c:	2100      	movs	r1, #0
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f008 f8b8 	bl	800bad4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800396c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800396e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003972:	2b00      	cmp	r3, #0
 8003974:	f040 8242 	bne.w	8003dfc <PCD_EP_ISR_Handler+0x672>
 8003978:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800397a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800397e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003982:	f000 823b 	beq.w	8003dfc <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003996:	81bb      	strh	r3, [r7, #12]
 8003998:	89bb      	ldrh	r3, [r7, #12]
 800399a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800399e:	81bb      	strh	r3, [r7, #12]
 80039a0:	89bb      	ldrh	r3, [r7, #12]
 80039a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80039a6:	81bb      	strh	r3, [r7, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	89bb      	ldrh	r3, [r7, #12]
 80039ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039be:	b29b      	uxth	r3, r3
 80039c0:	8013      	strh	r3, [r2, #0]
 80039c2:	e21b      	b.n	8003dfc <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039d6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f280 80f1 	bge.w	8003bc2 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80039f6:	4013      	ands	r3, r2
 80039f8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a0e:	b292      	uxth	r2, r2
 8003a10:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a12:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a2a:	7b1b      	ldrb	r3, [r3, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d123      	bne.n	8003a78 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a54:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003a58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 808b 	beq.w	8003b78 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a68:	6959      	ldr	r1, [r3, #20]
 8003a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a6c:	88da      	ldrh	r2, [r3, #6]
 8003a6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003a72:	f006 f934 	bl	8009cde <USB_ReadPMA>
 8003a76:	e07f      	b.n	8003b78 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a7a:	78db      	ldrb	r3, [r3, #3]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d109      	bne.n	8003a94 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a82:	461a      	mov	r2, r3
 8003a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f9c6 	bl	8003e18 <HAL_PCD_EP_DB_Receive>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003a92:	e071      	b.n	8003b78 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003ac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003acc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d022      	beq.n	8003b34 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	4413      	add	r3, r2
 8003b08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003b16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d02c      	beq.n	8003b78 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b24:	6959      	ldr	r1, [r3, #20]
 8003b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b28:	891a      	ldrh	r2, [r3, #8]
 8003b2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b2e:	f006 f8d6 	bl	8009cde <USB_ReadPMA>
 8003b32:	e021      	b.n	8003b78 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b58:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003b5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6a:	6959      	ldr	r1, [r3, #20]
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6e:	895a      	ldrh	r2, [r3, #10]
 8003b70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b74:	f006 f8b3 	bl	8009cde <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b80:	441a      	add	r2, r3
 8003b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b8e:	441a      	add	r2, r3
 8003b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b92:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <PCD_EP_ISR_Handler+0x41e>
 8003b9c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d206      	bcs.n	8003bb6 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	4619      	mov	r1, r3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f007 ff90 	bl	800bad4 <HAL_PCD_DataOutStageCallback>
 8003bb4:	e005      	b.n	8003bc2 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f005 f968 	bl	8008e92 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003bc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8117 	beq.w	8003dfc <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003bce:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	3310      	adds	r3, #16
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	441a      	add	r2, r3
 8003c0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c1c:	78db      	ldrb	r3, [r3, #3]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	f040 80a1 	bne.w	8003d66 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c26:	2200      	movs	r2, #0
 8003c28:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c2c:	7b1b      	ldrb	r3, [r3, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8092 	beq.w	8003d58 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d046      	beq.n	8003ccc <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d126      	bne.n	8003c94 <PCD_EP_ISR_Handler+0x50a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	00da      	lsls	r2, r3, #3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4413      	add	r3, r2
 8003c68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	801a      	strh	r2, [r3, #0]
 8003c92:	e061      	b.n	8003d58 <PCD_EP_ISR_Handler+0x5ce>
 8003c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d15d      	bne.n	8003d58 <PCD_EP_ISR_Handler+0x5ce>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	00da      	lsls	r2, r3, #3
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	e045      	b.n	8003d58 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d126      	bne.n	8003d28 <PCD_EP_ISR_Handler+0x59e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cee:	4413      	add	r3, r2
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	00da      	lsls	r2, r3, #3
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d00:	623b      	str	r3, [r7, #32]
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	e017      	b.n	8003d58 <PCD_EP_ISR_Handler+0x5ce>
 8003d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d113      	bne.n	8003d58 <PCD_EP_ISR_Handler+0x5ce>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3e:	4413      	add	r3, r2
 8003d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	00da      	lsls	r2, r3, #3
 8003d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d54:	2200      	movs	r2, #0
 8003d56:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f007 fed3 	bl	800bb0a <HAL_PCD_DataInStageCallback>
 8003d64:	e04a      	b.n	8003dfc <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003d66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d13f      	bne.n	8003df0 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d94:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d906      	bls.n	8003dae <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da2:	699a      	ldr	r2, [r3, #24]
 8003da4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003da6:	1ad2      	subs	r2, r2, r3
 8003da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003daa:	619a      	str	r2, [r3, #24]
 8003dac:	e002      	b.n	8003db4 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d106      	bne.n	8003dca <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f007 fea1 	bl	800bb0a <HAL_PCD_DataInStageCallback>
 8003dc8:	e018      	b.n	8003dfc <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003dd0:	441a      	add	r2, r3
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dd4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dd8:	69da      	ldr	r2, [r3, #28]
 8003dda:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003ddc:	441a      	add	r2, r3
 8003dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003de8:	4618      	mov	r0, r3
 8003dea:	f005 f852 	bl	8008e92 <USB_EPStartXfer>
 8003dee:	e005      	b.n	8003dfc <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003df0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003df2:	461a      	mov	r2, r3
 8003df4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f917 	bl	800402a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	b21b      	sxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f6ff acc3 	blt.w	8003794 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3748      	adds	r7, #72	@ 0x48
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d07c      	beq.n	8003f2a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e54:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	8b7b      	ldrh	r3, [r7, #26]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d306      	bcc.n	8003e6e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	699a      	ldr	r2, [r3, #24]
 8003e64:	8b7b      	ldrh	r3, [r7, #26]
 8003e66:	1ad2      	subs	r2, r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	619a      	str	r2, [r3, #24]
 8003e6c:	e002      	b.n	8003e74 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d123      	bne.n	8003ec4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e96:	833b      	strh	r3, [r7, #24]
 8003e98:	8b3b      	ldrh	r3, [r7, #24]
 8003e9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e9e:	833b      	strh	r3, [r7, #24]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	441a      	add	r2, r3
 8003eae:	8b3b      	ldrh	r3, [r7, #24]
 8003eb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01f      	beq.n	8003f0e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee8:	82fb      	strh	r3, [r7, #22]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	441a      	add	r2, r3
 8003ef8:	8afb      	ldrh	r3, [r7, #22]
 8003efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f0e:	8b7b      	ldrh	r3, [r7, #26]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8085 	beq.w	8004020 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	6959      	ldr	r1, [r3, #20]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	891a      	ldrh	r2, [r3, #8]
 8003f22:	8b7b      	ldrh	r3, [r7, #26]
 8003f24:	f005 fedb 	bl	8009cde <USB_ReadPMA>
 8003f28:	e07a      	b.n	8004020 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	699a      	ldr	r2, [r3, #24]
 8003f54:	8b7b      	ldrh	r3, [r7, #26]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d306      	bcc.n	8003f68 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	8b7b      	ldrh	r3, [r7, #26]
 8003f60:	1ad2      	subs	r2, r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	619a      	str	r2, [r3, #24]
 8003f66:	e002      	b.n	8003f6e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d123      	bne.n	8003fbe <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f90:	83fb      	strh	r3, [r7, #30]
 8003f92:	8bfb      	ldrh	r3, [r7, #30]
 8003f94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f98:	83fb      	strh	r3, [r7, #30]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	441a      	add	r2, r3
 8003fa8:	8bfb      	ldrh	r3, [r7, #30]
 8003faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11f      	bne.n	8004008 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe2:	83bb      	strh	r3, [r7, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	8bbb      	ldrh	r3, [r7, #28]
 8003ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004000:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004004:	b29b      	uxth	r3, r3
 8004006:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004008:	8b7b      	ldrh	r3, [r7, #26]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6959      	ldr	r1, [r3, #20]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	895a      	ldrh	r2, [r3, #10]
 800401a:	8b7b      	ldrh	r3, [r7, #26]
 800401c:	f005 fe5f 	bl	8009cde <USB_ReadPMA>
    }
  }

  return count;
 8004020:	8b7b      	ldrh	r3, [r7, #26]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b0a6      	sub	sp, #152	@ 0x98
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 81f7 	beq.w	8004432 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800404c:	b29b      	uxth	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	4413      	add	r3, r2
 800405e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004068:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004074:	429a      	cmp	r2, r3
 8004076:	d907      	bls.n	8004088 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004080:	1ad2      	subs	r2, r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	619a      	str	r2, [r3, #24]
 8004086:	e002      	b.n	800408e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 80e1 	bne.w	800425a <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	785b      	ldrb	r3, [r3, #1]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d126      	bne.n	80040ee <HAL_PCD_EP_DB_Transmit+0xc4>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	4413      	add	r3, r2
 80040b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	00da      	lsls	r2, r3, #3
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	4413      	add	r3, r2
 80040c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	e01a      	b.n	8004124 <HAL_PCD_EP_DB_Transmit+0xfa>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d116      	bne.n	8004124 <HAL_PCD_EP_DB_Transmit+0xfa>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004104:	b29b      	uxth	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410a:	4413      	add	r3, r2
 800410c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	00da      	lsls	r2, r3, #3
 8004114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004116:	4413      	add	r3, r2
 8004118:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800411c:	637b      	str	r3, [r7, #52]	@ 0x34
 800411e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004120:	2200      	movs	r2, #0
 8004122:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d126      	bne.n	8004180 <HAL_PCD_EP_DB_Transmit+0x156>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004140:	b29b      	uxth	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	4413      	add	r3, r2
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	00da      	lsls	r2, r3, #3
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	4413      	add	r3, r2
 8004154:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004164:	b29a      	uxth	r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004178:	b29a      	uxth	r2, r3
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	e017      	b.n	80041b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d113      	bne.n	80041b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004190:	b29b      	uxth	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004196:	4413      	add	r3, r2
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	00da      	lsls	r2, r3, #3
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	4413      	add	r3, r2
 80041a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	2200      	movs	r2, #0
 80041ae:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	78db      	ldrb	r3, [r3, #3]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d123      	bne.n	8004200 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d2:	837b      	strh	r3, [r7, #26]
 80041d4:	8b7b      	ldrh	r3, [r7, #26]
 80041d6:	f083 0320 	eor.w	r3, r3, #32
 80041da:	837b      	strh	r3, [r7, #26]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	441a      	add	r2, r3
 80041ea:	8b7b      	ldrh	r3, [r7, #26]
 80041ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f007 fc7f 	bl	800bb0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01f      	beq.n	8004256 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800422c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004230:	833b      	strh	r3, [r7, #24]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	8b3b      	ldrh	r3, [r7, #24]
 8004242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800424a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800424e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004252:	b29b      	uxth	r3, r3
 8004254:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e31f      	b.n	800489a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d021      	beq.n	80042a8 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800427a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	441a      	add	r2, r3
 8004290:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800429c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	f040 82ca 	bne.w	8004848 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042bc:	441a      	add	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042ca:	441a      	add	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d309      	bcc.n	80042f0 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042e8:	1ad2      	subs	r2, r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	621a      	str	r2, [r3, #32]
 80042ee:	e015      	b.n	800431c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d107      	bne.n	8004308 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80042f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042fc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004306:	e009      	b.n	800431c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2200      	movs	r2, #0
 800431a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d15f      	bne.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	643b      	str	r3, [r7, #64]	@ 0x40
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004332:	b29b      	uxth	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004338:	4413      	add	r3, r2
 800433a:	643b      	str	r3, [r7, #64]	@ 0x40
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	00da      	lsls	r2, r3, #3
 8004342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004344:	4413      	add	r3, r2
 8004346:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800434c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004356:	b29a      	uxth	r2, r3
 8004358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435a:	801a      	strh	r2, [r3, #0]
 800435c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_PCD_EP_DB_Transmit+0x34e>
 8004362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004370:	b29a      	uxth	r2, r3
 8004372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	e051      	b.n	800441c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800437a:	2b3e      	cmp	r3, #62	@ 0x3e
 800437c:	d816      	bhi.n	80043ac <HAL_PCD_EP_DB_Transmit+0x382>
 800437e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	653b      	str	r3, [r7, #80]	@ 0x50
 8004384:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_PCD_EP_DB_Transmit+0x36a>
 800438e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004390:	3301      	adds	r3, #1
 8004392:	653b      	str	r3, [r7, #80]	@ 0x50
 8004394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29a      	uxth	r2, r3
 800439a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800439c:	b29b      	uxth	r3, r3
 800439e:	029b      	lsls	r3, r3, #10
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a8:	801a      	strh	r2, [r3, #0]
 80043aa:	e037      	b.n	800441c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80043ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80043b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d102      	bne.n	80043c2 <HAL_PCD_EP_DB_Transmit+0x398>
 80043bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043be:	3b01      	subs	r3, #1
 80043c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80043c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	029b      	lsls	r3, r3, #10
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	4313      	orrs	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043dc:	b29a      	uxth	r2, r3
 80043de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	e01b      	b.n	800441c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	785b      	ldrb	r3, [r3, #1]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d117      	bne.n	800441c <HAL_PCD_EP_DB_Transmit+0x3f2>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004400:	4413      	add	r3, r2
 8004402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	00da      	lsls	r2, r3, #3
 800440a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800440c:	4413      	add	r3, r2
 800440e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004412:	647b      	str	r3, [r7, #68]	@ 0x44
 8004414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004416:	b29a      	uxth	r2, r3
 8004418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800441a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6959      	ldr	r1, [r3, #20]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	891a      	ldrh	r2, [r3, #8]
 8004428:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800442a:	b29b      	uxth	r3, r3
 800442c:	f005 fc15 	bl	8009c5a <USB_WritePMA>
 8004430:	e20a      	b.n	8004848 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800443a:	b29b      	uxth	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4413      	add	r3, r2
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	4413      	add	r3, r2
 800444c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004456:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004462:	429a      	cmp	r2, r3
 8004464:	d307      	bcc.n	8004476 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	619a      	str	r2, [r3, #24]
 8004474:	e002      	b.n	800447c <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f040 80f6 	bne.w	8004672 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d126      	bne.n	80044dc <HAL_PCD_EP_DB_Transmit+0x4b2>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	677b      	str	r3, [r7, #116]	@ 0x74
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800449c:	b29b      	uxth	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044a2:	4413      	add	r3, r2
 80044a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	00da      	lsls	r2, r3, #3
 80044ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044ae:	4413      	add	r3, r2
 80044b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80044b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044d8:	801a      	strh	r2, [r3, #0]
 80044da:	e01a      	b.n	8004512 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	785b      	ldrb	r3, [r3, #1]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d116      	bne.n	8004512 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044f8:	4413      	add	r3, r2
 80044fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	00da      	lsls	r2, r3, #3
 8004502:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004504:	4413      	add	r3, r2
 8004506:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800450a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800450c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800450e:	2200      	movs	r2, #0
 8004510:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d12f      	bne.n	8004582 <HAL_PCD_EP_DB_Transmit+0x558>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004532:	b29b      	uxth	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800453a:	4413      	add	r3, r2
 800453c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	00da      	lsls	r2, r3, #3
 8004546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800454a:	4413      	add	r3, r2
 800454c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004560:	b29a      	uxth	r2, r3
 8004562:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004566:	801a      	strh	r2, [r3, #0]
 8004568:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004578:	b29a      	uxth	r2, r3
 800457a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	e01c      	b.n	80045bc <HAL_PCD_EP_DB_Transmit+0x592>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d118      	bne.n	80045bc <HAL_PCD_EP_DB_Transmit+0x592>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800459a:	4413      	add	r3, r2
 800459c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	00da      	lsls	r2, r3, #3
 80045a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045aa:	4413      	add	r3, r2
 80045ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045b8:	2200      	movs	r2, #0
 80045ba:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	78db      	ldrb	r3, [r3, #3]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d127      	bne.n	8004614 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045de:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80045e2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80045e6:	f083 0320 	eor.w	r3, r3, #32
 80045ea:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	4619      	mov	r1, r3
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f007 fa75 	bl	800bb0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d121      	bne.n	800466e <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004644:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800465a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800465e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004662:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800466a:	b29b      	uxth	r3, r3
 800466c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e113      	b.n	800489a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d121      	bne.n	80046c0 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004696:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80046ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046bc:	b29b      	uxth	r3, r3
 80046be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	f040 80be 	bne.w	8004848 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	695a      	ldr	r2, [r3, #20]
 80046d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80046d4:	441a      	add	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80046e2:	441a      	add	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d309      	bcc.n	8004708 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	6a1a      	ldr	r2, [r3, #32]
 80046fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004700:	1ad2      	subs	r2, r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	621a      	str	r2, [r3, #32]
 8004706:	e015      	b.n	8004734 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004710:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004714:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800471e:	e009      	b.n	8004734 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2200      	movs	r2, #0
 800472a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	785b      	ldrb	r3, [r3, #1]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d15f      	bne.n	8004802 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004750:	b29b      	uxth	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004756:	4413      	add	r3, r2
 8004758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	00da      	lsls	r2, r3, #3
 8004760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004762:	4413      	add	r3, r2
 8004764:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004768:	667b      	str	r3, [r7, #100]	@ 0x64
 800476a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004774:	b29a      	uxth	r2, r3
 8004776:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800478a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478e:	b29a      	uxth	r2, r3
 8004790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004792:	801a      	strh	r2, [r3, #0]
 8004794:	e04e      	b.n	8004834 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004796:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004798:	2b3e      	cmp	r3, #62	@ 0x3e
 800479a:	d816      	bhi.n	80047ca <HAL_PCD_EP_DB_Transmit+0x7a0>
 800479c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80047a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_PCD_EP_DB_Transmit+0x788>
 80047ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ae:	3301      	adds	r3, #1
 80047b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80047b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4313      	orrs	r3, r2
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	e034      	b.n	8004834 <HAL_PCD_EP_DB_Transmit+0x80a>
 80047ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80047d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d102      	bne.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x7b6>
 80047da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047dc:	3b01      	subs	r3, #1
 80047de:	663b      	str	r3, [r7, #96]	@ 0x60
 80047e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	029b      	lsls	r3, r3, #10
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	4313      	orrs	r3, r2
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047fe:	801a      	strh	r2, [r3, #0]
 8004800:	e018      	b.n	8004834 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	785b      	ldrb	r3, [r3, #1]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d114      	bne.n	8004834 <HAL_PCD_EP_DB_Transmit+0x80a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004812:	b29b      	uxth	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004818:	4413      	add	r3, r2
 800481a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	00da      	lsls	r2, r3, #3
 8004822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004824:	4413      	add	r3, r2
 8004826:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800482a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800482c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800482e:	b29a      	uxth	r2, r3
 8004830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004832:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6959      	ldr	r1, [r3, #20]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	895a      	ldrh	r2, [r3, #10]
 8004840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004842:	b29b      	uxth	r3, r3
 8004844:	f005 fa09 	bl	8009c5a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800485e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004862:	82fb      	strh	r3, [r7, #22]
 8004864:	8afb      	ldrh	r3, [r7, #22]
 8004866:	f083 0310 	eor.w	r3, r3, #16
 800486a:	82fb      	strh	r3, [r7, #22]
 800486c:	8afb      	ldrh	r3, [r7, #22]
 800486e:	f083 0320 	eor.w	r3, r3, #32
 8004872:	82fb      	strh	r3, [r7, #22]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	8afb      	ldrh	r3, [r7, #22]
 8004884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800488c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004894:	b29b      	uxth	r3, r3
 8004896:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3798      	adds	r7, #152	@ 0x98
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	817b      	strh	r3, [r7, #10]
 80048b0:	4613      	mov	r3, r2
 80048b2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80048b4:	897b      	ldrh	r3, [r7, #10]
 80048b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048c0:	897b      	ldrh	r3, [r7, #10]
 80048c2:	f003 0207 	and.w	r2, r3, #7
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	3310      	adds	r3, #16
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e009      	b.n	80048ec <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048d8:	897a      	ldrh	r2, [r7, #10]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80048ec:	893b      	ldrh	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	80da      	strh	r2, [r3, #6]
 8004900:	e00b      	b.n	800491a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2201      	movs	r2, #1
 8004906:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	b29a      	uxth	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	b29a      	uxth	r2, r3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800494c:	b29b      	uxth	r3, r3
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004960:	b29b      	uxth	r3, r3
 8004962:	f043 0302 	orr.w	r3, r3, #2
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d141      	bne.n	8004a0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800498a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004996:	d131      	bne.n	80049fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004998:	4b47      	ldr	r3, [pc, #284]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800499e:	4a46      	ldr	r2, [pc, #280]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049a8:	4b43      	ldr	r3, [pc, #268]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049b0:	4a41      	ldr	r2, [pc, #260]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049b8:	4b40      	ldr	r3, [pc, #256]	@ (8004abc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2232      	movs	r2, #50	@ 0x32
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	0c9b      	lsrs	r3, r3, #18
 80049ca:	3301      	adds	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049ce:	e002      	b.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049d6:	4b38      	ldr	r3, [pc, #224]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e2:	d102      	bne.n	80049ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f2      	bne.n	80049d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049ea:	4b33      	ldr	r3, [pc, #204]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f6:	d158      	bne.n	8004aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e057      	b.n	8004aac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049fc:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a02:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a0c:	e04d      	b.n	8004aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a14:	d141      	bne.n	8004a9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a16:	4b28      	ldr	r3, [pc, #160]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a22:	d131      	bne.n	8004a88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a24:	4b24      	ldr	r3, [pc, #144]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a2a:	4a23      	ldr	r2, [pc, #140]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a34:	4b20      	ldr	r3, [pc, #128]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a44:	4b1d      	ldr	r3, [pc, #116]	@ (8004abc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2232      	movs	r2, #50	@ 0x32
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a50:	fba2 2303 	umull	r2, r3, r2, r3
 8004a54:	0c9b      	lsrs	r3, r3, #18
 8004a56:	3301      	adds	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a5a:	e002      	b.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a62:	4b15      	ldr	r3, [pc, #84]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a6e:	d102      	bne.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f2      	bne.n	8004a5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a76:	4b10      	ldr	r3, [pc, #64]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a82:	d112      	bne.n	8004aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e011      	b.n	8004aac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a98:	e007      	b.n	8004aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a9a:	4b07      	ldr	r3, [pc, #28]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004aa2:	4a05      	ldr	r2, [pc, #20]	@ (8004ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004aa8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	200001a0 	.word	0x200001a0
 8004ac0:	431bde83 	.word	0x431bde83

08004ac4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ac8:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a04      	ldr	r2, [pc, #16]	@ (8004ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ace:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ad2:	6093      	str	r3, [r2, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40007000 	.word	0x40007000

08004ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e2fe      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d075      	beq.n	8004bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b02:	4b97      	ldr	r3, [pc, #604]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b0c:	4b94      	ldr	r3, [pc, #592]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d102      	bne.n	8004b22 <HAL_RCC_OscConfig+0x3e>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d002      	beq.n	8004b28 <HAL_RCC_OscConfig+0x44>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d10b      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	4b8d      	ldr	r3, [pc, #564]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d05b      	beq.n	8004bec <HAL_RCC_OscConfig+0x108>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d157      	bne.n	8004bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e2d9      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b48:	d106      	bne.n	8004b58 <HAL_RCC_OscConfig+0x74>
 8004b4a:	4b85      	ldr	r3, [pc, #532]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a84      	ldr	r2, [pc, #528]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e01d      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x98>
 8004b62:	4b7f      	ldr	r3, [pc, #508]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a7e      	ldr	r2, [pc, #504]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a7b      	ldr	r2, [pc, #492]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b7c:	4b78      	ldr	r3, [pc, #480]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a77      	ldr	r2, [pc, #476]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	4b75      	ldr	r3, [pc, #468]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a74      	ldr	r2, [pc, #464]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fba6 	bl	80022ec <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fd fba2 	bl	80022ec <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	@ 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e29e      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xc0>
 8004bc2:	e014      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fd fb92 	bl	80022ec <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fd fb8e 	bl	80022ec <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	@ 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e28a      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bde:	4b60      	ldr	r3, [pc, #384]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0xe8>
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d075      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bfa:	4b59      	ldr	r3, [pc, #356]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c04:	4b56      	ldr	r3, [pc, #344]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	d102      	bne.n	8004c1a <HAL_RCC_OscConfig+0x136>
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d002      	beq.n	8004c20 <HAL_RCC_OscConfig+0x13c>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d11f      	bne.n	8004c60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c20:	4b4f      	ldr	r3, [pc, #316]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_OscConfig+0x154>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e25d      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c38:	4b49      	ldr	r3, [pc, #292]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	061b      	lsls	r3, r3, #24
 8004c46:	4946      	ldr	r1, [pc, #280]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c4c:	4b45      	ldr	r3, [pc, #276]	@ (8004d64 <HAL_RCC_OscConfig+0x280>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fd faff 	bl	8002254 <HAL_InitTick>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d043      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e249      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d023      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c68:	4b3d      	ldr	r3, [pc, #244]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd fb3a 	bl	80022ec <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fd fb36 	bl	80022ec <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e232      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c8e:	4b34      	ldr	r3, [pc, #208]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9a:	4b31      	ldr	r3, [pc, #196]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	061b      	lsls	r3, r3, #24
 8004ca8:	492d      	ldr	r1, [pc, #180]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	604b      	str	r3, [r1, #4]
 8004cae:	e01a      	b.n	8004ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004cb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fd fb16 	bl	80022ec <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc4:	f7fd fb12 	bl	80022ec <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e20e      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cd6:	4b22      	ldr	r3, [pc, #136]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x1e0>
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ce4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d041      	beq.n	8004d76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01c      	beq.n	8004d34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cfa:	4b19      	ldr	r3, [pc, #100]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d00:	4a17      	ldr	r2, [pc, #92]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0a:	f7fd faef 	bl	80022ec <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fd faeb 	bl	80022ec <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e1e7      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d24:	4b0e      	ldr	r3, [pc, #56]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0ef      	beq.n	8004d12 <HAL_RCC_OscConfig+0x22e>
 8004d32:	e020      	b.n	8004d76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d34:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d3a:	4a09      	ldr	r2, [pc, #36]	@ (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fd fad2 	bl	80022ec <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d4a:	e00d      	b.n	8004d68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d4c:	f7fd face 	bl	80022ec <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d906      	bls.n	8004d68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e1ca      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000
 8004d64:	200001a4 	.word	0x200001a4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d68:	4b8c      	ldr	r3, [pc, #560]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1ea      	bne.n	8004d4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80a6 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d88:	4b84      	ldr	r3, [pc, #528]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_OscConfig+0x2b4>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <HAL_RCC_OscConfig+0x2b6>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da2:	4a7e      	ldr	r2, [pc, #504]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004daa:	4b7c      	ldr	r3, [pc, #496]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004db6:	2301      	movs	r3, #1
 8004db8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dba:	4b79      	ldr	r3, [pc, #484]	@ (8004fa0 <HAL_RCC_OscConfig+0x4bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d118      	bne.n	8004df8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dc6:	4b76      	ldr	r3, [pc, #472]	@ (8004fa0 <HAL_RCC_OscConfig+0x4bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a75      	ldr	r2, [pc, #468]	@ (8004fa0 <HAL_RCC_OscConfig+0x4bc>)
 8004dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd2:	f7fd fa8b 	bl	80022ec <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dda:	f7fd fa87 	bl	80022ec <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e183      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dec:	4b6c      	ldr	r3, [pc, #432]	@ (8004fa0 <HAL_RCC_OscConfig+0x4bc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d108      	bne.n	8004e12 <HAL_RCC_OscConfig+0x32e>
 8004e00:	4b66      	ldr	r3, [pc, #408]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e06:	4a65      	ldr	r2, [pc, #404]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e10:	e024      	b.n	8004e5c <HAL_RCC_OscConfig+0x378>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	d110      	bne.n	8004e3c <HAL_RCC_OscConfig+0x358>
 8004e1a:	4b60      	ldr	r3, [pc, #384]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e20:	4a5e      	ldr	r2, [pc, #376]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e30:	4a5a      	ldr	r2, [pc, #360]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e3a:	e00f      	b.n	8004e5c <HAL_RCC_OscConfig+0x378>
 8004e3c:	4b57      	ldr	r3, [pc, #348]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e42:	4a56      	ldr	r2, [pc, #344]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e4c:	4b53      	ldr	r3, [pc, #332]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	4a52      	ldr	r2, [pc, #328]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d016      	beq.n	8004e92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fd fa42 	bl	80022ec <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6c:	f7fd fa3e 	bl	80022ec <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e138      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e82:	4b46      	ldr	r3, [pc, #280]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ed      	beq.n	8004e6c <HAL_RCC_OscConfig+0x388>
 8004e90:	e015      	b.n	8004ebe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fd fa2b 	bl	80022ec <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9a:	f7fd fa27 	bl	80022ec <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e121      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ed      	bne.n	8004e9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec4:	4b35      	ldr	r3, [pc, #212]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec8:	4a34      	ldr	r2, [pc, #208]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d03c      	beq.n	8004f56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01c      	beq.n	8004f1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eea:	4a2c      	ldr	r2, [pc, #176]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fd f9fa 	bl	80022ec <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004efc:	f7fd f9f6 	bl	80022ec <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0f2      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f0e:	4b23      	ldr	r3, [pc, #140]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0ef      	beq.n	8004efc <HAL_RCC_OscConfig+0x418>
 8004f1c:	e01b      	b.n	8004f56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f24:	4a1d      	ldr	r2, [pc, #116]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2e:	f7fd f9dd 	bl	80022ec <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f36:	f7fd f9d9 	bl	80022ec <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e0d5      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f48:	4b14      	ldr	r3, [pc, #80]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ef      	bne.n	8004f36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80c9 	beq.w	80050f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f60:	4b0e      	ldr	r3, [pc, #56]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 030c 	and.w	r3, r3, #12
 8004f68:	2b0c      	cmp	r3, #12
 8004f6a:	f000 8083 	beq.w	8005074 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d15e      	bne.n	8005034 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a08      	ldr	r2, [pc, #32]	@ (8004f9c <HAL_RCC_OscConfig+0x4b8>)
 8004f7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f82:	f7fd f9b3 	bl	80022ec <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f88:	e00c      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7fd f9af 	bl	80022ec <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d905      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e0ab      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa4:	4b55      	ldr	r3, [pc, #340]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ec      	bne.n	8004f8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb0:	4b52      	ldr	r3, [pc, #328]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	4b52      	ldr	r3, [pc, #328]	@ (8005100 <HAL_RCC_OscConfig+0x61c>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6a11      	ldr	r1, [r2, #32]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fc0:	3a01      	subs	r2, #1
 8004fc2:	0112      	lsls	r2, r2, #4
 8004fc4:	4311      	orrs	r1, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004fca:	0212      	lsls	r2, r2, #8
 8004fcc:	4311      	orrs	r1, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fd2:	0852      	lsrs	r2, r2, #1
 8004fd4:	3a01      	subs	r2, #1
 8004fd6:	0552      	lsls	r2, r2, #21
 8004fd8:	4311      	orrs	r1, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fde:	0852      	lsrs	r2, r2, #1
 8004fe0:	3a01      	subs	r2, #1
 8004fe2:	0652      	lsls	r2, r2, #25
 8004fe4:	4311      	orrs	r1, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fea:	06d2      	lsls	r2, r2, #27
 8004fec:	430a      	orrs	r2, r1
 8004fee:	4943      	ldr	r1, [pc, #268]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff4:	4b41      	ldr	r3, [pc, #260]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a40      	ldr	r2, [pc, #256]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8004ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ffe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005000:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a3d      	ldr	r2, [pc, #244]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8005006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800500a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fd f96e 	bl	80022ec <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005014:	f7fd f96a 	bl	80022ec <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e066      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005026:	4b35      	ldr	r3, [pc, #212]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x530>
 8005032:	e05e      	b.n	80050f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005034:	4b31      	ldr	r3, [pc, #196]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a30      	ldr	r2, [pc, #192]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 800503a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800503e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fd f954 	bl	80022ec <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005048:	f7fd f950 	bl	80022ec <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e04c      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800505a:	4b28      	ldr	r3, [pc, #160]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005066:	4b25      	ldr	r3, [pc, #148]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	4924      	ldr	r1, [pc, #144]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 800506c:	4b25      	ldr	r3, [pc, #148]	@ (8005104 <HAL_RCC_OscConfig+0x620>)
 800506e:	4013      	ands	r3, r2
 8005070:	60cb      	str	r3, [r1, #12]
 8005072:	e03e      	b.n	80050f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e039      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005080:	4b1e      	ldr	r3, [pc, #120]	@ (80050fc <HAL_RCC_OscConfig+0x618>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f003 0203 	and.w	r2, r3, #3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	429a      	cmp	r2, r3
 8005092:	d12c      	bne.n	80050ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	3b01      	subs	r3, #1
 80050a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d123      	bne.n	80050ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d11b      	bne.n	80050ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d113      	bne.n	80050ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	3b01      	subs	r3, #1
 80050d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d109      	bne.n	80050ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e4:	085b      	lsrs	r3, r3, #1
 80050e6:	3b01      	subs	r3, #1
 80050e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d001      	beq.n	80050f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40021000 	.word	0x40021000
 8005100:	019f800c 	.word	0x019f800c
 8005104:	feeefffc 	.word	0xfeeefffc

08005108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e11e      	b.n	800535e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005120:	4b91      	ldr	r3, [pc, #580]	@ (8005368 <HAL_RCC_ClockConfig+0x260>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d910      	bls.n	8005150 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512e:	4b8e      	ldr	r3, [pc, #568]	@ (8005368 <HAL_RCC_ClockConfig+0x260>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f023 020f 	bic.w	r2, r3, #15
 8005136:	498c      	ldr	r1, [pc, #560]	@ (8005368 <HAL_RCC_ClockConfig+0x260>)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b8a      	ldr	r3, [pc, #552]	@ (8005368 <HAL_RCC_ClockConfig+0x260>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e106      	b.n	800535e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d073      	beq.n	8005244 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d129      	bne.n	80051b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005164:	4b81      	ldr	r3, [pc, #516]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0f4      	b.n	800535e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005174:	f000 f99e 	bl	80054b4 <RCC_GetSysClockFreqFromPLLSource>
 8005178:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4a7c      	ldr	r2, [pc, #496]	@ (8005370 <HAL_RCC_ClockConfig+0x268>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d93f      	bls.n	8005202 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005182:	4b7a      	ldr	r3, [pc, #488]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005196:	2b00      	cmp	r3, #0
 8005198:	d033      	beq.n	8005202 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d12f      	bne.n	8005202 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051a2:	4b72      	ldr	r3, [pc, #456]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051aa:	4a70      	ldr	r2, [pc, #448]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 80051ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051b2:	2380      	movs	r3, #128	@ 0x80
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e024      	b.n	8005202 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d107      	bne.n	80051d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051c0:	4b6a      	ldr	r3, [pc, #424]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0c6      	b.n	800535e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d0:	4b66      	ldr	r3, [pc, #408]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0be      	b.n	800535e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051e0:	f000 f8ce 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 80051e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4a61      	ldr	r2, [pc, #388]	@ (8005370 <HAL_RCC_ClockConfig+0x268>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d909      	bls.n	8005202 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051ee:	4b5f      	ldr	r3, [pc, #380]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051f6:	4a5d      	ldr	r2, [pc, #372]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 80051f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051fe:	2380      	movs	r3, #128	@ 0x80
 8005200:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005202:	4b5a      	ldr	r3, [pc, #360]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f023 0203 	bic.w	r2, r3, #3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	4957      	ldr	r1, [pc, #348]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005210:	4313      	orrs	r3, r2
 8005212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005214:	f7fd f86a 	bl	80022ec <HAL_GetTick>
 8005218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521a:	e00a      	b.n	8005232 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800521c:	f7fd f866 	bl	80022ec <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800522a:	4293      	cmp	r3, r2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e095      	b.n	800535e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005232:	4b4e      	ldr	r3, [pc, #312]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 020c 	and.w	r2, r3, #12
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	429a      	cmp	r2, r3
 8005242:	d1eb      	bne.n	800521c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d023      	beq.n	8005298 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800525c:	4b43      	ldr	r3, [pc, #268]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	4a42      	ldr	r2, [pc, #264]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005262:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005266:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005274:	4b3d      	ldr	r3, [pc, #244]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800527c:	4a3b      	ldr	r2, [pc, #236]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 800527e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005282:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005284:	4b39      	ldr	r3, [pc, #228]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	4936      	ldr	r1, [pc, #216]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005292:	4313      	orrs	r3, r2
 8005294:	608b      	str	r3, [r1, #8]
 8005296:	e008      	b.n	80052aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b80      	cmp	r3, #128	@ 0x80
 800529c:	d105      	bne.n	80052aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800529e:	4b33      	ldr	r3, [pc, #204]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	4a32      	ldr	r2, [pc, #200]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 80052a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005368 <HAL_RCC_ClockConfig+0x260>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d21d      	bcs.n	80052f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005368 <HAL_RCC_ClockConfig+0x260>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f023 020f 	bic.w	r2, r3, #15
 80052c0:	4929      	ldr	r1, [pc, #164]	@ (8005368 <HAL_RCC_ClockConfig+0x260>)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052c8:	f7fd f810 	bl	80022ec <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	e00a      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d0:	f7fd f80c 	bl	80022ec <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e03b      	b.n	800535e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b20      	ldr	r3, [pc, #128]	@ (8005368 <HAL_RCC_ClockConfig+0x260>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d1ed      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005300:	4b1a      	ldr	r3, [pc, #104]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	4917      	ldr	r1, [pc, #92]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 800530e:	4313      	orrs	r3, r2
 8005310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800531e:	4b13      	ldr	r3, [pc, #76]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	490f      	ldr	r1, [pc, #60]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 800532e:	4313      	orrs	r3, r2
 8005330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005332:	f000 f825 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 8005336:	4602      	mov	r2, r0
 8005338:	4b0c      	ldr	r3, [pc, #48]	@ (800536c <HAL_RCC_ClockConfig+0x264>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	490c      	ldr	r1, [pc, #48]	@ (8005374 <HAL_RCC_ClockConfig+0x26c>)
 8005344:	5ccb      	ldrb	r3, [r1, r3]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	fa22 f303 	lsr.w	r3, r2, r3
 800534e:	4a0a      	ldr	r2, [pc, #40]	@ (8005378 <HAL_RCC_ClockConfig+0x270>)
 8005350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <HAL_RCC_ClockConfig+0x274>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f7fc ff7c 	bl	8002254 <HAL_InitTick>
 800535c:	4603      	mov	r3, r0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40022000 	.word	0x40022000
 800536c:	40021000 	.word	0x40021000
 8005370:	04c4b400 	.word	0x04c4b400
 8005374:	0800d20c 	.word	0x0800d20c
 8005378:	200001a0 	.word	0x200001a0
 800537c:	200001a4 	.word	0x200001a4

08005380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005386:	4b2c      	ldr	r3, [pc, #176]	@ (8005438 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b04      	cmp	r3, #4
 8005390:	d102      	bne.n	8005398 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005392:	4b2a      	ldr	r3, [pc, #168]	@ (800543c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e047      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005398:	4b27      	ldr	r3, [pc, #156]	@ (8005438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d102      	bne.n	80053aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053a4:	4b26      	ldr	r3, [pc, #152]	@ (8005440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	e03e      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80053aa:	4b23      	ldr	r3, [pc, #140]	@ (8005438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d136      	bne.n	8005424 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053b6:	4b20      	ldr	r3, [pc, #128]	@ (8005438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	3301      	adds	r3, #1
 80053cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d10c      	bne.n	80053ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	4a16      	ldr	r2, [pc, #88]	@ (8005438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053de:	68d2      	ldr	r2, [r2, #12]
 80053e0:	0a12      	lsrs	r2, r2, #8
 80053e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	617b      	str	r3, [r7, #20]
      break;
 80053ec:	e00c      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053ee:	4a13      	ldr	r2, [pc, #76]	@ (800543c <HAL_RCC_GetSysClockFreq+0xbc>)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	4a10      	ldr	r2, [pc, #64]	@ (8005438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053f8:	68d2      	ldr	r2, [r2, #12]
 80053fa:	0a12      	lsrs	r2, r2, #8
 80053fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005400:	fb02 f303 	mul.w	r3, r2, r3
 8005404:	617b      	str	r3, [r7, #20]
      break;
 8005406:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005408:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	0e5b      	lsrs	r3, r3, #25
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	3301      	adds	r3, #1
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e001      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005428:	693b      	ldr	r3, [r7, #16]
}
 800542a:	4618      	mov	r0, r3
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40021000 	.word	0x40021000
 800543c:	00f42400 	.word	0x00f42400
 8005440:	016e3600 	.word	0x016e3600

08005444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005448:	4b03      	ldr	r3, [pc, #12]	@ (8005458 <HAL_RCC_GetHCLKFreq+0x14>)
 800544a:	681b      	ldr	r3, [r3, #0]
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	200001a0 	.word	0x200001a0

0800545c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005460:	f7ff fff0 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 8005464:	4602      	mov	r2, r0
 8005466:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	4904      	ldr	r1, [pc, #16]	@ (8005484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005472:	5ccb      	ldrb	r3, [r1, r3]
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40021000 	.word	0x40021000
 8005484:	0800d21c 	.word	0x0800d21c

08005488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800548c:	f7ff ffda 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 8005490:	4602      	mov	r2, r0
 8005492:	4b06      	ldr	r3, [pc, #24]	@ (80054ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	0adb      	lsrs	r3, r3, #11
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	4904      	ldr	r1, [pc, #16]	@ (80054b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800549e:	5ccb      	ldrb	r3, [r1, r3]
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40021000 	.word	0x40021000
 80054b0:	0800d21c 	.word	0x0800d21c

080054b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d10c      	bne.n	80054f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054d8:	4a17      	ldr	r2, [pc, #92]	@ (8005538 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e0:	4a14      	ldr	r2, [pc, #80]	@ (8005534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054e2:	68d2      	ldr	r2, [r2, #12]
 80054e4:	0a12      	lsrs	r2, r2, #8
 80054e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054ea:	fb02 f303 	mul.w	r3, r2, r3
 80054ee:	617b      	str	r3, [r7, #20]
    break;
 80054f0:	e00c      	b.n	800550c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054f2:	4a12      	ldr	r2, [pc, #72]	@ (800553c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054fc:	68d2      	ldr	r2, [r2, #12]
 80054fe:	0a12      	lsrs	r2, r2, #8
 8005500:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005504:	fb02 f303 	mul.w	r3, r2, r3
 8005508:	617b      	str	r3, [r7, #20]
    break;
 800550a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800550c:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	0e5b      	lsrs	r3, r3, #25
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	3301      	adds	r3, #1
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	fbb2 f3f3 	udiv	r3, r2, r3
 8005524:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005526:	687b      	ldr	r3, [r7, #4]
}
 8005528:	4618      	mov	r0, r3
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40021000 	.word	0x40021000
 8005538:	016e3600 	.word	0x016e3600
 800553c:	00f42400 	.word	0x00f42400

08005540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005548:	2300      	movs	r3, #0
 800554a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800554c:	2300      	movs	r3, #0
 800554e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8098 	beq.w	800568e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800555e:	2300      	movs	r3, #0
 8005560:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005562:	4b43      	ldr	r3, [pc, #268]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10d      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556e:	4b40      	ldr	r3, [pc, #256]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005572:	4a3f      	ldr	r2, [pc, #252]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005578:	6593      	str	r3, [r2, #88]	@ 0x58
 800557a:	4b3d      	ldr	r3, [pc, #244]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800557c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005582:	60bb      	str	r3, [r7, #8]
 8005584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005586:	2301      	movs	r3, #1
 8005588:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800558a:	4b3a      	ldr	r3, [pc, #232]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a39      	ldr	r2, [pc, #228]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005596:	f7fc fea9 	bl	80022ec <HAL_GetTick>
 800559a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800559c:	e009      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800559e:	f7fc fea5 	bl	80022ec <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d902      	bls.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	74fb      	strb	r3, [r7, #19]
        break;
 80055b0:	e005      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055b2:	4b30      	ldr	r3, [pc, #192]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ef      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80055be:	7cfb      	ldrb	r3, [r7, #19]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d159      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d01e      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d019      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055e0:	4b23      	ldr	r3, [pc, #140]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ec:	4b20      	ldr	r3, [pc, #128]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005602:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800560c:	4a18      	ldr	r2, [pc, #96]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d016      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561e:	f7fc fe65 	bl	80022ec <HAL_GetTick>
 8005622:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005624:	e00b      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fc fe61 	bl	80022ec <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005634:	4293      	cmp	r3, r2
 8005636:	d902      	bls.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	74fb      	strb	r3, [r7, #19]
            break;
 800563c:	e006      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800563e:	4b0c      	ldr	r3, [pc, #48]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ec      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800564c:	7cfb      	ldrb	r3, [r7, #19]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005652:	4b07      	ldr	r3, [pc, #28]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005658:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	4903      	ldr	r1, [pc, #12]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005668:	e008      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800566a:	7cfb      	ldrb	r3, [r7, #19]
 800566c:	74bb      	strb	r3, [r7, #18]
 800566e:	e005      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005670:	40021000 	.word	0x40021000
 8005674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	7cfb      	ldrb	r3, [r7, #19]
 800567a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800567c:	7c7b      	ldrb	r3, [r7, #17]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d105      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005682:	4ba6      	ldr	r3, [pc, #664]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005686:	4aa5      	ldr	r2, [pc, #660]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800568c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800569a:	4ba0      	ldr	r3, [pc, #640]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a0:	f023 0203 	bic.w	r2, r3, #3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	499c      	ldr	r1, [pc, #624]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056bc:	4b97      	ldr	r3, [pc, #604]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c2:	f023 020c 	bic.w	r2, r3, #12
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	4994      	ldr	r1, [pc, #592]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056de:	4b8f      	ldr	r3, [pc, #572]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	498b      	ldr	r1, [pc, #556]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005700:	4b86      	ldr	r3, [pc, #536]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005706:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	4983      	ldr	r1, [pc, #524]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005722:	4b7e      	ldr	r3, [pc, #504]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005728:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	497a      	ldr	r1, [pc, #488]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005744:	4b75      	ldr	r3, [pc, #468]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	4972      	ldr	r1, [pc, #456]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005766:	4b6d      	ldr	r3, [pc, #436]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	4969      	ldr	r1, [pc, #420]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005788:	4b64      	ldr	r3, [pc, #400]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	4961      	ldr	r1, [pc, #388]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057aa:	4b5c      	ldr	r3, [pc, #368]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	4958      	ldr	r1, [pc, #352]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d015      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057cc:	4b53      	ldr	r3, [pc, #332]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057da:	4950      	ldr	r1, [pc, #320]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057ea:	d105      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ec:	4b4b      	ldr	r3, [pc, #300]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4a4a      	ldr	r2, [pc, #296]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057f6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005800:	2b00      	cmp	r3, #0
 8005802:	d015      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005804:	4b45      	ldr	r3, [pc, #276]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005812:	4942      	ldr	r1, [pc, #264]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005822:	d105      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005824:	4b3d      	ldr	r3, [pc, #244]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	4a3c      	ldr	r2, [pc, #240]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800582e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d015      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800583c:	4b37      	ldr	r3, [pc, #220]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005842:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	4934      	ldr	r1, [pc, #208]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800585a:	d105      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800585c:	4b2f      	ldr	r3, [pc, #188]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4a2e      	ldr	r2, [pc, #184]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005866:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d015      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005874:	4b29      	ldr	r3, [pc, #164]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005882:	4926      	ldr	r1, [pc, #152]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005892:	d105      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005894:	4b21      	ldr	r3, [pc, #132]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4a20      	ldr	r2, [pc, #128]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800589e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d015      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058ac:	4b1b      	ldr	r3, [pc, #108]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	4918      	ldr	r1, [pc, #96]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058ca:	d105      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058cc:	4b13      	ldr	r3, [pc, #76]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a12      	ldr	r2, [pc, #72]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d015      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058e4:	4b0d      	ldr	r3, [pc, #52]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f2:	490a      	ldr	r1, [pc, #40]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005902:	d105      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005904:	4b05      	ldr	r3, [pc, #20]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	4a04      	ldr	r2, [pc, #16]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800590a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800590e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005910:	7cbb      	ldrb	r3, [r7, #18]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	40021000 	.word	0x40021000

08005920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e049      	b.n	80059c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fc fa82 	bl	8001e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	f000 fb12 	bl	8005f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d001      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e04a      	b.n	8005a7e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0201 	orr.w	r2, r2, #1
 80059fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a21      	ldr	r2, [pc, #132]	@ (8005a8c <HAL_TIM_Base_Start_IT+0xbc>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d018      	beq.n	8005a3c <HAL_TIM_Base_Start_IT+0x6c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a12:	d013      	beq.n	8005a3c <HAL_TIM_Base_Start_IT+0x6c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1d      	ldr	r2, [pc, #116]	@ (8005a90 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00e      	beq.n	8005a3c <HAL_TIM_Base_Start_IT+0x6c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1c      	ldr	r2, [pc, #112]	@ (8005a94 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d009      	beq.n	8005a3c <HAL_TIM_Base_Start_IT+0x6c>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a98 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d004      	beq.n	8005a3c <HAL_TIM_Base_Start_IT+0x6c>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a19      	ldr	r2, [pc, #100]	@ (8005a9c <HAL_TIM_Base_Start_IT+0xcc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d115      	bne.n	8005a68 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689a      	ldr	r2, [r3, #8]
 8005a42:	4b17      	ldr	r3, [pc, #92]	@ (8005aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b06      	cmp	r3, #6
 8005a4c:	d015      	beq.n	8005a7a <HAL_TIM_Base_Start_IT+0xaa>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a54:	d011      	beq.n	8005a7a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0201 	orr.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a66:	e008      	b.n	8005a7a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	e000      	b.n	8005a7c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40013400 	.word	0x40013400
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	00010007 	.word	0x00010007

08005aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d020      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01b      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0202 	mvn.w	r2, #2
 8005ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa2c 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa1e 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fa2f 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d020      	beq.n	8005b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0204 	mvn.w	r2, #4
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fa06 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9f8 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fa09 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d020      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01b      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0208 	mvn.w	r2, #8
 8005b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2204      	movs	r2, #4
 8005b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9e0 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 8005b8c:	e005      	b.n	8005b9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9d2 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f9e3 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d020      	beq.n	8005bec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01b      	beq.n	8005bec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0210 	mvn.w	r2, #16
 8005bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f9ba 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 8005bd8:	e005      	b.n	8005be6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9ac 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f9bd 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0201 	mvn.w	r2, #1
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb ff64 	bl	8001ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00c      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fb69 	bl	8006310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00c      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fb61 	bl	8006324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00c      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f977 	bl	8005f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00c      	beq.n	8005caa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f06f 0220 	mvn.w	r2, #32
 8005ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fb29 	bl	80062fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00c      	beq.n	8005cce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fb35 	bl	8006338 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00c      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fb2d 	bl	800634c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00c      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fb25 	bl	8006360 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00c      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fb1d 	bl	8006374 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIM_ConfigClockSource+0x1c>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e0de      	b.n	8005f1e <HAL_TIM_ConfigClockSource+0x1da>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005d7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a63      	ldr	r2, [pc, #396]	@ (8005f28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	f000 80a9 	beq.w	8005ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005da0:	4a61      	ldr	r2, [pc, #388]	@ (8005f28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f200 80ae 	bhi.w	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005da8:	4a60      	ldr	r2, [pc, #384]	@ (8005f2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	f000 80a1 	beq.w	8005ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005db0:	4a5e      	ldr	r2, [pc, #376]	@ (8005f2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	f200 80a6 	bhi.w	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005db8:	4a5d      	ldr	r2, [pc, #372]	@ (8005f30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f000 8099 	beq.w	8005ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005dc0:	4a5b      	ldr	r2, [pc, #364]	@ (8005f30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	f200 809e 	bhi.w	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005dc8:	4a5a      	ldr	r2, [pc, #360]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	f000 8091 	beq.w	8005ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005dd0:	4a58      	ldr	r2, [pc, #352]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f200 8096 	bhi.w	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005dd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ddc:	f000 8089 	beq.w	8005ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005de0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005de4:	f200 808e 	bhi.w	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dec:	d03e      	beq.n	8005e6c <HAL_TIM_ConfigClockSource+0x128>
 8005dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df2:	f200 8087 	bhi.w	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dfa:	f000 8086 	beq.w	8005f0a <HAL_TIM_ConfigClockSource+0x1c6>
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e02:	d87f      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005e04:	2b70      	cmp	r3, #112	@ 0x70
 8005e06:	d01a      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0xfa>
 8005e08:	2b70      	cmp	r3, #112	@ 0x70
 8005e0a:	d87b      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005e0c:	2b60      	cmp	r3, #96	@ 0x60
 8005e0e:	d050      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x16e>
 8005e10:	2b60      	cmp	r3, #96	@ 0x60
 8005e12:	d877      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005e14:	2b50      	cmp	r3, #80	@ 0x50
 8005e16:	d03c      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x14e>
 8005e18:	2b50      	cmp	r3, #80	@ 0x50
 8005e1a:	d873      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005e1c:	2b40      	cmp	r3, #64	@ 0x40
 8005e1e:	d058      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x18e>
 8005e20:	2b40      	cmp	r3, #64	@ 0x40
 8005e22:	d86f      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005e24:	2b30      	cmp	r3, #48	@ 0x30
 8005e26:	d064      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005e28:	2b30      	cmp	r3, #48	@ 0x30
 8005e2a:	d86b      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d060      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d867      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05c      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d05a      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005e3c:	e062      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e4e:	f000 f9b3 	bl	80061b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	609a      	str	r2, [r3, #8]
      break;
 8005e6a:	e04f      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e7c:	f000 f99c 	bl	80061b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e8e:	609a      	str	r2, [r3, #8]
      break;
 8005e90:	e03c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f000 f90e 	bl	80060c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2150      	movs	r1, #80	@ 0x50
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 f967 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005eb0:	e02c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f000 f92d 	bl	800611e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2160      	movs	r1, #96	@ 0x60
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 f957 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005ed0:	e01c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f000 f8ee 	bl	80060c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2140      	movs	r1, #64	@ 0x40
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 f947 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005ef0:	e00c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f000 f93e 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005f02:	e003      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
      break;
 8005f08:	e000      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	00100070 	.word	0x00100070
 8005f2c:	00100040 	.word	0x00100040
 8005f30:	00100030 	.word	0x00100030
 8005f34:	00100020 	.word	0x00100020

08005f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a42      	ldr	r2, [pc, #264]	@ (80060a4 <TIM_Base_SetConfig+0x11c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00f      	beq.n	8005fc0 <TIM_Base_SetConfig+0x38>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa6:	d00b      	beq.n	8005fc0 <TIM_Base_SetConfig+0x38>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a3f      	ldr	r2, [pc, #252]	@ (80060a8 <TIM_Base_SetConfig+0x120>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d007      	beq.n	8005fc0 <TIM_Base_SetConfig+0x38>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a3e      	ldr	r2, [pc, #248]	@ (80060ac <TIM_Base_SetConfig+0x124>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d003      	beq.n	8005fc0 <TIM_Base_SetConfig+0x38>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a3d      	ldr	r2, [pc, #244]	@ (80060b0 <TIM_Base_SetConfig+0x128>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d108      	bne.n	8005fd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a33      	ldr	r2, [pc, #204]	@ (80060a4 <TIM_Base_SetConfig+0x11c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01b      	beq.n	8006012 <TIM_Base_SetConfig+0x8a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe0:	d017      	beq.n	8006012 <TIM_Base_SetConfig+0x8a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a30      	ldr	r2, [pc, #192]	@ (80060a8 <TIM_Base_SetConfig+0x120>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <TIM_Base_SetConfig+0x8a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2f      	ldr	r2, [pc, #188]	@ (80060ac <TIM_Base_SetConfig+0x124>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00f      	beq.n	8006012 <TIM_Base_SetConfig+0x8a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80060b0 <TIM_Base_SetConfig+0x128>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00b      	beq.n	8006012 <TIM_Base_SetConfig+0x8a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80060b4 <TIM_Base_SetConfig+0x12c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d007      	beq.n	8006012 <TIM_Base_SetConfig+0x8a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <TIM_Base_SetConfig+0x130>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_Base_SetConfig+0x8a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2b      	ldr	r2, [pc, #172]	@ (80060bc <TIM_Base_SetConfig+0x134>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a16      	ldr	r2, [pc, #88]	@ (80060a4 <TIM_Base_SetConfig+0x11c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00f      	beq.n	8006070 <TIM_Base_SetConfig+0xe8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a17      	ldr	r2, [pc, #92]	@ (80060b0 <TIM_Base_SetConfig+0x128>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00b      	beq.n	8006070 <TIM_Base_SetConfig+0xe8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a16      	ldr	r2, [pc, #88]	@ (80060b4 <TIM_Base_SetConfig+0x12c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d007      	beq.n	8006070 <TIM_Base_SetConfig+0xe8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a15      	ldr	r2, [pc, #84]	@ (80060b8 <TIM_Base_SetConfig+0x130>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d003      	beq.n	8006070 <TIM_Base_SetConfig+0xe8>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a14      	ldr	r2, [pc, #80]	@ (80060bc <TIM_Base_SetConfig+0x134>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d103      	bne.n	8006078 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b01      	cmp	r3, #1
 8006088:	d105      	bne.n	8006096 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f023 0201 	bic.w	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	611a      	str	r2, [r3, #16]
  }
}
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40013400 	.word	0x40013400
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40014400 	.word	0x40014400
 80060bc:	40014800 	.word	0x40014800

080060c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0201 	bic.w	r2, r3, #1
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f023 030a 	bic.w	r3, r3, #10
 80060fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800611e:	b480      	push	{r7}
 8006120:	b087      	sub	sp, #28
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	f023 0210 	bic.w	r2, r3, #16
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	031b      	lsls	r3, r3, #12
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800615a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f043 0307 	orr.w	r3, r3, #7
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	431a      	orrs	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800620c:	2302      	movs	r3, #2
 800620e:	e065      	b.n	80062dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a2c      	ldr	r2, [pc, #176]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a2b      	ldr	r2, [pc, #172]	@ (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d108      	bne.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800624a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800625c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a1b      	ldr	r2, [pc, #108]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d018      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006286:	d013      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a18      	ldr	r2, [pc, #96]	@ (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00e      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a17      	ldr	r2, [pc, #92]	@ (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d009      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a12      	ldr	r2, [pc, #72]	@ (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d004      	beq.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a13      	ldr	r2, [pc, #76]	@ (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10c      	bne.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40013400 	.word	0x40013400
 80062f0:	40000400 	.word	0x40000400
 80062f4:	40000800 	.word	0x40000800
 80062f8:	40014000 	.word	0x40014000

080062fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e042      	b.n	8006420 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7fb fdc3 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2224      	movs	r2, #36	@ 0x24
 80063b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fee8 	bl	80071a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fc19 	bl	8006c10 <UART_SetConfig>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e01b      	b.n	8006420 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 ff67 	bl	80072ec <UART_CheckIdleState>
 800641e:	4603      	mov	r3, r0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006428:	b480      	push	{r7}
 800642a:	b091      	sub	sp, #68	@ 0x44
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643c:	2b20      	cmp	r3, #32
 800643e:	d178      	bne.n	8006532 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_UART_Transmit_IT+0x24>
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e071      	b.n	8006534 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	88fa      	ldrh	r2, [r7, #6]
 800645a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	88fa      	ldrh	r2, [r7, #6]
 8006462:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2221      	movs	r2, #33	@ 0x21
 8006478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006484:	d12a      	bne.n	80064dc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800648e:	d107      	bne.n	80064a0 <HAL_UART_Transmit_IT+0x78>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d103      	bne.n	80064a0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4a29      	ldr	r2, [pc, #164]	@ (8006540 <HAL_UART_Transmit_IT+0x118>)
 800649c:	679a      	str	r2, [r3, #120]	@ 0x78
 800649e:	e002      	b.n	80064a6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4a28      	ldr	r2, [pc, #160]	@ (8006544 <HAL_UART_Transmit_IT+0x11c>)
 80064a4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3308      	adds	r3, #8
 80064ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064c6:	637a      	str	r2, [r7, #52]	@ 0x34
 80064c8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e5      	bne.n	80064a6 <HAL_UART_Transmit_IT+0x7e>
 80064da:	e028      	b.n	800652e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e4:	d107      	bne.n	80064f6 <HAL_UART_Transmit_IT+0xce>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a15      	ldr	r2, [pc, #84]	@ (8006548 <HAL_UART_Transmit_IT+0x120>)
 80064f2:	679a      	str	r2, [r3, #120]	@ 0x78
 80064f4:	e002      	b.n	80064fc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a14      	ldr	r2, [pc, #80]	@ (800654c <HAL_UART_Transmit_IT+0x124>)
 80064fa:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	613b      	str	r3, [r7, #16]
   return(result);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651a:	623b      	str	r3, [r7, #32]
 800651c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	69f9      	ldr	r1, [r7, #28]
 8006520:	6a3a      	ldr	r2, [r7, #32]
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	61bb      	str	r3, [r7, #24]
   return(result);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e6      	bne.n	80064fc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	e000      	b.n	8006534 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006532:	2302      	movs	r3, #2
  }
}
 8006534:	4618      	mov	r0, r3
 8006536:	3744      	adds	r7, #68	@ 0x44
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	08007c1f 	.word	0x08007c1f
 8006544:	08007b3f 	.word	0x08007b3f
 8006548:	08007a7d 	.word	0x08007a7d
 800654c:	080079c5 	.word	0x080079c5

08006550 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b0ba      	sub	sp, #232	@ 0xe8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006576:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800657a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800657e:	4013      	ands	r3, r2
 8006580:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11b      	bne.n	80065c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d015      	beq.n	80065c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8300 	beq.w	8006bba <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
      }
      return;
 80065c2:	e2fa      	b.n	8006bba <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8123 	beq.w	8006814 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80065d2:	4b8d      	ldr	r3, [pc, #564]	@ (8006808 <HAL_UART_IRQHandler+0x2b8>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80065de:	4b8b      	ldr	r3, [pc, #556]	@ (800680c <HAL_UART_IRQHandler+0x2bc>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 8116 	beq.w	8006814 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d011      	beq.n	8006618 <HAL_UART_IRQHandler+0xc8>
 80065f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2201      	movs	r2, #1
 8006606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660e:	f043 0201 	orr.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d011      	beq.n	8006648 <HAL_UART_IRQHandler+0xf8>
 8006624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2202      	movs	r2, #2
 8006636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663e:	f043 0204 	orr.w	r2, r3, #4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d011      	beq.n	8006678 <HAL_UART_IRQHandler+0x128>
 8006654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2204      	movs	r2, #4
 8006666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666e:	f043 0202 	orr.w	r2, r3, #2
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d017      	beq.n	80066b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d105      	bne.n	800669c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006690:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006694:	4b5c      	ldr	r3, [pc, #368]	@ (8006808 <HAL_UART_IRQHandler+0x2b8>)
 8006696:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2208      	movs	r2, #8
 80066a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066aa:	f043 0208 	orr.w	r2, r3, #8
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d012      	beq.n	80066e6 <HAL_UART_IRQHandler+0x196>
 80066c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00c      	beq.n	80066e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066dc:	f043 0220 	orr.w	r2, r3, #32
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8266 	beq.w	8006bbe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f6:	f003 0320 	and.w	r3, r3, #32
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d013      	beq.n	8006726 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d105      	bne.n	8006716 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800670a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800670e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800672c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673a:	2b40      	cmp	r3, #64	@ 0x40
 800673c:	d005      	beq.n	800674a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800673e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006742:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006746:	2b00      	cmp	r3, #0
 8006748:	d054      	beq.n	80067f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 ffcd 	bl	80076ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675a:	2b40      	cmp	r3, #64	@ 0x40
 800675c:	d146      	bne.n	80067ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3308      	adds	r3, #8
 8006764:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006774:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800677c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3308      	adds	r3, #8
 8006786:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800678a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800678e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006796:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1d9      	bne.n	800675e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d017      	beq.n	80067e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ba:	4a15      	ldr	r2, [pc, #84]	@ (8006810 <HAL_UART_IRQHandler+0x2c0>)
 80067bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fc f84b 	bl	8002860 <HAL_DMA_Abort_IT>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d019      	beq.n	8006804 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80067de:	4610      	mov	r0, r2
 80067e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e2:	e00f      	b.n	8006804 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fa09 	bl	8006bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ea:	e00b      	b.n	8006804 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa05 	bl	8006bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f2:	e007      	b.n	8006804 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fa01 	bl	8006bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006802:	e1dc      	b.n	8006bbe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	bf00      	nop
    return;
 8006806:	e1da      	b.n	8006bbe <HAL_UART_IRQHandler+0x66e>
 8006808:	10000001 	.word	0x10000001
 800680c:	04000120 	.word	0x04000120
 8006810:	080079a1 	.word	0x080079a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006818:	2b01      	cmp	r3, #1
 800681a:	f040 8170 	bne.w	8006afe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8169 	beq.w	8006afe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800682c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 8162 	beq.w	8006afe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2210      	movs	r2, #16
 8006840:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684c:	2b40      	cmp	r3, #64	@ 0x40
 800684e:	f040 80d8 	bne.w	8006a02 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006860:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80af 	beq.w	80069c8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006870:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006874:	429a      	cmp	r2, r3
 8006876:	f080 80a7 	bcs.w	80069c8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006880:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	f040 8087 	bne.w	80069a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1da      	bne.n	8006898 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3308      	adds	r3, #8
 80068e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3308      	adds	r3, #8
 8006902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006906:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800690a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800690e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e1      	bne.n	80068e2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800692e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006934:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3308      	adds	r3, #8
 800693e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006942:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006944:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006948:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e3      	bne.n	800691e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006974:	f023 0310 	bic.w	r3, r3, #16
 8006978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006986:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006988:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800698c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e4      	bne.n	8006964 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fb ff04 	bl	80027ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2202      	movs	r2, #2
 80069aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fb f8cd 	bl	8001b60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80069c6:	e0fc      	b.n	8006bc2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069d2:	429a      	cmp	r2, r3
 80069d4:	f040 80f5 	bne.w	8006bc2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	f040 80eb 	bne.w	8006bc2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fb f8b0 	bl	8001b60 <HAL_UARTEx_RxEventCallback>
      return;
 8006a00:	e0df      	b.n	8006bc2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 80d1 	beq.w	8006bc6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80cc 	beq.w	8006bc6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e4      	bne.n	8006a2e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	623b      	str	r3, [r7, #32]
   return(result);
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e1      	bne.n	8006a64 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f023 0310 	bic.w	r3, r3, #16
 8006ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	69b9      	ldr	r1, [r7, #24]
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e4      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fb f832 	bl	8001b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006afc:	e063      	b.n	8006bc6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <HAL_UART_IRQHandler+0x5d8>
 8006b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 f91c 	bl	8007d5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b26:	e051      	b.n	8006bcc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d014      	beq.n	8006b5e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d105      	bne.n	8006b4c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d03a      	beq.n	8006bca <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
    }
    return;
 8006b5c:	e035      	b.n	8006bca <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <HAL_UART_IRQHandler+0x62e>
 8006b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 f8c6 	bl	8007d08 <UART_EndTransmit_IT>
    return;
 8006b7c:	e026      	b.n	8006bcc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <HAL_UART_IRQHandler+0x64e>
 8006b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b8e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 f8f5 	bl	8007d86 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b9c:	e016      	b.n	8006bcc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d010      	beq.n	8006bcc <HAL_UART_IRQHandler+0x67c>
 8006baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	da0c      	bge.n	8006bcc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 f8dd 	bl	8007d72 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bb8:	e008      	b.n	8006bcc <HAL_UART_IRQHandler+0x67c>
      return;
 8006bba:	bf00      	nop
 8006bbc:	e006      	b.n	8006bcc <HAL_UART_IRQHandler+0x67c>
    return;
 8006bbe:	bf00      	nop
 8006bc0:	e004      	b.n	8006bcc <HAL_UART_IRQHandler+0x67c>
      return;
 8006bc2:	bf00      	nop
 8006bc4:	e002      	b.n	8006bcc <HAL_UART_IRQHandler+0x67c>
      return;
 8006bc6:	bf00      	nop
 8006bc8:	e000      	b.n	8006bcc <HAL_UART_IRQHandler+0x67c>
    return;
 8006bca:	bf00      	nop
  }
}
 8006bcc:	37e8      	adds	r7, #232	@ 0xe8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop

08006bd4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c14:	b08c      	sub	sp, #48	@ 0x30
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4bab      	ldr	r3, [pc, #684]	@ (8006eec <UART_SetConfig+0x2dc>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	6812      	ldr	r2, [r2, #0]
 8006c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4aa0      	ldr	r2, [pc, #640]	@ (8006ef0 <UART_SetConfig+0x2e0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c90:	430b      	orrs	r3, r1
 8006c92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	f023 010f 	bic.w	r1, r3, #15
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a91      	ldr	r2, [pc, #580]	@ (8006ef4 <UART_SetConfig+0x2e4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d125      	bne.n	8006d00 <UART_SetConfig+0xf0>
 8006cb4:	4b90      	ldr	r3, [pc, #576]	@ (8006ef8 <UART_SetConfig+0x2e8>)
 8006cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d81a      	bhi.n	8006cf8 <UART_SetConfig+0xe8>
 8006cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <UART_SetConfig+0xb8>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006cd9 	.word	0x08006cd9
 8006ccc:	08006ce9 	.word	0x08006ce9
 8006cd0:	08006ce1 	.word	0x08006ce1
 8006cd4:	08006cf1 	.word	0x08006cf1
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cde:	e0d6      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ce6:	e0d2      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cee:	e0ce      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cf6:	e0ca      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cfe:	e0c6      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a7d      	ldr	r2, [pc, #500]	@ (8006efc <UART_SetConfig+0x2ec>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d138      	bne.n	8006d7c <UART_SetConfig+0x16c>
 8006d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8006ef8 <UART_SetConfig+0x2e8>)
 8006d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d10:	f003 030c 	and.w	r3, r3, #12
 8006d14:	2b0c      	cmp	r3, #12
 8006d16:	d82d      	bhi.n	8006d74 <UART_SetConfig+0x164>
 8006d18:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <UART_SetConfig+0x110>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006d55 	.word	0x08006d55
 8006d24:	08006d75 	.word	0x08006d75
 8006d28:	08006d75 	.word	0x08006d75
 8006d2c:	08006d75 	.word	0x08006d75
 8006d30:	08006d65 	.word	0x08006d65
 8006d34:	08006d75 	.word	0x08006d75
 8006d38:	08006d75 	.word	0x08006d75
 8006d3c:	08006d75 	.word	0x08006d75
 8006d40:	08006d5d 	.word	0x08006d5d
 8006d44:	08006d75 	.word	0x08006d75
 8006d48:	08006d75 	.word	0x08006d75
 8006d4c:	08006d75 	.word	0x08006d75
 8006d50:	08006d6d 	.word	0x08006d6d
 8006d54:	2300      	movs	r3, #0
 8006d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d5a:	e098      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d62:	e094      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006d64:	2304      	movs	r3, #4
 8006d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d6a:	e090      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d72:	e08c      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006d74:	2310      	movs	r3, #16
 8006d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d7a:	e088      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a5f      	ldr	r2, [pc, #380]	@ (8006f00 <UART_SetConfig+0x2f0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d125      	bne.n	8006dd2 <UART_SetConfig+0x1c2>
 8006d86:	4b5c      	ldr	r3, [pc, #368]	@ (8006ef8 <UART_SetConfig+0x2e8>)
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d90:	2b30      	cmp	r3, #48	@ 0x30
 8006d92:	d016      	beq.n	8006dc2 <UART_SetConfig+0x1b2>
 8006d94:	2b30      	cmp	r3, #48	@ 0x30
 8006d96:	d818      	bhi.n	8006dca <UART_SetConfig+0x1ba>
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d00a      	beq.n	8006db2 <UART_SetConfig+0x1a2>
 8006d9c:	2b20      	cmp	r3, #32
 8006d9e:	d814      	bhi.n	8006dca <UART_SetConfig+0x1ba>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <UART_SetConfig+0x19a>
 8006da4:	2b10      	cmp	r3, #16
 8006da6:	d008      	beq.n	8006dba <UART_SetConfig+0x1aa>
 8006da8:	e00f      	b.n	8006dca <UART_SetConfig+0x1ba>
 8006daa:	2300      	movs	r3, #0
 8006dac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db0:	e06d      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006db2:	2302      	movs	r3, #2
 8006db4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db8:	e069      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006dba:	2304      	movs	r3, #4
 8006dbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc0:	e065      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc8:	e061      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006dca:	2310      	movs	r3, #16
 8006dcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd0:	e05d      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a4b      	ldr	r2, [pc, #300]	@ (8006f04 <UART_SetConfig+0x2f4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d125      	bne.n	8006e28 <UART_SetConfig+0x218>
 8006ddc:	4b46      	ldr	r3, [pc, #280]	@ (8006ef8 <UART_SetConfig+0x2e8>)
 8006dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006de8:	d016      	beq.n	8006e18 <UART_SetConfig+0x208>
 8006dea:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dec:	d818      	bhi.n	8006e20 <UART_SetConfig+0x210>
 8006dee:	2b80      	cmp	r3, #128	@ 0x80
 8006df0:	d00a      	beq.n	8006e08 <UART_SetConfig+0x1f8>
 8006df2:	2b80      	cmp	r3, #128	@ 0x80
 8006df4:	d814      	bhi.n	8006e20 <UART_SetConfig+0x210>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <UART_SetConfig+0x1f0>
 8006dfa:	2b40      	cmp	r3, #64	@ 0x40
 8006dfc:	d008      	beq.n	8006e10 <UART_SetConfig+0x200>
 8006dfe:	e00f      	b.n	8006e20 <UART_SetConfig+0x210>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e06:	e042      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0e:	e03e      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006e10:	2304      	movs	r3, #4
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e16:	e03a      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006e18:	2308      	movs	r3, #8
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1e:	e036      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006e20:	2310      	movs	r3, #16
 8006e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e26:	e032      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a30      	ldr	r2, [pc, #192]	@ (8006ef0 <UART_SetConfig+0x2e0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d12a      	bne.n	8006e88 <UART_SetConfig+0x278>
 8006e32:	4b31      	ldr	r3, [pc, #196]	@ (8006ef8 <UART_SetConfig+0x2e8>)
 8006e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e40:	d01a      	beq.n	8006e78 <UART_SetConfig+0x268>
 8006e42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e46:	d81b      	bhi.n	8006e80 <UART_SetConfig+0x270>
 8006e48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e4c:	d00c      	beq.n	8006e68 <UART_SetConfig+0x258>
 8006e4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e52:	d815      	bhi.n	8006e80 <UART_SetConfig+0x270>
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <UART_SetConfig+0x250>
 8006e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e5c:	d008      	beq.n	8006e70 <UART_SetConfig+0x260>
 8006e5e:	e00f      	b.n	8006e80 <UART_SetConfig+0x270>
 8006e60:	2300      	movs	r3, #0
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e66:	e012      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6e:	e00e      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e76:	e00a      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7e:	e006      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e86:	e002      	b.n	8006e8e <UART_SetConfig+0x27e>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a17      	ldr	r2, [pc, #92]	@ (8006ef0 <UART_SetConfig+0x2e0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	f040 80a8 	bne.w	8006fea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d834      	bhi.n	8006f0c <UART_SetConfig+0x2fc>
 8006ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <UART_SetConfig+0x298>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006f0d 	.word	0x08006f0d
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08006f0d 	.word	0x08006f0d
 8006eb8:	08006edb 	.word	0x08006edb
 8006ebc:	08006f0d 	.word	0x08006f0d
 8006ec0:	08006f0d 	.word	0x08006f0d
 8006ec4:	08006f0d 	.word	0x08006f0d
 8006ec8:	08006ee3 	.word	0x08006ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ecc:	f7fe fac6 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 8006ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ed2:	e021      	b.n	8006f18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f08 <UART_SetConfig+0x2f8>)
 8006ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ed8:	e01e      	b.n	8006f18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eda:	f7fe fa51 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 8006ede:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ee0:	e01a      	b.n	8006f18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ee8:	e016      	b.n	8006f18 <UART_SetConfig+0x308>
 8006eea:	bf00      	nop
 8006eec:	cfff69f3 	.word	0xcfff69f3
 8006ef0:	40008000 	.word	0x40008000
 8006ef4:	40013800 	.word	0x40013800
 8006ef8:	40021000 	.word	0x40021000
 8006efc:	40004400 	.word	0x40004400
 8006f00:	40004800 	.word	0x40004800
 8006f04:	40004c00 	.word	0x40004c00
 8006f08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 812a 	beq.w	8007174 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	4a9e      	ldr	r2, [pc, #632]	@ (80071a0 <UART_SetConfig+0x590>)
 8006f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	4413      	add	r3, r2
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d305      	bcc.n	8006f50 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d903      	bls.n	8006f58 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f56:	e10d      	b.n	8007174 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	60fa      	str	r2, [r7, #12]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f64:	4a8e      	ldr	r2, [pc, #568]	@ (80071a0 <UART_SetConfig+0x590>)
 8006f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	607a      	str	r2, [r7, #4]
 8006f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f7a:	f7f9 f9a1 	bl	80002c0 <__aeabi_uldivmod>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4610      	mov	r0, r2
 8006f84:	4619      	mov	r1, r3
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	020b      	lsls	r3, r1, #8
 8006f90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f94:	0202      	lsls	r2, r0, #8
 8006f96:	6979      	ldr	r1, [r7, #20]
 8006f98:	6849      	ldr	r1, [r1, #4]
 8006f9a:	0849      	lsrs	r1, r1, #1
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	eb12 0804 	adds.w	r8, r2, r4
 8006fa6:	eb43 0905 	adc.w	r9, r3, r5
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	469a      	mov	sl, r3
 8006fb2:	4693      	mov	fp, r2
 8006fb4:	4652      	mov	r2, sl
 8006fb6:	465b      	mov	r3, fp
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 f980 	bl	80002c0 <__aeabi_uldivmod>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fce:	d308      	bcc.n	8006fe2 <UART_SetConfig+0x3d2>
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fd6:	d204      	bcs.n	8006fe2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6a3a      	ldr	r2, [r7, #32]
 8006fde:	60da      	str	r2, [r3, #12]
 8006fe0:	e0c8      	b.n	8007174 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006fe8:	e0c4      	b.n	8007174 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff2:	d167      	bne.n	80070c4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006ff4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d828      	bhi.n	800704e <UART_SetConfig+0x43e>
 8006ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <UART_SetConfig+0x3f4>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007029 	.word	0x08007029
 8007008:	08007031 	.word	0x08007031
 800700c:	08007039 	.word	0x08007039
 8007010:	0800704f 	.word	0x0800704f
 8007014:	0800703f 	.word	0x0800703f
 8007018:	0800704f 	.word	0x0800704f
 800701c:	0800704f 	.word	0x0800704f
 8007020:	0800704f 	.word	0x0800704f
 8007024:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007028:	f7fe fa18 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 800702c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800702e:	e014      	b.n	800705a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007030:	f7fe fa2a 	bl	8005488 <HAL_RCC_GetPCLK2Freq>
 8007034:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007036:	e010      	b.n	800705a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007038:	4b5a      	ldr	r3, [pc, #360]	@ (80071a4 <UART_SetConfig+0x594>)
 800703a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800703c:	e00d      	b.n	800705a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703e:	f7fe f99f 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 8007042:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007044:	e009      	b.n	800705a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800704c:	e005      	b.n	800705a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8089 	beq.w	8007174 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	4a4e      	ldr	r2, [pc, #312]	@ (80071a0 <UART_SetConfig+0x590>)
 8007068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800706c:	461a      	mov	r2, r3
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	fbb3 f3f2 	udiv	r3, r3, r2
 8007074:	005a      	lsls	r2, r3, #1
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	085b      	lsrs	r3, r3, #1
 800707c:	441a      	add	r2, r3
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	fbb2 f3f3 	udiv	r3, r2, r3
 8007086:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	2b0f      	cmp	r3, #15
 800708c:	d916      	bls.n	80070bc <UART_SetConfig+0x4ac>
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007094:	d212      	bcs.n	80070bc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	b29b      	uxth	r3, r3
 800709a:	f023 030f 	bic.w	r3, r3, #15
 800709e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	8bfb      	ldrh	r3, [r7, #30]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	8bfa      	ldrh	r2, [r7, #30]
 80070b8:	60da      	str	r2, [r3, #12]
 80070ba:	e05b      	b.n	8007174 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070c2:	e057      	b.n	8007174 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d828      	bhi.n	800711e <UART_SetConfig+0x50e>
 80070cc:	a201      	add	r2, pc, #4	@ (adr r2, 80070d4 <UART_SetConfig+0x4c4>)
 80070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d2:	bf00      	nop
 80070d4:	080070f9 	.word	0x080070f9
 80070d8:	08007101 	.word	0x08007101
 80070dc:	08007109 	.word	0x08007109
 80070e0:	0800711f 	.word	0x0800711f
 80070e4:	0800710f 	.word	0x0800710f
 80070e8:	0800711f 	.word	0x0800711f
 80070ec:	0800711f 	.word	0x0800711f
 80070f0:	0800711f 	.word	0x0800711f
 80070f4:	08007117 	.word	0x08007117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f8:	f7fe f9b0 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 80070fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070fe:	e014      	b.n	800712a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007100:	f7fe f9c2 	bl	8005488 <HAL_RCC_GetPCLK2Freq>
 8007104:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007106:	e010      	b.n	800712a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007108:	4b26      	ldr	r3, [pc, #152]	@ (80071a4 <UART_SetConfig+0x594>)
 800710a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800710c:	e00d      	b.n	800712a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800710e:	f7fe f937 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 8007112:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007114:	e009      	b.n	800712a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800711a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800711c:	e005      	b.n	800712a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007128:	bf00      	nop
    }

    if (pclk != 0U)
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	d021      	beq.n	8007174 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007134:	4a1a      	ldr	r2, [pc, #104]	@ (80071a0 <UART_SetConfig+0x590>)
 8007136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800713a:	461a      	mov	r2, r3
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	441a      	add	r2, r3
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007152:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	2b0f      	cmp	r3, #15
 8007158:	d909      	bls.n	800716e <UART_SetConfig+0x55e>
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007160:	d205      	bcs.n	800716e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	b29a      	uxth	r2, r3
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60da      	str	r2, [r3, #12]
 800716c:	e002      	b.n	8007174 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2201      	movs	r2, #1
 8007178:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2201      	movs	r2, #1
 8007180:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2200      	movs	r2, #0
 8007188:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2200      	movs	r2, #0
 800718e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007190:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007194:	4618      	mov	r0, r3
 8007196:	3730      	adds	r7, #48	@ 0x30
 8007198:	46bd      	mov	sp, r7
 800719a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800719e:	bf00      	nop
 80071a0:	0800d224 	.word	0x0800d224
 80071a4:	00f42400 	.word	0x00f42400

080071a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01a      	beq.n	80072be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072a6:	d10a      	bne.n	80072be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	605a      	str	r2, [r3, #4]
  }
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b098      	sub	sp, #96	@ 0x60
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072fc:	f7fa fff6 	bl	80022ec <HAL_GetTick>
 8007300:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b08      	cmp	r3, #8
 800730e:	d12f      	bne.n	8007370 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007310:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007318:	2200      	movs	r2, #0
 800731a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f88e 	bl	8007440 <UART_WaitOnFlagUntilTimeout>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d022      	beq.n	8007370 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800733e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007348:	647b      	str	r3, [r7, #68]	@ 0x44
 800734a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800734e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007350:	e841 2300 	strex	r3, r2, [r1]
 8007354:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e6      	bne.n	800732a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e063      	b.n	8007438 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b04      	cmp	r3, #4
 800737c:	d149      	bne.n	8007412 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800737e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007386:	2200      	movs	r2, #0
 8007388:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f857 	bl	8007440 <UART_WaitOnFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d03c      	beq.n	8007412 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	623b      	str	r3, [r7, #32]
   return(result);
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e6      	bne.n	8007398 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3308      	adds	r3, #8
 80073d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f023 0301 	bic.w	r3, r3, #1
 80073e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ea:	61fa      	str	r2, [r7, #28]
 80073ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	69b9      	ldr	r1, [r7, #24]
 80073f0:	69fa      	ldr	r2, [r7, #28]
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	617b      	str	r3, [r7, #20]
   return(result);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e5      	bne.n	80073ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2220      	movs	r2, #32
 8007402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e012      	b.n	8007438 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3758      	adds	r7, #88	@ 0x58
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007450:	e04f      	b.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007458:	d04b      	beq.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745a:	f7fa ff47 	bl	80022ec <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	429a      	cmp	r2, r3
 8007468:	d302      	bcc.n	8007470 <UART_WaitOnFlagUntilTimeout+0x30>
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e04e      	b.n	8007512 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	d037      	beq.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b80      	cmp	r3, #128	@ 0x80
 8007486:	d034      	beq.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b40      	cmp	r3, #64	@ 0x40
 800748c:	d031      	beq.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	f003 0308 	and.w	r3, r3, #8
 8007498:	2b08      	cmp	r3, #8
 800749a:	d110      	bne.n	80074be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2208      	movs	r2, #8
 80074a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 f920 	bl	80076ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2208      	movs	r2, #8
 80074ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e029      	b.n	8007512 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074cc:	d111      	bne.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f906 	bl	80076ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e00f      	b.n	8007512 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69da      	ldr	r2, [r3, #28]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4013      	ands	r3, r2
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	429a      	cmp	r2, r3
 8007500:	bf0c      	ite	eq
 8007502:	2301      	moveq	r3, #1
 8007504:	2300      	movne	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	461a      	mov	r2, r3
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	429a      	cmp	r2, r3
 800750e:	d0a0      	beq.n	8007452 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b096      	sub	sp, #88	@ 0x58
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2222      	movs	r2, #34	@ 0x22
 8007544:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800754e:	2b00      	cmp	r3, #0
 8007550:	d02d      	beq.n	80075ae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007558:	4a40      	ldr	r2, [pc, #256]	@ (800765c <UART_Start_Receive_DMA+0x140>)
 800755a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007562:	4a3f      	ldr	r2, [pc, #252]	@ (8007660 <UART_Start_Receive_DMA+0x144>)
 8007564:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800756c:	4a3d      	ldr	r2, [pc, #244]	@ (8007664 <UART_Start_Receive_DMA+0x148>)
 800756e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007576:	2200      	movs	r2, #0
 8007578:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3324      	adds	r3, #36	@ 0x24
 8007586:	4619      	mov	r1, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800758c:	461a      	mov	r2, r3
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	f7fb f892 	bl	80026b8 <HAL_DMA_Start_IT>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2210      	movs	r2, #16
 800759e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e051      	b.n	8007652 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d018      	beq.n	80075e8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075d6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80075da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80075e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e6      	bne.n	80075b6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3308      	adds	r3, #8
 80075ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	f043 0301 	orr.w	r3, r3, #1
 80075fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3308      	adds	r3, #8
 8007606:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007608:	637a      	str	r2, [r7, #52]	@ 0x34
 800760a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800760e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e5      	bne.n	80075e8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3308      	adds	r3, #8
 8007622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	613b      	str	r3, [r7, #16]
   return(result);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800763c:	623a      	str	r2, [r7, #32]
 800763e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	69f9      	ldr	r1, [r7, #28]
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	61bb      	str	r3, [r7, #24]
   return(result);
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e5      	bne.n	800761c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3758      	adds	r7, #88	@ 0x58
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	080077b7 	.word	0x080077b7
 8007660:	080078e3 	.word	0x080078e3
 8007664:	08007921 	.word	0x08007921

08007668 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007668:	b480      	push	{r7}
 800766a:	b08f      	sub	sp, #60	@ 0x3c
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	61fb      	str	r3, [r7, #28]
   return(result);
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007690:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80076b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c2:	61ba      	str	r2, [r7, #24]
 80076c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6979      	ldr	r1, [r7, #20]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	613b      	str	r3, [r7, #16]
   return(result);
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80076de:	bf00      	nop
 80076e0:	373c      	adds	r7, #60	@ 0x3c
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b095      	sub	sp, #84	@ 0x54
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007710:	643b      	str	r3, [r7, #64]	@ 0x40
 8007712:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800771e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e6      	bne.n	80076f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	61fb      	str	r3, [r7, #28]
   return(result);
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800773a:	f023 0301 	bic.w	r3, r3, #1
 800773e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3308      	adds	r3, #8
 8007746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007748:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800774a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800774e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e3      	bne.n	8007724 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007760:	2b01      	cmp	r3, #1
 8007762:	d118      	bne.n	8007796 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	60bb      	str	r3, [r7, #8]
   return(result);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f023 0310 	bic.w	r3, r3, #16
 8007778:	647b      	str	r3, [r7, #68]	@ 0x44
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6979      	ldr	r1, [r7, #20]
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	613b      	str	r3, [r7, #16]
   return(result);
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e6      	bne.n	8007764 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2220      	movs	r2, #32
 800779a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80077aa:	bf00      	nop
 80077ac:	3754      	adds	r7, #84	@ 0x54
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b09c      	sub	sp, #112	@ 0x70
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d171      	bne.n	80078b6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80077d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e6      	bne.n	80077da <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800781c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781e:	f023 0301 	bic.w	r3, r3, #1
 8007822:	667b      	str	r3, [r7, #100]	@ 0x64
 8007824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800782c:	647a      	str	r2, [r7, #68]	@ 0x44
 800782e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800783a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	623b      	str	r3, [r7, #32]
   return(result);
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007856:	663b      	str	r3, [r7, #96]	@ 0x60
 8007858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007860:	633a      	str	r2, [r7, #48]	@ 0x30
 8007862:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800786e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007876:	2220      	movs	r2, #32
 8007878:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800787e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007880:	2b01      	cmp	r3, #1
 8007882:	d118      	bne.n	80078b6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	60fb      	str	r3, [r7, #12]
   return(result);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f023 0310 	bic.w	r3, r3, #16
 8007898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800789a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	69b9      	ldr	r1, [r7, #24]
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	617b      	str	r3, [r7, #20]
   return(result);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e6      	bne.n	8007884 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078b8:	2200      	movs	r2, #0
 80078ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d107      	bne.n	80078d4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078ca:	4619      	mov	r1, r3
 80078cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078ce:	f7fa f947 	bl	8001b60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078d2:	e002      	b.n	80078da <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80078d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078d6:	f7ff f97d 	bl	8006bd4 <HAL_UART_RxCpltCallback>
}
 80078da:	bf00      	nop
 80078dc:	3770      	adds	r7, #112	@ 0x70
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d109      	bne.n	8007912 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007904:	085b      	lsrs	r3, r3, #1
 8007906:	b29b      	uxth	r3, r3
 8007908:	4619      	mov	r1, r3
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f7fa f928 	bl	8001b60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007910:	e002      	b.n	8007918 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f7ff f968 	bl	8006be8 <HAL_UART_RxHalfCpltCallback>
}
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007934:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800793c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007948:	2b80      	cmp	r3, #128	@ 0x80
 800794a:	d109      	bne.n	8007960 <UART_DMAError+0x40>
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2b21      	cmp	r3, #33	@ 0x21
 8007950:	d106      	bne.n	8007960 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2200      	movs	r2, #0
 8007956:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800795a:	6978      	ldr	r0, [r7, #20]
 800795c:	f7ff fe84 	bl	8007668 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796a:	2b40      	cmp	r3, #64	@ 0x40
 800796c:	d109      	bne.n	8007982 <UART_DMAError+0x62>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b22      	cmp	r3, #34	@ 0x22
 8007972:	d106      	bne.n	8007982 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2200      	movs	r2, #0
 8007978:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800797c:	6978      	ldr	r0, [r7, #20]
 800797e:	f7ff feb4 	bl	80076ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007988:	f043 0210 	orr.w	r2, r3, #16
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007992:	6978      	ldr	r0, [r7, #20]
 8007994:	f7ff f932 	bl	8006bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007998:	bf00      	nop
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff f920 	bl	8006bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b08f      	sub	sp, #60	@ 0x3c
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d2:	2b21      	cmp	r3, #33	@ 0x21
 80079d4:	d14c      	bne.n	8007a70 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d132      	bne.n	8007a48 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a02:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e6      	bne.n	80079e2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	6979      	ldr	r1, [r7, #20]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e6      	bne.n	8007a14 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007a46:	e013      	b.n	8007a70 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a4c:	781a      	ldrb	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007a70:	bf00      	nop
 8007a72:	373c      	adds	r7, #60	@ 0x3c
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b091      	sub	sp, #68	@ 0x44
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a8a:	2b21      	cmp	r3, #33	@ 0x21
 8007a8c:	d151      	bne.n	8007b32 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d132      	bne.n	8007b00 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aea:	61fb      	str	r3, [r7, #28]
 8007aec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	69b9      	ldr	r1, [r7, #24]
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	617b      	str	r3, [r7, #20]
   return(result);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e6      	bne.n	8007acc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007afe:	e018      	b.n	8007b32 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b14:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1a:	1c9a      	adds	r2, r3, #2
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007b32:	bf00      	nop
 8007b34:	3744      	adds	r7, #68	@ 0x44
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b091      	sub	sp, #68	@ 0x44
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4c:	2b21      	cmp	r3, #33	@ 0x21
 8007b4e:	d160      	bne.n	8007c12 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b56:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007b58:	e057      	b.n	8007c0a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d133      	bne.n	8007bce <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	623b      	str	r3, [r7, #32]
   return(result);
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b86:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb8:	61fb      	str	r3, [r7, #28]
 8007bba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	69b9      	ldr	r1, [r7, #24]
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e6      	bne.n	8007b9a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007bcc:	e021      	b.n	8007c12 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d013      	beq.n	8007c04 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be0:	781a      	ldrb	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007c04:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007c06:	3b01      	subs	r3, #1
 8007c08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007c0a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1a4      	bne.n	8007b5a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007c10:	e7ff      	b.n	8007c12 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007c12:	bf00      	nop
 8007c14:	3744      	adds	r7, #68	@ 0x44
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b091      	sub	sp, #68	@ 0x44
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2c:	2b21      	cmp	r3, #33	@ 0x21
 8007c2e:	d165      	bne.n	8007cfc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007c38:	e05c      	b.n	8007cf4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d133      	bne.n	8007cae <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3308      	adds	r3, #8
 8007c64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e5      	bne.n	8007c46 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	61bb      	str	r3, [r7, #24]
 8007c9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6979      	ldr	r1, [r7, #20]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e6      	bne.n	8007c7a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007cac:	e026      	b.n	8007cfc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d018      	beq.n	8007cee <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cd0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd6:	1c9a      	adds	r2, r3, #2
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007cee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007cf4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d19f      	bne.n	8007c3a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007cfa:	e7ff      	b.n	8007cfc <UART_TxISR_16BIT_FIFOEN+0xde>
 8007cfc:	bf00      	nop
 8007cfe:	3744      	adds	r7, #68	@ 0x44
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	61bb      	str	r3, [r7, #24]
 8007d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6979      	ldr	r1, [r7, #20]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e6      	bne.n	8007d10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7f9 ff77 	bl	8001c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d56:	bf00      	nop
 8007d58:	3720      	adds	r7, #32
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_UARTEx_DisableFifoMode+0x16>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e027      	b.n	8007e00 <HAL_UARTEx_DisableFifoMode+0x66>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2224      	movs	r2, #36	@ 0x24
 8007dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0201 	bic.w	r2, r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007dde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e02d      	b.n	8007e80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2224      	movs	r2, #36	@ 0x24
 8007e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0201 	bic.w	r2, r2, #1
 8007e4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f8a3 	bl	8007fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d101      	bne.n	8007ea0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e02d      	b.n	8007efc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2224      	movs	r2, #36	@ 0x24
 8007eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0201 	bic.w	r2, r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f865 	bl	8007fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08c      	sub	sp, #48	@ 0x30
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d142      	bne.n	8007fa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007f22:	88fb      	ldrh	r3, [r7, #6]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e03b      	b.n	8007fa4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff faec 	bl	800751c <UART_Start_Receive_DMA>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d124      	bne.n	8007f9c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d11d      	bne.n	8007f96 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2210      	movs	r2, #16
 8007f60:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	617b      	str	r3, [r7, #20]
   return(result);
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f043 0310 	orr.w	r3, r3, #16
 8007f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f82:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	6a39      	ldr	r1, [r7, #32]
 8007f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e6      	bne.n	8007f62 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007f94:	e002      	b.n	8007f9c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007fa0:	e000      	b.n	8007fa4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007fa2:	2302      	movs	r3, #2
  }
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3730      	adds	r7, #48	@ 0x30
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d108      	bne.n	8007fce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fcc:	e031      	b.n	8008032 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fce:	2308      	movs	r3, #8
 8007fd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fd2:	2308      	movs	r3, #8
 8007fd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	0e5b      	lsrs	r3, r3, #25
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	0f5b      	lsrs	r3, r3, #29
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	7b3a      	ldrb	r2, [r7, #12]
 8007ffa:	4911      	ldr	r1, [pc, #68]	@ (8008040 <UARTEx_SetNbDataToProcess+0x94>)
 8007ffc:	5c8a      	ldrb	r2, [r1, r2]
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008002:	7b3a      	ldrb	r2, [r7, #12]
 8008004:	490f      	ldr	r1, [pc, #60]	@ (8008044 <UARTEx_SetNbDataToProcess+0x98>)
 8008006:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008008:	fb93 f3f2 	sdiv	r3, r3, r2
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	7b7a      	ldrb	r2, [r7, #13]
 8008018:	4909      	ldr	r1, [pc, #36]	@ (8008040 <UARTEx_SetNbDataToProcess+0x94>)
 800801a:	5c8a      	ldrb	r2, [r1, r2]
 800801c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008020:	7b7a      	ldrb	r2, [r7, #13]
 8008022:	4908      	ldr	r1, [pc, #32]	@ (8008044 <UARTEx_SetNbDataToProcess+0x98>)
 8008024:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008026:	fb93 f3f2 	sdiv	r3, r3, r2
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008032:	bf00      	nop
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	0800d23c 	.word	0x0800d23c
 8008044:	0800d244 	.word	0x0800d244

08008048 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008058:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800805c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	b29a      	uxth	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008076:	b480      	push	{r7}
 8008078:	b085      	sub	sp, #20
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800807e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008082:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	b29b      	uxth	r3, r3
 8008090:	43db      	mvns	r3, r3
 8008092:	b29b      	uxth	r3, r3
 8008094:	4013      	ands	r3, r2
 8008096:	b29a      	uxth	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	1d3b      	adds	r3, r7, #4
 80080b6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b0a7      	sub	sp, #156	@ 0x9c
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800810a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800810e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	78db      	ldrb	r3, [r3, #3]
 8008116:	2b03      	cmp	r3, #3
 8008118:	d81f      	bhi.n	800815a <USB_ActivateEndpoint+0x72>
 800811a:	a201      	add	r2, pc, #4	@ (adr r2, 8008120 <USB_ActivateEndpoint+0x38>)
 800811c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008120:	08008131 	.word	0x08008131
 8008124:	0800814d 	.word	0x0800814d
 8008128:	08008163 	.word	0x08008163
 800812c:	0800813f 	.word	0x0800813f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008130:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008134:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008138:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800813c:	e012      	b.n	8008164 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800813e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008142:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008146:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800814a:	e00b      	b.n	8008164 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800814c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008150:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008154:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008158:	e004      	b.n	8008164 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8008160:	e000      	b.n	8008164 <USB_ActivateEndpoint+0x7c>
      break;
 8008162:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	441a      	add	r2, r3
 800816e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800817a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800817e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008182:	b29b      	uxth	r3, r3
 8008184:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	b21b      	sxth	r3, r3
 8008196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800819a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800819e:	b21a      	sxth	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	b21b      	sxth	r3, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	b21b      	sxth	r3, r3
 80081aa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	441a      	add	r2, r3
 80081b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80081bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	7b1b      	ldrb	r3, [r3, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f040 8180 	bne.w	80084da <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	785b      	ldrb	r3, [r3, #1]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 8084 	beq.w	80082ec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	61bb      	str	r3, [r7, #24]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	461a      	mov	r2, r3
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	4413      	add	r3, r2
 80081f6:	61bb      	str	r3, [r7, #24]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	00da      	lsls	r2, r3, #3
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	88db      	ldrh	r3, [r3, #6]
 800820c:	085b      	lsrs	r3, r3, #1
 800820e:	b29b      	uxth	r3, r3
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	827b      	strh	r3, [r7, #18]
 8008226:	8a7b      	ldrh	r3, [r7, #18]
 8008228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01b      	beq.n	8008268 <USB_ActivateEndpoint+0x180>
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008246:	823b      	strh	r3, [r7, #16]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	441a      	add	r2, r3
 8008252:	8a3b      	ldrh	r3, [r7, #16]
 8008254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800825c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008260:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008264:	b29b      	uxth	r3, r3
 8008266:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	78db      	ldrb	r3, [r3, #3]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d020      	beq.n	80082b2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	b29b      	uxth	r3, r3
 800827e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008286:	81bb      	strh	r3, [r7, #12]
 8008288:	89bb      	ldrh	r3, [r7, #12]
 800828a:	f083 0320 	eor.w	r3, r3, #32
 800828e:	81bb      	strh	r3, [r7, #12]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	441a      	add	r2, r3
 800829a:	89bb      	ldrh	r3, [r7, #12]
 800829c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	8013      	strh	r3, [r2, #0]
 80082b0:	e3f9      	b.n	8008aa6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082c8:	81fb      	strh	r3, [r7, #14]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	441a      	add	r2, r3
 80082d4:	89fb      	ldrh	r3, [r7, #14]
 80082d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	8013      	strh	r3, [r2, #0]
 80082ea:	e3dc      	b.n	8008aa6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	4413      	add	r3, r2
 80082fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	00da      	lsls	r2, r3, #3
 8008306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008308:	4413      	add	r3, r2
 800830a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800830e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	085b      	lsrs	r3, r3, #1
 8008316:	b29b      	uxth	r3, r3
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	b29a      	uxth	r2, r3
 800831c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800832a:	b29b      	uxth	r3, r3
 800832c:	461a      	mov	r2, r3
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008330:	4413      	add	r3, r2
 8008332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	00da      	lsls	r2, r3, #3
 800833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833c:	4413      	add	r3, r2
 800833e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008342:	627b      	str	r3, [r7, #36]	@ 0x24
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800834e:	b29a      	uxth	r2, r3
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <USB_ActivateEndpoint+0x28a>
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836a:	b29a      	uxth	r2, r3
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	801a      	strh	r2, [r3, #0]
 8008370:	e041      	b.n	80083f6 <USB_ActivateEndpoint+0x30e>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	2b3e      	cmp	r3, #62	@ 0x3e
 8008378:	d81c      	bhi.n	80083b4 <USB_ActivateEndpoint+0x2cc>
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <USB_ActivateEndpoint+0x2b2>
 8008390:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008394:	3301      	adds	r3, #1
 8008396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29a      	uxth	r2, r3
 80083a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	029b      	lsls	r3, r3, #10
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	4313      	orrs	r3, r2
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	801a      	strh	r2, [r3, #0]
 80083b2:	e020      	b.n	80083f6 <USB_ActivateEndpoint+0x30e>
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	095b      	lsrs	r3, r3, #5
 80083ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	f003 031f 	and.w	r3, r3, #31
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <USB_ActivateEndpoint+0x2ec>
 80083ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083ce:	3b01      	subs	r3, #1
 80083d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80083d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29a      	uxth	r2, r3
 80083da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083de:	b29b      	uxth	r3, r3
 80083e0:	029b      	lsls	r3, r3, #10
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	4313      	orrs	r3, r2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008404:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d01b      	beq.n	8008446 <USB_ActivateEndpoint+0x35e>
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008424:	843b      	strh	r3, [r7, #32]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	441a      	add	r2, r3
 8008430:	8c3b      	ldrh	r3, [r7, #32]
 8008432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800843a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800843e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008442:	b29b      	uxth	r3, r3
 8008444:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d124      	bne.n	8008498 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008464:	83bb      	strh	r3, [r7, #28]
 8008466:	8bbb      	ldrh	r3, [r7, #28]
 8008468:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800846c:	83bb      	strh	r3, [r7, #28]
 800846e:	8bbb      	ldrh	r3, [r7, #28]
 8008470:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008474:	83bb      	strh	r3, [r7, #28]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	441a      	add	r2, r3
 8008480:	8bbb      	ldrh	r3, [r7, #28]
 8008482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800848a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800848e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008492:	b29b      	uxth	r3, r3
 8008494:	8013      	strh	r3, [r2, #0]
 8008496:	e306      	b.n	8008aa6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ae:	83fb      	strh	r3, [r7, #30]
 80084b0:	8bfb      	ldrh	r3, [r7, #30]
 80084b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084b6:	83fb      	strh	r3, [r7, #30]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	441a      	add	r2, r3
 80084c2:	8bfb      	ldrh	r3, [r7, #30]
 80084c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	8013      	strh	r3, [r2, #0]
 80084d8:	e2e5      	b.n	8008aa6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	78db      	ldrb	r3, [r3, #3]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d11e      	bne.n	8008520 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800850a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800850e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008512:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800851a:	b29b      	uxth	r3, r3
 800851c:	8013      	strh	r3, [r2, #0]
 800851e:	e01d      	b.n	800855c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b29b      	uxth	r3, r3
 800852e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008536:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	441a      	add	r2, r3
 8008544:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800854c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008558:	b29b      	uxth	r3, r3
 800855a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008566:	b29b      	uxth	r3, r3
 8008568:	461a      	mov	r2, r3
 800856a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800856c:	4413      	add	r3, r2
 800856e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	00da      	lsls	r2, r3, #3
 8008576:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008578:	4413      	add	r3, r2
 800857a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800857e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	891b      	ldrh	r3, [r3, #8]
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	b29b      	uxth	r3, r3
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	b29a      	uxth	r2, r3
 800858c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800858e:	801a      	strh	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	677b      	str	r3, [r7, #116]	@ 0x74
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800859a:	b29b      	uxth	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085a0:	4413      	add	r3, r2
 80085a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	00da      	lsls	r2, r3, #3
 80085aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085ac:	4413      	add	r3, r2
 80085ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80085b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	895b      	ldrh	r3, [r3, #10]
 80085b8:	085b      	lsrs	r3, r3, #1
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f040 81af 	bne.w	800892c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80085de:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80085e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d01d      	beq.n	8008626 <USB_ActivateEndpoint+0x53e>
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008600:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	441a      	add	r2, r3
 800860e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800861a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800861e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008622:	b29b      	uxth	r3, r3
 8008624:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008636:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800863a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01d      	beq.n	800867e <USB_ActivateEndpoint+0x596>
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008658:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	441a      	add	r2, r3
 8008666:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800866a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800866e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008676:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800867a:	b29b      	uxth	r3, r3
 800867c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d16b      	bne.n	800875e <USB_ActivateEndpoint+0x676>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008690:	b29b      	uxth	r3, r3
 8008692:	461a      	mov	r2, r3
 8008694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008696:	4413      	add	r3, r2
 8008698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	00da      	lsls	r2, r3, #3
 80086a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086a2:	4413      	add	r3, r2
 80086a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80086a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086b8:	801a      	strh	r2, [r3, #0]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10a      	bne.n	80086d8 <USB_ActivateEndpoint+0x5f0>
 80086c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	e05d      	b.n	8008794 <USB_ActivateEndpoint+0x6ac>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80086de:	d81c      	bhi.n	800871a <USB_ActivateEndpoint+0x632>
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	085b      	lsrs	r3, r3, #1
 80086e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <USB_ActivateEndpoint+0x618>
 80086f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086fa:	3301      	adds	r3, #1
 80086fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	b29a      	uxth	r2, r3
 8008706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800870a:	b29b      	uxth	r3, r3
 800870c:	029b      	lsls	r3, r3, #10
 800870e:	b29b      	uxth	r3, r3
 8008710:	4313      	orrs	r3, r2
 8008712:	b29a      	uxth	r2, r3
 8008714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008716:	801a      	strh	r2, [r3, #0]
 8008718:	e03c      	b.n	8008794 <USB_ActivateEndpoint+0x6ac>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	095b      	lsrs	r3, r3, #5
 8008720:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	2b00      	cmp	r3, #0
 800872e:	d104      	bne.n	800873a <USB_ActivateEndpoint+0x652>
 8008730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008734:	3b01      	subs	r3, #1
 8008736:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800873a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	b29a      	uxth	r2, r3
 8008740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008744:	b29b      	uxth	r3, r3
 8008746:	029b      	lsls	r3, r3, #10
 8008748:	b29b      	uxth	r3, r3
 800874a:	4313      	orrs	r3, r2
 800874c:	b29b      	uxth	r3, r3
 800874e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008756:	b29a      	uxth	r2, r3
 8008758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	e01a      	b.n	8008794 <USB_ActivateEndpoint+0x6ac>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d116      	bne.n	8008794 <USB_ActivateEndpoint+0x6ac>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	657b      	str	r3, [r7, #84]	@ 0x54
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008770:	b29b      	uxth	r3, r3
 8008772:	461a      	mov	r2, r3
 8008774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008776:	4413      	add	r3, r2
 8008778:	657b      	str	r3, [r7, #84]	@ 0x54
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	00da      	lsls	r2, r3, #3
 8008780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008782:	4413      	add	r3, r2
 8008784:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008788:	653b      	str	r3, [r7, #80]	@ 0x50
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	b29a      	uxth	r2, r3
 8008790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008792:	801a      	strh	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	647b      	str	r3, [r7, #68]	@ 0x44
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d16b      	bne.n	8008878 <USB_ActivateEndpoint+0x790>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	461a      	mov	r2, r3
 80087ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b0:	4413      	add	r3, r2
 80087b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	00da      	lsls	r2, r3, #3
 80087ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087bc:	4413      	add	r3, r2
 80087be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d2:	801a      	strh	r2, [r3, #0]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <USB_ActivateEndpoint+0x70a>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ee:	801a      	strh	r2, [r3, #0]
 80087f0:	e05b      	b.n	80088aa <USB_ActivateEndpoint+0x7c2>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80087f8:	d81c      	bhi.n	8008834 <USB_ActivateEndpoint+0x74c>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <USB_ActivateEndpoint+0x732>
 8008810:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008814:	3301      	adds	r3, #1
 8008816:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800881a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29a      	uxth	r2, r3
 8008820:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008824:	b29b      	uxth	r3, r3
 8008826:	029b      	lsls	r3, r3, #10
 8008828:	b29b      	uxth	r3, r3
 800882a:	4313      	orrs	r3, r2
 800882c:	b29a      	uxth	r2, r3
 800882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008830:	801a      	strh	r2, [r3, #0]
 8008832:	e03a      	b.n	80088aa <USB_ActivateEndpoint+0x7c2>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	095b      	lsrs	r3, r3, #5
 800883a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 031f 	and.w	r3, r3, #31
 8008846:	2b00      	cmp	r3, #0
 8008848:	d104      	bne.n	8008854 <USB_ActivateEndpoint+0x76c>
 800884a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800884e:	3b01      	subs	r3, #1
 8008850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29a      	uxth	r2, r3
 800885a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800885e:	b29b      	uxth	r3, r3
 8008860:	029b      	lsls	r3, r3, #10
 8008862:	b29b      	uxth	r3, r3
 8008864:	4313      	orrs	r3, r2
 8008866:	b29b      	uxth	r3, r3
 8008868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800886c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008870:	b29a      	uxth	r2, r3
 8008872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008874:	801a      	strh	r2, [r3, #0]
 8008876:	e018      	b.n	80088aa <USB_ActivateEndpoint+0x7c2>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	785b      	ldrb	r3, [r3, #1]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d114      	bne.n	80088aa <USB_ActivateEndpoint+0x7c2>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008886:	b29b      	uxth	r3, r3
 8008888:	461a      	mov	r2, r3
 800888a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800888c:	4413      	add	r3, r2
 800888e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	00da      	lsls	r2, r3, #3
 8008896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008898:	4413      	add	r3, r2
 800889a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800889e:	643b      	str	r3, [r7, #64]	@ 0x40
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088a8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80088c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80088c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80088c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80088ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80088cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80088d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	441a      	add	r2, r3
 80088dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80088de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008908:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	441a      	add	r2, r3
 8008914:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800891a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800891e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008926:	b29b      	uxth	r3, r3
 8008928:	8013      	strh	r3, [r2, #0]
 800892a:	e0bc      	b.n	8008aa6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800893c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01d      	beq.n	8008984 <USB_ActivateEndpoint+0x89c>
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800895a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	441a      	add	r2, r3
 800896c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008978:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800897c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008980:	b29b      	uxth	r3, r3
 8008982:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8008994:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01d      	beq.n	80089dc <USB_ActivateEndpoint+0x8f4>
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	441a      	add	r2, r3
 80089c4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80089c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089d8:	b29b      	uxth	r3, r3
 80089da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	78db      	ldrb	r3, [r3, #3]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d024      	beq.n	8008a2e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089fa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80089fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008a02:	f083 0320 	eor.w	r3, r3, #32
 8008a06:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	441a      	add	r2, r3
 8008a14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	8013      	strh	r3, [r2, #0]
 8008a2c:	e01d      	b.n	8008a6a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a44:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	441a      	add	r2, r3
 8008a52:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a80:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	441a      	add	r2, r3
 8008a8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008aa6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	379c      	adds	r7, #156	@ 0x9c
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b08d      	sub	sp, #52	@ 0x34
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	7b1b      	ldrb	r3, [r3, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f040 808e 	bne.w	8008be8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d044      	beq.n	8008b5e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	81bb      	strh	r3, [r7, #12]
 8008ae2:	89bb      	ldrh	r3, [r7, #12]
 8008ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01b      	beq.n	8008b24 <USB_DeactivateEndpoint+0x6c>
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b02:	817b      	strh	r3, [r7, #10]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	441a      	add	r2, r3
 8008b0e:	897b      	ldrh	r3, [r7, #10]
 8008b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b3a:	813b      	strh	r3, [r7, #8]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	441a      	add	r2, r3
 8008b46:	893b      	ldrh	r3, [r7, #8]
 8008b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	8013      	strh	r3, [r2, #0]
 8008b5c:	e192      	b.n	8008e84 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	827b      	strh	r3, [r7, #18]
 8008b6c:	8a7b      	ldrh	r3, [r7, #18]
 8008b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d01b      	beq.n	8008bae <USB_DeactivateEndpoint+0xf6>
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8c:	823b      	strh	r3, [r7, #16]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	441a      	add	r2, r3
 8008b98:	8a3b      	ldrh	r3, [r7, #16]
 8008b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ba2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bc4:	81fb      	strh	r3, [r7, #14]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	441a      	add	r2, r3
 8008bd0:	89fb      	ldrh	r3, [r7, #14]
 8008bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	8013      	strh	r3, [r2, #0]
 8008be6:	e14d      	b.n	8008e84 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	785b      	ldrb	r3, [r3, #1]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f040 80a5 	bne.w	8008d3c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	843b      	strh	r3, [r7, #32]
 8008c00:	8c3b      	ldrh	r3, [r7, #32]
 8008c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d01b      	beq.n	8008c42 <USB_DeactivateEndpoint+0x18a>
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c20:	83fb      	strh	r3, [r7, #30]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	441a      	add	r2, r3
 8008c2c:	8bfb      	ldrh	r3, [r7, #30]
 8008c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	83bb      	strh	r3, [r7, #28]
 8008c50:	8bbb      	ldrh	r3, [r7, #28]
 8008c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01b      	beq.n	8008c92 <USB_DeactivateEndpoint+0x1da>
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c70:	837b      	strh	r3, [r7, #26]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	441a      	add	r2, r3
 8008c7c:	8b7b      	ldrh	r3, [r7, #26]
 8008c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ca8:	833b      	strh	r3, [r7, #24]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	441a      	add	r2, r3
 8008cb4:	8b3b      	ldrh	r3, [r7, #24]
 8008cb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce0:	82fb      	strh	r3, [r7, #22]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	441a      	add	r2, r3
 8008cec:	8afb      	ldrh	r3, [r7, #22]
 8008cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d18:	82bb      	strh	r3, [r7, #20]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	441a      	add	r2, r3
 8008d24:	8abb      	ldrh	r3, [r7, #20]
 8008d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	8013      	strh	r3, [r2, #0]
 8008d3a:	e0a3      	b.n	8008e84 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008d4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d01b      	beq.n	8008d8c <USB_DeactivateEndpoint+0x2d4>
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	441a      	add	r2, r3
 8008d76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008d78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008d9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01b      	beq.n	8008ddc <USB_DeactivateEndpoint+0x324>
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dba:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	441a      	add	r2, r3
 8008dc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008df2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	441a      	add	r2, r3
 8008dfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008e00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	441a      	add	r2, r3
 8008e36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e62:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	441a      	add	r2, r3
 8008e6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3734      	adds	r7, #52	@ 0x34
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b0ac      	sub	sp, #176	@ 0xb0
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	f040 84ca 	bne.w	800983a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	699a      	ldr	r2, [r3, #24]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d904      	bls.n	8008ebc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008eba:	e003      	b.n	8008ec4 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	7b1b      	ldrb	r3, [r3, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d122      	bne.n	8008f12 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	6959      	ldr	r1, [r3, #20]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	88da      	ldrh	r2, [r3, #6]
 8008ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 febd 	bl	8009c5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	613b      	str	r3, [r7, #16]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	613b      	str	r3, [r7, #16]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	00da      	lsls	r2, r3, #3
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	4413      	add	r3, r2
 8008efe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	801a      	strh	r2, [r3, #0]
 8008f0e:	f000 bc6f 	b.w	80097f0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	78db      	ldrb	r3, [r3, #3]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	f040 831e 	bne.w	8009558 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	6a1a      	ldr	r2, [r3, #32]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	f240 82cf 	bls.w	80094c8 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f40:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	441a      	add	r2, r3
 8008f4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f5a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	6a1a      	ldr	r2, [r3, #32]
 8008f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 814f 	beq.w	800922a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	785b      	ldrb	r3, [r3, #1]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d16b      	bne.n	8009070 <USB_EPStartXfer+0x1de>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa8:	4413      	add	r3, r2
 8008faa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	00da      	lsls	r2, r3, #3
 8008fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fca:	801a      	strh	r2, [r3, #0]
 8008fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <USB_EPStartXfer+0x158>
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe6:	801a      	strh	r2, [r3, #0]
 8008fe8:	e05b      	b.n	80090a2 <USB_EPStartXfer+0x210>
 8008fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fee:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ff0:	d81c      	bhi.n	800902c <USB_EPStartXfer+0x19a>
 8008ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ff6:	085b      	lsrs	r3, r3, #1
 8008ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <USB_EPStartXfer+0x180>
 8009008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800900c:	3301      	adds	r3, #1
 800900e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	b29a      	uxth	r2, r3
 8009018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800901c:	b29b      	uxth	r3, r3
 800901e:	029b      	lsls	r3, r3, #10
 8009020:	b29b      	uxth	r3, r3
 8009022:	4313      	orrs	r3, r2
 8009024:	b29a      	uxth	r2, r3
 8009026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009028:	801a      	strh	r2, [r3, #0]
 800902a:	e03a      	b.n	80090a2 <USB_EPStartXfer+0x210>
 800902c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009030:	095b      	lsrs	r3, r3, #5
 8009032:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800903a:	f003 031f 	and.w	r3, r3, #31
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <USB_EPStartXfer+0x1ba>
 8009042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009046:	3b01      	subs	r3, #1
 8009048:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b29a      	uxth	r2, r3
 8009052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009056:	b29b      	uxth	r3, r3
 8009058:	029b      	lsls	r3, r3, #10
 800905a:	b29b      	uxth	r3, r3
 800905c:	4313      	orrs	r3, r2
 800905e:	b29b      	uxth	r3, r3
 8009060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009068:	b29a      	uxth	r2, r3
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	801a      	strh	r2, [r3, #0]
 800906e:	e018      	b.n	80090a2 <USB_EPStartXfer+0x210>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	785b      	ldrb	r3, [r3, #1]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d114      	bne.n	80090a2 <USB_EPStartXfer+0x210>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800907e:	b29b      	uxth	r3, r3
 8009080:	461a      	mov	r2, r3
 8009082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009084:	4413      	add	r3, r2
 8009086:	633b      	str	r3, [r7, #48]	@ 0x30
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	00da      	lsls	r2, r3, #3
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	4413      	add	r3, r2
 8009092:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800909c:	b29a      	uxth	r2, r3
 800909e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	895b      	ldrh	r3, [r3, #10]
 80090a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6959      	ldr	r1, [r3, #20]
 80090ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fdce 	bl	8009c5a <USB_WritePMA>
            ep->xfer_buff += len;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	695a      	ldr	r2, [r3, #20]
 80090c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090c6:	441a      	add	r2, r3
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	6a1a      	ldr	r2, [r3, #32]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d907      	bls.n	80090e8 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	6a1a      	ldr	r2, [r3, #32]
 80090dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090e0:	1ad2      	subs	r2, r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	621a      	str	r2, [r3, #32]
 80090e6:	e006      	b.n	80090f6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	785b      	ldrb	r3, [r3, #1]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d16b      	bne.n	80091d6 <USB_EPStartXfer+0x344>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009108:	b29b      	uxth	r3, r3
 800910a:	461a      	mov	r2, r3
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	4413      	add	r3, r2
 8009110:	61bb      	str	r3, [r7, #24]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	00da      	lsls	r2, r3, #3
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	4413      	add	r3, r2
 800911c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	b29b      	uxth	r3, r3
 8009128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800912c:	b29a      	uxth	r2, r3
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	801a      	strh	r2, [r3, #0]
 8009132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10a      	bne.n	8009150 <USB_EPStartXfer+0x2be>
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	b29b      	uxth	r3, r3
 8009140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009148:	b29a      	uxth	r2, r3
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	801a      	strh	r2, [r3, #0]
 800914e:	e05d      	b.n	800920c <USB_EPStartXfer+0x37a>
 8009150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009154:	2b3e      	cmp	r3, #62	@ 0x3e
 8009156:	d81c      	bhi.n	8009192 <USB_EPStartXfer+0x300>
 8009158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d004      	beq.n	8009178 <USB_EPStartXfer+0x2e6>
 800916e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009172:	3301      	adds	r3, #1
 8009174:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	b29a      	uxth	r2, r3
 800917e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009182:	b29b      	uxth	r3, r3
 8009184:	029b      	lsls	r3, r3, #10
 8009186:	b29b      	uxth	r3, r3
 8009188:	4313      	orrs	r3, r2
 800918a:	b29a      	uxth	r2, r3
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	801a      	strh	r2, [r3, #0]
 8009190:	e03c      	b.n	800920c <USB_EPStartXfer+0x37a>
 8009192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009196:	095b      	lsrs	r3, r3, #5
 8009198:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800919c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091a0:	f003 031f 	and.w	r3, r3, #31
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <USB_EPStartXfer+0x320>
 80091a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80091ac:	3b01      	subs	r3, #1
 80091ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	881b      	ldrh	r3, [r3, #0]
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80091bc:	b29b      	uxth	r3, r3
 80091be:	029b      	lsls	r3, r3, #10
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	4313      	orrs	r3, r2
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	801a      	strh	r2, [r3, #0]
 80091d4:	e01a      	b.n	800920c <USB_EPStartXfer+0x37a>
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	785b      	ldrb	r3, [r3, #1]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d116      	bne.n	800920c <USB_EPStartXfer+0x37a>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	623b      	str	r3, [r7, #32]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	4413      	add	r3, r2
 80091f0:	623b      	str	r3, [r7, #32]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	00da      	lsls	r2, r3, #3
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	4413      	add	r3, r2
 80091fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009200:	61fb      	str	r3, [r7, #28]
 8009202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009206:	b29a      	uxth	r2, r3
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	891b      	ldrh	r3, [r3, #8]
 8009210:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	6959      	ldr	r1, [r3, #20]
 8009218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800921c:	b29b      	uxth	r3, r3
 800921e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fd19 	bl	8009c5a <USB_WritePMA>
 8009228:	e2e2      	b.n	80097f0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	785b      	ldrb	r3, [r3, #1]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d16b      	bne.n	800930a <USB_EPStartXfer+0x478>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800923c:	b29b      	uxth	r3, r3
 800923e:	461a      	mov	r2, r3
 8009240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009242:	4413      	add	r3, r2
 8009244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	00da      	lsls	r2, r3, #3
 800924c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800924e:	4413      	add	r3, r2
 8009250:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009254:	647b      	str	r3, [r7, #68]	@ 0x44
 8009256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	b29b      	uxth	r3, r3
 800925c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009260:	b29a      	uxth	r2, r3
 8009262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009264:	801a      	strh	r2, [r3, #0]
 8009266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10a      	bne.n	8009284 <USB_EPStartXfer+0x3f2>
 800926e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800927c:	b29a      	uxth	r2, r3
 800927e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009280:	801a      	strh	r2, [r3, #0]
 8009282:	e05d      	b.n	8009340 <USB_EPStartXfer+0x4ae>
 8009284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009288:	2b3e      	cmp	r3, #62	@ 0x3e
 800928a:	d81c      	bhi.n	80092c6 <USB_EPStartXfer+0x434>
 800928c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009290:	085b      	lsrs	r3, r3, #1
 8009292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d004      	beq.n	80092ac <USB_EPStartXfer+0x41a>
 80092a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092a6:	3301      	adds	r3, #1
 80092a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80092ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	029b      	lsls	r3, r3, #10
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	4313      	orrs	r3, r2
 80092be:	b29a      	uxth	r2, r3
 80092c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092c2:	801a      	strh	r2, [r3, #0]
 80092c4:	e03c      	b.n	8009340 <USB_EPStartXfer+0x4ae>
 80092c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ca:	095b      	lsrs	r3, r3, #5
 80092cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80092d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <USB_EPStartXfer+0x454>
 80092dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092e0:	3b01      	subs	r3, #1
 80092e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80092e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	029b      	lsls	r3, r3, #10
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	4313      	orrs	r3, r2
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009302:	b29a      	uxth	r2, r3
 8009304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009306:	801a      	strh	r2, [r3, #0]
 8009308:	e01a      	b.n	8009340 <USB_EPStartXfer+0x4ae>
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d116      	bne.n	8009340 <USB_EPStartXfer+0x4ae>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	653b      	str	r3, [r7, #80]	@ 0x50
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800931c:	b29b      	uxth	r3, r3
 800931e:	461a      	mov	r2, r3
 8009320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009322:	4413      	add	r3, r2
 8009324:	653b      	str	r3, [r7, #80]	@ 0x50
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	00da      	lsls	r2, r3, #3
 800932c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800932e:	4413      	add	r3, r2
 8009330:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009334:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800933a:	b29a      	uxth	r2, r3
 800933c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800933e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	891b      	ldrh	r3, [r3, #8]
 8009344:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	6959      	ldr	r1, [r3, #20]
 800934c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009350:	b29b      	uxth	r3, r3
 8009352:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fc7f 	bl	8009c5a <USB_WritePMA>
            ep->xfer_buff += len;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	695a      	ldr	r2, [r3, #20]
 8009360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009364:	441a      	add	r2, r3
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6a1a      	ldr	r2, [r3, #32]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	429a      	cmp	r2, r3
 8009374:	d907      	bls.n	8009386 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	6a1a      	ldr	r2, [r3, #32]
 800937a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800937e:	1ad2      	subs	r2, r2, r3
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	621a      	str	r2, [r3, #32]
 8009384:	e006      	b.n	8009394 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2200      	movs	r2, #0
 8009392:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	643b      	str	r3, [r7, #64]	@ 0x40
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	785b      	ldrb	r3, [r3, #1]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d16b      	bne.n	8009478 <USB_EPStartXfer+0x5e6>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	461a      	mov	r2, r3
 80093ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b0:	4413      	add	r3, r2
 80093b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	00da      	lsls	r2, r3, #3
 80093ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093bc:	4413      	add	r3, r2
 80093be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093c6:	881b      	ldrh	r3, [r3, #0]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d2:	801a      	strh	r2, [r3, #0]
 80093d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <USB_EPStartXfer+0x560>
 80093dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ee:	801a      	strh	r2, [r3, #0]
 80093f0:	e05b      	b.n	80094aa <USB_EPStartXfer+0x618>
 80093f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80093f8:	d81c      	bhi.n	8009434 <USB_EPStartXfer+0x5a2>
 80093fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093fe:	085b      	lsrs	r3, r3, #1
 8009400:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d004      	beq.n	800941a <USB_EPStartXfer+0x588>
 8009410:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009414:	3301      	adds	r3, #1
 8009416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800941a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	b29a      	uxth	r2, r3
 8009420:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009424:	b29b      	uxth	r3, r3
 8009426:	029b      	lsls	r3, r3, #10
 8009428:	b29b      	uxth	r3, r3
 800942a:	4313      	orrs	r3, r2
 800942c:	b29a      	uxth	r2, r3
 800942e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009430:	801a      	strh	r2, [r3, #0]
 8009432:	e03a      	b.n	80094aa <USB_EPStartXfer+0x618>
 8009434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009438:	095b      	lsrs	r3, r3, #5
 800943a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800943e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009442:	f003 031f 	and.w	r3, r3, #31
 8009446:	2b00      	cmp	r3, #0
 8009448:	d104      	bne.n	8009454 <USB_EPStartXfer+0x5c2>
 800944a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800944e:	3b01      	subs	r3, #1
 8009450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	b29a      	uxth	r2, r3
 800945a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800945e:	b29b      	uxth	r3, r3
 8009460:	029b      	lsls	r3, r3, #10
 8009462:	b29b      	uxth	r3, r3
 8009464:	4313      	orrs	r3, r2
 8009466:	b29b      	uxth	r3, r3
 8009468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800946c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009470:	b29a      	uxth	r2, r3
 8009472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009474:	801a      	strh	r2, [r3, #0]
 8009476:	e018      	b.n	80094aa <USB_EPStartXfer+0x618>
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	785b      	ldrb	r3, [r3, #1]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d114      	bne.n	80094aa <USB_EPStartXfer+0x618>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009486:	b29b      	uxth	r3, r3
 8009488:	461a      	mov	r2, r3
 800948a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800948c:	4413      	add	r3, r2
 800948e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	00da      	lsls	r2, r3, #3
 8009496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009498:	4413      	add	r3, r2
 800949a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800949e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	895b      	ldrh	r3, [r3, #10]
 80094ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	6959      	ldr	r1, [r3, #20]
 80094b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fbca 	bl	8009c5a <USB_WritePMA>
 80094c6:	e193      	b.n	80097f0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80094e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094e6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	441a      	add	r2, r3
 80094f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80094f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009508:	b29b      	uxth	r3, r3
 800950a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009516:	b29b      	uxth	r3, r3
 8009518:	461a      	mov	r2, r3
 800951a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800951c:	4413      	add	r3, r2
 800951e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	00da      	lsls	r2, r3, #3
 8009526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009528:	4413      	add	r3, r2
 800952a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800952e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009534:	b29a      	uxth	r2, r3
 8009536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009538:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	891b      	ldrh	r3, [r3, #8]
 800953e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	6959      	ldr	r1, [r3, #20]
 8009546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800954a:	b29b      	uxth	r3, r3
 800954c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fb82 	bl	8009c5a <USB_WritePMA>
 8009556:	e14b      	b.n	80097f0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	6a1a      	ldr	r2, [r3, #32]
 800955c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009560:	1ad2      	subs	r2, r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	b29b      	uxth	r3, r3
 8009574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 809a 	beq.w	80096b2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	673b      	str	r3, [r7, #112]	@ 0x70
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	785b      	ldrb	r3, [r3, #1]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d16b      	bne.n	8009662 <USB_EPStartXfer+0x7d0>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009594:	b29b      	uxth	r3, r3
 8009596:	461a      	mov	r2, r3
 8009598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800959a:	4413      	add	r3, r2
 800959c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	00da      	lsls	r2, r3, #3
 80095a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095a6:	4413      	add	r3, r2
 80095a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80095ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80095ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095bc:	801a      	strh	r2, [r3, #0]
 80095be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <USB_EPStartXfer+0x74a>
 80095c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095d8:	801a      	strh	r2, [r3, #0]
 80095da:	e05b      	b.n	8009694 <USB_EPStartXfer+0x802>
 80095dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80095e2:	d81c      	bhi.n	800961e <USB_EPStartXfer+0x78c>
 80095e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d004      	beq.n	8009604 <USB_EPStartXfer+0x772>
 80095fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095fe:	3301      	adds	r3, #1
 8009600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	b29a      	uxth	r2, r3
 800960a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800960e:	b29b      	uxth	r3, r3
 8009610:	029b      	lsls	r3, r3, #10
 8009612:	b29b      	uxth	r3, r3
 8009614:	4313      	orrs	r3, r2
 8009616:	b29a      	uxth	r2, r3
 8009618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800961a:	801a      	strh	r2, [r3, #0]
 800961c:	e03a      	b.n	8009694 <USB_EPStartXfer+0x802>
 800961e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009622:	095b      	lsrs	r3, r3, #5
 8009624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800962c:	f003 031f 	and.w	r3, r3, #31
 8009630:	2b00      	cmp	r3, #0
 8009632:	d104      	bne.n	800963e <USB_EPStartXfer+0x7ac>
 8009634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009638:	3b01      	subs	r3, #1
 800963a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800963e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	b29a      	uxth	r2, r3
 8009644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009648:	b29b      	uxth	r3, r3
 800964a:	029b      	lsls	r3, r3, #10
 800964c:	b29b      	uxth	r3, r3
 800964e:	4313      	orrs	r3, r2
 8009650:	b29b      	uxth	r3, r3
 8009652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800965a:	b29a      	uxth	r2, r3
 800965c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800965e:	801a      	strh	r2, [r3, #0]
 8009660:	e018      	b.n	8009694 <USB_EPStartXfer+0x802>
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	785b      	ldrb	r3, [r3, #1]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d114      	bne.n	8009694 <USB_EPStartXfer+0x802>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009670:	b29b      	uxth	r3, r3
 8009672:	461a      	mov	r2, r3
 8009674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009676:	4413      	add	r3, r2
 8009678:	673b      	str	r3, [r7, #112]	@ 0x70
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	00da      	lsls	r2, r3, #3
 8009680:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009682:	4413      	add	r3, r2
 8009684:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009688:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800968a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800968e:	b29a      	uxth	r2, r3
 8009690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009692:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	895b      	ldrh	r3, [r3, #10]
 8009698:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	6959      	ldr	r1, [r3, #20]
 80096a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fad5 	bl	8009c5a <USB_WritePMA>
 80096b0:	e09e      	b.n	80097f0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	785b      	ldrb	r3, [r3, #1]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d16b      	bne.n	8009792 <USB_EPStartXfer+0x900>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	461a      	mov	r2, r3
 80096c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80096ca:	4413      	add	r3, r2
 80096cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	00da      	lsls	r2, r3, #3
 80096d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80096d6:	4413      	add	r3, r2
 80096d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80096dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10a      	bne.n	800970c <USB_EPStartXfer+0x87a>
 80096f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009704:	b29a      	uxth	r2, r3
 8009706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009708:	801a      	strh	r2, [r3, #0]
 800970a:	e063      	b.n	80097d4 <USB_EPStartXfer+0x942>
 800970c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009710:	2b3e      	cmp	r3, #62	@ 0x3e
 8009712:	d81c      	bhi.n	800974e <USB_EPStartXfer+0x8bc>
 8009714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009718:	085b      	lsrs	r3, r3, #1
 800971a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800971e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d004      	beq.n	8009734 <USB_EPStartXfer+0x8a2>
 800972a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800972e:	3301      	adds	r3, #1
 8009730:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	b29a      	uxth	r2, r3
 800973a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800973e:	b29b      	uxth	r3, r3
 8009740:	029b      	lsls	r3, r3, #10
 8009742:	b29b      	uxth	r3, r3
 8009744:	4313      	orrs	r3, r2
 8009746:	b29a      	uxth	r2, r3
 8009748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800974a:	801a      	strh	r2, [r3, #0]
 800974c:	e042      	b.n	80097d4 <USB_EPStartXfer+0x942>
 800974e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009752:	095b      	lsrs	r3, r3, #5
 8009754:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800975c:	f003 031f 	and.w	r3, r3, #31
 8009760:	2b00      	cmp	r3, #0
 8009762:	d104      	bne.n	800976e <USB_EPStartXfer+0x8dc>
 8009764:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009768:	3b01      	subs	r3, #1
 800976a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800976e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	b29a      	uxth	r2, r3
 8009774:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009778:	b29b      	uxth	r3, r3
 800977a:	029b      	lsls	r3, r3, #10
 800977c:	b29b      	uxth	r3, r3
 800977e:	4313      	orrs	r3, r2
 8009780:	b29b      	uxth	r3, r3
 8009782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800978a:	b29a      	uxth	r2, r3
 800978c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	e020      	b.n	80097d4 <USB_EPStartXfer+0x942>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	785b      	ldrb	r3, [r3, #1]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d11c      	bne.n	80097d4 <USB_EPStartXfer+0x942>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	461a      	mov	r2, r3
 80097aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097ae:	4413      	add	r3, r2
 80097b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	00da      	lsls	r2, r3, #3
 80097ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097be:	4413      	add	r3, r2
 80097c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	891b      	ldrh	r3, [r3, #8]
 80097d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	6959      	ldr	r1, [r3, #20]
 80097e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fa35 	bl	8009c5a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009806:	817b      	strh	r3, [r7, #10]
 8009808:	897b      	ldrh	r3, [r7, #10]
 800980a:	f083 0310 	eor.w	r3, r3, #16
 800980e:	817b      	strh	r3, [r7, #10]
 8009810:	897b      	ldrh	r3, [r7, #10]
 8009812:	f083 0320 	eor.w	r3, r3, #32
 8009816:	817b      	strh	r3, [r7, #10]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	441a      	add	r2, r3
 8009822:	897b      	ldrh	r3, [r7, #10]
 8009824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800982c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009834:	b29b      	uxth	r3, r3
 8009836:	8013      	strh	r3, [r2, #0]
 8009838:	e0d5      	b.n	80099e6 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	7b1b      	ldrb	r3, [r3, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d156      	bne.n	80098f0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d122      	bne.n	8009890 <USB_EPStartXfer+0x9fe>
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	78db      	ldrb	r3, [r3, #3]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d11e      	bne.n	8009890 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	b29b      	uxth	r3, r3
 8009860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009868:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	441a      	add	r2, r3
 8009876:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800987a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800987e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009882:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800988a:	b29b      	uxth	r3, r3
 800988c:	8013      	strh	r3, [r2, #0]
 800988e:	e01d      	b.n	80098cc <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	b29b      	uxth	r3, r3
 800989e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80098a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098a6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	441a      	add	r2, r3
 80098b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80098b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	699a      	ldr	r2, [r3, #24]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d907      	bls.n	80098e8 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	699a      	ldr	r2, [r3, #24]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	1ad2      	subs	r2, r2, r3
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	619a      	str	r2, [r3, #24]
 80098e6:	e054      	b.n	8009992 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	619a      	str	r2, [r3, #24]
 80098ee:	e050      	b.n	8009992 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	78db      	ldrb	r3, [r3, #3]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d142      	bne.n	800997e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d048      	beq.n	8009992 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009910:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009914:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d005      	beq.n	8009928 <USB_EPStartXfer+0xa96>
 800991c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10b      	bne.n	8009940 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009928:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800992c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009930:	2b00      	cmp	r3, #0
 8009932:	d12e      	bne.n	8009992 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009934:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	d128      	bne.n	8009992 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	881b      	ldrh	r3, [r3, #0]
 800994c:	b29b      	uxth	r3, r3
 800994e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009956:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	441a      	add	r2, r3
 8009964:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800996c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009974:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009978:	b29b      	uxth	r3, r3
 800997a:	8013      	strh	r3, [r2, #0]
 800997c:	e009      	b.n	8009992 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	78db      	ldrb	r3, [r3, #3]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d103      	bne.n	800998e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2200      	movs	r2, #0
 800998a:	619a      	str	r2, [r3, #24]
 800998c:	e001      	b.n	8009992 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e02a      	b.n	80099e8 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80099ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80099b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80099b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80099b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80099bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80099c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	441a      	add	r2, r3
 80099ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80099d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	37b0      	adds	r7, #176	@ 0xb0
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	785b      	ldrb	r3, [r3, #1]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d020      	beq.n	8009a44 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a18:	81bb      	strh	r3, [r7, #12]
 8009a1a:	89bb      	ldrh	r3, [r7, #12]
 8009a1c:	f083 0310 	eor.w	r3, r3, #16
 8009a20:	81bb      	strh	r3, [r7, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	441a      	add	r2, r3
 8009a2c:	89bb      	ldrh	r3, [r7, #12]
 8009a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	8013      	strh	r3, [r2, #0]
 8009a42:	e01f      	b.n	8009a84 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	881b      	ldrh	r3, [r3, #0]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a5a:	81fb      	strh	r3, [r7, #14]
 8009a5c:	89fb      	ldrh	r3, [r7, #14]
 8009a5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009a62:	81fb      	strh	r3, [r7, #14]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	441a      	add	r2, r3
 8009a6e:	89fb      	ldrh	r3, [r7, #14]
 8009a70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b087      	sub	sp, #28
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	785b      	ldrb	r3, [r3, #1]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d04c      	beq.n	8009b3e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	823b      	strh	r3, [r7, #16]
 8009ab2:	8a3b      	ldrh	r3, [r7, #16]
 8009ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01b      	beq.n	8009af4 <USB_EPClearStall+0x62>
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ad2:	81fb      	strh	r3, [r7, #14]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	441a      	add	r2, r3
 8009ade:	89fb      	ldrh	r3, [r7, #14]
 8009ae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ae8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009aec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	78db      	ldrb	r3, [r3, #3]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d06c      	beq.n	8009bd6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b12:	81bb      	strh	r3, [r7, #12]
 8009b14:	89bb      	ldrh	r3, [r7, #12]
 8009b16:	f083 0320 	eor.w	r3, r3, #32
 8009b1a:	81bb      	strh	r3, [r7, #12]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	441a      	add	r2, r3
 8009b26:	89bb      	ldrh	r3, [r7, #12]
 8009b28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	8013      	strh	r3, [r2, #0]
 8009b3c:	e04b      	b.n	8009bd6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	881b      	ldrh	r3, [r3, #0]
 8009b4a:	82fb      	strh	r3, [r7, #22]
 8009b4c:	8afb      	ldrh	r3, [r7, #22]
 8009b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d01b      	beq.n	8009b8e <USB_EPClearStall+0xfc>
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b6c:	82bb      	strh	r3, [r7, #20]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	441a      	add	r2, r3
 8009b78:	8abb      	ldrh	r3, [r7, #20]
 8009b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ba4:	827b      	strh	r3, [r7, #18]
 8009ba6:	8a7b      	ldrh	r3, [r7, #18]
 8009ba8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009bac:	827b      	strh	r3, [r7, #18]
 8009bae:	8a7b      	ldrh	r3, [r7, #18]
 8009bb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009bb4:	827b      	strh	r3, [r7, #18]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	441a      	add	r2, r3
 8009bc0:	8a7b      	ldrh	r3, [r7, #18]
 8009bc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	371c      	adds	r7, #28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d103      	bne.n	8009bfe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2280      	movs	r2, #128	@ 0x80
 8009bfa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b08b      	sub	sp, #44	@ 0x2c
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	4611      	mov	r1, r2
 8009c66:	461a      	mov	r2, r3
 8009c68:	460b      	mov	r3, r1
 8009c6a:	80fb      	strh	r3, [r7, #6]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c70:	88bb      	ldrh	r3, [r7, #4]
 8009c72:	3301      	adds	r3, #1
 8009c74:	085b      	lsrs	r3, r3, #1
 8009c76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c80:	88fa      	ldrh	r2, [r7, #6]
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c8a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c90:	e01b      	b.n	8009cca <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	021b      	lsls	r3, r3, #8
 8009ca0:	b21a      	sxth	r2, r3
 8009ca2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	b21b      	sxth	r3, r3
 8009caa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	8a7a      	ldrh	r2, [r7, #18]
 8009cb0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1e0      	bne.n	8009c92 <USB_WritePMA+0x38>
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	372c      	adds	r7, #44	@ 0x2c
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b08b      	sub	sp, #44	@ 0x2c
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	60f8      	str	r0, [r7, #12]
 8009ce6:	60b9      	str	r1, [r7, #8]
 8009ce8:	4611      	mov	r1, r2
 8009cea:	461a      	mov	r2, r3
 8009cec:	460b      	mov	r3, r1
 8009cee:	80fb      	strh	r3, [r7, #6]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009cf4:	88bb      	ldrh	r3, [r7, #4]
 8009cf6:	085b      	lsrs	r3, r3, #1
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009d04:	88fa      	ldrh	r2, [r7, #6]
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	4413      	add	r3, r2
 8009d0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d0e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d14:	e018      	b.n	8009d48 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	3302      	adds	r3, #2
 8009d22:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	0a1b      	lsrs	r3, r3, #8
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d44:	3b01      	subs	r3, #1
 8009d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1e3      	bne.n	8009d16 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009d4e:	88bb      	ldrh	r3, [r7, #4]
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d007      	beq.n	8009d6a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	701a      	strb	r2, [r3, #0]
  }
}
 8009d6a:	bf00      	nop
 8009d6c:	372c      	adds	r7, #44	@ 0x2c
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d82:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009d86:	f002 f911 	bl	800bfac <USBD_static_malloc>
 8009d8a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d105      	bne.n	8009d9e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	e066      	b.n	8009e6c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7c1b      	ldrb	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d119      	bne.n	8009de2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009dae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009db2:	2202      	movs	r2, #2
 8009db4:	2181      	movs	r1, #129	@ 0x81
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f001 ff9f 	bl	800bcfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009dc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	2101      	movs	r1, #1
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f001 ff95 	bl	800bcfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2210      	movs	r2, #16
 8009ddc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009de0:	e016      	b.n	8009e10 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009de2:	2340      	movs	r3, #64	@ 0x40
 8009de4:	2202      	movs	r2, #2
 8009de6:	2181      	movs	r1, #129	@ 0x81
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 ff86 	bl	800bcfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009df4:	2340      	movs	r3, #64	@ 0x40
 8009df6:	2202      	movs	r2, #2
 8009df8:	2101      	movs	r1, #1
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 ff7d 	bl	800bcfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2210      	movs	r2, #16
 8009e0c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e10:	2308      	movs	r3, #8
 8009e12:	2203      	movs	r2, #3
 8009e14:	2182      	movs	r1, #130	@ 0x82
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 ff6f 	bl	800bcfa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	7c1b      	ldrb	r3, [r3, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e50:	2101      	movs	r1, #1
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f002 f840 	bl	800bed8 <USBD_LL_PrepareReceive>
 8009e58:	e007      	b.n	8009e6a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e60:	2340      	movs	r3, #64	@ 0x40
 8009e62:	2101      	movs	r1, #1
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f002 f837 	bl	800bed8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e80:	2181      	movs	r1, #129	@ 0x81
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f001 ff5f 	bl	800bd46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e8e:	2101      	movs	r1, #1
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 ff58 	bl	800bd46 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e9e:	2182      	movs	r1, #130	@ 0x82
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f001 ff50 	bl	800bd46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00e      	beq.n	8009ede <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f002 f879 	bl	800bfc8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ef8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e0af      	b.n	800a070 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d03f      	beq.n	8009f9c <USBD_CDC_Setup+0xb4>
 8009f1c:	2b20      	cmp	r3, #32
 8009f1e:	f040 809f 	bne.w	800a060 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	88db      	ldrh	r3, [r3, #6]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d02e      	beq.n	8009f88 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	b25b      	sxtb	r3, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	da16      	bge.n	8009f62 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009f40:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	88d2      	ldrh	r2, [r2, #6]
 8009f46:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	88db      	ldrh	r3, [r3, #6]
 8009f4c:	2b07      	cmp	r3, #7
 8009f4e:	bf28      	it	cs
 8009f50:	2307      	movcs	r3, #7
 8009f52:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	89fa      	ldrh	r2, [r7, #14]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f001 facd 	bl	800b4fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009f60:	e085      	b.n	800a06e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	785a      	ldrb	r2, [r3, #1]
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	88db      	ldrh	r3, [r3, #6]
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009f78:	6939      	ldr	r1, [r7, #16]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	88db      	ldrh	r3, [r3, #6]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 fae6 	bl	800b552 <USBD_CtlPrepareRx>
      break;
 8009f86:	e072      	b.n	800a06e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	7850      	ldrb	r0, [r2, #1]
 8009f94:	2200      	movs	r2, #0
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	4798      	blx	r3
      break;
 8009f9a:	e068      	b.n	800a06e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	785b      	ldrb	r3, [r3, #1]
 8009fa0:	2b0b      	cmp	r3, #11
 8009fa2:	d852      	bhi.n	800a04a <USBD_CDC_Setup+0x162>
 8009fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8009fac <USBD_CDC_Setup+0xc4>)
 8009fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009faa:	bf00      	nop
 8009fac:	08009fdd 	.word	0x08009fdd
 8009fb0:	0800a059 	.word	0x0800a059
 8009fb4:	0800a04b 	.word	0x0800a04b
 8009fb8:	0800a04b 	.word	0x0800a04b
 8009fbc:	0800a04b 	.word	0x0800a04b
 8009fc0:	0800a04b 	.word	0x0800a04b
 8009fc4:	0800a04b 	.word	0x0800a04b
 8009fc8:	0800a04b 	.word	0x0800a04b
 8009fcc:	0800a04b 	.word	0x0800a04b
 8009fd0:	0800a04b 	.word	0x0800a04b
 8009fd4:	0800a007 	.word	0x0800a007
 8009fd8:	0800a031 	.word	0x0800a031
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d107      	bne.n	8009ff8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009fe8:	f107 030a 	add.w	r3, r7, #10
 8009fec:	2202      	movs	r2, #2
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 fa82 	bl	800b4fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ff6:	e032      	b.n	800a05e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 fa0c 	bl	800b418 <USBD_CtlError>
            ret = USBD_FAIL;
 800a000:	2303      	movs	r3, #3
 800a002:	75fb      	strb	r3, [r7, #23]
          break;
 800a004:	e02b      	b.n	800a05e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	2b03      	cmp	r3, #3
 800a010:	d107      	bne.n	800a022 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a012:	f107 030d 	add.w	r3, r7, #13
 800a016:	2201      	movs	r2, #1
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f001 fa6d 	bl	800b4fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a020:	e01d      	b.n	800a05e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f001 f9f7 	bl	800b418 <USBD_CtlError>
            ret = USBD_FAIL;
 800a02a:	2303      	movs	r3, #3
 800a02c:	75fb      	strb	r3, [r7, #23]
          break;
 800a02e:	e016      	b.n	800a05e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d00f      	beq.n	800a05c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 f9ea 	bl	800b418 <USBD_CtlError>
            ret = USBD_FAIL;
 800a044:	2303      	movs	r3, #3
 800a046:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a048:	e008      	b.n	800a05c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f001 f9e3 	bl	800b418 <USBD_CtlError>
          ret = USBD_FAIL;
 800a052:	2303      	movs	r3, #3
 800a054:	75fb      	strb	r3, [r7, #23]
          break;
 800a056:	e002      	b.n	800a05e <USBD_CDC_Setup+0x176>
          break;
 800a058:	bf00      	nop
 800a05a:	e008      	b.n	800a06e <USBD_CDC_Setup+0x186>
          break;
 800a05c:	bf00      	nop
      }
      break;
 800a05e:	e006      	b.n	800a06e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f001 f9d8 	bl	800b418 <USBD_CtlError>
      ret = USBD_FAIL;
 800a068:	2303      	movs	r3, #3
 800a06a:	75fb      	strb	r3, [r7, #23]
      break;
 800a06c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3718      	adds	r7, #24
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a08a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a096:	2303      	movs	r3, #3
 800a098:	e04f      	b.n	800a13a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a0a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a0a2:	78fa      	ldrb	r2, [r7, #3]
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	440b      	add	r3, r1
 800a0b0:	3318      	adds	r3, #24
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d029      	beq.n	800a10c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a0b8:	78fa      	ldrb	r2, [r7, #3]
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	440b      	add	r3, r1
 800a0c6:	3318      	adds	r3, #24
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	78f9      	ldrb	r1, [r7, #3]
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	440b      	add	r3, r1
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	4403      	add	r3, r0
 800a0d8:	3320      	adds	r3, #32
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0e0:	fb01 f303 	mul.w	r3, r1, r3
 800a0e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d110      	bne.n	800a10c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	6879      	ldr	r1, [r7, #4]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	440b      	add	r3, r1
 800a0f8:	3318      	adds	r3, #24
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0fe:	78f9      	ldrb	r1, [r7, #3]
 800a100:	2300      	movs	r3, #0
 800a102:	2200      	movs	r2, #0
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 fec6 	bl	800be96 <USBD_LL_Transmit>
 800a10a:	e015      	b.n	800a138 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2200      	movs	r2, #0
 800a110:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a134:	78fa      	ldrb	r2, [r7, #3]
 800a136:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	460b      	mov	r3, r1
 800a14c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a154:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a160:	2303      	movs	r3, #3
 800a162:	e015      	b.n	800a190 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a164:	78fb      	ldrb	r3, [r7, #3]
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 fed6 	bl	800bf1a <USBD_LL_GetRxDataSize>
 800a16e:	4602      	mov	r2, r0
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a18a:	4611      	mov	r1, r2
 800a18c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e01a      	b.n	800a1e8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d014      	beq.n	800a1e6 <USBD_CDC_EP0_RxReady+0x4e>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a1c2:	2bff      	cmp	r3, #255	@ 0xff
 800a1c4:	d00f      	beq.n	800a1e6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a1d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	22ff      	movs	r2, #255	@ 0xff
 800a1e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2243      	movs	r2, #67	@ 0x43
 800a1fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a1fe:	4b03      	ldr	r3, [pc, #12]	@ (800a20c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a200:	4618      	mov	r0, r3
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000234 	.word	0x20000234

0800a210 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2243      	movs	r2, #67	@ 0x43
 800a21c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a21e:	4b03      	ldr	r3, [pc, #12]	@ (800a22c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a220:	4618      	mov	r0, r3
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	200001f0 	.word	0x200001f0

0800a230 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2243      	movs	r2, #67	@ 0x43
 800a23c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a23e:	4b03      	ldr	r3, [pc, #12]	@ (800a24c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	20000278 	.word	0x20000278

0800a250 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	220a      	movs	r2, #10
 800a25c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a25e:	4b03      	ldr	r3, [pc, #12]	@ (800a26c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	200001ac 	.word	0x200001ac

0800a270 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a280:	2303      	movs	r3, #3
 800a282:	e004      	b.n	800a28e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b087      	sub	sp, #28
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	60b9      	str	r1, [r7, #8]
 800a2a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e008      	b.n	800a2ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b085      	sub	sp, #20
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e004      	b.n	800a2fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	683a      	ldr	r2, [r7, #0]
 800a2f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3714      	adds	r7, #20
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a316:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a318:	2301      	movs	r3, #1
 800a31a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a326:	2303      	movs	r3, #3
 800a328:	e01a      	b.n	800a360 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a330:	2b00      	cmp	r3, #0
 800a332:	d114      	bne.n	800a35e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2201      	movs	r2, #1
 800a338:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a352:	2181      	movs	r1, #129	@ 0x81
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f001 fd9e 	bl	800be96 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a376:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a382:	2303      	movs	r3, #3
 800a384:	e016      	b.n	800a3b4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	7c1b      	ldrb	r3, [r3, #16]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d109      	bne.n	800a3a2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a394:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a398:	2101      	movs	r1, #1
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f001 fd9c 	bl	800bed8 <USBD_LL_PrepareReceive>
 800a3a0:	e007      	b.n	800a3b2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3a8:	2340      	movs	r3, #64	@ 0x40
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f001 fd93 	bl	800bed8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e01f      	b.n	800a414 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	79fa      	ldrb	r2, [r7, #7]
 800a406:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f001 fbfb 	bl	800bc04 <USBD_LL_Init>
 800a40e:	4603      	mov	r3, r0
 800a410:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a412:	7dfb      	ldrb	r3, [r7, #23]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a426:	2300      	movs	r3, #0
 800a428:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a430:	2303      	movs	r3, #3
 800a432:	e016      	b.n	800a462 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00b      	beq.n	800a460 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a450:	f107 020e 	add.w	r2, r7, #14
 800a454:	4610      	mov	r0, r2
 800a456:	4798      	blx	r3
 800a458:	4602      	mov	r2, r0
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b082      	sub	sp, #8
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f001 fc26 	bl	800bcc4 <USBD_LL_Start>
 800a478:	4603      	mov	r3, r0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a482:	b480      	push	{r7}
 800a484:	b083      	sub	sp, #12
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d009      	beq.n	800a4c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	78fa      	ldrb	r2, [r7, #3]
 800a4bc:	4611      	mov	r1, r2
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	4798      	blx	r3
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d007      	beq.n	800a4f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	78fa      	ldrb	r2, [r7, #3]
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	4798      	blx	r3
  }

  return USBD_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	4618      	mov	r0, r3
 800a514:	f000 ff46 	bl	800b3a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a526:	461a      	mov	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a534:	f003 031f 	and.w	r3, r3, #31
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d01a      	beq.n	800a572 <USBD_LL_SetupStage+0x72>
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d822      	bhi.n	800a586 <USBD_LL_SetupStage+0x86>
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <USBD_LL_SetupStage+0x4a>
 800a544:	2b01      	cmp	r3, #1
 800a546:	d00a      	beq.n	800a55e <USBD_LL_SetupStage+0x5e>
 800a548:	e01d      	b.n	800a586 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f9ee 	bl	800a934 <USBD_StdDevReq>
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
      break;
 800a55c:	e020      	b.n	800a5a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fa52 	bl	800aa10 <USBD_StdItfReq>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]
      break;
 800a570:	e016      	b.n	800a5a0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fa91 	bl	800aaa2 <USBD_StdEPReq>
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]
      break;
 800a584:	e00c      	b.n	800a5a0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a58c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a590:	b2db      	uxtb	r3, r3
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 fbf5 	bl	800bd84 <USBD_LL_StallEP>
 800a59a:	4603      	mov	r3, r0
 800a59c:	73fb      	strb	r3, [r7, #15]
      break;
 800a59e:	bf00      	nop
  }

  return ret;
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b086      	sub	sp, #24
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	607a      	str	r2, [r7, #4]
 800a5b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a5b8:	7afb      	ldrb	r3, [r7, #11]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d138      	bne.n	800a630 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a5c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a5cc:	2b03      	cmp	r3, #3
 800a5ce:	d14a      	bne.n	800a666 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	689a      	ldr	r2, [r3, #8]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d913      	bls.n	800a604 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	1ad2      	subs	r2, r2, r3
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	68da      	ldr	r2, [r3, #12]
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	bf28      	it	cs
 800a5f6:	4613      	movcs	r3, r2
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f000 ffc5 	bl	800b58c <USBD_CtlContinueRx>
 800a602:	e030      	b.n	800a666 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b03      	cmp	r3, #3
 800a60e:	d10b      	bne.n	800a628 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 ffc0 	bl	800b5ae <USBD_CtlSendStatus>
 800a62e:	e01a      	b.n	800a666 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d114      	bne.n	800a666 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00e      	beq.n	800a666 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	7afa      	ldrb	r2, [r7, #11]
 800a652:	4611      	mov	r1, r2
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	4798      	blx	r3
 800a658:	4603      	mov	r3, r0
 800a65a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a65c:	7dfb      	ldrb	r3, [r7, #23]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a662:	7dfb      	ldrb	r3, [r7, #23]
 800a664:	e000      	b.n	800a668 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	460b      	mov	r3, r1
 800a67a:	607a      	str	r2, [r7, #4]
 800a67c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a67e:	7afb      	ldrb	r3, [r7, #11]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d16b      	bne.n	800a75c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	3314      	adds	r3, #20
 800a688:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a690:	2b02      	cmp	r3, #2
 800a692:	d156      	bne.n	800a742 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d914      	bls.n	800a6ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	1ad2      	subs	r2, r2, r3
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	6879      	ldr	r1, [r7, #4]
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 ff3a 	bl	800b530 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f001 fc08 	bl	800bed8 <USBD_LL_PrepareReceive>
 800a6c8:	e03b      	b.n	800a742 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	68da      	ldr	r2, [r3, #12]
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d11c      	bne.n	800a710 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	685a      	ldr	r2, [r3, #4]
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d316      	bcc.n	800a710 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d20f      	bcs.n	800a710 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f000 ff1b 	bl	800b530 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a702:	2300      	movs	r3, #0
 800a704:	2200      	movs	r2, #0
 800a706:	2100      	movs	r1, #0
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f001 fbe5 	bl	800bed8 <USBD_LL_PrepareReceive>
 800a70e:	e018      	b.n	800a742 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d10b      	bne.n	800a734 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d005      	beq.n	800a734 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a734:	2180      	movs	r1, #128	@ 0x80
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f001 fb24 	bl	800bd84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f000 ff49 	bl	800b5d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d122      	bne.n	800a792 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f7ff fe98 	bl	800a482 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a75a:	e01a      	b.n	800a792 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b03      	cmp	r3, #3
 800a766:	d114      	bne.n	800a792 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a76e:	695b      	ldr	r3, [r3, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00e      	beq.n	800a792 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	7afa      	ldrb	r2, [r7, #11]
 800a77e:	4611      	mov	r1, r2
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	4798      	blx	r3
 800a784:	4603      	mov	r3, r0
 800a786:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d001      	beq.n	800a792 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a78e:	7dfb      	ldrb	r3, [r7, #23]
 800a790:	e000      	b.n	800a794 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3718      	adds	r7, #24
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e02f      	b.n	800a830 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00f      	beq.n	800a7fa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d009      	beq.n	800a7fa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	6852      	ldr	r2, [r2, #4]
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7fa:	2340      	movs	r3, #64	@ 0x40
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2100      	movs	r1, #0
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f001 fa7a 	bl	800bcfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2240      	movs	r2, #64	@ 0x40
 800a812:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a816:	2340      	movs	r3, #64	@ 0x40
 800a818:	2200      	movs	r2, #0
 800a81a:	2180      	movs	r1, #128	@ 0x80
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 fa6c 	bl	800bcfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2240      	movs	r2, #64	@ 0x40
 800a82c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	78fa      	ldrb	r2, [r7, #3]
 800a848:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a866:	b2da      	uxtb	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2204      	movs	r2, #4
 800a872:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b04      	cmp	r3, #4
 800a896:	d106      	bne.n	800a8a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e012      	b.n	800a8f0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d10b      	bne.n	800a8ee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8dc:	69db      	ldr	r3, [r3, #28]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d005      	beq.n	800a8ee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	3301      	adds	r3, #1
 800a90e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a916:	8a3b      	ldrh	r3, [r7, #16]
 800a918:	021b      	lsls	r3, r3, #8
 800a91a:	b21a      	sxth	r2, r3
 800a91c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a920:	4313      	orrs	r3, r2
 800a922:	b21b      	sxth	r3, r3
 800a924:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a926:	89fb      	ldrh	r3, [r7, #14]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	371c      	adds	r7, #28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a94a:	2b40      	cmp	r3, #64	@ 0x40
 800a94c:	d005      	beq.n	800a95a <USBD_StdDevReq+0x26>
 800a94e:	2b40      	cmp	r3, #64	@ 0x40
 800a950:	d853      	bhi.n	800a9fa <USBD_StdDevReq+0xc6>
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00b      	beq.n	800a96e <USBD_StdDevReq+0x3a>
 800a956:	2b20      	cmp	r3, #32
 800a958:	d14f      	bne.n	800a9fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	4798      	blx	r3
 800a968:	4603      	mov	r3, r0
 800a96a:	73fb      	strb	r3, [r7, #15]
      break;
 800a96c:	e04a      	b.n	800aa04 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	785b      	ldrb	r3, [r3, #1]
 800a972:	2b09      	cmp	r3, #9
 800a974:	d83b      	bhi.n	800a9ee <USBD_StdDevReq+0xba>
 800a976:	a201      	add	r2, pc, #4	@ (adr r2, 800a97c <USBD_StdDevReq+0x48>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a9d1 	.word	0x0800a9d1
 800a980:	0800a9e5 	.word	0x0800a9e5
 800a984:	0800a9ef 	.word	0x0800a9ef
 800a988:	0800a9db 	.word	0x0800a9db
 800a98c:	0800a9ef 	.word	0x0800a9ef
 800a990:	0800a9af 	.word	0x0800a9af
 800a994:	0800a9a5 	.word	0x0800a9a5
 800a998:	0800a9ef 	.word	0x0800a9ef
 800a99c:	0800a9c7 	.word	0x0800a9c7
 800a9a0:	0800a9b9 	.word	0x0800a9b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f9de 	bl	800ad68 <USBD_GetDescriptor>
          break;
 800a9ac:	e024      	b.n	800a9f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fb6d 	bl	800b090 <USBD_SetAddress>
          break;
 800a9b6:	e01f      	b.n	800a9f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fbac 	bl	800b118 <USBD_SetConfig>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73fb      	strb	r3, [r7, #15]
          break;
 800a9c4:	e018      	b.n	800a9f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fc4b 	bl	800b264 <USBD_GetConfig>
          break;
 800a9ce:	e013      	b.n	800a9f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fc7c 	bl	800b2d0 <USBD_GetStatus>
          break;
 800a9d8:	e00e      	b.n	800a9f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fcab 	bl	800b338 <USBD_SetFeature>
          break;
 800a9e2:	e009      	b.n	800a9f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fcba 	bl	800b360 <USBD_ClrFeature>
          break;
 800a9ec:	e004      	b.n	800a9f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fd11 	bl	800b418 <USBD_CtlError>
          break;
 800a9f6:	bf00      	nop
      }
      break;
 800a9f8:	e004      	b.n	800aa04 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fd0b 	bl	800b418 <USBD_CtlError>
      break;
 800aa02:	bf00      	nop
  }

  return ret;
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop

0800aa10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa26:	2b40      	cmp	r3, #64	@ 0x40
 800aa28:	d005      	beq.n	800aa36 <USBD_StdItfReq+0x26>
 800aa2a:	2b40      	cmp	r3, #64	@ 0x40
 800aa2c:	d82f      	bhi.n	800aa8e <USBD_StdItfReq+0x7e>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <USBD_StdItfReq+0x26>
 800aa32:	2b20      	cmp	r3, #32
 800aa34:	d12b      	bne.n	800aa8e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d81d      	bhi.n	800aa80 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	889b      	ldrh	r3, [r3, #4]
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d813      	bhi.n	800aa76 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	4798      	blx	r3
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	88db      	ldrh	r3, [r3, #6]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d110      	bne.n	800aa8a <USBD_StdItfReq+0x7a>
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10d      	bne.n	800aa8a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fd9d 	bl	800b5ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa74:	e009      	b.n	800aa8a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fccd 	bl	800b418 <USBD_CtlError>
          break;
 800aa7e:	e004      	b.n	800aa8a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fcc8 	bl	800b418 <USBD_CtlError>
          break;
 800aa88:	e000      	b.n	800aa8c <USBD_StdItfReq+0x7c>
          break;
 800aa8a:	bf00      	nop
      }
      break;
 800aa8c:	e004      	b.n	800aa98 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fcc1 	bl	800b418 <USBD_CtlError>
      break;
 800aa96:	bf00      	nop
  }

  return ret;
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	889b      	ldrh	r3, [r3, #4]
 800aab4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aabe:	2b40      	cmp	r3, #64	@ 0x40
 800aac0:	d007      	beq.n	800aad2 <USBD_StdEPReq+0x30>
 800aac2:	2b40      	cmp	r3, #64	@ 0x40
 800aac4:	f200 8145 	bhi.w	800ad52 <USBD_StdEPReq+0x2b0>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00c      	beq.n	800aae6 <USBD_StdEPReq+0x44>
 800aacc:	2b20      	cmp	r3, #32
 800aace:	f040 8140 	bne.w	800ad52 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	4798      	blx	r3
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]
      break;
 800aae4:	e13a      	b.n	800ad5c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	785b      	ldrb	r3, [r3, #1]
 800aaea:	2b03      	cmp	r3, #3
 800aaec:	d007      	beq.n	800aafe <USBD_StdEPReq+0x5c>
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	f300 8129 	bgt.w	800ad46 <USBD_StdEPReq+0x2a4>
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d07f      	beq.n	800abf8 <USBD_StdEPReq+0x156>
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d03c      	beq.n	800ab76 <USBD_StdEPReq+0xd4>
 800aafc:	e123      	b.n	800ad46 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d002      	beq.n	800ab10 <USBD_StdEPReq+0x6e>
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	d016      	beq.n	800ab3c <USBD_StdEPReq+0x9a>
 800ab0e:	e02c      	b.n	800ab6a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00d      	beq.n	800ab32 <USBD_StdEPReq+0x90>
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
 800ab18:	2b80      	cmp	r3, #128	@ 0x80
 800ab1a:	d00a      	beq.n	800ab32 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f001 f92f 	bl	800bd84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab26:	2180      	movs	r1, #128	@ 0x80
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f001 f92b 	bl	800bd84 <USBD_LL_StallEP>
 800ab2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab30:	e020      	b.n	800ab74 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fc6f 	bl	800b418 <USBD_CtlError>
              break;
 800ab3a:	e01b      	b.n	800ab74 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	885b      	ldrh	r3, [r3, #2]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10e      	bne.n	800ab62 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab44:	7bbb      	ldrb	r3, [r7, #14]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00b      	beq.n	800ab62 <USBD_StdEPReq+0xc0>
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	2b80      	cmp	r3, #128	@ 0x80
 800ab4e:	d008      	beq.n	800ab62 <USBD_StdEPReq+0xc0>
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	88db      	ldrh	r3, [r3, #6]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d104      	bne.n	800ab62 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f001 f911 	bl	800bd84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fd23 	bl	800b5ae <USBD_CtlSendStatus>

              break;
 800ab68:	e004      	b.n	800ab74 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fc53 	bl	800b418 <USBD_CtlError>
              break;
 800ab72:	bf00      	nop
          }
          break;
 800ab74:	e0ec      	b.n	800ad50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d002      	beq.n	800ab88 <USBD_StdEPReq+0xe6>
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d016      	beq.n	800abb4 <USBD_StdEPReq+0x112>
 800ab86:	e030      	b.n	800abea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00d      	beq.n	800abaa <USBD_StdEPReq+0x108>
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b80      	cmp	r3, #128	@ 0x80
 800ab92:	d00a      	beq.n	800abaa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f001 f8f3 	bl	800bd84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab9e:	2180      	movs	r1, #128	@ 0x80
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f001 f8ef 	bl	800bd84 <USBD_LL_StallEP>
 800aba6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aba8:	e025      	b.n	800abf6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800abaa:	6839      	ldr	r1, [r7, #0]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fc33 	bl	800b418 <USBD_CtlError>
              break;
 800abb2:	e020      	b.n	800abf6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	885b      	ldrh	r3, [r3, #2]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d11b      	bne.n	800abf4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d004      	beq.n	800abd0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800abc6:	7bbb      	ldrb	r3, [r7, #14]
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f001 f8f9 	bl	800bdc2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fcec 	bl	800b5ae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	4798      	blx	r3
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800abe8:	e004      	b.n	800abf4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fc13 	bl	800b418 <USBD_CtlError>
              break;
 800abf2:	e000      	b.n	800abf6 <USBD_StdEPReq+0x154>
              break;
 800abf4:	bf00      	nop
          }
          break;
 800abf6:	e0ab      	b.n	800ad50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d002      	beq.n	800ac0a <USBD_StdEPReq+0x168>
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d032      	beq.n	800ac6e <USBD_StdEPReq+0x1cc>
 800ac08:	e097      	b.n	800ad3a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d007      	beq.n	800ac20 <USBD_StdEPReq+0x17e>
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	2b80      	cmp	r3, #128	@ 0x80
 800ac14:	d004      	beq.n	800ac20 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fbfd 	bl	800b418 <USBD_CtlError>
                break;
 800ac1e:	e091      	b.n	800ad44 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	da0b      	bge.n	800ac40 <USBD_StdEPReq+0x19e>
 800ac28:	7bbb      	ldrb	r3, [r7, #14]
 800ac2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	3310      	adds	r3, #16
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	e00b      	b.n	800ac58 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
 800ac42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	4413      	add	r3, r2
 800ac56:	3304      	adds	r3, #4
 800ac58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2202      	movs	r2, #2
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fc47 	bl	800b4fa <USBD_CtlSendData>
              break;
 800ac6c:	e06a      	b.n	800ad44 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	da11      	bge.n	800ac9a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac76:	7bbb      	ldrb	r3, [r7, #14]
 800ac78:	f003 020f 	and.w	r2, r3, #15
 800ac7c:	6879      	ldr	r1, [r7, #4]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	4413      	add	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	440b      	add	r3, r1
 800ac88:	3324      	adds	r3, #36	@ 0x24
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d117      	bne.n	800acc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fbc0 	bl	800b418 <USBD_CtlError>
                  break;
 800ac98:	e054      	b.n	800ad44 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	f003 020f 	and.w	r2, r3, #15
 800aca0:	6879      	ldr	r1, [r7, #4]
 800aca2:	4613      	mov	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	440b      	add	r3, r1
 800acac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d104      	bne.n	800acc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fbad 	bl	800b418 <USBD_CtlError>
                  break;
 800acbe:	e041      	b.n	800ad44 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	da0b      	bge.n	800ace0 <USBD_StdEPReq+0x23e>
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	3310      	adds	r3, #16
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	4413      	add	r3, r2
 800acdc:	3304      	adds	r3, #4
 800acde:	e00b      	b.n	800acf8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
 800ace2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ace6:	4613      	mov	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	4413      	add	r3, r2
 800acf6:	3304      	adds	r3, #4
 800acf8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800acfa:	7bbb      	ldrb	r3, [r7, #14]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <USBD_StdEPReq+0x264>
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	2b80      	cmp	r3, #128	@ 0x80
 800ad04:	d103      	bne.n	800ad0e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	e00e      	b.n	800ad2c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f001 f874 	bl	800be00 <USBD_LL_IsStallEP>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d003      	beq.n	800ad26 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	2201      	movs	r2, #1
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	e002      	b.n	800ad2c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2202      	movs	r2, #2
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fbe1 	bl	800b4fa <USBD_CtlSendData>
              break;
 800ad38:	e004      	b.n	800ad44 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fb6b 	bl	800b418 <USBD_CtlError>
              break;
 800ad42:	bf00      	nop
          }
          break;
 800ad44:	e004      	b.n	800ad50 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fb65 	bl	800b418 <USBD_CtlError>
          break;
 800ad4e:	bf00      	nop
      }
      break;
 800ad50:	e004      	b.n	800ad5c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fb5f 	bl	800b418 <USBD_CtlError>
      break;
 800ad5a:	bf00      	nop
  }

  return ret;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	885b      	ldrh	r3, [r3, #2]
 800ad82:	0a1b      	lsrs	r3, r3, #8
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	3b01      	subs	r3, #1
 800ad88:	2b0e      	cmp	r3, #14
 800ad8a:	f200 8152 	bhi.w	800b032 <USBD_GetDescriptor+0x2ca>
 800ad8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad94 <USBD_GetDescriptor+0x2c>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800ae05 	.word	0x0800ae05
 800ad98:	0800ae1d 	.word	0x0800ae1d
 800ad9c:	0800ae5d 	.word	0x0800ae5d
 800ada0:	0800b033 	.word	0x0800b033
 800ada4:	0800b033 	.word	0x0800b033
 800ada8:	0800afd3 	.word	0x0800afd3
 800adac:	0800afff 	.word	0x0800afff
 800adb0:	0800b033 	.word	0x0800b033
 800adb4:	0800b033 	.word	0x0800b033
 800adb8:	0800b033 	.word	0x0800b033
 800adbc:	0800b033 	.word	0x0800b033
 800adc0:	0800b033 	.word	0x0800b033
 800adc4:	0800b033 	.word	0x0800b033
 800adc8:	0800b033 	.word	0x0800b033
 800adcc:	0800add1 	.word	0x0800add1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00b      	beq.n	800adf4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ade2:	69db      	ldr	r3, [r3, #28]
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	7c12      	ldrb	r2, [r2, #16]
 800ade8:	f107 0108 	add.w	r1, r7, #8
 800adec:	4610      	mov	r0, r2
 800adee:	4798      	blx	r3
 800adf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adf2:	e126      	b.n	800b042 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fb0e 	bl	800b418 <USBD_CtlError>
        err++;
 800adfc:	7afb      	ldrb	r3, [r7, #11]
 800adfe:	3301      	adds	r3, #1
 800ae00:	72fb      	strb	r3, [r7, #11]
      break;
 800ae02:	e11e      	b.n	800b042 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	7c12      	ldrb	r2, [r2, #16]
 800ae10:	f107 0108 	add.w	r1, r7, #8
 800ae14:	4610      	mov	r0, r2
 800ae16:	4798      	blx	r3
 800ae18:	60f8      	str	r0, [r7, #12]
      break;
 800ae1a:	e112      	b.n	800b042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	7c1b      	ldrb	r3, [r3, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10d      	bne.n	800ae40 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae2c:	f107 0208 	add.w	r2, r7, #8
 800ae30:	4610      	mov	r0, r2
 800ae32:	4798      	blx	r3
 800ae34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae3e:	e100      	b.n	800b042 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae48:	f107 0208 	add.w	r2, r7, #8
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	4798      	blx	r3
 800ae50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	3301      	adds	r3, #1
 800ae56:	2202      	movs	r2, #2
 800ae58:	701a      	strb	r2, [r3, #0]
      break;
 800ae5a:	e0f2      	b.n	800b042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	885b      	ldrh	r3, [r3, #2]
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b05      	cmp	r3, #5
 800ae64:	f200 80ac 	bhi.w	800afc0 <USBD_GetDescriptor+0x258>
 800ae68:	a201      	add	r2, pc, #4	@ (adr r2, 800ae70 <USBD_GetDescriptor+0x108>)
 800ae6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6e:	bf00      	nop
 800ae70:	0800ae89 	.word	0x0800ae89
 800ae74:	0800aebd 	.word	0x0800aebd
 800ae78:	0800aef1 	.word	0x0800aef1
 800ae7c:	0800af25 	.word	0x0800af25
 800ae80:	0800af59 	.word	0x0800af59
 800ae84:	0800af8d 	.word	0x0800af8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	7c12      	ldrb	r2, [r2, #16]
 800aea0:	f107 0108 	add.w	r1, r7, #8
 800aea4:	4610      	mov	r0, r2
 800aea6:	4798      	blx	r3
 800aea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeaa:	e091      	b.n	800afd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fab2 	bl	800b418 <USBD_CtlError>
            err++;
 800aeb4:	7afb      	ldrb	r3, [r7, #11]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeba:	e089      	b.n	800afd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00b      	beq.n	800aee0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	7c12      	ldrb	r2, [r2, #16]
 800aed4:	f107 0108 	add.w	r1, r7, #8
 800aed8:	4610      	mov	r0, r2
 800aeda:	4798      	blx	r3
 800aedc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aede:	e077      	b.n	800afd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 fa98 	bl	800b418 <USBD_CtlError>
            err++;
 800aee8:	7afb      	ldrb	r3, [r7, #11]
 800aeea:	3301      	adds	r3, #1
 800aeec:	72fb      	strb	r3, [r7, #11]
          break;
 800aeee:	e06f      	b.n	800afd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00b      	beq.n	800af14 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	7c12      	ldrb	r2, [r2, #16]
 800af08:	f107 0108 	add.w	r1, r7, #8
 800af0c:	4610      	mov	r0, r2
 800af0e:	4798      	blx	r3
 800af10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af12:	e05d      	b.n	800afd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fa7e 	bl	800b418 <USBD_CtlError>
            err++;
 800af1c:	7afb      	ldrb	r3, [r7, #11]
 800af1e:	3301      	adds	r3, #1
 800af20:	72fb      	strb	r3, [r7, #11]
          break;
 800af22:	e055      	b.n	800afd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00b      	beq.n	800af48 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	7c12      	ldrb	r2, [r2, #16]
 800af3c:	f107 0108 	add.w	r1, r7, #8
 800af40:	4610      	mov	r0, r2
 800af42:	4798      	blx	r3
 800af44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af46:	e043      	b.n	800afd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fa64 	bl	800b418 <USBD_CtlError>
            err++;
 800af50:	7afb      	ldrb	r3, [r7, #11]
 800af52:	3301      	adds	r3, #1
 800af54:	72fb      	strb	r3, [r7, #11]
          break;
 800af56:	e03b      	b.n	800afd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af5e:	695b      	ldr	r3, [r3, #20]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00b      	beq.n	800af7c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	7c12      	ldrb	r2, [r2, #16]
 800af70:	f107 0108 	add.w	r1, r7, #8
 800af74:	4610      	mov	r0, r2
 800af76:	4798      	blx	r3
 800af78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af7a:	e029      	b.n	800afd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fa4a 	bl	800b418 <USBD_CtlError>
            err++;
 800af84:	7afb      	ldrb	r3, [r7, #11]
 800af86:	3301      	adds	r3, #1
 800af88:	72fb      	strb	r3, [r7, #11]
          break;
 800af8a:	e021      	b.n	800afd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	7c12      	ldrb	r2, [r2, #16]
 800afa4:	f107 0108 	add.w	r1, r7, #8
 800afa8:	4610      	mov	r0, r2
 800afaa:	4798      	blx	r3
 800afac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afae:	e00f      	b.n	800afd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fa30 	bl	800b418 <USBD_CtlError>
            err++;
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	3301      	adds	r3, #1
 800afbc:	72fb      	strb	r3, [r7, #11]
          break;
 800afbe:	e007      	b.n	800afd0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fa28 	bl	800b418 <USBD_CtlError>
          err++;
 800afc8:	7afb      	ldrb	r3, [r7, #11]
 800afca:	3301      	adds	r3, #1
 800afcc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800afce:	bf00      	nop
      }
      break;
 800afd0:	e037      	b.n	800b042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	7c1b      	ldrb	r3, [r3, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d109      	bne.n	800afee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afe2:	f107 0208 	add.w	r2, r7, #8
 800afe6:	4610      	mov	r0, r2
 800afe8:	4798      	blx	r3
 800afea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afec:	e029      	b.n	800b042 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fa11 	bl	800b418 <USBD_CtlError>
        err++;
 800aff6:	7afb      	ldrb	r3, [r7, #11]
 800aff8:	3301      	adds	r3, #1
 800affa:	72fb      	strb	r3, [r7, #11]
      break;
 800affc:	e021      	b.n	800b042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	7c1b      	ldrb	r3, [r3, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10d      	bne.n	800b022 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b00e:	f107 0208 	add.w	r2, r7, #8
 800b012:	4610      	mov	r0, r2
 800b014:	4798      	blx	r3
 800b016:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	3301      	adds	r3, #1
 800b01c:	2207      	movs	r2, #7
 800b01e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b020:	e00f      	b.n	800b042 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f9f7 	bl	800b418 <USBD_CtlError>
        err++;
 800b02a:	7afb      	ldrb	r3, [r7, #11]
 800b02c:	3301      	adds	r3, #1
 800b02e:	72fb      	strb	r3, [r7, #11]
      break;
 800b030:	e007      	b.n	800b042 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f9ef 	bl	800b418 <USBD_CtlError>
      err++;
 800b03a:	7afb      	ldrb	r3, [r7, #11]
 800b03c:	3301      	adds	r3, #1
 800b03e:	72fb      	strb	r3, [r7, #11]
      break;
 800b040:	bf00      	nop
  }

  if (err != 0U)
 800b042:	7afb      	ldrb	r3, [r7, #11]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d11e      	bne.n	800b086 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	88db      	ldrh	r3, [r3, #6]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d016      	beq.n	800b07e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b050:	893b      	ldrh	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00e      	beq.n	800b074 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	88da      	ldrh	r2, [r3, #6]
 800b05a:	893b      	ldrh	r3, [r7, #8]
 800b05c:	4293      	cmp	r3, r2
 800b05e:	bf28      	it	cs
 800b060:	4613      	movcs	r3, r2
 800b062:	b29b      	uxth	r3, r3
 800b064:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b066:	893b      	ldrh	r3, [r7, #8]
 800b068:	461a      	mov	r2, r3
 800b06a:	68f9      	ldr	r1, [r7, #12]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fa44 	bl	800b4fa <USBD_CtlSendData>
 800b072:	e009      	b.n	800b088 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b074:	6839      	ldr	r1, [r7, #0]
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f9ce 	bl	800b418 <USBD_CtlError>
 800b07c:	e004      	b.n	800b088 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fa95 	bl	800b5ae <USBD_CtlSendStatus>
 800b084:	e000      	b.n	800b088 <USBD_GetDescriptor+0x320>
    return;
 800b086:	bf00      	nop
  }
}
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop

0800b090 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	889b      	ldrh	r3, [r3, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d131      	bne.n	800b106 <USBD_SetAddress+0x76>
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	88db      	ldrh	r3, [r3, #6]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d12d      	bne.n	800b106 <USBD_SetAddress+0x76>
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	885b      	ldrh	r3, [r3, #2]
 800b0ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800b0b0:	d829      	bhi.n	800b106 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	885b      	ldrh	r3, [r3, #2]
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	d104      	bne.n	800b0d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f9a3 	bl	800b418 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d2:	e01d      	b.n	800b110 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	7bfa      	ldrb	r2, [r7, #15]
 800b0d8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 feb9 	bl	800be58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fa61 	bl	800b5ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d004      	beq.n	800b0fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0fa:	e009      	b.n	800b110 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b104:	e004      	b.n	800b110 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f985 	bl	800b418 <USBD_CtlError>
  }
}
 800b10e:	bf00      	nop
 800b110:	bf00      	nop
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	885b      	ldrh	r3, [r3, #2]
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	4b4c      	ldr	r3, [pc, #304]	@ (800b260 <USBD_SetConfig+0x148>)
 800b12e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b130:	4b4b      	ldr	r3, [pc, #300]	@ (800b260 <USBD_SetConfig+0x148>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d905      	bls.n	800b144 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f96c 	bl	800b418 <USBD_CtlError>
    return USBD_FAIL;
 800b140:	2303      	movs	r3, #3
 800b142:	e088      	b.n	800b256 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d002      	beq.n	800b156 <USBD_SetConfig+0x3e>
 800b150:	2b03      	cmp	r3, #3
 800b152:	d025      	beq.n	800b1a0 <USBD_SetConfig+0x88>
 800b154:	e071      	b.n	800b23a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b156:	4b42      	ldr	r3, [pc, #264]	@ (800b260 <USBD_SetConfig+0x148>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d01c      	beq.n	800b198 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b15e:	4b40      	ldr	r3, [pc, #256]	@ (800b260 <USBD_SetConfig+0x148>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b168:	4b3d      	ldr	r3, [pc, #244]	@ (800b260 <USBD_SetConfig+0x148>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	4619      	mov	r1, r3
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f7ff f992 	bl	800a498 <USBD_SetClassConfig>
 800b174:	4603      	mov	r3, r0
 800b176:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b178:	7bfb      	ldrb	r3, [r7, #15]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d004      	beq.n	800b188 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b17e:	6839      	ldr	r1, [r7, #0]
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f949 	bl	800b418 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b186:	e065      	b.n	800b254 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fa10 	bl	800b5ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2203      	movs	r2, #3
 800b192:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b196:	e05d      	b.n	800b254 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fa08 	bl	800b5ae <USBD_CtlSendStatus>
      break;
 800b19e:	e059      	b.n	800b254 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b1a0:	4b2f      	ldr	r3, [pc, #188]	@ (800b260 <USBD_SetConfig+0x148>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d112      	bne.n	800b1ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b1b0:	4b2b      	ldr	r3, [pc, #172]	@ (800b260 <USBD_SetConfig+0x148>)
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1ba:	4b29      	ldr	r3, [pc, #164]	@ (800b260 <USBD_SetConfig+0x148>)
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff f985 	bl	800a4d0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f9f1 	bl	800b5ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1cc:	e042      	b.n	800b254 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b1ce:	4b24      	ldr	r3, [pc, #144]	@ (800b260 <USBD_SetConfig+0x148>)
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d02a      	beq.n	800b232 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff f973 	bl	800a4d0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b1ea:	4b1d      	ldr	r3, [pc, #116]	@ (800b260 <USBD_SetConfig+0x148>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1f4:	4b1a      	ldr	r3, [pc, #104]	@ (800b260 <USBD_SetConfig+0x148>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7ff f94c 	bl	800a498 <USBD_SetClassConfig>
 800b200:	4603      	mov	r3, r0
 800b202:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b204:	7bfb      	ldrb	r3, [r7, #15]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00f      	beq.n	800b22a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b20a:	6839      	ldr	r1, [r7, #0]
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f903 	bl	800b418 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	4619      	mov	r1, r3
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff f958 	bl	800a4d0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2202      	movs	r2, #2
 800b224:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b228:	e014      	b.n	800b254 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f9bf 	bl	800b5ae <USBD_CtlSendStatus>
      break;
 800b230:	e010      	b.n	800b254 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f9bb 	bl	800b5ae <USBD_CtlSendStatus>
      break;
 800b238:	e00c      	b.n	800b254 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f8eb 	bl	800b418 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b242:	4b07      	ldr	r3, [pc, #28]	@ (800b260 <USBD_SetConfig+0x148>)
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff f941 	bl	800a4d0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b24e:	2303      	movs	r3, #3
 800b250:	73fb      	strb	r3, [r7, #15]
      break;
 800b252:	bf00      	nop
  }

  return ret;
 800b254:	7bfb      	ldrb	r3, [r7, #15]
}
 800b256:	4618      	mov	r0, r3
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	20000c1d 	.word	0x20000c1d

0800b264 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	88db      	ldrh	r3, [r3, #6]
 800b272:	2b01      	cmp	r3, #1
 800b274:	d004      	beq.n	800b280 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f8cd 	bl	800b418 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b27e:	e023      	b.n	800b2c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b02      	cmp	r3, #2
 800b28a:	dc02      	bgt.n	800b292 <USBD_GetConfig+0x2e>
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dc03      	bgt.n	800b298 <USBD_GetConfig+0x34>
 800b290:	e015      	b.n	800b2be <USBD_GetConfig+0x5a>
 800b292:	2b03      	cmp	r3, #3
 800b294:	d00b      	beq.n	800b2ae <USBD_GetConfig+0x4a>
 800b296:	e012      	b.n	800b2be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f927 	bl	800b4fa <USBD_CtlSendData>
        break;
 800b2ac:	e00c      	b.n	800b2c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f91f 	bl	800b4fa <USBD_CtlSendData>
        break;
 800b2bc:	e004      	b.n	800b2c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f8a9 	bl	800b418 <USBD_CtlError>
        break;
 800b2c6:	bf00      	nop
}
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d81e      	bhi.n	800b326 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	88db      	ldrh	r3, [r3, #6]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d004      	beq.n	800b2fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f890 	bl	800b418 <USBD_CtlError>
        break;
 800b2f8:	e01a      	b.n	800b330 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b306:	2b00      	cmp	r3, #0
 800b308:	d005      	beq.n	800b316 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	f043 0202 	orr.w	r2, r3, #2
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	330c      	adds	r3, #12
 800b31a:	2202      	movs	r2, #2
 800b31c:	4619      	mov	r1, r3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f8eb 	bl	800b4fa <USBD_CtlSendData>
      break;
 800b324:	e004      	b.n	800b330 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f875 	bl	800b418 <USBD_CtlError>
      break;
 800b32e:	bf00      	nop
  }
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	885b      	ldrh	r3, [r3, #2]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d106      	bne.n	800b358 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f92b 	bl	800b5ae <USBD_CtlSendStatus>
  }
}
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b370:	b2db      	uxtb	r3, r3
 800b372:	3b01      	subs	r3, #1
 800b374:	2b02      	cmp	r3, #2
 800b376:	d80b      	bhi.n	800b390 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	885b      	ldrh	r3, [r3, #2]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d10c      	bne.n	800b39a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f910 	bl	800b5ae <USBD_CtlSendStatus>
      }
      break;
 800b38e:	e004      	b.n	800b39a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f840 	bl	800b418 <USBD_CtlError>
      break;
 800b398:	e000      	b.n	800b39c <USBD_ClrFeature+0x3c>
      break;
 800b39a:	bf00      	nop
  }
}
 800b39c:	bf00      	nop
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	781a      	ldrb	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	781a      	ldrb	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f7ff fa92 	bl	800a8f8 <SWAPBYTE>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7ff fa85 	bl	800a8f8 <SWAPBYTE>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3301      	adds	r3, #1
 800b400:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f7ff fa78 	bl	800a8f8 <SWAPBYTE>
 800b408:	4603      	mov	r3, r0
 800b40a:	461a      	mov	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	80da      	strh	r2, [r3, #6]
}
 800b410:	bf00      	nop
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b422:	2180      	movs	r1, #128	@ 0x80
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fcad 	bl	800bd84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b42a:	2100      	movs	r1, #0
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fca9 	bl	800bd84 <USBD_LL_StallEP>
}
 800b432:	bf00      	nop
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b086      	sub	sp, #24
 800b43e:	af00      	add	r7, sp, #0
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	60b9      	str	r1, [r7, #8]
 800b444:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d036      	beq.n	800b4be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b454:	6938      	ldr	r0, [r7, #16]
 800b456:	f000 f836 	bl	800b4c6 <USBD_GetLen>
 800b45a:	4603      	mov	r3, r0
 800b45c:	3301      	adds	r3, #1
 800b45e:	b29b      	uxth	r3, r3
 800b460:	005b      	lsls	r3, r3, #1
 800b462:	b29a      	uxth	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b468:	7dfb      	ldrb	r3, [r7, #23]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	4413      	add	r3, r2
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	7812      	ldrb	r2, [r2, #0]
 800b472:	701a      	strb	r2, [r3, #0]
  idx++;
 800b474:	7dfb      	ldrb	r3, [r7, #23]
 800b476:	3301      	adds	r3, #1
 800b478:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	4413      	add	r3, r2
 800b480:	2203      	movs	r2, #3
 800b482:	701a      	strb	r2, [r3, #0]
  idx++;
 800b484:	7dfb      	ldrb	r3, [r7, #23]
 800b486:	3301      	adds	r3, #1
 800b488:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b48a:	e013      	b.n	800b4b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b48c:	7dfb      	ldrb	r3, [r7, #23]
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	4413      	add	r3, r2
 800b492:	693a      	ldr	r2, [r7, #16]
 800b494:	7812      	ldrb	r2, [r2, #0]
 800b496:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	3301      	adds	r3, #1
 800b49c:	613b      	str	r3, [r7, #16]
    idx++;
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	701a      	strb	r2, [r3, #0]
    idx++;
 800b4ae:	7dfb      	ldrb	r3, [r7, #23]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1e7      	bne.n	800b48c <USBD_GetString+0x52>
 800b4bc:	e000      	b.n	800b4c0 <USBD_GetString+0x86>
    return;
 800b4be:	bf00      	nop
  }
}
 800b4c0:	3718      	adds	r7, #24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b085      	sub	sp, #20
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b4d6:	e005      	b.n	800b4e4 <USBD_GetLen+0x1e>
  {
    len++;
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1f5      	bne.n	800b4d8 <USBD_GetLen+0x12>
  }

  return len;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b084      	sub	sp, #16
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	60f8      	str	r0, [r7, #12]
 800b502:	60b9      	str	r1, [r7, #8]
 800b504:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2202      	movs	r2, #2
 800b50a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	2100      	movs	r1, #0
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 fcb8 	bl	800be96 <USBD_LL_Transmit>

  return USBD_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	2100      	movs	r1, #0
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f000 fca7 	bl	800be96 <USBD_LL_Transmit>

  return USBD_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b084      	sub	sp, #16
 800b556:	af00      	add	r7, sp, #0
 800b558:	60f8      	str	r0, [r7, #12]
 800b55a:	60b9      	str	r1, [r7, #8]
 800b55c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2203      	movs	r2, #3
 800b562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	2100      	movs	r1, #0
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f000 fcab 	bl	800bed8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	2100      	movs	r1, #0
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 fc9a 	bl	800bed8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b082      	sub	sp, #8
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2204      	movs	r2, #4
 800b5ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5be:	2300      	movs	r3, #0
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fc66 	bl	800be96 <USBD_LL_Transmit>

  return USBD_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2205      	movs	r2, #5
 800b5e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fc74 	bl	800bed8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
	...

0800b5fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b600:	2200      	movs	r2, #0
 800b602:	4912      	ldr	r1, [pc, #72]	@ (800b64c <MX_USB_Device_Init+0x50>)
 800b604:	4812      	ldr	r0, [pc, #72]	@ (800b650 <MX_USB_Device_Init+0x54>)
 800b606:	f7fe fed9 	bl	800a3bc <USBD_Init>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b610:	f7f6 f899 	bl	8001746 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b614:	490f      	ldr	r1, [pc, #60]	@ (800b654 <MX_USB_Device_Init+0x58>)
 800b616:	480e      	ldr	r0, [pc, #56]	@ (800b650 <MX_USB_Device_Init+0x54>)
 800b618:	f7fe ff00 	bl	800a41c <USBD_RegisterClass>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b622:	f7f6 f890 	bl	8001746 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b626:	490c      	ldr	r1, [pc, #48]	@ (800b658 <MX_USB_Device_Init+0x5c>)
 800b628:	4809      	ldr	r0, [pc, #36]	@ (800b650 <MX_USB_Device_Init+0x54>)
 800b62a:	f7fe fe21 	bl	800a270 <USBD_CDC_RegisterInterface>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b634:	f7f6 f887 	bl	8001746 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b638:	4805      	ldr	r0, [pc, #20]	@ (800b650 <MX_USB_Device_Init+0x54>)
 800b63a:	f7fe ff16 	bl	800a46a <USBD_Start>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b644:	f7f6 f87f 	bl	8001746 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b648:	bf00      	nop
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	200002d0 	.word	0x200002d0
 800b650:	20001ab8 	.word	0x20001ab8
 800b654:	200001b8 	.word	0x200001b8
 800b658:	200002bc 	.word	0x200002bc

0800b65c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b660:	2200      	movs	r2, #0
 800b662:	4905      	ldr	r1, [pc, #20]	@ (800b678 <CDC_Init_FS+0x1c>)
 800b664:	4805      	ldr	r0, [pc, #20]	@ (800b67c <CDC_Init_FS+0x20>)
 800b666:	f7fe fe18 	bl	800a29a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b66a:	4905      	ldr	r1, [pc, #20]	@ (800b680 <CDC_Init_FS+0x24>)
 800b66c:	4803      	ldr	r0, [pc, #12]	@ (800b67c <CDC_Init_FS+0x20>)
 800b66e:	f7fe fe32 	bl	800a2d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b672:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b674:	4618      	mov	r0, r3
 800b676:	bd80      	pop	{r7, pc}
 800b678:	20002188 	.word	0x20002188
 800b67c:	20001ab8 	.word	0x20001ab8
 800b680:	20001d88 	.word	0x20001d88

0800b684 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b684:	b480      	push	{r7}
 800b686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b688:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	6039      	str	r1, [r7, #0]
 800b69e:	71fb      	strb	r3, [r7, #7]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	2b23      	cmp	r3, #35	@ 0x23
 800b6a8:	d84a      	bhi.n	800b740 <CDC_Control_FS+0xac>
 800b6aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b0 <CDC_Control_FS+0x1c>)
 800b6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b0:	0800b741 	.word	0x0800b741
 800b6b4:	0800b741 	.word	0x0800b741
 800b6b8:	0800b741 	.word	0x0800b741
 800b6bc:	0800b741 	.word	0x0800b741
 800b6c0:	0800b741 	.word	0x0800b741
 800b6c4:	0800b741 	.word	0x0800b741
 800b6c8:	0800b741 	.word	0x0800b741
 800b6cc:	0800b741 	.word	0x0800b741
 800b6d0:	0800b741 	.word	0x0800b741
 800b6d4:	0800b741 	.word	0x0800b741
 800b6d8:	0800b741 	.word	0x0800b741
 800b6dc:	0800b741 	.word	0x0800b741
 800b6e0:	0800b741 	.word	0x0800b741
 800b6e4:	0800b741 	.word	0x0800b741
 800b6e8:	0800b741 	.word	0x0800b741
 800b6ec:	0800b741 	.word	0x0800b741
 800b6f0:	0800b741 	.word	0x0800b741
 800b6f4:	0800b741 	.word	0x0800b741
 800b6f8:	0800b741 	.word	0x0800b741
 800b6fc:	0800b741 	.word	0x0800b741
 800b700:	0800b741 	.word	0x0800b741
 800b704:	0800b741 	.word	0x0800b741
 800b708:	0800b741 	.word	0x0800b741
 800b70c:	0800b741 	.word	0x0800b741
 800b710:	0800b741 	.word	0x0800b741
 800b714:	0800b741 	.word	0x0800b741
 800b718:	0800b741 	.word	0x0800b741
 800b71c:	0800b741 	.word	0x0800b741
 800b720:	0800b741 	.word	0x0800b741
 800b724:	0800b741 	.word	0x0800b741
 800b728:	0800b741 	.word	0x0800b741
 800b72c:	0800b741 	.word	0x0800b741
 800b730:	0800b741 	.word	0x0800b741
 800b734:	0800b741 	.word	0x0800b741
 800b738:	0800b741 	.word	0x0800b741
 800b73c:	0800b741 	.word	0x0800b741
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b740:	bf00      	nop
  }

  return (USBD_OK);
 800b742:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b744:	4618      	mov	r0, r3
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b75a:	6879      	ldr	r1, [r7, #4]
 800b75c:	4805      	ldr	r0, [pc, #20]	@ (800b774 <CDC_Receive_FS+0x24>)
 800b75e:	f7fe fdba 	bl	800a2d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b762:	4804      	ldr	r0, [pc, #16]	@ (800b774 <CDC_Receive_FS+0x24>)
 800b764:	f7fe fe00 	bl	800a368 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b768:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	20001ab8 	.word	0x20001ab8

0800b778 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b788:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c0 <CDC_Transmit_FS+0x48>)
 800b78a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b78e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e00b      	b.n	800b7b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b79e:	887b      	ldrh	r3, [r7, #2]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	6879      	ldr	r1, [r7, #4]
 800b7a4:	4806      	ldr	r0, [pc, #24]	@ (800b7c0 <CDC_Transmit_FS+0x48>)
 800b7a6:	f7fe fd78 	bl	800a29a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b7aa:	4805      	ldr	r0, [pc, #20]	@ (800b7c0 <CDC_Transmit_FS+0x48>)
 800b7ac:	f7fe fdac 	bl	800a308 <USBD_CDC_TransmitPacket>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	20001ab8 	.word	0x20001ab8

0800b7c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b7d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	371c      	adds	r7, #28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
	...

0800b7e8 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b7ee:	4b09      	ldr	r3, [pc, #36]	@ (800b814 <CDC_Transmit_Is_Busy+0x2c>)
 800b7f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7f4:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d001      	beq.n	800b804 <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800b800:	2301      	movs	r3, #1
 800b802:	e000      	b.n	800b806 <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800b804:	2300      	movs	r3, #0
  }
}
 800b806:	4618      	mov	r0, r3
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	20001ab8 	.word	0x20001ab8

0800b818 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	6039      	str	r1, [r7, #0]
 800b822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2212      	movs	r2, #18
 800b828:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b82a:	4b03      	ldr	r3, [pc, #12]	@ (800b838 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	200002f0 	.word	0x200002f0

0800b83c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	4603      	mov	r3, r0
 800b844:	6039      	str	r1, [r7, #0]
 800b846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2204      	movs	r2, #4
 800b84c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b84e:	4b03      	ldr	r3, [pc, #12]	@ (800b85c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	20000304 	.word	0x20000304

0800b860 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	4603      	mov	r3, r0
 800b868:	6039      	str	r1, [r7, #0]
 800b86a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b86c:	79fb      	ldrb	r3, [r7, #7]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d105      	bne.n	800b87e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	4907      	ldr	r1, [pc, #28]	@ (800b894 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b876:	4808      	ldr	r0, [pc, #32]	@ (800b898 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b878:	f7ff fddf 	bl	800b43a <USBD_GetString>
 800b87c:	e004      	b.n	800b888 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	4904      	ldr	r1, [pc, #16]	@ (800b894 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b882:	4805      	ldr	r0, [pc, #20]	@ (800b898 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b884:	f7ff fdd9 	bl	800b43a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b888:	4b02      	ldr	r3, [pc, #8]	@ (800b894 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	20002588 	.word	0x20002588
 800b898:	0800d1c4 	.word	0x0800d1c4

0800b89c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	6039      	str	r1, [r7, #0]
 800b8a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	4904      	ldr	r1, [pc, #16]	@ (800b8bc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b8ac:	4804      	ldr	r0, [pc, #16]	@ (800b8c0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b8ae:	f7ff fdc4 	bl	800b43a <USBD_GetString>
  return USBD_StrDesc;
 800b8b2:	4b02      	ldr	r3, [pc, #8]	@ (800b8bc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	20002588 	.word	0x20002588
 800b8c0:	0800d1dc 	.word	0x0800d1dc

0800b8c4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	6039      	str	r1, [r7, #0]
 800b8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	221a      	movs	r2, #26
 800b8d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b8d6:	f000 f843 	bl	800b960 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b8da:	4b02      	ldr	r3, [pc, #8]	@ (800b8e4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	20000308 	.word	0x20000308

0800b8e8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	6039      	str	r1, [r7, #0]
 800b8f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b8f4:	79fb      	ldrb	r3, [r7, #7]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d105      	bne.n	800b906 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	4907      	ldr	r1, [pc, #28]	@ (800b91c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b8fe:	4808      	ldr	r0, [pc, #32]	@ (800b920 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b900:	f7ff fd9b 	bl	800b43a <USBD_GetString>
 800b904:	e004      	b.n	800b910 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b906:	683a      	ldr	r2, [r7, #0]
 800b908:	4904      	ldr	r1, [pc, #16]	@ (800b91c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b90a:	4805      	ldr	r0, [pc, #20]	@ (800b920 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b90c:	f7ff fd95 	bl	800b43a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b910:	4b02      	ldr	r3, [pc, #8]	@ (800b91c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20002588 	.word	0x20002588
 800b920:	0800d1f0 	.word	0x0800d1f0

0800b924 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	6039      	str	r1, [r7, #0]
 800b92e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b930:	79fb      	ldrb	r3, [r7, #7]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d105      	bne.n	800b942 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	4907      	ldr	r1, [pc, #28]	@ (800b958 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b93a:	4808      	ldr	r0, [pc, #32]	@ (800b95c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b93c:	f7ff fd7d 	bl	800b43a <USBD_GetString>
 800b940:	e004      	b.n	800b94c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	4904      	ldr	r1, [pc, #16]	@ (800b958 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b946:	4805      	ldr	r0, [pc, #20]	@ (800b95c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b948:	f7ff fd77 	bl	800b43a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b94c:	4b02      	ldr	r3, [pc, #8]	@ (800b958 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20002588 	.word	0x20002588
 800b95c:	0800d1fc 	.word	0x0800d1fc

0800b960 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b966:	4b0f      	ldr	r3, [pc, #60]	@ (800b9a4 <Get_SerialNum+0x44>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b96c:	4b0e      	ldr	r3, [pc, #56]	@ (800b9a8 <Get_SerialNum+0x48>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b972:	4b0e      	ldr	r3, [pc, #56]	@ (800b9ac <Get_SerialNum+0x4c>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4413      	add	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d009      	beq.n	800b99a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b986:	2208      	movs	r2, #8
 800b988:	4909      	ldr	r1, [pc, #36]	@ (800b9b0 <Get_SerialNum+0x50>)
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f000 f814 	bl	800b9b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b990:	2204      	movs	r2, #4
 800b992:	4908      	ldr	r1, [pc, #32]	@ (800b9b4 <Get_SerialNum+0x54>)
 800b994:	68b8      	ldr	r0, [r7, #8]
 800b996:	f000 f80f 	bl	800b9b8 <IntToUnicode>
  }
}
 800b99a:	bf00      	nop
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	1fff7590 	.word	0x1fff7590
 800b9a8:	1fff7594 	.word	0x1fff7594
 800b9ac:	1fff7598 	.word	0x1fff7598
 800b9b0:	2000030a 	.word	0x2000030a
 800b9b4:	2000031a 	.word	0x2000031a

0800b9b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	75fb      	strb	r3, [r7, #23]
 800b9ce:	e027      	b.n	800ba20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	0f1b      	lsrs	r3, r3, #28
 800b9d4:	2b09      	cmp	r3, #9
 800b9d6:	d80b      	bhi.n	800b9f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	0f1b      	lsrs	r3, r3, #28
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	440b      	add	r3, r1
 800b9e8:	3230      	adds	r2, #48	@ 0x30
 800b9ea:	b2d2      	uxtb	r2, r2
 800b9ec:	701a      	strb	r2, [r3, #0]
 800b9ee:	e00a      	b.n	800ba06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	0f1b      	lsrs	r3, r3, #28
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	7dfb      	ldrb	r3, [r7, #23]
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	440b      	add	r3, r1
 800ba00:	3237      	adds	r2, #55	@ 0x37
 800ba02:	b2d2      	uxtb	r2, r2
 800ba04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	011b      	lsls	r3, r3, #4
 800ba0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba0c:	7dfb      	ldrb	r3, [r7, #23]
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	3301      	adds	r3, #1
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	4413      	add	r3, r2
 800ba16:	2200      	movs	r2, #0
 800ba18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba1a:	7dfb      	ldrb	r3, [r7, #23]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	75fb      	strb	r3, [r7, #23]
 800ba20:	7dfa      	ldrb	r2, [r7, #23]
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d3d3      	bcc.n	800b9d0 <IntToUnicode+0x18>
  }
}
 800ba28:	bf00      	nop
 800ba2a:	bf00      	nop
 800ba2c:	371c      	adds	r7, #28
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
	...

0800ba38 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b094      	sub	sp, #80	@ 0x50
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba40:	f107 030c 	add.w	r3, r7, #12
 800ba44:	2244      	movs	r2, #68	@ 0x44
 800ba46:	2100      	movs	r1, #0
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f000 fd03 	bl	800c454 <memset>
  if(pcdHandle->Instance==USB)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a15      	ldr	r2, [pc, #84]	@ (800baa8 <HAL_PCD_MspInit+0x70>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d122      	bne.n	800ba9e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ba58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba5c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ba62:	f107 030c 	add.w	r3, r7, #12
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7f9 fd6a 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ba72:	f7f5 fe68 	bl	8001746 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ba76:	4b0d      	ldr	r3, [pc, #52]	@ (800baac <HAL_PCD_MspInit+0x74>)
 800ba78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba7a:	4a0c      	ldr	r2, [pc, #48]	@ (800baac <HAL_PCD_MspInit+0x74>)
 800ba7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ba80:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba82:	4b0a      	ldr	r3, [pc, #40]	@ (800baac <HAL_PCD_MspInit+0x74>)
 800ba84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba8a:	60bb      	str	r3, [r7, #8]
 800ba8c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2100      	movs	r1, #0
 800ba92:	2014      	movs	r0, #20
 800ba94:	f7f6 fd33 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ba98:	2014      	movs	r0, #20
 800ba9a:	f7f6 fd4a 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ba9e:	bf00      	nop
 800baa0:	3750      	adds	r7, #80	@ 0x50
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	40005c00 	.word	0x40005c00
 800baac:	40021000 	.word	0x40021000

0800bab0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bac4:	4619      	mov	r1, r3
 800bac6:	4610      	mov	r0, r2
 800bac8:	f7fe fd1a 	bl	800a500 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bae6:	78fa      	ldrb	r2, [r7, #3]
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	4613      	mov	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	00db      	lsls	r3, r3, #3
 800baf2:	440b      	add	r3, r1
 800baf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	78fb      	ldrb	r3, [r7, #3]
 800bafc:	4619      	mov	r1, r3
 800bafe:	f7fe fd54 	bl	800a5aa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bb02:	bf00      	nop
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bb1c:	78fa      	ldrb	r2, [r7, #3]
 800bb1e:	6879      	ldr	r1, [r7, #4]
 800bb20:	4613      	mov	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	00db      	lsls	r3, r3, #3
 800bb28:	440b      	add	r3, r1
 800bb2a:	3324      	adds	r3, #36	@ 0x24
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	78fb      	ldrb	r3, [r7, #3]
 800bb30:	4619      	mov	r1, r3
 800bb32:	f7fe fd9d 	bl	800a670 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bb36:	bf00      	nop
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b082      	sub	sp, #8
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe feb1 	bl	800a8b4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bb52:	bf00      	nop
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb62:	2301      	movs	r3, #1
 800bb64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	795b      	ldrb	r3, [r3, #5]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d001      	beq.n	800bb72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bb6e:	f7f5 fdea 	bl	8001746 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bb78:	7bfa      	ldrb	r2, [r7, #15]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fe fe5b 	bl	800a838 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe fe07 	bl	800a79c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bb8e:	bf00      	nop
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
	...

0800bb98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe fe56 	bl	800a858 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	7a5b      	ldrb	r3, [r3, #9]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d005      	beq.n	800bbc0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbb4:	4b04      	ldr	r3, [pc, #16]	@ (800bbc8 <HAL_PCD_SuspendCallback+0x30>)
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	4a03      	ldr	r2, [pc, #12]	@ (800bbc8 <HAL_PCD_SuspendCallback+0x30>)
 800bbba:	f043 0306 	orr.w	r3, r3, #6
 800bbbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bbc0:	bf00      	nop
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	e000ed00 	.word	0xe000ed00

0800bbcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	7a5b      	ldrb	r3, [r3, #9]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d007      	beq.n	800bbec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbdc:	4b08      	ldr	r3, [pc, #32]	@ (800bc00 <HAL_PCD_ResumeCallback+0x34>)
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	4a07      	ldr	r2, [pc, #28]	@ (800bc00 <HAL_PCD_ResumeCallback+0x34>)
 800bbe2:	f023 0306 	bic.w	r3, r3, #6
 800bbe6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bbe8:	f000 f9f8 	bl	800bfdc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fe fe46 	bl	800a884 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	e000ed00 	.word	0xe000ed00

0800bc04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bc0c:	4a2b      	ldr	r2, [pc, #172]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a29      	ldr	r2, [pc, #164]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc18:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bc1c:	4b27      	ldr	r3, [pc, #156]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc1e:	4a28      	ldr	r2, [pc, #160]	@ (800bcc0 <USBD_LL_Init+0xbc>)
 800bc20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc22:	4b26      	ldr	r3, [pc, #152]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc24:	2208      	movs	r2, #8
 800bc26:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc28:	4b24      	ldr	r3, [pc, #144]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc2e:	4b23      	ldr	r3, [pc, #140]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc30:	2202      	movs	r2, #2
 800bc32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bc34:	4b21      	ldr	r3, [pc, #132]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc3a:	4b20      	ldr	r3, [pc, #128]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc40:	4b1e      	ldr	r3, [pc, #120]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc46:	4b1d      	ldr	r3, [pc, #116]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bc4c:	481b      	ldr	r0, [pc, #108]	@ (800bcbc <USBD_LL_Init+0xb8>)
 800bc4e:	f7f7 f994 	bl	8002f7a <HAL_PCD_Init>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d001      	beq.n	800bc5c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bc58:	f7f5 fd75 	bl	8001746 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bc62:	2318      	movs	r3, #24
 800bc64:	2200      	movs	r2, #0
 800bc66:	2100      	movs	r1, #0
 800bc68:	f7f8 fe1b 	bl	80048a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bc72:	2358      	movs	r3, #88	@ 0x58
 800bc74:	2200      	movs	r2, #0
 800bc76:	2180      	movs	r1, #128	@ 0x80
 800bc78:	f7f8 fe13 	bl	80048a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bc82:	23c0      	movs	r3, #192	@ 0xc0
 800bc84:	2200      	movs	r2, #0
 800bc86:	2181      	movs	r1, #129	@ 0x81
 800bc88:	f7f8 fe0b 	bl	80048a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bc92:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bc96:	2200      	movs	r2, #0
 800bc98:	2101      	movs	r1, #1
 800bc9a:	f7f8 fe02 	bl	80048a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bca4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2182      	movs	r1, #130	@ 0x82
 800bcac:	f7f8 fdf9 	bl	80048a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	20002788 	.word	0x20002788
 800bcc0:	40005c00 	.word	0x40005c00

0800bcc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7f7 fa1b 	bl	8003116 <HAL_PCD_Start>
 800bce0:	4603      	mov	r3, r0
 800bce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 f97e 	bl	800bfe8 <USBD_Get_USB_Status>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	4608      	mov	r0, r1
 800bd04:	4611      	mov	r1, r2
 800bd06:	461a      	mov	r2, r3
 800bd08:	4603      	mov	r3, r0
 800bd0a:	70fb      	strb	r3, [r7, #3]
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	70bb      	strb	r3, [r7, #2]
 800bd10:	4613      	mov	r3, r2
 800bd12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd14:	2300      	movs	r3, #0
 800bd16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bd22:	78bb      	ldrb	r3, [r7, #2]
 800bd24:	883a      	ldrh	r2, [r7, #0]
 800bd26:	78f9      	ldrb	r1, [r7, #3]
 800bd28:	f7f7 fb62 	bl	80033f0 <HAL_PCD_EP_Open>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 f958 	bl	800bfe8 <USBD_Get_USB_Status>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b084      	sub	sp, #16
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	460b      	mov	r3, r1
 800bd50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd60:	78fa      	ldrb	r2, [r7, #3]
 800bd62:	4611      	mov	r1, r2
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7f7 fba2 	bl	80034ae <HAL_PCD_EP_Close>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f000 f939 	bl	800bfe8 <USBD_Get_USB_Status>
 800bd76:	4603      	mov	r3, r0
 800bd78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd90:	2300      	movs	r3, #0
 800bd92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd9e:	78fa      	ldrb	r2, [r7, #3]
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7f7 fc4b 	bl	800363e <HAL_PCD_EP_SetStall>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 f91a 	bl	800bfe8 <USBD_Get_USB_Status>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b084      	sub	sp, #16
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bddc:	78fa      	ldrb	r2, [r7, #3]
 800bdde:	4611      	mov	r1, r2
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7f7 fc7e 	bl	80036e2 <HAL_PCD_EP_ClrStall>
 800bde6:	4603      	mov	r3, r0
 800bde8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 f8fb 	bl	800bfe8 <USBD_Get_USB_Status>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	da0b      	bge.n	800be34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be22:	68f9      	ldr	r1, [r7, #12]
 800be24:	4613      	mov	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	00db      	lsls	r3, r3, #3
 800be2c:	440b      	add	r3, r1
 800be2e:	3312      	adds	r3, #18
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	e00b      	b.n	800be4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be3a:	68f9      	ldr	r1, [r7, #12]
 800be3c:	4613      	mov	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	4413      	add	r3, r2
 800be42:	00db      	lsls	r3, r3, #3
 800be44:	440b      	add	r3, r1
 800be46:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800be4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	460b      	mov	r3, r1
 800be62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be64:	2300      	movs	r3, #0
 800be66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be68:	2300      	movs	r3, #0
 800be6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be72:	78fa      	ldrb	r2, [r7, #3]
 800be74:	4611      	mov	r1, r2
 800be76:	4618      	mov	r0, r3
 800be78:	f7f7 fa96 	bl	80033a8 <HAL_PCD_SetAddress>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	4618      	mov	r0, r3
 800be84:	f000 f8b0 	bl	800bfe8 <USBD_Get_USB_Status>
 800be88:	4603      	mov	r3, r0
 800be8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b086      	sub	sp, #24
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	60f8      	str	r0, [r7, #12]
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	603b      	str	r3, [r7, #0]
 800bea2:	460b      	mov	r3, r1
 800bea4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800beb4:	7af9      	ldrb	r1, [r7, #11]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	f7f7 fb89 	bl	80035d0 <HAL_PCD_EP_Transmit>
 800bebe:	4603      	mov	r3, r0
 800bec0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bec2:	7dfb      	ldrb	r3, [r7, #23]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f000 f88f 	bl	800bfe8 <USBD_Get_USB_Status>
 800beca:	4603      	mov	r3, r0
 800becc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bece:	7dbb      	ldrb	r3, [r7, #22]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3718      	adds	r7, #24
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	607a      	str	r2, [r7, #4]
 800bee2:	603b      	str	r3, [r7, #0]
 800bee4:	460b      	mov	r3, r1
 800bee6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bef6:	7af9      	ldrb	r1, [r7, #11]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	f7f7 fb1f 	bl	800353e <HAL_PCD_EP_Receive>
 800bf00:	4603      	mov	r3, r0
 800bf02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf04:	7dfb      	ldrb	r3, [r7, #23]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 f86e 	bl	800bfe8 <USBD_Get_USB_Status>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf10:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3718      	adds	r7, #24
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b082      	sub	sp, #8
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	460b      	mov	r3, r1
 800bf24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bf2c:	78fa      	ldrb	r2, [r7, #3]
 800bf2e:	4611      	mov	r1, r2
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7f7 fb35 	bl	80035a0 <HAL_PCD_EP_GetRxCount>
 800bf36:	4603      	mov	r3, r0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bf4c:	78fb      	ldrb	r3, [r7, #3]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <HAL_PCDEx_LPM_Callback+0x18>
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d013      	beq.n	800bf7e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bf56:	e023      	b.n	800bfa0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	7a5b      	ldrb	r3, [r3, #9]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d007      	beq.n	800bf70 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bf60:	f000 f83c 	bl	800bfdc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf64:	4b10      	ldr	r3, [pc, #64]	@ (800bfa8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf66:	691b      	ldr	r3, [r3, #16]
 800bf68:	4a0f      	ldr	r2, [pc, #60]	@ (800bfa8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf6a:	f023 0306 	bic.w	r3, r3, #6
 800bf6e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fe fc84 	bl	800a884 <USBD_LL_Resume>
    break;
 800bf7c:	e010      	b.n	800bfa0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fe fc67 	bl	800a858 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	7a5b      	ldrb	r3, [r3, #9]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d005      	beq.n	800bf9e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf92:	4b05      	ldr	r3, [pc, #20]	@ (800bfa8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	4a04      	ldr	r2, [pc, #16]	@ (800bfa8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf98:	f043 0306 	orr.w	r3, r3, #6
 800bf9c:	6113      	str	r3, [r2, #16]
    break;
 800bf9e:	bf00      	nop
}
 800bfa0:	bf00      	nop
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	e000ed00 	.word	0xe000ed00

0800bfac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfb4:	4b03      	ldr	r3, [pc, #12]	@ (800bfc4 <USBD_static_malloc+0x18>)
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	20000c20 	.word	0x20000c20

0800bfc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]

}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bfe0:	f7f5 fb66 	bl	80016b0 <SystemClock_Config>
}
 800bfe4:	bf00      	nop
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	4603      	mov	r3, r0
 800bff0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bff2:	2300      	movs	r3, #0
 800bff4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	d817      	bhi.n	800c02c <USBD_Get_USB_Status+0x44>
 800bffc:	a201      	add	r2, pc, #4	@ (adr r2, 800c004 <USBD_Get_USB_Status+0x1c>)
 800bffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c002:	bf00      	nop
 800c004:	0800c015 	.word	0x0800c015
 800c008:	0800c01b 	.word	0x0800c01b
 800c00c:	0800c021 	.word	0x0800c021
 800c010:	0800c027 	.word	0x0800c027
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	73fb      	strb	r3, [r7, #15]
    break;
 800c018:	e00b      	b.n	800c032 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c01a:	2303      	movs	r3, #3
 800c01c:	73fb      	strb	r3, [r7, #15]
    break;
 800c01e:	e008      	b.n	800c032 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c020:	2301      	movs	r3, #1
 800c022:	73fb      	strb	r3, [r7, #15]
    break;
 800c024:	e005      	b.n	800c032 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c026:	2303      	movs	r3, #3
 800c028:	73fb      	strb	r3, [r7, #15]
    break;
 800c02a:	e002      	b.n	800c032 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c02c:	2303      	movs	r3, #3
 800c02e:	73fb      	strb	r3, [r7, #15]
    break;
 800c030:	bf00      	nop
  }
  return usb_status;
 800c032:	7bfb      	ldrb	r3, [r7, #15]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <std>:
 800c040:	2300      	movs	r3, #0
 800c042:	b510      	push	{r4, lr}
 800c044:	4604      	mov	r4, r0
 800c046:	e9c0 3300 	strd	r3, r3, [r0]
 800c04a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c04e:	6083      	str	r3, [r0, #8]
 800c050:	8181      	strh	r1, [r0, #12]
 800c052:	6643      	str	r3, [r0, #100]	@ 0x64
 800c054:	81c2      	strh	r2, [r0, #14]
 800c056:	6183      	str	r3, [r0, #24]
 800c058:	4619      	mov	r1, r3
 800c05a:	2208      	movs	r2, #8
 800c05c:	305c      	adds	r0, #92	@ 0x5c
 800c05e:	f000 f9f9 	bl	800c454 <memset>
 800c062:	4b0d      	ldr	r3, [pc, #52]	@ (800c098 <std+0x58>)
 800c064:	6263      	str	r3, [r4, #36]	@ 0x24
 800c066:	4b0d      	ldr	r3, [pc, #52]	@ (800c09c <std+0x5c>)
 800c068:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c06a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a0 <std+0x60>)
 800c06c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c06e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a4 <std+0x64>)
 800c070:	6323      	str	r3, [r4, #48]	@ 0x30
 800c072:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a8 <std+0x68>)
 800c074:	6224      	str	r4, [r4, #32]
 800c076:	429c      	cmp	r4, r3
 800c078:	d006      	beq.n	800c088 <std+0x48>
 800c07a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c07e:	4294      	cmp	r4, r2
 800c080:	d002      	beq.n	800c088 <std+0x48>
 800c082:	33d0      	adds	r3, #208	@ 0xd0
 800c084:	429c      	cmp	r4, r3
 800c086:	d105      	bne.n	800c094 <std+0x54>
 800c088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c090:	f000 ba58 	b.w	800c544 <__retarget_lock_init_recursive>
 800c094:	bd10      	pop	{r4, pc}
 800c096:	bf00      	nop
 800c098:	0800c2a5 	.word	0x0800c2a5
 800c09c:	0800c2c7 	.word	0x0800c2c7
 800c0a0:	0800c2ff 	.word	0x0800c2ff
 800c0a4:	0800c323 	.word	0x0800c323
 800c0a8:	20000e40 	.word	0x20000e40

0800c0ac <stdio_exit_handler>:
 800c0ac:	4a02      	ldr	r2, [pc, #8]	@ (800c0b8 <stdio_exit_handler+0xc>)
 800c0ae:	4903      	ldr	r1, [pc, #12]	@ (800c0bc <stdio_exit_handler+0x10>)
 800c0b0:	4803      	ldr	r0, [pc, #12]	@ (800c0c0 <stdio_exit_handler+0x14>)
 800c0b2:	f000 b869 	b.w	800c188 <_fwalk_sglue>
 800c0b6:	bf00      	nop
 800c0b8:	20000324 	.word	0x20000324
 800c0bc:	0800ce01 	.word	0x0800ce01
 800c0c0:	20000334 	.word	0x20000334

0800c0c4 <cleanup_stdio>:
 800c0c4:	6841      	ldr	r1, [r0, #4]
 800c0c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c0f8 <cleanup_stdio+0x34>)
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	b510      	push	{r4, lr}
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	d001      	beq.n	800c0d4 <cleanup_stdio+0x10>
 800c0d0:	f000 fe96 	bl	800ce00 <_fflush_r>
 800c0d4:	68a1      	ldr	r1, [r4, #8]
 800c0d6:	4b09      	ldr	r3, [pc, #36]	@ (800c0fc <cleanup_stdio+0x38>)
 800c0d8:	4299      	cmp	r1, r3
 800c0da:	d002      	beq.n	800c0e2 <cleanup_stdio+0x1e>
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f000 fe8f 	bl	800ce00 <_fflush_r>
 800c0e2:	68e1      	ldr	r1, [r4, #12]
 800c0e4:	4b06      	ldr	r3, [pc, #24]	@ (800c100 <cleanup_stdio+0x3c>)
 800c0e6:	4299      	cmp	r1, r3
 800c0e8:	d004      	beq.n	800c0f4 <cleanup_stdio+0x30>
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0f0:	f000 be86 	b.w	800ce00 <_fflush_r>
 800c0f4:	bd10      	pop	{r4, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20000e40 	.word	0x20000e40
 800c0fc:	20000ea8 	.word	0x20000ea8
 800c100:	20000f10 	.word	0x20000f10

0800c104 <global_stdio_init.part.0>:
 800c104:	b510      	push	{r4, lr}
 800c106:	4b0b      	ldr	r3, [pc, #44]	@ (800c134 <global_stdio_init.part.0+0x30>)
 800c108:	4c0b      	ldr	r4, [pc, #44]	@ (800c138 <global_stdio_init.part.0+0x34>)
 800c10a:	4a0c      	ldr	r2, [pc, #48]	@ (800c13c <global_stdio_init.part.0+0x38>)
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	4620      	mov	r0, r4
 800c110:	2200      	movs	r2, #0
 800c112:	2104      	movs	r1, #4
 800c114:	f7ff ff94 	bl	800c040 <std>
 800c118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c11c:	2201      	movs	r2, #1
 800c11e:	2109      	movs	r1, #9
 800c120:	f7ff ff8e 	bl	800c040 <std>
 800c124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c128:	2202      	movs	r2, #2
 800c12a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c12e:	2112      	movs	r1, #18
 800c130:	f7ff bf86 	b.w	800c040 <std>
 800c134:	20000f78 	.word	0x20000f78
 800c138:	20000e40 	.word	0x20000e40
 800c13c:	0800c0ad 	.word	0x0800c0ad

0800c140 <__sfp_lock_acquire>:
 800c140:	4801      	ldr	r0, [pc, #4]	@ (800c148 <__sfp_lock_acquire+0x8>)
 800c142:	f000 ba00 	b.w	800c546 <__retarget_lock_acquire_recursive>
 800c146:	bf00      	nop
 800c148:	20000f81 	.word	0x20000f81

0800c14c <__sfp_lock_release>:
 800c14c:	4801      	ldr	r0, [pc, #4]	@ (800c154 <__sfp_lock_release+0x8>)
 800c14e:	f000 b9fb 	b.w	800c548 <__retarget_lock_release_recursive>
 800c152:	bf00      	nop
 800c154:	20000f81 	.word	0x20000f81

0800c158 <__sinit>:
 800c158:	b510      	push	{r4, lr}
 800c15a:	4604      	mov	r4, r0
 800c15c:	f7ff fff0 	bl	800c140 <__sfp_lock_acquire>
 800c160:	6a23      	ldr	r3, [r4, #32]
 800c162:	b11b      	cbz	r3, 800c16c <__sinit+0x14>
 800c164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c168:	f7ff bff0 	b.w	800c14c <__sfp_lock_release>
 800c16c:	4b04      	ldr	r3, [pc, #16]	@ (800c180 <__sinit+0x28>)
 800c16e:	6223      	str	r3, [r4, #32]
 800c170:	4b04      	ldr	r3, [pc, #16]	@ (800c184 <__sinit+0x2c>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1f5      	bne.n	800c164 <__sinit+0xc>
 800c178:	f7ff ffc4 	bl	800c104 <global_stdio_init.part.0>
 800c17c:	e7f2      	b.n	800c164 <__sinit+0xc>
 800c17e:	bf00      	nop
 800c180:	0800c0c5 	.word	0x0800c0c5
 800c184:	20000f78 	.word	0x20000f78

0800c188 <_fwalk_sglue>:
 800c188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c18c:	4607      	mov	r7, r0
 800c18e:	4688      	mov	r8, r1
 800c190:	4614      	mov	r4, r2
 800c192:	2600      	movs	r6, #0
 800c194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c198:	f1b9 0901 	subs.w	r9, r9, #1
 800c19c:	d505      	bpl.n	800c1aa <_fwalk_sglue+0x22>
 800c19e:	6824      	ldr	r4, [r4, #0]
 800c1a0:	2c00      	cmp	r4, #0
 800c1a2:	d1f7      	bne.n	800c194 <_fwalk_sglue+0xc>
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1aa:	89ab      	ldrh	r3, [r5, #12]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d907      	bls.n	800c1c0 <_fwalk_sglue+0x38>
 800c1b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	d003      	beq.n	800c1c0 <_fwalk_sglue+0x38>
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4638      	mov	r0, r7
 800c1bc:	47c0      	blx	r8
 800c1be:	4306      	orrs	r6, r0
 800c1c0:	3568      	adds	r5, #104	@ 0x68
 800c1c2:	e7e9      	b.n	800c198 <_fwalk_sglue+0x10>

0800c1c4 <iprintf>:
 800c1c4:	b40f      	push	{r0, r1, r2, r3}
 800c1c6:	b507      	push	{r0, r1, r2, lr}
 800c1c8:	4906      	ldr	r1, [pc, #24]	@ (800c1e4 <iprintf+0x20>)
 800c1ca:	ab04      	add	r3, sp, #16
 800c1cc:	6808      	ldr	r0, [r1, #0]
 800c1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1d2:	6881      	ldr	r1, [r0, #8]
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	f000 fae9 	bl	800c7ac <_vfiprintf_r>
 800c1da:	b003      	add	sp, #12
 800c1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1e0:	b004      	add	sp, #16
 800c1e2:	4770      	bx	lr
 800c1e4:	20000330 	.word	0x20000330

0800c1e8 <_puts_r>:
 800c1e8:	6a03      	ldr	r3, [r0, #32]
 800c1ea:	b570      	push	{r4, r5, r6, lr}
 800c1ec:	6884      	ldr	r4, [r0, #8]
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	460e      	mov	r6, r1
 800c1f2:	b90b      	cbnz	r3, 800c1f8 <_puts_r+0x10>
 800c1f4:	f7ff ffb0 	bl	800c158 <__sinit>
 800c1f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1fa:	07db      	lsls	r3, r3, #31
 800c1fc:	d405      	bmi.n	800c20a <_puts_r+0x22>
 800c1fe:	89a3      	ldrh	r3, [r4, #12]
 800c200:	0598      	lsls	r0, r3, #22
 800c202:	d402      	bmi.n	800c20a <_puts_r+0x22>
 800c204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c206:	f000 f99e 	bl	800c546 <__retarget_lock_acquire_recursive>
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	0719      	lsls	r1, r3, #28
 800c20e:	d502      	bpl.n	800c216 <_puts_r+0x2e>
 800c210:	6923      	ldr	r3, [r4, #16]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d135      	bne.n	800c282 <_puts_r+0x9a>
 800c216:	4621      	mov	r1, r4
 800c218:	4628      	mov	r0, r5
 800c21a:	f000 f8c5 	bl	800c3a8 <__swsetup_r>
 800c21e:	b380      	cbz	r0, 800c282 <_puts_r+0x9a>
 800c220:	f04f 35ff 	mov.w	r5, #4294967295
 800c224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c226:	07da      	lsls	r2, r3, #31
 800c228:	d405      	bmi.n	800c236 <_puts_r+0x4e>
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	059b      	lsls	r3, r3, #22
 800c22e:	d402      	bmi.n	800c236 <_puts_r+0x4e>
 800c230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c232:	f000 f989 	bl	800c548 <__retarget_lock_release_recursive>
 800c236:	4628      	mov	r0, r5
 800c238:	bd70      	pop	{r4, r5, r6, pc}
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	da04      	bge.n	800c248 <_puts_r+0x60>
 800c23e:	69a2      	ldr	r2, [r4, #24]
 800c240:	429a      	cmp	r2, r3
 800c242:	dc17      	bgt.n	800c274 <_puts_r+0x8c>
 800c244:	290a      	cmp	r1, #10
 800c246:	d015      	beq.n	800c274 <_puts_r+0x8c>
 800c248:	6823      	ldr	r3, [r4, #0]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	6022      	str	r2, [r4, #0]
 800c24e:	7019      	strb	r1, [r3, #0]
 800c250:	68a3      	ldr	r3, [r4, #8]
 800c252:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c256:	3b01      	subs	r3, #1
 800c258:	60a3      	str	r3, [r4, #8]
 800c25a:	2900      	cmp	r1, #0
 800c25c:	d1ed      	bne.n	800c23a <_puts_r+0x52>
 800c25e:	2b00      	cmp	r3, #0
 800c260:	da11      	bge.n	800c286 <_puts_r+0x9e>
 800c262:	4622      	mov	r2, r4
 800c264:	210a      	movs	r1, #10
 800c266:	4628      	mov	r0, r5
 800c268:	f000 f85f 	bl	800c32a <__swbuf_r>
 800c26c:	3001      	adds	r0, #1
 800c26e:	d0d7      	beq.n	800c220 <_puts_r+0x38>
 800c270:	250a      	movs	r5, #10
 800c272:	e7d7      	b.n	800c224 <_puts_r+0x3c>
 800c274:	4622      	mov	r2, r4
 800c276:	4628      	mov	r0, r5
 800c278:	f000 f857 	bl	800c32a <__swbuf_r>
 800c27c:	3001      	adds	r0, #1
 800c27e:	d1e7      	bne.n	800c250 <_puts_r+0x68>
 800c280:	e7ce      	b.n	800c220 <_puts_r+0x38>
 800c282:	3e01      	subs	r6, #1
 800c284:	e7e4      	b.n	800c250 <_puts_r+0x68>
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	1c5a      	adds	r2, r3, #1
 800c28a:	6022      	str	r2, [r4, #0]
 800c28c:	220a      	movs	r2, #10
 800c28e:	701a      	strb	r2, [r3, #0]
 800c290:	e7ee      	b.n	800c270 <_puts_r+0x88>
	...

0800c294 <puts>:
 800c294:	4b02      	ldr	r3, [pc, #8]	@ (800c2a0 <puts+0xc>)
 800c296:	4601      	mov	r1, r0
 800c298:	6818      	ldr	r0, [r3, #0]
 800c29a:	f7ff bfa5 	b.w	800c1e8 <_puts_r>
 800c29e:	bf00      	nop
 800c2a0:	20000330 	.word	0x20000330

0800c2a4 <__sread>:
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ac:	f000 f8fc 	bl	800c4a8 <_read_r>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	bfab      	itete	ge
 800c2b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c2b6:	89a3      	ldrhlt	r3, [r4, #12]
 800c2b8:	181b      	addge	r3, r3, r0
 800c2ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c2be:	bfac      	ite	ge
 800c2c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c2c2:	81a3      	strhlt	r3, [r4, #12]
 800c2c4:	bd10      	pop	{r4, pc}

0800c2c6 <__swrite>:
 800c2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ca:	461f      	mov	r7, r3
 800c2cc:	898b      	ldrh	r3, [r1, #12]
 800c2ce:	05db      	lsls	r3, r3, #23
 800c2d0:	4605      	mov	r5, r0
 800c2d2:	460c      	mov	r4, r1
 800c2d4:	4616      	mov	r6, r2
 800c2d6:	d505      	bpl.n	800c2e4 <__swrite+0x1e>
 800c2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2dc:	2302      	movs	r3, #2
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f000 f8d0 	bl	800c484 <_lseek_r>
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2ee:	81a3      	strh	r3, [r4, #12]
 800c2f0:	4632      	mov	r2, r6
 800c2f2:	463b      	mov	r3, r7
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2fa:	f000 b8e7 	b.w	800c4cc <_write_r>

0800c2fe <__sseek>:
 800c2fe:	b510      	push	{r4, lr}
 800c300:	460c      	mov	r4, r1
 800c302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c306:	f000 f8bd 	bl	800c484 <_lseek_r>
 800c30a:	1c43      	adds	r3, r0, #1
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	bf15      	itete	ne
 800c310:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c312:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c316:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c31a:	81a3      	strheq	r3, [r4, #12]
 800c31c:	bf18      	it	ne
 800c31e:	81a3      	strhne	r3, [r4, #12]
 800c320:	bd10      	pop	{r4, pc}

0800c322 <__sclose>:
 800c322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c326:	f000 b89d 	b.w	800c464 <_close_r>

0800c32a <__swbuf_r>:
 800c32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32c:	460e      	mov	r6, r1
 800c32e:	4614      	mov	r4, r2
 800c330:	4605      	mov	r5, r0
 800c332:	b118      	cbz	r0, 800c33c <__swbuf_r+0x12>
 800c334:	6a03      	ldr	r3, [r0, #32]
 800c336:	b90b      	cbnz	r3, 800c33c <__swbuf_r+0x12>
 800c338:	f7ff ff0e 	bl	800c158 <__sinit>
 800c33c:	69a3      	ldr	r3, [r4, #24]
 800c33e:	60a3      	str	r3, [r4, #8]
 800c340:	89a3      	ldrh	r3, [r4, #12]
 800c342:	071a      	lsls	r2, r3, #28
 800c344:	d501      	bpl.n	800c34a <__swbuf_r+0x20>
 800c346:	6923      	ldr	r3, [r4, #16]
 800c348:	b943      	cbnz	r3, 800c35c <__swbuf_r+0x32>
 800c34a:	4621      	mov	r1, r4
 800c34c:	4628      	mov	r0, r5
 800c34e:	f000 f82b 	bl	800c3a8 <__swsetup_r>
 800c352:	b118      	cbz	r0, 800c35c <__swbuf_r+0x32>
 800c354:	f04f 37ff 	mov.w	r7, #4294967295
 800c358:	4638      	mov	r0, r7
 800c35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c35c:	6823      	ldr	r3, [r4, #0]
 800c35e:	6922      	ldr	r2, [r4, #16]
 800c360:	1a98      	subs	r0, r3, r2
 800c362:	6963      	ldr	r3, [r4, #20]
 800c364:	b2f6      	uxtb	r6, r6
 800c366:	4283      	cmp	r3, r0
 800c368:	4637      	mov	r7, r6
 800c36a:	dc05      	bgt.n	800c378 <__swbuf_r+0x4e>
 800c36c:	4621      	mov	r1, r4
 800c36e:	4628      	mov	r0, r5
 800c370:	f000 fd46 	bl	800ce00 <_fflush_r>
 800c374:	2800      	cmp	r0, #0
 800c376:	d1ed      	bne.n	800c354 <__swbuf_r+0x2a>
 800c378:	68a3      	ldr	r3, [r4, #8]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	60a3      	str	r3, [r4, #8]
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	1c5a      	adds	r2, r3, #1
 800c382:	6022      	str	r2, [r4, #0]
 800c384:	701e      	strb	r6, [r3, #0]
 800c386:	6962      	ldr	r2, [r4, #20]
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d004      	beq.n	800c398 <__swbuf_r+0x6e>
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	07db      	lsls	r3, r3, #31
 800c392:	d5e1      	bpl.n	800c358 <__swbuf_r+0x2e>
 800c394:	2e0a      	cmp	r6, #10
 800c396:	d1df      	bne.n	800c358 <__swbuf_r+0x2e>
 800c398:	4621      	mov	r1, r4
 800c39a:	4628      	mov	r0, r5
 800c39c:	f000 fd30 	bl	800ce00 <_fflush_r>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d0d9      	beq.n	800c358 <__swbuf_r+0x2e>
 800c3a4:	e7d6      	b.n	800c354 <__swbuf_r+0x2a>
	...

0800c3a8 <__swsetup_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4b29      	ldr	r3, [pc, #164]	@ (800c450 <__swsetup_r+0xa8>)
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	6818      	ldr	r0, [r3, #0]
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	b118      	cbz	r0, 800c3bc <__swsetup_r+0x14>
 800c3b4:	6a03      	ldr	r3, [r0, #32]
 800c3b6:	b90b      	cbnz	r3, 800c3bc <__swsetup_r+0x14>
 800c3b8:	f7ff fece 	bl	800c158 <__sinit>
 800c3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3c0:	0719      	lsls	r1, r3, #28
 800c3c2:	d422      	bmi.n	800c40a <__swsetup_r+0x62>
 800c3c4:	06da      	lsls	r2, r3, #27
 800c3c6:	d407      	bmi.n	800c3d8 <__swsetup_r+0x30>
 800c3c8:	2209      	movs	r2, #9
 800c3ca:	602a      	str	r2, [r5, #0]
 800c3cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3d0:	81a3      	strh	r3, [r4, #12]
 800c3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d6:	e033      	b.n	800c440 <__swsetup_r+0x98>
 800c3d8:	0758      	lsls	r0, r3, #29
 800c3da:	d512      	bpl.n	800c402 <__swsetup_r+0x5a>
 800c3dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3de:	b141      	cbz	r1, 800c3f2 <__swsetup_r+0x4a>
 800c3e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3e4:	4299      	cmp	r1, r3
 800c3e6:	d002      	beq.n	800c3ee <__swsetup_r+0x46>
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	f000 f8bd 	bl	800c568 <_free_r>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c3f8:	81a3      	strh	r3, [r4, #12]
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	6063      	str	r3, [r4, #4]
 800c3fe:	6923      	ldr	r3, [r4, #16]
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	f043 0308 	orr.w	r3, r3, #8
 800c408:	81a3      	strh	r3, [r4, #12]
 800c40a:	6923      	ldr	r3, [r4, #16]
 800c40c:	b94b      	cbnz	r3, 800c422 <__swsetup_r+0x7a>
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c418:	d003      	beq.n	800c422 <__swsetup_r+0x7a>
 800c41a:	4621      	mov	r1, r4
 800c41c:	4628      	mov	r0, r5
 800c41e:	f000 fd3d 	bl	800ce9c <__smakebuf_r>
 800c422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c426:	f013 0201 	ands.w	r2, r3, #1
 800c42a:	d00a      	beq.n	800c442 <__swsetup_r+0x9a>
 800c42c:	2200      	movs	r2, #0
 800c42e:	60a2      	str	r2, [r4, #8]
 800c430:	6962      	ldr	r2, [r4, #20]
 800c432:	4252      	negs	r2, r2
 800c434:	61a2      	str	r2, [r4, #24]
 800c436:	6922      	ldr	r2, [r4, #16]
 800c438:	b942      	cbnz	r2, 800c44c <__swsetup_r+0xa4>
 800c43a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c43e:	d1c5      	bne.n	800c3cc <__swsetup_r+0x24>
 800c440:	bd38      	pop	{r3, r4, r5, pc}
 800c442:	0799      	lsls	r1, r3, #30
 800c444:	bf58      	it	pl
 800c446:	6962      	ldrpl	r2, [r4, #20]
 800c448:	60a2      	str	r2, [r4, #8]
 800c44a:	e7f4      	b.n	800c436 <__swsetup_r+0x8e>
 800c44c:	2000      	movs	r0, #0
 800c44e:	e7f7      	b.n	800c440 <__swsetup_r+0x98>
 800c450:	20000330 	.word	0x20000330

0800c454 <memset>:
 800c454:	4402      	add	r2, r0
 800c456:	4603      	mov	r3, r0
 800c458:	4293      	cmp	r3, r2
 800c45a:	d100      	bne.n	800c45e <memset+0xa>
 800c45c:	4770      	bx	lr
 800c45e:	f803 1b01 	strb.w	r1, [r3], #1
 800c462:	e7f9      	b.n	800c458 <memset+0x4>

0800c464 <_close_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4d06      	ldr	r5, [pc, #24]	@ (800c480 <_close_r+0x1c>)
 800c468:	2300      	movs	r3, #0
 800c46a:	4604      	mov	r4, r0
 800c46c:	4608      	mov	r0, r1
 800c46e:	602b      	str	r3, [r5, #0]
 800c470:	f7f5 fc1d 	bl	8001cae <_close>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_close_r+0x1a>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_close_r+0x1a>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	20000f7c 	.word	0x20000f7c

0800c484 <_lseek_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	4d07      	ldr	r5, [pc, #28]	@ (800c4a4 <_lseek_r+0x20>)
 800c488:	4604      	mov	r4, r0
 800c48a:	4608      	mov	r0, r1
 800c48c:	4611      	mov	r1, r2
 800c48e:	2200      	movs	r2, #0
 800c490:	602a      	str	r2, [r5, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	f7f5 fc32 	bl	8001cfc <_lseek>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_lseek_r+0x1e>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_lseek_r+0x1e>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	20000f7c 	.word	0x20000f7c

0800c4a8 <_read_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4d07      	ldr	r5, [pc, #28]	@ (800c4c8 <_read_r+0x20>)
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	4608      	mov	r0, r1
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	602a      	str	r2, [r5, #0]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f7f5 fbdc 	bl	8001c74 <_read>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_read_r+0x1e>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_read_r+0x1e>
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	20000f7c 	.word	0x20000f7c

0800c4cc <_write_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4d07      	ldr	r5, [pc, #28]	@ (800c4ec <_write_r+0x20>)
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	602a      	str	r2, [r5, #0]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f7f5 fdba 	bl	8002054 <_write>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	d102      	bne.n	800c4ea <_write_r+0x1e>
 800c4e4:	682b      	ldr	r3, [r5, #0]
 800c4e6:	b103      	cbz	r3, 800c4ea <_write_r+0x1e>
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
 800c4ec:	20000f7c 	.word	0x20000f7c

0800c4f0 <__errno>:
 800c4f0:	4b01      	ldr	r3, [pc, #4]	@ (800c4f8 <__errno+0x8>)
 800c4f2:	6818      	ldr	r0, [r3, #0]
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	20000330 	.word	0x20000330

0800c4fc <__libc_init_array>:
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	4d0d      	ldr	r5, [pc, #52]	@ (800c534 <__libc_init_array+0x38>)
 800c500:	4c0d      	ldr	r4, [pc, #52]	@ (800c538 <__libc_init_array+0x3c>)
 800c502:	1b64      	subs	r4, r4, r5
 800c504:	10a4      	asrs	r4, r4, #2
 800c506:	2600      	movs	r6, #0
 800c508:	42a6      	cmp	r6, r4
 800c50a:	d109      	bne.n	800c520 <__libc_init_array+0x24>
 800c50c:	4d0b      	ldr	r5, [pc, #44]	@ (800c53c <__libc_init_array+0x40>)
 800c50e:	4c0c      	ldr	r4, [pc, #48]	@ (800c540 <__libc_init_array+0x44>)
 800c510:	f000 fd32 	bl	800cf78 <_init>
 800c514:	1b64      	subs	r4, r4, r5
 800c516:	10a4      	asrs	r4, r4, #2
 800c518:	2600      	movs	r6, #0
 800c51a:	42a6      	cmp	r6, r4
 800c51c:	d105      	bne.n	800c52a <__libc_init_array+0x2e>
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	f855 3b04 	ldr.w	r3, [r5], #4
 800c524:	4798      	blx	r3
 800c526:	3601      	adds	r6, #1
 800c528:	e7ee      	b.n	800c508 <__libc_init_array+0xc>
 800c52a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c52e:	4798      	blx	r3
 800c530:	3601      	adds	r6, #1
 800c532:	e7f2      	b.n	800c51a <__libc_init_array+0x1e>
 800c534:	0800d288 	.word	0x0800d288
 800c538:	0800d288 	.word	0x0800d288
 800c53c:	0800d288 	.word	0x0800d288
 800c540:	0800d28c 	.word	0x0800d28c

0800c544 <__retarget_lock_init_recursive>:
 800c544:	4770      	bx	lr

0800c546 <__retarget_lock_acquire_recursive>:
 800c546:	4770      	bx	lr

0800c548 <__retarget_lock_release_recursive>:
 800c548:	4770      	bx	lr

0800c54a <memcpy>:
 800c54a:	440a      	add	r2, r1
 800c54c:	4291      	cmp	r1, r2
 800c54e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c552:	d100      	bne.n	800c556 <memcpy+0xc>
 800c554:	4770      	bx	lr
 800c556:	b510      	push	{r4, lr}
 800c558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c55c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c560:	4291      	cmp	r1, r2
 800c562:	d1f9      	bne.n	800c558 <memcpy+0xe>
 800c564:	bd10      	pop	{r4, pc}
	...

0800c568 <_free_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4605      	mov	r5, r0
 800c56c:	2900      	cmp	r1, #0
 800c56e:	d041      	beq.n	800c5f4 <_free_r+0x8c>
 800c570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c574:	1f0c      	subs	r4, r1, #4
 800c576:	2b00      	cmp	r3, #0
 800c578:	bfb8      	it	lt
 800c57a:	18e4      	addlt	r4, r4, r3
 800c57c:	f000 f8e0 	bl	800c740 <__malloc_lock>
 800c580:	4a1d      	ldr	r2, [pc, #116]	@ (800c5f8 <_free_r+0x90>)
 800c582:	6813      	ldr	r3, [r2, #0]
 800c584:	b933      	cbnz	r3, 800c594 <_free_r+0x2c>
 800c586:	6063      	str	r3, [r4, #4]
 800c588:	6014      	str	r4, [r2, #0]
 800c58a:	4628      	mov	r0, r5
 800c58c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c590:	f000 b8dc 	b.w	800c74c <__malloc_unlock>
 800c594:	42a3      	cmp	r3, r4
 800c596:	d908      	bls.n	800c5aa <_free_r+0x42>
 800c598:	6820      	ldr	r0, [r4, #0]
 800c59a:	1821      	adds	r1, r4, r0
 800c59c:	428b      	cmp	r3, r1
 800c59e:	bf01      	itttt	eq
 800c5a0:	6819      	ldreq	r1, [r3, #0]
 800c5a2:	685b      	ldreq	r3, [r3, #4]
 800c5a4:	1809      	addeq	r1, r1, r0
 800c5a6:	6021      	streq	r1, [r4, #0]
 800c5a8:	e7ed      	b.n	800c586 <_free_r+0x1e>
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	b10b      	cbz	r3, 800c5b4 <_free_r+0x4c>
 800c5b0:	42a3      	cmp	r3, r4
 800c5b2:	d9fa      	bls.n	800c5aa <_free_r+0x42>
 800c5b4:	6811      	ldr	r1, [r2, #0]
 800c5b6:	1850      	adds	r0, r2, r1
 800c5b8:	42a0      	cmp	r0, r4
 800c5ba:	d10b      	bne.n	800c5d4 <_free_r+0x6c>
 800c5bc:	6820      	ldr	r0, [r4, #0]
 800c5be:	4401      	add	r1, r0
 800c5c0:	1850      	adds	r0, r2, r1
 800c5c2:	4283      	cmp	r3, r0
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	d1e0      	bne.n	800c58a <_free_r+0x22>
 800c5c8:	6818      	ldr	r0, [r3, #0]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	6053      	str	r3, [r2, #4]
 800c5ce:	4408      	add	r0, r1
 800c5d0:	6010      	str	r0, [r2, #0]
 800c5d2:	e7da      	b.n	800c58a <_free_r+0x22>
 800c5d4:	d902      	bls.n	800c5dc <_free_r+0x74>
 800c5d6:	230c      	movs	r3, #12
 800c5d8:	602b      	str	r3, [r5, #0]
 800c5da:	e7d6      	b.n	800c58a <_free_r+0x22>
 800c5dc:	6820      	ldr	r0, [r4, #0]
 800c5de:	1821      	adds	r1, r4, r0
 800c5e0:	428b      	cmp	r3, r1
 800c5e2:	bf04      	itt	eq
 800c5e4:	6819      	ldreq	r1, [r3, #0]
 800c5e6:	685b      	ldreq	r3, [r3, #4]
 800c5e8:	6063      	str	r3, [r4, #4]
 800c5ea:	bf04      	itt	eq
 800c5ec:	1809      	addeq	r1, r1, r0
 800c5ee:	6021      	streq	r1, [r4, #0]
 800c5f0:	6054      	str	r4, [r2, #4]
 800c5f2:	e7ca      	b.n	800c58a <_free_r+0x22>
 800c5f4:	bd38      	pop	{r3, r4, r5, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20000f88 	.word	0x20000f88

0800c5fc <sbrk_aligned>:
 800c5fc:	b570      	push	{r4, r5, r6, lr}
 800c5fe:	4e0f      	ldr	r6, [pc, #60]	@ (800c63c <sbrk_aligned+0x40>)
 800c600:	460c      	mov	r4, r1
 800c602:	6831      	ldr	r1, [r6, #0]
 800c604:	4605      	mov	r5, r0
 800c606:	b911      	cbnz	r1, 800c60e <sbrk_aligned+0x12>
 800c608:	f000 fca6 	bl	800cf58 <_sbrk_r>
 800c60c:	6030      	str	r0, [r6, #0]
 800c60e:	4621      	mov	r1, r4
 800c610:	4628      	mov	r0, r5
 800c612:	f000 fca1 	bl	800cf58 <_sbrk_r>
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	d103      	bne.n	800c622 <sbrk_aligned+0x26>
 800c61a:	f04f 34ff 	mov.w	r4, #4294967295
 800c61e:	4620      	mov	r0, r4
 800c620:	bd70      	pop	{r4, r5, r6, pc}
 800c622:	1cc4      	adds	r4, r0, #3
 800c624:	f024 0403 	bic.w	r4, r4, #3
 800c628:	42a0      	cmp	r0, r4
 800c62a:	d0f8      	beq.n	800c61e <sbrk_aligned+0x22>
 800c62c:	1a21      	subs	r1, r4, r0
 800c62e:	4628      	mov	r0, r5
 800c630:	f000 fc92 	bl	800cf58 <_sbrk_r>
 800c634:	3001      	adds	r0, #1
 800c636:	d1f2      	bne.n	800c61e <sbrk_aligned+0x22>
 800c638:	e7ef      	b.n	800c61a <sbrk_aligned+0x1e>
 800c63a:	bf00      	nop
 800c63c:	20000f84 	.word	0x20000f84

0800c640 <_malloc_r>:
 800c640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c644:	1ccd      	adds	r5, r1, #3
 800c646:	f025 0503 	bic.w	r5, r5, #3
 800c64a:	3508      	adds	r5, #8
 800c64c:	2d0c      	cmp	r5, #12
 800c64e:	bf38      	it	cc
 800c650:	250c      	movcc	r5, #12
 800c652:	2d00      	cmp	r5, #0
 800c654:	4606      	mov	r6, r0
 800c656:	db01      	blt.n	800c65c <_malloc_r+0x1c>
 800c658:	42a9      	cmp	r1, r5
 800c65a:	d904      	bls.n	800c666 <_malloc_r+0x26>
 800c65c:	230c      	movs	r3, #12
 800c65e:	6033      	str	r3, [r6, #0]
 800c660:	2000      	movs	r0, #0
 800c662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c73c <_malloc_r+0xfc>
 800c66a:	f000 f869 	bl	800c740 <__malloc_lock>
 800c66e:	f8d8 3000 	ldr.w	r3, [r8]
 800c672:	461c      	mov	r4, r3
 800c674:	bb44      	cbnz	r4, 800c6c8 <_malloc_r+0x88>
 800c676:	4629      	mov	r1, r5
 800c678:	4630      	mov	r0, r6
 800c67a:	f7ff ffbf 	bl	800c5fc <sbrk_aligned>
 800c67e:	1c43      	adds	r3, r0, #1
 800c680:	4604      	mov	r4, r0
 800c682:	d158      	bne.n	800c736 <_malloc_r+0xf6>
 800c684:	f8d8 4000 	ldr.w	r4, [r8]
 800c688:	4627      	mov	r7, r4
 800c68a:	2f00      	cmp	r7, #0
 800c68c:	d143      	bne.n	800c716 <_malloc_r+0xd6>
 800c68e:	2c00      	cmp	r4, #0
 800c690:	d04b      	beq.n	800c72a <_malloc_r+0xea>
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	4639      	mov	r1, r7
 800c696:	4630      	mov	r0, r6
 800c698:	eb04 0903 	add.w	r9, r4, r3
 800c69c:	f000 fc5c 	bl	800cf58 <_sbrk_r>
 800c6a0:	4581      	cmp	r9, r0
 800c6a2:	d142      	bne.n	800c72a <_malloc_r+0xea>
 800c6a4:	6821      	ldr	r1, [r4, #0]
 800c6a6:	1a6d      	subs	r5, r5, r1
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f7ff ffa6 	bl	800c5fc <sbrk_aligned>
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	d03a      	beq.n	800c72a <_malloc_r+0xea>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	442b      	add	r3, r5
 800c6b8:	6023      	str	r3, [r4, #0]
 800c6ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c6be:	685a      	ldr	r2, [r3, #4]
 800c6c0:	bb62      	cbnz	r2, 800c71c <_malloc_r+0xdc>
 800c6c2:	f8c8 7000 	str.w	r7, [r8]
 800c6c6:	e00f      	b.n	800c6e8 <_malloc_r+0xa8>
 800c6c8:	6822      	ldr	r2, [r4, #0]
 800c6ca:	1b52      	subs	r2, r2, r5
 800c6cc:	d420      	bmi.n	800c710 <_malloc_r+0xd0>
 800c6ce:	2a0b      	cmp	r2, #11
 800c6d0:	d917      	bls.n	800c702 <_malloc_r+0xc2>
 800c6d2:	1961      	adds	r1, r4, r5
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	6025      	str	r5, [r4, #0]
 800c6d8:	bf18      	it	ne
 800c6da:	6059      	strne	r1, [r3, #4]
 800c6dc:	6863      	ldr	r3, [r4, #4]
 800c6de:	bf08      	it	eq
 800c6e0:	f8c8 1000 	streq.w	r1, [r8]
 800c6e4:	5162      	str	r2, [r4, r5]
 800c6e6:	604b      	str	r3, [r1, #4]
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f000 f82f 	bl	800c74c <__malloc_unlock>
 800c6ee:	f104 000b 	add.w	r0, r4, #11
 800c6f2:	1d23      	adds	r3, r4, #4
 800c6f4:	f020 0007 	bic.w	r0, r0, #7
 800c6f8:	1ac2      	subs	r2, r0, r3
 800c6fa:	bf1c      	itt	ne
 800c6fc:	1a1b      	subne	r3, r3, r0
 800c6fe:	50a3      	strne	r3, [r4, r2]
 800c700:	e7af      	b.n	800c662 <_malloc_r+0x22>
 800c702:	6862      	ldr	r2, [r4, #4]
 800c704:	42a3      	cmp	r3, r4
 800c706:	bf0c      	ite	eq
 800c708:	f8c8 2000 	streq.w	r2, [r8]
 800c70c:	605a      	strne	r2, [r3, #4]
 800c70e:	e7eb      	b.n	800c6e8 <_malloc_r+0xa8>
 800c710:	4623      	mov	r3, r4
 800c712:	6864      	ldr	r4, [r4, #4]
 800c714:	e7ae      	b.n	800c674 <_malloc_r+0x34>
 800c716:	463c      	mov	r4, r7
 800c718:	687f      	ldr	r7, [r7, #4]
 800c71a:	e7b6      	b.n	800c68a <_malloc_r+0x4a>
 800c71c:	461a      	mov	r2, r3
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	42a3      	cmp	r3, r4
 800c722:	d1fb      	bne.n	800c71c <_malloc_r+0xdc>
 800c724:	2300      	movs	r3, #0
 800c726:	6053      	str	r3, [r2, #4]
 800c728:	e7de      	b.n	800c6e8 <_malloc_r+0xa8>
 800c72a:	230c      	movs	r3, #12
 800c72c:	6033      	str	r3, [r6, #0]
 800c72e:	4630      	mov	r0, r6
 800c730:	f000 f80c 	bl	800c74c <__malloc_unlock>
 800c734:	e794      	b.n	800c660 <_malloc_r+0x20>
 800c736:	6005      	str	r5, [r0, #0]
 800c738:	e7d6      	b.n	800c6e8 <_malloc_r+0xa8>
 800c73a:	bf00      	nop
 800c73c:	20000f88 	.word	0x20000f88

0800c740 <__malloc_lock>:
 800c740:	4801      	ldr	r0, [pc, #4]	@ (800c748 <__malloc_lock+0x8>)
 800c742:	f7ff bf00 	b.w	800c546 <__retarget_lock_acquire_recursive>
 800c746:	bf00      	nop
 800c748:	20000f80 	.word	0x20000f80

0800c74c <__malloc_unlock>:
 800c74c:	4801      	ldr	r0, [pc, #4]	@ (800c754 <__malloc_unlock+0x8>)
 800c74e:	f7ff befb 	b.w	800c548 <__retarget_lock_release_recursive>
 800c752:	bf00      	nop
 800c754:	20000f80 	.word	0x20000f80

0800c758 <__sfputc_r>:
 800c758:	6893      	ldr	r3, [r2, #8]
 800c75a:	3b01      	subs	r3, #1
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	b410      	push	{r4}
 800c760:	6093      	str	r3, [r2, #8]
 800c762:	da08      	bge.n	800c776 <__sfputc_r+0x1e>
 800c764:	6994      	ldr	r4, [r2, #24]
 800c766:	42a3      	cmp	r3, r4
 800c768:	db01      	blt.n	800c76e <__sfputc_r+0x16>
 800c76a:	290a      	cmp	r1, #10
 800c76c:	d103      	bne.n	800c776 <__sfputc_r+0x1e>
 800c76e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c772:	f7ff bdda 	b.w	800c32a <__swbuf_r>
 800c776:	6813      	ldr	r3, [r2, #0]
 800c778:	1c58      	adds	r0, r3, #1
 800c77a:	6010      	str	r0, [r2, #0]
 800c77c:	7019      	strb	r1, [r3, #0]
 800c77e:	4608      	mov	r0, r1
 800c780:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <__sfputs_r>:
 800c786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c788:	4606      	mov	r6, r0
 800c78a:	460f      	mov	r7, r1
 800c78c:	4614      	mov	r4, r2
 800c78e:	18d5      	adds	r5, r2, r3
 800c790:	42ac      	cmp	r4, r5
 800c792:	d101      	bne.n	800c798 <__sfputs_r+0x12>
 800c794:	2000      	movs	r0, #0
 800c796:	e007      	b.n	800c7a8 <__sfputs_r+0x22>
 800c798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c79c:	463a      	mov	r2, r7
 800c79e:	4630      	mov	r0, r6
 800c7a0:	f7ff ffda 	bl	800c758 <__sfputc_r>
 800c7a4:	1c43      	adds	r3, r0, #1
 800c7a6:	d1f3      	bne.n	800c790 <__sfputs_r+0xa>
 800c7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7ac <_vfiprintf_r>:
 800c7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b0:	460d      	mov	r5, r1
 800c7b2:	b09d      	sub	sp, #116	@ 0x74
 800c7b4:	4614      	mov	r4, r2
 800c7b6:	4698      	mov	r8, r3
 800c7b8:	4606      	mov	r6, r0
 800c7ba:	b118      	cbz	r0, 800c7c4 <_vfiprintf_r+0x18>
 800c7bc:	6a03      	ldr	r3, [r0, #32]
 800c7be:	b90b      	cbnz	r3, 800c7c4 <_vfiprintf_r+0x18>
 800c7c0:	f7ff fcca 	bl	800c158 <__sinit>
 800c7c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7c6:	07d9      	lsls	r1, r3, #31
 800c7c8:	d405      	bmi.n	800c7d6 <_vfiprintf_r+0x2a>
 800c7ca:	89ab      	ldrh	r3, [r5, #12]
 800c7cc:	059a      	lsls	r2, r3, #22
 800c7ce:	d402      	bmi.n	800c7d6 <_vfiprintf_r+0x2a>
 800c7d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7d2:	f7ff feb8 	bl	800c546 <__retarget_lock_acquire_recursive>
 800c7d6:	89ab      	ldrh	r3, [r5, #12]
 800c7d8:	071b      	lsls	r3, r3, #28
 800c7da:	d501      	bpl.n	800c7e0 <_vfiprintf_r+0x34>
 800c7dc:	692b      	ldr	r3, [r5, #16]
 800c7de:	b99b      	cbnz	r3, 800c808 <_vfiprintf_r+0x5c>
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7ff fde0 	bl	800c3a8 <__swsetup_r>
 800c7e8:	b170      	cbz	r0, 800c808 <_vfiprintf_r+0x5c>
 800c7ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7ec:	07dc      	lsls	r4, r3, #31
 800c7ee:	d504      	bpl.n	800c7fa <_vfiprintf_r+0x4e>
 800c7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f4:	b01d      	add	sp, #116	@ 0x74
 800c7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fa:	89ab      	ldrh	r3, [r5, #12]
 800c7fc:	0598      	lsls	r0, r3, #22
 800c7fe:	d4f7      	bmi.n	800c7f0 <_vfiprintf_r+0x44>
 800c800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c802:	f7ff fea1 	bl	800c548 <__retarget_lock_release_recursive>
 800c806:	e7f3      	b.n	800c7f0 <_vfiprintf_r+0x44>
 800c808:	2300      	movs	r3, #0
 800c80a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c80c:	2320      	movs	r3, #32
 800c80e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c812:	f8cd 800c 	str.w	r8, [sp, #12]
 800c816:	2330      	movs	r3, #48	@ 0x30
 800c818:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c9c8 <_vfiprintf_r+0x21c>
 800c81c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c820:	f04f 0901 	mov.w	r9, #1
 800c824:	4623      	mov	r3, r4
 800c826:	469a      	mov	sl, r3
 800c828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c82c:	b10a      	cbz	r2, 800c832 <_vfiprintf_r+0x86>
 800c82e:	2a25      	cmp	r2, #37	@ 0x25
 800c830:	d1f9      	bne.n	800c826 <_vfiprintf_r+0x7a>
 800c832:	ebba 0b04 	subs.w	fp, sl, r4
 800c836:	d00b      	beq.n	800c850 <_vfiprintf_r+0xa4>
 800c838:	465b      	mov	r3, fp
 800c83a:	4622      	mov	r2, r4
 800c83c:	4629      	mov	r1, r5
 800c83e:	4630      	mov	r0, r6
 800c840:	f7ff ffa1 	bl	800c786 <__sfputs_r>
 800c844:	3001      	adds	r0, #1
 800c846:	f000 80a7 	beq.w	800c998 <_vfiprintf_r+0x1ec>
 800c84a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c84c:	445a      	add	r2, fp
 800c84e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c850:	f89a 3000 	ldrb.w	r3, [sl]
 800c854:	2b00      	cmp	r3, #0
 800c856:	f000 809f 	beq.w	800c998 <_vfiprintf_r+0x1ec>
 800c85a:	2300      	movs	r3, #0
 800c85c:	f04f 32ff 	mov.w	r2, #4294967295
 800c860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c864:	f10a 0a01 	add.w	sl, sl, #1
 800c868:	9304      	str	r3, [sp, #16]
 800c86a:	9307      	str	r3, [sp, #28]
 800c86c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c870:	931a      	str	r3, [sp, #104]	@ 0x68
 800c872:	4654      	mov	r4, sl
 800c874:	2205      	movs	r2, #5
 800c876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c87a:	4853      	ldr	r0, [pc, #332]	@ (800c9c8 <_vfiprintf_r+0x21c>)
 800c87c:	f7f3 fcd0 	bl	8000220 <memchr>
 800c880:	9a04      	ldr	r2, [sp, #16]
 800c882:	b9d8      	cbnz	r0, 800c8bc <_vfiprintf_r+0x110>
 800c884:	06d1      	lsls	r1, r2, #27
 800c886:	bf44      	itt	mi
 800c888:	2320      	movmi	r3, #32
 800c88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c88e:	0713      	lsls	r3, r2, #28
 800c890:	bf44      	itt	mi
 800c892:	232b      	movmi	r3, #43	@ 0x2b
 800c894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c898:	f89a 3000 	ldrb.w	r3, [sl]
 800c89c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c89e:	d015      	beq.n	800c8cc <_vfiprintf_r+0x120>
 800c8a0:	9a07      	ldr	r2, [sp, #28]
 800c8a2:	4654      	mov	r4, sl
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	f04f 0c0a 	mov.w	ip, #10
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8b0:	3b30      	subs	r3, #48	@ 0x30
 800c8b2:	2b09      	cmp	r3, #9
 800c8b4:	d94b      	bls.n	800c94e <_vfiprintf_r+0x1a2>
 800c8b6:	b1b0      	cbz	r0, 800c8e6 <_vfiprintf_r+0x13a>
 800c8b8:	9207      	str	r2, [sp, #28]
 800c8ba:	e014      	b.n	800c8e6 <_vfiprintf_r+0x13a>
 800c8bc:	eba0 0308 	sub.w	r3, r0, r8
 800c8c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	46a2      	mov	sl, r4
 800c8ca:	e7d2      	b.n	800c872 <_vfiprintf_r+0xc6>
 800c8cc:	9b03      	ldr	r3, [sp, #12]
 800c8ce:	1d19      	adds	r1, r3, #4
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	9103      	str	r1, [sp, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	bfbb      	ittet	lt
 800c8d8:	425b      	neglt	r3, r3
 800c8da:	f042 0202 	orrlt.w	r2, r2, #2
 800c8de:	9307      	strge	r3, [sp, #28]
 800c8e0:	9307      	strlt	r3, [sp, #28]
 800c8e2:	bfb8      	it	lt
 800c8e4:	9204      	strlt	r2, [sp, #16]
 800c8e6:	7823      	ldrb	r3, [r4, #0]
 800c8e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8ea:	d10a      	bne.n	800c902 <_vfiprintf_r+0x156>
 800c8ec:	7863      	ldrb	r3, [r4, #1]
 800c8ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8f0:	d132      	bne.n	800c958 <_vfiprintf_r+0x1ac>
 800c8f2:	9b03      	ldr	r3, [sp, #12]
 800c8f4:	1d1a      	adds	r2, r3, #4
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	9203      	str	r2, [sp, #12]
 800c8fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8fe:	3402      	adds	r4, #2
 800c900:	9305      	str	r3, [sp, #20]
 800c902:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c9d8 <_vfiprintf_r+0x22c>
 800c906:	7821      	ldrb	r1, [r4, #0]
 800c908:	2203      	movs	r2, #3
 800c90a:	4650      	mov	r0, sl
 800c90c:	f7f3 fc88 	bl	8000220 <memchr>
 800c910:	b138      	cbz	r0, 800c922 <_vfiprintf_r+0x176>
 800c912:	9b04      	ldr	r3, [sp, #16]
 800c914:	eba0 000a 	sub.w	r0, r0, sl
 800c918:	2240      	movs	r2, #64	@ 0x40
 800c91a:	4082      	lsls	r2, r0
 800c91c:	4313      	orrs	r3, r2
 800c91e:	3401      	adds	r4, #1
 800c920:	9304      	str	r3, [sp, #16]
 800c922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c926:	4829      	ldr	r0, [pc, #164]	@ (800c9cc <_vfiprintf_r+0x220>)
 800c928:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c92c:	2206      	movs	r2, #6
 800c92e:	f7f3 fc77 	bl	8000220 <memchr>
 800c932:	2800      	cmp	r0, #0
 800c934:	d03f      	beq.n	800c9b6 <_vfiprintf_r+0x20a>
 800c936:	4b26      	ldr	r3, [pc, #152]	@ (800c9d0 <_vfiprintf_r+0x224>)
 800c938:	bb1b      	cbnz	r3, 800c982 <_vfiprintf_r+0x1d6>
 800c93a:	9b03      	ldr	r3, [sp, #12]
 800c93c:	3307      	adds	r3, #7
 800c93e:	f023 0307 	bic.w	r3, r3, #7
 800c942:	3308      	adds	r3, #8
 800c944:	9303      	str	r3, [sp, #12]
 800c946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c948:	443b      	add	r3, r7
 800c94a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c94c:	e76a      	b.n	800c824 <_vfiprintf_r+0x78>
 800c94e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c952:	460c      	mov	r4, r1
 800c954:	2001      	movs	r0, #1
 800c956:	e7a8      	b.n	800c8aa <_vfiprintf_r+0xfe>
 800c958:	2300      	movs	r3, #0
 800c95a:	3401      	adds	r4, #1
 800c95c:	9305      	str	r3, [sp, #20]
 800c95e:	4619      	mov	r1, r3
 800c960:	f04f 0c0a 	mov.w	ip, #10
 800c964:	4620      	mov	r0, r4
 800c966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c96a:	3a30      	subs	r2, #48	@ 0x30
 800c96c:	2a09      	cmp	r2, #9
 800c96e:	d903      	bls.n	800c978 <_vfiprintf_r+0x1cc>
 800c970:	2b00      	cmp	r3, #0
 800c972:	d0c6      	beq.n	800c902 <_vfiprintf_r+0x156>
 800c974:	9105      	str	r1, [sp, #20]
 800c976:	e7c4      	b.n	800c902 <_vfiprintf_r+0x156>
 800c978:	fb0c 2101 	mla	r1, ip, r1, r2
 800c97c:	4604      	mov	r4, r0
 800c97e:	2301      	movs	r3, #1
 800c980:	e7f0      	b.n	800c964 <_vfiprintf_r+0x1b8>
 800c982:	ab03      	add	r3, sp, #12
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	462a      	mov	r2, r5
 800c988:	4b12      	ldr	r3, [pc, #72]	@ (800c9d4 <_vfiprintf_r+0x228>)
 800c98a:	a904      	add	r1, sp, #16
 800c98c:	4630      	mov	r0, r6
 800c98e:	f3af 8000 	nop.w
 800c992:	4607      	mov	r7, r0
 800c994:	1c78      	adds	r0, r7, #1
 800c996:	d1d6      	bne.n	800c946 <_vfiprintf_r+0x19a>
 800c998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c99a:	07d9      	lsls	r1, r3, #31
 800c99c:	d405      	bmi.n	800c9aa <_vfiprintf_r+0x1fe>
 800c99e:	89ab      	ldrh	r3, [r5, #12]
 800c9a0:	059a      	lsls	r2, r3, #22
 800c9a2:	d402      	bmi.n	800c9aa <_vfiprintf_r+0x1fe>
 800c9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9a6:	f7ff fdcf 	bl	800c548 <__retarget_lock_release_recursive>
 800c9aa:	89ab      	ldrh	r3, [r5, #12]
 800c9ac:	065b      	lsls	r3, r3, #25
 800c9ae:	f53f af1f 	bmi.w	800c7f0 <_vfiprintf_r+0x44>
 800c9b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9b4:	e71e      	b.n	800c7f4 <_vfiprintf_r+0x48>
 800c9b6:	ab03      	add	r3, sp, #12
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	462a      	mov	r2, r5
 800c9bc:	4b05      	ldr	r3, [pc, #20]	@ (800c9d4 <_vfiprintf_r+0x228>)
 800c9be:	a904      	add	r1, sp, #16
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f000 f879 	bl	800cab8 <_printf_i>
 800c9c6:	e7e4      	b.n	800c992 <_vfiprintf_r+0x1e6>
 800c9c8:	0800d24c 	.word	0x0800d24c
 800c9cc:	0800d256 	.word	0x0800d256
 800c9d0:	00000000 	.word	0x00000000
 800c9d4:	0800c787 	.word	0x0800c787
 800c9d8:	0800d252 	.word	0x0800d252

0800c9dc <_printf_common>:
 800c9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e0:	4616      	mov	r6, r2
 800c9e2:	4698      	mov	r8, r3
 800c9e4:	688a      	ldr	r2, [r1, #8]
 800c9e6:	690b      	ldr	r3, [r1, #16]
 800c9e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	bfb8      	it	lt
 800c9f0:	4613      	movlt	r3, r2
 800c9f2:	6033      	str	r3, [r6, #0]
 800c9f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c9f8:	4607      	mov	r7, r0
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	b10a      	cbz	r2, 800ca02 <_printf_common+0x26>
 800c9fe:	3301      	adds	r3, #1
 800ca00:	6033      	str	r3, [r6, #0]
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	0699      	lsls	r1, r3, #26
 800ca06:	bf42      	ittt	mi
 800ca08:	6833      	ldrmi	r3, [r6, #0]
 800ca0a:	3302      	addmi	r3, #2
 800ca0c:	6033      	strmi	r3, [r6, #0]
 800ca0e:	6825      	ldr	r5, [r4, #0]
 800ca10:	f015 0506 	ands.w	r5, r5, #6
 800ca14:	d106      	bne.n	800ca24 <_printf_common+0x48>
 800ca16:	f104 0a19 	add.w	sl, r4, #25
 800ca1a:	68e3      	ldr	r3, [r4, #12]
 800ca1c:	6832      	ldr	r2, [r6, #0]
 800ca1e:	1a9b      	subs	r3, r3, r2
 800ca20:	42ab      	cmp	r3, r5
 800ca22:	dc26      	bgt.n	800ca72 <_printf_common+0x96>
 800ca24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca28:	6822      	ldr	r2, [r4, #0]
 800ca2a:	3b00      	subs	r3, #0
 800ca2c:	bf18      	it	ne
 800ca2e:	2301      	movne	r3, #1
 800ca30:	0692      	lsls	r2, r2, #26
 800ca32:	d42b      	bmi.n	800ca8c <_printf_common+0xb0>
 800ca34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca38:	4641      	mov	r1, r8
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	47c8      	blx	r9
 800ca3e:	3001      	adds	r0, #1
 800ca40:	d01e      	beq.n	800ca80 <_printf_common+0xa4>
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	6922      	ldr	r2, [r4, #16]
 800ca46:	f003 0306 	and.w	r3, r3, #6
 800ca4a:	2b04      	cmp	r3, #4
 800ca4c:	bf02      	ittt	eq
 800ca4e:	68e5      	ldreq	r5, [r4, #12]
 800ca50:	6833      	ldreq	r3, [r6, #0]
 800ca52:	1aed      	subeq	r5, r5, r3
 800ca54:	68a3      	ldr	r3, [r4, #8]
 800ca56:	bf0c      	ite	eq
 800ca58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca5c:	2500      	movne	r5, #0
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	bfc4      	itt	gt
 800ca62:	1a9b      	subgt	r3, r3, r2
 800ca64:	18ed      	addgt	r5, r5, r3
 800ca66:	2600      	movs	r6, #0
 800ca68:	341a      	adds	r4, #26
 800ca6a:	42b5      	cmp	r5, r6
 800ca6c:	d11a      	bne.n	800caa4 <_printf_common+0xc8>
 800ca6e:	2000      	movs	r0, #0
 800ca70:	e008      	b.n	800ca84 <_printf_common+0xa8>
 800ca72:	2301      	movs	r3, #1
 800ca74:	4652      	mov	r2, sl
 800ca76:	4641      	mov	r1, r8
 800ca78:	4638      	mov	r0, r7
 800ca7a:	47c8      	blx	r9
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d103      	bne.n	800ca88 <_printf_common+0xac>
 800ca80:	f04f 30ff 	mov.w	r0, #4294967295
 800ca84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca88:	3501      	adds	r5, #1
 800ca8a:	e7c6      	b.n	800ca1a <_printf_common+0x3e>
 800ca8c:	18e1      	adds	r1, r4, r3
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	2030      	movs	r0, #48	@ 0x30
 800ca92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca96:	4422      	add	r2, r4
 800ca98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800caa0:	3302      	adds	r3, #2
 800caa2:	e7c7      	b.n	800ca34 <_printf_common+0x58>
 800caa4:	2301      	movs	r3, #1
 800caa6:	4622      	mov	r2, r4
 800caa8:	4641      	mov	r1, r8
 800caaa:	4638      	mov	r0, r7
 800caac:	47c8      	blx	r9
 800caae:	3001      	adds	r0, #1
 800cab0:	d0e6      	beq.n	800ca80 <_printf_common+0xa4>
 800cab2:	3601      	adds	r6, #1
 800cab4:	e7d9      	b.n	800ca6a <_printf_common+0x8e>
	...

0800cab8 <_printf_i>:
 800cab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cabc:	7e0f      	ldrb	r7, [r1, #24]
 800cabe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cac0:	2f78      	cmp	r7, #120	@ 0x78
 800cac2:	4691      	mov	r9, r2
 800cac4:	4680      	mov	r8, r0
 800cac6:	460c      	mov	r4, r1
 800cac8:	469a      	mov	sl, r3
 800caca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cace:	d807      	bhi.n	800cae0 <_printf_i+0x28>
 800cad0:	2f62      	cmp	r7, #98	@ 0x62
 800cad2:	d80a      	bhi.n	800caea <_printf_i+0x32>
 800cad4:	2f00      	cmp	r7, #0
 800cad6:	f000 80d2 	beq.w	800cc7e <_printf_i+0x1c6>
 800cada:	2f58      	cmp	r7, #88	@ 0x58
 800cadc:	f000 80b9 	beq.w	800cc52 <_printf_i+0x19a>
 800cae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cae4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cae8:	e03a      	b.n	800cb60 <_printf_i+0xa8>
 800caea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800caee:	2b15      	cmp	r3, #21
 800caf0:	d8f6      	bhi.n	800cae0 <_printf_i+0x28>
 800caf2:	a101      	add	r1, pc, #4	@ (adr r1, 800caf8 <_printf_i+0x40>)
 800caf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caf8:	0800cb51 	.word	0x0800cb51
 800cafc:	0800cb65 	.word	0x0800cb65
 800cb00:	0800cae1 	.word	0x0800cae1
 800cb04:	0800cae1 	.word	0x0800cae1
 800cb08:	0800cae1 	.word	0x0800cae1
 800cb0c:	0800cae1 	.word	0x0800cae1
 800cb10:	0800cb65 	.word	0x0800cb65
 800cb14:	0800cae1 	.word	0x0800cae1
 800cb18:	0800cae1 	.word	0x0800cae1
 800cb1c:	0800cae1 	.word	0x0800cae1
 800cb20:	0800cae1 	.word	0x0800cae1
 800cb24:	0800cc65 	.word	0x0800cc65
 800cb28:	0800cb8f 	.word	0x0800cb8f
 800cb2c:	0800cc1f 	.word	0x0800cc1f
 800cb30:	0800cae1 	.word	0x0800cae1
 800cb34:	0800cae1 	.word	0x0800cae1
 800cb38:	0800cc87 	.word	0x0800cc87
 800cb3c:	0800cae1 	.word	0x0800cae1
 800cb40:	0800cb8f 	.word	0x0800cb8f
 800cb44:	0800cae1 	.word	0x0800cae1
 800cb48:	0800cae1 	.word	0x0800cae1
 800cb4c:	0800cc27 	.word	0x0800cc27
 800cb50:	6833      	ldr	r3, [r6, #0]
 800cb52:	1d1a      	adds	r2, r3, #4
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6032      	str	r2, [r6, #0]
 800cb58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb60:	2301      	movs	r3, #1
 800cb62:	e09d      	b.n	800cca0 <_printf_i+0x1e8>
 800cb64:	6833      	ldr	r3, [r6, #0]
 800cb66:	6820      	ldr	r0, [r4, #0]
 800cb68:	1d19      	adds	r1, r3, #4
 800cb6a:	6031      	str	r1, [r6, #0]
 800cb6c:	0606      	lsls	r6, r0, #24
 800cb6e:	d501      	bpl.n	800cb74 <_printf_i+0xbc>
 800cb70:	681d      	ldr	r5, [r3, #0]
 800cb72:	e003      	b.n	800cb7c <_printf_i+0xc4>
 800cb74:	0645      	lsls	r5, r0, #25
 800cb76:	d5fb      	bpl.n	800cb70 <_printf_i+0xb8>
 800cb78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb7c:	2d00      	cmp	r5, #0
 800cb7e:	da03      	bge.n	800cb88 <_printf_i+0xd0>
 800cb80:	232d      	movs	r3, #45	@ 0x2d
 800cb82:	426d      	negs	r5, r5
 800cb84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb88:	4859      	ldr	r0, [pc, #356]	@ (800ccf0 <_printf_i+0x238>)
 800cb8a:	230a      	movs	r3, #10
 800cb8c:	e011      	b.n	800cbb2 <_printf_i+0xfa>
 800cb8e:	6821      	ldr	r1, [r4, #0]
 800cb90:	6833      	ldr	r3, [r6, #0]
 800cb92:	0608      	lsls	r0, r1, #24
 800cb94:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb98:	d402      	bmi.n	800cba0 <_printf_i+0xe8>
 800cb9a:	0649      	lsls	r1, r1, #25
 800cb9c:	bf48      	it	mi
 800cb9e:	b2ad      	uxthmi	r5, r5
 800cba0:	2f6f      	cmp	r7, #111	@ 0x6f
 800cba2:	4853      	ldr	r0, [pc, #332]	@ (800ccf0 <_printf_i+0x238>)
 800cba4:	6033      	str	r3, [r6, #0]
 800cba6:	bf14      	ite	ne
 800cba8:	230a      	movne	r3, #10
 800cbaa:	2308      	moveq	r3, #8
 800cbac:	2100      	movs	r1, #0
 800cbae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbb2:	6866      	ldr	r6, [r4, #4]
 800cbb4:	60a6      	str	r6, [r4, #8]
 800cbb6:	2e00      	cmp	r6, #0
 800cbb8:	bfa2      	ittt	ge
 800cbba:	6821      	ldrge	r1, [r4, #0]
 800cbbc:	f021 0104 	bicge.w	r1, r1, #4
 800cbc0:	6021      	strge	r1, [r4, #0]
 800cbc2:	b90d      	cbnz	r5, 800cbc8 <_printf_i+0x110>
 800cbc4:	2e00      	cmp	r6, #0
 800cbc6:	d04b      	beq.n	800cc60 <_printf_i+0x1a8>
 800cbc8:	4616      	mov	r6, r2
 800cbca:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbce:	fb03 5711 	mls	r7, r3, r1, r5
 800cbd2:	5dc7      	ldrb	r7, [r0, r7]
 800cbd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cbd8:	462f      	mov	r7, r5
 800cbda:	42bb      	cmp	r3, r7
 800cbdc:	460d      	mov	r5, r1
 800cbde:	d9f4      	bls.n	800cbca <_printf_i+0x112>
 800cbe0:	2b08      	cmp	r3, #8
 800cbe2:	d10b      	bne.n	800cbfc <_printf_i+0x144>
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	07df      	lsls	r7, r3, #31
 800cbe8:	d508      	bpl.n	800cbfc <_printf_i+0x144>
 800cbea:	6923      	ldr	r3, [r4, #16]
 800cbec:	6861      	ldr	r1, [r4, #4]
 800cbee:	4299      	cmp	r1, r3
 800cbf0:	bfde      	ittt	le
 800cbf2:	2330      	movle	r3, #48	@ 0x30
 800cbf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cbf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cbfc:	1b92      	subs	r2, r2, r6
 800cbfe:	6122      	str	r2, [r4, #16]
 800cc00:	f8cd a000 	str.w	sl, [sp]
 800cc04:	464b      	mov	r3, r9
 800cc06:	aa03      	add	r2, sp, #12
 800cc08:	4621      	mov	r1, r4
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	f7ff fee6 	bl	800c9dc <_printf_common>
 800cc10:	3001      	adds	r0, #1
 800cc12:	d14a      	bne.n	800ccaa <_printf_i+0x1f2>
 800cc14:	f04f 30ff 	mov.w	r0, #4294967295
 800cc18:	b004      	add	sp, #16
 800cc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc1e:	6823      	ldr	r3, [r4, #0]
 800cc20:	f043 0320 	orr.w	r3, r3, #32
 800cc24:	6023      	str	r3, [r4, #0]
 800cc26:	4833      	ldr	r0, [pc, #204]	@ (800ccf4 <_printf_i+0x23c>)
 800cc28:	2778      	movs	r7, #120	@ 0x78
 800cc2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	6831      	ldr	r1, [r6, #0]
 800cc32:	061f      	lsls	r7, r3, #24
 800cc34:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc38:	d402      	bmi.n	800cc40 <_printf_i+0x188>
 800cc3a:	065f      	lsls	r7, r3, #25
 800cc3c:	bf48      	it	mi
 800cc3e:	b2ad      	uxthmi	r5, r5
 800cc40:	6031      	str	r1, [r6, #0]
 800cc42:	07d9      	lsls	r1, r3, #31
 800cc44:	bf44      	itt	mi
 800cc46:	f043 0320 	orrmi.w	r3, r3, #32
 800cc4a:	6023      	strmi	r3, [r4, #0]
 800cc4c:	b11d      	cbz	r5, 800cc56 <_printf_i+0x19e>
 800cc4e:	2310      	movs	r3, #16
 800cc50:	e7ac      	b.n	800cbac <_printf_i+0xf4>
 800cc52:	4827      	ldr	r0, [pc, #156]	@ (800ccf0 <_printf_i+0x238>)
 800cc54:	e7e9      	b.n	800cc2a <_printf_i+0x172>
 800cc56:	6823      	ldr	r3, [r4, #0]
 800cc58:	f023 0320 	bic.w	r3, r3, #32
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	e7f6      	b.n	800cc4e <_printf_i+0x196>
 800cc60:	4616      	mov	r6, r2
 800cc62:	e7bd      	b.n	800cbe0 <_printf_i+0x128>
 800cc64:	6833      	ldr	r3, [r6, #0]
 800cc66:	6825      	ldr	r5, [r4, #0]
 800cc68:	6961      	ldr	r1, [r4, #20]
 800cc6a:	1d18      	adds	r0, r3, #4
 800cc6c:	6030      	str	r0, [r6, #0]
 800cc6e:	062e      	lsls	r6, r5, #24
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	d501      	bpl.n	800cc78 <_printf_i+0x1c0>
 800cc74:	6019      	str	r1, [r3, #0]
 800cc76:	e002      	b.n	800cc7e <_printf_i+0x1c6>
 800cc78:	0668      	lsls	r0, r5, #25
 800cc7a:	d5fb      	bpl.n	800cc74 <_printf_i+0x1bc>
 800cc7c:	8019      	strh	r1, [r3, #0]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	6123      	str	r3, [r4, #16]
 800cc82:	4616      	mov	r6, r2
 800cc84:	e7bc      	b.n	800cc00 <_printf_i+0x148>
 800cc86:	6833      	ldr	r3, [r6, #0]
 800cc88:	1d1a      	adds	r2, r3, #4
 800cc8a:	6032      	str	r2, [r6, #0]
 800cc8c:	681e      	ldr	r6, [r3, #0]
 800cc8e:	6862      	ldr	r2, [r4, #4]
 800cc90:	2100      	movs	r1, #0
 800cc92:	4630      	mov	r0, r6
 800cc94:	f7f3 fac4 	bl	8000220 <memchr>
 800cc98:	b108      	cbz	r0, 800cc9e <_printf_i+0x1e6>
 800cc9a:	1b80      	subs	r0, r0, r6
 800cc9c:	6060      	str	r0, [r4, #4]
 800cc9e:	6863      	ldr	r3, [r4, #4]
 800cca0:	6123      	str	r3, [r4, #16]
 800cca2:	2300      	movs	r3, #0
 800cca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cca8:	e7aa      	b.n	800cc00 <_printf_i+0x148>
 800ccaa:	6923      	ldr	r3, [r4, #16]
 800ccac:	4632      	mov	r2, r6
 800ccae:	4649      	mov	r1, r9
 800ccb0:	4640      	mov	r0, r8
 800ccb2:	47d0      	blx	sl
 800ccb4:	3001      	adds	r0, #1
 800ccb6:	d0ad      	beq.n	800cc14 <_printf_i+0x15c>
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	079b      	lsls	r3, r3, #30
 800ccbc:	d413      	bmi.n	800cce6 <_printf_i+0x22e>
 800ccbe:	68e0      	ldr	r0, [r4, #12]
 800ccc0:	9b03      	ldr	r3, [sp, #12]
 800ccc2:	4298      	cmp	r0, r3
 800ccc4:	bfb8      	it	lt
 800ccc6:	4618      	movlt	r0, r3
 800ccc8:	e7a6      	b.n	800cc18 <_printf_i+0x160>
 800ccca:	2301      	movs	r3, #1
 800cccc:	4632      	mov	r2, r6
 800ccce:	4649      	mov	r1, r9
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	47d0      	blx	sl
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	d09d      	beq.n	800cc14 <_printf_i+0x15c>
 800ccd8:	3501      	adds	r5, #1
 800ccda:	68e3      	ldr	r3, [r4, #12]
 800ccdc:	9903      	ldr	r1, [sp, #12]
 800ccde:	1a5b      	subs	r3, r3, r1
 800cce0:	42ab      	cmp	r3, r5
 800cce2:	dcf2      	bgt.n	800ccca <_printf_i+0x212>
 800cce4:	e7eb      	b.n	800ccbe <_printf_i+0x206>
 800cce6:	2500      	movs	r5, #0
 800cce8:	f104 0619 	add.w	r6, r4, #25
 800ccec:	e7f5      	b.n	800ccda <_printf_i+0x222>
 800ccee:	bf00      	nop
 800ccf0:	0800d25d 	.word	0x0800d25d
 800ccf4:	0800d26e 	.word	0x0800d26e

0800ccf8 <__sflush_r>:
 800ccf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd00:	0716      	lsls	r6, r2, #28
 800cd02:	4605      	mov	r5, r0
 800cd04:	460c      	mov	r4, r1
 800cd06:	d454      	bmi.n	800cdb2 <__sflush_r+0xba>
 800cd08:	684b      	ldr	r3, [r1, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	dc02      	bgt.n	800cd14 <__sflush_r+0x1c>
 800cd0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	dd48      	ble.n	800cda6 <__sflush_r+0xae>
 800cd14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd16:	2e00      	cmp	r6, #0
 800cd18:	d045      	beq.n	800cda6 <__sflush_r+0xae>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd20:	682f      	ldr	r7, [r5, #0]
 800cd22:	6a21      	ldr	r1, [r4, #32]
 800cd24:	602b      	str	r3, [r5, #0]
 800cd26:	d030      	beq.n	800cd8a <__sflush_r+0x92>
 800cd28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd2a:	89a3      	ldrh	r3, [r4, #12]
 800cd2c:	0759      	lsls	r1, r3, #29
 800cd2e:	d505      	bpl.n	800cd3c <__sflush_r+0x44>
 800cd30:	6863      	ldr	r3, [r4, #4]
 800cd32:	1ad2      	subs	r2, r2, r3
 800cd34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd36:	b10b      	cbz	r3, 800cd3c <__sflush_r+0x44>
 800cd38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd3a:	1ad2      	subs	r2, r2, r3
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd40:	6a21      	ldr	r1, [r4, #32]
 800cd42:	4628      	mov	r0, r5
 800cd44:	47b0      	blx	r6
 800cd46:	1c43      	adds	r3, r0, #1
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	d106      	bne.n	800cd5a <__sflush_r+0x62>
 800cd4c:	6829      	ldr	r1, [r5, #0]
 800cd4e:	291d      	cmp	r1, #29
 800cd50:	d82b      	bhi.n	800cdaa <__sflush_r+0xb2>
 800cd52:	4a2a      	ldr	r2, [pc, #168]	@ (800cdfc <__sflush_r+0x104>)
 800cd54:	410a      	asrs	r2, r1
 800cd56:	07d6      	lsls	r6, r2, #31
 800cd58:	d427      	bmi.n	800cdaa <__sflush_r+0xb2>
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	6062      	str	r2, [r4, #4]
 800cd5e:	04d9      	lsls	r1, r3, #19
 800cd60:	6922      	ldr	r2, [r4, #16]
 800cd62:	6022      	str	r2, [r4, #0]
 800cd64:	d504      	bpl.n	800cd70 <__sflush_r+0x78>
 800cd66:	1c42      	adds	r2, r0, #1
 800cd68:	d101      	bne.n	800cd6e <__sflush_r+0x76>
 800cd6a:	682b      	ldr	r3, [r5, #0]
 800cd6c:	b903      	cbnz	r3, 800cd70 <__sflush_r+0x78>
 800cd6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd72:	602f      	str	r7, [r5, #0]
 800cd74:	b1b9      	cbz	r1, 800cda6 <__sflush_r+0xae>
 800cd76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd7a:	4299      	cmp	r1, r3
 800cd7c:	d002      	beq.n	800cd84 <__sflush_r+0x8c>
 800cd7e:	4628      	mov	r0, r5
 800cd80:	f7ff fbf2 	bl	800c568 <_free_r>
 800cd84:	2300      	movs	r3, #0
 800cd86:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd88:	e00d      	b.n	800cda6 <__sflush_r+0xae>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	47b0      	blx	r6
 800cd90:	4602      	mov	r2, r0
 800cd92:	1c50      	adds	r0, r2, #1
 800cd94:	d1c9      	bne.n	800cd2a <__sflush_r+0x32>
 800cd96:	682b      	ldr	r3, [r5, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d0c6      	beq.n	800cd2a <__sflush_r+0x32>
 800cd9c:	2b1d      	cmp	r3, #29
 800cd9e:	d001      	beq.n	800cda4 <__sflush_r+0xac>
 800cda0:	2b16      	cmp	r3, #22
 800cda2:	d11e      	bne.n	800cde2 <__sflush_r+0xea>
 800cda4:	602f      	str	r7, [r5, #0]
 800cda6:	2000      	movs	r0, #0
 800cda8:	e022      	b.n	800cdf0 <__sflush_r+0xf8>
 800cdaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdae:	b21b      	sxth	r3, r3
 800cdb0:	e01b      	b.n	800cdea <__sflush_r+0xf2>
 800cdb2:	690f      	ldr	r7, [r1, #16]
 800cdb4:	2f00      	cmp	r7, #0
 800cdb6:	d0f6      	beq.n	800cda6 <__sflush_r+0xae>
 800cdb8:	0793      	lsls	r3, r2, #30
 800cdba:	680e      	ldr	r6, [r1, #0]
 800cdbc:	bf08      	it	eq
 800cdbe:	694b      	ldreq	r3, [r1, #20]
 800cdc0:	600f      	str	r7, [r1, #0]
 800cdc2:	bf18      	it	ne
 800cdc4:	2300      	movne	r3, #0
 800cdc6:	eba6 0807 	sub.w	r8, r6, r7
 800cdca:	608b      	str	r3, [r1, #8]
 800cdcc:	f1b8 0f00 	cmp.w	r8, #0
 800cdd0:	dde9      	ble.n	800cda6 <__sflush_r+0xae>
 800cdd2:	6a21      	ldr	r1, [r4, #32]
 800cdd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cdd6:	4643      	mov	r3, r8
 800cdd8:	463a      	mov	r2, r7
 800cdda:	4628      	mov	r0, r5
 800cddc:	47b0      	blx	r6
 800cdde:	2800      	cmp	r0, #0
 800cde0:	dc08      	bgt.n	800cdf4 <__sflush_r+0xfc>
 800cde2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cde6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdea:	81a3      	strh	r3, [r4, #12]
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf4:	4407      	add	r7, r0
 800cdf6:	eba8 0800 	sub.w	r8, r8, r0
 800cdfa:	e7e7      	b.n	800cdcc <__sflush_r+0xd4>
 800cdfc:	dfbffffe 	.word	0xdfbffffe

0800ce00 <_fflush_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	690b      	ldr	r3, [r1, #16]
 800ce04:	4605      	mov	r5, r0
 800ce06:	460c      	mov	r4, r1
 800ce08:	b913      	cbnz	r3, 800ce10 <_fflush_r+0x10>
 800ce0a:	2500      	movs	r5, #0
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	b118      	cbz	r0, 800ce1a <_fflush_r+0x1a>
 800ce12:	6a03      	ldr	r3, [r0, #32]
 800ce14:	b90b      	cbnz	r3, 800ce1a <_fflush_r+0x1a>
 800ce16:	f7ff f99f 	bl	800c158 <__sinit>
 800ce1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d0f3      	beq.n	800ce0a <_fflush_r+0xa>
 800ce22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce24:	07d0      	lsls	r0, r2, #31
 800ce26:	d404      	bmi.n	800ce32 <_fflush_r+0x32>
 800ce28:	0599      	lsls	r1, r3, #22
 800ce2a:	d402      	bmi.n	800ce32 <_fflush_r+0x32>
 800ce2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce2e:	f7ff fb8a 	bl	800c546 <__retarget_lock_acquire_recursive>
 800ce32:	4628      	mov	r0, r5
 800ce34:	4621      	mov	r1, r4
 800ce36:	f7ff ff5f 	bl	800ccf8 <__sflush_r>
 800ce3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce3c:	07da      	lsls	r2, r3, #31
 800ce3e:	4605      	mov	r5, r0
 800ce40:	d4e4      	bmi.n	800ce0c <_fflush_r+0xc>
 800ce42:	89a3      	ldrh	r3, [r4, #12]
 800ce44:	059b      	lsls	r3, r3, #22
 800ce46:	d4e1      	bmi.n	800ce0c <_fflush_r+0xc>
 800ce48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce4a:	f7ff fb7d 	bl	800c548 <__retarget_lock_release_recursive>
 800ce4e:	e7dd      	b.n	800ce0c <_fflush_r+0xc>

0800ce50 <__swhatbuf_r>:
 800ce50:	b570      	push	{r4, r5, r6, lr}
 800ce52:	460c      	mov	r4, r1
 800ce54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce58:	2900      	cmp	r1, #0
 800ce5a:	b096      	sub	sp, #88	@ 0x58
 800ce5c:	4615      	mov	r5, r2
 800ce5e:	461e      	mov	r6, r3
 800ce60:	da0d      	bge.n	800ce7e <__swhatbuf_r+0x2e>
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce68:	f04f 0100 	mov.w	r1, #0
 800ce6c:	bf14      	ite	ne
 800ce6e:	2340      	movne	r3, #64	@ 0x40
 800ce70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce74:	2000      	movs	r0, #0
 800ce76:	6031      	str	r1, [r6, #0]
 800ce78:	602b      	str	r3, [r5, #0]
 800ce7a:	b016      	add	sp, #88	@ 0x58
 800ce7c:	bd70      	pop	{r4, r5, r6, pc}
 800ce7e:	466a      	mov	r2, sp
 800ce80:	f000 f848 	bl	800cf14 <_fstat_r>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	dbec      	blt.n	800ce62 <__swhatbuf_r+0x12>
 800ce88:	9901      	ldr	r1, [sp, #4]
 800ce8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce92:	4259      	negs	r1, r3
 800ce94:	4159      	adcs	r1, r3
 800ce96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce9a:	e7eb      	b.n	800ce74 <__swhatbuf_r+0x24>

0800ce9c <__smakebuf_r>:
 800ce9c:	898b      	ldrh	r3, [r1, #12]
 800ce9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cea0:	079d      	lsls	r5, r3, #30
 800cea2:	4606      	mov	r6, r0
 800cea4:	460c      	mov	r4, r1
 800cea6:	d507      	bpl.n	800ceb8 <__smakebuf_r+0x1c>
 800cea8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	6123      	str	r3, [r4, #16]
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	6163      	str	r3, [r4, #20]
 800ceb4:	b003      	add	sp, #12
 800ceb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceb8:	ab01      	add	r3, sp, #4
 800ceba:	466a      	mov	r2, sp
 800cebc:	f7ff ffc8 	bl	800ce50 <__swhatbuf_r>
 800cec0:	9f00      	ldr	r7, [sp, #0]
 800cec2:	4605      	mov	r5, r0
 800cec4:	4639      	mov	r1, r7
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff fbba 	bl	800c640 <_malloc_r>
 800cecc:	b948      	cbnz	r0, 800cee2 <__smakebuf_r+0x46>
 800cece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ced2:	059a      	lsls	r2, r3, #22
 800ced4:	d4ee      	bmi.n	800ceb4 <__smakebuf_r+0x18>
 800ced6:	f023 0303 	bic.w	r3, r3, #3
 800ceda:	f043 0302 	orr.w	r3, r3, #2
 800cede:	81a3      	strh	r3, [r4, #12]
 800cee0:	e7e2      	b.n	800cea8 <__smakebuf_r+0xc>
 800cee2:	89a3      	ldrh	r3, [r4, #12]
 800cee4:	6020      	str	r0, [r4, #0]
 800cee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceea:	81a3      	strh	r3, [r4, #12]
 800ceec:	9b01      	ldr	r3, [sp, #4]
 800ceee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cef2:	b15b      	cbz	r3, 800cf0c <__smakebuf_r+0x70>
 800cef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cef8:	4630      	mov	r0, r6
 800cefa:	f000 f81d 	bl	800cf38 <_isatty_r>
 800cefe:	b128      	cbz	r0, 800cf0c <__smakebuf_r+0x70>
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	f023 0303 	bic.w	r3, r3, #3
 800cf06:	f043 0301 	orr.w	r3, r3, #1
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	89a3      	ldrh	r3, [r4, #12]
 800cf0e:	431d      	orrs	r5, r3
 800cf10:	81a5      	strh	r5, [r4, #12]
 800cf12:	e7cf      	b.n	800ceb4 <__smakebuf_r+0x18>

0800cf14 <_fstat_r>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4d07      	ldr	r5, [pc, #28]	@ (800cf34 <_fstat_r+0x20>)
 800cf18:	2300      	movs	r3, #0
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	4608      	mov	r0, r1
 800cf1e:	4611      	mov	r1, r2
 800cf20:	602b      	str	r3, [r5, #0]
 800cf22:	f7f4 fed0 	bl	8001cc6 <_fstat>
 800cf26:	1c43      	adds	r3, r0, #1
 800cf28:	d102      	bne.n	800cf30 <_fstat_r+0x1c>
 800cf2a:	682b      	ldr	r3, [r5, #0]
 800cf2c:	b103      	cbz	r3, 800cf30 <_fstat_r+0x1c>
 800cf2e:	6023      	str	r3, [r4, #0]
 800cf30:	bd38      	pop	{r3, r4, r5, pc}
 800cf32:	bf00      	nop
 800cf34:	20000f7c 	.word	0x20000f7c

0800cf38 <_isatty_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4d06      	ldr	r5, [pc, #24]	@ (800cf54 <_isatty_r+0x1c>)
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	4604      	mov	r4, r0
 800cf40:	4608      	mov	r0, r1
 800cf42:	602b      	str	r3, [r5, #0]
 800cf44:	f7f4 fecf 	bl	8001ce6 <_isatty>
 800cf48:	1c43      	adds	r3, r0, #1
 800cf4a:	d102      	bne.n	800cf52 <_isatty_r+0x1a>
 800cf4c:	682b      	ldr	r3, [r5, #0]
 800cf4e:	b103      	cbz	r3, 800cf52 <_isatty_r+0x1a>
 800cf50:	6023      	str	r3, [r4, #0]
 800cf52:	bd38      	pop	{r3, r4, r5, pc}
 800cf54:	20000f7c 	.word	0x20000f7c

0800cf58 <_sbrk_r>:
 800cf58:	b538      	push	{r3, r4, r5, lr}
 800cf5a:	4d06      	ldr	r5, [pc, #24]	@ (800cf74 <_sbrk_r+0x1c>)
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	4604      	mov	r4, r0
 800cf60:	4608      	mov	r0, r1
 800cf62:	602b      	str	r3, [r5, #0]
 800cf64:	f7f4 fed8 	bl	8001d18 <_sbrk>
 800cf68:	1c43      	adds	r3, r0, #1
 800cf6a:	d102      	bne.n	800cf72 <_sbrk_r+0x1a>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	b103      	cbz	r3, 800cf72 <_sbrk_r+0x1a>
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	bd38      	pop	{r3, r4, r5, pc}
 800cf74:	20000f7c 	.word	0x20000f7c

0800cf78 <_init>:
 800cf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf7a:	bf00      	nop
 800cf7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf7e:	bc08      	pop	{r3}
 800cf80:	469e      	mov	lr, r3
 800cf82:	4770      	bx	lr

0800cf84 <_fini>:
 800cf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf86:	bf00      	nop
 800cf88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf8a:	bc08      	pop	{r3}
 800cf8c:	469e      	mov	lr, r3
 800cf8e:	4770      	bx	lr
