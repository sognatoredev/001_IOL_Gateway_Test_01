
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c75c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800c93c  0800c93c  0000d93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbb8  0800cbb8  0000e278  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbb8  0800cbb8  0000dbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbc0  0800cbc0  0000e278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbc0  0800cbc0  0000dbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cbc4  0800cbc4  0000dbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800cbc8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d00  20000278  0800ce40  0000e278  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f78  0800ce40  0000ef78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe7f  00000000  00000000  0000e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dc2  00000000  00000000  0002e127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00032ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ca  00000000  00000000  000348d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007001  00000000  00000000  00035ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002291a  00000000  00000000  0003cca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cde49  00000000  00000000  0005f5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072b0  00000000  00000000  0012d44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001346fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000278 	.word	0x20000278
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c924 	.word	0x0800c924

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000027c 	.word	0x2000027c
 800021c:	0800c924 	.word	0x0800c924

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_DMA_Init+0x50>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <MX_DMA_Init+0x50>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_DMA_Init+0x50>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_DMA_Init+0x50>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f001 fc5d 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f001 fc74 	bl	8001ede <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b43      	ldr	r3, [pc, #268]	@ (8000728 <MX_GPIO_Init+0x124>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a42      	ldr	r2, [pc, #264]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b40      	ldr	r3, [pc, #256]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b3d      	ldr	r3, [pc, #244]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a3c      	ldr	r2, [pc, #240]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b3a      	ldr	r3, [pc, #232]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <MX_GPIO_Init+0x124>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a36      	ldr	r2, [pc, #216]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b34      	ldr	r3, [pc, #208]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	4a30      	ldr	r2, [pc, #192]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066e:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000680:	482a      	ldr	r0, [pc, #168]	@ (800072c <MX_GPIO_Init+0x128>)
 8000682:	f002 f8fb 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2140      	movs	r1, #64	@ 0x40
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f002 f8f5 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2101      	movs	r1, #1
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <MX_GPIO_Init+0x12c>)
 8000698:	f002 f8f0 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800069c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	481d      	ldr	r0, [pc, #116]	@ (800072c <MX_GPIO_Init+0x128>)
 80006b6:	f001 ff5f 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006ba:	23a0      	movs	r3, #160	@ 0xa0
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d2:	f001 ff51 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006d6:	2340      	movs	r3, #64	@ 0x40
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f001 ff42 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f4:	2301      	movs	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_GPIO_Init+0x12c>)
 800070c:	f001 ff34 	bl	8002578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2017      	movs	r0, #23
 8000716:	f001 fbc8 	bl	8001eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800071a:	2017      	movs	r0, #23
 800071c:	f001 fbdf 	bl	8001ede <HAL_NVIC_EnableIRQ>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	48000800 	.word	0x48000800
 8000730:	48000400 	.word	0x48000400

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f001 fa49 	bl	8001bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f838 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f7ff ff60 	bl	8000604 <MX_GPIO_Init>
  MX_DMA_Init();
 8000744:	f7ff ff34 	bl	80005b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000748:	f000 fc2e 	bl	8000fa8 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 800074c:	f00a fc2c 	bl	800afa8 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000750:	f000 fbb0 	bl	8000eb4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8000754:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000758:	490f      	ldr	r1, [pc, #60]	@ (8000798 <main+0x64>)
 800075a:	4810      	ldr	r0, [pc, #64]	@ (800079c <main+0x68>)
 800075c:	f000 f879 	bl	8000852 <Q_Init>

  HAL_Delay(3000);
 8000760:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000764:	f001 faa4 	bl	8001cb0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <main+0x6c>)
 800076a:	f004 fe07 	bl	800537c <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 800076e:	f000 fd51 	bl	8001214 <GetClockSourcePrint>
  BootMessagePrint();
 8000772:	f000 fd1f 	bl	80011b4 <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000776:	2264      	movs	r2, #100	@ 0x64
 8000778:	490a      	ldr	r1, [pc, #40]	@ (80007a4 <main+0x70>)
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <main+0x74>)
 800077c:	f007 f898 	bl	80078b0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <main+0x78>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <main+0x78>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0204 	bic.w	r2, r2, #4
 800078e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 8000790:	f000 fcfa 	bl	8001188 <User_Toggle_Led>
 8000794:	e7fc      	b.n	8000790 <main+0x5c>
 8000796:	bf00      	nop
 8000798:	200007e0 	.word	0x200007e0
 800079c:	200003e8 	.word	0x200003e8
 80007a0:	2000029c 	.word	0x2000029c
 80007a4:	20000bcc 	.word	0x20000bcc
 80007a8:	200002e8 	.word	0x200002e8
 80007ac:	2000037c 	.word	0x2000037c

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	@ 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	2238      	movs	r2, #56	@ 0x38
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f00b fb1e 	bl	800be00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f003 fda8 	bl	8004328 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007d8:	2321      	movs	r3, #33	@ 0x21
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007ee:	2306      	movs	r3, #6
 80007f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007f2:	2355      	movs	r3, #85	@ 0x55
 80007f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fe42 	bl	8004490 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000812:	f000 f818 	bl	8000846 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2104      	movs	r1, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f004 f940 	bl	8004ab4 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800083a:	f000 f804 	bl	8000846 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084a:	b672      	cpsid	i
}
 800084c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <Error_Handler+0x8>

08000852 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	4613      	mov	r3, r2
 800085e:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2200      	movs	r2, #0
 8000864:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2200      	movs	r2, #0
 800086a:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2200      	movs	r2, #0
 8000870:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2200      	movs	r2, #0
 8000876:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	60da      	str	r2, [r3, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	4613      	mov	r3, r2
 800089c:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 800089e:	2300      	movs	r3, #0
 80008a0:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f000 f8ea 	bl	8000a7c <Q_NumEmptyBytes>
 80008a8:	4603      	mov	r3, r0
 80008aa:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	db44      	blt.n	800093e <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	4413      	add	r3, r2
 80008c0:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	8afa      	ldrh	r2, [r7, #22]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d20b      	bcs.n	80008e4 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008d6:	4413      	add	r3, r2
 80008d8:	88fa      	ldrh	r2, [r7, #6]
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	4618      	mov	r0, r3
 80008de:	f00b fb0a 	bl	800bef6 <memcpy>
 80008e2:	e01d      	b.n	8000920 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	881a      	ldrh	r2, [r3, #0]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008fe:	4413      	add	r3, r2
 8000900:	8aba      	ldrh	r2, [r7, #20]
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	4618      	mov	r0, r3
 8000906:	f00b faf6 	bl	800bef6 <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	68d8      	ldr	r0, [r3, #12]
 800090e:	8abb      	ldrh	r3, [r7, #20]
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	18d1      	adds	r1, r2, r3
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	8abb      	ldrh	r3, [r7, #20]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	461a      	mov	r2, r3
 800091c:	f00b faeb 	bl	800bef6 <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	881a      	ldrh	r2, [r3, #0]
 8000924:	8afb      	ldrh	r3, [r7, #22]
 8000926:	fbb3 f1f2 	udiv	r1, r3, r2
 800092a:	fb01 f202 	mul.w	r2, r1, r2
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	b21a      	sxth	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8000938:	2301      	movs	r3, #1
 800093a:	77fb      	strb	r3, [r7, #31]
 800093c:	e00e      	b.n	800095c <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	88db      	ldrh	r3, [r3, #6]
 8000942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000946:	4293      	cmp	r3, r2
 8000948:	d004      	beq.n	8000954 <Q_Write+0xc4>
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	88db      	ldrh	r3, [r3, #6]
 800094e:	3301      	adds	r3, #1
 8000950:	b29a      	uxth	r2, r3
 8000952:	e001      	b.n	8000958 <Q_Write+0xc8>
 8000954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	80da      	strh	r2, [r3, #6]
    return ret;    
 800095c:	7ffb      	ldrb	r3, [r7, #31]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	4613      	mov	r3, r2
 8000972:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f864 	bl	8000a42 <Q_NumContents>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	4293      	cmp	r3, r2
 8000982:	d848      	bhi.n	8000a16 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800098a:	b29a      	uxth	r2, r3
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4413      	add	r3, r2
 8000990:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	8aba      	ldrh	r2, [r7, #20]
 8000998:	429a      	cmp	r2, r3
 800099a:	d20b      	bcs.n	80009b4 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	4619      	mov	r1, r3
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f00b faa2 	bl	800bef6 <memcpy>
 80009b2:	e01d      	b.n	80009f0 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	881a      	ldrh	r2, [r3, #0]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	8a7a      	ldrh	r2, [r7, #18]
 80009d2:	4619      	mov	r1, r3
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f00b fa8e 	bl	800bef6 <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 80009da:	8a7b      	ldrh	r3, [r7, #18]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	18d0      	adds	r0, r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68d9      	ldr	r1, [r3, #12]
 80009e4:	88fa      	ldrh	r2, [r7, #6]
 80009e6:	8a7b      	ldrh	r3, [r7, #18]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	f00b fa83 	bl	800bef6 <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009f6:	461a      	mov	r2, r3
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	4413      	add	r3, r2
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	8812      	ldrh	r2, [r2, #0]
 8000a00:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a04:	fb01 f202 	mul.w	r2, r1, r2
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000a10:	2301      	movs	r3, #1
 8000a12:	75fb      	strb	r3, [r7, #23]
 8000a14:	e010      	b.n	8000a38 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	891b      	ldrh	r3, [r3, #8]
 8000a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d004      	beq.n	8000a2c <Q_Read+0xc6>
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	891b      	ldrh	r3, [r3, #8]
 8000a26:	3301      	adds	r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	e001      	b.n	8000a30 <Q_Read+0xca>
 8000a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000a34:	2300      	movs	r3, #0
 8000a36:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a56:	4413      	add	r3, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a5e:	1a9b      	subs	r3, r3, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	8812      	ldrh	r2, [r2, #0]
 8000a64:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a68:	fb01 f202 	mul.w	r2, r1, r2
 8000a6c:	1a9b      	subs	r3, r3, r2
 8000a6e:	b29b      	uxth	r3, r3
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	881c      	ldrh	r4, [r3, #0]
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ffda 	bl	8000a42 <Q_NumContents>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	1ae3      	subs	r3, r4, r3
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b29b      	uxth	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ad6:	f003 fccb 	bl	8004470 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f001 f899 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <DMA1_Channel1_IRQHandler+0x10>)
 8000b4e:	f001 fbc4 	bl	80022da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000037c 	.word	0x2000037c

08000b5c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <USB_LP_IRQHandler+0x10>)
 8000b62:	f001 ffd0 	bl	8002b06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20001930 	.word	0x20001930

08000b70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b74:	2020      	movs	r0, #32
 8000b76:	f001 feb3 	bl	80028e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b7a:	2080      	movs	r0, #128	@ 0x80
 8000b7c:	f001 feb0 	bl	80028e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b8a:	f004 fc61 	bl	8005450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000029c 	.word	0x2000029c

08000b98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d006      	beq.n	8000bb8 <USART1_IRQHandler+0x20>
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d107      	bne.n	8000bc8 <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bca:	f005 f997 	bl	8005efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200002e8 	.word	0x200002e8

08000bd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000be4:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000be6:	f7ff ff2c 	bl	8000a42 <Q_NumContents>
 8000bea:	4603      	mov	r3, r0
 8000bec:	81fb      	strh	r3, [r7, #14]
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d016      	beq.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000bf4:	f00a face 	bl	800b194 <CDC_Transmit_Is_Busy>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d011      	beq.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c00:	881a      	ldrh	r2, [r3, #0]
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	4413      	add	r3, r2
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c0a:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	490f      	ldr	r1, [pc, #60]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c12:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c14:	f7ff fea7 	bl	8000966 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c1e:	f00a fa81 	bl	800b124 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d109      	bne.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c34:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c3e:	6013      	str	r3, [r2, #0]
  }
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200003e8 	.word	0x200003e8
 8000c4c:	200003e4 	.word	0x200003e4
 8000c50:	200003f8 	.word	0x200003f8
 8000c54:	40012c00 	.word	0x40012c00
 8000c58:	200003dc 	.word	0x200003dc
 8000c5c:	200003e0 	.word	0x200003e0

08000c60 <HAL_UARTEx_RxEventCallback>:

uint8_t IOL_Rx_IDLEFlag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a2f      	ldr	r2, [pc, #188]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c76:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d153      	bne.n	8000d2a <HAL_UARTEx_RxEventCallback+0xca>
    // {
    //   IOL_RX_CONTINUE_FLAG = 0;
    //   return;
    // }

    if (uart_rx_IDLE_TotalCnt >= 3)
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d912      	bls.n	8000cb0 <HAL_UARTEx_RxEventCallback+0x50>
    {
      DEBUG_GPIO_TOGGLE;
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	482b      	ldr	r0, [pc, #172]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8000c8e:	f001 fe0d 	bl	80028ac <HAL_GPIO_TogglePin>
      if (IOL_Rx_IDLEFlag == 1)
 8000c92:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d103      	bne.n	8000ca2 <HAL_UARTEx_RxEventCallback+0x42>
      {
        IOL_Rx_IDLEFlag = 0;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e006      	b.n	8000cb0 <HAL_UARTEx_RxEventCallback+0x50>
      }
      else
      {
        IOL_Rx_IDLEFlag = 1;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_StartUp_Seq_Page(Size);
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fe90 	bl	80019d0 <IOL_StartUp_Seq_Page>
      }

    }

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2264      	movs	r2, #100	@ 0x64
 8000cc6:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	e853 3f00 	ldrex	r3, [r3]
 8000cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d00:	6979      	ldr	r1, [r7, #20]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	e841 2300 	strex	r3, r2, [r1]
 8000d08:	613b      	str	r3, [r7, #16]
   return(result);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e6      	bne.n	8000cde <HAL_UARTEx_RxEventCallback+0x7e>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000d10:	2264      	movs	r2, #100	@ 0x64
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000d14:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <HAL_UARTEx_RxEventCallback+0xec>)
 8000d16:	f006 fdcb 	bl	80078b0 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0204 	bic.w	r2, r2, #4
 8000d28:	601a      	str	r2, [r3, #0]

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000bc8 	.word	0x20000bc8
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	20000294 	.word	0x20000294
 8000d44:	2000037c 	.word	0x2000037c
 8000d48:	20000bcc 	.word	0x20000bcc
 8000d4c:	200002e8 	.word	0x200002e8

08000d50 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	@ (8000d7c <HAL_UART_TxCpltCallback+0x2c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d107      	bne.n	8000d72 <HAL_UART_TxCpltCallback+0x22>
  {
    IOL_DISABLE;
 8000d62:	2200      	movs	r2, #0
 8000d64:	2140      	movs	r1, #64	@ 0x40
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f001 fd87 	bl	800287c <HAL_GPIO_WritePin>
    IOL_PD_Buffer_Clear();
 8000d6e:	f000 fc67 	bl	8001640 <IOL_PD_Buffer_Clear>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40013800 	.word	0x40013800

08000d80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	e00a      	b.n	8000da8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d92:	f3af 8000 	nop.w
 8000d96:	4601      	mov	r1, r0
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf0      	blt.n	8000d92 <_read+0x12>
  }

  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de2:	605a      	str	r2, [r3, #4]
  return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_isatty>:

int _isatty(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f00b f822 	bl	800be9c <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20008000 	.word	0x20008000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000298 	.word	0x20000298
 8000e8c:	20001f78 	.word	0x20001f78

08000e90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed2:	4b20      	ldr	r3, [pc, #128]	@ (8000f54 <MX_TIM1_Init+0xa0>)
 8000ed4:	4a20      	ldr	r2, [pc, #128]	@ (8000f58 <MX_TIM1_Init+0xa4>)
 8000ed6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <MX_TIM1_Init+0xa0>)
 8000eda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ede:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <MX_TIM1_Init+0xa0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <MX_TIM1_Init+0xa0>)
 8000ee8:	22a9      	movs	r2, #169	@ 0xa9
 8000eea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <MX_TIM1_Init+0xa0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <MX_TIM1_Init+0xa0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <MX_TIM1_Init+0xa0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000efe:	4815      	ldr	r0, [pc, #84]	@ (8000f54 <MX_TIM1_Init+0xa0>)
 8000f00:	f004 f9e4 	bl	80052cc <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f0a:	f7ff fc9c 	bl	8000846 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480e      	ldr	r0, [pc, #56]	@ (8000f54 <MX_TIM1_Init+0xa0>)
 8000f1c:	f004 fbe8 	bl	80056f0 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f26:	f7ff fc8e 	bl	8000846 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <MX_TIM1_Init+0xa0>)
 8000f3c:	f004 fe32 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f46:	f7ff fc7e 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000029c 	.word	0x2000029c
 8000f58:	40012c00 	.word	0x40012c00

08000f5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x44>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d113      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x48>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f72:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x48>)
 8000f74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x48>)
 8000f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f000 ff8d 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f90:	2019      	movs	r0, #25
 8000f92:	f000 ffa4 	bl	8001ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40012c00 	.word	0x40012c00
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fac:	4b23      	ldr	r3, [pc, #140]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000fae:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <MX_USART1_UART_Init+0x98>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000fb4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000fba:	4b20      	ldr	r3, [pc, #128]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000fbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fc0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000fca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fee:	4b13      	ldr	r3, [pc, #76]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff4:	4811      	ldr	r0, [pc, #68]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8000ff6:	f004 fe9d 	bl	8005d34 <HAL_UART_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001000:	f7ff fc21 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001004:	2100      	movs	r1, #0
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <MX_USART1_UART_Init+0x94>)
 8001008:	f006 fbd6 	bl	80077b8 <HAL_UARTEx_SetTxFifoThreshold>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001012:	f7ff fc18 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001016:	2100      	movs	r1, #0
 8001018:	4808      	ldr	r0, [pc, #32]	@ (800103c <MX_USART1_UART_Init+0x94>)
 800101a:	f006 fc0b 	bl	8007834 <HAL_UARTEx_SetRxFifoThreshold>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001024:	f7ff fc0f 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <MX_USART1_UART_Init+0x94>)
 800102a:	f006 fb8c 	bl	8007746 <HAL_UARTEx_DisableFifoMode>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001034:	f7ff fc07 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200002e8 	.word	0x200002e8
 8001040:	40013800 	.word	0x40013800

08001044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09a      	sub	sp, #104	@ 0x68
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2244      	movs	r2, #68	@ 0x44
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f00a fecb 	bl	800be00 <memset>
  if(uartHandle->Instance==USART1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a38      	ldr	r2, [pc, #224]	@ (8001150 <HAL_UART_MspInit+0x10c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d169      	bne.n	8001148 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4618      	mov	r0, r3
 8001082:	f003 ff33 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800108c:	f7ff fbdb 	bl	8000846 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001090:	4b30      	ldr	r3, [pc, #192]	@ (8001154 <HAL_UART_MspInit+0x110>)
 8001092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001094:	4a2f      	ldr	r2, [pc, #188]	@ (8001154 <HAL_UART_MspInit+0x110>)
 8001096:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800109a:	6613      	str	r3, [r2, #96]	@ 0x60
 800109c:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <HAL_UART_MspInit+0x110>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001154 <HAL_UART_MspInit+0x110>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ac:	4a29      	ldr	r2, [pc, #164]	@ (8001154 <HAL_UART_MspInit+0x110>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b4:	4b27      	ldr	r3, [pc, #156]	@ (8001154 <HAL_UART_MspInit+0x110>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010c4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d2:	2307      	movs	r3, #7
 80010d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e0:	f001 fa4a 	bl	8002578 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <HAL_UART_MspInit+0x114>)
 80010e6:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <HAL_UART_MspInit+0x118>)
 80010e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <HAL_UART_MspInit+0x114>)
 80010ec:	2218      	movs	r2, #24
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f0:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <HAL_UART_MspInit+0x114>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <HAL_UART_MspInit+0x114>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_UART_MspInit+0x114>)
 80010fe:	2280      	movs	r2, #128	@ 0x80
 8001100:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <HAL_UART_MspInit+0x114>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <HAL_UART_MspInit+0x114>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_UART_MspInit+0x114>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001114:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_UART_MspInit+0x114>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800111a:	480f      	ldr	r0, [pc, #60]	@ (8001158 <HAL_UART_MspInit+0x114>)
 800111c:	f000 fefa 	bl	8001f14 <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001126:	f7ff fb8e 	bl	8000846 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <HAL_UART_MspInit+0x114>)
 800112e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001132:	4a09      	ldr	r2, [pc, #36]	@ (8001158 <HAL_UART_MspInit+0x114>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2025      	movs	r0, #37	@ 0x25
 800113e:	f000 feb4 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001142:	2025      	movs	r0, #37	@ 0x25
 8001144:	f000 fecb 	bl	8001ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001148:	bf00      	nop
 800114a:	3768      	adds	r7, #104	@ 0x68
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013800 	.word	0x40013800
 8001154:	40021000 	.word	0x40021000
 8001158:	2000037c 	.word	0x2000037c
 800115c:	40020008 	.word	0x40020008

08001160 <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	b29b      	uxth	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	4803      	ldr	r0, [pc, #12]	@ (8001184 <_write+0x24>)
 8001176:	f7ff fb8b 	bl	8000890 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 800117a:	687b      	ldr	r3, [r7, #4]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200003e8 	.word	0x200003e8

08001188 <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <User_Toggle_Led+0x24>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001194:	d307      	bcc.n	80011a6 <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <User_Toggle_Led+0x24>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]

        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 800119c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80011a0:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <User_Toggle_Led+0x28>)
 80011a2:	f001 fb83 	bl	80028ac <HAL_GPIO_TogglePin>
    }
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200003dc 	.word	0x200003dc
 80011b0:	48000800 	.word	0x48000800

080011b4 <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <BootMessagePrint+0x38>)
 80011ba:	f00a fd41 	bl	800bc40 <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 80011be:	490c      	ldr	r1, [pc, #48]	@ (80011f0 <BootMessagePrint+0x3c>)
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <BootMessagePrint+0x40>)
 80011c2:	f00a fcd5 	bl	800bb70 <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 80011c6:	490c      	ldr	r1, [pc, #48]	@ (80011f8 <BootMessagePrint+0x44>)
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <BootMessagePrint+0x48>)
 80011ca:	f00a fcd1 	bl	800bb70 <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 80011ce:	490c      	ldr	r1, [pc, #48]	@ (8001200 <BootMessagePrint+0x4c>)
 80011d0:	480c      	ldr	r0, [pc, #48]	@ (8001204 <BootMessagePrint+0x50>)
 80011d2:	f00a fccd 	bl	800bb70 <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80011d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <BootMessagePrint+0x54>)
 80011d8:	490c      	ldr	r1, [pc, #48]	@ (800120c <BootMessagePrint+0x58>)
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <BootMessagePrint+0x5c>)
 80011dc:	f00a fcc8 	bl	800bb70 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <BootMessagePrint+0x38>)
 80011e2:	f00a fd2d 	bl	800bc40 <puts>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800c93c 	.word	0x0800c93c
 80011f0:	0800c984 	.word	0x0800c984
 80011f4:	0800c994 	.word	0x0800c994
 80011f8:	0800c9b0 	.word	0x0800c9b0
 80011fc:	0800c9b8 	.word	0x0800c9b8
 8001200:	0800c9d4 	.word	0x0800c9d4
 8001204:	0800c9e8 	.word	0x0800c9e8
 8001208:	0800ca04 	.word	0x0800ca04
 800120c:	0800ca10 	.word	0x0800ca10
 8001210:	0800ca1c 	.word	0x0800ca1c

08001214 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8001218:	4819      	ldr	r0, [pc, #100]	@ (8001280 <GetClockSourcePrint+0x6c>)
 800121a:	f00a fd11 	bl	800bc40 <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 800121e:	f003 fd85 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8001222:	4603      	mov	r3, r0
 8001224:	4a17      	ldr	r2, [pc, #92]	@ (8001284 <GetClockSourcePrint+0x70>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9b      	lsrs	r3, r3, #18
 800122c:	4619      	mov	r1, r3
 800122e:	4816      	ldr	r0, [pc, #88]	@ (8001288 <GetClockSourcePrint+0x74>)
 8001230:	f00a fc9e 	bl	800bb70 <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8001234:	f003 fddc 	bl	8004df0 <HAL_RCC_GetHCLKFreq>
 8001238:	4603      	mov	r3, r0
 800123a:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <GetClockSourcePrint+0x70>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	0c9b      	lsrs	r3, r3, #18
 8001242:	4619      	mov	r1, r3
 8001244:	4811      	ldr	r0, [pc, #68]	@ (800128c <GetClockSourcePrint+0x78>)
 8001246:	f00a fc93 	bl	800bb70 <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 800124a:	f003 fddd 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 800124e:	4603      	mov	r3, r0
 8001250:	4a0c      	ldr	r2, [pc, #48]	@ (8001284 <GetClockSourcePrint+0x70>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0c9b      	lsrs	r3, r3, #18
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	@ (8001290 <GetClockSourcePrint+0x7c>)
 800125c:	f00a fc88 	bl	800bb70 <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8001260:	f003 fde8 	bl	8004e34 <HAL_RCC_GetPCLK2Freq>
 8001264:	4603      	mov	r3, r0
 8001266:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <GetClockSourcePrint+0x70>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	0c9b      	lsrs	r3, r3, #18
 800126e:	4619      	mov	r1, r3
 8001270:	4808      	ldr	r0, [pc, #32]	@ (8001294 <GetClockSourcePrint+0x80>)
 8001272:	f00a fc7d 	bl	800bb70 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8001276:	4802      	ldr	r0, [pc, #8]	@ (8001280 <GetClockSourcePrint+0x6c>)
 8001278:	f00a fce2 	bl	800bc40 <puts>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	0800c93c 	.word	0x0800c93c
 8001284:	431bde83 	.word	0x431bde83
 8001288:	0800ca3c 	.word	0x0800ca3c
 800128c:	0800ca6c 	.word	0x0800ca6c
 8001290:	0800ca9c 	.word	0x0800ca9c
 8001294:	0800cacc 	.word	0x0800cacc

08001298 <Decode_CKS_GetChecksum>:
    //     return 0;
    // }
}

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80012a4:	2352      	movs	r3, #82	@ 0x52
 80012a6:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	757b      	strb	r3, [r7, #21]

    // ck8 ^= *pData++; // MC Check 

    // ck8 ^= *pData++ & 0xC0; // CKT 6b clear. CKT Check
    // for (uint8_t i = 0; i < checksumsize; i++)
    for (uint8_t i = 0; i < checksumsize; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	75bb      	strb	r3, [r7, #22]
 80012b4:	e009      	b.n	80012ca <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	4053      	eors	r3, r2
 80012c2:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 80012c4:	7dbb      	ldrb	r3, [r7, #22]
 80012c6:	3301      	adds	r3, #1
 80012c8:	75bb      	strb	r3, [r7, #22]
 80012ca:	7dba      	ldrb	r2, [r7, #22]
 80012cc:	7d7b      	ldrb	r3, [r7, #21]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3f1      	bcc.n	80012b6 <Decode_CKS_GetChecksum+0x1e>
    // {
    //         ck8 ^= *pData++;
    // }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	09db      	lsrs	r3, r3, #7
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4053      	eors	r3, r2
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	08db      	lsrs	r3, r3, #3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4053      	eors	r3, r2
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	085b      	lsrs	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4053      	eors	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	099b      	lsrs	r3, r3, #6
 8001300:	b2da      	uxtb	r2, r3
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4053      	eors	r3, r2
 800130a:	b2da      	uxtb	r2, r3
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4053      	eors	r3, r2
 8001314:	b2da      	uxtb	r2, r3
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	4053      	eors	r3, r2
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	09db      	lsrs	r3, r3, #7
 8001326:	b2da      	uxtb	r2, r3
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	099b      	lsrs	r3, r3, #6
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4053      	eors	r3, r2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	b2da      	uxtb	r2, r3
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4053      	eors	r3, r2
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	08db      	lsrs	r3, r3, #3
 8001352:	b2da      	uxtb	r2, r3
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4053      	eors	r3, r2
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	085b      	lsrs	r3, r3, #1
 8001368:	b2da      	uxtb	r2, r3
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	4053      	eors	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 8001376:	7d3b      	ldrb	r3, [r7, #20]
 8001378:	015b      	lsls	r3, r3, #5
 800137a:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 800137c:	7cfb      	ldrb	r3, [r7, #19]
 800137e:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 8001380:	b25b      	sxtb	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 8001386:	7cbb      	ldrb	r3, [r7, #18]
 8001388:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 800138a:	b25b      	sxtb	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 8001390:	7c7b      	ldrb	r3, [r7, #17]
 8001392:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 8001394:	b25b      	sxtb	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 800139a:	7c3b      	ldrb	r3, [r7, #16]
 800139c:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80013a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80013ac:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <IOL_PreOP_ReadWriteCheck>:
    // printf(" Checksum Pass : %d\r\n", ChecksumTorF);
}

// PreOP Mode R/W 체크
static uint8_t IOL_PreOP_ReadWriteCheck (void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    // R/W   Read 체크
    if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <IOL_PreOP_ReadWriteCheck+0x30>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fb8f 	bl	8001ae8 <Decode_MC_ReadWrite>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <IOL_PreOP_ReadWriteCheck+0x18>
    {
        return IOL_RW_Read;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e009      	b.n	80013e8 <IOL_PreOP_ReadWriteCheck+0x2c>
    }
    // R/W   Write 체크
    else if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Write)
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <IOL_PreOP_ReadWriteCheck+0x30>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fb85 	bl	8001ae8 <Decode_MC_ReadWrite>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <IOL_PreOP_ReadWriteCheck+0x2c>
    {
        return IOL_RW_Write;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e7ff      	b.n	80013e8 <IOL_PreOP_ReadWriteCheck+0x2c>
    }
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000bcc 	.word	0x20000bcc

080013f0 <PreOP_CKS_GetChecksum>:

//preOP 모드 Event 비트 포함 CKS 생성
static uint8_t PreOP_CKS_GetChecksum (const uint8_t * pData, uint8_t length, uint8_t eventflag)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	@ 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
 80013fc:	4613      	mov	r3, r2
 80013fe:	70bb      	strb	r3, [r7, #2]
    uint8_t ck8 = 0x52;
 8001400:	2352      	movs	r3, #82	@ 0x52
 8001402:	77fb      	strb	r3, [r7, #31]
    uint8_t checksumsize = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	773b      	strb	r3, [r7, #28]
    uint8_t eventbitset = 0x80;
 8001408:	2380      	movs	r3, #128	@ 0x80
 800140a:	76fb      	strb	r3, [r7, #27]

    checksumsize = length;
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	773b      	strb	r3, [r7, #28]

    if (eventflag == 0)
 8001410:	78bb      	ldrb	r3, [r7, #2]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 8081 	bne.w	800151a <PreOP_CKS_GetChecksum+0x12a>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	77bb      	strb	r3, [r7, #30]
 800141c:	e009      	b.n	8001432 <PreOP_CKS_GetChecksum+0x42>
        {
            ck8 ^= *pData++;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	4053      	eors	r3, r2
 800142a:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 800142c:	7fbb      	ldrb	r3, [r7, #30]
 800142e:	3301      	adds	r3, #1
 8001430:	77bb      	strb	r3, [r7, #30]
 8001432:	7fba      	ldrb	r2, [r7, #30]
 8001434:	7f3b      	ldrb	r3, [r7, #28]
 8001436:	429a      	cmp	r2, r3
 8001438:	d3f1      	bcc.n	800141e <PreOP_CKS_GetChecksum+0x2e>
        }
        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	09db      	lsrs	r3, r3, #7
 800143e:	b2da      	uxtb	r2, r3
 8001440:	7ffb      	ldrb	r3, [r7, #31]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4053      	eors	r3, r2
 8001448:	b2da      	uxtb	r2, r3
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4053      	eors	r3, r2
 8001452:	b2da      	uxtb	r2, r3
 8001454:	7ffb      	ldrb	r3, [r7, #31]
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4053      	eors	r3, r2
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	74fb      	strb	r3, [r7, #19]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	099b      	lsrs	r3, r3, #6
 8001468:	b2da      	uxtb	r2, r3
 800146a:	7ffb      	ldrb	r3, [r7, #31]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4053      	eors	r3, r2
 8001472:	b2da      	uxtb	r2, r3
 8001474:	7ffb      	ldrb	r3, [r7, #31]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4053      	eors	r3, r2
 800147c:	b2da      	uxtb	r2, r3
 800147e:	7ffb      	ldrb	r3, [r7, #31]
 8001480:	4053      	eors	r3, r2
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	74bb      	strb	r3, [r7, #18]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800148a:	7ffb      	ldrb	r3, [r7, #31]
 800148c:	09db      	lsrs	r3, r3, #7
 800148e:	b2da      	uxtb	r2, r3
 8001490:	7ffb      	ldrb	r3, [r7, #31]
 8001492:	099b      	lsrs	r3, r3, #6
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4053      	eors	r3, r2
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	747b      	strb	r3, [r7, #17]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 80014a0:	7ffb      	ldrb	r3, [r7, #31]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	7ffb      	ldrb	r3, [r7, #31]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4053      	eors	r3, r2
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	743b      	strb	r3, [r7, #16]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80014b6:	7ffb      	ldrb	r3, [r7, #31]
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	7ffb      	ldrb	r3, [r7, #31]
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4053      	eors	r3, r2
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80014cc:	7ffb      	ldrb	r3, [r7, #31]
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	4053      	eors	r3, r2
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	73bb      	strb	r3, [r7, #14]
        uint8_t ck6 =   bit5 << 5 |
 80014de:	7cfb      	ldrb	r3, [r7, #19]
 80014e0:	015b      	lsls	r3, r3, #5
 80014e2:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80014e4:	7cbb      	ldrb	r3, [r7, #18]
 80014e6:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80014ee:	7c7b      	ldrb	r3, [r7, #17]
 80014f0:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80014f8:	7c3b      	ldrb	r3, [r7, #16]
 80014fa:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 8001506:	b25b      	sxtb	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 800150c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001510:	4313      	orrs	r3, r2
 8001512:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 8001514:	737b      	strb	r3, [r7, #13]
                        bit0;
        
        return ck6;
 8001516:	7b7b      	ldrb	r3, [r7, #13]
 8001518:	e08b      	b.n	8001632 <PreOP_CKS_GetChecksum+0x242>
    }
    else if (eventflag == 1)
 800151a:	78bb      	ldrb	r3, [r7, #2]
 800151c:	2b01      	cmp	r3, #1
 800151e:	f040 8088 	bne.w	8001632 <PreOP_CKS_GetChecksum+0x242>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 8001522:	2300      	movs	r3, #0
 8001524:	777b      	strb	r3, [r7, #29]
 8001526:	e009      	b.n	800153c <PreOP_CKS_GetChecksum+0x14c>
        {
            ck8 ^= *pData++;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	7ffb      	ldrb	r3, [r7, #31]
 8001532:	4053      	eors	r3, r2
 8001534:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 8001536:	7f7b      	ldrb	r3, [r7, #29]
 8001538:	3301      	adds	r3, #1
 800153a:	777b      	strb	r3, [r7, #29]
 800153c:	7f7a      	ldrb	r2, [r7, #29]
 800153e:	7f3b      	ldrb	r3, [r7, #28]
 8001540:	429a      	cmp	r2, r3
 8001542:	d3f1      	bcc.n	8001528 <PreOP_CKS_GetChecksum+0x138>
        }

        ck8 ^= eventbitset;
 8001544:	7ffa      	ldrb	r2, [r7, #31]
 8001546:	7efb      	ldrb	r3, [r7, #27]
 8001548:	4053      	eors	r3, r2
 800154a:	77fb      	strb	r3, [r7, #31]

        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	09db      	lsrs	r3, r3, #7
 8001550:	b2da      	uxtb	r2, r3
 8001552:	7ffb      	ldrb	r3, [r7, #31]
 8001554:	095b      	lsrs	r3, r3, #5
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4053      	eors	r3, r2
 800155a:	b2da      	uxtb	r2, r3
 800155c:	7ffb      	ldrb	r3, [r7, #31]
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4053      	eors	r3, r2
 8001564:	b2da      	uxtb	r2, r3
 8001566:	7ffb      	ldrb	r3, [r7, #31]
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4053      	eors	r3, r2
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	76bb      	strb	r3, [r7, #26]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	b2da      	uxtb	r2, r3
 800157c:	7ffb      	ldrb	r3, [r7, #31]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4053      	eors	r3, r2
 8001584:	b2da      	uxtb	r2, r3
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4053      	eors	r3, r2
 800158e:	b2da      	uxtb	r2, r3
 8001590:	7ffb      	ldrb	r3, [r7, #31]
 8001592:	4053      	eors	r3, r2
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	767b      	strb	r3, [r7, #25]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800159c:	7ffb      	ldrb	r3, [r7, #31]
 800159e:	09db      	lsrs	r3, r3, #7
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4053      	eors	r3, r2
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	763b      	strb	r3, [r7, #24]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
 80015b4:	095b      	lsrs	r3, r3, #5
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	7ffb      	ldrb	r3, [r7, #31]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4053      	eors	r3, r2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	75fb      	strb	r3, [r7, #23]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80015c8:	7ffb      	ldrb	r3, [r7, #31]
 80015ca:	08db      	lsrs	r3, r3, #3
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	7ffb      	ldrb	r3, [r7, #31]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4053      	eors	r3, r2
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	75bb      	strb	r3, [r7, #22]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80015de:	7ffb      	ldrb	r3, [r7, #31]
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	7ffb      	ldrb	r3, [r7, #31]
 80015e6:	4053      	eors	r3, r2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	757b      	strb	r3, [r7, #21]
        uint8_t ck6 =   bit5 << 5 |
 80015f0:	7ebb      	ldrb	r3, [r7, #26]
 80015f2:	015b      	lsls	r3, r3, #5
 80015f4:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80015f6:	7e7b      	ldrb	r3, [r7, #25]
 80015f8:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 8001600:	7e3b      	ldrb	r3, [r7, #24]
 8001602:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 8001604:	b25b      	sxtb	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 800160e:	b25b      	sxtb	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8001614:	7dbb      	ldrb	r3, [r7, #22]
 8001616:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 8001618:	b25b      	sxtb	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 800161e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001622:	4313      	orrs	r3, r2
 8001624:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 8001626:	753b      	strb	r3, [r7, #20]
                        bit0;
        
        return eventbitset | ck6;
 8001628:	7efa      	ldrb	r2, [r7, #27]
 800162a:	7d3b      	ldrb	r3, [r7, #20]
 800162c:	4313      	orrs	r3, r2
 800162e:	b2db      	uxtb	r3, r3
 8001630:	e7ff      	b.n	8001632 <PreOP_CKS_GetChecksum+0x242>
    }
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <IOL_PD_Buffer_Clear>:
{
    return ;
}

void IOL_PD_Buffer_Clear (void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    memset(device_ProcessDataIn_arr, 0, sizeof(device_ProcessDataIn_arr));
 8001644:	2207      	movs	r2, #7
 8001646:	2100      	movs	r1, #0
 8001648:	4804      	ldr	r0, [pc, #16]	@ (800165c <IOL_PD_Buffer_Clear+0x1c>)
 800164a:	f00a fbd9 	bl	800be00 <memset>
    memset(device_ProcessDataOut_arr, 0, sizeof(device_ProcessDataOut_arr));
 800164e:	2205      	movs	r2, #5
 8001650:	2100      	movs	r1, #0
 8001652:	4803      	ldr	r0, [pc, #12]	@ (8001660 <IOL_PD_Buffer_Clear+0x20>)
 8001654:	f00a fbd4 	bl	800be00 <memset>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000c30 	.word	0x20000c30
 8001660:	20000c38 	.word	0x20000c38

08001664 <IOL_State_OP>:

// if (stateIOLseq == IOL_OP)
void IOL_State_OP (void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]
    uint8_t IOL_Commchannel_value = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	71bb      	strb	r3, [r7, #6]
    // static uint8_t device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH];

    // static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 
    // uint8_t Page_Write_ChecksumValue[0] = {0};

    IOL_Commchannel_value = Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]);
 8001672:	4b76      	ldr	r3, [pc, #472]	@ (800184c <IOL_State_OP+0x1e8>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fa54 	bl	8001b24 <Print_MC_CommunicationChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	71bb      	strb	r3, [r7, #6]
    // uint8_t Page_Write_ChecksumValue[1] = {0};

    if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Read)
 8001680:	f7ff fe9c 	bl	80013bc <IOL_PreOP_ReadWriteCheck>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	f040 8081 	bne.w	800178e <IOL_State_OP+0x12a>
    {
        if (IOL_Commchannel_value == IOL_Channel_ISDU)
 800168c:	79bb      	ldrb	r3, [r7, #6]
 800168e:	2b03      	cmp	r3, #3
 8001690:	d16c      	bne.n	800176c <IOL_State_OP+0x108>
        {
            if (IOL_OP_PD_Req_ProductName_Chkpdu == 1) // Product Name 요청이 있으면.
 8001692:	4b6f      	ldr	r3, [pc, #444]	@ (8001850 <IOL_State_OP+0x1ec>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d129      	bne.n	80016ee <IOL_State_OP+0x8a>
            {
                // IOL_OP_PD_Req_ProductName = 0;
                device_ProcessDataIn_arr[0] = IOL_OP_ProductName[IOL_OP_OD_Res_cnt][0];
 800169a:	4b6e      	ldr	r3, [pc, #440]	@ (8001854 <IOL_State_OP+0x1f0>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b6d      	ldr	r3, [pc, #436]	@ (8001858 <IOL_State_OP+0x1f4>)
 80016a2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80016a6:	4b6d      	ldr	r3, [pc, #436]	@ (800185c <IOL_State_OP+0x1f8>)
 80016a8:	701a      	strb	r2, [r3, #0]
                device_ProcessDataIn_arr[1] = IOL_OP_ProductName[IOL_OP_OD_Res_cnt][1];
 80016aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001854 <IOL_State_OP+0x1f0>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4a6a      	ldr	r2, [pc, #424]	@ (8001858 <IOL_State_OP+0x1f4>)
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	785a      	ldrb	r2, [r3, #1]
 80016b6:	4b69      	ldr	r3, [pc, #420]	@ (800185c <IOL_State_OP+0x1f8>)
 80016b8:	705a      	strb	r2, [r3, #1]
                IOL_OP_OD_Res_cnt++;
 80016ba:	4b66      	ldr	r3, [pc, #408]	@ (8001854 <IOL_State_OP+0x1f0>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b64      	ldr	r3, [pc, #400]	@ (8001854 <IOL_State_OP+0x1f0>)
 80016c4:	701a      	strb	r2, [r3, #0]

                if (IOL_OP_OD_Res_cnt >= 13)
 80016c6:	4b63      	ldr	r3, [pc, #396]	@ (8001854 <IOL_State_OP+0x1f0>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d905      	bls.n	80016da <IOL_State_OP+0x76>
                {
                    IOL_OP_PD_Req_ProductName_Chkpdu = 0;
 80016ce:	4b60      	ldr	r3, [pc, #384]	@ (8001850 <IOL_State_OP+0x1ec>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
                    IOL_OP_OD_Res_cnt = 0;
 80016d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001854 <IOL_State_OP+0x1f0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
                }

                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2106      	movs	r1, #6
 80016de:	485f      	ldr	r0, [pc, #380]	@ (800185c <IOL_State_OP+0x1f8>)
 80016e0:	f7ff fe86 	bl	80013f0 <PreOP_CKS_GetChecksum>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b5c      	ldr	r3, [pc, #368]	@ (800185c <IOL_State_OP+0x1f8>)
 80016ea:	719a      	strb	r2, [r3, #6]
 80016ec:	e03e      	b.n	800176c <IOL_State_OP+0x108>
            }
            else if (IOL_OP_PD_Req_SerialNumber_Chkpdu == 1)
 80016ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001860 <IOL_State_OP+0x1fc>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d129      	bne.n	800174a <IOL_State_OP+0xe6>
            {
                // IOL_OP_PD_Req_ProductName = 0;
                device_ProcessDataIn_arr[0] = IOL_OP_SerialNumber[IOL_OP_OD_Res_cnt][0];
 80016f6:	4b57      	ldr	r3, [pc, #348]	@ (8001854 <IOL_State_OP+0x1f0>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <IOL_State_OP+0x200>)
 80016fe:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001702:	4b56      	ldr	r3, [pc, #344]	@ (800185c <IOL_State_OP+0x1f8>)
 8001704:	701a      	strb	r2, [r3, #0]
                device_ProcessDataIn_arr[1] = IOL_OP_SerialNumber[IOL_OP_OD_Res_cnt][1];
 8001706:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <IOL_State_OP+0x1f0>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4a56      	ldr	r2, [pc, #344]	@ (8001864 <IOL_State_OP+0x200>)
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	785a      	ldrb	r2, [r3, #1]
 8001712:	4b52      	ldr	r3, [pc, #328]	@ (800185c <IOL_State_OP+0x1f8>)
 8001714:	705a      	strb	r2, [r3, #1]
                IOL_OP_OD_Res_cnt++;
 8001716:	4b4f      	ldr	r3, [pc, #316]	@ (8001854 <IOL_State_OP+0x1f0>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b4d      	ldr	r3, [pc, #308]	@ (8001854 <IOL_State_OP+0x1f0>)
 8001720:	701a      	strb	r2, [r3, #0]

                if (IOL_OP_OD_Res_cnt >= 10)
 8001722:	4b4c      	ldr	r3, [pc, #304]	@ (8001854 <IOL_State_OP+0x1f0>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b09      	cmp	r3, #9
 8001728:	d905      	bls.n	8001736 <IOL_State_OP+0xd2>
                {
                    IOL_OP_PD_Req_SerialNumber_Chkpdu = 0;
 800172a:	4b4d      	ldr	r3, [pc, #308]	@ (8001860 <IOL_State_OP+0x1fc>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
                    IOL_OP_OD_Res_cnt = 0;
 8001730:	4b48      	ldr	r3, [pc, #288]	@ (8001854 <IOL_State_OP+0x1f0>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
                }

                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);    
 8001736:	2200      	movs	r2, #0
 8001738:	2106      	movs	r1, #6
 800173a:	4848      	ldr	r0, [pc, #288]	@ (800185c <IOL_State_OP+0x1f8>)
 800173c:	f7ff fe58 	bl	80013f0 <PreOP_CKS_GetChecksum>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	4b45      	ldr	r3, [pc, #276]	@ (800185c <IOL_State_OP+0x1f8>)
 8001746:	719a      	strb	r2, [r3, #6]
 8001748:	e010      	b.n	800176c <IOL_State_OP+0x108>
            }
            else
            {
                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt++; // Test cnt Value 
 800174a:	4b47      	ldr	r3, [pc, #284]	@ (8001868 <IOL_State_OP+0x204>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	b2d1      	uxtb	r1, r2
 8001752:	4a45      	ldr	r2, [pc, #276]	@ (8001868 <IOL_State_OP+0x204>)
 8001754:	7011      	strb	r1, [r2, #0]
 8001756:	4a41      	ldr	r2, [pc, #260]	@ (800185c <IOL_State_OP+0x1f8>)
 8001758:	7153      	strb	r3, [r2, #5]
                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2106      	movs	r1, #6
 800175e:	483f      	ldr	r0, [pc, #252]	@ (800185c <IOL_State_OP+0x1f8>)
 8001760:	f7ff fe46 	bl	80013f0 <PreOP_CKS_GetChecksum>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	4b3c      	ldr	r3, [pc, #240]	@ (800185c <IOL_State_OP+0x1f8>)
 800176a:	719a      	strb	r2, [r3, #6]
            }
        }

        IOL_ENABLE;
 800176c:	2201      	movs	r2, #1
 800176e:	2140      	movs	r1, #64	@ 0x40
 8001770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001774:	f001 f882 	bl	800287c <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataIn_arr, OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 8001778:	2207      	movs	r2, #7
 800177a:	4938      	ldr	r1, [pc, #224]	@ (800185c <IOL_State_OP+0x1f8>)
 800177c:	483b      	ldr	r0, [pc, #236]	@ (800186c <IOL_State_OP+0x208>)
 800177e:	f004 fb29 	bl	8005dd4 <HAL_UART_Transmit_IT>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d05d      	beq.n	8001844 <IOL_State_OP+0x1e0>
        {
            Error_Handler();
 8001788:	f7ff f85d 	bl	8000846 <Error_Handler>
        {
            Error_Handler();
        }
    }
    
}
 800178c:	e05a      	b.n	8001844 <IOL_State_OP+0x1e0>
    else if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Write)
 800178e:	f7ff fe15 	bl	80013bc <IOL_PreOP_ReadWriteCheck>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d155      	bne.n	8001844 <IOL_State_OP+0x1e0>
        if (IOL_Commchannel_value == IOL_Channel_ISDU)
 8001798:	79bb      	ldrb	r3, [r7, #6]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d142      	bne.n	8001824 <IOL_State_OP+0x1c0>
            if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x93) // ISDU Req
 800179e:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <IOL_State_OP+0x1e8>)
 80017a0:	799b      	ldrb	r3, [r3, #6]
 80017a2:	2b93      	cmp	r3, #147	@ 0x93
 80017a4:	d118      	bne.n	80017d8 <IOL_State_OP+0x174>
                if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH] == 0x12) // Index : 18.  Product Name
 80017a6:	4b29      	ldr	r3, [pc, #164]	@ (800184c <IOL_State_OP+0x1e8>)
 80017a8:	79db      	ldrb	r3, [r3, #7]
 80017aa:	2b12      	cmp	r3, #18
 80017ac:	d103      	bne.n	80017b6 <IOL_State_OP+0x152>
                    IOL_OP_PD_Req_ProductName = 1;
 80017ae:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <IOL_State_OP+0x20c>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e006      	b.n	80017c4 <IOL_State_OP+0x160>
                else if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH] == 0x15) // Index : 20. Serial number
 80017b6:	4b25      	ldr	r3, [pc, #148]	@ (800184c <IOL_State_OP+0x1e8>)
 80017b8:	79db      	ldrb	r3, [r3, #7]
 80017ba:	2b15      	cmp	r3, #21
 80017bc:	d102      	bne.n	80017c4 <IOL_State_OP+0x160>
                    IOL_OP_PD_Req_SerialNumber = 1;
 80017be:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <IOL_State_OP+0x210>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
                device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2104      	movs	r1, #4
 80017c8:	482b      	ldr	r0, [pc, #172]	@ (8001878 <IOL_State_OP+0x214>)
 80017ca:	f7ff fe11 	bl	80013f0 <PreOP_CKS_GetChecksum>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b29      	ldr	r3, [pc, #164]	@ (8001878 <IOL_State_OP+0x214>)
 80017d4:	711a      	strb	r2, [r3, #4]
 80017d6:	e025      	b.n	8001824 <IOL_State_OP+0x1c0>
                if ((uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x81) && (IOL_OP_PD_Req_ProductName == 1))   // Product Name CHKPDU 0x81 0x00 .
 80017d8:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <IOL_State_OP+0x1e8>)
 80017da:	799b      	ldrb	r3, [r3, #6]
 80017dc:	2b81      	cmp	r3, #129	@ 0x81
 80017de:	d10a      	bne.n	80017f6 <IOL_State_OP+0x192>
 80017e0:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <IOL_State_OP+0x20c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d106      	bne.n	80017f6 <IOL_State_OP+0x192>
                    IOL_OP_PD_Req_ProductName = 0;
 80017e8:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <IOL_State_OP+0x20c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
                    IOL_OP_PD_Req_ProductName_Chkpdu = 1;
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <IOL_State_OP+0x1ec>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e00d      	b.n	8001812 <IOL_State_OP+0x1ae>
                else if ((uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x86) && (IOL_OP_PD_Req_SerialNumber == 1))   // Serial Number CHKPDU 0x86 0x00 .
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <IOL_State_OP+0x1e8>)
 80017f8:	799b      	ldrb	r3, [r3, #6]
 80017fa:	2b86      	cmp	r3, #134	@ 0x86
 80017fc:	d109      	bne.n	8001812 <IOL_State_OP+0x1ae>
 80017fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <IOL_State_OP+0x210>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <IOL_State_OP+0x1ae>
                    IOL_OP_PD_Req_SerialNumber = 0;
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <IOL_State_OP+0x210>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
                    IOL_OP_PD_Req_SerialNumber_Chkpdu = 1;
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <IOL_State_OP+0x1fc>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
                device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2104      	movs	r1, #4
 8001816:	4818      	ldr	r0, [pc, #96]	@ (8001878 <IOL_State_OP+0x214>)
 8001818:	f7ff fdea 	bl	80013f0 <PreOP_CKS_GetChecksum>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <IOL_State_OP+0x214>)
 8001822:	711a      	strb	r2, [r3, #4]
        IOL_ENABLE;
 8001824:	2201      	movs	r2, #1
 8001826:	2140      	movs	r1, #64	@ 0x40
 8001828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182c:	f001 f826 	bl	800287c <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_arr, OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 8001830:	2205      	movs	r2, #5
 8001832:	4911      	ldr	r1, [pc, #68]	@ (8001878 <IOL_State_OP+0x214>)
 8001834:	480d      	ldr	r0, [pc, #52]	@ (800186c <IOL_State_OP+0x208>)
 8001836:	f004 facd 	bl	8005dd4 <HAL_UART_Transmit_IT>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <IOL_State_OP+0x1e0>
            Error_Handler();
 8001840:	f7ff f801 	bl	8000846 <Error_Handler>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000bcc 	.word	0x20000bcc
 8001850:	20000c3f 	.word	0x20000c3f
 8001854:	20000c41 	.word	0x20000c41
 8001858:	20000054 	.word	0x20000054
 800185c:	20000c30 	.word	0x20000c30
 8001860:	20000c40 	.word	0x20000c40
 8001864:	20000084 	.word	0x20000084
 8001868:	20000c42 	.word	0x20000c42
 800186c:	200002e8 	.word	0x200002e8
 8001870:	20000c3d 	.word	0x20000c3d
 8001874:	20000c3e 	.word	0x20000c3e
 8001878:	20000c38 	.word	0x20000c38

0800187c <IOL_State_PreOP>:

// if (stateIOLseq == IOL_PreOP)
void IOL_State_PreOP (void)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	71bb      	strb	r3, [r7, #6]
    uint8_t IOL_Commchannel_value = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	717b      	strb	r3, [r7, #5]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 
    // uint8_t Page_Write_ChecksumValue[0] = {0};

    IOL_Commchannel_value = Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]);
 800188a:	4b4b      	ldr	r3, [pc, #300]	@ (80019b8 <IOL_State_PreOP+0x13c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f948 	bl	8001b24 <Print_MC_CommunicationChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	717b      	strb	r3, [r7, #5]
    // uint8_t Page_Write_ChecksumValue[1] = {0};

    if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Read)
 8001898:	f7ff fd90 	bl	80013bc <IOL_PreOP_ReadWriteCheck>
 800189c:	4603      	mov	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d151      	bne.n	8001946 <IOL_State_PreOP+0xca>
    {
        for (i=0; i < PREOP_DATA_LENGTH; i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	71fb      	strb	r3, [r7, #7]
 80018a6:	e00e      	b.n	80018c6 <IOL_State_PreOP+0x4a>
        {
            preop_data_arr[i]= IOL_PreOP_Packet[PreOP_seq_cnt][i];
 80018a8:	4b44      	ldr	r3, [pc, #272]	@ (80019bc <IOL_State_PreOP+0x140>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4843      	ldr	r0, [pc, #268]	@ (80019c0 <IOL_State_PreOP+0x144>)
 80018b4:	00c9      	lsls	r1, r1, #3
 80018b6:	4401      	add	r1, r0
 80018b8:	440a      	add	r2, r1
 80018ba:	7811      	ldrb	r1, [r2, #0]
 80018bc:	4a41      	ldr	r2, [pc, #260]	@ (80019c4 <IOL_State_PreOP+0x148>)
 80018be:	54d1      	strb	r1, [r2, r3]
        for (i=0; i < PREOP_DATA_LENGTH; i++)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	3301      	adds	r3, #1
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b07      	cmp	r3, #7
 80018ca:	d9ed      	bls.n	80018a8 <IOL_State_PreOP+0x2c>
        }

        // PreOP Mode에서 Diagnosis 는 Event flag 있음 PreOP_CKS_GetChecksum 함수의 3번째 인자 1 = event set, 0 = event reset.
        if (IOL_Commchannel_value == IOL_Channel_Diagnosis)
 80018cc:	797b      	ldrb	r3, [r7, #5]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d10a      	bne.n	80018e8 <IOL_State_PreOP+0x6c>
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 1);
 80018d2:	79fc      	ldrb	r4, [r7, #7]
 80018d4:	2201      	movs	r2, #1
 80018d6:	2108      	movs	r1, #8
 80018d8:	483a      	ldr	r0, [pc, #232]	@ (80019c4 <IOL_State_PreOP+0x148>)
 80018da:	f7ff fd89 	bl	80013f0 <PreOP_CKS_GetChecksum>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b38      	ldr	r3, [pc, #224]	@ (80019c4 <IOL_State_PreOP+0x148>)
 80018e4:	551a      	strb	r2, [r3, r4]
 80018e6:	e017      	b.n	8001918 <IOL_State_PreOP+0x9c>
        }
        else if (IOL_Commchannel_value == IOL_Channel_ISDU)
 80018e8:	797b      	ldrb	r3, [r7, #5]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d10a      	bne.n	8001904 <IOL_State_PreOP+0x88>
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 80018ee:	79fc      	ldrb	r4, [r7, #7]
 80018f0:	2200      	movs	r2, #0
 80018f2:	2108      	movs	r1, #8
 80018f4:	4833      	ldr	r0, [pc, #204]	@ (80019c4 <IOL_State_PreOP+0x148>)
 80018f6:	f7ff fd7b 	bl	80013f0 <PreOP_CKS_GetChecksum>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b31      	ldr	r3, [pc, #196]	@ (80019c4 <IOL_State_PreOP+0x148>)
 8001900:	551a      	strb	r2, [r3, r4]
 8001902:	e009      	b.n	8001918 <IOL_State_PreOP+0x9c>
        }
        else
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8001904:	79fc      	ldrb	r4, [r7, #7]
 8001906:	2200      	movs	r2, #0
 8001908:	2108      	movs	r1, #8
 800190a:	482e      	ldr	r0, [pc, #184]	@ (80019c4 <IOL_State_PreOP+0x148>)
 800190c:	f7ff fd70 	bl	80013f0 <PreOP_CKS_GetChecksum>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	4b2b      	ldr	r3, [pc, #172]	@ (80019c4 <IOL_State_PreOP+0x148>)
 8001916:	551a      	strb	r2, [r3, r4]
        }
        
        PreOP_seq_cnt++;
 8001918:	4b28      	ldr	r3, [pc, #160]	@ (80019bc <IOL_State_PreOP+0x140>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <IOL_State_PreOP+0x140>)
 8001922:	701a      	strb	r2, [r3, #0]

        IOL_ENABLE;
 8001924:	2201      	movs	r2, #1
 8001926:	2140      	movs	r1, #64	@ 0x40
 8001928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192c:	f000 ffa6 	bl	800287c <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, preop_data_arr, 9) != HAL_OK)
 8001930:	2209      	movs	r2, #9
 8001932:	4924      	ldr	r1, [pc, #144]	@ (80019c4 <IOL_State_PreOP+0x148>)
 8001934:	4824      	ldr	r0, [pc, #144]	@ (80019c8 <IOL_State_PreOP+0x14c>)
 8001936:	f004 fa4d 	bl	8005dd4 <HAL_UART_Transmit_IT>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d037      	beq.n	80019b0 <IOL_State_PreOP+0x134>
        {
            Error_Handler();
 8001940:	f7fe ff81 	bl	8000846 <Error_Handler>
        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
        {
            Error_Handler();
        }
    }
}
 8001944:	e034      	b.n	80019b0 <IOL_State_PreOP+0x134>
    else if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Write)
 8001946:	f7ff fd39 	bl	80013bc <IOL_PreOP_ReadWriteCheck>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d12f      	bne.n	80019b0 <IOL_State_PreOP+0x134>
        if ((IOL_Commchannel_value == IOL_Channel_Diagnosis) || (IOL_Commchannel_value == IOL_Channel_ISDU))
 8001950:	797b      	ldrb	r3, [r7, #5]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d002      	beq.n	800195c <IOL_State_PreOP+0xe0>
 8001956:	797b      	ldrb	r3, [r7, #5]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d109      	bne.n	8001970 <IOL_State_PreOP+0xf4>
            preop_data_arr[0] = PreOP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 800195c:	2201      	movs	r2, #1
 800195e:	2100      	movs	r1, #0
 8001960:	4818      	ldr	r0, [pc, #96]	@ (80019c4 <IOL_State_PreOP+0x148>)
 8001962:	f7ff fd45 	bl	80013f0 <PreOP_CKS_GetChecksum>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <IOL_State_PreOP+0x148>)
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e00f      	b.n	8001990 <IOL_State_PreOP+0x114>
            preop_data_arr[0] = PreOP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	4813      	ldr	r0, [pc, #76]	@ (80019c4 <IOL_State_PreOP+0x148>)
 8001976:	f7ff fd3b 	bl	80013f0 <PreOP_CKS_GetChecksum>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <IOL_State_PreOP+0x148>)
 8001980:	701a      	strb	r2, [r3, #0]
            if(uart1_rx_IDLE_buf[2] == 0x99)
 8001982:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <IOL_State_PreOP+0x13c>)
 8001984:	789b      	ldrb	r3, [r3, #2]
 8001986:	2b99      	cmp	r3, #153	@ 0x99
 8001988:	d102      	bne.n	8001990 <IOL_State_PreOP+0x114>
                stateIOLseq = IOL_OP;
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <IOL_State_PreOP+0x150>)
 800198c:	2202      	movs	r2, #2
 800198e:	701a      	strb	r2, [r3, #0]
        IOL_ENABLE;
 8001990:	2201      	movs	r2, #1
 8001992:	2140      	movs	r1, #64	@ 0x40
 8001994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001998:	f000 ff70 	bl	800287c <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
 800199c:	2201      	movs	r2, #1
 800199e:	4909      	ldr	r1, [pc, #36]	@ (80019c4 <IOL_State_PreOP+0x148>)
 80019a0:	4809      	ldr	r0, [pc, #36]	@ (80019c8 <IOL_State_PreOP+0x14c>)
 80019a2:	f004 fa17 	bl	8005dd4 <HAL_UART_Transmit_IT>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <IOL_State_PreOP+0x134>
            Error_Handler();
 80019ac:	f7fe ff4b 	bl	8000846 <Error_Handler>
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}
 80019b8:	20000bcc 	.word	0x20000bcc
 80019bc:	20000c47 	.word	0x20000c47
 80019c0:	20000014 	.word	0x20000014
 80019c4:	20000c4c 	.word	0x20000c4c
 80019c8:	200002e8 	.word	0x200002e8
 80019cc:	20000c48 	.word	0x20000c48

080019d0 <IOL_StartUp_Seq_Page>:
        
    }
}

void IOL_StartUp_Seq_Page (uint16_t size)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
    uint8_t rxdataSize = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
    uint8_t eventdebug = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	73bb      	strb	r3, [r7, #14]
    uint8_t Page_Write_ChecksumValue[0] = {0};
    
    rxdataSize = (uint8_t)size;
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	73fb      	strb	r3, [r7, #15]

    // State = StartUP ,   Channel = Page인지 구분
    if ((stateIOLseq == IOL_StartUp) && (Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]) == IOL_Channel_Page))
 80019e6:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <IOL_StartUp_Seq_Page+0xfc>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d15b      	bne.n	8001aa6 <IOL_StartUp_Seq_Page+0xd6>
 80019ee:	4b38      	ldr	r3, [pc, #224]	@ (8001ad0 <IOL_StartUp_Seq_Page+0x100>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f896 	bl	8001b24 <Print_MC_CommunicationChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d153      	bne.n	8001aa6 <IOL_StartUp_Seq_Page+0xd6>
    {
        // R/W   Read 체크
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 80019fe:	4b34      	ldr	r3, [pc, #208]	@ (8001ad0 <IOL_StartUp_Seq_Page+0x100>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f870 	bl	8001ae8 <Decode_MC_ReadWrite>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d123      	bne.n	8001a56 <IOL_StartUp_Seq_Page+0x86>
        {
            
            IOL_Page1_Packet[0] = IOL_Page1_SeqValue[Page1_seq++];
 8001a0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <IOL_StartUp_Seq_Page+0x104>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	b2d1      	uxtb	r1, r2
 8001a16:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad4 <IOL_StartUp_Seq_Page+0x104>)
 8001a18:	7011      	strb	r1, [r2, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <IOL_StartUp_Seq_Page+0x108>)
 8001a1e:	5c9a      	ldrb	r2, [r3, r2]
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <IOL_StartUp_Seq_Page+0x10c>)
 8001a22:	701a      	strb	r2, [r3, #0]

            // IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(IOL_Page1_Packet[0], 1);
            IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(&IOL_Page1_Packet[0], 1);
 8001a24:	2101      	movs	r1, #1
 8001a26:	482d      	ldr	r0, [pc, #180]	@ (8001adc <IOL_StartUp_Seq_Page+0x10c>)
 8001a28:	f7ff fc36 	bl	8001298 <Decode_CKS_GetChecksum>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <IOL_StartUp_Seq_Page+0x10c>)
 8001a32:	705a      	strb	r2, [r3, #1]

            IOL_ENABLE;
 8001a34:	2201      	movs	r2, #1
 8001a36:	2140      	movs	r1, #64	@ 0x40
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3c:	f000 ff1e 	bl	800287c <HAL_GPIO_WritePin>
            if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) IOL_Page1_Packet, 2) != HAL_OK)
 8001a40:	2202      	movs	r2, #2
 8001a42:	4926      	ldr	r1, [pc, #152]	@ (8001adc <IOL_StartUp_Seq_Page+0x10c>)
 8001a44:	4826      	ldr	r0, [pc, #152]	@ (8001ae0 <IOL_StartUp_Seq_Page+0x110>)
 8001a46:	f004 f9c5 	bl	8005dd4 <HAL_UART_Transmit_IT>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d038      	beq.n	8001ac2 <IOL_StartUp_Seq_Page+0xf2>
            {
                Error_Handler();
 8001a50:	f7fe fef9 	bl	8000846 <Error_Handler>
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001a54:	e035      	b.n	8001ac2 <IOL_StartUp_Seq_Page+0xf2>
            }
            // HAL_UART_Transmit(&huart1,(uint8_t *) IOL_Page1_Packet, 2, 10);
            // IOL_DISABLE;
        }
        // R/W   Write 체크
        else if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Write)
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <IOL_StartUp_Seq_Page+0x100>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f844 	bl	8001ae8 <Decode_MC_ReadWrite>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d12d      	bne.n	8001ac2 <IOL_StartUp_Seq_Page+0xf2>
        {
            Page_Write_ChecksumValue[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 8001a66:	2100      	movs	r1, #0
 8001a68:	481e      	ldr	r0, [pc, #120]	@ (8001ae4 <IOL_StartUp_Seq_Page+0x114>)
 8001a6a:	f7ff fc15 	bl	8001298 <Decode_CKS_GetChecksum>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	733b      	strb	r3, [r7, #12]
            // if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) Decode_CKS_GetChecksum(0x52, 0), 1) != HAL_OK)
            IOL_ENABLE;
 8001a72:	2201      	movs	r2, #1
 8001a74:	2140      	movs	r1, #64	@ 0x40
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7a:	f000 feff 	bl	800287c <HAL_GPIO_WritePin>
            if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) Page_Write_ChecksumValue, 1) != HAL_OK)
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2201      	movs	r2, #1
 8001a84:	4619      	mov	r1, r3
 8001a86:	4816      	ldr	r0, [pc, #88]	@ (8001ae0 <IOL_StartUp_Seq_Page+0x110>)
 8001a88:	f004 f9a4 	bl	8005dd4 <HAL_UART_Transmit_IT>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <IOL_StartUp_Seq_Page+0xc6>
            {
                Error_Handler();
 8001a92:	f7fe fed8 	bl	8000846 <Error_Handler>
            }

            //Master Command to PreOP.
            if (uart1_rx_IDLE_buf[2] == 0x9A)
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <IOL_StartUp_Seq_Page+0x100>)
 8001a98:	789b      	ldrb	r3, [r3, #2]
 8001a9a:	2b9a      	cmp	r3, #154	@ 0x9a
 8001a9c:	d111      	bne.n	8001ac2 <IOL_StartUp_Seq_Page+0xf2>
            {
                stateIOLseq = IOL_PreOP;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <IOL_StartUp_Seq_Page+0xfc>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001aa4:	e00d      	b.n	8001ac2 <IOL_StartUp_Seq_Page+0xf2>
            }
            
        }
    }
    // PreOperate Mode
    else if (stateIOLseq == IOL_PreOP)
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <IOL_StartUp_Seq_Page+0xfc>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d102      	bne.n	8001ab4 <IOL_StartUp_Seq_Page+0xe4>
    {
        IOL_State_PreOP();
 8001aae:	f7ff fee5 	bl	800187c <IOL_State_PreOP>
    // Operate Mode
    else if (stateIOLseq == IOL_OP)
    {
        IOL_State_OP();
    }
}
 8001ab2:	e007      	b.n	8001ac4 <IOL_StartUp_Seq_Page+0xf4>
    else if (stateIOLseq == IOL_OP)
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <IOL_StartUp_Seq_Page+0xfc>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d103      	bne.n	8001ac4 <IOL_StartUp_Seq_Page+0xf4>
        IOL_State_OP();
 8001abc:	f7ff fdd2 	bl	8001664 <IOL_State_OP>
}
 8001ac0:	e000      	b.n	8001ac4 <IOL_StartUp_Seq_Page+0xf4>
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001ac2:	bf00      	nop
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000c48 	.word	0x20000c48
 8001ad0:	20000bcc 	.word	0x20000bcc
 8001ad4:	20000c46 	.word	0x20000c46
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	20000c44 	.word	0x20000c44
 8001ae0:	200002e8 	.word	0x200002e8
 8001ae4:	20000098 	.word	0x20000098

08001ae8 <Decode_MC_ReadWrite>:
    #endif
  }
}

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	09db      	lsrs	r3, r3, #7
 8001afe:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <Decode_MC_ReadWrite+0x24>
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d002      	beq.n	8001b10 <Decode_MC_ReadWrite+0x28>
 8001b0a:	e003      	b.n	8001b14 <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e002      	b.n	8001b16 <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 8001b14:	2358      	movs	r3, #88	@ 0x58
    }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <Print_MC_CommunicationChannel>:

//     return MCdata & 0x03;
// }

static uint8_t Print_MC_CommunicationChannel (uint8_t Data)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	095b      	lsrs	r3, r3, #5
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d813      	bhi.n	8001b70 <Print_MC_CommunicationChannel+0x4c>
 8001b48:	a201      	add	r2, pc, #4	@ (adr r2, 8001b50 <Print_MC_CommunicationChannel+0x2c>)
 8001b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4e:	bf00      	nop
 8001b50:	08001b61 	.word	0x08001b61
 8001b54:	08001b65 	.word	0x08001b65
 8001b58:	08001b69 	.word	0x08001b69
 8001b5c:	08001b6d 	.word	0x08001b6d
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e005      	b.n	8001b70 <Print_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e003      	b.n	8001b70 <Print_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e001      	b.n	8001b70 <Print_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e7ff      	b.n	8001b70 <Print_MC_CommunicationChannel+0x4c>
    }
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b7c:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b7e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b80:	f7ff f986 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b84:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b86:	490d      	ldr	r1, [pc, #52]	@ (8001bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <LoopForever+0xe>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc8 <LoopForever+0x16>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001baa:	f00a f97d 	bl	800bea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bae:	f7fe fdc1 	bl	8000734 <main>

08001bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb2:	e7fe      	b.n	8001bb2 <LoopForever>
  ldr   r0, =_estack
 8001bb4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001bc0:	0800cbc8 	.word	0x0800cbc8
  ldr r2, =_sbss
 8001bc4:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8001bc8:	20001f78 	.word	0x20001f78

08001bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC1_2_IRQHandler>

08001bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f95b 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bde:	200f      	movs	r0, #15
 8001be0:	f000 f80e 	bl	8001c00 <HAL_InitTick>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	71fb      	strb	r3, [r7, #7]
 8001bee:	e001      	b.n	8001bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bf0:	f7fe ff56 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bf4:	79fb      	ldrb	r3, [r7, #7]

}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <HAL_InitTick+0x68>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d022      	beq.n	8001c5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c14:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <HAL_InitTick+0x6c>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <HAL_InitTick+0x68>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f966 	bl	8001efa <HAL_SYSTICK_Config>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10f      	bne.n	8001c54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b0f      	cmp	r3, #15
 8001c38:	d809      	bhi.n	8001c4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c42:	f000 f932 	bl	8001eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_InitTick+0x70>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e007      	b.n	8001c5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e004      	b.n	8001c5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	e001      	b.n	8001c5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200000a0 	.word	0x200000a0
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	2000009c 	.word	0x2000009c

08001c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_IncTick+0x1c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a03      	ldr	r2, [pc, #12]	@ (8001c90 <HAL_IncTick+0x1c>)
 8001c84:	6013      	str	r3, [r2, #0]
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	20000c58 	.word	0x20000c58
 8001c94:	200000a0 	.word	0x200000a0

08001c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000c58 	.word	0x20000c58

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff ffee 	bl	8001c98 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d004      	beq.n	8001cd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <HAL_Delay+0x40>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd4:	bf00      	nop
 8001cd6:	f7ff ffdf 	bl	8001c98 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d8f7      	bhi.n	8001cd6 <HAL_Delay+0x26>
  {
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200000a0 	.word	0x200000a0

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	@ (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	@ (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	@ (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	@ 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	@ 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff40 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff90 	bl	8001de8 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5f 	bl	8001d94 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff33 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffa4 	bl	8001e50 <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e08d      	b.n	8002042 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b47      	ldr	r3, [pc, #284]	@ (800204c <HAL_DMA_Init+0x138>)
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d80f      	bhi.n	8001f52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b45      	ldr	r3, [pc, #276]	@ (8002050 <HAL_DMA_Init+0x13c>)
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a45      	ldr	r2, [pc, #276]	@ (8002054 <HAL_DMA_Init+0x140>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	009a      	lsls	r2, r3, #2
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a42      	ldr	r2, [pc, #264]	@ (8002058 <HAL_DMA_Init+0x144>)
 8001f4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f50:	e00e      	b.n	8001f70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b40      	ldr	r3, [pc, #256]	@ (800205c <HAL_DMA_Init+0x148>)
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a3d      	ldr	r2, [pc, #244]	@ (8002054 <HAL_DMA_Init+0x140>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	009a      	lsls	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a3c      	ldr	r2, [pc, #240]	@ (8002060 <HAL_DMA_Init+0x14c>)
 8001f6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fa76 	bl	80024b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fd0:	d102      	bne.n	8001fd8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d010      	beq.n	8002018 <HAL_DMA_Init+0x104>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d80c      	bhi.n	8002018 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fa96 	bl	8002530 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	e008      	b.n	800202a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40020407 	.word	0x40020407
 8002050:	bffdfff8 	.word	0xbffdfff8
 8002054:	cccccccd 	.word	0xcccccccd
 8002058:	40020000 	.word	0x40020000
 800205c:	bffdfbf8 	.word	0xbffdfbf8
 8002060:	40020400 	.word	0x40020400

08002064 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_DMA_Start_IT+0x20>
 8002080:	2302      	movs	r3, #2
 8002082:	e066      	b.n	8002152 <HAL_DMA_Start_IT+0xee>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d155      	bne.n	8002144 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f9bb 	bl	8002438 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d008      	beq.n	80020dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 020e 	orr.w	r2, r2, #14
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e00f      	b.n	80020fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0204 	bic.w	r2, r2, #4
 80020ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 020a 	orr.w	r2, r2, #10
 80020fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002118:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002130:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0201 	orr.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	e005      	b.n	8002150 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800214c:	2302      	movs	r3, #2
 800214e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002150:	7dfb      	ldrb	r3, [r7, #23]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d005      	beq.n	800217e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2204      	movs	r2, #4
 8002176:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e037      	b.n	80021ee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 020e 	bic.w	r2, r2, #14
 800218c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800219c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f003 021f 	and.w	r2, r3, #31
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021ca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00c      	beq.n	80021ee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021ec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d00d      	beq.n	8002240 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2204      	movs	r2, #4
 8002228:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	e047      	b.n	80022d0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 020e 	bic.w	r2, r2, #14
 800224e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800226a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800226e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800228c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00c      	beq.n	80022b0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
    }
  }
  return status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2204      	movs	r2, #4
 80022fc:	409a      	lsls	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d026      	beq.n	8002354 <HAL_DMA_IRQHandler+0x7a>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d021      	beq.n	8002354 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d107      	bne.n	800232e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0204 	bic.w	r2, r2, #4
 800232c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f003 021f 	and.w	r2, r3, #31
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	2104      	movs	r1, #4
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	2b00      	cmp	r3, #0
 8002348:	d071      	beq.n	800242e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002352:	e06c      	b.n	800242e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2202      	movs	r2, #2
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02e      	beq.n	80023c6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d029      	beq.n	80023c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020a 	bic.w	r2, r2, #10
 800238e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	2102      	movs	r1, #2
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d038      	beq.n	800242e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80023c4:	e033      	b.n	800242e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	2208      	movs	r2, #8
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d02a      	beq.n	8002430 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d025      	beq.n	8002430 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 020e 	bic.w	r2, r2, #14
 80023f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f202 	lsl.w	r2, r1, r2
 8002406:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800242e:	bf00      	nop
 8002430:	bf00      	nop
}
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800244e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002460:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	f003 021f 	and.w	r2, r3, #31
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	2101      	movs	r1, #1
 8002470:	fa01 f202 	lsl.w	r2, r1, r2
 8002474:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b10      	cmp	r3, #16
 8002484:	d108      	bne.n	8002498 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002496:	e007      	b.n	80024a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d802      	bhi.n	80024ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80024c8:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e001      	b.n	80024d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80024d0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3b08      	subs	r3, #8
 80024de:	4a12      	ldr	r2, [pc, #72]	@ (8002528 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	009a      	lsls	r2, r3, #2
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a0b      	ldr	r2, [pc, #44]	@ (800252c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80024fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2201      	movs	r2, #1
 8002508:	409a      	lsls	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40020407 	.word	0x40020407
 8002520:	40020800 	.word	0x40020800
 8002524:	40020820 	.word	0x40020820
 8002528:	cccccccd 	.word	0xcccccccd
 800252c:	40020880 	.word	0x40020880

08002530 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a08      	ldr	r2, [pc, #32]	@ (8002574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002552:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3b01      	subs	r3, #1
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	2201      	movs	r2, #1
 800255e:	409a      	lsls	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	1000823f 	.word	0x1000823f
 8002574:	40020940 	.word	0x40020940

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002586:	e15a      	b.n	800283e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 814c 	beq.w	8002838 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d005      	beq.n	80025b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d130      	bne.n	800261a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ee:	2201      	movs	r2, #1
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f003 0201 	and.w	r2, r3, #1
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b03      	cmp	r3, #3
 8002624:	d017      	beq.n	8002656 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d123      	bne.n	80026aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	08da      	lsrs	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3208      	adds	r2, #8
 80026a4:	6939      	ldr	r1, [r7, #16]
 80026a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0203 	and.w	r2, r3, #3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80a6 	beq.w	8002838 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ec:	4b5b      	ldr	r3, [pc, #364]	@ (800285c <HAL_GPIO_Init+0x2e4>)
 80026ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f0:	4a5a      	ldr	r2, [pc, #360]	@ (800285c <HAL_GPIO_Init+0x2e4>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80026f8:	4b58      	ldr	r3, [pc, #352]	@ (800285c <HAL_GPIO_Init+0x2e4>)
 80026fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002704:	4a56      	ldr	r2, [pc, #344]	@ (8002860 <HAL_GPIO_Init+0x2e8>)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800272e:	d01f      	beq.n	8002770 <HAL_GPIO_Init+0x1f8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a4c      	ldr	r2, [pc, #304]	@ (8002864 <HAL_GPIO_Init+0x2ec>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d019      	beq.n	800276c <HAL_GPIO_Init+0x1f4>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a4b      	ldr	r2, [pc, #300]	@ (8002868 <HAL_GPIO_Init+0x2f0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_GPIO_Init+0x1f0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a4a      	ldr	r2, [pc, #296]	@ (800286c <HAL_GPIO_Init+0x2f4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00d      	beq.n	8002764 <HAL_GPIO_Init+0x1ec>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a49      	ldr	r2, [pc, #292]	@ (8002870 <HAL_GPIO_Init+0x2f8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d007      	beq.n	8002760 <HAL_GPIO_Init+0x1e8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a48      	ldr	r2, [pc, #288]	@ (8002874 <HAL_GPIO_Init+0x2fc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_GPIO_Init+0x1e4>
 8002758:	2305      	movs	r3, #5
 800275a:	e00a      	b.n	8002772 <HAL_GPIO_Init+0x1fa>
 800275c:	2306      	movs	r3, #6
 800275e:	e008      	b.n	8002772 <HAL_GPIO_Init+0x1fa>
 8002760:	2304      	movs	r3, #4
 8002762:	e006      	b.n	8002772 <HAL_GPIO_Init+0x1fa>
 8002764:	2303      	movs	r3, #3
 8002766:	e004      	b.n	8002772 <HAL_GPIO_Init+0x1fa>
 8002768:	2302      	movs	r3, #2
 800276a:	e002      	b.n	8002772 <HAL_GPIO_Init+0x1fa>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_GPIO_Init+0x1fa>
 8002770:	2300      	movs	r3, #0
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	f002 0203 	and.w	r2, r2, #3
 8002778:	0092      	lsls	r2, r2, #2
 800277a:	4093      	lsls	r3, r2
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002782:	4937      	ldr	r1, [pc, #220]	@ (8002860 <HAL_GPIO_Init+0x2e8>)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002790:	4b39      	ldr	r3, [pc, #228]	@ (8002878 <HAL_GPIO_Init+0x300>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027b4:	4a30      	ldr	r2, [pc, #192]	@ (8002878 <HAL_GPIO_Init+0x300>)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002878 <HAL_GPIO_Init+0x300>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027de:	4a26      	ldr	r2, [pc, #152]	@ (8002878 <HAL_GPIO_Init+0x300>)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027e4:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <HAL_GPIO_Init+0x300>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002808:	4a1b      	ldr	r2, [pc, #108]	@ (8002878 <HAL_GPIO_Init+0x300>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_GPIO_Init+0x300>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002832:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <HAL_GPIO_Init+0x300>)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3301      	adds	r3, #1
 800283c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	f47f ae9d 	bne.w	8002588 <HAL_GPIO_Init+0x10>
  }
}
 800284e:	bf00      	nop
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40021000 	.word	0x40021000
 8002860:	40010000 	.word	0x40010000
 8002864:	48000400 	.word	0x48000400
 8002868:	48000800 	.word	0x48000800
 800286c:	48000c00 	.word	0x48000c00
 8002870:	48001000 	.word	0x48001000
 8002874:	48001400 	.word	0x48001400
 8002878:	40010400 	.word	0x40010400

0800287c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
 8002888:	4613      	mov	r3, r2
 800288a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800288c:	787b      	ldrb	r3, [r7, #1]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002898:	e002      	b.n	80028a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4013      	ands	r3, r2
 80028c4:	041a      	lsls	r2, r3, #16
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43d9      	mvns	r1, r3
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	400b      	ands	r3, r1
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028ea:	4b08      	ldr	r3, [pc, #32]	@ (800290c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028f6:	4a05      	ldr	r2, [pc, #20]	@ (800290c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f806 	bl	8002910 <HAL_GPIO_EXTI_Callback>
  }
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40010400 	.word	0x40010400

08002910 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0c0      	b.n	8002aba <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f008 fd49 	bl	800b3e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2203      	movs	r2, #3
 8002956:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f005 f85f 	bl	8007a22 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e03e      	b.n	80029e8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	3311      	adds	r3, #17
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	3310      	adds	r3, #16
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	3313      	adds	r3, #19
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	3320      	adds	r3, #32
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3324      	adds	r3, #36	@ 0x24
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	3301      	adds	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	791b      	ldrb	r3, [r3, #4]
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d3bb      	bcc.n	800296a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	e044      	b.n	8002a82 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	791b      	ldrb	r3, [r3, #4]
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3b5      	bcc.n	80029f8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a98:	f004 ffde 	bl	8007a58 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7a9b      	ldrb	r3, [r3, #10]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f001 fc0e 	bl	80042d4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_PCD_Start+0x16>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e012      	b.n	8002afe <HAL_PCD_Start+0x3c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 ff85 	bl	80079f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f006 fd62 	bl	80095b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f006 fd67 	bl	80095e6 <USB_ReadInterrupts>
 8002b18:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fb06 	bl	8003136 <PCD_EP_ISR_Handler>

    return;
 8002b2a:	e110      	b.n	8002d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d013      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b48:	b292      	uxth	r2, r2
 8002b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f008 fcd9 	bl	800b506 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b54:	2100      	movs	r1, #0
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8fc 	bl	8002d54 <HAL_PCD_SetAddress>

    return;
 8002b5c:	e0f7      	b.n	8002d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00c      	beq.n	8002b82 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b7a:	b292      	uxth	r2, r2
 8002b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b80:	e0e5      	b.n	8002d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b9e:	b292      	uxth	r2, r2
 8002ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ba4:	e0d3      	b.n	8002d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d034      	beq.n	8002c1a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0204 	bic.w	r2, r2, #4
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0208 	bic.w	r2, r2, #8
 8002bda:	b292      	uxth	r2, r2
 8002bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f008 fe79 	bl	800b8ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f008 fcbc 	bl	800b578 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c12:	b292      	uxth	r2, r2
 8002c14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c18:	e099      	b.n	8002d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d027      	beq.n	8002c74 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0208 	orr.w	r2, r2, #8
 8002c36:	b292      	uxth	r2, r2
 8002c38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0204 	orr.w	r2, r2, #4
 8002c66:	b292      	uxth	r2, r2
 8002c68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f008 fc69 	bl	800b544 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c72:	e06c      	b.n	8002d4e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d040      	beq.n	8002d00 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c90:	b292      	uxth	r2, r2
 8002c92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d12b      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0204 	orr.w	r2, r2, #4
 8002cb2:	b292      	uxth	r2, r2
 8002cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	b292      	uxth	r2, r2
 8002ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	089b      	lsrs	r3, r3, #2
 8002ce4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002cee:	2101      	movs	r1, #1
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f008 fdfb 	bl	800b8ec <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002cf6:	e02a      	b.n	8002d4e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f008 fc23 	bl	800b544 <HAL_PCD_SuspendCallback>
    return;
 8002cfe:	e026      	b.n	8002d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00f      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f008 fbe1 	bl	800b4ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002d28:	e011      	b.n	8002d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00c      	beq.n	8002d4e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d46:	b292      	uxth	r2, r2
 8002d48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d4c:	bf00      	nop
  }
}
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_PCD_SetAddress+0x1a>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e012      	b.n	8002d94 <HAL_PCD_SetAddress+0x40>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f006 fc03 	bl	8009590 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	70fb      	strb	r3, [r7, #3]
 8002dae:	460b      	mov	r3, r1
 8002db0:	803b      	strh	r3, [r7, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da0e      	bge.n	8002de0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 0207 	and.w	r2, r3, #7
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	3310      	adds	r3, #16
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	705a      	strb	r2, [r3, #1]
 8002dde:	e00e      	b.n	8002dfe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 0207 	and.w	r2, r3, #7
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002e0a:	883b      	ldrh	r3, [r7, #0]
 8002e0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	78ba      	ldrb	r2, [r7, #2]
 8002e18:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e1a:	78bb      	ldrb	r3, [r7, #2]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d102      	bne.n	8002e26 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_EP_Open+0x98>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e00e      	b.n	8002e52 <HAL_PCD_EP_Open+0xb6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fe26 	bl	8007a94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002e50:	7afb      	ldrb	r3, [r7, #11]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da0e      	bge.n	8002e8c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	f003 0207 	and.w	r2, r3, #7
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	705a      	strb	r2, [r3, #1]
 8002e8a:	e00e      	b.n	8002eaa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	f003 0207 	and.w	r2, r3, #7
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_PCD_EP_Close+0x6a>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e00e      	b.n	8002ee2 <HAL_PCD_EP_Close+0x88>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68f9      	ldr	r1, [r7, #12]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f005 fac6 	bl	8008464 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002efa:	7afb      	ldrb	r3, [r7, #11]
 8002efc:	f003 0207 	and.w	r2, r3, #7
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2200      	movs	r2, #0
 8002f28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2a:	7afb      	ldrb	r3, [r7, #11]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6979      	ldr	r1, [r7, #20]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f005 fc7e 	bl	800883e <USB_EPStartXfer>

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 0207 	and.w	r2, r3, #7
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
 8002f8e:	f003 0207 	and.w	r2, r3, #7
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	3310      	adds	r3, #16
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc8:	7afb      	ldrb	r3, [r7, #11]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6979      	ldr	r1, [r7, #20]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f005 fc2f 	bl	800883e <USB_EPStartXfer>

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	7912      	ldrb	r2, [r2, #4]
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e03e      	b.n	8003086 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300c:	2b00      	cmp	r3, #0
 800300e:	da0e      	bge.n	800302e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 0207 	and.w	r2, r3, #7
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	3310      	adds	r3, #16
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	705a      	strb	r2, [r3, #1]
 800302c:	e00c      	b.n	8003048 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_PCD_EP_SetStall+0x7e>
 8003064:	2302      	movs	r3, #2
 8003066:	e00e      	b.n	8003086 <HAL_PCD_EP_SetStall+0x9c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68f9      	ldr	r1, [r7, #12]
 8003076:	4618      	mov	r0, r3
 8003078:	f006 f990 	bl	800939c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	7912      	ldrb	r2, [r2, #4]
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e040      	b.n	800312e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da0e      	bge.n	80030d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	f003 0207 	and.w	r2, r3, #7
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	3310      	adds	r3, #16
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	705a      	strb	r2, [r3, #1]
 80030d0:	e00e      	b.n	80030f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 0207 	and.w	r2, r3, #7
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_EP_ClrStall+0x82>
 800310c:	2302      	movs	r3, #2
 800310e:	e00e      	b.n	800312e <HAL_PCD_EP_ClrStall+0xa0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f006 f98d 	bl	800943e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b092      	sub	sp, #72	@ 0x48
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800313e:	e333      	b.n	80037a8 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003148:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800314a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003156:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 8108 	bne.w	8003370 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003160:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d14c      	bne.n	8003204 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317a:	813b      	strh	r3, [r7, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	893b      	ldrh	r3, [r7, #8]
 8003182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800318a:	b29b      	uxth	r3, r3
 800318c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3310      	adds	r3, #16
 8003192:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800319c:	b29b      	uxth	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	4413      	add	r3, r2
 80031ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	441a      	add	r2, r3
 80031c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031ca:	2100      	movs	r1, #0
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f008 f972 	bl	800b4b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7b1b      	ldrb	r3, [r3, #12]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 82e5 	beq.w	80037a8 <PCD_EP_ISR_Handler+0x672>
 80031de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f040 82e0 	bne.w	80037a8 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7b1b      	ldrb	r3, [r3, #12]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	731a      	strb	r2, [r3, #12]
 8003202:	e2d1      	b.n	80037a8 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800320a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003214:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003216:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800321a:	2b00      	cmp	r3, #0
 800321c:	d032      	beq.n	8003284 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003226:	b29b      	uxth	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	4413      	add	r3, r2
 8003238:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003244:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003252:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003256:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003258:	b29b      	uxth	r3, r3
 800325a:	f006 fa16 	bl	800968a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29a      	uxth	r2, r3
 8003266:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800326a:	4013      	ands	r3, r2
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	897a      	ldrh	r2, [r7, #10]
 8003274:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003278:	b292      	uxth	r2, r2
 800327a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f008 f8ed 	bl	800b45c <HAL_PCD_SetupStageCallback>
 8003282:	e291      	b.n	80037a8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003284:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003288:	2b00      	cmp	r3, #0
 800328a:	f280 828d 	bge.w	80037a8 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29a      	uxth	r2, r3
 8003296:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800329a:	4013      	ands	r3, r2
 800329c:	81fb      	strh	r3, [r7, #14]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	89fa      	ldrh	r2, [r7, #14]
 80032a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032a8:	b292      	uxth	r2, r2
 80032aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d019      	beq.n	8003310 <PCD_EP_ISR_Handler+0x1da>
 80032dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d015      	beq.n	8003310 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ea:	6959      	ldr	r1, [r3, #20]
 80032ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f006 f9c8 	bl	800968a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	441a      	add	r2, r3
 8003304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003306:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003308:	2100      	movs	r1, #0
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f008 f8b8 	bl	800b480 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003318:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800331a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 8242 	bne.w	80037a8 <PCD_EP_ISR_Handler+0x672>
 8003324:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003326:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800332a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800332e:	f000 823b 	beq.w	80037a8 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800333e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003342:	81bb      	strh	r3, [r7, #12]
 8003344:	89bb      	ldrh	r3, [r7, #12]
 8003346:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800334a:	81bb      	strh	r3, [r7, #12]
 800334c:	89bb      	ldrh	r3, [r7, #12]
 800334e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003352:	81bb      	strh	r3, [r7, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	89bb      	ldrh	r3, [r7, #12]
 800335a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800335e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800336a:	b29b      	uxth	r3, r3
 800336c:	8013      	strh	r3, [r2, #0]
 800336e:	e21b      	b.n	80037a8 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003382:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003386:	2b00      	cmp	r3, #0
 8003388:	f280 80f1 	bge.w	800356e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29a      	uxth	r2, r3
 800339e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033a2:	4013      	ands	r3, r2
 80033a4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80033b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033ba:	b292      	uxth	r2, r2
 80033bc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033be:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d6:	7b1b      	ldrb	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d123      	bne.n	8003424 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003400:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003404:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 808b 	beq.w	8003524 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003414:	6959      	ldr	r1, [r3, #20]
 8003416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003418:	88da      	ldrh	r2, [r3, #6]
 800341a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800341e:	f006 f934 	bl	800968a <USB_ReadPMA>
 8003422:	e07f      	b.n	8003524 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003426:	78db      	ldrb	r3, [r3, #3]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d109      	bne.n	8003440 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800342c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800342e:	461a      	mov	r2, r3
 8003430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f9c6 	bl	80037c4 <HAL_PCD_EP_DB_Receive>
 8003438:	4603      	mov	r3, r0
 800343a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800343e:	e071      	b.n	8003524 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	441a      	add	r2, r3
 800346a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800346c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003478:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800347c:	b29b      	uxth	r3, r3
 800347e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d022      	beq.n	80034e0 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80034c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d02c      	beq.n	8003524 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d0:	6959      	ldr	r1, [r3, #20]
 80034d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d4:	891a      	ldrh	r2, [r3, #8]
 80034d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034da:	f006 f8d6 	bl	800968a <USB_ReadPMA>
 80034de:	e021      	b.n	8003524 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	4413      	add	r3, r2
 80034fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003504:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003508:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003516:	6959      	ldr	r1, [r3, #20]
 8003518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800351a:	895a      	ldrh	r2, [r3, #10]
 800351c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003520:	f006 f8b3 	bl	800968a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800352c:	441a      	add	r2, r3
 800352e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003530:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800353a:	441a      	add	r2, r3
 800353c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <PCD_EP_ISR_Handler+0x41e>
 8003548:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800354c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	429a      	cmp	r2, r3
 8003552:	d206      	bcs.n	8003562 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f007 ff90 	bl	800b480 <HAL_PCD_DataOutStageCallback>
 8003560:	e005      	b.n	800356e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003568:	4618      	mov	r0, r3
 800356a:	f005 f968 	bl	800883e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800356e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8117 	beq.w	80037a8 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800357a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	3310      	adds	r3, #16
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80035a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	441a      	add	r2, r3
 80035b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80035ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80035c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c8:	78db      	ldrb	r3, [r3, #3]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	f040 80a1 	bne.w	8003712 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80035d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d2:	2200      	movs	r2, #0
 80035d4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d8:	7b1b      	ldrb	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8092 	beq.w	8003704 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80035e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d046      	beq.n	8003678 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ec:	785b      	ldrb	r3, [r3, #1]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d126      	bne.n	8003640 <PCD_EP_ISR_Handler+0x50a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003600:	b29b      	uxth	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	4413      	add	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	00da      	lsls	r2, r3, #3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	4413      	add	r3, r2
 8003614:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003624:	b29a      	uxth	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003638:	b29a      	uxth	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	801a      	strh	r2, [r3, #0]
 800363e:	e061      	b.n	8003704 <PCD_EP_ISR_Handler+0x5ce>
 8003640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003642:	785b      	ldrb	r3, [r3, #1]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d15d      	bne.n	8003704 <PCD_EP_ISR_Handler+0x5ce>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003656:	b29b      	uxth	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	00da      	lsls	r2, r3, #3
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2200      	movs	r2, #0
 8003674:	801a      	strh	r2, [r3, #0]
 8003676:	e045      	b.n	8003704 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800367e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003680:	785b      	ldrb	r3, [r3, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d126      	bne.n	80036d4 <PCD_EP_ISR_Handler+0x59e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003694:	b29b      	uxth	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	4413      	add	r3, r2
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
 800369e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	00da      	lsls	r2, r3, #3
 80036a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a6:	4413      	add	r3, r2
 80036a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036ac:	623b      	str	r3, [r7, #32]
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	801a      	strh	r2, [r3, #0]
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	801a      	strh	r2, [r3, #0]
 80036d2:	e017      	b.n	8003704 <PCD_EP_ISR_Handler+0x5ce>
 80036d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d113      	bne.n	8003704 <PCD_EP_ISR_Handler+0x5ce>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ea:	4413      	add	r3, r2
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	00da      	lsls	r2, r3, #3
 80036f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f6:	4413      	add	r3, r2
 80036f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003700:	2200      	movs	r2, #0
 8003702:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f007 fed3 	bl	800b4b6 <HAL_PCD_DataInStageCallback>
 8003710:	e04a      	b.n	80037a8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003712:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d13f      	bne.n	800379c <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	4413      	add	r3, r2
 8003736:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003740:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003748:	429a      	cmp	r2, r3
 800374a:	d906      	bls.n	800375a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800374c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800374e:	699a      	ldr	r2, [r3, #24]
 8003750:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003752:	1ad2      	subs	r2, r2, r3
 8003754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003756:	619a      	str	r2, [r3, #24]
 8003758:	e002      	b.n	8003760 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800375a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d106      	bne.n	8003776 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	4619      	mov	r1, r3
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f007 fea1 	bl	800b4b6 <HAL_PCD_DataInStageCallback>
 8003774:	e018      	b.n	80037a8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800377c:	441a      	add	r2, r3
 800377e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003780:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003788:	441a      	add	r2, r3
 800378a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800378c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003794:	4618      	mov	r0, r3
 8003796:	f005 f852 	bl	800883e <USB_EPStartXfer>
 800379a:	e005      	b.n	80037a8 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800379c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800379e:	461a      	mov	r2, r3
 80037a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f917 	bl	80039d6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	b21b      	sxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f6ff acc3 	blt.w	8003140 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3748      	adds	r7, #72	@ 0x48
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d07c      	beq.n	80038d6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	4413      	add	r3, r2
 80037f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003800:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	8b7b      	ldrh	r3, [r7, #26]
 8003808:	429a      	cmp	r2, r3
 800380a:	d306      	bcc.n	800381a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	8b7b      	ldrh	r3, [r7, #26]
 8003812:	1ad2      	subs	r2, r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	619a      	str	r2, [r3, #24]
 8003818:	e002      	b.n	8003820 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d123      	bne.n	8003870 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	b29b      	uxth	r3, r3
 800383a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800383e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003842:	833b      	strh	r3, [r7, #24]
 8003844:	8b3b      	ldrh	r3, [r7, #24]
 8003846:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800384a:	833b      	strh	r3, [r7, #24]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	441a      	add	r2, r3
 800385a:	8b3b      	ldrh	r3, [r7, #24]
 800385c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800386c:	b29b      	uxth	r3, r3
 800386e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01f      	beq.n	80038ba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003894:	82fb      	strh	r3, [r7, #22]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	441a      	add	r2, r3
 80038a4:	8afb      	ldrh	r3, [r7, #22]
 80038a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038ba:	8b7b      	ldrh	r3, [r7, #26]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8085 	beq.w	80039cc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	6959      	ldr	r1, [r3, #20]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	891a      	ldrh	r2, [r3, #8]
 80038ce:	8b7b      	ldrh	r3, [r7, #26]
 80038d0:	f005 fedb 	bl	800968a <USB_ReadPMA>
 80038d4:	e07a      	b.n	80039cc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038de:	b29b      	uxth	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	4413      	add	r3, r2
 80038f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	699a      	ldr	r2, [r3, #24]
 8003900:	8b7b      	ldrh	r3, [r7, #26]
 8003902:	429a      	cmp	r2, r3
 8003904:	d306      	bcc.n	8003914 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	8b7b      	ldrh	r3, [r7, #26]
 800390c:	1ad2      	subs	r2, r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	619a      	str	r2, [r3, #24]
 8003912:	e002      	b.n	800391a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2200      	movs	r2, #0
 8003918:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d123      	bne.n	800396a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393c:	83fb      	strh	r3, [r7, #30]
 800393e:	8bfb      	ldrh	r3, [r7, #30]
 8003940:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003944:	83fb      	strh	r3, [r7, #30]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	441a      	add	r2, r3
 8003954:	8bfb      	ldrh	r3, [r7, #30]
 8003956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800395a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800395e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003966:	b29b      	uxth	r3, r3
 8003968:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d11f      	bne.n	80039b4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800398a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398e:	83bb      	strh	r3, [r7, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	441a      	add	r2, r3
 800399e:	8bbb      	ldrh	r3, [r7, #28]
 80039a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039b4:	8b7b      	ldrh	r3, [r7, #26]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	6959      	ldr	r1, [r3, #20]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	895a      	ldrh	r2, [r3, #10]
 80039c6:	8b7b      	ldrh	r3, [r7, #26]
 80039c8:	f005 fe5f 	bl	800968a <USB_ReadPMA>
    }
  }

  return count;
 80039cc:	8b7b      	ldrh	r3, [r7, #26]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b0a6      	sub	sp, #152	@ 0x98
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	4613      	mov	r3, r2
 80039e2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 81f7 	beq.w	8003dde <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a14:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d907      	bls.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a2c:	1ad2      	subs	r2, r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	619a      	str	r2, [r3, #24]
 8003a32:	e002      	b.n	8003a3a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 80e1 	bne.w	8003c06 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d126      	bne.n	8003a9a <HAL_PCD_EP_DB_Transmit+0xc4>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	4413      	add	r3, r2
 8003a62:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	00da      	lsls	r2, r3, #3
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	801a      	strh	r2, [r3, #0]
 8003a98:	e01a      	b.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	785b      	ldrb	r3, [r3, #1]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d116      	bne.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab6:	4413      	add	r3, r2
 8003ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	00da      	lsls	r2, r3, #3
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003acc:	2200      	movs	r2, #0
 8003ace:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d126      	bne.n	8003b2c <HAL_PCD_EP_DB_Transmit+0x156>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	4413      	add	r3, r2
 8003af4:	623b      	str	r3, [r7, #32]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	00da      	lsls	r2, r3, #3
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	4413      	add	r3, r2
 8003b00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	e017      	b.n	8003b5c <HAL_PCD_EP_DB_Transmit+0x186>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d113      	bne.n	8003b5c <HAL_PCD_EP_DB_Transmit+0x186>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b42:	4413      	add	r3, r2
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	00da      	lsls	r2, r3, #3
 8003b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4e:	4413      	add	r3, r2
 8003b50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	2200      	movs	r2, #0
 8003b5a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	78db      	ldrb	r3, [r3, #3]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d123      	bne.n	8003bac <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b7e:	837b      	strh	r3, [r7, #26]
 8003b80:	8b7b      	ldrh	r3, [r7, #26]
 8003b82:	f083 0320 	eor.w	r3, r3, #32
 8003b86:	837b      	strh	r3, [r7, #26]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	8b7b      	ldrh	r3, [r7, #26]
 8003b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f007 fc7f 	bl	800b4b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01f      	beq.n	8003c02 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bdc:	833b      	strh	r3, [r7, #24]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	441a      	add	r2, r3
 8003bec:	8b3b      	ldrh	r3, [r7, #24]
 8003bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e31f      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d021      	beq.n	8003c54 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	441a      	add	r2, r3
 8003c3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	f040 82ca 	bne.w	80041f4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c68:	441a      	add	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	69da      	ldr	r2, [r3, #28]
 8003c72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c76:	441a      	add	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	6a1a      	ldr	r2, [r3, #32]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d309      	bcc.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	621a      	str	r2, [r3, #32]
 8003c9a:	e015      	b.n	8003cc8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003ca4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003cb2:	e009      	b.n	8003cc8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	785b      	ldrb	r3, [r3, #1]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d15f      	bne.n	8003d90 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce4:	4413      	add	r3, r2
 8003ce6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	00da      	lsls	r2, r3, #3
 8003cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	e051      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d26:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d28:	d816      	bhi.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x382>
 8003d2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	029b      	lsls	r3, r3, #10
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d54:	801a      	strh	r2, [r3, #0]
 8003d56:	e037      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x398>
 8003d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	029b      	lsls	r3, r3, #10
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d8c:	801a      	strh	r2, [r3, #0]
 8003d8e:	e01b      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	785b      	ldrb	r3, [r3, #1]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d117      	bne.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dac:	4413      	add	r3, r2
 8003dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	00da      	lsls	r2, r3, #3
 8003db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003db8:	4413      	add	r3, r2
 8003dba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dc6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6959      	ldr	r1, [r3, #20]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	891a      	ldrh	r2, [r3, #8]
 8003dd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f005 fc15 	bl	8009606 <USB_WritePMA>
 8003ddc:	e20a      	b.n	80041f4 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e02:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d307      	bcc.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e1a:	1ad2      	subs	r2, r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	619a      	str	r2, [r3, #24]
 8003e20:	e002      	b.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f040 80f6 	bne.w	800401e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	785b      	ldrb	r3, [r3, #1]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d126      	bne.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e4e:	4413      	add	r3, r2
 8003e50:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	00da      	lsls	r2, r3, #3
 8003e58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e60:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e70:	801a      	strh	r2, [r3, #0]
 8003e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	e01a      	b.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d116      	bne.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ea4:	4413      	add	r3, r2
 8003ea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	00da      	lsls	r2, r3, #3
 8003eae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003eb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eba:	2200      	movs	r2, #0
 8003ebc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	785b      	ldrb	r3, [r3, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d12f      	bne.n	8003f2e <HAL_PCD_EP_DB_Transmit+0x558>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	00da      	lsls	r2, r3, #3
 8003ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003efc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f12:	801a      	strh	r2, [r3, #0]
 8003f14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	e01c      	b.n	8003f68 <HAL_PCD_EP_DB_Transmit+0x592>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	785b      	ldrb	r3, [r3, #1]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d118      	bne.n	8003f68 <HAL_PCD_EP_DB_Transmit+0x592>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f46:	4413      	add	r3, r2
 8003f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	00da      	lsls	r2, r3, #3
 8003f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f56:	4413      	add	r3, r2
 8003f58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f64:	2200      	movs	r2, #0
 8003f66:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	78db      	ldrb	r3, [r3, #3]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d127      	bne.n	8003fc0 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f8a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003f8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003f92:	f083 0320 	eor.w	r3, r3, #32
 8003f96:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	441a      	add	r2, r3
 8003fa8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003fac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f007 fa75 	bl	800b4b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d121      	bne.n	800401a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	441a      	add	r2, r3
 8004002:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800400a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800400e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004016:	b29b      	uxth	r3, r3
 8004018:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e113      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d121      	bne.n	800406c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800403e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004042:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	441a      	add	r2, r3
 8004054:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800405c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004060:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004068:	b29b      	uxth	r3, r3
 800406a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004072:	2b01      	cmp	r3, #1
 8004074:	f040 80be 	bne.w	80041f4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004080:	441a      	add	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800408e:	441a      	add	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d309      	bcc.n	80040b4 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6a1a      	ldr	r2, [r3, #32]
 80040aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ac:	1ad2      	subs	r2, r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	621a      	str	r2, [r3, #32]
 80040b2:	e015      	b.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d107      	bne.n	80040cc <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80040bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80040c0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80040ca:	e009      	b.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2200      	movs	r2, #0
 80040d6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	785b      	ldrb	r3, [r3, #1]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d15f      	bne.n	80041ae <HAL_PCD_EP_DB_Transmit+0x7d8>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004102:	4413      	add	r3, r2
 8004104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	00da      	lsls	r2, r3, #3
 800410c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800410e:	4413      	add	r3, r2
 8004110:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004114:	667b      	str	r3, [r7, #100]	@ 0x64
 8004116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004120:	b29a      	uxth	r2, r3
 8004122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004124:	801a      	strh	r2, [r3, #0]
 8004126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <HAL_PCD_EP_DB_Transmit+0x76c>
 800412c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800413a:	b29a      	uxth	r2, r3
 800413c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800413e:	801a      	strh	r2, [r3, #0]
 8004140:	e04e      	b.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004144:	2b3e      	cmp	r3, #62	@ 0x3e
 8004146:	d816      	bhi.n	8004176 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004148:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	663b      	str	r3, [r7, #96]	@ 0x60
 800414e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_PCD_EP_DB_Transmit+0x788>
 8004158:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800415a:	3301      	adds	r3, #1
 800415c:	663b      	str	r3, [r7, #96]	@ 0x60
 800415e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29a      	uxth	r2, r3
 8004164:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004166:	b29b      	uxth	r3, r3
 8004168:	029b      	lsls	r3, r3, #10
 800416a:	b29b      	uxth	r3, r3
 800416c:	4313      	orrs	r3, r2
 800416e:	b29a      	uxth	r2, r3
 8004170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	e034      	b.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004176:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	663b      	str	r3, [r7, #96]	@ 0x60
 800417c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004188:	3b01      	subs	r3, #1
 800418a:	663b      	str	r3, [r7, #96]	@ 0x60
 800418c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b29a      	uxth	r2, r3
 8004192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004194:	b29b      	uxth	r3, r3
 8004196:	029b      	lsls	r3, r3, #10
 8004198:	b29b      	uxth	r3, r3
 800419a:	4313      	orrs	r3, r2
 800419c:	b29b      	uxth	r3, r3
 800419e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	e018      	b.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x80a>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	785b      	ldrb	r3, [r3, #1]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d114      	bne.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x80a>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041be:	b29b      	uxth	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041c4:	4413      	add	r3, r2
 80041c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	00da      	lsls	r2, r3, #3
 80041ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d0:	4413      	add	r3, r2
 80041d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041da:	b29a      	uxth	r2, r3
 80041dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6959      	ldr	r1, [r3, #20]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	895a      	ldrh	r2, [r3, #10]
 80041ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f005 fa09 	bl	8009606 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800420a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800420e:	82fb      	strh	r3, [r7, #22]
 8004210:	8afb      	ldrh	r3, [r7, #22]
 8004212:	f083 0310 	eor.w	r3, r3, #16
 8004216:	82fb      	strh	r3, [r7, #22]
 8004218:	8afb      	ldrh	r3, [r7, #22]
 800421a:	f083 0320 	eor.w	r3, r3, #32
 800421e:	82fb      	strh	r3, [r7, #22]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	441a      	add	r2, r3
 800422e:	8afb      	ldrh	r3, [r7, #22]
 8004230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800423c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004240:	b29b      	uxth	r3, r3
 8004242:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3798      	adds	r7, #152	@ 0x98
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800424e:	b480      	push	{r7}
 8004250:	b087      	sub	sp, #28
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	607b      	str	r3, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	817b      	strh	r3, [r7, #10]
 800425c:	4613      	mov	r3, r2
 800425e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004260:	897b      	ldrh	r3, [r7, #10]
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00b      	beq.n	8004284 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426c:	897b      	ldrh	r3, [r7, #10]
 800426e:	f003 0207 	and.w	r2, r3, #7
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	3310      	adds	r3, #16
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e009      	b.n	8004298 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004284:	897a      	ldrh	r2, [r7, #10]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004298:	893b      	ldrh	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d107      	bne.n	80042ae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2200      	movs	r2, #0
 80042a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	80da      	strh	r2, [r3, #6]
 80042ac:	e00b      	b.n	80042c6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2201      	movs	r2, #1
 80042b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800430c:	b29b      	uxth	r3, r3
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d141      	bne.n	80043ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004336:	4b4b      	ldr	r3, [pc, #300]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004342:	d131      	bne.n	80043a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004344:	4b47      	ldr	r3, [pc, #284]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800434a:	4a46      	ldr	r2, [pc, #280]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004350:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004354:	4b43      	ldr	r3, [pc, #268]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800435c:	4a41      	ldr	r2, [pc, #260]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004362:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004364:	4b40      	ldr	r3, [pc, #256]	@ (8004468 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2232      	movs	r2, #50	@ 0x32
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	4a3f      	ldr	r2, [pc, #252]	@ (800446c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	0c9b      	lsrs	r3, r3, #18
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800437a:	e002      	b.n	8004382 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3b01      	subs	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004382:	4b38      	ldr	r3, [pc, #224]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438e:	d102      	bne.n	8004396 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f2      	bne.n	800437c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004396:	4b33      	ldr	r3, [pc, #204]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a2:	d158      	bne.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e057      	b.n	8004458 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043b8:	e04d      	b.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c0:	d141      	bne.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043c2:	4b28      	ldr	r3, [pc, #160]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ce:	d131      	bne.n	8004434 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043d0:	4b24      	ldr	r3, [pc, #144]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043d6:	4a23      	ldr	r2, [pc, #140]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043e0:	4b20      	ldr	r3, [pc, #128]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004468 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2232      	movs	r2, #50	@ 0x32
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004400:	0c9b      	lsrs	r3, r3, #18
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004406:	e002      	b.n	800440e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3b01      	subs	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800440e:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800441a:	d102      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f2      	bne.n	8004408 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004422:	4b10      	ldr	r3, [pc, #64]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442e:	d112      	bne.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e011      	b.n	8004458 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004434:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800443a:	4a0a      	ldr	r2, [pc, #40]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004444:	e007      	b.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004446:	4b07      	ldr	r3, [pc, #28]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800444e:	4a05      	ldr	r2, [pc, #20]	@ (8004464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004450:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004454:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40007000 	.word	0x40007000
 8004468:	20000000 	.word	0x20000000
 800446c:	431bde83 	.word	0x431bde83

08004470 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a04      	ldr	r2, [pc, #16]	@ (800448c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800447a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800447e:	6093      	str	r3, [r2, #8]
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40007000 	.word	0x40007000

08004490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e2fe      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d075      	beq.n	800459a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ae:	4b97      	ldr	r3, [pc, #604]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b8:	4b94      	ldr	r3, [pc, #592]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b0c      	cmp	r3, #12
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_OscConfig+0x3e>
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d002      	beq.n	80044d4 <HAL_RCC_OscConfig+0x44>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d10b      	bne.n	80044ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	4b8d      	ldr	r3, [pc, #564]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d05b      	beq.n	8004598 <HAL_RCC_OscConfig+0x108>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d157      	bne.n	8004598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e2d9      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f4:	d106      	bne.n	8004504 <HAL_RCC_OscConfig+0x74>
 80044f6:	4b85      	ldr	r3, [pc, #532]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a84      	ldr	r2, [pc, #528]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e01d      	b.n	8004540 <HAL_RCC_OscConfig+0xb0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x98>
 800450e:	4b7f      	ldr	r3, [pc, #508]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a7e      	ldr	r2, [pc, #504]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b7c      	ldr	r3, [pc, #496]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a7b      	ldr	r2, [pc, #492]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0xb0>
 8004528:	4b78      	ldr	r3, [pc, #480]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a77      	ldr	r2, [pc, #476]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b75      	ldr	r3, [pc, #468]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a74      	ldr	r2, [pc, #464]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800453a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd fba6 	bl	8001c98 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fd fba2 	bl	8001c98 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e29e      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004562:	4b6a      	ldr	r3, [pc, #424]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0xc0>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fd fb92 	bl	8001c98 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fd fb8e 	bl	8001c98 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	@ 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e28a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800458a:	4b60      	ldr	r3, [pc, #384]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0xe8>
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d075      	beq.n	8004692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a6:	4b59      	ldr	r3, [pc, #356]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045b0:	4b56      	ldr	r3, [pc, #344]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b0c      	cmp	r3, #12
 80045be:	d102      	bne.n	80045c6 <HAL_RCC_OscConfig+0x136>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d002      	beq.n	80045cc <HAL_RCC_OscConfig+0x13c>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d11f      	bne.n	800460c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045cc:	4b4f      	ldr	r3, [pc, #316]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_OscConfig+0x154>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e25d      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e4:	4b49      	ldr	r3, [pc, #292]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	4946      	ldr	r1, [pc, #280]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045f8:	4b45      	ldr	r3, [pc, #276]	@ (8004710 <HAL_RCC_OscConfig+0x280>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fd faff 	bl	8001c00 <HAL_InitTick>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d043      	beq.n	8004690 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e249      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d023      	beq.n	800465c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004614:	4b3d      	ldr	r3, [pc, #244]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a3c      	ldr	r2, [pc, #240]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800461a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fd fb3a 	bl	8001c98 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004628:	f7fd fb36 	bl	8001c98 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e232      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800463a:	4b34      	ldr	r3, [pc, #208]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004646:	4b31      	ldr	r3, [pc, #196]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	061b      	lsls	r3, r3, #24
 8004654:	492d      	ldr	r1, [pc, #180]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]
 800465a:	e01a      	b.n	8004692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465c:	4b2b      	ldr	r3, [pc, #172]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2a      	ldr	r2, [pc, #168]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004662:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fd fb16 	bl	8001c98 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004670:	f7fd fb12 	bl	8001c98 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e20e      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004682:	4b22      	ldr	r3, [pc, #136]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x1e0>
 800468e:	e000      	b.n	8004692 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d041      	beq.n	8004722 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a6:	4b19      	ldr	r3, [pc, #100]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80046a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ac:	4a17      	ldr	r2, [pc, #92]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fd faef 	bl	8001c98 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046be:	f7fd faeb 	bl	8001c98 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e1e7      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046d0:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80046d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0ef      	beq.n	80046be <HAL_RCC_OscConfig+0x22e>
 80046de:	e020      	b.n	8004722 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e0:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80046e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e6:	4a09      	ldr	r2, [pc, #36]	@ (800470c <HAL_RCC_OscConfig+0x27c>)
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fd fad2 	bl	8001c98 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f6:	e00d      	b.n	8004714 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f8:	f7fd face 	bl	8001c98 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d906      	bls.n	8004714 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1ca      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004714:	4b8c      	ldr	r3, [pc, #560]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1ea      	bne.n	80046f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80a6 	beq.w	800487c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004730:	2300      	movs	r3, #0
 8004732:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004734:	4b84      	ldr	r3, [pc, #528]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_OscConfig+0x2b4>
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x2b6>
 8004744:	2300      	movs	r3, #0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00d      	beq.n	8004766 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	4b7f      	ldr	r3, [pc, #508]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474e:	4a7e      	ldr	r2, [pc, #504]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	@ 0x58
 8004756:	4b7c      	ldr	r3, [pc, #496]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004762:	2301      	movs	r3, #1
 8004764:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004766:	4b79      	ldr	r3, [pc, #484]	@ (800494c <HAL_RCC_OscConfig+0x4bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d118      	bne.n	80047a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004772:	4b76      	ldr	r3, [pc, #472]	@ (800494c <HAL_RCC_OscConfig+0x4bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a75      	ldr	r2, [pc, #468]	@ (800494c <HAL_RCC_OscConfig+0x4bc>)
 8004778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800477c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477e:	f7fd fa8b 	bl	8001c98 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004786:	f7fd fa87 	bl	8001c98 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e183      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004798:	4b6c      	ldr	r3, [pc, #432]	@ (800494c <HAL_RCC_OscConfig+0x4bc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d108      	bne.n	80047be <HAL_RCC_OscConfig+0x32e>
 80047ac:	4b66      	ldr	r3, [pc, #408]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b2:	4a65      	ldr	r2, [pc, #404]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047bc:	e024      	b.n	8004808 <HAL_RCC_OscConfig+0x378>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d110      	bne.n	80047e8 <HAL_RCC_OscConfig+0x358>
 80047c6:	4b60      	ldr	r3, [pc, #384]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047cc:	4a5e      	ldr	r2, [pc, #376]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047e6:	e00f      	b.n	8004808 <HAL_RCC_OscConfig+0x378>
 80047e8:	4b57      	ldr	r3, [pc, #348]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ee:	4a56      	ldr	r2, [pc, #344]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047f8:	4b53      	ldr	r3, [pc, #332]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	4a52      	ldr	r2, [pc, #328]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004800:	f023 0304 	bic.w	r3, r3, #4
 8004804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d016      	beq.n	800483e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fd fa42 	bl	8001c98 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004816:	e00a      	b.n	800482e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004818:	f7fd fa3e 	bl	8001c98 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e138      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482e:	4b46      	ldr	r3, [pc, #280]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ed      	beq.n	8004818 <HAL_RCC_OscConfig+0x388>
 800483c:	e015      	b.n	800486a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483e:	f7fd fa2b 	bl	8001c98 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004844:	e00a      	b.n	800485c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fd fa27 	bl	8001c98 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e121      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800485c:	4b3a      	ldr	r3, [pc, #232]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1ed      	bne.n	8004846 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800486a:	7ffb      	ldrb	r3, [r7, #31]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d105      	bne.n	800487c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004870:	4b35      	ldr	r3, [pc, #212]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004874:	4a34      	ldr	r2, [pc, #208]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800487a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03c      	beq.n	8004902 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01c      	beq.n	80048ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004890:	4b2d      	ldr	r3, [pc, #180]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004896:	4a2c      	ldr	r2, [pc, #176]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7fd f9fa 	bl	8001c98 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048a8:	f7fd f9f6 	bl	8001c98 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0f2      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048ba:	4b23      	ldr	r3, [pc, #140]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80048bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ef      	beq.n	80048a8 <HAL_RCC_OscConfig+0x418>
 80048c8:	e01b      	b.n	8004902 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80048cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fd f9dd 	bl	8001c98 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048e2:	f7fd f9d9 	bl	8001c98 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0d5      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048f4:	4b14      	ldr	r3, [pc, #80]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ef      	bne.n	80048e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80c9 	beq.w	8004a9e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800490c:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 030c 	and.w	r3, r3, #12
 8004914:	2b0c      	cmp	r3, #12
 8004916:	f000 8083 	beq.w	8004a20 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d15e      	bne.n	80049e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a08      	ldr	r2, [pc, #32]	@ (8004948 <HAL_RCC_OscConfig+0x4b8>)
 8004928:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800492c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fd f9b3 	bl	8001c98 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004934:	e00c      	b.n	8004950 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7fd f9af 	bl	8001c98 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d905      	bls.n	8004950 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e0ab      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
 8004948:	40021000 	.word	0x40021000
 800494c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004950:	4b55      	ldr	r3, [pc, #340]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1ec      	bne.n	8004936 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800495c:	4b52      	ldr	r3, [pc, #328]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	4b52      	ldr	r3, [pc, #328]	@ (8004aac <HAL_RCC_OscConfig+0x61c>)
 8004962:	4013      	ands	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6a11      	ldr	r1, [r2, #32]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800496c:	3a01      	subs	r2, #1
 800496e:	0112      	lsls	r2, r2, #4
 8004970:	4311      	orrs	r1, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004976:	0212      	lsls	r2, r2, #8
 8004978:	4311      	orrs	r1, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800497e:	0852      	lsrs	r2, r2, #1
 8004980:	3a01      	subs	r2, #1
 8004982:	0552      	lsls	r2, r2, #21
 8004984:	4311      	orrs	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800498a:	0852      	lsrs	r2, r2, #1
 800498c:	3a01      	subs	r2, #1
 800498e:	0652      	lsls	r2, r2, #25
 8004990:	4311      	orrs	r1, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004996:	06d2      	lsls	r2, r2, #27
 8004998:	430a      	orrs	r2, r1
 800499a:	4943      	ldr	r1, [pc, #268]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 800499c:	4313      	orrs	r3, r2
 800499e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a0:	4b41      	ldr	r3, [pc, #260]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a40      	ldr	r2, [pc, #256]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049ac:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a3d      	ldr	r2, [pc, #244]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fd f96e 	bl	8001c98 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fd f96a 	bl	8001c98 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e066      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d2:	4b35      	ldr	r3, [pc, #212]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x530>
 80049de:	e05e      	b.n	8004a9e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e0:	4b31      	ldr	r3, [pc, #196]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a30      	ldr	r2, [pc, #192]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 80049e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fd f954 	bl	8001c98 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fd f950 	bl	8001c98 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e04c      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a06:	4b28      	ldr	r3, [pc, #160]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a12:	4b25      	ldr	r3, [pc, #148]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	4924      	ldr	r1, [pc, #144]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 8004a18:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <HAL_RCC_OscConfig+0x620>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	60cb      	str	r3, [r1, #12]
 8004a1e:	e03e      	b.n	8004a9e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e039      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa8 <HAL_RCC_OscConfig+0x618>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f003 0203 	and.w	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d12c      	bne.n	8004a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d123      	bne.n	8004a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d11b      	bne.n	8004a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d113      	bne.n	8004a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d109      	bne.n	8004a9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	3b01      	subs	r3, #1
 8004a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	019f800c 	.word	0x019f800c
 8004ab0:	feeefffc 	.word	0xfeeefffc

08004ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e11e      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	4b91      	ldr	r3, [pc, #580]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b8e      	ldr	r3, [pc, #568]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 020f 	bic.w	r2, r3, #15
 8004ae2:	498c      	ldr	r1, [pc, #560]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b8a      	ldr	r3, [pc, #552]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e106      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d073      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d129      	bne.n	8004b64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b10:	4b81      	ldr	r3, [pc, #516]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0f4      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b20:	f000 f99e 	bl	8004e60 <RCC_GetSysClockFreqFromPLLSource>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4a7c      	ldr	r2, [pc, #496]	@ (8004d1c <HAL_RCC_ClockConfig+0x268>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d93f      	bls.n	8004bae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d033      	beq.n	8004bae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d12f      	bne.n	8004bae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b4e:	4b72      	ldr	r3, [pc, #456]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b56:	4a70      	ldr	r2, [pc, #448]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b5e:	2380      	movs	r3, #128	@ 0x80
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e024      	b.n	8004bae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0c6      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7c:	4b66      	ldr	r3, [pc, #408]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0be      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b8c:	f000 f8ce 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004b90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4a61      	ldr	r2, [pc, #388]	@ (8004d1c <HAL_RCC_ClockConfig+0x268>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d909      	bls.n	8004bae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ba2:	4a5d      	ldr	r2, [pc, #372]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bae:	4b5a      	ldr	r3, [pc, #360]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 0203 	bic.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4957      	ldr	r1, [pc, #348]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc0:	f7fd f86a 	bl	8001c98 <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc8:	f7fd f866 	bl	8001c98 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e095      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	4b4e      	ldr	r3, [pc, #312]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 020c 	and.w	r2, r3, #12
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d1eb      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d023      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c08:	4b43      	ldr	r3, [pc, #268]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a42      	ldr	r2, [pc, #264]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c20:	4b3d      	ldr	r3, [pc, #244]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c28:	4a3b      	ldr	r2, [pc, #236]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c30:	4b39      	ldr	r3, [pc, #228]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4936      	ldr	r1, [pc, #216]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2b80      	cmp	r3, #128	@ 0x80
 8004c48:	d105      	bne.n	8004c56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c4a:	4b33      	ldr	r3, [pc, #204]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4a32      	ldr	r2, [pc, #200]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004c50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c56:	4b2f      	ldr	r3, [pc, #188]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d21d      	bcs.n	8004ca0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c64:	4b2b      	ldr	r3, [pc, #172]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 020f 	bic.w	r2, r3, #15
 8004c6c:	4929      	ldr	r1, [pc, #164]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c74:	f7fd f810 	bl	8001c98 <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fd f80c 	bl	8001c98 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e03b      	b.n	8004d0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b20      	ldr	r3, [pc, #128]	@ (8004d14 <HAL_RCC_ClockConfig+0x260>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d1ed      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cac:	4b1a      	ldr	r3, [pc, #104]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4917      	ldr	r1, [pc, #92]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cca:	4b13      	ldr	r3, [pc, #76]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	490f      	ldr	r1, [pc, #60]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cde:	f000 f825 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <HAL_RCC_ClockConfig+0x264>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	490c      	ldr	r1, [pc, #48]	@ (8004d20 <HAL_RCC_ClockConfig+0x26c>)
 8004cf0:	5ccb      	ldrb	r3, [r1, r3]
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8004d24 <HAL_RCC_ClockConfig+0x270>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <HAL_RCC_ClockConfig+0x274>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fc ff7c 	bl	8001c00 <HAL_InitTick>
 8004d08:	4603      	mov	r3, r0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40022000 	.word	0x40022000
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	04c4b400 	.word	0x04c4b400
 8004d20:	0800cb44 	.word	0x0800cb44
 8004d24:	20000000 	.word	0x20000000
 8004d28:	2000009c 	.word	0x2000009c

08004d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d32:	4b2c      	ldr	r3, [pc, #176]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d102      	bne.n	8004d44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	e047      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d44:	4b27      	ldr	r3, [pc, #156]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 030c 	and.w	r3, r3, #12
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d102      	bne.n	8004d56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d50:	4b26      	ldr	r3, [pc, #152]	@ (8004dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	e03e      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d56:	4b23      	ldr	r3, [pc, #140]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d136      	bne.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d62:	4b20      	ldr	r3, [pc, #128]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	3301      	adds	r3, #1
 8004d78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d10c      	bne.n	8004d9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d80:	4a1a      	ldr	r2, [pc, #104]	@ (8004dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	4a16      	ldr	r2, [pc, #88]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d8a:	68d2      	ldr	r2, [r2, #12]
 8004d8c:	0a12      	lsrs	r2, r2, #8
 8004d8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	617b      	str	r3, [r7, #20]
      break;
 8004d98:	e00c      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d9a:	4a13      	ldr	r2, [pc, #76]	@ (8004de8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	4a10      	ldr	r2, [pc, #64]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004da4:	68d2      	ldr	r2, [r2, #12]
 8004da6:	0a12      	lsrs	r2, r2, #8
 8004da8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
      break;
 8004db2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004db4:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	0e5b      	lsrs	r3, r3, #25
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e001      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004dd4:	693b      	ldr	r3, [r7, #16]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000
 8004de8:	00f42400 	.word	0x00f42400
 8004dec:	016e3600 	.word	0x016e3600

08004df0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df4:	4b03      	ldr	r3, [pc, #12]	@ (8004e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004df6:	681b      	ldr	r3, [r3, #0]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000000 	.word	0x20000000

08004e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e0c:	f7ff fff0 	bl	8004df0 <HAL_RCC_GetHCLKFreq>
 8004e10:	4602      	mov	r2, r0
 8004e12:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	4904      	ldr	r1, [pc, #16]	@ (8004e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e1e:	5ccb      	ldrb	r3, [r1, r3]
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	0800cb54 	.word	0x0800cb54

08004e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e38:	f7ff ffda 	bl	8004df0 <HAL_RCC_GetHCLKFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	0adb      	lsrs	r3, r3, #11
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4904      	ldr	r1, [pc, #16]	@ (8004e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	0800cb54 	.word	0x0800cb54

08004e60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e66:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d10c      	bne.n	8004e9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e84:	4a17      	ldr	r2, [pc, #92]	@ (8004ee4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e8e:	68d2      	ldr	r2, [r2, #12]
 8004e90:	0a12      	lsrs	r2, r2, #8
 8004e92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	617b      	str	r3, [r7, #20]
    break;
 8004e9c:	e00c      	b.n	8004eb8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e9e:	4a12      	ldr	r2, [pc, #72]	@ (8004ee8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ea8:	68d2      	ldr	r2, [r2, #12]
 8004eaa:	0a12      	lsrs	r2, r2, #8
 8004eac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004eb0:	fb02 f303 	mul.w	r3, r2, r3
 8004eb4:	617b      	str	r3, [r7, #20]
    break;
 8004eb6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	0e5b      	lsrs	r3, r3, #25
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ed2:	687b      	ldr	r3, [r7, #4]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	016e3600 	.word	0x016e3600
 8004ee8:	00f42400 	.word	0x00f42400

08004eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ef8:	2300      	movs	r3, #0
 8004efa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8098 	beq.w	800503a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0e:	4b43      	ldr	r3, [pc, #268]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10d      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1a:	4b40      	ldr	r3, [pc, #256]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f26:	4b3d      	ldr	r3, [pc, #244]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f32:	2301      	movs	r3, #1
 8004f34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f36:	4b3a      	ldr	r3, [pc, #232]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a39      	ldr	r2, [pc, #228]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f42:	f7fc fea9 	bl	8001c98 <HAL_GetTick>
 8004f46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f48:	e009      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4a:	f7fc fea5 	bl	8001c98 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d902      	bls.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	74fb      	strb	r3, [r7, #19]
        break;
 8004f5c:	e005      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f5e:	4b30      	ldr	r3, [pc, #192]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0ef      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f6a:	7cfb      	ldrb	r3, [r7, #19]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d159      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f70:	4b2a      	ldr	r3, [pc, #168]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01e      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d019      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f8c:	4b23      	ldr	r3, [pc, #140]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f98:	4b20      	ldr	r3, [pc, #128]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fae:	4a1b      	ldr	r2, [pc, #108]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fb8:	4a18      	ldr	r2, [pc, #96]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fc fe65 	bl	8001c98 <HAL_GetTick>
 8004fce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd0:	e00b      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd2:	f7fc fe61 	bl	8001c98 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d902      	bls.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	74fb      	strb	r3, [r7, #19]
            break;
 8004fe8:	e006      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fea:	4b0c      	ldr	r3, [pc, #48]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ec      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ffe:	4b07      	ldr	r3, [pc, #28]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	4903      	ldr	r1, [pc, #12]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	74bb      	strb	r3, [r7, #18]
 800501a:	e005      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800501c:	40021000 	.word	0x40021000
 8005020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005028:	7c7b      	ldrb	r3, [r7, #17]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d105      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502e:	4ba6      	ldr	r3, [pc, #664]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005032:	4aa5      	ldr	r2, [pc, #660]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005038:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005046:	4ba0      	ldr	r3, [pc, #640]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504c:	f023 0203 	bic.w	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	499c      	ldr	r1, [pc, #624]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005068:	4b97      	ldr	r3, [pc, #604]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506e:	f023 020c 	bic.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	4994      	ldr	r1, [pc, #592]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800508a:	4b8f      	ldr	r3, [pc, #572]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	498b      	ldr	r1, [pc, #556]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ac:	4b86      	ldr	r3, [pc, #536]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	4983      	ldr	r1, [pc, #524]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050ce:	4b7e      	ldr	r3, [pc, #504]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	497a      	ldr	r1, [pc, #488]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050f0:	4b75      	ldr	r3, [pc, #468]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	4972      	ldr	r1, [pc, #456]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005112:	4b6d      	ldr	r3, [pc, #436]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005118:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	4969      	ldr	r1, [pc, #420]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005134:	4b64      	ldr	r3, [pc, #400]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	4961      	ldr	r1, [pc, #388]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005156:	4b5c      	ldr	r3, [pc, #368]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	4958      	ldr	r1, [pc, #352]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d015      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005178:	4b53      	ldr	r3, [pc, #332]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	4950      	ldr	r1, [pc, #320]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005196:	d105      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005198:	4b4b      	ldr	r3, [pc, #300]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4a4a      	ldr	r2, [pc, #296]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051a2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051b0:	4b45      	ldr	r3, [pc, #276]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	4942      	ldr	r1, [pc, #264]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051ce:	d105      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d0:	4b3d      	ldr	r3, [pc, #244]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a3c      	ldr	r2, [pc, #240]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051da:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051e8:	4b37      	ldr	r3, [pc, #220]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f6:	4934      	ldr	r1, [pc, #208]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005206:	d105      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005208:	4b2f      	ldr	r3, [pc, #188]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a2e      	ldr	r2, [pc, #184]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005212:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d015      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005220:	4b29      	ldr	r3, [pc, #164]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522e:	4926      	ldr	r1, [pc, #152]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005240:	4b21      	ldr	r3, [pc, #132]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a20      	ldr	r2, [pc, #128]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800524a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005258:	4b1b      	ldr	r3, [pc, #108]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005266:	4918      	ldr	r1, [pc, #96]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005276:	d105      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005278:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a12      	ldr	r2, [pc, #72]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005282:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d015      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005290:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529e:	490a      	ldr	r1, [pc, #40]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ae:	d105      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052b0:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a04      	ldr	r2, [pc, #16]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000

080052cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e049      	b.n	8005372 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fb fe32 	bl	8000f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f000 fb12 	bl	8005934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d001      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e04a      	b.n	800542a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a21      	ldr	r2, [pc, #132]	@ (8005438 <HAL_TIM_Base_Start_IT+0xbc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d018      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x6c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053be:	d013      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x6c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1d      	ldr	r2, [pc, #116]	@ (800543c <HAL_TIM_Base_Start_IT+0xc0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00e      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x6c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005440 <HAL_TIM_Base_Start_IT+0xc4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d009      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x6c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005444 <HAL_TIM_Base_Start_IT+0xc8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x6c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a19      	ldr	r2, [pc, #100]	@ (8005448 <HAL_TIM_Base_Start_IT+0xcc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d115      	bne.n	8005414 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	4b17      	ldr	r3, [pc, #92]	@ (800544c <HAL_TIM_Base_Start_IT+0xd0>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b06      	cmp	r3, #6
 80053f8:	d015      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0xaa>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005400:	d011      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005412:	e008      	b.n	8005426 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	e000      	b.n	8005428 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40013400 	.word	0x40013400
 8005448:	40014000 	.word	0x40014000
 800544c:	00010007 	.word	0x00010007

08005450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d020      	beq.n	80054b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01b      	beq.n	80054b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0202 	mvn.w	r2, #2
 8005484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa2c 	bl	80058f8 <HAL_TIM_IC_CaptureCallback>
 80054a0:	e005      	b.n	80054ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa1e 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa2f 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d020      	beq.n	8005500 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01b      	beq.n	8005500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0204 	mvn.w	r2, #4
 80054d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa06 	bl	80058f8 <HAL_TIM_IC_CaptureCallback>
 80054ec:	e005      	b.n	80054fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f9f8 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fa09 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d020      	beq.n	800554c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01b      	beq.n	800554c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0208 	mvn.w	r2, #8
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2204      	movs	r2, #4
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f9e0 	bl	80058f8 <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f9d2 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f9e3 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	d020      	beq.n	8005598 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01b      	beq.n	8005598 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0210 	mvn.w	r2, #16
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2208      	movs	r2, #8
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f9ba 	bl	80058f8 <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f9ac 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f9bd 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00c      	beq.n	80055bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0201 	mvn.w	r2, #1
 80055b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fb fb0e 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00c      	beq.n	80055ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb69 	bl	8005cbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00c      	beq.n	800560e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fb61 	bl	8005cd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00c      	beq.n	8005632 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800562a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f977 	bl	8005920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00c      	beq.n	8005656 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f06f 0220 	mvn.w	r2, #32
 800564e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fb29 	bl	8005ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00c      	beq.n	800567a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d007      	beq.n	800567a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fb35 	bl	8005ce4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00c      	beq.n	800569e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fb2d 	bl	8005cf8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00c      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80056ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fb25 	bl	8005d0c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80056de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fb1d 	bl	8005d20 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_TIM_ConfigClockSource+0x1c>
 8005708:	2302      	movs	r3, #2
 800570a:	e0de      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x1da>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800572a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800572e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a63      	ldr	r2, [pc, #396]	@ (80058d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	f000 80a9 	beq.w	800589e <HAL_TIM_ConfigClockSource+0x1ae>
 800574c:	4a61      	ldr	r2, [pc, #388]	@ (80058d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	f200 80ae 	bhi.w	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005754:	4a60      	ldr	r2, [pc, #384]	@ (80058d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	f000 80a1 	beq.w	800589e <HAL_TIM_ConfigClockSource+0x1ae>
 800575c:	4a5e      	ldr	r2, [pc, #376]	@ (80058d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	f200 80a6 	bhi.w	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005764:	4a5d      	ldr	r2, [pc, #372]	@ (80058dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005766:	4293      	cmp	r3, r2
 8005768:	f000 8099 	beq.w	800589e <HAL_TIM_ConfigClockSource+0x1ae>
 800576c:	4a5b      	ldr	r2, [pc, #364]	@ (80058dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800576e:	4293      	cmp	r3, r2
 8005770:	f200 809e 	bhi.w	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005774:	4a5a      	ldr	r2, [pc, #360]	@ (80058e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	f000 8091 	beq.w	800589e <HAL_TIM_ConfigClockSource+0x1ae>
 800577c:	4a58      	ldr	r2, [pc, #352]	@ (80058e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f200 8096 	bhi.w	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005784:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005788:	f000 8089 	beq.w	800589e <HAL_TIM_ConfigClockSource+0x1ae>
 800578c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005790:	f200 808e 	bhi.w	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005798:	d03e      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0x128>
 800579a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800579e:	f200 8087 	bhi.w	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a6:	f000 8086 	beq.w	80058b6 <HAL_TIM_ConfigClockSource+0x1c6>
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ae:	d87f      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80057b0:	2b70      	cmp	r3, #112	@ 0x70
 80057b2:	d01a      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0xfa>
 80057b4:	2b70      	cmp	r3, #112	@ 0x70
 80057b6:	d87b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80057b8:	2b60      	cmp	r3, #96	@ 0x60
 80057ba:	d050      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x16e>
 80057bc:	2b60      	cmp	r3, #96	@ 0x60
 80057be:	d877      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80057c0:	2b50      	cmp	r3, #80	@ 0x50
 80057c2:	d03c      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x14e>
 80057c4:	2b50      	cmp	r3, #80	@ 0x50
 80057c6:	d873      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80057c8:	2b40      	cmp	r3, #64	@ 0x40
 80057ca:	d058      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x18e>
 80057cc:	2b40      	cmp	r3, #64	@ 0x40
 80057ce:	d86f      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80057d0:	2b30      	cmp	r3, #48	@ 0x30
 80057d2:	d064      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x1ae>
 80057d4:	2b30      	cmp	r3, #48	@ 0x30
 80057d6:	d86b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d060      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x1ae>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d867      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d05c      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x1ae>
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d05a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x1ae>
 80057e8:	e062      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057fa:	f000 f9b3 	bl	8005b64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800580c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	609a      	str	r2, [r3, #8]
      break;
 8005816:	e04f      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005828:	f000 f99c 	bl	8005b64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800583a:	609a      	str	r2, [r3, #8]
      break;
 800583c:	e03c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	461a      	mov	r2, r3
 800584c:	f000 f90e 	bl	8005a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2150      	movs	r1, #80	@ 0x50
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f967 	bl	8005b2a <TIM_ITRx_SetConfig>
      break;
 800585c:	e02c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800586a:	461a      	mov	r2, r3
 800586c:	f000 f92d 	bl	8005aca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2160      	movs	r1, #96	@ 0x60
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f957 	bl	8005b2a <TIM_ITRx_SetConfig>
      break;
 800587c:	e01c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588a:	461a      	mov	r2, r3
 800588c:	f000 f8ee 	bl	8005a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2140      	movs	r1, #64	@ 0x40
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f947 	bl	8005b2a <TIM_ITRx_SetConfig>
      break;
 800589c:	e00c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	4610      	mov	r0, r2
 80058aa:	f000 f93e 	bl	8005b2a <TIM_ITRx_SetConfig>
      break;
 80058ae:	e003      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
      break;
 80058b4:	e000      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80058b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	00100070 	.word	0x00100070
 80058d8:	00100040 	.word	0x00100040
 80058dc:	00100030 	.word	0x00100030
 80058e0:	00100020 	.word	0x00100020

080058e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a42      	ldr	r2, [pc, #264]	@ (8005a50 <TIM_Base_SetConfig+0x11c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00f      	beq.n	800596c <TIM_Base_SetConfig+0x38>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0x38>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3f      	ldr	r2, [pc, #252]	@ (8005a54 <TIM_Base_SetConfig+0x120>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0x38>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a58 <TIM_Base_SetConfig+0x124>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0x38>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3d      	ldr	r2, [pc, #244]	@ (8005a5c <TIM_Base_SetConfig+0x128>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d108      	bne.n	800597e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a33      	ldr	r2, [pc, #204]	@ (8005a50 <TIM_Base_SetConfig+0x11c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01b      	beq.n	80059be <TIM_Base_SetConfig+0x8a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598c:	d017      	beq.n	80059be <TIM_Base_SetConfig+0x8a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a30      	ldr	r2, [pc, #192]	@ (8005a54 <TIM_Base_SetConfig+0x120>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <TIM_Base_SetConfig+0x8a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2f      	ldr	r2, [pc, #188]	@ (8005a58 <TIM_Base_SetConfig+0x124>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00f      	beq.n	80059be <TIM_Base_SetConfig+0x8a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a5c <TIM_Base_SetConfig+0x128>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00b      	beq.n	80059be <TIM_Base_SetConfig+0x8a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005a60 <TIM_Base_SetConfig+0x12c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d007      	beq.n	80059be <TIM_Base_SetConfig+0x8a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005a64 <TIM_Base_SetConfig+0x130>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d003      	beq.n	80059be <TIM_Base_SetConfig+0x8a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a68 <TIM_Base_SetConfig+0x134>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d108      	bne.n	80059d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a16      	ldr	r2, [pc, #88]	@ (8005a50 <TIM_Base_SetConfig+0x11c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00f      	beq.n	8005a1c <TIM_Base_SetConfig+0xe8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a17      	ldr	r2, [pc, #92]	@ (8005a5c <TIM_Base_SetConfig+0x128>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00b      	beq.n	8005a1c <TIM_Base_SetConfig+0xe8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a16      	ldr	r2, [pc, #88]	@ (8005a60 <TIM_Base_SetConfig+0x12c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <TIM_Base_SetConfig+0xe8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <TIM_Base_SetConfig+0x130>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_Base_SetConfig+0xe8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a14      	ldr	r2, [pc, #80]	@ (8005a68 <TIM_Base_SetConfig+0x134>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d103      	bne.n	8005a24 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d105      	bne.n	8005a42 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f023 0201 	bic.w	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	611a      	str	r2, [r3, #16]
  }
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800

08005a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f023 0201 	bic.w	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f023 030a 	bic.w	r3, r3, #10
 8005aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b087      	sub	sp, #28
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	f023 0210 	bic.w	r2, r3, #16
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	031b      	lsls	r3, r3, #12
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f043 0307 	orr.w	r3, r3, #7
 8005b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	609a      	str	r2, [r3, #8]
}
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	021a      	lsls	r2, r3, #8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e065      	b.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a2c      	ldr	r2, [pc, #176]	@ (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2b      	ldr	r2, [pc, #172]	@ (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d108      	bne.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005bf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1b      	ldr	r2, [pc, #108]	@ (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d018      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c32:	d013      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a18      	ldr	r2, [pc, #96]	@ (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00e      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a17      	ldr	r2, [pc, #92]	@ (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d009      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a12      	ldr	r2, [pc, #72]	@ (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a13      	ldr	r2, [pc, #76]	@ (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d10c      	bne.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	40012c00 	.word	0x40012c00
 8005c98:	40013400 	.word	0x40013400
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800
 8005ca4:	40014000 	.word	0x40014000

08005ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e042      	b.n	8005dcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fb f973 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2224      	movs	r2, #36	@ 0x24
 8005d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fee8 	bl	8006b54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fc19 	bl	80065bc <UART_SetConfig>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e01b      	b.n	8005dcc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 ff67 	bl	8006c98 <UART_CheckIdleState>
 8005dca:	4603      	mov	r3, r0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b091      	sub	sp, #68	@ 0x44
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d178      	bne.n	8005ede <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_Transmit_IT+0x24>
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e071      	b.n	8005ee0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	88fa      	ldrh	r2, [r7, #6]
 8005e06:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	88fa      	ldrh	r2, [r7, #6]
 8005e0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2221      	movs	r2, #33	@ 0x21
 8005e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e30:	d12a      	bne.n	8005e88 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3a:	d107      	bne.n	8005e4c <HAL_UART_Transmit_IT+0x78>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4a29      	ldr	r2, [pc, #164]	@ (8005eec <HAL_UART_Transmit_IT+0x118>)
 8005e48:	679a      	str	r2, [r3, #120]	@ 0x78
 8005e4a:	e002      	b.n	8005e52 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4a28      	ldr	r2, [pc, #160]	@ (8005ef0 <HAL_UART_Transmit_IT+0x11c>)
 8005e50:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3308      	adds	r3, #8
 8005e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e72:	637a      	str	r2, [r7, #52]	@ 0x34
 8005e74:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e5      	bne.n	8005e52 <HAL_UART_Transmit_IT+0x7e>
 8005e86:	e028      	b.n	8005eda <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e90:	d107      	bne.n	8005ea2 <HAL_UART_Transmit_IT+0xce>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a15      	ldr	r2, [pc, #84]	@ (8005ef4 <HAL_UART_Transmit_IT+0x120>)
 8005e9e:	679a      	str	r2, [r3, #120]	@ 0x78
 8005ea0:	e002      	b.n	8005ea8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a14      	ldr	r2, [pc, #80]	@ (8005ef8 <HAL_UART_Transmit_IT+0x124>)
 8005ea6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec6:	623b      	str	r3, [r7, #32]
 8005ec8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	69f9      	ldr	r1, [r7, #28]
 8005ecc:	6a3a      	ldr	r2, [r7, #32]
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e6      	bne.n	8005ea8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	e000      	b.n	8005ee0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005ede:	2302      	movs	r3, #2
  }
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3744      	adds	r7, #68	@ 0x44
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	080075cb 	.word	0x080075cb
 8005ef0:	080074eb 	.word	0x080074eb
 8005ef4:	08007429 	.word	0x08007429
 8005ef8:	08007371 	.word	0x08007371

08005efc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b0ba      	sub	sp, #232	@ 0xe8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005f26:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d11b      	bne.n	8005f70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d015      	beq.n	8005f70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d105      	bne.n	8005f5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d009      	beq.n	8005f70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8300 	beq.w	8006566 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
      }
      return;
 8005f6e:	e2fa      	b.n	8006566 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 8123 	beq.w	80061c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80061b4 <HAL_UART_IRQHandler+0x2b8>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005f8a:	4b8b      	ldr	r3, [pc, #556]	@ (80061b8 <HAL_UART_IRQHandler+0x2bc>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 8116 	beq.w	80061c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d011      	beq.n	8005fc4 <HAL_UART_IRQHandler+0xc8>
 8005fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fba:	f043 0201 	orr.w	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d011      	beq.n	8005ff4 <HAL_UART_IRQHandler+0xf8>
 8005fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fea:	f043 0204 	orr.w	r2, r3, #4
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d011      	beq.n	8006024 <HAL_UART_IRQHandler+0x128>
 8006000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2204      	movs	r2, #4
 8006012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601a:	f043 0202 	orr.w	r2, r3, #2
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d017      	beq.n	8006060 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d105      	bne.n	8006048 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800603c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006040:	4b5c      	ldr	r3, [pc, #368]	@ (80061b4 <HAL_UART_IRQHandler+0x2b8>)
 8006042:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00b      	beq.n	8006060 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2208      	movs	r2, #8
 800604e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006056:	f043 0208 	orr.w	r2, r3, #8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006068:	2b00      	cmp	r3, #0
 800606a:	d012      	beq.n	8006092 <HAL_UART_IRQHandler+0x196>
 800606c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006070:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00c      	beq.n	8006092 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006088:	f043 0220 	orr.w	r2, r3, #32
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 8266 	beq.w	800656a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d013      	beq.n	80060d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e6:	2b40      	cmp	r3, #64	@ 0x40
 80060e8:	d005      	beq.n	80060f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80060ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d054      	beq.n	80061a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 ffcd 	bl	8007096 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006106:	2b40      	cmp	r3, #64	@ 0x40
 8006108:	d146      	bne.n	8006198 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3308      	adds	r3, #8
 8006110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006120:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3308      	adds	r3, #8
 8006132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006136:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800613a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800614e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1d9      	bne.n	800610a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800615c:	2b00      	cmp	r3, #0
 800615e:	d017      	beq.n	8006190 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006166:	4a15      	ldr	r2, [pc, #84]	@ (80061bc <HAL_UART_IRQHandler+0x2c0>)
 8006168:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006170:	4618      	mov	r0, r3
 8006172:	f7fc f84b 	bl	800220c <HAL_DMA_Abort_IT>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d019      	beq.n	80061b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800618a:	4610      	mov	r0, r2
 800618c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618e:	e00f      	b.n	80061b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fa09 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006196:	e00b      	b.n	80061b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa05 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619e:	e007      	b.n	80061b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fa01 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80061ae:	e1dc      	b.n	800656a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	bf00      	nop
    return;
 80061b2:	e1da      	b.n	800656a <HAL_UART_IRQHandler+0x66e>
 80061b4:	10000001 	.word	0x10000001
 80061b8:	04000120 	.word	0x04000120
 80061bc:	0800734d 	.word	0x0800734d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	f040 8170 	bne.w	80064aa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 8169 	beq.w	80064aa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8162 	beq.w	80064aa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2210      	movs	r2, #16
 80061ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f8:	2b40      	cmp	r3, #64	@ 0x40
 80061fa:	f040 80d8 	bne.w	80063ae <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800620c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 80af 	beq.w	8006374 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800621c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006220:	429a      	cmp	r2, r3
 8006222:	f080 80a7 	bcs.w	8006374 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800622c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 8087 	bne.w	8006352 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006258:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800625c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006260:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800626e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006272:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800627a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006286:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1da      	bne.n	8006244 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3308      	adds	r3, #8
 8006294:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800629e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80062b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80062ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80062c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e1      	bne.n	800628e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80062da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3308      	adds	r3, #8
 80062ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e3      	bne.n	80062ca <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800631e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006320:	f023 0310 	bic.w	r3, r3, #16
 8006324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006332:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006334:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006338:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e4      	bne.n	8006310 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800634c:	4618      	mov	r0, r3
 800634e:	f7fb ff04 	bl	800215a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006364:	b29b      	uxth	r3, r3
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	b29b      	uxth	r3, r3
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fa fc77 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006372:	e0fc      	b.n	800656e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800637a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800637e:	429a      	cmp	r2, r3
 8006380:	f040 80f5 	bne.w	800656e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b20      	cmp	r3, #32
 8006394:	f040 80eb 	bne.w	800656e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fa fc5a 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
      return;
 80063ac:	e0df      	b.n	800656e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 80d1 	beq.w	8006572 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80063d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80cc 	beq.w	8006572 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006402:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800640a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e4      	bne.n	80063da <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	623b      	str	r3, [r7, #32]
   return(result);
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3308      	adds	r3, #8
 8006434:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006438:	633a      	str	r2, [r7, #48]	@ 0x30
 800643a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800643e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e1      	bne.n	8006410 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	60fb      	str	r3, [r7, #12]
   return(result);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f023 0310 	bic.w	r3, r3, #16
 8006474:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	69b9      	ldr	r1, [r7, #24]
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	617b      	str	r3, [r7, #20]
   return(result);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e4      	bne.n	8006460 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800649c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fa fbdc 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064a8:	e063      	b.n	8006572 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00e      	beq.n	80064d4 <HAL_UART_IRQHandler+0x5d8>
 80064b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80064ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f91c 	bl	800770a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064d2:	e051      	b.n	8006578 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80064d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d014      	beq.n	800650a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d105      	bne.n	80064f8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d03a      	beq.n	8006576 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	4798      	blx	r3
    }
    return;
 8006508:	e035      	b.n	8006576 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800650a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <HAL_UART_IRQHandler+0x62e>
 8006516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800651a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 f8c6 	bl	80076b4 <UART_EndTransmit_IT>
    return;
 8006528:	e026      	b.n	8006578 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800652a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800652e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d009      	beq.n	800654a <HAL_UART_IRQHandler+0x64e>
 8006536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800653a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 f8f5 	bl	8007732 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006548:	e016      	b.n	8006578 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800654e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d010      	beq.n	8006578 <HAL_UART_IRQHandler+0x67c>
 8006556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800655a:	2b00      	cmp	r3, #0
 800655c:	da0c      	bge.n	8006578 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f001 f8dd 	bl	800771e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006564:	e008      	b.n	8006578 <HAL_UART_IRQHandler+0x67c>
      return;
 8006566:	bf00      	nop
 8006568:	e006      	b.n	8006578 <HAL_UART_IRQHandler+0x67c>
    return;
 800656a:	bf00      	nop
 800656c:	e004      	b.n	8006578 <HAL_UART_IRQHandler+0x67c>
      return;
 800656e:	bf00      	nop
 8006570:	e002      	b.n	8006578 <HAL_UART_IRQHandler+0x67c>
      return;
 8006572:	bf00      	nop
 8006574:	e000      	b.n	8006578 <HAL_UART_IRQHandler+0x67c>
    return;
 8006576:	bf00      	nop
  }
}
 8006578:	37e8      	adds	r7, #232	@ 0xe8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop

08006580 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c0:	b08c      	sub	sp, #48	@ 0x30
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	431a      	orrs	r2, r3
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	431a      	orrs	r2, r3
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4bab      	ldr	r3, [pc, #684]	@ (8006898 <UART_SetConfig+0x2dc>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4aa0      	ldr	r2, [pc, #640]	@ (800689c <UART_SetConfig+0x2e0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d004      	beq.n	8006628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006624:	4313      	orrs	r3, r2
 8006626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006632:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800663c:	430b      	orrs	r3, r1
 800663e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006646:	f023 010f 	bic.w	r1, r3, #15
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a91      	ldr	r2, [pc, #580]	@ (80068a0 <UART_SetConfig+0x2e4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d125      	bne.n	80066ac <UART_SetConfig+0xf0>
 8006660:	4b90      	ldr	r3, [pc, #576]	@ (80068a4 <UART_SetConfig+0x2e8>)
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b03      	cmp	r3, #3
 800666c:	d81a      	bhi.n	80066a4 <UART_SetConfig+0xe8>
 800666e:	a201      	add	r2, pc, #4	@ (adr r2, 8006674 <UART_SetConfig+0xb8>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	08006685 	.word	0x08006685
 8006678:	08006695 	.word	0x08006695
 800667c:	0800668d 	.word	0x0800668d
 8006680:	0800669d 	.word	0x0800669d
 8006684:	2301      	movs	r3, #1
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800668a:	e0d6      	b.n	800683a <UART_SetConfig+0x27e>
 800668c:	2302      	movs	r3, #2
 800668e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006692:	e0d2      	b.n	800683a <UART_SetConfig+0x27e>
 8006694:	2304      	movs	r3, #4
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800669a:	e0ce      	b.n	800683a <UART_SetConfig+0x27e>
 800669c:	2308      	movs	r3, #8
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a2:	e0ca      	b.n	800683a <UART_SetConfig+0x27e>
 80066a4:	2310      	movs	r3, #16
 80066a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066aa:	e0c6      	b.n	800683a <UART_SetConfig+0x27e>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a7d      	ldr	r2, [pc, #500]	@ (80068a8 <UART_SetConfig+0x2ec>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d138      	bne.n	8006728 <UART_SetConfig+0x16c>
 80066b6:	4b7b      	ldr	r3, [pc, #492]	@ (80068a4 <UART_SetConfig+0x2e8>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066bc:	f003 030c 	and.w	r3, r3, #12
 80066c0:	2b0c      	cmp	r3, #12
 80066c2:	d82d      	bhi.n	8006720 <UART_SetConfig+0x164>
 80066c4:	a201      	add	r2, pc, #4	@ (adr r2, 80066cc <UART_SetConfig+0x110>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	08006701 	.word	0x08006701
 80066d0:	08006721 	.word	0x08006721
 80066d4:	08006721 	.word	0x08006721
 80066d8:	08006721 	.word	0x08006721
 80066dc:	08006711 	.word	0x08006711
 80066e0:	08006721 	.word	0x08006721
 80066e4:	08006721 	.word	0x08006721
 80066e8:	08006721 	.word	0x08006721
 80066ec:	08006709 	.word	0x08006709
 80066f0:	08006721 	.word	0x08006721
 80066f4:	08006721 	.word	0x08006721
 80066f8:	08006721 	.word	0x08006721
 80066fc:	08006719 	.word	0x08006719
 8006700:	2300      	movs	r3, #0
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006706:	e098      	b.n	800683a <UART_SetConfig+0x27e>
 8006708:	2302      	movs	r3, #2
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670e:	e094      	b.n	800683a <UART_SetConfig+0x27e>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006716:	e090      	b.n	800683a <UART_SetConfig+0x27e>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671e:	e08c      	b.n	800683a <UART_SetConfig+0x27e>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006726:	e088      	b.n	800683a <UART_SetConfig+0x27e>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a5f      	ldr	r2, [pc, #380]	@ (80068ac <UART_SetConfig+0x2f0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d125      	bne.n	800677e <UART_SetConfig+0x1c2>
 8006732:	4b5c      	ldr	r3, [pc, #368]	@ (80068a4 <UART_SetConfig+0x2e8>)
 8006734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006738:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800673c:	2b30      	cmp	r3, #48	@ 0x30
 800673e:	d016      	beq.n	800676e <UART_SetConfig+0x1b2>
 8006740:	2b30      	cmp	r3, #48	@ 0x30
 8006742:	d818      	bhi.n	8006776 <UART_SetConfig+0x1ba>
 8006744:	2b20      	cmp	r3, #32
 8006746:	d00a      	beq.n	800675e <UART_SetConfig+0x1a2>
 8006748:	2b20      	cmp	r3, #32
 800674a:	d814      	bhi.n	8006776 <UART_SetConfig+0x1ba>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <UART_SetConfig+0x19a>
 8006750:	2b10      	cmp	r3, #16
 8006752:	d008      	beq.n	8006766 <UART_SetConfig+0x1aa>
 8006754:	e00f      	b.n	8006776 <UART_SetConfig+0x1ba>
 8006756:	2300      	movs	r3, #0
 8006758:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800675c:	e06d      	b.n	800683a <UART_SetConfig+0x27e>
 800675e:	2302      	movs	r3, #2
 8006760:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006764:	e069      	b.n	800683a <UART_SetConfig+0x27e>
 8006766:	2304      	movs	r3, #4
 8006768:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676c:	e065      	b.n	800683a <UART_SetConfig+0x27e>
 800676e:	2308      	movs	r3, #8
 8006770:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006774:	e061      	b.n	800683a <UART_SetConfig+0x27e>
 8006776:	2310      	movs	r3, #16
 8006778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677c:	e05d      	b.n	800683a <UART_SetConfig+0x27e>
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a4b      	ldr	r2, [pc, #300]	@ (80068b0 <UART_SetConfig+0x2f4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d125      	bne.n	80067d4 <UART_SetConfig+0x218>
 8006788:	4b46      	ldr	r3, [pc, #280]	@ (80068a4 <UART_SetConfig+0x2e8>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006792:	2bc0      	cmp	r3, #192	@ 0xc0
 8006794:	d016      	beq.n	80067c4 <UART_SetConfig+0x208>
 8006796:	2bc0      	cmp	r3, #192	@ 0xc0
 8006798:	d818      	bhi.n	80067cc <UART_SetConfig+0x210>
 800679a:	2b80      	cmp	r3, #128	@ 0x80
 800679c:	d00a      	beq.n	80067b4 <UART_SetConfig+0x1f8>
 800679e:	2b80      	cmp	r3, #128	@ 0x80
 80067a0:	d814      	bhi.n	80067cc <UART_SetConfig+0x210>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <UART_SetConfig+0x1f0>
 80067a6:	2b40      	cmp	r3, #64	@ 0x40
 80067a8:	d008      	beq.n	80067bc <UART_SetConfig+0x200>
 80067aa:	e00f      	b.n	80067cc <UART_SetConfig+0x210>
 80067ac:	2300      	movs	r3, #0
 80067ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b2:	e042      	b.n	800683a <UART_SetConfig+0x27e>
 80067b4:	2302      	movs	r3, #2
 80067b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ba:	e03e      	b.n	800683a <UART_SetConfig+0x27e>
 80067bc:	2304      	movs	r3, #4
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c2:	e03a      	b.n	800683a <UART_SetConfig+0x27e>
 80067c4:	2308      	movs	r3, #8
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ca:	e036      	b.n	800683a <UART_SetConfig+0x27e>
 80067cc:	2310      	movs	r3, #16
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d2:	e032      	b.n	800683a <UART_SetConfig+0x27e>
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a30      	ldr	r2, [pc, #192]	@ (800689c <UART_SetConfig+0x2e0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d12a      	bne.n	8006834 <UART_SetConfig+0x278>
 80067de:	4b31      	ldr	r3, [pc, #196]	@ (80068a4 <UART_SetConfig+0x2e8>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067ec:	d01a      	beq.n	8006824 <UART_SetConfig+0x268>
 80067ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067f2:	d81b      	bhi.n	800682c <UART_SetConfig+0x270>
 80067f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f8:	d00c      	beq.n	8006814 <UART_SetConfig+0x258>
 80067fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067fe:	d815      	bhi.n	800682c <UART_SetConfig+0x270>
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <UART_SetConfig+0x250>
 8006804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006808:	d008      	beq.n	800681c <UART_SetConfig+0x260>
 800680a:	e00f      	b.n	800682c <UART_SetConfig+0x270>
 800680c:	2300      	movs	r3, #0
 800680e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006812:	e012      	b.n	800683a <UART_SetConfig+0x27e>
 8006814:	2302      	movs	r3, #2
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800681a:	e00e      	b.n	800683a <UART_SetConfig+0x27e>
 800681c:	2304      	movs	r3, #4
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006822:	e00a      	b.n	800683a <UART_SetConfig+0x27e>
 8006824:	2308      	movs	r3, #8
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682a:	e006      	b.n	800683a <UART_SetConfig+0x27e>
 800682c:	2310      	movs	r3, #16
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006832:	e002      	b.n	800683a <UART_SetConfig+0x27e>
 8006834:	2310      	movs	r3, #16
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a17      	ldr	r2, [pc, #92]	@ (800689c <UART_SetConfig+0x2e0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	f040 80a8 	bne.w	8006996 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006846:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800684a:	2b08      	cmp	r3, #8
 800684c:	d834      	bhi.n	80068b8 <UART_SetConfig+0x2fc>
 800684e:	a201      	add	r2, pc, #4	@ (adr r2, 8006854 <UART_SetConfig+0x298>)
 8006850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006854:	08006879 	.word	0x08006879
 8006858:	080068b9 	.word	0x080068b9
 800685c:	08006881 	.word	0x08006881
 8006860:	080068b9 	.word	0x080068b9
 8006864:	08006887 	.word	0x08006887
 8006868:	080068b9 	.word	0x080068b9
 800686c:	080068b9 	.word	0x080068b9
 8006870:	080068b9 	.word	0x080068b9
 8006874:	0800688f 	.word	0x0800688f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006878:	f7fe fac6 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 800687c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800687e:	e021      	b.n	80068c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006880:	4b0c      	ldr	r3, [pc, #48]	@ (80068b4 <UART_SetConfig+0x2f8>)
 8006882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006884:	e01e      	b.n	80068c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006886:	f7fe fa51 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 800688a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800688c:	e01a      	b.n	80068c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006894:	e016      	b.n	80068c4 <UART_SetConfig+0x308>
 8006896:	bf00      	nop
 8006898:	cfff69f3 	.word	0xcfff69f3
 800689c:	40008000 	.word	0x40008000
 80068a0:	40013800 	.word	0x40013800
 80068a4:	40021000 	.word	0x40021000
 80068a8:	40004400 	.word	0x40004400
 80068ac:	40004800 	.word	0x40004800
 80068b0:	40004c00 	.word	0x40004c00
 80068b4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 812a 	beq.w	8006b20 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d0:	4a9e      	ldr	r2, [pc, #632]	@ (8006b4c <UART_SetConfig+0x590>)
 80068d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068d6:	461a      	mov	r2, r3
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	fbb3 f3f2 	udiv	r3, r3, r2
 80068de:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	4613      	mov	r3, r2
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	4413      	add	r3, r2
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d305      	bcc.n	80068fc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d903      	bls.n	8006904 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006902:	e10d      	b.n	8006b20 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	2200      	movs	r2, #0
 8006908:	60bb      	str	r3, [r7, #8]
 800690a:	60fa      	str	r2, [r7, #12]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	4a8e      	ldr	r2, [pc, #568]	@ (8006b4c <UART_SetConfig+0x590>)
 8006912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006916:	b29b      	uxth	r3, r3
 8006918:	2200      	movs	r2, #0
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	607a      	str	r2, [r7, #4]
 800691e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006926:	f7f9 fccb 	bl	80002c0 <__aeabi_uldivmod>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4610      	mov	r0, r2
 8006930:	4619      	mov	r1, r3
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	020b      	lsls	r3, r1, #8
 800693c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006940:	0202      	lsls	r2, r0, #8
 8006942:	6979      	ldr	r1, [r7, #20]
 8006944:	6849      	ldr	r1, [r1, #4]
 8006946:	0849      	lsrs	r1, r1, #1
 8006948:	2000      	movs	r0, #0
 800694a:	460c      	mov	r4, r1
 800694c:	4605      	mov	r5, r0
 800694e:	eb12 0804 	adds.w	r8, r2, r4
 8006952:	eb43 0905 	adc.w	r9, r3, r5
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	469a      	mov	sl, r3
 800695e:	4693      	mov	fp, r2
 8006960:	4652      	mov	r2, sl
 8006962:	465b      	mov	r3, fp
 8006964:	4640      	mov	r0, r8
 8006966:	4649      	mov	r1, r9
 8006968:	f7f9 fcaa 	bl	80002c0 <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4613      	mov	r3, r2
 8006972:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800697a:	d308      	bcc.n	800698e <UART_SetConfig+0x3d2>
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006982:	d204      	bcs.n	800698e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6a3a      	ldr	r2, [r7, #32]
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	e0c8      	b.n	8006b20 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006994:	e0c4      	b.n	8006b20 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800699e:	d167      	bne.n	8006a70 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80069a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d828      	bhi.n	80069fa <UART_SetConfig+0x43e>
 80069a8:	a201      	add	r2, pc, #4	@ (adr r2, 80069b0 <UART_SetConfig+0x3f4>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	080069d5 	.word	0x080069d5
 80069b4:	080069dd 	.word	0x080069dd
 80069b8:	080069e5 	.word	0x080069e5
 80069bc:	080069fb 	.word	0x080069fb
 80069c0:	080069eb 	.word	0x080069eb
 80069c4:	080069fb 	.word	0x080069fb
 80069c8:	080069fb 	.word	0x080069fb
 80069cc:	080069fb 	.word	0x080069fb
 80069d0:	080069f3 	.word	0x080069f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069d4:	f7fe fa18 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 80069d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069da:	e014      	b.n	8006a06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069dc:	f7fe fa2a 	bl	8004e34 <HAL_RCC_GetPCLK2Freq>
 80069e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069e2:	e010      	b.n	8006a06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006b50 <UART_SetConfig+0x594>)
 80069e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069e8:	e00d      	b.n	8006a06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ea:	f7fe f99f 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 80069ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069f0:	e009      	b.n	8006a06 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069f8:	e005      	b.n	8006a06 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8089 	beq.w	8006b20 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a12:	4a4e      	ldr	r2, [pc, #312]	@ (8006b4c <UART_SetConfig+0x590>)
 8006a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a20:	005a      	lsls	r2, r3, #1
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	441a      	add	r2, r3
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	2b0f      	cmp	r3, #15
 8006a38:	d916      	bls.n	8006a68 <UART_SetConfig+0x4ac>
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a40:	d212      	bcs.n	8006a68 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f023 030f 	bic.w	r3, r3, #15
 8006a4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	8bfb      	ldrh	r3, [r7, #30]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	8bfa      	ldrh	r2, [r7, #30]
 8006a64:	60da      	str	r2, [r3, #12]
 8006a66:	e05b      	b.n	8006b20 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a6e:	e057      	b.n	8006b20 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	d828      	bhi.n	8006aca <UART_SetConfig+0x50e>
 8006a78:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <UART_SetConfig+0x4c4>)
 8006a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7e:	bf00      	nop
 8006a80:	08006aa5 	.word	0x08006aa5
 8006a84:	08006aad 	.word	0x08006aad
 8006a88:	08006ab5 	.word	0x08006ab5
 8006a8c:	08006acb 	.word	0x08006acb
 8006a90:	08006abb 	.word	0x08006abb
 8006a94:	08006acb 	.word	0x08006acb
 8006a98:	08006acb 	.word	0x08006acb
 8006a9c:	08006acb 	.word	0x08006acb
 8006aa0:	08006ac3 	.word	0x08006ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa4:	f7fe f9b0 	bl	8004e08 <HAL_RCC_GetPCLK1Freq>
 8006aa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006aaa:	e014      	b.n	8006ad6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aac:	f7fe f9c2 	bl	8004e34 <HAL_RCC_GetPCLK2Freq>
 8006ab0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ab2:	e010      	b.n	8006ad6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab4:	4b26      	ldr	r3, [pc, #152]	@ (8006b50 <UART_SetConfig+0x594>)
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ab8:	e00d      	b.n	8006ad6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aba:	f7fe f937 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8006abe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ac0:	e009      	b.n	8006ad6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ac8:	e005      	b.n	8006ad6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ad4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d021      	beq.n	8006b20 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b4c <UART_SetConfig+0x590>)
 8006ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aea:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	441a      	add	r2, r3
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	2b0f      	cmp	r3, #15
 8006b04:	d909      	bls.n	8006b1a <UART_SetConfig+0x55e>
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b0c:	d205      	bcs.n	8006b1a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	e002      	b.n	8006b20 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2200      	movs	r2, #0
 8006b34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3730      	adds	r7, #48	@ 0x30
 8006b44:	46bd      	mov	sp, r7
 8006b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b4a:	bf00      	nop
 8006b4c:	0800cb5c 	.word	0x0800cb5c
 8006b50:	00f42400 	.word	0x00f42400

08006b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01a      	beq.n	8006c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c52:	d10a      	bne.n	8006c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	605a      	str	r2, [r3, #4]
  }
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b098      	sub	sp, #96	@ 0x60
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ca8:	f7fa fff6 	bl	8001c98 <HAL_GetTick>
 8006cac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0308 	and.w	r3, r3, #8
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d12f      	bne.n	8006d1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f88e 	bl	8006dec <UART_WaitOnFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d022      	beq.n	8006d1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e6      	bne.n	8006cd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e063      	b.n	8006de4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d149      	bne.n	8006dbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d32:	2200      	movs	r2, #0
 8006d34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f857 	bl	8006dec <UART_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d03c      	beq.n	8006dbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	623b      	str	r3, [r7, #32]
   return(result);
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d62:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e6      	bne.n	8006d44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d96:	61fa      	str	r2, [r7, #28]
 8006d98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	69b9      	ldr	r1, [r7, #24]
 8006d9c:	69fa      	ldr	r2, [r7, #28]
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	617b      	str	r3, [r7, #20]
   return(result);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e5      	bne.n	8006d76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e012      	b.n	8006de4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3758      	adds	r7, #88	@ 0x58
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfc:	e04f      	b.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e04:	d04b      	beq.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e06:	f7fa ff47 	bl	8001c98 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d302      	bcc.n	8006e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e04e      	b.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0304 	and.w	r3, r3, #4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d037      	beq.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2b80      	cmp	r3, #128	@ 0x80
 8006e32:	d034      	beq.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b40      	cmp	r3, #64	@ 0x40
 8006e38:	d031      	beq.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d110      	bne.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f920 	bl	8007096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2208      	movs	r2, #8
 8006e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e029      	b.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e78:	d111      	bne.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 f906 	bl	8007096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e00f      	b.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	bf0c      	ite	eq
 8006eae:	2301      	moveq	r3, #1
 8006eb0:	2300      	movne	r3, #0
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d0a0      	beq.n	8006dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b096      	sub	sp, #88	@ 0x58
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	88fa      	ldrh	r2, [r7, #6]
 8006ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2222      	movs	r2, #34	@ 0x22
 8006ef0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d02d      	beq.n	8006f5a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f04:	4a40      	ldr	r2, [pc, #256]	@ (8007008 <UART_Start_Receive_DMA+0x140>)
 8006f06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800700c <UART_Start_Receive_DMA+0x144>)
 8006f10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f18:	4a3d      	ldr	r2, [pc, #244]	@ (8007010 <UART_Start_Receive_DMA+0x148>)
 8006f1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f22:	2200      	movs	r2, #0
 8006f24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3324      	adds	r3, #36	@ 0x24
 8006f32:	4619      	mov	r1, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f38:	461a      	mov	r2, r3
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	f7fb f892 	bl	8002064 <HAL_DMA_Start_IT>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d009      	beq.n	8006f5a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2210      	movs	r2, #16
 8006f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e051      	b.n	8006ffe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d018      	beq.n	8006f94 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f76:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f82:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e6      	bne.n	8006f62 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006fb4:	637a      	str	r2, [r7, #52]	@ 0x34
 8006fb6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3308      	adds	r3, #8
 8006fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fe8:	623a      	str	r2, [r7, #32]
 8006fea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	69f9      	ldr	r1, [r7, #28]
 8006fee:	6a3a      	ldr	r2, [r7, #32]
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e5      	bne.n	8006fc8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3758      	adds	r7, #88	@ 0x58
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	08007163 	.word	0x08007163
 800700c:	0800728f 	.word	0x0800728f
 8007010:	080072cd 	.word	0x080072cd

08007014 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b08f      	sub	sp, #60	@ 0x3c
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	61fb      	str	r3, [r7, #28]
   return(result);
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800703c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e6      	bne.n	800701c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	60bb      	str	r3, [r7, #8]
   return(result);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007064:	633b      	str	r3, [r7, #48]	@ 0x30
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800706e:	61ba      	str	r2, [r7, #24]
 8007070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6979      	ldr	r1, [r7, #20]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	613b      	str	r3, [r7, #16]
   return(result);
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e5      	bne.n	800704e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800708a:	bf00      	nop
 800708c:	373c      	adds	r7, #60	@ 0x3c
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007096:	b480      	push	{r7}
 8007098:	b095      	sub	sp, #84	@ 0x54
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e6      	bne.n	800709e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	61fb      	str	r3, [r7, #28]
   return(result);
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e3      	bne.n	80070d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800710c:	2b01      	cmp	r3, #1
 800710e:	d118      	bne.n	8007142 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	60bb      	str	r3, [r7, #8]
   return(result);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f023 0310 	bic.w	r3, r3, #16
 8007124:	647b      	str	r3, [r7, #68]	@ 0x44
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6979      	ldr	r1, [r7, #20]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	613b      	str	r3, [r7, #16]
   return(result);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e6      	bne.n	8007110 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007156:	bf00      	nop
 8007158:	3754      	adds	r7, #84	@ 0x54
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b09c      	sub	sp, #112	@ 0x70
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d171      	bne.n	8007262 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800717e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007180:	2200      	movs	r2, #0
 8007182:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007196:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800719a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800719c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e6      	bne.n	8007186 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ca:	f023 0301 	bic.w	r3, r3, #1
 80071ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80071d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3308      	adds	r3, #8
 80071d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80071d8:	647a      	str	r2, [r7, #68]	@ 0x44
 80071da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e5      	bne.n	80071b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3308      	adds	r3, #8
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	623b      	str	r3, [r7, #32]
   return(result);
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007202:	663b      	str	r3, [r7, #96]	@ 0x60
 8007204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800720c:	633a      	str	r2, [r7, #48]	@ 0x30
 800720e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e5      	bne.n	80071ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007222:	2220      	movs	r2, #32
 8007224:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800722a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800722c:	2b01      	cmp	r3, #1
 800722e:	d118      	bne.n	8007262 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	60fb      	str	r3, [r7, #12]
   return(result);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f023 0310 	bic.w	r3, r3, #16
 8007244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	69b9      	ldr	r1, [r7, #24]
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	617b      	str	r3, [r7, #20]
   return(result);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e6      	bne.n	8007230 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007264:	2200      	movs	r2, #0
 8007266:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800726a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d107      	bne.n	8007280 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007272:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007276:	4619      	mov	r1, r3
 8007278:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800727a:	f7f9 fcf1 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800727e:	e002      	b.n	8007286 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007280:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007282:	f7ff f97d 	bl	8006580 <HAL_UART_RxCpltCallback>
}
 8007286:	bf00      	nop
 8007288:	3770      	adds	r7, #112	@ 0x70
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d109      	bne.n	80072be <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072b0:	085b      	lsrs	r3, r3, #1
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	4619      	mov	r1, r3
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7f9 fcd2 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072bc:	e002      	b.n	80072c4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7ff f968 	bl	8006594 <HAL_UART_RxHalfCpltCallback>
}
 80072c4:	bf00      	nop
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f4:	2b80      	cmp	r3, #128	@ 0x80
 80072f6:	d109      	bne.n	800730c <UART_DMAError+0x40>
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b21      	cmp	r3, #33	@ 0x21
 80072fc:	d106      	bne.n	800730c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2200      	movs	r2, #0
 8007302:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007306:	6978      	ldr	r0, [r7, #20]
 8007308:	f7ff fe84 	bl	8007014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007316:	2b40      	cmp	r3, #64	@ 0x40
 8007318:	d109      	bne.n	800732e <UART_DMAError+0x62>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b22      	cmp	r3, #34	@ 0x22
 800731e:	d106      	bne.n	800732e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2200      	movs	r2, #0
 8007324:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007328:	6978      	ldr	r0, [r7, #20]
 800732a:	f7ff feb4 	bl	8007096 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007334:	f043 0210 	orr.w	r2, r3, #16
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800733e:	6978      	ldr	r0, [r7, #20]
 8007340:	f7ff f932 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007344:	bf00      	nop
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff f920 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007368:	bf00      	nop
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b08f      	sub	sp, #60	@ 0x3c
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800737e:	2b21      	cmp	r3, #33	@ 0x21
 8007380:	d14c      	bne.n	800741c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d132      	bne.n	80073f4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	61fb      	str	r3, [r7, #28]
   return(result);
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073ae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e6      	bne.n	800738e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073de:	61bb      	str	r3, [r7, #24]
 80073e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6979      	ldr	r1, [r7, #20]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	613b      	str	r3, [r7, #16]
   return(result);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e6      	bne.n	80073c0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80073f2:	e013      	b.n	800741c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007410:	b29b      	uxth	r3, r3
 8007412:	3b01      	subs	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800741c:	bf00      	nop
 800741e:	373c      	adds	r7, #60	@ 0x3c
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b091      	sub	sp, #68	@ 0x44
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007436:	2b21      	cmp	r3, #33	@ 0x21
 8007438:	d151      	bne.n	80074de <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d132      	bne.n	80074ac <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	623b      	str	r3, [r7, #32]
   return(result);
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800745a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	461a      	mov	r2, r3
 8007462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007464:	633b      	str	r3, [r7, #48]	@ 0x30
 8007466:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800746a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e6      	bne.n	8007446 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	60fb      	str	r3, [r7, #12]
   return(result);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800748c:	637b      	str	r3, [r7, #52]	@ 0x34
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007496:	61fb      	str	r3, [r7, #28]
 8007498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	69b9      	ldr	r1, [r7, #24]
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	617b      	str	r3, [r7, #20]
   return(result);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e6      	bne.n	8007478 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80074aa:	e018      	b.n	80074de <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80074b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074c0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c6:	1c9a      	adds	r2, r3, #2
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80074de:	bf00      	nop
 80074e0:	3744      	adds	r7, #68	@ 0x44
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b091      	sub	sp, #68	@ 0x44
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f8:	2b21      	cmp	r3, #33	@ 0x21
 80074fa:	d160      	bne.n	80075be <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007502:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007504:	e057      	b.n	80075b6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d133      	bne.n	800757a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	623b      	str	r3, [r7, #32]
   return(result);
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007528:	63bb      	str	r3, [r7, #56]	@ 0x38
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007532:	633a      	str	r2, [r7, #48]	@ 0x30
 8007534:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e5      	bne.n	8007512 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	60fb      	str	r3, [r7, #12]
   return(result);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800755a:	637b      	str	r3, [r7, #52]	@ 0x34
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	461a      	mov	r2, r3
 8007562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	69b9      	ldr	r1, [r7, #24]
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	617b      	str	r3, [r7, #20]
   return(result);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e6      	bne.n	8007546 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007578:	e021      	b.n	80075be <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007584:	2b00      	cmp	r3, #0
 8007586:	d013      	beq.n	80075b0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800758c:	781a      	ldrb	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80075b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80075b2:	3b01      	subs	r3, #1
 80075b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80075b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1a4      	bne.n	8007506 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80075bc:	e7ff      	b.n	80075be <UART_TxISR_8BIT_FIFOEN+0xd4>
 80075be:	bf00      	nop
 80075c0:	3744      	adds	r7, #68	@ 0x44
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b091      	sub	sp, #68	@ 0x44
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d8:	2b21      	cmp	r3, #33	@ 0x21
 80075da:	d165      	bne.n	80076a8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80075e4:	e05c      	b.n	80076a0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d133      	bne.n	800765a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	61fb      	str	r3, [r7, #28]
   return(result);
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007608:	637b      	str	r3, [r7, #52]	@ 0x34
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007614:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e5      	bne.n	80075f2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	60bb      	str	r3, [r7, #8]
   return(result);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800763a:	633b      	str	r3, [r7, #48]	@ 0x30
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6979      	ldr	r1, [r7, #20]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	e841 2300 	strex	r3, r2, [r1]
 8007650:	613b      	str	r3, [r7, #16]
   return(result);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1e6      	bne.n	8007626 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007658:	e026      	b.n	80076a8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007664:	2b00      	cmp	r3, #0
 8007666:	d018      	beq.n	800769a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800766c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800766e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800767c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007682:	1c9a      	adds	r2, r3, #2
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800769a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800769c:	3b01      	subs	r3, #1
 800769e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80076a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d19f      	bne.n	80075e6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80076a6:	e7ff      	b.n	80076a8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80076a8:	bf00      	nop
 80076aa:	3744      	adds	r7, #68	@ 0x44
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076d0:	61fb      	str	r3, [r7, #28]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	61bb      	str	r3, [r7, #24]
 80076dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6979      	ldr	r1, [r7, #20]
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	613b      	str	r3, [r7, #16]
   return(result);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e6      	bne.n	80076bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7f9 fb27 	bl	8000d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007702:	bf00      	nop
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007746:	b480      	push	{r7}
 8007748:	b085      	sub	sp, #20
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_UARTEx_DisableFifoMode+0x16>
 8007758:	2302      	movs	r3, #2
 800775a:	e027      	b.n	80077ac <HAL_UARTEx_DisableFifoMode+0x66>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2224      	movs	r2, #36	@ 0x24
 8007768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800778a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e02d      	b.n	800782c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2224      	movs	r2, #36	@ 0x24
 80077dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0201 	bic.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f8a3 	bl	8007958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007848:	2302      	movs	r3, #2
 800784a:	e02d      	b.n	80078a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2224      	movs	r2, #36	@ 0x24
 8007858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0201 	bic.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f865 	bl	8007958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08c      	sub	sp, #48	@ 0x30
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	4613      	mov	r3, r2
 80078bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d142      	bne.n	800794e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e03b      	b.n	8007950 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80078e4:	88fb      	ldrh	r3, [r7, #6]
 80078e6:	461a      	mov	r2, r3
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff faec 	bl	8006ec8 <UART_Start_Receive_DMA>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80078f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d124      	bne.n	8007948 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007902:	2b01      	cmp	r3, #1
 8007904:	d11d      	bne.n	8007942 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2210      	movs	r2, #16
 800790c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	617b      	str	r3, [r7, #20]
   return(result);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f043 0310 	orr.w	r3, r3, #16
 8007922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792c:	627b      	str	r3, [r7, #36]	@ 0x24
 800792e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6a39      	ldr	r1, [r7, #32]
 8007932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	61fb      	str	r3, [r7, #28]
   return(result);
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e6      	bne.n	800790e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007940:	e002      	b.n	8007948 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007948:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800794c:	e000      	b.n	8007950 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800794e:	2302      	movs	r3, #2
  }
}
 8007950:	4618      	mov	r0, r3
 8007952:	3730      	adds	r7, #48	@ 0x30
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007964:	2b00      	cmp	r3, #0
 8007966:	d108      	bne.n	800797a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007978:	e031      	b.n	80079de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800797a:	2308      	movs	r3, #8
 800797c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800797e:	2308      	movs	r3, #8
 8007980:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	0e5b      	lsrs	r3, r3, #25
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	0f5b      	lsrs	r3, r3, #29
 800799a:	b2db      	uxtb	r3, r3
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	7b3a      	ldrb	r2, [r7, #12]
 80079a6:	4911      	ldr	r1, [pc, #68]	@ (80079ec <UARTEx_SetNbDataToProcess+0x94>)
 80079a8:	5c8a      	ldrb	r2, [r1, r2]
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079ae:	7b3a      	ldrb	r2, [r7, #12]
 80079b0:	490f      	ldr	r1, [pc, #60]	@ (80079f0 <UARTEx_SetNbDataToProcess+0x98>)
 80079b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	7b7a      	ldrb	r2, [r7, #13]
 80079c4:	4909      	ldr	r1, [pc, #36]	@ (80079ec <UARTEx_SetNbDataToProcess+0x94>)
 80079c6:	5c8a      	ldrb	r2, [r1, r2]
 80079c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079cc:	7b7a      	ldrb	r2, [r7, #13]
 80079ce:	4908      	ldr	r1, [pc, #32]	@ (80079f0 <UARTEx_SetNbDataToProcess+0x98>)
 80079d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80079de:	bf00      	nop
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	0800cb74 	.word	0x0800cb74
 80079f0:	0800cb7c 	.word	0x0800cb7c

080079f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a04:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007a08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b085      	sub	sp, #20
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a2a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007a2e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	43db      	mvns	r3, r3
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	4013      	ands	r3, r2
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	1d3b      	adds	r3, r7, #4
 8007a62:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b0a7      	sub	sp, #156	@ 0x9c
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	78db      	ldrb	r3, [r3, #3]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d81f      	bhi.n	8007b06 <USB_ActivateEndpoint+0x72>
 8007ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8007acc <USB_ActivateEndpoint+0x38>)
 8007ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007acc:	08007add 	.word	0x08007add
 8007ad0:	08007af9 	.word	0x08007af9
 8007ad4:	08007b0f 	.word	0x08007b0f
 8007ad8:	08007aeb 	.word	0x08007aeb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007adc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007ae0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ae4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007ae8:	e012      	b.n	8007b10 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007aea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007aee:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007af2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007af6:	e00b      	b.n	8007b10 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007af8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007afc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b00:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007b04:	e004      	b.n	8007b10 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007b0c:	e000      	b.n	8007b10 <USB_ActivateEndpoint+0x7c>
      break;
 8007b0e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	441a      	add	r2, r3
 8007b1a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4413      	add	r3, r2
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	b21b      	sxth	r3, r3
 8007b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b4a:	b21a      	sxth	r2, r3
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	b21b      	sxth	r3, r3
 8007b52:	4313      	orrs	r3, r2
 8007b54:	b21b      	sxth	r3, r3
 8007b56:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	441a      	add	r2, r3
 8007b64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007b68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	7b1b      	ldrb	r3, [r3, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f040 8180 	bne.w	8007e86 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	785b      	ldrb	r3, [r3, #1]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 8084 	beq.w	8007c98 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	00da      	lsls	r2, r3, #3
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	88db      	ldrh	r3, [r3, #6]
 8007bb8:	085b      	lsrs	r3, r3, #1
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	827b      	strh	r3, [r7, #18]
 8007bd2:	8a7b      	ldrh	r3, [r7, #18]
 8007bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01b      	beq.n	8007c14 <USB_ActivateEndpoint+0x180>
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bf2:	823b      	strh	r3, [r7, #16]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	441a      	add	r2, r3
 8007bfe:	8a3b      	ldrh	r3, [r7, #16]
 8007c00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	78db      	ldrb	r3, [r3, #3]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d020      	beq.n	8007c5e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c32:	81bb      	strh	r3, [r7, #12]
 8007c34:	89bb      	ldrh	r3, [r7, #12]
 8007c36:	f083 0320 	eor.w	r3, r3, #32
 8007c3a:	81bb      	strh	r3, [r7, #12]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	441a      	add	r2, r3
 8007c46:	89bb      	ldrh	r3, [r7, #12]
 8007c48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8013      	strh	r3, [r2, #0]
 8007c5c:	e3f9      	b.n	8008452 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c74:	81fb      	strh	r3, [r7, #14]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	441a      	add	r2, r3
 8007c80:	89fb      	ldrh	r3, [r7, #14]
 8007c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]
 8007c96:	e3dc      	b.n	8008452 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	4413      	add	r3, r2
 8007caa:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	00da      	lsls	r2, r3, #3
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	88db      	ldrh	r3, [r3, #6]
 8007cc0:	085b      	lsrs	r3, r3, #1
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cdc:	4413      	add	r3, r2
 8007cde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	00da      	lsls	r2, r3, #3
 8007ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce8:	4413      	add	r3, r2
 8007cea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	801a      	strh	r2, [r3, #0]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10a      	bne.n	8007d1e <USB_ActivateEndpoint+0x28a>
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	801a      	strh	r2, [r3, #0]
 8007d1c:	e041      	b.n	8007da2 <USB_ActivateEndpoint+0x30e>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d24:	d81c      	bhi.n	8007d60 <USB_ActivateEndpoint+0x2cc>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	085b      	lsrs	r3, r3, #1
 8007d2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <USB_ActivateEndpoint+0x2b2>
 8007d3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d40:	3301      	adds	r3, #1
 8007d42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	029b      	lsls	r3, r3, #10
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	4313      	orrs	r3, r2
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	801a      	strh	r2, [r3, #0]
 8007d5e:	e020      	b.n	8007da2 <USB_ActivateEndpoint+0x30e>
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d104      	bne.n	8007d80 <USB_ActivateEndpoint+0x2ec>
 8007d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	029b      	lsls	r3, r3, #10
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	4313      	orrs	r3, r2
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007db0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d01b      	beq.n	8007df2 <USB_ActivateEndpoint+0x35e>
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd0:	843b      	strh	r3, [r7, #32]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	441a      	add	r2, r3
 8007ddc:	8c3b      	ldrh	r3, [r7, #32]
 8007dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007de6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d124      	bne.n	8007e44 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e10:	83bb      	strh	r3, [r7, #28]
 8007e12:	8bbb      	ldrh	r3, [r7, #28]
 8007e14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e18:	83bb      	strh	r3, [r7, #28]
 8007e1a:	8bbb      	ldrh	r3, [r7, #28]
 8007e1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e20:	83bb      	strh	r3, [r7, #28]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	441a      	add	r2, r3
 8007e2c:	8bbb      	ldrh	r3, [r7, #28]
 8007e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	8013      	strh	r3, [r2, #0]
 8007e42:	e306      	b.n	8008452 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5a:	83fb      	strh	r3, [r7, #30]
 8007e5c:	8bfb      	ldrh	r3, [r7, #30]
 8007e5e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e62:	83fb      	strh	r3, [r7, #30]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	441a      	add	r2, r3
 8007e6e:	8bfb      	ldrh	r3, [r7, #30]
 8007e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	8013      	strh	r3, [r2, #0]
 8007e84:	e2e5      	b.n	8008452 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	78db      	ldrb	r3, [r3, #3]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d11e      	bne.n	8007ecc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ea0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	441a      	add	r2, r3
 8007eb2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8007eb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ebe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	8013      	strh	r3, [r2, #0]
 8007eca:	e01d      	b.n	8007f08 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ee2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	441a      	add	r2, r3
 8007ef0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8007ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007f18:	4413      	add	r3, r2
 8007f1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	00da      	lsls	r2, r3, #3
 8007f22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	891b      	ldrh	r3, [r3, #8]
 8007f30:	085b      	lsrs	r3, r3, #1
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	005b      	lsls	r3, r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f3a:	801a      	strh	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f4c:	4413      	add	r3, r2
 8007f4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	00da      	lsls	r2, r3, #3
 8007f56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f58:	4413      	add	r3, r2
 8007f5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	895b      	ldrh	r3, [r3, #10]
 8007f64:	085b      	lsrs	r3, r3, #1
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f6e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	785b      	ldrb	r3, [r3, #1]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 81af 	bne.w	80082d8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8007f8a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d01d      	beq.n	8007fd2 <USB_ActivateEndpoint+0x53e>
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fac:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	441a      	add	r2, r3
 8007fba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007fbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8007fe2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01d      	beq.n	800802a <USB_ActivateEndpoint+0x596>
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008004:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	441a      	add	r2, r3
 8008012:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800801a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800801e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008022:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008026:	b29b      	uxth	r3, r3
 8008028:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d16b      	bne.n	800810a <USB_ActivateEndpoint+0x676>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800803c:	b29b      	uxth	r3, r3
 800803e:	461a      	mov	r2, r3
 8008040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008042:	4413      	add	r3, r2
 8008044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	00da      	lsls	r2, r3, #3
 800804c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800804e:	4413      	add	r3, r2
 8008050:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008054:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008060:	b29a      	uxth	r2, r3
 8008062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008064:	801a      	strh	r2, [r3, #0]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <USB_ActivateEndpoint+0x5f0>
 800806e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	b29b      	uxth	r3, r3
 8008074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800807c:	b29a      	uxth	r2, r3
 800807e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008080:	801a      	strh	r2, [r3, #0]
 8008082:	e05d      	b.n	8008140 <USB_ActivateEndpoint+0x6ac>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b3e      	cmp	r3, #62	@ 0x3e
 800808a:	d81c      	bhi.n	80080c6 <USB_ActivateEndpoint+0x632>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	085b      	lsrs	r3, r3, #1
 8008092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d004      	beq.n	80080ac <USB_ActivateEndpoint+0x618>
 80080a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080a6:	3301      	adds	r3, #1
 80080a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80080ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	029b      	lsls	r3, r3, #10
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	4313      	orrs	r3, r2
 80080be:	b29a      	uxth	r2, r3
 80080c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c2:	801a      	strh	r2, [r3, #0]
 80080c4:	e03c      	b.n	8008140 <USB_ActivateEndpoint+0x6ac>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	095b      	lsrs	r3, r3, #5
 80080cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d104      	bne.n	80080e6 <USB_ActivateEndpoint+0x652>
 80080dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080e0:	3b01      	subs	r3, #1
 80080e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80080e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	029b      	lsls	r3, r3, #10
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	4313      	orrs	r3, r2
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008102:	b29a      	uxth	r2, r3
 8008104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	e01a      	b.n	8008140 <USB_ActivateEndpoint+0x6ac>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d116      	bne.n	8008140 <USB_ActivateEndpoint+0x6ac>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	657b      	str	r3, [r7, #84]	@ 0x54
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800811c:	b29b      	uxth	r3, r3
 800811e:	461a      	mov	r2, r3
 8008120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008122:	4413      	add	r3, r2
 8008124:	657b      	str	r3, [r7, #84]	@ 0x54
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	00da      	lsls	r2, r3, #3
 800812c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800812e:	4413      	add	r3, r2
 8008130:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008134:	653b      	str	r3, [r7, #80]	@ 0x50
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	b29a      	uxth	r2, r3
 800813c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800813e:	801a      	strh	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	647b      	str	r3, [r7, #68]	@ 0x44
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d16b      	bne.n	8008224 <USB_ActivateEndpoint+0x790>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008156:	b29b      	uxth	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800815c:	4413      	add	r3, r2
 800815e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	00da      	lsls	r2, r3, #3
 8008166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008168:	4413      	add	r3, r2
 800816a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800816e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800817a:	b29a      	uxth	r2, r3
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	801a      	strh	r2, [r3, #0]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <USB_ActivateEndpoint+0x70a>
 8008188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008196:	b29a      	uxth	r2, r3
 8008198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819a:	801a      	strh	r2, [r3, #0]
 800819c:	e05b      	b.n	8008256 <USB_ActivateEndpoint+0x7c2>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80081a4:	d81c      	bhi.n	80081e0 <USB_ActivateEndpoint+0x74c>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	085b      	lsrs	r3, r3, #1
 80081ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <USB_ActivateEndpoint+0x732>
 80081bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081c0:	3301      	adds	r3, #1
 80081c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	029b      	lsls	r3, r3, #10
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	4313      	orrs	r3, r2
 80081d8:	b29a      	uxth	r2, r3
 80081da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	e03a      	b.n	8008256 <USB_ActivateEndpoint+0x7c2>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	095b      	lsrs	r3, r3, #5
 80081e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 031f 	and.w	r3, r3, #31
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d104      	bne.n	8008200 <USB_ActivateEndpoint+0x76c>
 80081f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081fa:	3b01      	subs	r3, #1
 80081fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	b29a      	uxth	r2, r3
 8008206:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800820a:	b29b      	uxth	r3, r3
 800820c:	029b      	lsls	r3, r3, #10
 800820e:	b29b      	uxth	r3, r3
 8008210:	4313      	orrs	r3, r2
 8008212:	b29b      	uxth	r3, r3
 8008214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821c:	b29a      	uxth	r2, r3
 800821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008220:	801a      	strh	r2, [r3, #0]
 8008222:	e018      	b.n	8008256 <USB_ActivateEndpoint+0x7c2>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	785b      	ldrb	r3, [r3, #1]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d114      	bne.n	8008256 <USB_ActivateEndpoint+0x7c2>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008232:	b29b      	uxth	r3, r3
 8008234:	461a      	mov	r2, r3
 8008236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008238:	4413      	add	r3, r2
 800823a:	647b      	str	r3, [r7, #68]	@ 0x44
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	00da      	lsls	r2, r3, #3
 8008242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008244:	4413      	add	r3, r2
 8008246:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800824a:	643b      	str	r3, [r7, #64]	@ 0x40
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	b29a      	uxth	r2, r3
 8008252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008254:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800826c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800826e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008270:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008274:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008276:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008278:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800827c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	441a      	add	r2, r3
 8008288:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800828a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800828e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800829a:	b29b      	uxth	r3, r3
 800829c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082b4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	441a      	add	r2, r3
 80082c0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80082c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	8013      	strh	r3, [r2, #0]
 80082d6:	e0bc      	b.n	8008452 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80082e8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80082ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01d      	beq.n	8008330 <USB_ActivateEndpoint+0x89c>
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800830a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	441a      	add	r2, r3
 8008318:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800831c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008320:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008324:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800832c:	b29b      	uxth	r3, r3
 800832e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8008340:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01d      	beq.n	8008388 <USB_ActivateEndpoint+0x8f4>
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800835e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008362:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	441a      	add	r2, r3
 8008370:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800837c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008380:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008384:	b29b      	uxth	r3, r3
 8008386:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	78db      	ldrb	r3, [r3, #3]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d024      	beq.n	80083da <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083a6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80083aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80083ae:	f083 0320 	eor.w	r3, r3, #32
 80083b2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	441a      	add	r2, r3
 80083c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80083c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	8013      	strh	r3, [r2, #0]
 80083d8:	e01d      	b.n	8008416 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083f0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	441a      	add	r2, r3
 80083fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800840a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800840e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008412:	b29b      	uxth	r3, r3
 8008414:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	b29b      	uxth	r3, r3
 8008424:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800842c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	441a      	add	r2, r3
 800843a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800843e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800844a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800844e:	b29b      	uxth	r3, r3
 8008450:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008452:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8008456:	4618      	mov	r0, r3
 8008458:	379c      	adds	r7, #156	@ 0x9c
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop

08008464 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008464:	b480      	push	{r7}
 8008466:	b08d      	sub	sp, #52	@ 0x34
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	7b1b      	ldrb	r3, [r3, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f040 808e 	bne.w	8008594 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d044      	beq.n	800850a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	81bb      	strh	r3, [r7, #12]
 800848e:	89bb      	ldrh	r3, [r7, #12]
 8008490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01b      	beq.n	80084d0 <USB_DeactivateEndpoint+0x6c>
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ae:	817b      	strh	r3, [r7, #10]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	441a      	add	r2, r3
 80084ba:	897b      	ldrh	r3, [r7, #10]
 80084bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084e6:	813b      	strh	r3, [r7, #8]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	441a      	add	r2, r3
 80084f2:	893b      	ldrh	r3, [r7, #8]
 80084f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008504:	b29b      	uxth	r3, r3
 8008506:	8013      	strh	r3, [r2, #0]
 8008508:	e192      	b.n	8008830 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	827b      	strh	r3, [r7, #18]
 8008518:	8a7b      	ldrh	r3, [r7, #18]
 800851a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d01b      	beq.n	800855a <USB_DeactivateEndpoint+0xf6>
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29b      	uxth	r3, r3
 8008530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008538:	823b      	strh	r3, [r7, #16]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	441a      	add	r2, r3
 8008544:	8a3b      	ldrh	r3, [r7, #16]
 8008546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800854a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800854e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008556:	b29b      	uxth	r3, r3
 8008558:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800856c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008570:	81fb      	strh	r3, [r7, #14]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	441a      	add	r2, r3
 800857c:	89fb      	ldrh	r3, [r7, #14]
 800857e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800858a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800858e:	b29b      	uxth	r3, r3
 8008590:	8013      	strh	r3, [r2, #0]
 8008592:	e14d      	b.n	8008830 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	2b00      	cmp	r3, #0
 800859a:	f040 80a5 	bne.w	80086e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	843b      	strh	r3, [r7, #32]
 80085ac:	8c3b      	ldrh	r3, [r7, #32]
 80085ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01b      	beq.n	80085ee <USB_DeactivateEndpoint+0x18a>
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085cc:	83fb      	strh	r3, [r7, #30]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	441a      	add	r2, r3
 80085d8:	8bfb      	ldrh	r3, [r7, #30]
 80085da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	83bb      	strh	r3, [r7, #28]
 80085fc:	8bbb      	ldrh	r3, [r7, #28]
 80085fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008602:	2b00      	cmp	r3, #0
 8008604:	d01b      	beq.n	800863e <USB_DeactivateEndpoint+0x1da>
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	b29b      	uxth	r3, r3
 8008614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861c:	837b      	strh	r3, [r7, #26]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	441a      	add	r2, r3
 8008628:	8b7b      	ldrh	r3, [r7, #26]
 800862a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800862e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008636:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800863a:	b29b      	uxth	r3, r3
 800863c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	b29b      	uxth	r3, r3
 800864c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008654:	833b      	strh	r3, [r7, #24]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	441a      	add	r2, r3
 8008660:	8b3b      	ldrh	r3, [r7, #24]
 8008662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800866a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800866e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008672:	b29b      	uxth	r3, r3
 8008674:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800868c:	82fb      	strh	r3, [r7, #22]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	441a      	add	r2, r3
 8008698:	8afb      	ldrh	r3, [r7, #22]
 800869a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800869e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086c4:	82bb      	strh	r3, [r7, #20]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	441a      	add	r2, r3
 80086d0:	8abb      	ldrh	r3, [r7, #20]
 80086d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	8013      	strh	r3, [r2, #0]
 80086e6:	e0a3      	b.n	8008830 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80086f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80086f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d01b      	beq.n	8008738 <USB_DeactivateEndpoint+0x2d4>
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	881b      	ldrh	r3, [r3, #0]
 800870c:	b29b      	uxth	r3, r3
 800870e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008716:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	441a      	add	r2, r3
 8008722:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800872c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008734:	b29b      	uxth	r3, r3
 8008736:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008746:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01b      	beq.n	8008788 <USB_DeactivateEndpoint+0x324>
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b29b      	uxth	r3, r3
 800875e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008766:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	441a      	add	r2, r3
 8008772:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800877c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008780:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008784:	b29b      	uxth	r3, r3
 8008786:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	881b      	ldrh	r3, [r3, #0]
 8008794:	b29b      	uxth	r3, r3
 8008796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800879a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800879e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	441a      	add	r2, r3
 80087aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087bc:	b29b      	uxth	r3, r3
 80087be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	b29b      	uxth	r3, r3
 8008806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800880a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800880e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	441a      	add	r2, r3
 800881a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800881c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800882c:	b29b      	uxth	r3, r3
 800882e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3734      	adds	r7, #52	@ 0x34
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b0ac      	sub	sp, #176	@ 0xb0
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	2b01      	cmp	r3, #1
 800884e:	f040 84ca 	bne.w	80091e6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	699a      	ldr	r2, [r3, #24]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	429a      	cmp	r2, r3
 800885c:	d904      	bls.n	8008868 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008866:	e003      	b.n	8008870 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	7b1b      	ldrb	r3, [r3, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d122      	bne.n	80088be <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6959      	ldr	r1, [r3, #20]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	88da      	ldrh	r2, [r3, #6]
 8008880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008884:	b29b      	uxth	r3, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 febd 	bl	8009606 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	613b      	str	r3, [r7, #16]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008896:	b29b      	uxth	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	4413      	add	r3, r2
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	00da      	lsls	r2, r3, #3
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	4413      	add	r3, r2
 80088aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	801a      	strh	r2, [r3, #0]
 80088ba:	f000 bc6f 	b.w	800919c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	78db      	ldrb	r3, [r3, #3]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	f040 831e 	bne.w	8008f04 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	6a1a      	ldr	r2, [r3, #32]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	f240 82cf 	bls.w	8008e74 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	441a      	add	r2, r3
 80088fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80088fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008906:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800890a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800890e:	b29b      	uxth	r3, r3
 8008910:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	6a1a      	ldr	r2, [r3, #32]
 8008916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800891a:	1ad2      	subs	r2, r2, r3
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	b29b      	uxth	r3, r3
 800892e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 814f 	beq.w	8008bd6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	633b      	str	r3, [r7, #48]	@ 0x30
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d16b      	bne.n	8008a1c <USB_EPStartXfer+0x1de>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800894e:	b29b      	uxth	r3, r3
 8008950:	461a      	mov	r2, r3
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	4413      	add	r3, r2
 8008956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	00da      	lsls	r2, r3, #3
 800895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008960:	4413      	add	r3, r2
 8008962:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008966:	627b      	str	r3, [r7, #36]	@ 0x24
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	b29b      	uxth	r3, r3
 800896e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008972:	b29a      	uxth	r2, r3
 8008974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008976:	801a      	strh	r2, [r3, #0]
 8008978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <USB_EPStartXfer+0x158>
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	b29b      	uxth	r3, r3
 8008986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800898e:	b29a      	uxth	r2, r3
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	e05b      	b.n	8008a4e <USB_EPStartXfer+0x210>
 8008996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800899a:	2b3e      	cmp	r3, #62	@ 0x3e
 800899c:	d81c      	bhi.n	80089d8 <USB_EPStartXfer+0x19a>
 800899e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089a2:	085b      	lsrs	r3, r3, #1
 80089a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <USB_EPStartXfer+0x180>
 80089b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089b8:	3301      	adds	r3, #1
 80089ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	029b      	lsls	r3, r3, #10
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	4313      	orrs	r3, r2
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	801a      	strh	r2, [r3, #0]
 80089d6:	e03a      	b.n	8008a4e <USB_EPStartXfer+0x210>
 80089d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089dc:	095b      	lsrs	r3, r3, #5
 80089de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089e6:	f003 031f 	and.w	r3, r3, #31
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d104      	bne.n	80089f8 <USB_EPStartXfer+0x1ba>
 80089ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089f2:	3b01      	subs	r3, #1
 80089f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	029b      	lsls	r3, r3, #10
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a18:	801a      	strh	r2, [r3, #0]
 8008a1a:	e018      	b.n	8008a4e <USB_EPStartXfer+0x210>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d114      	bne.n	8008a4e <USB_EPStartXfer+0x210>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a30:	4413      	add	r3, r2
 8008a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	00da      	lsls	r2, r3, #3
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	895b      	ldrh	r3, [r3, #10]
 8008a52:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	6959      	ldr	r1, [r3, #20]
 8008a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fdce 	bl	8009606 <USB_WritePMA>
            ep->xfer_buff += len;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	695a      	ldr	r2, [r3, #20]
 8008a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a72:	441a      	add	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	6a1a      	ldr	r2, [r3, #32]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d907      	bls.n	8008a94 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	6a1a      	ldr	r2, [r3, #32]
 8008a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a8c:	1ad2      	subs	r2, r2, r3
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	621a      	str	r2, [r3, #32]
 8008a92:	e006      	b.n	8008aa2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d16b      	bne.n	8008b82 <USB_EPStartXfer+0x344>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	61bb      	str	r3, [r7, #24]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	4413      	add	r3, r2
 8008abc:	61bb      	str	r3, [r7, #24]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	00da      	lsls	r2, r3, #3
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	801a      	strh	r2, [r3, #0]
 8008ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10a      	bne.n	8008afc <USB_EPStartXfer+0x2be>
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	801a      	strh	r2, [r3, #0]
 8008afa:	e05d      	b.n	8008bb8 <USB_EPStartXfer+0x37a>
 8008afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b00:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b02:	d81c      	bhi.n	8008b3e <USB_EPStartXfer+0x300>
 8008b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b08:	085b      	lsrs	r3, r3, #1
 8008b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <USB_EPStartXfer+0x2e6>
 8008b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008b1e:	3301      	adds	r3, #1
 8008b20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	029b      	lsls	r3, r3, #10
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	4313      	orrs	r3, r2
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	801a      	strh	r2, [r3, #0]
 8008b3c:	e03c      	b.n	8008bb8 <USB_EPStartXfer+0x37a>
 8008b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b42:	095b      	lsrs	r3, r3, #5
 8008b44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b4c:	f003 031f 	and.w	r3, r3, #31
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d104      	bne.n	8008b5e <USB_EPStartXfer+0x320>
 8008b54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	029b      	lsls	r3, r3, #10
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	e01a      	b.n	8008bb8 <USB_EPStartXfer+0x37a>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d116      	bne.n	8008bb8 <USB_EPStartXfer+0x37a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	623b      	str	r3, [r7, #32]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	461a      	mov	r2, r3
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	623b      	str	r3, [r7, #32]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	00da      	lsls	r2, r3, #3
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008bac:	61fb      	str	r3, [r7, #28]
 8008bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	891b      	ldrh	r3, [r3, #8]
 8008bbc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	6959      	ldr	r1, [r3, #20]
 8008bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fd19 	bl	8009606 <USB_WritePMA>
 8008bd4:	e2e2      	b.n	800919c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	785b      	ldrb	r3, [r3, #1]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d16b      	bne.n	8008cb6 <USB_EPStartXfer+0x478>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	461a      	mov	r2, r3
 8008bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bee:	4413      	add	r3, r2
 8008bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	00da      	lsls	r2, r3, #3
 8008bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c10:	801a      	strh	r2, [r3, #0]
 8008c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10a      	bne.n	8008c30 <USB_EPStartXfer+0x3f2>
 8008c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c2c:	801a      	strh	r2, [r3, #0]
 8008c2e:	e05d      	b.n	8008cec <USB_EPStartXfer+0x4ae>
 8008c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c34:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c36:	d81c      	bhi.n	8008c72 <USB_EPStartXfer+0x434>
 8008c38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c3c:	085b      	lsrs	r3, r3, #1
 8008c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <USB_EPStartXfer+0x41a>
 8008c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c52:	3301      	adds	r3, #1
 8008c54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	029b      	lsls	r3, r3, #10
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c6e:	801a      	strh	r2, [r3, #0]
 8008c70:	e03c      	b.n	8008cec <USB_EPStartXfer+0x4ae>
 8008c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c80:	f003 031f 	and.w	r3, r3, #31
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d104      	bne.n	8008c92 <USB_EPStartXfer+0x454>
 8008c88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	029b      	lsls	r3, r3, #10
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cb2:	801a      	strh	r2, [r3, #0]
 8008cb4:	e01a      	b.n	8008cec <USB_EPStartXfer+0x4ae>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	785b      	ldrb	r3, [r3, #1]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d116      	bne.n	8008cec <USB_EPStartXfer+0x4ae>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	461a      	mov	r2, r3
 8008ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cce:	4413      	add	r3, r2
 8008cd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	00da      	lsls	r2, r3, #3
 8008cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cda:	4413      	add	r3, r2
 8008cdc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	891b      	ldrh	r3, [r3, #8]
 8008cf0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	6959      	ldr	r1, [r3, #20]
 8008cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fc7f 	bl	8009606 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	695a      	ldr	r2, [r3, #20]
 8008d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d10:	441a      	add	r2, r3
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	6a1a      	ldr	r2, [r3, #32]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d907      	bls.n	8008d32 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	6a1a      	ldr	r2, [r3, #32]
 8008d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	621a      	str	r2, [r3, #32]
 8008d30:	e006      	b.n	8008d40 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	785b      	ldrb	r3, [r3, #1]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d16b      	bne.n	8008e24 <USB_EPStartXfer+0x5e6>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	461a      	mov	r2, r3
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5c:	4413      	add	r3, r2
 8008d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	00da      	lsls	r2, r3, #3
 8008d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d68:	4413      	add	r3, r2
 8008d6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d7e:	801a      	strh	r2, [r3, #0]
 8008d80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10a      	bne.n	8008d9e <USB_EPStartXfer+0x560>
 8008d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9a:	801a      	strh	r2, [r3, #0]
 8008d9c:	e05b      	b.n	8008e56 <USB_EPStartXfer+0x618>
 8008d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008da2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008da4:	d81c      	bhi.n	8008de0 <USB_EPStartXfer+0x5a2>
 8008da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008daa:	085b      	lsrs	r3, r3, #1
 8008dac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <USB_EPStartXfer+0x588>
 8008dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	029b      	lsls	r3, r3, #10
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ddc:	801a      	strh	r2, [r3, #0]
 8008dde:	e03a      	b.n	8008e56 <USB_EPStartXfer+0x618>
 8008de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008de4:	095b      	lsrs	r3, r3, #5
 8008de6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dee:	f003 031f 	and.w	r3, r3, #31
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d104      	bne.n	8008e00 <USB_EPStartXfer+0x5c2>
 8008df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	029b      	lsls	r3, r3, #10
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	4313      	orrs	r3, r2
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e20:	801a      	strh	r2, [r3, #0]
 8008e22:	e018      	b.n	8008e56 <USB_EPStartXfer+0x618>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	785b      	ldrb	r3, [r3, #1]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d114      	bne.n	8008e56 <USB_EPStartXfer+0x618>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	461a      	mov	r2, r3
 8008e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e38:	4413      	add	r3, r2
 8008e3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	00da      	lsls	r2, r3, #3
 8008e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e44:	4413      	add	r3, r2
 8008e46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	895b      	ldrh	r3, [r3, #10]
 8008e5a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6959      	ldr	r1, [r3, #20]
 8008e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fbca 	bl	8009606 <USB_WritePMA>
 8008e72:	e193      	b.n	800919c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e92:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	441a      	add	r2, r3
 8008ea0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ec8:	4413      	add	r3, r2
 8008eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	00da      	lsls	r2, r3, #3
 8008ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008eda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ee4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	891b      	ldrh	r3, [r3, #8]
 8008eea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	6959      	ldr	r1, [r3, #20]
 8008ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fb82 	bl	8009606 <USB_WritePMA>
 8008f02:	e14b      	b.n	800919c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	6a1a      	ldr	r2, [r3, #32]
 8008f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f0c:	1ad2      	subs	r2, r2, r3
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 809a 	beq.w	800905e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	785b      	ldrb	r3, [r3, #1]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d16b      	bne.n	800900e <USB_EPStartXfer+0x7d0>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	461a      	mov	r2, r3
 8008f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f46:	4413      	add	r3, r2
 8008f48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	00da      	lsls	r2, r3, #3
 8008f50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f52:	4413      	add	r3, r2
 8008f54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f58:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f68:	801a      	strh	r2, [r3, #0]
 8008f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10a      	bne.n	8008f88 <USB_EPStartXfer+0x74a>
 8008f72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f84:	801a      	strh	r2, [r3, #0]
 8008f86:	e05b      	b.n	8009040 <USB_EPStartXfer+0x802>
 8008f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f8e:	d81c      	bhi.n	8008fca <USB_EPStartXfer+0x78c>
 8008f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f94:	085b      	lsrs	r3, r3, #1
 8008f96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d004      	beq.n	8008fb0 <USB_EPStartXfer+0x772>
 8008fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008faa:	3301      	adds	r3, #1
 8008fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	029b      	lsls	r3, r3, #10
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fc6:	801a      	strh	r2, [r3, #0]
 8008fc8:	e03a      	b.n	8009040 <USB_EPStartXfer+0x802>
 8008fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fce:	095b      	lsrs	r3, r3, #5
 8008fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fd8:	f003 031f 	and.w	r3, r3, #31
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d104      	bne.n	8008fea <USB_EPStartXfer+0x7ac>
 8008fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	029b      	lsls	r3, r3, #10
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009006:	b29a      	uxth	r2, r3
 8009008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800900a:	801a      	strh	r2, [r3, #0]
 800900c:	e018      	b.n	8009040 <USB_EPStartXfer+0x802>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	785b      	ldrb	r3, [r3, #1]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d114      	bne.n	8009040 <USB_EPStartXfer+0x802>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800901c:	b29b      	uxth	r3, r3
 800901e:	461a      	mov	r2, r3
 8009020:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009022:	4413      	add	r3, r2
 8009024:	673b      	str	r3, [r7, #112]	@ 0x70
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	00da      	lsls	r2, r3, #3
 800902c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800902e:	4413      	add	r3, r2
 8009030:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009034:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800903a:	b29a      	uxth	r2, r3
 800903c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800903e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	895b      	ldrh	r3, [r3, #10]
 8009044:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	6959      	ldr	r1, [r3, #20]
 800904c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009050:	b29b      	uxth	r3, r3
 8009052:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fad5 	bl	8009606 <USB_WritePMA>
 800905c:	e09e      	b.n	800919c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d16b      	bne.n	800913e <USB_EPStartXfer+0x900>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009070:	b29b      	uxth	r3, r3
 8009072:	461a      	mov	r2, r3
 8009074:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009076:	4413      	add	r3, r2
 8009078:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	00da      	lsls	r2, r3, #3
 8009080:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009082:	4413      	add	r3, r2
 8009084:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009088:	67bb      	str	r3, [r7, #120]	@ 0x78
 800908a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009094:	b29a      	uxth	r2, r3
 8009096:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009098:	801a      	strh	r2, [r3, #0]
 800909a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <USB_EPStartXfer+0x87a>
 80090a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090b4:	801a      	strh	r2, [r3, #0]
 80090b6:	e063      	b.n	8009180 <USB_EPStartXfer+0x942>
 80090b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80090be:	d81c      	bhi.n	80090fa <USB_EPStartXfer+0x8bc>
 80090c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090c4:	085b      	lsrs	r3, r3, #1
 80090c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <USB_EPStartXfer+0x8a2>
 80090d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090da:	3301      	adds	r3, #1
 80090dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	029b      	lsls	r3, r3, #10
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	4313      	orrs	r3, r2
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090f6:	801a      	strh	r2, [r3, #0]
 80090f8:	e042      	b.n	8009180 <USB_EPStartXfer+0x942>
 80090fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090fe:	095b      	lsrs	r3, r3, #5
 8009100:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009108:	f003 031f 	and.w	r3, r3, #31
 800910c:	2b00      	cmp	r3, #0
 800910e:	d104      	bne.n	800911a <USB_EPStartXfer+0x8dc>
 8009110:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009114:	3b01      	subs	r3, #1
 8009116:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800911a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	b29a      	uxth	r2, r3
 8009120:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009124:	b29b      	uxth	r3, r3
 8009126:	029b      	lsls	r3, r3, #10
 8009128:	b29b      	uxth	r3, r3
 800912a:	4313      	orrs	r3, r2
 800912c:	b29b      	uxth	r3, r3
 800912e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009136:	b29a      	uxth	r2, r3
 8009138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800913a:	801a      	strh	r2, [r3, #0]
 800913c:	e020      	b.n	8009180 <USB_EPStartXfer+0x942>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	785b      	ldrb	r3, [r3, #1]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d11c      	bne.n	8009180 <USB_EPStartXfer+0x942>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009152:	b29b      	uxth	r3, r3
 8009154:	461a      	mov	r2, r3
 8009156:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800915a:	4413      	add	r3, r2
 800915c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	00da      	lsls	r2, r3, #3
 8009166:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800916a:	4413      	add	r3, r2
 800916c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009178:	b29a      	uxth	r2, r3
 800917a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800917e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	891b      	ldrh	r3, [r3, #8]
 8009184:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	6959      	ldr	r1, [r3, #20]
 800918c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009190:	b29b      	uxth	r3, r3
 8009192:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fa35 	bl	8009606 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091b2:	817b      	strh	r3, [r7, #10]
 80091b4:	897b      	ldrh	r3, [r7, #10]
 80091b6:	f083 0310 	eor.w	r3, r3, #16
 80091ba:	817b      	strh	r3, [r7, #10]
 80091bc:	897b      	ldrh	r3, [r7, #10]
 80091be:	f083 0320 	eor.w	r3, r3, #32
 80091c2:	817b      	strh	r3, [r7, #10]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	441a      	add	r2, r3
 80091ce:	897b      	ldrh	r3, [r7, #10]
 80091d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	8013      	strh	r3, [r2, #0]
 80091e4:	e0d5      	b.n	8009392 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	7b1b      	ldrb	r3, [r3, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d156      	bne.n	800929c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d122      	bne.n	800923c <USB_EPStartXfer+0x9fe>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	78db      	ldrb	r3, [r3, #3]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d11e      	bne.n	800923c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009214:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	441a      	add	r2, r3
 8009222:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800922a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800922e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009236:	b29b      	uxth	r3, r3
 8009238:	8013      	strh	r3, [r2, #0]
 800923a:	e01d      	b.n	8009278 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	b29b      	uxth	r3, r3
 800924a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800924e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009252:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	441a      	add	r2, r3
 8009260:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800926c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009274:	b29b      	uxth	r3, r3
 8009276:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	699a      	ldr	r2, [r3, #24]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	429a      	cmp	r2, r3
 8009282:	d907      	bls.n	8009294 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	699a      	ldr	r2, [r3, #24]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	1ad2      	subs	r2, r2, r3
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	619a      	str	r2, [r3, #24]
 8009292:	e054      	b.n	800933e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2200      	movs	r2, #0
 8009298:	619a      	str	r2, [r3, #24]
 800929a:	e050      	b.n	800933e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	78db      	ldrb	r3, [r3, #3]
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d142      	bne.n	800932a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d048      	beq.n	800933e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80092bc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80092c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <USB_EPStartXfer+0xa96>
 80092c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80092cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10b      	bne.n	80092ec <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80092d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80092d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d12e      	bne.n	800933e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80092e0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80092e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d128      	bne.n	800933e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009302:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	441a      	add	r2, r3
 8009310:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800931c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009320:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009324:	b29b      	uxth	r3, r3
 8009326:	8013      	strh	r3, [r2, #0]
 8009328:	e009      	b.n	800933e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	78db      	ldrb	r3, [r3, #3]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d103      	bne.n	800933a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2200      	movs	r2, #0
 8009336:	619a      	str	r2, [r3, #24]
 8009338:	e001      	b.n	800933e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e02a      	b.n	8009394 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	b29b      	uxth	r3, r3
 800934c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009354:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009358:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800935c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009360:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009364:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009368:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800936c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	441a      	add	r2, r3
 800937a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800937e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800938a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800938e:	b29b      	uxth	r3, r3
 8009390:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	37b0      	adds	r7, #176	@ 0xb0
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	785b      	ldrb	r3, [r3, #1]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d020      	beq.n	80093f0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093c4:	81bb      	strh	r3, [r7, #12]
 80093c6:	89bb      	ldrh	r3, [r7, #12]
 80093c8:	f083 0310 	eor.w	r3, r3, #16
 80093cc:	81bb      	strh	r3, [r7, #12]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	441a      	add	r2, r3
 80093d8:	89bb      	ldrh	r3, [r7, #12]
 80093da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	8013      	strh	r3, [r2, #0]
 80093ee:	e01f      	b.n	8009430 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009406:	81fb      	strh	r3, [r7, #14]
 8009408:	89fb      	ldrh	r3, [r7, #14]
 800940a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800940e:	81fb      	strh	r3, [r7, #14]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	441a      	add	r2, r3
 800941a:	89fb      	ldrh	r3, [r7, #14]
 800941c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800942c:	b29b      	uxth	r3, r3
 800942e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800943e:	b480      	push	{r7}
 8009440:	b087      	sub	sp, #28
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d04c      	beq.n	80094ea <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	823b      	strh	r3, [r7, #16]
 800945e:	8a3b      	ldrh	r3, [r7, #16]
 8009460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01b      	beq.n	80094a0 <USB_EPClearStall+0x62>
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	881b      	ldrh	r3, [r3, #0]
 8009474:	b29b      	uxth	r3, r3
 8009476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800947a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800947e:	81fb      	strh	r3, [r7, #14]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	441a      	add	r2, r3
 800948a:	89fb      	ldrh	r3, [r7, #14]
 800948c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009498:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800949c:	b29b      	uxth	r3, r3
 800949e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	78db      	ldrb	r3, [r3, #3]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d06c      	beq.n	8009582 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094be:	81bb      	strh	r3, [r7, #12]
 80094c0:	89bb      	ldrh	r3, [r7, #12]
 80094c2:	f083 0320 	eor.w	r3, r3, #32
 80094c6:	81bb      	strh	r3, [r7, #12]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	441a      	add	r2, r3
 80094d2:	89bb      	ldrh	r3, [r7, #12]
 80094d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	8013      	strh	r3, [r2, #0]
 80094e8:	e04b      	b.n	8009582 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	82fb      	strh	r3, [r7, #22]
 80094f8:	8afb      	ldrh	r3, [r7, #22]
 80094fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d01b      	beq.n	800953a <USB_EPClearStall+0xfc>
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	b29b      	uxth	r3, r3
 8009510:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009518:	82bb      	strh	r3, [r7, #20]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	441a      	add	r2, r3
 8009524:	8abb      	ldrh	r3, [r7, #20]
 8009526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800952a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800952e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009536:	b29b      	uxth	r3, r3
 8009538:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	b29b      	uxth	r3, r3
 8009548:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800954c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009550:	827b      	strh	r3, [r7, #18]
 8009552:	8a7b      	ldrh	r3, [r7, #18]
 8009554:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009558:	827b      	strh	r3, [r7, #18]
 800955a:	8a7b      	ldrh	r3, [r7, #18]
 800955c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009560:	827b      	strh	r3, [r7, #18]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	8a7b      	ldrh	r3, [r7, #18]
 800956e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800957a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800957e:	b29b      	uxth	r3, r3
 8009580:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	371c      	adds	r7, #28
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d103      	bne.n	80095aa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2280      	movs	r2, #128	@ 0x80
 80095a6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b085      	sub	sp, #20
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80095f8:	68fb      	ldr	r3, [r7, #12]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009606:	b480      	push	{r7}
 8009608:	b08b      	sub	sp, #44	@ 0x2c
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	4611      	mov	r1, r2
 8009612:	461a      	mov	r2, r3
 8009614:	460b      	mov	r3, r1
 8009616:	80fb      	strh	r3, [r7, #6]
 8009618:	4613      	mov	r3, r2
 800961a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800961c:	88bb      	ldrh	r3, [r7, #4]
 800961e:	3301      	adds	r3, #1
 8009620:	085b      	lsrs	r3, r3, #1
 8009622:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800962c:	88fa      	ldrh	r2, [r7, #6]
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009636:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	627b      	str	r3, [r7, #36]	@ 0x24
 800963c:	e01b      	b.n	8009676 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	3301      	adds	r3, #1
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	b21a      	sxth	r2, r3
 800964e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009652:	4313      	orrs	r3, r2
 8009654:	b21b      	sxth	r3, r3
 8009656:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	8a7a      	ldrh	r2, [r7, #18]
 800965c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	3302      	adds	r3, #2
 8009662:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	3301      	adds	r3, #1
 8009668:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	3301      	adds	r3, #1
 800966e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009672:	3b01      	subs	r3, #1
 8009674:	627b      	str	r3, [r7, #36]	@ 0x24
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e0      	bne.n	800963e <USB_WritePMA+0x38>
  }
}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	372c      	adds	r7, #44	@ 0x2c
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800968a:	b480      	push	{r7}
 800968c:	b08b      	sub	sp, #44	@ 0x2c
 800968e:	af00      	add	r7, sp, #0
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	4611      	mov	r1, r2
 8009696:	461a      	mov	r2, r3
 8009698:	460b      	mov	r3, r1
 800969a:	80fb      	strh	r3, [r7, #6]
 800969c:	4613      	mov	r3, r2
 800969e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80096a0:	88bb      	ldrh	r3, [r7, #4]
 80096a2:	085b      	lsrs	r3, r3, #1
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096b0:	88fa      	ldrh	r2, [r7, #6]
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	627b      	str	r3, [r7, #36]	@ 0x24
 80096c0:	e018      	b.n	80096f4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80096ca:	6a3b      	ldr	r3, [r7, #32]
 80096cc:	3302      	adds	r3, #2
 80096ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	3301      	adds	r3, #1
 80096dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	0a1b      	lsrs	r3, r3, #8
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	3301      	adds	r3, #1
 80096ec:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80096ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f0:	3b01      	subs	r3, #1
 80096f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80096f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e3      	bne.n	80096c2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80096fa:	88bb      	ldrh	r3, [r7, #4]
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	b29b      	uxth	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	b29b      	uxth	r3, r3
 800970c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	b2da      	uxtb	r2, r3
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	701a      	strb	r2, [r3, #0]
  }
}
 8009716:	bf00      	nop
 8009718:	372c      	adds	r7, #44	@ 0x2c
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	460b      	mov	r3, r1
 800972c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800972e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009732:	f002 f911 	bl	800b958 <USBD_static_malloc>
 8009736:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d105      	bne.n	800974a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009746:	2302      	movs	r3, #2
 8009748:	e066      	b.n	8009818 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7c1b      	ldrb	r3, [r3, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d119      	bne.n	800978e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800975a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800975e:	2202      	movs	r2, #2
 8009760:	2181      	movs	r1, #129	@ 0x81
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 ff9f 	bl	800b6a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800976e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009772:	2202      	movs	r2, #2
 8009774:	2101      	movs	r1, #1
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f001 ff95 	bl	800b6a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2210      	movs	r2, #16
 8009788:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800978c:	e016      	b.n	80097bc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800978e:	2340      	movs	r3, #64	@ 0x40
 8009790:	2202      	movs	r2, #2
 8009792:	2181      	movs	r1, #129	@ 0x81
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 ff86 	bl	800b6a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097a0:	2340      	movs	r3, #64	@ 0x40
 80097a2:	2202      	movs	r2, #2
 80097a4:	2101      	movs	r1, #1
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 ff7d 	bl	800b6a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2210      	movs	r2, #16
 80097b8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097bc:	2308      	movs	r3, #8
 80097be:	2203      	movs	r2, #3
 80097c0:	2182      	movs	r1, #130	@ 0x82
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f001 ff6f 	bl	800b6a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7c1b      	ldrb	r3, [r3, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d109      	bne.n	8009806 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097fc:	2101      	movs	r1, #1
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f002 f840 	bl	800b884 <USBD_LL_PrepareReceive>
 8009804:	e007      	b.n	8009816 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800980c:	2340      	movs	r3, #64	@ 0x40
 800980e:	2101      	movs	r1, #1
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f002 f837 	bl	800b884 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800982c:	2181      	movs	r1, #129	@ 0x81
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 ff5f 	bl	800b6f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800983a:	2101      	movs	r1, #1
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f001 ff58 	bl	800b6f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800984a:	2182      	movs	r1, #130	@ 0x82
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f001 ff50 	bl	800b6f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00e      	beq.n	800988a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800987c:	4618      	mov	r0, r3
 800987e:	f002 f879 	bl	800b974 <USBD_static_free>
    pdev->pClassData = NULL;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80098a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80098aa:	2300      	movs	r3, #0
 80098ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e0af      	b.n	8009a1c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d03f      	beq.n	8009948 <USBD_CDC_Setup+0xb4>
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	f040 809f 	bne.w	8009a0c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	88db      	ldrh	r3, [r3, #6]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d02e      	beq.n	8009934 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	b25b      	sxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	da16      	bge.n	800990e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80098ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	88d2      	ldrh	r2, [r2, #6]
 80098f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	88db      	ldrh	r3, [r3, #6]
 80098f8:	2b07      	cmp	r3, #7
 80098fa:	bf28      	it	cs
 80098fc:	2307      	movcs	r3, #7
 80098fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	89fa      	ldrh	r2, [r7, #14]
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f001 facd 	bl	800aea6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800990c:	e085      	b.n	8009a1a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	785a      	ldrb	r2, [r3, #1]
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	88db      	ldrh	r3, [r3, #6]
 800991c:	b2da      	uxtb	r2, r3
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009924:	6939      	ldr	r1, [r7, #16]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	88db      	ldrh	r3, [r3, #6]
 800992a:	461a      	mov	r2, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f001 fae6 	bl	800aefe <USBD_CtlPrepareRx>
      break;
 8009932:	e072      	b.n	8009a1a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	7850      	ldrb	r0, [r2, #1]
 8009940:	2200      	movs	r2, #0
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	4798      	blx	r3
      break;
 8009946:	e068      	b.n	8009a1a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	785b      	ldrb	r3, [r3, #1]
 800994c:	2b0b      	cmp	r3, #11
 800994e:	d852      	bhi.n	80099f6 <USBD_CDC_Setup+0x162>
 8009950:	a201      	add	r2, pc, #4	@ (adr r2, 8009958 <USBD_CDC_Setup+0xc4>)
 8009952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009956:	bf00      	nop
 8009958:	08009989 	.word	0x08009989
 800995c:	08009a05 	.word	0x08009a05
 8009960:	080099f7 	.word	0x080099f7
 8009964:	080099f7 	.word	0x080099f7
 8009968:	080099f7 	.word	0x080099f7
 800996c:	080099f7 	.word	0x080099f7
 8009970:	080099f7 	.word	0x080099f7
 8009974:	080099f7 	.word	0x080099f7
 8009978:	080099f7 	.word	0x080099f7
 800997c:	080099f7 	.word	0x080099f7
 8009980:	080099b3 	.word	0x080099b3
 8009984:	080099dd 	.word	0x080099dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b03      	cmp	r3, #3
 8009992:	d107      	bne.n	80099a4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009994:	f107 030a 	add.w	r3, r7, #10
 8009998:	2202      	movs	r2, #2
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 fa82 	bl	800aea6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099a2:	e032      	b.n	8009a0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fa0c 	bl	800adc4 <USBD_CtlError>
            ret = USBD_FAIL;
 80099ac:	2303      	movs	r3, #3
 80099ae:	75fb      	strb	r3, [r7, #23]
          break;
 80099b0:	e02b      	b.n	8009a0a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d107      	bne.n	80099ce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80099be:	f107 030d 	add.w	r3, r7, #13
 80099c2:	2201      	movs	r2, #1
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f001 fa6d 	bl	800aea6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099cc:	e01d      	b.n	8009a0a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f001 f9f7 	bl	800adc4 <USBD_CtlError>
            ret = USBD_FAIL;
 80099d6:	2303      	movs	r3, #3
 80099d8:	75fb      	strb	r3, [r7, #23]
          break;
 80099da:	e016      	b.n	8009a0a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d00f      	beq.n	8009a08 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f001 f9ea 	bl	800adc4 <USBD_CtlError>
            ret = USBD_FAIL;
 80099f0:	2303      	movs	r3, #3
 80099f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80099f4:	e008      	b.n	8009a08 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f001 f9e3 	bl	800adc4 <USBD_CtlError>
          ret = USBD_FAIL;
 80099fe:	2303      	movs	r3, #3
 8009a00:	75fb      	strb	r3, [r7, #23]
          break;
 8009a02:	e002      	b.n	8009a0a <USBD_CDC_Setup+0x176>
          break;
 8009a04:	bf00      	nop
 8009a06:	e008      	b.n	8009a1a <USBD_CDC_Setup+0x186>
          break;
 8009a08:	bf00      	nop
      }
      break;
 8009a0a:	e006      	b.n	8009a1a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 f9d8 	bl	800adc4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009a14:	2303      	movs	r3, #3
 8009a16:	75fb      	strb	r3, [r7, #23]
      break;
 8009a18:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009a36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e04f      	b.n	8009ae6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009a4e:	78fa      	ldrb	r2, [r7, #3]
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	440b      	add	r3, r1
 8009a5c:	3318      	adds	r3, #24
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d029      	beq.n	8009ab8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	3318      	adds	r3, #24
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	78f9      	ldrb	r1, [r7, #3]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	4403      	add	r3, r0
 8009a84:	3320      	adds	r3, #32
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a8c:	fb01 f303 	mul.w	r3, r1, r3
 8009a90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d110      	bne.n	8009ab8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009a96:	78fa      	ldrb	r2, [r7, #3]
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	3318      	adds	r3, #24
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009aaa:	78f9      	ldrb	r1, [r7, #3]
 8009aac:	2300      	movs	r3, #0
 8009aae:	2200      	movs	r2, #0
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 fec6 	bl	800b842 <USBD_LL_Transmit>
 8009ab6:	e015      	b.n	8009ae4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009ae0:	78fa      	ldrb	r2, [r7, #3]
 8009ae2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	460b      	mov	r3, r1
 8009af8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e015      	b.n	8009b3c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f001 fed6 	bl	800b8c6 <USBD_LL_GetRxDataSize>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009b36:	4611      	mov	r1, r2
 8009b38:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d101      	bne.n	8009b5e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e01a      	b.n	8009b94 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d014      	beq.n	8009b92 <USBD_CDC_EP0_RxReady+0x4e>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009b6e:	2bff      	cmp	r3, #255	@ 0xff
 8009b70:	d00f      	beq.n	8009b92 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009b80:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	22ff      	movs	r2, #255	@ 0xff
 8009b8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2243      	movs	r2, #67	@ 0x43
 8009ba8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009baa:	4b03      	ldr	r3, [pc, #12]	@ (8009bb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	2000012c 	.word	0x2000012c

08009bbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2243      	movs	r2, #67	@ 0x43
 8009bc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009bca:	4b03      	ldr	r3, [pc, #12]	@ (8009bd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	200000e8 	.word	0x200000e8

08009bdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2243      	movs	r2, #67	@ 0x43
 8009be8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009bea:	4b03      	ldr	r3, [pc, #12]	@ (8009bf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	20000170 	.word	0x20000170

08009bfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	220a      	movs	r2, #10
 8009c08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009c0a:	4b03      	ldr	r3, [pc, #12]	@ (8009c18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	200000a4 	.word	0x200000a4

08009c1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e004      	b.n	8009c3a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b087      	sub	sp, #28
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	60f8      	str	r0, [r7, #12]
 8009c4e:	60b9      	str	r1, [r7, #8]
 8009c50:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c58:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e008      	b.n	8009c76 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	371c      	adds	r7, #28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e004      	b.n	8009ca8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cc2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e01a      	b.n	8009d0c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d114      	bne.n	8009d0a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009cfe:	2181      	movs	r1, #129	@ 0x81
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 fd9e 	bl	800b842 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e016      	b.n	8009d60 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	7c1b      	ldrb	r3, [r3, #16]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d109      	bne.n	8009d4e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d44:	2101      	movs	r1, #1
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 fd9c 	bl	800b884 <USBD_LL_PrepareReceive>
 8009d4c:	e007      	b.n	8009d5e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d54:	2340      	movs	r3, #64	@ 0x40
 8009d56:	2101      	movs	r1, #1
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f001 fd93 	bl	800b884 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	4613      	mov	r3, r2
 8009d74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e01f      	b.n	8009dc0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	79fa      	ldrb	r2, [r7, #7]
 8009db2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f001 fbfb 	bl	800b5b0 <USBD_LL_Init>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e016      	b.n	8009e0e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00b      	beq.n	8009e0c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfc:	f107 020e 	add.w	r2, r7, #14
 8009e00:	4610      	mov	r0, r2
 8009e02:	4798      	blx	r3
 8009e04:	4602      	mov	r2, r0
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f001 fc26 	bl	800b670 <USBD_LL_Start>
 8009e24:	4603      	mov	r3, r0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009e50:	2303      	movs	r3, #3
 8009e52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d009      	beq.n	8009e72 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	78fa      	ldrb	r2, [r7, #3]
 8009e68:	4611      	mov	r1, r2
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	4798      	blx	r3
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d007      	beq.n	8009ea2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	78fa      	ldrb	r2, [r7, #3]
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	4798      	blx	r3
  }

  return USBD_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f000 ff46 	bl	800ad50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ee0:	f003 031f 	and.w	r3, r3, #31
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d01a      	beq.n	8009f1e <USBD_LL_SetupStage+0x72>
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d822      	bhi.n	8009f32 <USBD_LL_SetupStage+0x86>
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <USBD_LL_SetupStage+0x4a>
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d00a      	beq.n	8009f0a <USBD_LL_SetupStage+0x5e>
 8009ef4:	e01d      	b.n	8009f32 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f9ee 	bl	800a2e0 <USBD_StdDevReq>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]
      break;
 8009f08:	e020      	b.n	8009f4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fa52 	bl	800a3bc <USBD_StdItfReq>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f1c:	e016      	b.n	8009f4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f24:	4619      	mov	r1, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa91 	bl	800a44e <USBD_StdEPReq>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f30:	e00c      	b.n	8009f4c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f38:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f001 fbf5 	bl	800b730 <USBD_LL_StallEP>
 8009f46:	4603      	mov	r3, r0
 8009f48:	73fb      	strb	r3, [r7, #15]
      break;
 8009f4a:	bf00      	nop
  }

  return ret;
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b086      	sub	sp, #24
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	607a      	str	r2, [r7, #4]
 8009f62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d138      	bne.n	8009fdc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009f70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d14a      	bne.n	800a012 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d913      	bls.n	8009fb0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	1ad2      	subs	r2, r2, r3
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	68da      	ldr	r2, [r3, #12]
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	bf28      	it	cs
 8009fa2:	4613      	movcs	r3, r2
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 ffc5 	bl	800af38 <USBD_CtlContinueRx>
 8009fae:	e030      	b.n	800a012 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d10b      	bne.n	8009fd4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d005      	beq.n	8009fd4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 ffc0 	bl	800af5a <USBD_CtlSendStatus>
 8009fda:	e01a      	b.n	800a012 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d114      	bne.n	800a012 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00e      	beq.n	800a012 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	7afa      	ldrb	r2, [r7, #11]
 8009ffe:	4611      	mov	r1, r2
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	4798      	blx	r3
 800a004:	4603      	mov	r3, r0
 800a006:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	e000      	b.n	800a014 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	460b      	mov	r3, r1
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a02a:	7afb      	ldrb	r3, [r7, #11]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d16b      	bne.n	800a108 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3314      	adds	r3, #20
 800a034:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d156      	bne.n	800a0ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d914      	bls.n	800a076 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	689a      	ldr	r2, [r3, #8]
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	1ad2      	subs	r2, r2, r3
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	461a      	mov	r2, r3
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 ff3a 	bl	800aedc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a068:	2300      	movs	r3, #0
 800a06a:	2200      	movs	r2, #0
 800a06c:	2100      	movs	r1, #0
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f001 fc08 	bl	800b884 <USBD_LL_PrepareReceive>
 800a074:	e03b      	b.n	800a0ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	68da      	ldr	r2, [r3, #12]
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d11c      	bne.n	800a0bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d316      	bcc.n	800a0bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	685a      	ldr	r2, [r3, #4]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a098:	429a      	cmp	r2, r3
 800a09a:	d20f      	bcs.n	800a0bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a09c:	2200      	movs	r2, #0
 800a09e:	2100      	movs	r1, #0
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 ff1b 	bl	800aedc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f001 fbe5 	bl	800b884 <USBD_LL_PrepareReceive>
 800a0ba:	e018      	b.n	800a0ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d10b      	bne.n	800a0e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d005      	beq.n	800a0e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0e0:	2180      	movs	r1, #128	@ 0x80
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f001 fb24 	bl	800b730 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 ff49 	bl	800af80 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d122      	bne.n	800a13e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7ff fe98 	bl	8009e2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a106:	e01a      	b.n	800a13e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b03      	cmp	r3, #3
 800a112:	d114      	bne.n	800a13e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00e      	beq.n	800a13e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	7afa      	ldrb	r2, [r7, #11]
 800a12a:	4611      	mov	r1, r2
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	4798      	blx	r3
 800a130:	4603      	mov	r3, r0
 800a132:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	e000      	b.n	800a140 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a174:	2b00      	cmp	r3, #0
 800a176:	d101      	bne.n	800a17c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a178:	2303      	movs	r3, #3
 800a17a:	e02f      	b.n	800a1dc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00f      	beq.n	800a1a6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d009      	beq.n	800a1a6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	6852      	ldr	r2, [r2, #4]
 800a19e:	b2d2      	uxtb	r2, r2
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1a6:	2340      	movs	r3, #64	@ 0x40
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f001 fa7a 	bl	800b6a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2240      	movs	r2, #64	@ 0x40
 800a1be:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1c2:	2340      	movs	r3, #64	@ 0x40
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2180      	movs	r1, #128	@ 0x80
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f001 fa6c 	bl	800b6a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2240      	movs	r2, #64	@ 0x40
 800a1d8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	78fa      	ldrb	r2, [r7, #3]
 800a1f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a212:	b2da      	uxtb	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2204      	movs	r2, #4
 800a21e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b04      	cmp	r3, #4
 800a242:	d106      	bne.n	800a252 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a272:	2303      	movs	r3, #3
 800a274:	e012      	b.n	800a29c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d10b      	bne.n	800a29a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d005      	beq.n	800a29a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2c2:	8a3b      	ldrh	r3, [r7, #16]
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	b21a      	sxth	r2, r3
 800a2c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	b21b      	sxth	r3, r3
 800a2d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a2d2:	89fb      	ldrh	r3, [r7, #14]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a2f6:	2b40      	cmp	r3, #64	@ 0x40
 800a2f8:	d005      	beq.n	800a306 <USBD_StdDevReq+0x26>
 800a2fa:	2b40      	cmp	r3, #64	@ 0x40
 800a2fc:	d853      	bhi.n	800a3a6 <USBD_StdDevReq+0xc6>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00b      	beq.n	800a31a <USBD_StdDevReq+0x3a>
 800a302:	2b20      	cmp	r3, #32
 800a304:	d14f      	bne.n	800a3a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	4798      	blx	r3
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]
      break;
 800a318:	e04a      	b.n	800a3b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	785b      	ldrb	r3, [r3, #1]
 800a31e:	2b09      	cmp	r3, #9
 800a320:	d83b      	bhi.n	800a39a <USBD_StdDevReq+0xba>
 800a322:	a201      	add	r2, pc, #4	@ (adr r2, 800a328 <USBD_StdDevReq+0x48>)
 800a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a328:	0800a37d 	.word	0x0800a37d
 800a32c:	0800a391 	.word	0x0800a391
 800a330:	0800a39b 	.word	0x0800a39b
 800a334:	0800a387 	.word	0x0800a387
 800a338:	0800a39b 	.word	0x0800a39b
 800a33c:	0800a35b 	.word	0x0800a35b
 800a340:	0800a351 	.word	0x0800a351
 800a344:	0800a39b 	.word	0x0800a39b
 800a348:	0800a373 	.word	0x0800a373
 800a34c:	0800a365 	.word	0x0800a365
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f9de 	bl	800a714 <USBD_GetDescriptor>
          break;
 800a358:	e024      	b.n	800a3a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fb6d 	bl	800aa3c <USBD_SetAddress>
          break;
 800a362:	e01f      	b.n	800a3a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fbac 	bl	800aac4 <USBD_SetConfig>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]
          break;
 800a370:	e018      	b.n	800a3a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fc4b 	bl	800ac10 <USBD_GetConfig>
          break;
 800a37a:	e013      	b.n	800a3a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fc7c 	bl	800ac7c <USBD_GetStatus>
          break;
 800a384:	e00e      	b.n	800a3a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fcab 	bl	800ace4 <USBD_SetFeature>
          break;
 800a38e:	e009      	b.n	800a3a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fcba 	bl	800ad0c <USBD_ClrFeature>
          break;
 800a398:	e004      	b.n	800a3a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fd11 	bl	800adc4 <USBD_CtlError>
          break;
 800a3a2:	bf00      	nop
      }
      break;
 800a3a4:	e004      	b.n	800a3b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fd0b 	bl	800adc4 <USBD_CtlError>
      break;
 800a3ae:	bf00      	nop
  }

  return ret;
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop

0800a3bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3d2:	2b40      	cmp	r3, #64	@ 0x40
 800a3d4:	d005      	beq.n	800a3e2 <USBD_StdItfReq+0x26>
 800a3d6:	2b40      	cmp	r3, #64	@ 0x40
 800a3d8:	d82f      	bhi.n	800a43a <USBD_StdItfReq+0x7e>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <USBD_StdItfReq+0x26>
 800a3de:	2b20      	cmp	r3, #32
 800a3e0:	d12b      	bne.n	800a43a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d81d      	bhi.n	800a42c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	889b      	ldrh	r3, [r3, #4]
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d813      	bhi.n	800a422 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	4798      	blx	r3
 800a408:	4603      	mov	r3, r0
 800a40a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	88db      	ldrh	r3, [r3, #6]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d110      	bne.n	800a436 <USBD_StdItfReq+0x7a>
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10d      	bne.n	800a436 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fd9d 	bl	800af5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a420:	e009      	b.n	800a436 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fccd 	bl	800adc4 <USBD_CtlError>
          break;
 800a42a:	e004      	b.n	800a436 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fcc8 	bl	800adc4 <USBD_CtlError>
          break;
 800a434:	e000      	b.n	800a438 <USBD_StdItfReq+0x7c>
          break;
 800a436:	bf00      	nop
      }
      break;
 800a438:	e004      	b.n	800a444 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fcc1 	bl	800adc4 <USBD_CtlError>
      break;
 800a442:	bf00      	nop
  }

  return ret;
 800a444:	7bfb      	ldrb	r3, [r7, #15]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	889b      	ldrh	r3, [r3, #4]
 800a460:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a46a:	2b40      	cmp	r3, #64	@ 0x40
 800a46c:	d007      	beq.n	800a47e <USBD_StdEPReq+0x30>
 800a46e:	2b40      	cmp	r3, #64	@ 0x40
 800a470:	f200 8145 	bhi.w	800a6fe <USBD_StdEPReq+0x2b0>
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00c      	beq.n	800a492 <USBD_StdEPReq+0x44>
 800a478:	2b20      	cmp	r3, #32
 800a47a:	f040 8140 	bne.w	800a6fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	4798      	blx	r3
 800a48c:	4603      	mov	r3, r0
 800a48e:	73fb      	strb	r3, [r7, #15]
      break;
 800a490:	e13a      	b.n	800a708 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	785b      	ldrb	r3, [r3, #1]
 800a496:	2b03      	cmp	r3, #3
 800a498:	d007      	beq.n	800a4aa <USBD_StdEPReq+0x5c>
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	f300 8129 	bgt.w	800a6f2 <USBD_StdEPReq+0x2a4>
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d07f      	beq.n	800a5a4 <USBD_StdEPReq+0x156>
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d03c      	beq.n	800a522 <USBD_StdEPReq+0xd4>
 800a4a8:	e123      	b.n	800a6f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d002      	beq.n	800a4bc <USBD_StdEPReq+0x6e>
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d016      	beq.n	800a4e8 <USBD_StdEPReq+0x9a>
 800a4ba:	e02c      	b.n	800a516 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00d      	beq.n	800a4de <USBD_StdEPReq+0x90>
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	2b80      	cmp	r3, #128	@ 0x80
 800a4c6:	d00a      	beq.n	800a4de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f001 f92f 	bl	800b730 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4d2:	2180      	movs	r1, #128	@ 0x80
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f001 f92b 	bl	800b730 <USBD_LL_StallEP>
 800a4da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4dc:	e020      	b.n	800a520 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a4de:	6839      	ldr	r1, [r7, #0]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fc6f 	bl	800adc4 <USBD_CtlError>
              break;
 800a4e6:	e01b      	b.n	800a520 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	885b      	ldrh	r3, [r3, #2]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10e      	bne.n	800a50e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4f0:	7bbb      	ldrb	r3, [r7, #14]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00b      	beq.n	800a50e <USBD_StdEPReq+0xc0>
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
 800a4f8:	2b80      	cmp	r3, #128	@ 0x80
 800a4fa:	d008      	beq.n	800a50e <USBD_StdEPReq+0xc0>
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	88db      	ldrh	r3, [r3, #6]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d104      	bne.n	800a50e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a504:	7bbb      	ldrb	r3, [r7, #14]
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f001 f911 	bl	800b730 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fd23 	bl	800af5a <USBD_CtlSendStatus>

              break;
 800a514:	e004      	b.n	800a520 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fc53 	bl	800adc4 <USBD_CtlError>
              break;
 800a51e:	bf00      	nop
          }
          break;
 800a520:	e0ec      	b.n	800a6fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d002      	beq.n	800a534 <USBD_StdEPReq+0xe6>
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d016      	beq.n	800a560 <USBD_StdEPReq+0x112>
 800a532:	e030      	b.n	800a596 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00d      	beq.n	800a556 <USBD_StdEPReq+0x108>
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
 800a53c:	2b80      	cmp	r3, #128	@ 0x80
 800a53e:	d00a      	beq.n	800a556 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a540:	7bbb      	ldrb	r3, [r7, #14]
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f001 f8f3 	bl	800b730 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a54a:	2180      	movs	r1, #128	@ 0x80
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 f8ef 	bl	800b730 <USBD_LL_StallEP>
 800a552:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a554:	e025      	b.n	800a5a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fc33 	bl	800adc4 <USBD_CtlError>
              break;
 800a55e:	e020      	b.n	800a5a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	885b      	ldrh	r3, [r3, #2]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d11b      	bne.n	800a5a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a568:	7bbb      	ldrb	r3, [r7, #14]
 800a56a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d004      	beq.n	800a57c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a572:	7bbb      	ldrb	r3, [r7, #14]
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 f8f9 	bl	800b76e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fcec 	bl	800af5a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	4798      	blx	r3
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a594:	e004      	b.n	800a5a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fc13 	bl	800adc4 <USBD_CtlError>
              break;
 800a59e:	e000      	b.n	800a5a2 <USBD_StdEPReq+0x154>
              break;
 800a5a0:	bf00      	nop
          }
          break;
 800a5a2:	e0ab      	b.n	800a6fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d002      	beq.n	800a5b6 <USBD_StdEPReq+0x168>
 800a5b0:	2b03      	cmp	r3, #3
 800a5b2:	d032      	beq.n	800a61a <USBD_StdEPReq+0x1cc>
 800a5b4:	e097      	b.n	800a6e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5b6:	7bbb      	ldrb	r3, [r7, #14]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d007      	beq.n	800a5cc <USBD_StdEPReq+0x17e>
 800a5bc:	7bbb      	ldrb	r3, [r7, #14]
 800a5be:	2b80      	cmp	r3, #128	@ 0x80
 800a5c0:	d004      	beq.n	800a5cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fbfd 	bl	800adc4 <USBD_CtlError>
                break;
 800a5ca:	e091      	b.n	800a6f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	da0b      	bge.n	800a5ec <USBD_StdEPReq+0x19e>
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5da:	4613      	mov	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	3310      	adds	r3, #16
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	e00b      	b.n	800a604 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	4413      	add	r3, r2
 800a602:	3304      	adds	r3, #4
 800a604:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2200      	movs	r2, #0
 800a60a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2202      	movs	r2, #2
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fc47 	bl	800aea6 <USBD_CtlSendData>
              break;
 800a618:	e06a      	b.n	800a6f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a61a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da11      	bge.n	800a646 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	f003 020f 	and.w	r2, r3, #15
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	4613      	mov	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	440b      	add	r3, r1
 800a634:	3324      	adds	r3, #36	@ 0x24
 800a636:	881b      	ldrh	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d117      	bne.n	800a66c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fbc0 	bl	800adc4 <USBD_CtlError>
                  break;
 800a644:	e054      	b.n	800a6f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	f003 020f 	and.w	r2, r3, #15
 800a64c:	6879      	ldr	r1, [r7, #4]
 800a64e:	4613      	mov	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4413      	add	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	440b      	add	r3, r1
 800a658:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d104      	bne.n	800a66c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fbad 	bl	800adc4 <USBD_CtlError>
                  break;
 800a66a:	e041      	b.n	800a6f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a66c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a670:	2b00      	cmp	r3, #0
 800a672:	da0b      	bge.n	800a68c <USBD_StdEPReq+0x23e>
 800a674:	7bbb      	ldrb	r3, [r7, #14]
 800a676:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a67a:	4613      	mov	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4413      	add	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	3310      	adds	r3, #16
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	4413      	add	r3, r2
 800a688:	3304      	adds	r3, #4
 800a68a:	e00b      	b.n	800a6a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a68c:	7bbb      	ldrb	r3, [r7, #14]
 800a68e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a692:	4613      	mov	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4413      	add	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <USBD_StdEPReq+0x264>
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	2b80      	cmp	r3, #128	@ 0x80
 800a6b0:	d103      	bne.n	800a6ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	601a      	str	r2, [r3, #0]
 800a6b8:	e00e      	b.n	800a6d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f001 f874 	bl	800b7ac <USBD_LL_IsStallEP>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	e002      	b.n	800a6d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fbe1 	bl	800aea6 <USBD_CtlSendData>
              break;
 800a6e4:	e004      	b.n	800a6f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fb6b 	bl	800adc4 <USBD_CtlError>
              break;
 800a6ee:	bf00      	nop
          }
          break;
 800a6f0:	e004      	b.n	800a6fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fb65 	bl	800adc4 <USBD_CtlError>
          break;
 800a6fa:	bf00      	nop
      }
      break;
 800a6fc:	e004      	b.n	800a708 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fb5f 	bl	800adc4 <USBD_CtlError>
      break;
 800a706:	bf00      	nop
  }

  return ret;
 800a708:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a71e:	2300      	movs	r3, #0
 800a720:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a722:	2300      	movs	r3, #0
 800a724:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a726:	2300      	movs	r3, #0
 800a728:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	885b      	ldrh	r3, [r3, #2]
 800a72e:	0a1b      	lsrs	r3, r3, #8
 800a730:	b29b      	uxth	r3, r3
 800a732:	3b01      	subs	r3, #1
 800a734:	2b0e      	cmp	r3, #14
 800a736:	f200 8152 	bhi.w	800a9de <USBD_GetDescriptor+0x2ca>
 800a73a:	a201      	add	r2, pc, #4	@ (adr r2, 800a740 <USBD_GetDescriptor+0x2c>)
 800a73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a740:	0800a7b1 	.word	0x0800a7b1
 800a744:	0800a7c9 	.word	0x0800a7c9
 800a748:	0800a809 	.word	0x0800a809
 800a74c:	0800a9df 	.word	0x0800a9df
 800a750:	0800a9df 	.word	0x0800a9df
 800a754:	0800a97f 	.word	0x0800a97f
 800a758:	0800a9ab 	.word	0x0800a9ab
 800a75c:	0800a9df 	.word	0x0800a9df
 800a760:	0800a9df 	.word	0x0800a9df
 800a764:	0800a9df 	.word	0x0800a9df
 800a768:	0800a9df 	.word	0x0800a9df
 800a76c:	0800a9df 	.word	0x0800a9df
 800a770:	0800a9df 	.word	0x0800a9df
 800a774:	0800a9df 	.word	0x0800a9df
 800a778:	0800a77d 	.word	0x0800a77d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a782:	69db      	ldr	r3, [r3, #28]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00b      	beq.n	800a7a0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	7c12      	ldrb	r2, [r2, #16]
 800a794:	f107 0108 	add.w	r1, r7, #8
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a79e:	e126      	b.n	800a9ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fb0e 	bl	800adc4 <USBD_CtlError>
        err++;
 800a7a8:	7afb      	ldrb	r3, [r7, #11]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	72fb      	strb	r3, [r7, #11]
      break;
 800a7ae:	e11e      	b.n	800a9ee <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	7c12      	ldrb	r2, [r2, #16]
 800a7bc:	f107 0108 	add.w	r1, r7, #8
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4798      	blx	r3
 800a7c4:	60f8      	str	r0, [r7, #12]
      break;
 800a7c6:	e112      	b.n	800a9ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	7c1b      	ldrb	r3, [r3, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10d      	bne.n	800a7ec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d8:	f107 0208 	add.w	r2, r7, #8
 800a7dc:	4610      	mov	r0, r2
 800a7de:	4798      	blx	r3
 800a7e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a7ea:	e100      	b.n	800a9ee <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7f4:	f107 0208 	add.w	r2, r7, #8
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	4798      	blx	r3
 800a7fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3301      	adds	r3, #1
 800a802:	2202      	movs	r2, #2
 800a804:	701a      	strb	r2, [r3, #0]
      break;
 800a806:	e0f2      	b.n	800a9ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	885b      	ldrh	r3, [r3, #2]
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b05      	cmp	r3, #5
 800a810:	f200 80ac 	bhi.w	800a96c <USBD_GetDescriptor+0x258>
 800a814:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <USBD_GetDescriptor+0x108>)
 800a816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81a:	bf00      	nop
 800a81c:	0800a835 	.word	0x0800a835
 800a820:	0800a869 	.word	0x0800a869
 800a824:	0800a89d 	.word	0x0800a89d
 800a828:	0800a8d1 	.word	0x0800a8d1
 800a82c:	0800a905 	.word	0x0800a905
 800a830:	0800a939 	.word	0x0800a939
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00b      	beq.n	800a858 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	7c12      	ldrb	r2, [r2, #16]
 800a84c:	f107 0108 	add.w	r1, r7, #8
 800a850:	4610      	mov	r0, r2
 800a852:	4798      	blx	r3
 800a854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a856:	e091      	b.n	800a97c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fab2 	bl	800adc4 <USBD_CtlError>
            err++;
 800a860:	7afb      	ldrb	r3, [r7, #11]
 800a862:	3301      	adds	r3, #1
 800a864:	72fb      	strb	r3, [r7, #11]
          break;
 800a866:	e089      	b.n	800a97c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00b      	beq.n	800a88c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	7c12      	ldrb	r2, [r2, #16]
 800a880:	f107 0108 	add.w	r1, r7, #8
 800a884:	4610      	mov	r0, r2
 800a886:	4798      	blx	r3
 800a888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a88a:	e077      	b.n	800a97c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fa98 	bl	800adc4 <USBD_CtlError>
            err++;
 800a894:	7afb      	ldrb	r3, [r7, #11]
 800a896:	3301      	adds	r3, #1
 800a898:	72fb      	strb	r3, [r7, #11]
          break;
 800a89a:	e06f      	b.n	800a97c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00b      	beq.n	800a8c0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	7c12      	ldrb	r2, [r2, #16]
 800a8b4:	f107 0108 	add.w	r1, r7, #8
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	4798      	blx	r3
 800a8bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8be:	e05d      	b.n	800a97c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fa7e 	bl	800adc4 <USBD_CtlError>
            err++;
 800a8c8:	7afb      	ldrb	r3, [r7, #11]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a8ce:	e055      	b.n	800a97c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00b      	beq.n	800a8f4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	7c12      	ldrb	r2, [r2, #16]
 800a8e8:	f107 0108 	add.w	r1, r7, #8
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	4798      	blx	r3
 800a8f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8f2:	e043      	b.n	800a97c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fa64 	bl	800adc4 <USBD_CtlError>
            err++;
 800a8fc:	7afb      	ldrb	r3, [r7, #11]
 800a8fe:	3301      	adds	r3, #1
 800a900:	72fb      	strb	r3, [r7, #11]
          break;
 800a902:	e03b      	b.n	800a97c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00b      	beq.n	800a928 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	7c12      	ldrb	r2, [r2, #16]
 800a91c:	f107 0108 	add.w	r1, r7, #8
 800a920:	4610      	mov	r0, r2
 800a922:	4798      	blx	r3
 800a924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a926:	e029      	b.n	800a97c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fa4a 	bl	800adc4 <USBD_CtlError>
            err++;
 800a930:	7afb      	ldrb	r3, [r7, #11]
 800a932:	3301      	adds	r3, #1
 800a934:	72fb      	strb	r3, [r7, #11]
          break;
 800a936:	e021      	b.n	800a97c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00b      	beq.n	800a95c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	7c12      	ldrb	r2, [r2, #16]
 800a950:	f107 0108 	add.w	r1, r7, #8
 800a954:	4610      	mov	r0, r2
 800a956:	4798      	blx	r3
 800a958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a95a:	e00f      	b.n	800a97c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fa30 	bl	800adc4 <USBD_CtlError>
            err++;
 800a964:	7afb      	ldrb	r3, [r7, #11]
 800a966:	3301      	adds	r3, #1
 800a968:	72fb      	strb	r3, [r7, #11]
          break;
 800a96a:	e007      	b.n	800a97c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fa28 	bl	800adc4 <USBD_CtlError>
          err++;
 800a974:	7afb      	ldrb	r3, [r7, #11]
 800a976:	3301      	adds	r3, #1
 800a978:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a97a:	bf00      	nop
      }
      break;
 800a97c:	e037      	b.n	800a9ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	7c1b      	ldrb	r3, [r3, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d109      	bne.n	800a99a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a98c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a98e:	f107 0208 	add.w	r2, r7, #8
 800a992:	4610      	mov	r0, r2
 800a994:	4798      	blx	r3
 800a996:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a998:	e029      	b.n	800a9ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fa11 	bl	800adc4 <USBD_CtlError>
        err++;
 800a9a2:	7afb      	ldrb	r3, [r7, #11]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a9a8:	e021      	b.n	800a9ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	7c1b      	ldrb	r3, [r3, #16]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10d      	bne.n	800a9ce <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9ba:	f107 0208 	add.w	r2, r7, #8
 800a9be:	4610      	mov	r0, r2
 800a9c0:	4798      	blx	r3
 800a9c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	2207      	movs	r2, #7
 800a9ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9cc:	e00f      	b.n	800a9ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f9f7 	bl	800adc4 <USBD_CtlError>
        err++;
 800a9d6:	7afb      	ldrb	r3, [r7, #11]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	72fb      	strb	r3, [r7, #11]
      break;
 800a9dc:	e007      	b.n	800a9ee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f9ef 	bl	800adc4 <USBD_CtlError>
      err++;
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	72fb      	strb	r3, [r7, #11]
      break;
 800a9ec:	bf00      	nop
  }

  if (err != 0U)
 800a9ee:	7afb      	ldrb	r3, [r7, #11]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d11e      	bne.n	800aa32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	88db      	ldrh	r3, [r3, #6]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d016      	beq.n	800aa2a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a9fc:	893b      	ldrh	r3, [r7, #8]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00e      	beq.n	800aa20 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	88da      	ldrh	r2, [r3, #6]
 800aa06:	893b      	ldrh	r3, [r7, #8]
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	bf28      	it	cs
 800aa0c:	4613      	movcs	r3, r2
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa12:	893b      	ldrh	r3, [r7, #8]
 800aa14:	461a      	mov	r2, r3
 800aa16:	68f9      	ldr	r1, [r7, #12]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fa44 	bl	800aea6 <USBD_CtlSendData>
 800aa1e:	e009      	b.n	800aa34 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f9ce 	bl	800adc4 <USBD_CtlError>
 800aa28:	e004      	b.n	800aa34 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fa95 	bl	800af5a <USBD_CtlSendStatus>
 800aa30:	e000      	b.n	800aa34 <USBD_GetDescriptor+0x320>
    return;
 800aa32:	bf00      	nop
  }
}
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop

0800aa3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	889b      	ldrh	r3, [r3, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d131      	bne.n	800aab2 <USBD_SetAddress+0x76>
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	88db      	ldrh	r3, [r3, #6]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d12d      	bne.n	800aab2 <USBD_SetAddress+0x76>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	885b      	ldrh	r3, [r3, #2]
 800aa5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa5c:	d829      	bhi.n	800aab2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	885b      	ldrh	r3, [r3, #2]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d104      	bne.n	800aa80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f9a3 	bl	800adc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa7e:	e01d      	b.n	800aabc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	7bfa      	ldrb	r2, [r7, #15]
 800aa84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa88:	7bfb      	ldrb	r3, [r7, #15]
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 feb9 	bl	800b804 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fa61 	bl	800af5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d004      	beq.n	800aaa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa6:	e009      	b.n	800aabc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab0:	e004      	b.n	800aabc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aab2:	6839      	ldr	r1, [r7, #0]
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f985 	bl	800adc4 <USBD_CtlError>
  }
}
 800aaba:	bf00      	nop
 800aabc:	bf00      	nop
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	885b      	ldrh	r3, [r3, #2]
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	4b4c      	ldr	r3, [pc, #304]	@ (800ac0c <USBD_SetConfig+0x148>)
 800aada:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aadc:	4b4b      	ldr	r3, [pc, #300]	@ (800ac0c <USBD_SetConfig+0x148>)
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d905      	bls.n	800aaf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aae4:	6839      	ldr	r1, [r7, #0]
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f96c 	bl	800adc4 <USBD_CtlError>
    return USBD_FAIL;
 800aaec:	2303      	movs	r3, #3
 800aaee:	e088      	b.n	800ac02 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d002      	beq.n	800ab02 <USBD_SetConfig+0x3e>
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d025      	beq.n	800ab4c <USBD_SetConfig+0x88>
 800ab00:	e071      	b.n	800abe6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab02:	4b42      	ldr	r3, [pc, #264]	@ (800ac0c <USBD_SetConfig+0x148>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d01c      	beq.n	800ab44 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ab0a:	4b40      	ldr	r3, [pc, #256]	@ (800ac0c <USBD_SetConfig+0x148>)
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab14:	4b3d      	ldr	r3, [pc, #244]	@ (800ac0c <USBD_SetConfig+0x148>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff f992 	bl	8009e44 <USBD_SetClassConfig>
 800ab20:	4603      	mov	r3, r0
 800ab22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d004      	beq.n	800ab34 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f949 	bl	800adc4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab32:	e065      	b.n	800ac00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fa10 	bl	800af5a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2203      	movs	r2, #3
 800ab3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ab42:	e05d      	b.n	800ac00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fa08 	bl	800af5a <USBD_CtlSendStatus>
      break;
 800ab4a:	e059      	b.n	800ac00 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab4c:	4b2f      	ldr	r3, [pc, #188]	@ (800ac0c <USBD_SetConfig+0x148>)
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d112      	bne.n	800ab7a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2202      	movs	r2, #2
 800ab58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ab5c:	4b2b      	ldr	r3, [pc, #172]	@ (800ac0c <USBD_SetConfig+0x148>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	461a      	mov	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab66:	4b29      	ldr	r3, [pc, #164]	@ (800ac0c <USBD_SetConfig+0x148>)
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff f985 	bl	8009e7c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f9f1 	bl	800af5a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab78:	e042      	b.n	800ac00 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ab7a:	4b24      	ldr	r3, [pc, #144]	@ (800ac0c <USBD_SetConfig+0x148>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d02a      	beq.n	800abde <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff f973 	bl	8009e7c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab96:	4b1d      	ldr	r3, [pc, #116]	@ (800ac0c <USBD_SetConfig+0x148>)
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aba0:	4b1a      	ldr	r3, [pc, #104]	@ (800ac0c <USBD_SetConfig+0x148>)
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7ff f94c 	bl	8009e44 <USBD_SetClassConfig>
 800abac:	4603      	mov	r3, r0
 800abae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00f      	beq.n	800abd6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800abb6:	6839      	ldr	r1, [r7, #0]
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f903 	bl	800adc4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7ff f958 	bl	8009e7c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2202      	movs	r2, #2
 800abd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800abd4:	e014      	b.n	800ac00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f9bf 	bl	800af5a <USBD_CtlSendStatus>
      break;
 800abdc:	e010      	b.n	800ac00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f9bb 	bl	800af5a <USBD_CtlSendStatus>
      break;
 800abe4:	e00c      	b.n	800ac00 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f8eb 	bl	800adc4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abee:	4b07      	ldr	r3, [pc, #28]	@ (800ac0c <USBD_SetConfig+0x148>)
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7ff f941 	bl	8009e7c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800abfa:	2303      	movs	r3, #3
 800abfc:	73fb      	strb	r3, [r7, #15]
      break;
 800abfe:	bf00      	nop
  }

  return ret;
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	20000c5c 	.word	0x20000c5c

0800ac10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	88db      	ldrh	r3, [r3, #6]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d004      	beq.n	800ac2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f8cd 	bl	800adc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac2a:	e023      	b.n	800ac74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	dc02      	bgt.n	800ac3e <USBD_GetConfig+0x2e>
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dc03      	bgt.n	800ac44 <USBD_GetConfig+0x34>
 800ac3c:	e015      	b.n	800ac6a <USBD_GetConfig+0x5a>
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d00b      	beq.n	800ac5a <USBD_GetConfig+0x4a>
 800ac42:	e012      	b.n	800ac6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f927 	bl	800aea6 <USBD_CtlSendData>
        break;
 800ac58:	e00c      	b.n	800ac74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	2201      	movs	r2, #1
 800ac60:	4619      	mov	r1, r3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f91f 	bl	800aea6 <USBD_CtlSendData>
        break;
 800ac68:	e004      	b.n	800ac74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f8a9 	bl	800adc4 <USBD_CtlError>
        break;
 800ac72:	bf00      	nop
}
 800ac74:	bf00      	nop
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d81e      	bhi.n	800acd2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	88db      	ldrh	r3, [r3, #6]
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d004      	beq.n	800aca6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f890 	bl	800adc4 <USBD_CtlError>
        break;
 800aca4:	e01a      	b.n	800acdc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d005      	beq.n	800acc2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	f043 0202 	orr.w	r2, r3, #2
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	330c      	adds	r3, #12
 800acc6:	2202      	movs	r2, #2
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f8eb 	bl	800aea6 <USBD_CtlSendData>
      break;
 800acd0:	e004      	b.n	800acdc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f875 	bl	800adc4 <USBD_CtlError>
      break;
 800acda:	bf00      	nop
  }
}
 800acdc:	bf00      	nop
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	885b      	ldrh	r3, [r3, #2]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d106      	bne.n	800ad04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f92b 	bl	800af5a <USBD_CtlSendStatus>
  }
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d80b      	bhi.n	800ad3c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	885b      	ldrh	r3, [r3, #2]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d10c      	bne.n	800ad46 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f910 	bl	800af5a <USBD_CtlSendStatus>
      }
      break;
 800ad3a:	e004      	b.n	800ad46 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f840 	bl	800adc4 <USBD_CtlError>
      break;
 800ad44:	e000      	b.n	800ad48 <USBD_ClrFeature+0x3c>
      break;
 800ad46:	bf00      	nop
  }
}
 800ad48:	bf00      	nop
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	781a      	ldrb	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	781a      	ldrb	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3301      	adds	r3, #1
 800ad78:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7ff fa92 	bl	800a2a4 <SWAPBYTE>
 800ad80:	4603      	mov	r3, r0
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3301      	adds	r3, #1
 800ad92:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f7ff fa85 	bl	800a2a4 <SWAPBYTE>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	3301      	adds	r3, #1
 800ada6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	3301      	adds	r3, #1
 800adac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f7ff fa78 	bl	800a2a4 <SWAPBYTE>
 800adb4:	4603      	mov	r3, r0
 800adb6:	461a      	mov	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	80da      	strh	r2, [r3, #6]
}
 800adbc:	bf00      	nop
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800adce:	2180      	movs	r1, #128	@ 0x80
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fcad 	bl	800b730 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800add6:	2100      	movs	r1, #0
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 fca9 	bl	800b730 <USBD_LL_StallEP>
}
 800adde:	bf00      	nop
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b086      	sub	sp, #24
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800adf2:	2300      	movs	r3, #0
 800adf4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d036      	beq.n	800ae6a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ae00:	6938      	ldr	r0, [r7, #16]
 800ae02:	f000 f836 	bl	800ae72 <USBD_GetLen>
 800ae06:	4603      	mov	r3, r0
 800ae08:	3301      	adds	r3, #1
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	4413      	add	r3, r2
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	7812      	ldrb	r2, [r2, #0]
 800ae1e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae20:	7dfb      	ldrb	r3, [r7, #23]
 800ae22:	3301      	adds	r3, #1
 800ae24:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	2203      	movs	r2, #3
 800ae2e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae30:	7dfb      	ldrb	r3, [r7, #23]
 800ae32:	3301      	adds	r3, #1
 800ae34:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae36:	e013      	b.n	800ae60 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	7812      	ldrb	r2, [r2, #0]
 800ae42:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	3301      	adds	r3, #1
 800ae48:	613b      	str	r3, [r7, #16]
    idx++;
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae50:	7dfb      	ldrb	r3, [r7, #23]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	4413      	add	r3, r2
 800ae56:	2200      	movs	r2, #0
 800ae58:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1e7      	bne.n	800ae38 <USBD_GetString+0x52>
 800ae68:	e000      	b.n	800ae6c <USBD_GetString+0x86>
    return;
 800ae6a:	bf00      	nop
  }
}
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b085      	sub	sp, #20
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae82:	e005      	b.n	800ae90 <USBD_GetLen+0x1e>
  {
    len++;
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	3301      	adds	r3, #1
 800ae88:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1f5      	bne.n	800ae84 <USBD_GetLen+0x12>
  }

  return len;
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	2100      	movs	r1, #0
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 fcb8 	bl	800b842 <USBD_LL_Transmit>

  return USBD_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	2100      	movs	r1, #0
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f000 fca7 	bl	800b842 <USBD_LL_Transmit>

  return USBD_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	60f8      	str	r0, [r7, #12]
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2203      	movs	r2, #3
 800af0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	2100      	movs	r1, #0
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f000 fcab 	bl	800b884 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	2100      	movs	r1, #0
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f000 fc9a 	bl	800b884 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2204      	movs	r2, #4
 800af66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af6a:	2300      	movs	r3, #0
 800af6c:	2200      	movs	r2, #0
 800af6e:	2100      	movs	r1, #0
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fc66 	bl	800b842 <USBD_LL_Transmit>

  return USBD_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2205      	movs	r2, #5
 800af8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af90:	2300      	movs	r3, #0
 800af92:	2200      	movs	r2, #0
 800af94:	2100      	movs	r1, #0
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fc74 	bl	800b884 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800afac:	2200      	movs	r2, #0
 800afae:	4912      	ldr	r1, [pc, #72]	@ (800aff8 <MX_USB_Device_Init+0x50>)
 800afb0:	4812      	ldr	r0, [pc, #72]	@ (800affc <MX_USB_Device_Init+0x54>)
 800afb2:	f7fe fed9 	bl	8009d68 <USBD_Init>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800afbc:	f7f5 fc43 	bl	8000846 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800afc0:	490f      	ldr	r1, [pc, #60]	@ (800b000 <MX_USB_Device_Init+0x58>)
 800afc2:	480e      	ldr	r0, [pc, #56]	@ (800affc <MX_USB_Device_Init+0x54>)
 800afc4:	f7fe ff00 	bl	8009dc8 <USBD_RegisterClass>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800afce:	f7f5 fc3a 	bl	8000846 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800afd2:	490c      	ldr	r1, [pc, #48]	@ (800b004 <MX_USB_Device_Init+0x5c>)
 800afd4:	4809      	ldr	r0, [pc, #36]	@ (800affc <MX_USB_Device_Init+0x54>)
 800afd6:	f7fe fe21 	bl	8009c1c <USBD_CDC_RegisterInterface>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800afe0:	f7f5 fc31 	bl	8000846 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800afe4:	4805      	ldr	r0, [pc, #20]	@ (800affc <MX_USB_Device_Init+0x54>)
 800afe6:	f7fe ff16 	bl	8009e16 <USBD_Start>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800aff0:	f7f5 fc29 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800aff4:	bf00      	nop
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	200001c8 	.word	0x200001c8
 800affc:	20000c60 	.word	0x20000c60
 800b000:	200000b0 	.word	0x200000b0
 800b004:	200001b4 	.word	0x200001b4

0800b008 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b00c:	2200      	movs	r2, #0
 800b00e:	4905      	ldr	r1, [pc, #20]	@ (800b024 <CDC_Init_FS+0x1c>)
 800b010:	4805      	ldr	r0, [pc, #20]	@ (800b028 <CDC_Init_FS+0x20>)
 800b012:	f7fe fe18 	bl	8009c46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b016:	4905      	ldr	r1, [pc, #20]	@ (800b02c <CDC_Init_FS+0x24>)
 800b018:	4803      	ldr	r0, [pc, #12]	@ (800b028 <CDC_Init_FS+0x20>)
 800b01a:	f7fe fe32 	bl	8009c82 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b01e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b020:	4618      	mov	r0, r3
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20001330 	.word	0x20001330
 800b028:	20000c60 	.word	0x20000c60
 800b02c:	20000f30 	.word	0x20000f30

0800b030 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b034:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b036:	4618      	mov	r0, r3
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	6039      	str	r1, [r7, #0]
 800b04a:	71fb      	strb	r3, [r7, #7]
 800b04c:	4613      	mov	r3, r2
 800b04e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	2b23      	cmp	r3, #35	@ 0x23
 800b054:	d84a      	bhi.n	800b0ec <CDC_Control_FS+0xac>
 800b056:	a201      	add	r2, pc, #4	@ (adr r2, 800b05c <CDC_Control_FS+0x1c>)
 800b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05c:	0800b0ed 	.word	0x0800b0ed
 800b060:	0800b0ed 	.word	0x0800b0ed
 800b064:	0800b0ed 	.word	0x0800b0ed
 800b068:	0800b0ed 	.word	0x0800b0ed
 800b06c:	0800b0ed 	.word	0x0800b0ed
 800b070:	0800b0ed 	.word	0x0800b0ed
 800b074:	0800b0ed 	.word	0x0800b0ed
 800b078:	0800b0ed 	.word	0x0800b0ed
 800b07c:	0800b0ed 	.word	0x0800b0ed
 800b080:	0800b0ed 	.word	0x0800b0ed
 800b084:	0800b0ed 	.word	0x0800b0ed
 800b088:	0800b0ed 	.word	0x0800b0ed
 800b08c:	0800b0ed 	.word	0x0800b0ed
 800b090:	0800b0ed 	.word	0x0800b0ed
 800b094:	0800b0ed 	.word	0x0800b0ed
 800b098:	0800b0ed 	.word	0x0800b0ed
 800b09c:	0800b0ed 	.word	0x0800b0ed
 800b0a0:	0800b0ed 	.word	0x0800b0ed
 800b0a4:	0800b0ed 	.word	0x0800b0ed
 800b0a8:	0800b0ed 	.word	0x0800b0ed
 800b0ac:	0800b0ed 	.word	0x0800b0ed
 800b0b0:	0800b0ed 	.word	0x0800b0ed
 800b0b4:	0800b0ed 	.word	0x0800b0ed
 800b0b8:	0800b0ed 	.word	0x0800b0ed
 800b0bc:	0800b0ed 	.word	0x0800b0ed
 800b0c0:	0800b0ed 	.word	0x0800b0ed
 800b0c4:	0800b0ed 	.word	0x0800b0ed
 800b0c8:	0800b0ed 	.word	0x0800b0ed
 800b0cc:	0800b0ed 	.word	0x0800b0ed
 800b0d0:	0800b0ed 	.word	0x0800b0ed
 800b0d4:	0800b0ed 	.word	0x0800b0ed
 800b0d8:	0800b0ed 	.word	0x0800b0ed
 800b0dc:	0800b0ed 	.word	0x0800b0ed
 800b0e0:	0800b0ed 	.word	0x0800b0ed
 800b0e4:	0800b0ed 	.word	0x0800b0ed
 800b0e8:	0800b0ed 	.word	0x0800b0ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b0ec:	bf00      	nop
  }

  return (USBD_OK);
 800b0ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	4805      	ldr	r0, [pc, #20]	@ (800b120 <CDC_Receive_FS+0x24>)
 800b10a:	f7fe fdba 	bl	8009c82 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b10e:	4804      	ldr	r0, [pc, #16]	@ (800b120 <CDC_Receive_FS+0x24>)
 800b110:	f7fe fe00 	bl	8009d14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b114:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20000c60 	.word	0x20000c60

0800b124 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b134:	4b0d      	ldr	r3, [pc, #52]	@ (800b16c <CDC_Transmit_FS+0x48>)
 800b136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b13a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b146:	2301      	movs	r3, #1
 800b148:	e00b      	b.n	800b162 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b14a:	887b      	ldrh	r3, [r7, #2]
 800b14c:	461a      	mov	r2, r3
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	4806      	ldr	r0, [pc, #24]	@ (800b16c <CDC_Transmit_FS+0x48>)
 800b152:	f7fe fd78 	bl	8009c46 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b156:	4805      	ldr	r0, [pc, #20]	@ (800b16c <CDC_Transmit_FS+0x48>)
 800b158:	f7fe fdac 	bl	8009cb4 <USBD_CDC_TransmitPacket>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b160:	7bfb      	ldrb	r3, [r7, #15]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20000c60 	.word	0x20000c60

0800b170 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b170:	b480      	push	{r7}
 800b172:	b087      	sub	sp, #28
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	4613      	mov	r3, r2
 800b17c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b17e:	2300      	movs	r3, #0
 800b180:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b186:	4618      	mov	r0, r3
 800b188:	371c      	adds	r7, #28
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
	...

0800b194 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b19a:	4b09      	ldr	r3, [pc, #36]	@ (800b1c0 <CDC_Transmit_Is_Busy+0x2c>)
 800b19c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1a0:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e000      	b.n	800b1b2 <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800b1b0:	2300      	movs	r3, #0
  }
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	20000c60 	.word	0x20000c60

0800b1c4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	6039      	str	r1, [r7, #0]
 800b1ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	2212      	movs	r2, #18
 800b1d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b1d6:	4b03      	ldr	r3, [pc, #12]	@ (800b1e4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	200001e8 	.word	0x200001e8

0800b1e8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	6039      	str	r1, [r7, #0]
 800b1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	2204      	movs	r2, #4
 800b1f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b1fa:	4b03      	ldr	r3, [pc, #12]	@ (800b208 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	200001fc 	.word	0x200001fc

0800b20c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	6039      	str	r1, [r7, #0]
 800b216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b218:	79fb      	ldrb	r3, [r7, #7]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d105      	bne.n	800b22a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	4907      	ldr	r1, [pc, #28]	@ (800b240 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b222:	4808      	ldr	r0, [pc, #32]	@ (800b244 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b224:	f7ff fddf 	bl	800ade6 <USBD_GetString>
 800b228:	e004      	b.n	800b234 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	4904      	ldr	r1, [pc, #16]	@ (800b240 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b22e:	4805      	ldr	r0, [pc, #20]	@ (800b244 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b230:	f7ff fdd9 	bl	800ade6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b234:	4b02      	ldr	r3, [pc, #8]	@ (800b240 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20001730 	.word	0x20001730
 800b244:	0800cafc 	.word	0x0800cafc

0800b248 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	6039      	str	r1, [r7, #0]
 800b252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	4904      	ldr	r1, [pc, #16]	@ (800b268 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b258:	4804      	ldr	r0, [pc, #16]	@ (800b26c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b25a:	f7ff fdc4 	bl	800ade6 <USBD_GetString>
  return USBD_StrDesc;
 800b25e:	4b02      	ldr	r3, [pc, #8]	@ (800b268 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	20001730 	.word	0x20001730
 800b26c:	0800cb14 	.word	0x0800cb14

0800b270 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	4603      	mov	r3, r0
 800b278:	6039      	str	r1, [r7, #0]
 800b27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	221a      	movs	r2, #26
 800b280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b282:	f000 f843 	bl	800b30c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b286:	4b02      	ldr	r3, [pc, #8]	@ (800b290 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20000200 	.word	0x20000200

0800b294 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	4603      	mov	r3, r0
 800b29c:	6039      	str	r1, [r7, #0]
 800b29e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b2a0:	79fb      	ldrb	r3, [r7, #7]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d105      	bne.n	800b2b2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	4907      	ldr	r1, [pc, #28]	@ (800b2c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b2aa:	4808      	ldr	r0, [pc, #32]	@ (800b2cc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b2ac:	f7ff fd9b 	bl	800ade6 <USBD_GetString>
 800b2b0:	e004      	b.n	800b2bc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	4904      	ldr	r1, [pc, #16]	@ (800b2c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b2b6:	4805      	ldr	r0, [pc, #20]	@ (800b2cc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b2b8:	f7ff fd95 	bl	800ade6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2bc:	4b02      	ldr	r3, [pc, #8]	@ (800b2c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20001730 	.word	0x20001730
 800b2cc:	0800cb28 	.word	0x0800cb28

0800b2d0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	6039      	str	r1, [r7, #0]
 800b2da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d105      	bne.n	800b2ee <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	4907      	ldr	r1, [pc, #28]	@ (800b304 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b2e6:	4808      	ldr	r0, [pc, #32]	@ (800b308 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b2e8:	f7ff fd7d 	bl	800ade6 <USBD_GetString>
 800b2ec:	e004      	b.n	800b2f8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	4904      	ldr	r1, [pc, #16]	@ (800b304 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b2f2:	4805      	ldr	r0, [pc, #20]	@ (800b308 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b2f4:	f7ff fd77 	bl	800ade6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2f8:	4b02      	ldr	r3, [pc, #8]	@ (800b304 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	20001730 	.word	0x20001730
 800b308:	0800cb34 	.word	0x0800cb34

0800b30c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b312:	4b0f      	ldr	r3, [pc, #60]	@ (800b350 <Get_SerialNum+0x44>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b318:	4b0e      	ldr	r3, [pc, #56]	@ (800b354 <Get_SerialNum+0x48>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b31e:	4b0e      	ldr	r3, [pc, #56]	@ (800b358 <Get_SerialNum+0x4c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4413      	add	r3, r2
 800b32a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d009      	beq.n	800b346 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b332:	2208      	movs	r2, #8
 800b334:	4909      	ldr	r1, [pc, #36]	@ (800b35c <Get_SerialNum+0x50>)
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f000 f814 	bl	800b364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b33c:	2204      	movs	r2, #4
 800b33e:	4908      	ldr	r1, [pc, #32]	@ (800b360 <Get_SerialNum+0x54>)
 800b340:	68b8      	ldr	r0, [r7, #8]
 800b342:	f000 f80f 	bl	800b364 <IntToUnicode>
  }
}
 800b346:	bf00      	nop
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	1fff7590 	.word	0x1fff7590
 800b354:	1fff7594 	.word	0x1fff7594
 800b358:	1fff7598 	.word	0x1fff7598
 800b35c:	20000202 	.word	0x20000202
 800b360:	20000212 	.word	0x20000212

0800b364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	4613      	mov	r3, r2
 800b370:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b376:	2300      	movs	r3, #0
 800b378:	75fb      	strb	r3, [r7, #23]
 800b37a:	e027      	b.n	800b3cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	0f1b      	lsrs	r3, r3, #28
 800b380:	2b09      	cmp	r3, #9
 800b382:	d80b      	bhi.n	800b39c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	0f1b      	lsrs	r3, r3, #28
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	4619      	mov	r1, r3
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	440b      	add	r3, r1
 800b394:	3230      	adds	r2, #48	@ 0x30
 800b396:	b2d2      	uxtb	r2, r2
 800b398:	701a      	strb	r2, [r3, #0]
 800b39a:	e00a      	b.n	800b3b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	0f1b      	lsrs	r3, r3, #28
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	7dfb      	ldrb	r3, [r7, #23]
 800b3a4:	005b      	lsls	r3, r3, #1
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	440b      	add	r3, r1
 800b3ac:	3237      	adds	r2, #55	@ 0x37
 800b3ae:	b2d2      	uxtb	r2, r2
 800b3b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	011b      	lsls	r3, r3, #4
 800b3b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ba:	005b      	lsls	r3, r3, #1
 800b3bc:	3301      	adds	r3, #1
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b3c6:	7dfb      	ldrb	r3, [r7, #23]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	75fb      	strb	r3, [r7, #23]
 800b3cc:	7dfa      	ldrb	r2, [r7, #23]
 800b3ce:	79fb      	ldrb	r3, [r7, #7]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d3d3      	bcc.n	800b37c <IntToUnicode+0x18>
  }
}
 800b3d4:	bf00      	nop
 800b3d6:	bf00      	nop
 800b3d8:	371c      	adds	r7, #28
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
	...

0800b3e4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b094      	sub	sp, #80	@ 0x50
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b3ec:	f107 030c 	add.w	r3, r7, #12
 800b3f0:	2244      	movs	r2, #68	@ 0x44
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 fd03 	bl	800be00 <memset>
  if(pcdHandle->Instance==USB)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a15      	ldr	r2, [pc, #84]	@ (800b454 <HAL_PCD_MspInit+0x70>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d122      	bne.n	800b44a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b404:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b408:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b40a:	2300      	movs	r3, #0
 800b40c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b40e:	f107 030c 	add.w	r3, r7, #12
 800b412:	4618      	mov	r0, r3
 800b414:	f7f9 fd6a 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b41e:	f7f5 fa12 	bl	8000846 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b422:	4b0d      	ldr	r3, [pc, #52]	@ (800b458 <HAL_PCD_MspInit+0x74>)
 800b424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b426:	4a0c      	ldr	r2, [pc, #48]	@ (800b458 <HAL_PCD_MspInit+0x74>)
 800b428:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b42c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b42e:	4b0a      	ldr	r3, [pc, #40]	@ (800b458 <HAL_PCD_MspInit+0x74>)
 800b430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b436:	60bb      	str	r3, [r7, #8]
 800b438:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b43a:	2200      	movs	r2, #0
 800b43c:	2100      	movs	r1, #0
 800b43e:	2014      	movs	r0, #20
 800b440:	f7f6 fd33 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b444:	2014      	movs	r0, #20
 800b446:	f7f6 fd4a 	bl	8001ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b44a:	bf00      	nop
 800b44c:	3750      	adds	r7, #80	@ 0x50
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	40005c00 	.word	0x40005c00
 800b458:	40021000 	.word	0x40021000

0800b45c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b470:	4619      	mov	r1, r3
 800b472:	4610      	mov	r0, r2
 800b474:	f7fe fd1a 	bl	8009eac <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b478:	bf00      	nop
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b492:	78fa      	ldrb	r2, [r7, #3]
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	4613      	mov	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	00db      	lsls	r3, r3, #3
 800b49e:	440b      	add	r3, r1
 800b4a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	f7fe fd54 	bl	8009f56 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b4ae:	bf00      	nop
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b082      	sub	sp, #8
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
 800b4be:	460b      	mov	r3, r1
 800b4c0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b4c8:	78fa      	ldrb	r2, [r7, #3]
 800b4ca:	6879      	ldr	r1, [r7, #4]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4413      	add	r3, r2
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	440b      	add	r3, r1
 800b4d6:	3324      	adds	r3, #36	@ 0x24
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	78fb      	ldrb	r3, [r7, #3]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	f7fe fd9d 	bl	800a01c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b4e2:	bf00      	nop
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fe feb1 	bl	800a260 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b4fe:	bf00      	nop
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b084      	sub	sp, #16
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b50e:	2301      	movs	r3, #1
 800b510:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	795b      	ldrb	r3, [r3, #5]
 800b516:	2b02      	cmp	r3, #2
 800b518:	d001      	beq.n	800b51e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b51a:	f7f5 f994 	bl	8000846 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b524:	7bfa      	ldrb	r2, [r7, #15]
 800b526:	4611      	mov	r1, r2
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe fe5b 	bl	800a1e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b534:	4618      	mov	r0, r3
 800b536:	f7fe fe07 	bl	800a148 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b53a:	bf00      	nop
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe fe56 	bl	800a204 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	7a5b      	ldrb	r3, [r3, #9]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d005      	beq.n	800b56c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b560:	4b04      	ldr	r3, [pc, #16]	@ (800b574 <HAL_PCD_SuspendCallback+0x30>)
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	4a03      	ldr	r2, [pc, #12]	@ (800b574 <HAL_PCD_SuspendCallback+0x30>)
 800b566:	f043 0306 	orr.w	r3, r3, #6
 800b56a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b56c:	bf00      	nop
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	e000ed00 	.word	0xe000ed00

0800b578 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	7a5b      	ldrb	r3, [r3, #9]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d007      	beq.n	800b598 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b588:	4b08      	ldr	r3, [pc, #32]	@ (800b5ac <HAL_PCD_ResumeCallback+0x34>)
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	4a07      	ldr	r2, [pc, #28]	@ (800b5ac <HAL_PCD_ResumeCallback+0x34>)
 800b58e:	f023 0306 	bic.w	r3, r3, #6
 800b592:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b594:	f000 f9f8 	bl	800b988 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fe fe46 	bl	800a230 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b5a4:	bf00      	nop
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	e000ed00 	.word	0xe000ed00

0800b5b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b5b8:	4a2b      	ldr	r2, [pc, #172]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a29      	ldr	r2, [pc, #164]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b5c8:	4b27      	ldr	r3, [pc, #156]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5ca:	4a28      	ldr	r2, [pc, #160]	@ (800b66c <USBD_LL_Init+0xbc>)
 800b5cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b5ce:	4b26      	ldr	r3, [pc, #152]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5d0:	2208      	movs	r2, #8
 800b5d2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b5d4:	4b24      	ldr	r3, [pc, #144]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5d6:	2202      	movs	r2, #2
 800b5d8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b5da:	4b23      	ldr	r3, [pc, #140]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5dc:	2202      	movs	r2, #2
 800b5de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b5e0:	4b21      	ldr	r3, [pc, #132]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b5e6:	4b20      	ldr	r3, [pc, #128]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b5ec:	4b1e      	ldr	r3, [pc, #120]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b5f2:	4b1d      	ldr	r3, [pc, #116]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b5f8:	481b      	ldr	r0, [pc, #108]	@ (800b668 <USBD_LL_Init+0xb8>)
 800b5fa:	f7f7 f994 	bl	8002926 <HAL_PCD_Init>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d001      	beq.n	800b608 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b604:	f7f5 f91f 	bl	8000846 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b60e:	2318      	movs	r3, #24
 800b610:	2200      	movs	r2, #0
 800b612:	2100      	movs	r1, #0
 800b614:	f7f8 fe1b 	bl	800424e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b61e:	2358      	movs	r3, #88	@ 0x58
 800b620:	2200      	movs	r2, #0
 800b622:	2180      	movs	r1, #128	@ 0x80
 800b624:	f7f8 fe13 	bl	800424e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b62e:	23c0      	movs	r3, #192	@ 0xc0
 800b630:	2200      	movs	r2, #0
 800b632:	2181      	movs	r1, #129	@ 0x81
 800b634:	f7f8 fe0b 	bl	800424e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b63e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b642:	2200      	movs	r2, #0
 800b644:	2101      	movs	r1, #1
 800b646:	f7f8 fe02 	bl	800424e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b650:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b654:	2200      	movs	r2, #0
 800b656:	2182      	movs	r1, #130	@ 0x82
 800b658:	f7f8 fdf9 	bl	800424e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20001930 	.word	0x20001930
 800b66c:	40005c00 	.word	0x40005c00

0800b670 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b67c:	2300      	movs	r3, #0
 800b67e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b686:	4618      	mov	r0, r3
 800b688:	f7f7 fa1b 	bl	8002ac2 <HAL_PCD_Start>
 800b68c:	4603      	mov	r3, r0
 800b68e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b690:	7bfb      	ldrb	r3, [r7, #15]
 800b692:	4618      	mov	r0, r3
 800b694:	f000 f97e 	bl	800b994 <USBD_Get_USB_Status>
 800b698:	4603      	mov	r3, r0
 800b69a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	4608      	mov	r0, r1
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	70fb      	strb	r3, [r7, #3]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	70bb      	strb	r3, [r7, #2]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b6ce:	78bb      	ldrb	r3, [r7, #2]
 800b6d0:	883a      	ldrh	r2, [r7, #0]
 800b6d2:	78f9      	ldrb	r1, [r7, #3]
 800b6d4:	f7f7 fb62 	bl	8002d9c <HAL_PCD_EP_Open>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 f958 	bl	800b994 <USBD_Get_USB_Status>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b70c:	78fa      	ldrb	r2, [r7, #3]
 800b70e:	4611      	mov	r1, r2
 800b710:	4618      	mov	r0, r3
 800b712:	f7f7 fba2 	bl	8002e5a <HAL_PCD_EP_Close>
 800b716:	4603      	mov	r3, r0
 800b718:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 f939 	bl	800b994 <USBD_Get_USB_Status>
 800b722:	4603      	mov	r3, r0
 800b724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b726:	7bbb      	ldrb	r3, [r7, #14]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b740:	2300      	movs	r3, #0
 800b742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b74a:	78fa      	ldrb	r2, [r7, #3]
 800b74c:	4611      	mov	r1, r2
 800b74e:	4618      	mov	r0, r3
 800b750:	f7f7 fc4b 	bl	8002fea <HAL_PCD_EP_SetStall>
 800b754:	4603      	mov	r3, r0
 800b756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b758:	7bfb      	ldrb	r3, [r7, #15]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 f91a 	bl	800b994 <USBD_Get_USB_Status>
 800b760:	4603      	mov	r3, r0
 800b762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b764:	7bbb      	ldrb	r3, [r7, #14]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b084      	sub	sp, #16
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
 800b776:	460b      	mov	r3, r1
 800b778:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b788:	78fa      	ldrb	r2, [r7, #3]
 800b78a:	4611      	mov	r1, r2
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7f7 fc7e 	bl	800308e <HAL_PCD_EP_ClrStall>
 800b792:	4603      	mov	r3, r0
 800b794:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b796:	7bfb      	ldrb	r3, [r7, #15]
 800b798:	4618      	mov	r0, r3
 800b79a:	f000 f8fb 	bl	800b994 <USBD_Get_USB_Status>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b7be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b7c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	da0b      	bge.n	800b7e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b7c8:	78fb      	ldrb	r3, [r7, #3]
 800b7ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b7ce:	68f9      	ldr	r1, [r7, #12]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	440b      	add	r3, r1
 800b7da:	3312      	adds	r3, #18
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	e00b      	b.n	800b7f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b7e0:	78fb      	ldrb	r3, [r7, #3]
 800b7e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b7e6:	68f9      	ldr	r1, [r7, #12]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	440b      	add	r3, r1
 800b7f2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b7f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	460b      	mov	r3, r1
 800b80e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b810:	2300      	movs	r3, #0
 800b812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b81e:	78fa      	ldrb	r2, [r7, #3]
 800b820:	4611      	mov	r1, r2
 800b822:	4618      	mov	r0, r3
 800b824:	f7f7 fa96 	bl	8002d54 <HAL_PCD_SetAddress>
 800b828:	4603      	mov	r3, r0
 800b82a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
 800b82e:	4618      	mov	r0, r3
 800b830:	f000 f8b0 	bl	800b994 <USBD_Get_USB_Status>
 800b834:	4603      	mov	r3, r0
 800b836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b838:	7bbb      	ldrb	r3, [r7, #14]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	603b      	str	r3, [r7, #0]
 800b84e:	460b      	mov	r3, r1
 800b850:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b860:	7af9      	ldrb	r1, [r7, #11]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	f7f7 fb89 	bl	8002f7c <HAL_PCD_EP_Transmit>
 800b86a:	4603      	mov	r3, r0
 800b86c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	4618      	mov	r0, r3
 800b872:	f000 f88f 	bl	800b994 <USBD_Get_USB_Status>
 800b876:	4603      	mov	r3, r0
 800b878:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b87a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	607a      	str	r2, [r7, #4]
 800b88e:	603b      	str	r3, [r7, #0]
 800b890:	460b      	mov	r3, r1
 800b892:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b8a2:	7af9      	ldrb	r1, [r7, #11]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	f7f7 fb1f 	bl	8002eea <HAL_PCD_EP_Receive>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8b0:	7dfb      	ldrb	r3, [r7, #23]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 f86e 	bl	800b994 <USBD_Get_USB_Status>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b082      	sub	sp, #8
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b8d8:	78fa      	ldrb	r2, [r7, #3]
 800b8da:	4611      	mov	r1, r2
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7f7 fb35 	bl	8002f4c <HAL_PCD_EP_GetRxCount>
 800b8e2:	4603      	mov	r3, r0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <HAL_PCDEx_LPM_Callback+0x18>
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d013      	beq.n	800b92a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b902:	e023      	b.n	800b94c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	7a5b      	ldrb	r3, [r3, #9]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d007      	beq.n	800b91c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b90c:	f000 f83c 	bl	800b988 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b910:	4b10      	ldr	r3, [pc, #64]	@ (800b954 <HAL_PCDEx_LPM_Callback+0x68>)
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	4a0f      	ldr	r2, [pc, #60]	@ (800b954 <HAL_PCDEx_LPM_Callback+0x68>)
 800b916:	f023 0306 	bic.w	r3, r3, #6
 800b91a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe fc84 	bl	800a230 <USBD_LL_Resume>
    break;
 800b928:	e010      	b.n	800b94c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe fc67 	bl	800a204 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	7a5b      	ldrb	r3, [r3, #9]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d005      	beq.n	800b94a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b93e:	4b05      	ldr	r3, [pc, #20]	@ (800b954 <HAL_PCDEx_LPM_Callback+0x68>)
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	4a04      	ldr	r2, [pc, #16]	@ (800b954 <HAL_PCDEx_LPM_Callback+0x68>)
 800b944:	f043 0306 	orr.w	r3, r3, #6
 800b948:	6113      	str	r3, [r2, #16]
    break;
 800b94a:	bf00      	nop
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	e000ed00 	.word	0xe000ed00

0800b958 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b960:	4b03      	ldr	r3, [pc, #12]	@ (800b970 <USBD_static_malloc+0x18>)
}
 800b962:	4618      	mov	r0, r3
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	20001c0c 	.word	0x20001c0c

0800b974 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]

}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b98c:	f7f4 ff10 	bl	80007b0 <SystemClock_Config>
}
 800b990:	bf00      	nop
 800b992:	bd80      	pop	{r7, pc}

0800b994 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	4603      	mov	r3, r0
 800b99c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9a2:	79fb      	ldrb	r3, [r7, #7]
 800b9a4:	2b03      	cmp	r3, #3
 800b9a6:	d817      	bhi.n	800b9d8 <USBD_Get_USB_Status+0x44>
 800b9a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b0 <USBD_Get_USB_Status+0x1c>)
 800b9aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ae:	bf00      	nop
 800b9b0:	0800b9c1 	.word	0x0800b9c1
 800b9b4:	0800b9c7 	.word	0x0800b9c7
 800b9b8:	0800b9cd 	.word	0x0800b9cd
 800b9bc:	0800b9d3 	.word	0x0800b9d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c4:	e00b      	b.n	800b9de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ca:	e008      	b.n	800b9de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d0:	e005      	b.n	800b9de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d6:	e002      	b.n	800b9de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	73fb      	strb	r3, [r7, #15]
    break;
 800b9dc:	bf00      	nop
  }
  return usb_status;
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <std>:
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	b510      	push	{r4, lr}
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	e9c0 3300 	strd	r3, r3, [r0]
 800b9f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9fa:	6083      	str	r3, [r0, #8]
 800b9fc:	8181      	strh	r1, [r0, #12]
 800b9fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba00:	81c2      	strh	r2, [r0, #14]
 800ba02:	6183      	str	r3, [r0, #24]
 800ba04:	4619      	mov	r1, r3
 800ba06:	2208      	movs	r2, #8
 800ba08:	305c      	adds	r0, #92	@ 0x5c
 800ba0a:	f000 f9f9 	bl	800be00 <memset>
 800ba0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba44 <std+0x58>)
 800ba10:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba12:	4b0d      	ldr	r3, [pc, #52]	@ (800ba48 <std+0x5c>)
 800ba14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba16:	4b0d      	ldr	r3, [pc, #52]	@ (800ba4c <std+0x60>)
 800ba18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba50 <std+0x64>)
 800ba1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba54 <std+0x68>)
 800ba20:	6224      	str	r4, [r4, #32]
 800ba22:	429c      	cmp	r4, r3
 800ba24:	d006      	beq.n	800ba34 <std+0x48>
 800ba26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba2a:	4294      	cmp	r4, r2
 800ba2c:	d002      	beq.n	800ba34 <std+0x48>
 800ba2e:	33d0      	adds	r3, #208	@ 0xd0
 800ba30:	429c      	cmp	r4, r3
 800ba32:	d105      	bne.n	800ba40 <std+0x54>
 800ba34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba3c:	f000 ba58 	b.w	800bef0 <__retarget_lock_init_recursive>
 800ba40:	bd10      	pop	{r4, pc}
 800ba42:	bf00      	nop
 800ba44:	0800bc51 	.word	0x0800bc51
 800ba48:	0800bc73 	.word	0x0800bc73
 800ba4c:	0800bcab 	.word	0x0800bcab
 800ba50:	0800bccf 	.word	0x0800bccf
 800ba54:	20001e2c 	.word	0x20001e2c

0800ba58 <stdio_exit_handler>:
 800ba58:	4a02      	ldr	r2, [pc, #8]	@ (800ba64 <stdio_exit_handler+0xc>)
 800ba5a:	4903      	ldr	r1, [pc, #12]	@ (800ba68 <stdio_exit_handler+0x10>)
 800ba5c:	4803      	ldr	r0, [pc, #12]	@ (800ba6c <stdio_exit_handler+0x14>)
 800ba5e:	f000 b869 	b.w	800bb34 <_fwalk_sglue>
 800ba62:	bf00      	nop
 800ba64:	2000021c 	.word	0x2000021c
 800ba68:	0800c7ad 	.word	0x0800c7ad
 800ba6c:	2000022c 	.word	0x2000022c

0800ba70 <cleanup_stdio>:
 800ba70:	6841      	ldr	r1, [r0, #4]
 800ba72:	4b0c      	ldr	r3, [pc, #48]	@ (800baa4 <cleanup_stdio+0x34>)
 800ba74:	4299      	cmp	r1, r3
 800ba76:	b510      	push	{r4, lr}
 800ba78:	4604      	mov	r4, r0
 800ba7a:	d001      	beq.n	800ba80 <cleanup_stdio+0x10>
 800ba7c:	f000 fe96 	bl	800c7ac <_fflush_r>
 800ba80:	68a1      	ldr	r1, [r4, #8]
 800ba82:	4b09      	ldr	r3, [pc, #36]	@ (800baa8 <cleanup_stdio+0x38>)
 800ba84:	4299      	cmp	r1, r3
 800ba86:	d002      	beq.n	800ba8e <cleanup_stdio+0x1e>
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f000 fe8f 	bl	800c7ac <_fflush_r>
 800ba8e:	68e1      	ldr	r1, [r4, #12]
 800ba90:	4b06      	ldr	r3, [pc, #24]	@ (800baac <cleanup_stdio+0x3c>)
 800ba92:	4299      	cmp	r1, r3
 800ba94:	d004      	beq.n	800baa0 <cleanup_stdio+0x30>
 800ba96:	4620      	mov	r0, r4
 800ba98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba9c:	f000 be86 	b.w	800c7ac <_fflush_r>
 800baa0:	bd10      	pop	{r4, pc}
 800baa2:	bf00      	nop
 800baa4:	20001e2c 	.word	0x20001e2c
 800baa8:	20001e94 	.word	0x20001e94
 800baac:	20001efc 	.word	0x20001efc

0800bab0 <global_stdio_init.part.0>:
 800bab0:	b510      	push	{r4, lr}
 800bab2:	4b0b      	ldr	r3, [pc, #44]	@ (800bae0 <global_stdio_init.part.0+0x30>)
 800bab4:	4c0b      	ldr	r4, [pc, #44]	@ (800bae4 <global_stdio_init.part.0+0x34>)
 800bab6:	4a0c      	ldr	r2, [pc, #48]	@ (800bae8 <global_stdio_init.part.0+0x38>)
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	4620      	mov	r0, r4
 800babc:	2200      	movs	r2, #0
 800babe:	2104      	movs	r1, #4
 800bac0:	f7ff ff94 	bl	800b9ec <std>
 800bac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bac8:	2201      	movs	r2, #1
 800baca:	2109      	movs	r1, #9
 800bacc:	f7ff ff8e 	bl	800b9ec <std>
 800bad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bad4:	2202      	movs	r2, #2
 800bad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bada:	2112      	movs	r1, #18
 800badc:	f7ff bf86 	b.w	800b9ec <std>
 800bae0:	20001f64 	.word	0x20001f64
 800bae4:	20001e2c 	.word	0x20001e2c
 800bae8:	0800ba59 	.word	0x0800ba59

0800baec <__sfp_lock_acquire>:
 800baec:	4801      	ldr	r0, [pc, #4]	@ (800baf4 <__sfp_lock_acquire+0x8>)
 800baee:	f000 ba00 	b.w	800bef2 <__retarget_lock_acquire_recursive>
 800baf2:	bf00      	nop
 800baf4:	20001f6d 	.word	0x20001f6d

0800baf8 <__sfp_lock_release>:
 800baf8:	4801      	ldr	r0, [pc, #4]	@ (800bb00 <__sfp_lock_release+0x8>)
 800bafa:	f000 b9fb 	b.w	800bef4 <__retarget_lock_release_recursive>
 800bafe:	bf00      	nop
 800bb00:	20001f6d 	.word	0x20001f6d

0800bb04 <__sinit>:
 800bb04:	b510      	push	{r4, lr}
 800bb06:	4604      	mov	r4, r0
 800bb08:	f7ff fff0 	bl	800baec <__sfp_lock_acquire>
 800bb0c:	6a23      	ldr	r3, [r4, #32]
 800bb0e:	b11b      	cbz	r3, 800bb18 <__sinit+0x14>
 800bb10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb14:	f7ff bff0 	b.w	800baf8 <__sfp_lock_release>
 800bb18:	4b04      	ldr	r3, [pc, #16]	@ (800bb2c <__sinit+0x28>)
 800bb1a:	6223      	str	r3, [r4, #32]
 800bb1c:	4b04      	ldr	r3, [pc, #16]	@ (800bb30 <__sinit+0x2c>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1f5      	bne.n	800bb10 <__sinit+0xc>
 800bb24:	f7ff ffc4 	bl	800bab0 <global_stdio_init.part.0>
 800bb28:	e7f2      	b.n	800bb10 <__sinit+0xc>
 800bb2a:	bf00      	nop
 800bb2c:	0800ba71 	.word	0x0800ba71
 800bb30:	20001f64 	.word	0x20001f64

0800bb34 <_fwalk_sglue>:
 800bb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb38:	4607      	mov	r7, r0
 800bb3a:	4688      	mov	r8, r1
 800bb3c:	4614      	mov	r4, r2
 800bb3e:	2600      	movs	r6, #0
 800bb40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb44:	f1b9 0901 	subs.w	r9, r9, #1
 800bb48:	d505      	bpl.n	800bb56 <_fwalk_sglue+0x22>
 800bb4a:	6824      	ldr	r4, [r4, #0]
 800bb4c:	2c00      	cmp	r4, #0
 800bb4e:	d1f7      	bne.n	800bb40 <_fwalk_sglue+0xc>
 800bb50:	4630      	mov	r0, r6
 800bb52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb56:	89ab      	ldrh	r3, [r5, #12]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d907      	bls.n	800bb6c <_fwalk_sglue+0x38>
 800bb5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb60:	3301      	adds	r3, #1
 800bb62:	d003      	beq.n	800bb6c <_fwalk_sglue+0x38>
 800bb64:	4629      	mov	r1, r5
 800bb66:	4638      	mov	r0, r7
 800bb68:	47c0      	blx	r8
 800bb6a:	4306      	orrs	r6, r0
 800bb6c:	3568      	adds	r5, #104	@ 0x68
 800bb6e:	e7e9      	b.n	800bb44 <_fwalk_sglue+0x10>

0800bb70 <iprintf>:
 800bb70:	b40f      	push	{r0, r1, r2, r3}
 800bb72:	b507      	push	{r0, r1, r2, lr}
 800bb74:	4906      	ldr	r1, [pc, #24]	@ (800bb90 <iprintf+0x20>)
 800bb76:	ab04      	add	r3, sp, #16
 800bb78:	6808      	ldr	r0, [r1, #0]
 800bb7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb7e:	6881      	ldr	r1, [r0, #8]
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	f000 fae9 	bl	800c158 <_vfiprintf_r>
 800bb86:	b003      	add	sp, #12
 800bb88:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb8c:	b004      	add	sp, #16
 800bb8e:	4770      	bx	lr
 800bb90:	20000228 	.word	0x20000228

0800bb94 <_puts_r>:
 800bb94:	6a03      	ldr	r3, [r0, #32]
 800bb96:	b570      	push	{r4, r5, r6, lr}
 800bb98:	6884      	ldr	r4, [r0, #8]
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	460e      	mov	r6, r1
 800bb9e:	b90b      	cbnz	r3, 800bba4 <_puts_r+0x10>
 800bba0:	f7ff ffb0 	bl	800bb04 <__sinit>
 800bba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bba6:	07db      	lsls	r3, r3, #31
 800bba8:	d405      	bmi.n	800bbb6 <_puts_r+0x22>
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	0598      	lsls	r0, r3, #22
 800bbae:	d402      	bmi.n	800bbb6 <_puts_r+0x22>
 800bbb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbb2:	f000 f99e 	bl	800bef2 <__retarget_lock_acquire_recursive>
 800bbb6:	89a3      	ldrh	r3, [r4, #12]
 800bbb8:	0719      	lsls	r1, r3, #28
 800bbba:	d502      	bpl.n	800bbc2 <_puts_r+0x2e>
 800bbbc:	6923      	ldr	r3, [r4, #16]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d135      	bne.n	800bc2e <_puts_r+0x9a>
 800bbc2:	4621      	mov	r1, r4
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f000 f8c5 	bl	800bd54 <__swsetup_r>
 800bbca:	b380      	cbz	r0, 800bc2e <_puts_r+0x9a>
 800bbcc:	f04f 35ff 	mov.w	r5, #4294967295
 800bbd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbd2:	07da      	lsls	r2, r3, #31
 800bbd4:	d405      	bmi.n	800bbe2 <_puts_r+0x4e>
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	059b      	lsls	r3, r3, #22
 800bbda:	d402      	bmi.n	800bbe2 <_puts_r+0x4e>
 800bbdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbde:	f000 f989 	bl	800bef4 <__retarget_lock_release_recursive>
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	bd70      	pop	{r4, r5, r6, pc}
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	da04      	bge.n	800bbf4 <_puts_r+0x60>
 800bbea:	69a2      	ldr	r2, [r4, #24]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	dc17      	bgt.n	800bc20 <_puts_r+0x8c>
 800bbf0:	290a      	cmp	r1, #10
 800bbf2:	d015      	beq.n	800bc20 <_puts_r+0x8c>
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	6022      	str	r2, [r4, #0]
 800bbfa:	7019      	strb	r1, [r3, #0]
 800bbfc:	68a3      	ldr	r3, [r4, #8]
 800bbfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc02:	3b01      	subs	r3, #1
 800bc04:	60a3      	str	r3, [r4, #8]
 800bc06:	2900      	cmp	r1, #0
 800bc08:	d1ed      	bne.n	800bbe6 <_puts_r+0x52>
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	da11      	bge.n	800bc32 <_puts_r+0x9e>
 800bc0e:	4622      	mov	r2, r4
 800bc10:	210a      	movs	r1, #10
 800bc12:	4628      	mov	r0, r5
 800bc14:	f000 f85f 	bl	800bcd6 <__swbuf_r>
 800bc18:	3001      	adds	r0, #1
 800bc1a:	d0d7      	beq.n	800bbcc <_puts_r+0x38>
 800bc1c:	250a      	movs	r5, #10
 800bc1e:	e7d7      	b.n	800bbd0 <_puts_r+0x3c>
 800bc20:	4622      	mov	r2, r4
 800bc22:	4628      	mov	r0, r5
 800bc24:	f000 f857 	bl	800bcd6 <__swbuf_r>
 800bc28:	3001      	adds	r0, #1
 800bc2a:	d1e7      	bne.n	800bbfc <_puts_r+0x68>
 800bc2c:	e7ce      	b.n	800bbcc <_puts_r+0x38>
 800bc2e:	3e01      	subs	r6, #1
 800bc30:	e7e4      	b.n	800bbfc <_puts_r+0x68>
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	6022      	str	r2, [r4, #0]
 800bc38:	220a      	movs	r2, #10
 800bc3a:	701a      	strb	r2, [r3, #0]
 800bc3c:	e7ee      	b.n	800bc1c <_puts_r+0x88>
	...

0800bc40 <puts>:
 800bc40:	4b02      	ldr	r3, [pc, #8]	@ (800bc4c <puts+0xc>)
 800bc42:	4601      	mov	r1, r0
 800bc44:	6818      	ldr	r0, [r3, #0]
 800bc46:	f7ff bfa5 	b.w	800bb94 <_puts_r>
 800bc4a:	bf00      	nop
 800bc4c:	20000228 	.word	0x20000228

0800bc50 <__sread>:
 800bc50:	b510      	push	{r4, lr}
 800bc52:	460c      	mov	r4, r1
 800bc54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc58:	f000 f8fc 	bl	800be54 <_read_r>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	bfab      	itete	ge
 800bc60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc62:	89a3      	ldrhlt	r3, [r4, #12]
 800bc64:	181b      	addge	r3, r3, r0
 800bc66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc6a:	bfac      	ite	ge
 800bc6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc6e:	81a3      	strhlt	r3, [r4, #12]
 800bc70:	bd10      	pop	{r4, pc}

0800bc72 <__swrite>:
 800bc72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc76:	461f      	mov	r7, r3
 800bc78:	898b      	ldrh	r3, [r1, #12]
 800bc7a:	05db      	lsls	r3, r3, #23
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	460c      	mov	r4, r1
 800bc80:	4616      	mov	r6, r2
 800bc82:	d505      	bpl.n	800bc90 <__swrite+0x1e>
 800bc84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc88:	2302      	movs	r3, #2
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f000 f8d0 	bl	800be30 <_lseek_r>
 800bc90:	89a3      	ldrh	r3, [r4, #12]
 800bc92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc9a:	81a3      	strh	r3, [r4, #12]
 800bc9c:	4632      	mov	r2, r6
 800bc9e:	463b      	mov	r3, r7
 800bca0:	4628      	mov	r0, r5
 800bca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bca6:	f000 b8e7 	b.w	800be78 <_write_r>

0800bcaa <__sseek>:
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	460c      	mov	r4, r1
 800bcae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb2:	f000 f8bd 	bl	800be30 <_lseek_r>
 800bcb6:	1c43      	adds	r3, r0, #1
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	bf15      	itete	ne
 800bcbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bcbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bcc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bcc6:	81a3      	strheq	r3, [r4, #12]
 800bcc8:	bf18      	it	ne
 800bcca:	81a3      	strhne	r3, [r4, #12]
 800bccc:	bd10      	pop	{r4, pc}

0800bcce <__sclose>:
 800bcce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd2:	f000 b89d 	b.w	800be10 <_close_r>

0800bcd6 <__swbuf_r>:
 800bcd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd8:	460e      	mov	r6, r1
 800bcda:	4614      	mov	r4, r2
 800bcdc:	4605      	mov	r5, r0
 800bcde:	b118      	cbz	r0, 800bce8 <__swbuf_r+0x12>
 800bce0:	6a03      	ldr	r3, [r0, #32]
 800bce2:	b90b      	cbnz	r3, 800bce8 <__swbuf_r+0x12>
 800bce4:	f7ff ff0e 	bl	800bb04 <__sinit>
 800bce8:	69a3      	ldr	r3, [r4, #24]
 800bcea:	60a3      	str	r3, [r4, #8]
 800bcec:	89a3      	ldrh	r3, [r4, #12]
 800bcee:	071a      	lsls	r2, r3, #28
 800bcf0:	d501      	bpl.n	800bcf6 <__swbuf_r+0x20>
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	b943      	cbnz	r3, 800bd08 <__swbuf_r+0x32>
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	f000 f82b 	bl	800bd54 <__swsetup_r>
 800bcfe:	b118      	cbz	r0, 800bd08 <__swbuf_r+0x32>
 800bd00:	f04f 37ff 	mov.w	r7, #4294967295
 800bd04:	4638      	mov	r0, r7
 800bd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	6922      	ldr	r2, [r4, #16]
 800bd0c:	1a98      	subs	r0, r3, r2
 800bd0e:	6963      	ldr	r3, [r4, #20]
 800bd10:	b2f6      	uxtb	r6, r6
 800bd12:	4283      	cmp	r3, r0
 800bd14:	4637      	mov	r7, r6
 800bd16:	dc05      	bgt.n	800bd24 <__swbuf_r+0x4e>
 800bd18:	4621      	mov	r1, r4
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f000 fd46 	bl	800c7ac <_fflush_r>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d1ed      	bne.n	800bd00 <__swbuf_r+0x2a>
 800bd24:	68a3      	ldr	r3, [r4, #8]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	60a3      	str	r3, [r4, #8]
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	6022      	str	r2, [r4, #0]
 800bd30:	701e      	strb	r6, [r3, #0]
 800bd32:	6962      	ldr	r2, [r4, #20]
 800bd34:	1c43      	adds	r3, r0, #1
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d004      	beq.n	800bd44 <__swbuf_r+0x6e>
 800bd3a:	89a3      	ldrh	r3, [r4, #12]
 800bd3c:	07db      	lsls	r3, r3, #31
 800bd3e:	d5e1      	bpl.n	800bd04 <__swbuf_r+0x2e>
 800bd40:	2e0a      	cmp	r6, #10
 800bd42:	d1df      	bne.n	800bd04 <__swbuf_r+0x2e>
 800bd44:	4621      	mov	r1, r4
 800bd46:	4628      	mov	r0, r5
 800bd48:	f000 fd30 	bl	800c7ac <_fflush_r>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d0d9      	beq.n	800bd04 <__swbuf_r+0x2e>
 800bd50:	e7d6      	b.n	800bd00 <__swbuf_r+0x2a>
	...

0800bd54 <__swsetup_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4b29      	ldr	r3, [pc, #164]	@ (800bdfc <__swsetup_r+0xa8>)
 800bd58:	4605      	mov	r5, r0
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	b118      	cbz	r0, 800bd68 <__swsetup_r+0x14>
 800bd60:	6a03      	ldr	r3, [r0, #32]
 800bd62:	b90b      	cbnz	r3, 800bd68 <__swsetup_r+0x14>
 800bd64:	f7ff fece 	bl	800bb04 <__sinit>
 800bd68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd6c:	0719      	lsls	r1, r3, #28
 800bd6e:	d422      	bmi.n	800bdb6 <__swsetup_r+0x62>
 800bd70:	06da      	lsls	r2, r3, #27
 800bd72:	d407      	bmi.n	800bd84 <__swsetup_r+0x30>
 800bd74:	2209      	movs	r2, #9
 800bd76:	602a      	str	r2, [r5, #0]
 800bd78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd7c:	81a3      	strh	r3, [r4, #12]
 800bd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd82:	e033      	b.n	800bdec <__swsetup_r+0x98>
 800bd84:	0758      	lsls	r0, r3, #29
 800bd86:	d512      	bpl.n	800bdae <__swsetup_r+0x5a>
 800bd88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd8a:	b141      	cbz	r1, 800bd9e <__swsetup_r+0x4a>
 800bd8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd90:	4299      	cmp	r1, r3
 800bd92:	d002      	beq.n	800bd9a <__swsetup_r+0x46>
 800bd94:	4628      	mov	r0, r5
 800bd96:	f000 f8bd 	bl	800bf14 <_free_r>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd9e:	89a3      	ldrh	r3, [r4, #12]
 800bda0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bda4:	81a3      	strh	r3, [r4, #12]
 800bda6:	2300      	movs	r3, #0
 800bda8:	6063      	str	r3, [r4, #4]
 800bdaa:	6923      	ldr	r3, [r4, #16]
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	f043 0308 	orr.w	r3, r3, #8
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	b94b      	cbnz	r3, 800bdce <__swsetup_r+0x7a>
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bdc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdc4:	d003      	beq.n	800bdce <__swsetup_r+0x7a>
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f000 fd3d 	bl	800c848 <__smakebuf_r>
 800bdce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd2:	f013 0201 	ands.w	r2, r3, #1
 800bdd6:	d00a      	beq.n	800bdee <__swsetup_r+0x9a>
 800bdd8:	2200      	movs	r2, #0
 800bdda:	60a2      	str	r2, [r4, #8]
 800bddc:	6962      	ldr	r2, [r4, #20]
 800bdde:	4252      	negs	r2, r2
 800bde0:	61a2      	str	r2, [r4, #24]
 800bde2:	6922      	ldr	r2, [r4, #16]
 800bde4:	b942      	cbnz	r2, 800bdf8 <__swsetup_r+0xa4>
 800bde6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bdea:	d1c5      	bne.n	800bd78 <__swsetup_r+0x24>
 800bdec:	bd38      	pop	{r3, r4, r5, pc}
 800bdee:	0799      	lsls	r1, r3, #30
 800bdf0:	bf58      	it	pl
 800bdf2:	6962      	ldrpl	r2, [r4, #20]
 800bdf4:	60a2      	str	r2, [r4, #8]
 800bdf6:	e7f4      	b.n	800bde2 <__swsetup_r+0x8e>
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	e7f7      	b.n	800bdec <__swsetup_r+0x98>
 800bdfc:	20000228 	.word	0x20000228

0800be00 <memset>:
 800be00:	4402      	add	r2, r0
 800be02:	4603      	mov	r3, r0
 800be04:	4293      	cmp	r3, r2
 800be06:	d100      	bne.n	800be0a <memset+0xa>
 800be08:	4770      	bx	lr
 800be0a:	f803 1b01 	strb.w	r1, [r3], #1
 800be0e:	e7f9      	b.n	800be04 <memset+0x4>

0800be10 <_close_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	4d06      	ldr	r5, [pc, #24]	@ (800be2c <_close_r+0x1c>)
 800be14:	2300      	movs	r3, #0
 800be16:	4604      	mov	r4, r0
 800be18:	4608      	mov	r0, r1
 800be1a:	602b      	str	r3, [r5, #0]
 800be1c:	f7f4 ffcd 	bl	8000dba <_close>
 800be20:	1c43      	adds	r3, r0, #1
 800be22:	d102      	bne.n	800be2a <_close_r+0x1a>
 800be24:	682b      	ldr	r3, [r5, #0]
 800be26:	b103      	cbz	r3, 800be2a <_close_r+0x1a>
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	bd38      	pop	{r3, r4, r5, pc}
 800be2c:	20001f68 	.word	0x20001f68

0800be30 <_lseek_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d07      	ldr	r5, [pc, #28]	@ (800be50 <_lseek_r+0x20>)
 800be34:	4604      	mov	r4, r0
 800be36:	4608      	mov	r0, r1
 800be38:	4611      	mov	r1, r2
 800be3a:	2200      	movs	r2, #0
 800be3c:	602a      	str	r2, [r5, #0]
 800be3e:	461a      	mov	r2, r3
 800be40:	f7f4 ffe2 	bl	8000e08 <_lseek>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_lseek_r+0x1e>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_lseek_r+0x1e>
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	20001f68 	.word	0x20001f68

0800be54 <_read_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4d07      	ldr	r5, [pc, #28]	@ (800be74 <_read_r+0x20>)
 800be58:	4604      	mov	r4, r0
 800be5a:	4608      	mov	r0, r1
 800be5c:	4611      	mov	r1, r2
 800be5e:	2200      	movs	r2, #0
 800be60:	602a      	str	r2, [r5, #0]
 800be62:	461a      	mov	r2, r3
 800be64:	f7f4 ff8c 	bl	8000d80 <_read>
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d102      	bne.n	800be72 <_read_r+0x1e>
 800be6c:	682b      	ldr	r3, [r5, #0]
 800be6e:	b103      	cbz	r3, 800be72 <_read_r+0x1e>
 800be70:	6023      	str	r3, [r4, #0]
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	20001f68 	.word	0x20001f68

0800be78 <_write_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4d07      	ldr	r5, [pc, #28]	@ (800be98 <_write_r+0x20>)
 800be7c:	4604      	mov	r4, r0
 800be7e:	4608      	mov	r0, r1
 800be80:	4611      	mov	r1, r2
 800be82:	2200      	movs	r2, #0
 800be84:	602a      	str	r2, [r5, #0]
 800be86:	461a      	mov	r2, r3
 800be88:	f7f5 f96a 	bl	8001160 <_write>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	d102      	bne.n	800be96 <_write_r+0x1e>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	b103      	cbz	r3, 800be96 <_write_r+0x1e>
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	20001f68 	.word	0x20001f68

0800be9c <__errno>:
 800be9c:	4b01      	ldr	r3, [pc, #4]	@ (800bea4 <__errno+0x8>)
 800be9e:	6818      	ldr	r0, [r3, #0]
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	20000228 	.word	0x20000228

0800bea8 <__libc_init_array>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	4d0d      	ldr	r5, [pc, #52]	@ (800bee0 <__libc_init_array+0x38>)
 800beac:	4c0d      	ldr	r4, [pc, #52]	@ (800bee4 <__libc_init_array+0x3c>)
 800beae:	1b64      	subs	r4, r4, r5
 800beb0:	10a4      	asrs	r4, r4, #2
 800beb2:	2600      	movs	r6, #0
 800beb4:	42a6      	cmp	r6, r4
 800beb6:	d109      	bne.n	800becc <__libc_init_array+0x24>
 800beb8:	4d0b      	ldr	r5, [pc, #44]	@ (800bee8 <__libc_init_array+0x40>)
 800beba:	4c0c      	ldr	r4, [pc, #48]	@ (800beec <__libc_init_array+0x44>)
 800bebc:	f000 fd32 	bl	800c924 <_init>
 800bec0:	1b64      	subs	r4, r4, r5
 800bec2:	10a4      	asrs	r4, r4, #2
 800bec4:	2600      	movs	r6, #0
 800bec6:	42a6      	cmp	r6, r4
 800bec8:	d105      	bne.n	800bed6 <__libc_init_array+0x2e>
 800beca:	bd70      	pop	{r4, r5, r6, pc}
 800becc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed0:	4798      	blx	r3
 800bed2:	3601      	adds	r6, #1
 800bed4:	e7ee      	b.n	800beb4 <__libc_init_array+0xc>
 800bed6:	f855 3b04 	ldr.w	r3, [r5], #4
 800beda:	4798      	blx	r3
 800bedc:	3601      	adds	r6, #1
 800bede:	e7f2      	b.n	800bec6 <__libc_init_array+0x1e>
 800bee0:	0800cbc0 	.word	0x0800cbc0
 800bee4:	0800cbc0 	.word	0x0800cbc0
 800bee8:	0800cbc0 	.word	0x0800cbc0
 800beec:	0800cbc4 	.word	0x0800cbc4

0800bef0 <__retarget_lock_init_recursive>:
 800bef0:	4770      	bx	lr

0800bef2 <__retarget_lock_acquire_recursive>:
 800bef2:	4770      	bx	lr

0800bef4 <__retarget_lock_release_recursive>:
 800bef4:	4770      	bx	lr

0800bef6 <memcpy>:
 800bef6:	440a      	add	r2, r1
 800bef8:	4291      	cmp	r1, r2
 800befa:	f100 33ff 	add.w	r3, r0, #4294967295
 800befe:	d100      	bne.n	800bf02 <memcpy+0xc>
 800bf00:	4770      	bx	lr
 800bf02:	b510      	push	{r4, lr}
 800bf04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf0c:	4291      	cmp	r1, r2
 800bf0e:	d1f9      	bne.n	800bf04 <memcpy+0xe>
 800bf10:	bd10      	pop	{r4, pc}
	...

0800bf14 <_free_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4605      	mov	r5, r0
 800bf18:	2900      	cmp	r1, #0
 800bf1a:	d041      	beq.n	800bfa0 <_free_r+0x8c>
 800bf1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf20:	1f0c      	subs	r4, r1, #4
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	bfb8      	it	lt
 800bf26:	18e4      	addlt	r4, r4, r3
 800bf28:	f000 f8e0 	bl	800c0ec <__malloc_lock>
 800bf2c:	4a1d      	ldr	r2, [pc, #116]	@ (800bfa4 <_free_r+0x90>)
 800bf2e:	6813      	ldr	r3, [r2, #0]
 800bf30:	b933      	cbnz	r3, 800bf40 <_free_r+0x2c>
 800bf32:	6063      	str	r3, [r4, #4]
 800bf34:	6014      	str	r4, [r2, #0]
 800bf36:	4628      	mov	r0, r5
 800bf38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf3c:	f000 b8dc 	b.w	800c0f8 <__malloc_unlock>
 800bf40:	42a3      	cmp	r3, r4
 800bf42:	d908      	bls.n	800bf56 <_free_r+0x42>
 800bf44:	6820      	ldr	r0, [r4, #0]
 800bf46:	1821      	adds	r1, r4, r0
 800bf48:	428b      	cmp	r3, r1
 800bf4a:	bf01      	itttt	eq
 800bf4c:	6819      	ldreq	r1, [r3, #0]
 800bf4e:	685b      	ldreq	r3, [r3, #4]
 800bf50:	1809      	addeq	r1, r1, r0
 800bf52:	6021      	streq	r1, [r4, #0]
 800bf54:	e7ed      	b.n	800bf32 <_free_r+0x1e>
 800bf56:	461a      	mov	r2, r3
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	b10b      	cbz	r3, 800bf60 <_free_r+0x4c>
 800bf5c:	42a3      	cmp	r3, r4
 800bf5e:	d9fa      	bls.n	800bf56 <_free_r+0x42>
 800bf60:	6811      	ldr	r1, [r2, #0]
 800bf62:	1850      	adds	r0, r2, r1
 800bf64:	42a0      	cmp	r0, r4
 800bf66:	d10b      	bne.n	800bf80 <_free_r+0x6c>
 800bf68:	6820      	ldr	r0, [r4, #0]
 800bf6a:	4401      	add	r1, r0
 800bf6c:	1850      	adds	r0, r2, r1
 800bf6e:	4283      	cmp	r3, r0
 800bf70:	6011      	str	r1, [r2, #0]
 800bf72:	d1e0      	bne.n	800bf36 <_free_r+0x22>
 800bf74:	6818      	ldr	r0, [r3, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	6053      	str	r3, [r2, #4]
 800bf7a:	4408      	add	r0, r1
 800bf7c:	6010      	str	r0, [r2, #0]
 800bf7e:	e7da      	b.n	800bf36 <_free_r+0x22>
 800bf80:	d902      	bls.n	800bf88 <_free_r+0x74>
 800bf82:	230c      	movs	r3, #12
 800bf84:	602b      	str	r3, [r5, #0]
 800bf86:	e7d6      	b.n	800bf36 <_free_r+0x22>
 800bf88:	6820      	ldr	r0, [r4, #0]
 800bf8a:	1821      	adds	r1, r4, r0
 800bf8c:	428b      	cmp	r3, r1
 800bf8e:	bf04      	itt	eq
 800bf90:	6819      	ldreq	r1, [r3, #0]
 800bf92:	685b      	ldreq	r3, [r3, #4]
 800bf94:	6063      	str	r3, [r4, #4]
 800bf96:	bf04      	itt	eq
 800bf98:	1809      	addeq	r1, r1, r0
 800bf9a:	6021      	streq	r1, [r4, #0]
 800bf9c:	6054      	str	r4, [r2, #4]
 800bf9e:	e7ca      	b.n	800bf36 <_free_r+0x22>
 800bfa0:	bd38      	pop	{r3, r4, r5, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20001f74 	.word	0x20001f74

0800bfa8 <sbrk_aligned>:
 800bfa8:	b570      	push	{r4, r5, r6, lr}
 800bfaa:	4e0f      	ldr	r6, [pc, #60]	@ (800bfe8 <sbrk_aligned+0x40>)
 800bfac:	460c      	mov	r4, r1
 800bfae:	6831      	ldr	r1, [r6, #0]
 800bfb0:	4605      	mov	r5, r0
 800bfb2:	b911      	cbnz	r1, 800bfba <sbrk_aligned+0x12>
 800bfb4:	f000 fca6 	bl	800c904 <_sbrk_r>
 800bfb8:	6030      	str	r0, [r6, #0]
 800bfba:	4621      	mov	r1, r4
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	f000 fca1 	bl	800c904 <_sbrk_r>
 800bfc2:	1c43      	adds	r3, r0, #1
 800bfc4:	d103      	bne.n	800bfce <sbrk_aligned+0x26>
 800bfc6:	f04f 34ff 	mov.w	r4, #4294967295
 800bfca:	4620      	mov	r0, r4
 800bfcc:	bd70      	pop	{r4, r5, r6, pc}
 800bfce:	1cc4      	adds	r4, r0, #3
 800bfd0:	f024 0403 	bic.w	r4, r4, #3
 800bfd4:	42a0      	cmp	r0, r4
 800bfd6:	d0f8      	beq.n	800bfca <sbrk_aligned+0x22>
 800bfd8:	1a21      	subs	r1, r4, r0
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f000 fc92 	bl	800c904 <_sbrk_r>
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	d1f2      	bne.n	800bfca <sbrk_aligned+0x22>
 800bfe4:	e7ef      	b.n	800bfc6 <sbrk_aligned+0x1e>
 800bfe6:	bf00      	nop
 800bfe8:	20001f70 	.word	0x20001f70

0800bfec <_malloc_r>:
 800bfec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff0:	1ccd      	adds	r5, r1, #3
 800bff2:	f025 0503 	bic.w	r5, r5, #3
 800bff6:	3508      	adds	r5, #8
 800bff8:	2d0c      	cmp	r5, #12
 800bffa:	bf38      	it	cc
 800bffc:	250c      	movcc	r5, #12
 800bffe:	2d00      	cmp	r5, #0
 800c000:	4606      	mov	r6, r0
 800c002:	db01      	blt.n	800c008 <_malloc_r+0x1c>
 800c004:	42a9      	cmp	r1, r5
 800c006:	d904      	bls.n	800c012 <_malloc_r+0x26>
 800c008:	230c      	movs	r3, #12
 800c00a:	6033      	str	r3, [r6, #0]
 800c00c:	2000      	movs	r0, #0
 800c00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c0e8 <_malloc_r+0xfc>
 800c016:	f000 f869 	bl	800c0ec <__malloc_lock>
 800c01a:	f8d8 3000 	ldr.w	r3, [r8]
 800c01e:	461c      	mov	r4, r3
 800c020:	bb44      	cbnz	r4, 800c074 <_malloc_r+0x88>
 800c022:	4629      	mov	r1, r5
 800c024:	4630      	mov	r0, r6
 800c026:	f7ff ffbf 	bl	800bfa8 <sbrk_aligned>
 800c02a:	1c43      	adds	r3, r0, #1
 800c02c:	4604      	mov	r4, r0
 800c02e:	d158      	bne.n	800c0e2 <_malloc_r+0xf6>
 800c030:	f8d8 4000 	ldr.w	r4, [r8]
 800c034:	4627      	mov	r7, r4
 800c036:	2f00      	cmp	r7, #0
 800c038:	d143      	bne.n	800c0c2 <_malloc_r+0xd6>
 800c03a:	2c00      	cmp	r4, #0
 800c03c:	d04b      	beq.n	800c0d6 <_malloc_r+0xea>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	4639      	mov	r1, r7
 800c042:	4630      	mov	r0, r6
 800c044:	eb04 0903 	add.w	r9, r4, r3
 800c048:	f000 fc5c 	bl	800c904 <_sbrk_r>
 800c04c:	4581      	cmp	r9, r0
 800c04e:	d142      	bne.n	800c0d6 <_malloc_r+0xea>
 800c050:	6821      	ldr	r1, [r4, #0]
 800c052:	1a6d      	subs	r5, r5, r1
 800c054:	4629      	mov	r1, r5
 800c056:	4630      	mov	r0, r6
 800c058:	f7ff ffa6 	bl	800bfa8 <sbrk_aligned>
 800c05c:	3001      	adds	r0, #1
 800c05e:	d03a      	beq.n	800c0d6 <_malloc_r+0xea>
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	442b      	add	r3, r5
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	f8d8 3000 	ldr.w	r3, [r8]
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	bb62      	cbnz	r2, 800c0c8 <_malloc_r+0xdc>
 800c06e:	f8c8 7000 	str.w	r7, [r8]
 800c072:	e00f      	b.n	800c094 <_malloc_r+0xa8>
 800c074:	6822      	ldr	r2, [r4, #0]
 800c076:	1b52      	subs	r2, r2, r5
 800c078:	d420      	bmi.n	800c0bc <_malloc_r+0xd0>
 800c07a:	2a0b      	cmp	r2, #11
 800c07c:	d917      	bls.n	800c0ae <_malloc_r+0xc2>
 800c07e:	1961      	adds	r1, r4, r5
 800c080:	42a3      	cmp	r3, r4
 800c082:	6025      	str	r5, [r4, #0]
 800c084:	bf18      	it	ne
 800c086:	6059      	strne	r1, [r3, #4]
 800c088:	6863      	ldr	r3, [r4, #4]
 800c08a:	bf08      	it	eq
 800c08c:	f8c8 1000 	streq.w	r1, [r8]
 800c090:	5162      	str	r2, [r4, r5]
 800c092:	604b      	str	r3, [r1, #4]
 800c094:	4630      	mov	r0, r6
 800c096:	f000 f82f 	bl	800c0f8 <__malloc_unlock>
 800c09a:	f104 000b 	add.w	r0, r4, #11
 800c09e:	1d23      	adds	r3, r4, #4
 800c0a0:	f020 0007 	bic.w	r0, r0, #7
 800c0a4:	1ac2      	subs	r2, r0, r3
 800c0a6:	bf1c      	itt	ne
 800c0a8:	1a1b      	subne	r3, r3, r0
 800c0aa:	50a3      	strne	r3, [r4, r2]
 800c0ac:	e7af      	b.n	800c00e <_malloc_r+0x22>
 800c0ae:	6862      	ldr	r2, [r4, #4]
 800c0b0:	42a3      	cmp	r3, r4
 800c0b2:	bf0c      	ite	eq
 800c0b4:	f8c8 2000 	streq.w	r2, [r8]
 800c0b8:	605a      	strne	r2, [r3, #4]
 800c0ba:	e7eb      	b.n	800c094 <_malloc_r+0xa8>
 800c0bc:	4623      	mov	r3, r4
 800c0be:	6864      	ldr	r4, [r4, #4]
 800c0c0:	e7ae      	b.n	800c020 <_malloc_r+0x34>
 800c0c2:	463c      	mov	r4, r7
 800c0c4:	687f      	ldr	r7, [r7, #4]
 800c0c6:	e7b6      	b.n	800c036 <_malloc_r+0x4a>
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	42a3      	cmp	r3, r4
 800c0ce:	d1fb      	bne.n	800c0c8 <_malloc_r+0xdc>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	6053      	str	r3, [r2, #4]
 800c0d4:	e7de      	b.n	800c094 <_malloc_r+0xa8>
 800c0d6:	230c      	movs	r3, #12
 800c0d8:	6033      	str	r3, [r6, #0]
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f000 f80c 	bl	800c0f8 <__malloc_unlock>
 800c0e0:	e794      	b.n	800c00c <_malloc_r+0x20>
 800c0e2:	6005      	str	r5, [r0, #0]
 800c0e4:	e7d6      	b.n	800c094 <_malloc_r+0xa8>
 800c0e6:	bf00      	nop
 800c0e8:	20001f74 	.word	0x20001f74

0800c0ec <__malloc_lock>:
 800c0ec:	4801      	ldr	r0, [pc, #4]	@ (800c0f4 <__malloc_lock+0x8>)
 800c0ee:	f7ff bf00 	b.w	800bef2 <__retarget_lock_acquire_recursive>
 800c0f2:	bf00      	nop
 800c0f4:	20001f6c 	.word	0x20001f6c

0800c0f8 <__malloc_unlock>:
 800c0f8:	4801      	ldr	r0, [pc, #4]	@ (800c100 <__malloc_unlock+0x8>)
 800c0fa:	f7ff befb 	b.w	800bef4 <__retarget_lock_release_recursive>
 800c0fe:	bf00      	nop
 800c100:	20001f6c 	.word	0x20001f6c

0800c104 <__sfputc_r>:
 800c104:	6893      	ldr	r3, [r2, #8]
 800c106:	3b01      	subs	r3, #1
 800c108:	2b00      	cmp	r3, #0
 800c10a:	b410      	push	{r4}
 800c10c:	6093      	str	r3, [r2, #8]
 800c10e:	da08      	bge.n	800c122 <__sfputc_r+0x1e>
 800c110:	6994      	ldr	r4, [r2, #24]
 800c112:	42a3      	cmp	r3, r4
 800c114:	db01      	blt.n	800c11a <__sfputc_r+0x16>
 800c116:	290a      	cmp	r1, #10
 800c118:	d103      	bne.n	800c122 <__sfputc_r+0x1e>
 800c11a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c11e:	f7ff bdda 	b.w	800bcd6 <__swbuf_r>
 800c122:	6813      	ldr	r3, [r2, #0]
 800c124:	1c58      	adds	r0, r3, #1
 800c126:	6010      	str	r0, [r2, #0]
 800c128:	7019      	strb	r1, [r3, #0]
 800c12a:	4608      	mov	r0, r1
 800c12c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <__sfputs_r>:
 800c132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c134:	4606      	mov	r6, r0
 800c136:	460f      	mov	r7, r1
 800c138:	4614      	mov	r4, r2
 800c13a:	18d5      	adds	r5, r2, r3
 800c13c:	42ac      	cmp	r4, r5
 800c13e:	d101      	bne.n	800c144 <__sfputs_r+0x12>
 800c140:	2000      	movs	r0, #0
 800c142:	e007      	b.n	800c154 <__sfputs_r+0x22>
 800c144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c148:	463a      	mov	r2, r7
 800c14a:	4630      	mov	r0, r6
 800c14c:	f7ff ffda 	bl	800c104 <__sfputc_r>
 800c150:	1c43      	adds	r3, r0, #1
 800c152:	d1f3      	bne.n	800c13c <__sfputs_r+0xa>
 800c154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c158 <_vfiprintf_r>:
 800c158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	460d      	mov	r5, r1
 800c15e:	b09d      	sub	sp, #116	@ 0x74
 800c160:	4614      	mov	r4, r2
 800c162:	4698      	mov	r8, r3
 800c164:	4606      	mov	r6, r0
 800c166:	b118      	cbz	r0, 800c170 <_vfiprintf_r+0x18>
 800c168:	6a03      	ldr	r3, [r0, #32]
 800c16a:	b90b      	cbnz	r3, 800c170 <_vfiprintf_r+0x18>
 800c16c:	f7ff fcca 	bl	800bb04 <__sinit>
 800c170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c172:	07d9      	lsls	r1, r3, #31
 800c174:	d405      	bmi.n	800c182 <_vfiprintf_r+0x2a>
 800c176:	89ab      	ldrh	r3, [r5, #12]
 800c178:	059a      	lsls	r2, r3, #22
 800c17a:	d402      	bmi.n	800c182 <_vfiprintf_r+0x2a>
 800c17c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c17e:	f7ff feb8 	bl	800bef2 <__retarget_lock_acquire_recursive>
 800c182:	89ab      	ldrh	r3, [r5, #12]
 800c184:	071b      	lsls	r3, r3, #28
 800c186:	d501      	bpl.n	800c18c <_vfiprintf_r+0x34>
 800c188:	692b      	ldr	r3, [r5, #16]
 800c18a:	b99b      	cbnz	r3, 800c1b4 <_vfiprintf_r+0x5c>
 800c18c:	4629      	mov	r1, r5
 800c18e:	4630      	mov	r0, r6
 800c190:	f7ff fde0 	bl	800bd54 <__swsetup_r>
 800c194:	b170      	cbz	r0, 800c1b4 <_vfiprintf_r+0x5c>
 800c196:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c198:	07dc      	lsls	r4, r3, #31
 800c19a:	d504      	bpl.n	800c1a6 <_vfiprintf_r+0x4e>
 800c19c:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a0:	b01d      	add	sp, #116	@ 0x74
 800c1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a6:	89ab      	ldrh	r3, [r5, #12]
 800c1a8:	0598      	lsls	r0, r3, #22
 800c1aa:	d4f7      	bmi.n	800c19c <_vfiprintf_r+0x44>
 800c1ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1ae:	f7ff fea1 	bl	800bef4 <__retarget_lock_release_recursive>
 800c1b2:	e7f3      	b.n	800c19c <_vfiprintf_r+0x44>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1b8:	2320      	movs	r3, #32
 800c1ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1be:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1c2:	2330      	movs	r3, #48	@ 0x30
 800c1c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c374 <_vfiprintf_r+0x21c>
 800c1c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1cc:	f04f 0901 	mov.w	r9, #1
 800c1d0:	4623      	mov	r3, r4
 800c1d2:	469a      	mov	sl, r3
 800c1d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1d8:	b10a      	cbz	r2, 800c1de <_vfiprintf_r+0x86>
 800c1da:	2a25      	cmp	r2, #37	@ 0x25
 800c1dc:	d1f9      	bne.n	800c1d2 <_vfiprintf_r+0x7a>
 800c1de:	ebba 0b04 	subs.w	fp, sl, r4
 800c1e2:	d00b      	beq.n	800c1fc <_vfiprintf_r+0xa4>
 800c1e4:	465b      	mov	r3, fp
 800c1e6:	4622      	mov	r2, r4
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f7ff ffa1 	bl	800c132 <__sfputs_r>
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	f000 80a7 	beq.w	800c344 <_vfiprintf_r+0x1ec>
 800c1f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1f8:	445a      	add	r2, fp
 800c1fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 809f 	beq.w	800c344 <_vfiprintf_r+0x1ec>
 800c206:	2300      	movs	r3, #0
 800c208:	f04f 32ff 	mov.w	r2, #4294967295
 800c20c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c210:	f10a 0a01 	add.w	sl, sl, #1
 800c214:	9304      	str	r3, [sp, #16]
 800c216:	9307      	str	r3, [sp, #28]
 800c218:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c21c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c21e:	4654      	mov	r4, sl
 800c220:	2205      	movs	r2, #5
 800c222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c226:	4853      	ldr	r0, [pc, #332]	@ (800c374 <_vfiprintf_r+0x21c>)
 800c228:	f7f3 fffa 	bl	8000220 <memchr>
 800c22c:	9a04      	ldr	r2, [sp, #16]
 800c22e:	b9d8      	cbnz	r0, 800c268 <_vfiprintf_r+0x110>
 800c230:	06d1      	lsls	r1, r2, #27
 800c232:	bf44      	itt	mi
 800c234:	2320      	movmi	r3, #32
 800c236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c23a:	0713      	lsls	r3, r2, #28
 800c23c:	bf44      	itt	mi
 800c23e:	232b      	movmi	r3, #43	@ 0x2b
 800c240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c244:	f89a 3000 	ldrb.w	r3, [sl]
 800c248:	2b2a      	cmp	r3, #42	@ 0x2a
 800c24a:	d015      	beq.n	800c278 <_vfiprintf_r+0x120>
 800c24c:	9a07      	ldr	r2, [sp, #28]
 800c24e:	4654      	mov	r4, sl
 800c250:	2000      	movs	r0, #0
 800c252:	f04f 0c0a 	mov.w	ip, #10
 800c256:	4621      	mov	r1, r4
 800c258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c25c:	3b30      	subs	r3, #48	@ 0x30
 800c25e:	2b09      	cmp	r3, #9
 800c260:	d94b      	bls.n	800c2fa <_vfiprintf_r+0x1a2>
 800c262:	b1b0      	cbz	r0, 800c292 <_vfiprintf_r+0x13a>
 800c264:	9207      	str	r2, [sp, #28]
 800c266:	e014      	b.n	800c292 <_vfiprintf_r+0x13a>
 800c268:	eba0 0308 	sub.w	r3, r0, r8
 800c26c:	fa09 f303 	lsl.w	r3, r9, r3
 800c270:	4313      	orrs	r3, r2
 800c272:	9304      	str	r3, [sp, #16]
 800c274:	46a2      	mov	sl, r4
 800c276:	e7d2      	b.n	800c21e <_vfiprintf_r+0xc6>
 800c278:	9b03      	ldr	r3, [sp, #12]
 800c27a:	1d19      	adds	r1, r3, #4
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	9103      	str	r1, [sp, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	bfbb      	ittet	lt
 800c284:	425b      	neglt	r3, r3
 800c286:	f042 0202 	orrlt.w	r2, r2, #2
 800c28a:	9307      	strge	r3, [sp, #28]
 800c28c:	9307      	strlt	r3, [sp, #28]
 800c28e:	bfb8      	it	lt
 800c290:	9204      	strlt	r2, [sp, #16]
 800c292:	7823      	ldrb	r3, [r4, #0]
 800c294:	2b2e      	cmp	r3, #46	@ 0x2e
 800c296:	d10a      	bne.n	800c2ae <_vfiprintf_r+0x156>
 800c298:	7863      	ldrb	r3, [r4, #1]
 800c29a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c29c:	d132      	bne.n	800c304 <_vfiprintf_r+0x1ac>
 800c29e:	9b03      	ldr	r3, [sp, #12]
 800c2a0:	1d1a      	adds	r2, r3, #4
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	9203      	str	r2, [sp, #12]
 800c2a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2aa:	3402      	adds	r4, #2
 800c2ac:	9305      	str	r3, [sp, #20]
 800c2ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c384 <_vfiprintf_r+0x22c>
 800c2b2:	7821      	ldrb	r1, [r4, #0]
 800c2b4:	2203      	movs	r2, #3
 800c2b6:	4650      	mov	r0, sl
 800c2b8:	f7f3 ffb2 	bl	8000220 <memchr>
 800c2bc:	b138      	cbz	r0, 800c2ce <_vfiprintf_r+0x176>
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	eba0 000a 	sub.w	r0, r0, sl
 800c2c4:	2240      	movs	r2, #64	@ 0x40
 800c2c6:	4082      	lsls	r2, r0
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	3401      	adds	r4, #1
 800c2cc:	9304      	str	r3, [sp, #16]
 800c2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d2:	4829      	ldr	r0, [pc, #164]	@ (800c378 <_vfiprintf_r+0x220>)
 800c2d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2d8:	2206      	movs	r2, #6
 800c2da:	f7f3 ffa1 	bl	8000220 <memchr>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d03f      	beq.n	800c362 <_vfiprintf_r+0x20a>
 800c2e2:	4b26      	ldr	r3, [pc, #152]	@ (800c37c <_vfiprintf_r+0x224>)
 800c2e4:	bb1b      	cbnz	r3, 800c32e <_vfiprintf_r+0x1d6>
 800c2e6:	9b03      	ldr	r3, [sp, #12]
 800c2e8:	3307      	adds	r3, #7
 800c2ea:	f023 0307 	bic.w	r3, r3, #7
 800c2ee:	3308      	adds	r3, #8
 800c2f0:	9303      	str	r3, [sp, #12]
 800c2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2f4:	443b      	add	r3, r7
 800c2f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f8:	e76a      	b.n	800c1d0 <_vfiprintf_r+0x78>
 800c2fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2fe:	460c      	mov	r4, r1
 800c300:	2001      	movs	r0, #1
 800c302:	e7a8      	b.n	800c256 <_vfiprintf_r+0xfe>
 800c304:	2300      	movs	r3, #0
 800c306:	3401      	adds	r4, #1
 800c308:	9305      	str	r3, [sp, #20]
 800c30a:	4619      	mov	r1, r3
 800c30c:	f04f 0c0a 	mov.w	ip, #10
 800c310:	4620      	mov	r0, r4
 800c312:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c316:	3a30      	subs	r2, #48	@ 0x30
 800c318:	2a09      	cmp	r2, #9
 800c31a:	d903      	bls.n	800c324 <_vfiprintf_r+0x1cc>
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d0c6      	beq.n	800c2ae <_vfiprintf_r+0x156>
 800c320:	9105      	str	r1, [sp, #20]
 800c322:	e7c4      	b.n	800c2ae <_vfiprintf_r+0x156>
 800c324:	fb0c 2101 	mla	r1, ip, r1, r2
 800c328:	4604      	mov	r4, r0
 800c32a:	2301      	movs	r3, #1
 800c32c:	e7f0      	b.n	800c310 <_vfiprintf_r+0x1b8>
 800c32e:	ab03      	add	r3, sp, #12
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	462a      	mov	r2, r5
 800c334:	4b12      	ldr	r3, [pc, #72]	@ (800c380 <_vfiprintf_r+0x228>)
 800c336:	a904      	add	r1, sp, #16
 800c338:	4630      	mov	r0, r6
 800c33a:	f3af 8000 	nop.w
 800c33e:	4607      	mov	r7, r0
 800c340:	1c78      	adds	r0, r7, #1
 800c342:	d1d6      	bne.n	800c2f2 <_vfiprintf_r+0x19a>
 800c344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c346:	07d9      	lsls	r1, r3, #31
 800c348:	d405      	bmi.n	800c356 <_vfiprintf_r+0x1fe>
 800c34a:	89ab      	ldrh	r3, [r5, #12]
 800c34c:	059a      	lsls	r2, r3, #22
 800c34e:	d402      	bmi.n	800c356 <_vfiprintf_r+0x1fe>
 800c350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c352:	f7ff fdcf 	bl	800bef4 <__retarget_lock_release_recursive>
 800c356:	89ab      	ldrh	r3, [r5, #12]
 800c358:	065b      	lsls	r3, r3, #25
 800c35a:	f53f af1f 	bmi.w	800c19c <_vfiprintf_r+0x44>
 800c35e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c360:	e71e      	b.n	800c1a0 <_vfiprintf_r+0x48>
 800c362:	ab03      	add	r3, sp, #12
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	462a      	mov	r2, r5
 800c368:	4b05      	ldr	r3, [pc, #20]	@ (800c380 <_vfiprintf_r+0x228>)
 800c36a:	a904      	add	r1, sp, #16
 800c36c:	4630      	mov	r0, r6
 800c36e:	f000 f879 	bl	800c464 <_printf_i>
 800c372:	e7e4      	b.n	800c33e <_vfiprintf_r+0x1e6>
 800c374:	0800cb84 	.word	0x0800cb84
 800c378:	0800cb8e 	.word	0x0800cb8e
 800c37c:	00000000 	.word	0x00000000
 800c380:	0800c133 	.word	0x0800c133
 800c384:	0800cb8a 	.word	0x0800cb8a

0800c388 <_printf_common>:
 800c388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c38c:	4616      	mov	r6, r2
 800c38e:	4698      	mov	r8, r3
 800c390:	688a      	ldr	r2, [r1, #8]
 800c392:	690b      	ldr	r3, [r1, #16]
 800c394:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c398:	4293      	cmp	r3, r2
 800c39a:	bfb8      	it	lt
 800c39c:	4613      	movlt	r3, r2
 800c39e:	6033      	str	r3, [r6, #0]
 800c3a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c3a4:	4607      	mov	r7, r0
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	b10a      	cbz	r2, 800c3ae <_printf_common+0x26>
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	6033      	str	r3, [r6, #0]
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	0699      	lsls	r1, r3, #26
 800c3b2:	bf42      	ittt	mi
 800c3b4:	6833      	ldrmi	r3, [r6, #0]
 800c3b6:	3302      	addmi	r3, #2
 800c3b8:	6033      	strmi	r3, [r6, #0]
 800c3ba:	6825      	ldr	r5, [r4, #0]
 800c3bc:	f015 0506 	ands.w	r5, r5, #6
 800c3c0:	d106      	bne.n	800c3d0 <_printf_common+0x48>
 800c3c2:	f104 0a19 	add.w	sl, r4, #25
 800c3c6:	68e3      	ldr	r3, [r4, #12]
 800c3c8:	6832      	ldr	r2, [r6, #0]
 800c3ca:	1a9b      	subs	r3, r3, r2
 800c3cc:	42ab      	cmp	r3, r5
 800c3ce:	dc26      	bgt.n	800c41e <_printf_common+0x96>
 800c3d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c3d4:	6822      	ldr	r2, [r4, #0]
 800c3d6:	3b00      	subs	r3, #0
 800c3d8:	bf18      	it	ne
 800c3da:	2301      	movne	r3, #1
 800c3dc:	0692      	lsls	r2, r2, #26
 800c3de:	d42b      	bmi.n	800c438 <_printf_common+0xb0>
 800c3e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c3e4:	4641      	mov	r1, r8
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	47c8      	blx	r9
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	d01e      	beq.n	800c42c <_printf_common+0xa4>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	6922      	ldr	r2, [r4, #16]
 800c3f2:	f003 0306 	and.w	r3, r3, #6
 800c3f6:	2b04      	cmp	r3, #4
 800c3f8:	bf02      	ittt	eq
 800c3fa:	68e5      	ldreq	r5, [r4, #12]
 800c3fc:	6833      	ldreq	r3, [r6, #0]
 800c3fe:	1aed      	subeq	r5, r5, r3
 800c400:	68a3      	ldr	r3, [r4, #8]
 800c402:	bf0c      	ite	eq
 800c404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c408:	2500      	movne	r5, #0
 800c40a:	4293      	cmp	r3, r2
 800c40c:	bfc4      	itt	gt
 800c40e:	1a9b      	subgt	r3, r3, r2
 800c410:	18ed      	addgt	r5, r5, r3
 800c412:	2600      	movs	r6, #0
 800c414:	341a      	adds	r4, #26
 800c416:	42b5      	cmp	r5, r6
 800c418:	d11a      	bne.n	800c450 <_printf_common+0xc8>
 800c41a:	2000      	movs	r0, #0
 800c41c:	e008      	b.n	800c430 <_printf_common+0xa8>
 800c41e:	2301      	movs	r3, #1
 800c420:	4652      	mov	r2, sl
 800c422:	4641      	mov	r1, r8
 800c424:	4638      	mov	r0, r7
 800c426:	47c8      	blx	r9
 800c428:	3001      	adds	r0, #1
 800c42a:	d103      	bne.n	800c434 <_printf_common+0xac>
 800c42c:	f04f 30ff 	mov.w	r0, #4294967295
 800c430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c434:	3501      	adds	r5, #1
 800c436:	e7c6      	b.n	800c3c6 <_printf_common+0x3e>
 800c438:	18e1      	adds	r1, r4, r3
 800c43a:	1c5a      	adds	r2, r3, #1
 800c43c:	2030      	movs	r0, #48	@ 0x30
 800c43e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c442:	4422      	add	r2, r4
 800c444:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c448:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c44c:	3302      	adds	r3, #2
 800c44e:	e7c7      	b.n	800c3e0 <_printf_common+0x58>
 800c450:	2301      	movs	r3, #1
 800c452:	4622      	mov	r2, r4
 800c454:	4641      	mov	r1, r8
 800c456:	4638      	mov	r0, r7
 800c458:	47c8      	blx	r9
 800c45a:	3001      	adds	r0, #1
 800c45c:	d0e6      	beq.n	800c42c <_printf_common+0xa4>
 800c45e:	3601      	adds	r6, #1
 800c460:	e7d9      	b.n	800c416 <_printf_common+0x8e>
	...

0800c464 <_printf_i>:
 800c464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c468:	7e0f      	ldrb	r7, [r1, #24]
 800c46a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c46c:	2f78      	cmp	r7, #120	@ 0x78
 800c46e:	4691      	mov	r9, r2
 800c470:	4680      	mov	r8, r0
 800c472:	460c      	mov	r4, r1
 800c474:	469a      	mov	sl, r3
 800c476:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c47a:	d807      	bhi.n	800c48c <_printf_i+0x28>
 800c47c:	2f62      	cmp	r7, #98	@ 0x62
 800c47e:	d80a      	bhi.n	800c496 <_printf_i+0x32>
 800c480:	2f00      	cmp	r7, #0
 800c482:	f000 80d2 	beq.w	800c62a <_printf_i+0x1c6>
 800c486:	2f58      	cmp	r7, #88	@ 0x58
 800c488:	f000 80b9 	beq.w	800c5fe <_printf_i+0x19a>
 800c48c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c490:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c494:	e03a      	b.n	800c50c <_printf_i+0xa8>
 800c496:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c49a:	2b15      	cmp	r3, #21
 800c49c:	d8f6      	bhi.n	800c48c <_printf_i+0x28>
 800c49e:	a101      	add	r1, pc, #4	@ (adr r1, 800c4a4 <_printf_i+0x40>)
 800c4a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4a4:	0800c4fd 	.word	0x0800c4fd
 800c4a8:	0800c511 	.word	0x0800c511
 800c4ac:	0800c48d 	.word	0x0800c48d
 800c4b0:	0800c48d 	.word	0x0800c48d
 800c4b4:	0800c48d 	.word	0x0800c48d
 800c4b8:	0800c48d 	.word	0x0800c48d
 800c4bc:	0800c511 	.word	0x0800c511
 800c4c0:	0800c48d 	.word	0x0800c48d
 800c4c4:	0800c48d 	.word	0x0800c48d
 800c4c8:	0800c48d 	.word	0x0800c48d
 800c4cc:	0800c48d 	.word	0x0800c48d
 800c4d0:	0800c611 	.word	0x0800c611
 800c4d4:	0800c53b 	.word	0x0800c53b
 800c4d8:	0800c5cb 	.word	0x0800c5cb
 800c4dc:	0800c48d 	.word	0x0800c48d
 800c4e0:	0800c48d 	.word	0x0800c48d
 800c4e4:	0800c633 	.word	0x0800c633
 800c4e8:	0800c48d 	.word	0x0800c48d
 800c4ec:	0800c53b 	.word	0x0800c53b
 800c4f0:	0800c48d 	.word	0x0800c48d
 800c4f4:	0800c48d 	.word	0x0800c48d
 800c4f8:	0800c5d3 	.word	0x0800c5d3
 800c4fc:	6833      	ldr	r3, [r6, #0]
 800c4fe:	1d1a      	adds	r2, r3, #4
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	6032      	str	r2, [r6, #0]
 800c504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c508:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c50c:	2301      	movs	r3, #1
 800c50e:	e09d      	b.n	800c64c <_printf_i+0x1e8>
 800c510:	6833      	ldr	r3, [r6, #0]
 800c512:	6820      	ldr	r0, [r4, #0]
 800c514:	1d19      	adds	r1, r3, #4
 800c516:	6031      	str	r1, [r6, #0]
 800c518:	0606      	lsls	r6, r0, #24
 800c51a:	d501      	bpl.n	800c520 <_printf_i+0xbc>
 800c51c:	681d      	ldr	r5, [r3, #0]
 800c51e:	e003      	b.n	800c528 <_printf_i+0xc4>
 800c520:	0645      	lsls	r5, r0, #25
 800c522:	d5fb      	bpl.n	800c51c <_printf_i+0xb8>
 800c524:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c528:	2d00      	cmp	r5, #0
 800c52a:	da03      	bge.n	800c534 <_printf_i+0xd0>
 800c52c:	232d      	movs	r3, #45	@ 0x2d
 800c52e:	426d      	negs	r5, r5
 800c530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c534:	4859      	ldr	r0, [pc, #356]	@ (800c69c <_printf_i+0x238>)
 800c536:	230a      	movs	r3, #10
 800c538:	e011      	b.n	800c55e <_printf_i+0xfa>
 800c53a:	6821      	ldr	r1, [r4, #0]
 800c53c:	6833      	ldr	r3, [r6, #0]
 800c53e:	0608      	lsls	r0, r1, #24
 800c540:	f853 5b04 	ldr.w	r5, [r3], #4
 800c544:	d402      	bmi.n	800c54c <_printf_i+0xe8>
 800c546:	0649      	lsls	r1, r1, #25
 800c548:	bf48      	it	mi
 800c54a:	b2ad      	uxthmi	r5, r5
 800c54c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c54e:	4853      	ldr	r0, [pc, #332]	@ (800c69c <_printf_i+0x238>)
 800c550:	6033      	str	r3, [r6, #0]
 800c552:	bf14      	ite	ne
 800c554:	230a      	movne	r3, #10
 800c556:	2308      	moveq	r3, #8
 800c558:	2100      	movs	r1, #0
 800c55a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c55e:	6866      	ldr	r6, [r4, #4]
 800c560:	60a6      	str	r6, [r4, #8]
 800c562:	2e00      	cmp	r6, #0
 800c564:	bfa2      	ittt	ge
 800c566:	6821      	ldrge	r1, [r4, #0]
 800c568:	f021 0104 	bicge.w	r1, r1, #4
 800c56c:	6021      	strge	r1, [r4, #0]
 800c56e:	b90d      	cbnz	r5, 800c574 <_printf_i+0x110>
 800c570:	2e00      	cmp	r6, #0
 800c572:	d04b      	beq.n	800c60c <_printf_i+0x1a8>
 800c574:	4616      	mov	r6, r2
 800c576:	fbb5 f1f3 	udiv	r1, r5, r3
 800c57a:	fb03 5711 	mls	r7, r3, r1, r5
 800c57e:	5dc7      	ldrb	r7, [r0, r7]
 800c580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c584:	462f      	mov	r7, r5
 800c586:	42bb      	cmp	r3, r7
 800c588:	460d      	mov	r5, r1
 800c58a:	d9f4      	bls.n	800c576 <_printf_i+0x112>
 800c58c:	2b08      	cmp	r3, #8
 800c58e:	d10b      	bne.n	800c5a8 <_printf_i+0x144>
 800c590:	6823      	ldr	r3, [r4, #0]
 800c592:	07df      	lsls	r7, r3, #31
 800c594:	d508      	bpl.n	800c5a8 <_printf_i+0x144>
 800c596:	6923      	ldr	r3, [r4, #16]
 800c598:	6861      	ldr	r1, [r4, #4]
 800c59a:	4299      	cmp	r1, r3
 800c59c:	bfde      	ittt	le
 800c59e:	2330      	movle	r3, #48	@ 0x30
 800c5a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5a8:	1b92      	subs	r2, r2, r6
 800c5aa:	6122      	str	r2, [r4, #16]
 800c5ac:	f8cd a000 	str.w	sl, [sp]
 800c5b0:	464b      	mov	r3, r9
 800c5b2:	aa03      	add	r2, sp, #12
 800c5b4:	4621      	mov	r1, r4
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	f7ff fee6 	bl	800c388 <_printf_common>
 800c5bc:	3001      	adds	r0, #1
 800c5be:	d14a      	bne.n	800c656 <_printf_i+0x1f2>
 800c5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c4:	b004      	add	sp, #16
 800c5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	f043 0320 	orr.w	r3, r3, #32
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	4833      	ldr	r0, [pc, #204]	@ (800c6a0 <_printf_i+0x23c>)
 800c5d4:	2778      	movs	r7, #120	@ 0x78
 800c5d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	6831      	ldr	r1, [r6, #0]
 800c5de:	061f      	lsls	r7, r3, #24
 800c5e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800c5e4:	d402      	bmi.n	800c5ec <_printf_i+0x188>
 800c5e6:	065f      	lsls	r7, r3, #25
 800c5e8:	bf48      	it	mi
 800c5ea:	b2ad      	uxthmi	r5, r5
 800c5ec:	6031      	str	r1, [r6, #0]
 800c5ee:	07d9      	lsls	r1, r3, #31
 800c5f0:	bf44      	itt	mi
 800c5f2:	f043 0320 	orrmi.w	r3, r3, #32
 800c5f6:	6023      	strmi	r3, [r4, #0]
 800c5f8:	b11d      	cbz	r5, 800c602 <_printf_i+0x19e>
 800c5fa:	2310      	movs	r3, #16
 800c5fc:	e7ac      	b.n	800c558 <_printf_i+0xf4>
 800c5fe:	4827      	ldr	r0, [pc, #156]	@ (800c69c <_printf_i+0x238>)
 800c600:	e7e9      	b.n	800c5d6 <_printf_i+0x172>
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	f023 0320 	bic.w	r3, r3, #32
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	e7f6      	b.n	800c5fa <_printf_i+0x196>
 800c60c:	4616      	mov	r6, r2
 800c60e:	e7bd      	b.n	800c58c <_printf_i+0x128>
 800c610:	6833      	ldr	r3, [r6, #0]
 800c612:	6825      	ldr	r5, [r4, #0]
 800c614:	6961      	ldr	r1, [r4, #20]
 800c616:	1d18      	adds	r0, r3, #4
 800c618:	6030      	str	r0, [r6, #0]
 800c61a:	062e      	lsls	r6, r5, #24
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	d501      	bpl.n	800c624 <_printf_i+0x1c0>
 800c620:	6019      	str	r1, [r3, #0]
 800c622:	e002      	b.n	800c62a <_printf_i+0x1c6>
 800c624:	0668      	lsls	r0, r5, #25
 800c626:	d5fb      	bpl.n	800c620 <_printf_i+0x1bc>
 800c628:	8019      	strh	r1, [r3, #0]
 800c62a:	2300      	movs	r3, #0
 800c62c:	6123      	str	r3, [r4, #16]
 800c62e:	4616      	mov	r6, r2
 800c630:	e7bc      	b.n	800c5ac <_printf_i+0x148>
 800c632:	6833      	ldr	r3, [r6, #0]
 800c634:	1d1a      	adds	r2, r3, #4
 800c636:	6032      	str	r2, [r6, #0]
 800c638:	681e      	ldr	r6, [r3, #0]
 800c63a:	6862      	ldr	r2, [r4, #4]
 800c63c:	2100      	movs	r1, #0
 800c63e:	4630      	mov	r0, r6
 800c640:	f7f3 fdee 	bl	8000220 <memchr>
 800c644:	b108      	cbz	r0, 800c64a <_printf_i+0x1e6>
 800c646:	1b80      	subs	r0, r0, r6
 800c648:	6060      	str	r0, [r4, #4]
 800c64a:	6863      	ldr	r3, [r4, #4]
 800c64c:	6123      	str	r3, [r4, #16]
 800c64e:	2300      	movs	r3, #0
 800c650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c654:	e7aa      	b.n	800c5ac <_printf_i+0x148>
 800c656:	6923      	ldr	r3, [r4, #16]
 800c658:	4632      	mov	r2, r6
 800c65a:	4649      	mov	r1, r9
 800c65c:	4640      	mov	r0, r8
 800c65e:	47d0      	blx	sl
 800c660:	3001      	adds	r0, #1
 800c662:	d0ad      	beq.n	800c5c0 <_printf_i+0x15c>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	079b      	lsls	r3, r3, #30
 800c668:	d413      	bmi.n	800c692 <_printf_i+0x22e>
 800c66a:	68e0      	ldr	r0, [r4, #12]
 800c66c:	9b03      	ldr	r3, [sp, #12]
 800c66e:	4298      	cmp	r0, r3
 800c670:	bfb8      	it	lt
 800c672:	4618      	movlt	r0, r3
 800c674:	e7a6      	b.n	800c5c4 <_printf_i+0x160>
 800c676:	2301      	movs	r3, #1
 800c678:	4632      	mov	r2, r6
 800c67a:	4649      	mov	r1, r9
 800c67c:	4640      	mov	r0, r8
 800c67e:	47d0      	blx	sl
 800c680:	3001      	adds	r0, #1
 800c682:	d09d      	beq.n	800c5c0 <_printf_i+0x15c>
 800c684:	3501      	adds	r5, #1
 800c686:	68e3      	ldr	r3, [r4, #12]
 800c688:	9903      	ldr	r1, [sp, #12]
 800c68a:	1a5b      	subs	r3, r3, r1
 800c68c:	42ab      	cmp	r3, r5
 800c68e:	dcf2      	bgt.n	800c676 <_printf_i+0x212>
 800c690:	e7eb      	b.n	800c66a <_printf_i+0x206>
 800c692:	2500      	movs	r5, #0
 800c694:	f104 0619 	add.w	r6, r4, #25
 800c698:	e7f5      	b.n	800c686 <_printf_i+0x222>
 800c69a:	bf00      	nop
 800c69c:	0800cb95 	.word	0x0800cb95
 800c6a0:	0800cba6 	.word	0x0800cba6

0800c6a4 <__sflush_r>:
 800c6a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ac:	0716      	lsls	r6, r2, #28
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	460c      	mov	r4, r1
 800c6b2:	d454      	bmi.n	800c75e <__sflush_r+0xba>
 800c6b4:	684b      	ldr	r3, [r1, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	dc02      	bgt.n	800c6c0 <__sflush_r+0x1c>
 800c6ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	dd48      	ble.n	800c752 <__sflush_r+0xae>
 800c6c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6c2:	2e00      	cmp	r6, #0
 800c6c4:	d045      	beq.n	800c752 <__sflush_r+0xae>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6cc:	682f      	ldr	r7, [r5, #0]
 800c6ce:	6a21      	ldr	r1, [r4, #32]
 800c6d0:	602b      	str	r3, [r5, #0]
 800c6d2:	d030      	beq.n	800c736 <__sflush_r+0x92>
 800c6d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	0759      	lsls	r1, r3, #29
 800c6da:	d505      	bpl.n	800c6e8 <__sflush_r+0x44>
 800c6dc:	6863      	ldr	r3, [r4, #4]
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6e2:	b10b      	cbz	r3, 800c6e8 <__sflush_r+0x44>
 800c6e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6e6:	1ad2      	subs	r2, r2, r3
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6ec:	6a21      	ldr	r1, [r4, #32]
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	47b0      	blx	r6
 800c6f2:	1c43      	adds	r3, r0, #1
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	d106      	bne.n	800c706 <__sflush_r+0x62>
 800c6f8:	6829      	ldr	r1, [r5, #0]
 800c6fa:	291d      	cmp	r1, #29
 800c6fc:	d82b      	bhi.n	800c756 <__sflush_r+0xb2>
 800c6fe:	4a2a      	ldr	r2, [pc, #168]	@ (800c7a8 <__sflush_r+0x104>)
 800c700:	410a      	asrs	r2, r1
 800c702:	07d6      	lsls	r6, r2, #31
 800c704:	d427      	bmi.n	800c756 <__sflush_r+0xb2>
 800c706:	2200      	movs	r2, #0
 800c708:	6062      	str	r2, [r4, #4]
 800c70a:	04d9      	lsls	r1, r3, #19
 800c70c:	6922      	ldr	r2, [r4, #16]
 800c70e:	6022      	str	r2, [r4, #0]
 800c710:	d504      	bpl.n	800c71c <__sflush_r+0x78>
 800c712:	1c42      	adds	r2, r0, #1
 800c714:	d101      	bne.n	800c71a <__sflush_r+0x76>
 800c716:	682b      	ldr	r3, [r5, #0]
 800c718:	b903      	cbnz	r3, 800c71c <__sflush_r+0x78>
 800c71a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c71c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c71e:	602f      	str	r7, [r5, #0]
 800c720:	b1b9      	cbz	r1, 800c752 <__sflush_r+0xae>
 800c722:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c726:	4299      	cmp	r1, r3
 800c728:	d002      	beq.n	800c730 <__sflush_r+0x8c>
 800c72a:	4628      	mov	r0, r5
 800c72c:	f7ff fbf2 	bl	800bf14 <_free_r>
 800c730:	2300      	movs	r3, #0
 800c732:	6363      	str	r3, [r4, #52]	@ 0x34
 800c734:	e00d      	b.n	800c752 <__sflush_r+0xae>
 800c736:	2301      	movs	r3, #1
 800c738:	4628      	mov	r0, r5
 800c73a:	47b0      	blx	r6
 800c73c:	4602      	mov	r2, r0
 800c73e:	1c50      	adds	r0, r2, #1
 800c740:	d1c9      	bne.n	800c6d6 <__sflush_r+0x32>
 800c742:	682b      	ldr	r3, [r5, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d0c6      	beq.n	800c6d6 <__sflush_r+0x32>
 800c748:	2b1d      	cmp	r3, #29
 800c74a:	d001      	beq.n	800c750 <__sflush_r+0xac>
 800c74c:	2b16      	cmp	r3, #22
 800c74e:	d11e      	bne.n	800c78e <__sflush_r+0xea>
 800c750:	602f      	str	r7, [r5, #0]
 800c752:	2000      	movs	r0, #0
 800c754:	e022      	b.n	800c79c <__sflush_r+0xf8>
 800c756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c75a:	b21b      	sxth	r3, r3
 800c75c:	e01b      	b.n	800c796 <__sflush_r+0xf2>
 800c75e:	690f      	ldr	r7, [r1, #16]
 800c760:	2f00      	cmp	r7, #0
 800c762:	d0f6      	beq.n	800c752 <__sflush_r+0xae>
 800c764:	0793      	lsls	r3, r2, #30
 800c766:	680e      	ldr	r6, [r1, #0]
 800c768:	bf08      	it	eq
 800c76a:	694b      	ldreq	r3, [r1, #20]
 800c76c:	600f      	str	r7, [r1, #0]
 800c76e:	bf18      	it	ne
 800c770:	2300      	movne	r3, #0
 800c772:	eba6 0807 	sub.w	r8, r6, r7
 800c776:	608b      	str	r3, [r1, #8]
 800c778:	f1b8 0f00 	cmp.w	r8, #0
 800c77c:	dde9      	ble.n	800c752 <__sflush_r+0xae>
 800c77e:	6a21      	ldr	r1, [r4, #32]
 800c780:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c782:	4643      	mov	r3, r8
 800c784:	463a      	mov	r2, r7
 800c786:	4628      	mov	r0, r5
 800c788:	47b0      	blx	r6
 800c78a:	2800      	cmp	r0, #0
 800c78c:	dc08      	bgt.n	800c7a0 <__sflush_r+0xfc>
 800c78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c796:	81a3      	strh	r3, [r4, #12]
 800c798:	f04f 30ff 	mov.w	r0, #4294967295
 800c79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a0:	4407      	add	r7, r0
 800c7a2:	eba8 0800 	sub.w	r8, r8, r0
 800c7a6:	e7e7      	b.n	800c778 <__sflush_r+0xd4>
 800c7a8:	dfbffffe 	.word	0xdfbffffe

0800c7ac <_fflush_r>:
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	690b      	ldr	r3, [r1, #16]
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	b913      	cbnz	r3, 800c7bc <_fflush_r+0x10>
 800c7b6:	2500      	movs	r5, #0
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	b118      	cbz	r0, 800c7c6 <_fflush_r+0x1a>
 800c7be:	6a03      	ldr	r3, [r0, #32]
 800c7c0:	b90b      	cbnz	r3, 800c7c6 <_fflush_r+0x1a>
 800c7c2:	f7ff f99f 	bl	800bb04 <__sinit>
 800c7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d0f3      	beq.n	800c7b6 <_fflush_r+0xa>
 800c7ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7d0:	07d0      	lsls	r0, r2, #31
 800c7d2:	d404      	bmi.n	800c7de <_fflush_r+0x32>
 800c7d4:	0599      	lsls	r1, r3, #22
 800c7d6:	d402      	bmi.n	800c7de <_fflush_r+0x32>
 800c7d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7da:	f7ff fb8a 	bl	800bef2 <__retarget_lock_acquire_recursive>
 800c7de:	4628      	mov	r0, r5
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	f7ff ff5f 	bl	800c6a4 <__sflush_r>
 800c7e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7e8:	07da      	lsls	r2, r3, #31
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	d4e4      	bmi.n	800c7b8 <_fflush_r+0xc>
 800c7ee:	89a3      	ldrh	r3, [r4, #12]
 800c7f0:	059b      	lsls	r3, r3, #22
 800c7f2:	d4e1      	bmi.n	800c7b8 <_fflush_r+0xc>
 800c7f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7f6:	f7ff fb7d 	bl	800bef4 <__retarget_lock_release_recursive>
 800c7fa:	e7dd      	b.n	800c7b8 <_fflush_r+0xc>

0800c7fc <__swhatbuf_r>:
 800c7fc:	b570      	push	{r4, r5, r6, lr}
 800c7fe:	460c      	mov	r4, r1
 800c800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c804:	2900      	cmp	r1, #0
 800c806:	b096      	sub	sp, #88	@ 0x58
 800c808:	4615      	mov	r5, r2
 800c80a:	461e      	mov	r6, r3
 800c80c:	da0d      	bge.n	800c82a <__swhatbuf_r+0x2e>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c814:	f04f 0100 	mov.w	r1, #0
 800c818:	bf14      	ite	ne
 800c81a:	2340      	movne	r3, #64	@ 0x40
 800c81c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c820:	2000      	movs	r0, #0
 800c822:	6031      	str	r1, [r6, #0]
 800c824:	602b      	str	r3, [r5, #0]
 800c826:	b016      	add	sp, #88	@ 0x58
 800c828:	bd70      	pop	{r4, r5, r6, pc}
 800c82a:	466a      	mov	r2, sp
 800c82c:	f000 f848 	bl	800c8c0 <_fstat_r>
 800c830:	2800      	cmp	r0, #0
 800c832:	dbec      	blt.n	800c80e <__swhatbuf_r+0x12>
 800c834:	9901      	ldr	r1, [sp, #4]
 800c836:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c83a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c83e:	4259      	negs	r1, r3
 800c840:	4159      	adcs	r1, r3
 800c842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c846:	e7eb      	b.n	800c820 <__swhatbuf_r+0x24>

0800c848 <__smakebuf_r>:
 800c848:	898b      	ldrh	r3, [r1, #12]
 800c84a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c84c:	079d      	lsls	r5, r3, #30
 800c84e:	4606      	mov	r6, r0
 800c850:	460c      	mov	r4, r1
 800c852:	d507      	bpl.n	800c864 <__smakebuf_r+0x1c>
 800c854:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	6123      	str	r3, [r4, #16]
 800c85c:	2301      	movs	r3, #1
 800c85e:	6163      	str	r3, [r4, #20]
 800c860:	b003      	add	sp, #12
 800c862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c864:	ab01      	add	r3, sp, #4
 800c866:	466a      	mov	r2, sp
 800c868:	f7ff ffc8 	bl	800c7fc <__swhatbuf_r>
 800c86c:	9f00      	ldr	r7, [sp, #0]
 800c86e:	4605      	mov	r5, r0
 800c870:	4639      	mov	r1, r7
 800c872:	4630      	mov	r0, r6
 800c874:	f7ff fbba 	bl	800bfec <_malloc_r>
 800c878:	b948      	cbnz	r0, 800c88e <__smakebuf_r+0x46>
 800c87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c87e:	059a      	lsls	r2, r3, #22
 800c880:	d4ee      	bmi.n	800c860 <__smakebuf_r+0x18>
 800c882:	f023 0303 	bic.w	r3, r3, #3
 800c886:	f043 0302 	orr.w	r3, r3, #2
 800c88a:	81a3      	strh	r3, [r4, #12]
 800c88c:	e7e2      	b.n	800c854 <__smakebuf_r+0xc>
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	6020      	str	r0, [r4, #0]
 800c892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c896:	81a3      	strh	r3, [r4, #12]
 800c898:	9b01      	ldr	r3, [sp, #4]
 800c89a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c89e:	b15b      	cbz	r3, 800c8b8 <__smakebuf_r+0x70>
 800c8a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	f000 f81d 	bl	800c8e4 <_isatty_r>
 800c8aa:	b128      	cbz	r0, 800c8b8 <__smakebuf_r+0x70>
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f023 0303 	bic.w	r3, r3, #3
 800c8b2:	f043 0301 	orr.w	r3, r3, #1
 800c8b6:	81a3      	strh	r3, [r4, #12]
 800c8b8:	89a3      	ldrh	r3, [r4, #12]
 800c8ba:	431d      	orrs	r5, r3
 800c8bc:	81a5      	strh	r5, [r4, #12]
 800c8be:	e7cf      	b.n	800c860 <__smakebuf_r+0x18>

0800c8c0 <_fstat_r>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	4d07      	ldr	r5, [pc, #28]	@ (800c8e0 <_fstat_r+0x20>)
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	4608      	mov	r0, r1
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	602b      	str	r3, [r5, #0]
 800c8ce:	f7f4 fa80 	bl	8000dd2 <_fstat>
 800c8d2:	1c43      	adds	r3, r0, #1
 800c8d4:	d102      	bne.n	800c8dc <_fstat_r+0x1c>
 800c8d6:	682b      	ldr	r3, [r5, #0]
 800c8d8:	b103      	cbz	r3, 800c8dc <_fstat_r+0x1c>
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	bd38      	pop	{r3, r4, r5, pc}
 800c8de:	bf00      	nop
 800c8e0:	20001f68 	.word	0x20001f68

0800c8e4 <_isatty_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	4d06      	ldr	r5, [pc, #24]	@ (800c900 <_isatty_r+0x1c>)
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	602b      	str	r3, [r5, #0]
 800c8f0:	f7f4 fa7f 	bl	8000df2 <_isatty>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d102      	bne.n	800c8fe <_isatty_r+0x1a>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	b103      	cbz	r3, 800c8fe <_isatty_r+0x1a>
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	20001f68 	.word	0x20001f68

0800c904 <_sbrk_r>:
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	4d06      	ldr	r5, [pc, #24]	@ (800c920 <_sbrk_r+0x1c>)
 800c908:	2300      	movs	r3, #0
 800c90a:	4604      	mov	r4, r0
 800c90c:	4608      	mov	r0, r1
 800c90e:	602b      	str	r3, [r5, #0]
 800c910:	f7f4 fa88 	bl	8000e24 <_sbrk>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_sbrk_r+0x1a>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_sbrk_r+0x1a>
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	20001f68 	.word	0x20001f68

0800c924 <_init>:
 800c924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c926:	bf00      	nop
 800c928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92a:	bc08      	pop	{r3}
 800c92c:	469e      	mov	lr, r3
 800c92e:	4770      	bx	lr

0800c930 <_fini>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	bf00      	nop
 800c934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c936:	bc08      	pop	{r3}
 800c938:	469e      	mov	lr, r3
 800c93a:	4770      	bx	lr
