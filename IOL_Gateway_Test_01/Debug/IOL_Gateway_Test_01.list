
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c88c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800ca6c  0800ca6c  0000da6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd10  0800cd10  0000e278  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd10  0800cd10  0000dd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd18  0800cd18  0000e278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd18  0800cd18  0000dd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd1c  0800cd1c  0000dd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800cd20  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002684  20000278  0800cf98  0000e278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028fc  0800cf98  0000e8fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020044  00000000  00000000  0000e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004da9  00000000  00000000  0002e2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00033098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013de  00000000  00000000  00034a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007024  00000000  00000000  00035e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022aa8  00000000  00000000  0003ce9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce062  00000000  00000000  0005f942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d9a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007320  00000000  00000000  0012d9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00134d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000278 	.word	0x20000278
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ca54 	.word	0x0800ca54

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000027c 	.word	0x2000027c
 800021c:	0800ca54 	.word	0x0800ca54

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_DMA_Init+0x50>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <MX_DMA_Init+0x50>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_DMA_Init+0x50>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_DMA_Init+0x50>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f001 fcf5 	bl	8001fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f001 fd0c 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b43      	ldr	r3, [pc, #268]	@ (8000728 <MX_GPIO_Init+0x124>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a42      	ldr	r2, [pc, #264]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b40      	ldr	r3, [pc, #256]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b3d      	ldr	r3, [pc, #244]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a3c      	ldr	r2, [pc, #240]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b3a      	ldr	r3, [pc, #232]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <MX_GPIO_Init+0x124>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a36      	ldr	r2, [pc, #216]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b34      	ldr	r3, [pc, #208]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	4a30      	ldr	r2, [pc, #192]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066e:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000680:	482a      	ldr	r0, [pc, #168]	@ (800072c <MX_GPIO_Init+0x128>)
 8000682:	f002 f993 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2140      	movs	r1, #64	@ 0x40
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f002 f98d 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2101      	movs	r1, #1
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <MX_GPIO_Init+0x12c>)
 8000698:	f002 f988 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800069c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	481d      	ldr	r0, [pc, #116]	@ (800072c <MX_GPIO_Init+0x128>)
 80006b6:	f001 fff7 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006ba:	23a0      	movs	r3, #160	@ 0xa0
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d2:	f001 ffe9 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006d6:	2340      	movs	r3, #64	@ 0x40
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f001 ffda 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f4:	2301      	movs	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_GPIO_Init+0x12c>)
 800070c:	f001 ffcc 	bl	80026a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2017      	movs	r0, #23
 8000716:	f001 fc60 	bl	8001fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800071a:	2017      	movs	r0, #23
 800071c:	f001 fc77 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	48000800 	.word	0x48000800
 8000730:	48000400 	.word	0x48000400

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f001 fae1 	bl	8001cfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f83a 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f7ff ff60 	bl	8000604 <MX_GPIO_Init>
  MX_DMA_Init();
 8000744:	f7ff ff34 	bl	80005b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000748:	f000 fc30 	bl	8000fac <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 800074c:	f00a fcc4 	bl	800b0d8 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000750:	f000 fbb2 	bl	8000eb8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8000754:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000758:	4910      	ldr	r1, [pc, #64]	@ (800079c <main+0x68>)
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <main+0x6c>)
 800075c:	f000 f87b 	bl	8000856 <Q_Init>

  HAL_Delay(3000);
 8000760:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000764:	f001 fb3c 	bl	8001de0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8000768:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <main+0x70>)
 800076a:	f004 fe9f 	bl	80054ac <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 800076e:	f000 fd73 	bl	8001258 <GetClockSourcePrint>
  BootMessagePrint();
 8000772:	f000 fd41 	bl	80011f8 <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000776:	2264      	movs	r2, #100	@ 0x64
 8000778:	490b      	ldr	r1, [pc, #44]	@ (80007a8 <main+0x74>)
 800077a:	480c      	ldr	r0, [pc, #48]	@ (80007ac <main+0x78>)
 800077c:	f007 f930 	bl	80079e0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000780:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <main+0x7c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <main+0x7c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0204 	bic.w	r2, r2, #4
 800078e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 8000790:	f000 fcfc 	bl	800118c <User_Toggle_Led>
    ProcessDataIn_IncreaseCntValue();
 8000794:	f000 fd10 	bl	80011b8 <ProcessDataIn_IncreaseCntValue>
    User_Toggle_Led();
 8000798:	bf00      	nop
 800079a:	e7f9      	b.n	8000790 <main+0x5c>
 800079c:	20000690 	.word	0x20000690
 80007a0:	20000fc0 	.word	0x20000fc0
 80007a4:	20000e80 	.word	0x20000e80
 80007a8:	20000a7c 	.word	0x20000a7c
 80007ac:	20000f2c 	.word	0x20000f2c
 80007b0:	20000ecc 	.word	0x20000ecc

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	@ 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	2238      	movs	r2, #56	@ 0x38
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fbb4 	bl	800bf30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f003 fe3e 	bl	8004458 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007dc:	2321      	movs	r3, #33	@ 0x21
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007e4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007e6:	2301      	movs	r3, #1
 80007e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	2303      	movs	r3, #3
 80007f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007f2:	2306      	movs	r3, #6
 80007f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007f6:	2355      	movs	r3, #85	@ 0x55
 80007f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80007fe:	2304      	movs	r3, #4
 8000800:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	4618      	mov	r0, r3
 800080c:	f003 fed8 	bl	80045c0 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000816:	f000 f818 	bl	800084a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2104      	movs	r1, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f004 f9d6 	bl	8004be4 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800083e:	f000 f804 	bl	800084a <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	@ 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084e:	b672      	cpsid	i
}
 8000850:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000852:	bf00      	nop
 8000854:	e7fd      	b.n	8000852 <Error_Handler+0x8>

08000856 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000856:	b480      	push	{r7}
 8000858:	b085      	sub	sp, #20
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	4613      	mov	r3, r2
 8000862:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2200      	movs	r2, #0
 8000868:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2200      	movs	r2, #0
 800086e:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2200      	movs	r2, #0
 8000874:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2200      	movs	r2, #0
 800087a:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	88fa      	ldrh	r2, [r7, #6]
 8000880:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	60da      	str	r2, [r3, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	4613      	mov	r3, r2
 80008a0:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 80008a2:	2300      	movs	r3, #0
 80008a4:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f000 f8ea 	bl	8000a80 <Q_NumEmptyBytes>
 80008ac:	4603      	mov	r3, r0
 80008ae:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	db44      	blt.n	8000942 <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008be:	b29a      	uxth	r2, r3
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	4413      	add	r3, r2
 80008c4:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	8afa      	ldrh	r2, [r7, #22]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d20b      	bcs.n	80008e8 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008da:	4413      	add	r3, r2
 80008dc:	88fa      	ldrh	r2, [r7, #6]
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f00b fba0 	bl	800c026 <memcpy>
 80008e6:	e01d      	b.n	8000924 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	881a      	ldrh	r2, [r3, #0]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000902:	4413      	add	r3, r2
 8000904:	8aba      	ldrh	r2, [r7, #20]
 8000906:	68b9      	ldr	r1, [r7, #8]
 8000908:	4618      	mov	r0, r3
 800090a:	f00b fb8c 	bl	800c026 <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	68d8      	ldr	r0, [r3, #12]
 8000912:	8abb      	ldrh	r3, [r7, #20]
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	18d1      	adds	r1, r2, r3
 8000918:	88fa      	ldrh	r2, [r7, #6]
 800091a:	8abb      	ldrh	r3, [r7, #20]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	461a      	mov	r2, r3
 8000920:	f00b fb81 	bl	800c026 <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	881a      	ldrh	r2, [r3, #0]
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	fbb3 f1f2 	udiv	r1, r3, r2
 800092e:	fb01 f202 	mul.w	r2, r1, r2
 8000932:	1a9b      	subs	r3, r3, r2
 8000934:	b29b      	uxth	r3, r3
 8000936:	b21a      	sxth	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	805a      	strh	r2, [r3, #2]
        ret = true;        
 800093c:	2301      	movs	r3, #1
 800093e:	77fb      	strb	r3, [r7, #31]
 8000940:	e00e      	b.n	8000960 <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	88db      	ldrh	r3, [r3, #6]
 8000946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800094a:	4293      	cmp	r3, r2
 800094c:	d004      	beq.n	8000958 <Q_Write+0xc4>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	88db      	ldrh	r3, [r3, #6]
 8000952:	3301      	adds	r3, #1
 8000954:	b29a      	uxth	r2, r3
 8000956:	e001      	b.n	800095c <Q_Write+0xc8>
 8000958:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	80da      	strh	r2, [r3, #6]
    return ret;    
 8000960:	7ffb      	ldrb	r3, [r7, #31]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	4613      	mov	r3, r2
 8000976:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f000 f864 	bl	8000a46 <Q_NumContents>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	4293      	cmp	r3, r2
 8000986:	d848      	bhi.n	8000a1a <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800098e:	b29a      	uxth	r2, r3
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	4413      	add	r3, r2
 8000994:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	8aba      	ldrh	r2, [r7, #20]
 800099c:	429a      	cmp	r2, r3
 800099e:	d20b      	bcs.n	80009b8 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	88fa      	ldrh	r2, [r7, #6]
 80009ae:	4619      	mov	r1, r3
 80009b0:	68b8      	ldr	r0, [r7, #8]
 80009b2:	f00b fb38 	bl	800c026 <memcpy>
 80009b6:	e01d      	b.n	80009f4 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	881a      	ldrh	r2, [r3, #0]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009d2:	4413      	add	r3, r2
 80009d4:	8a7a      	ldrh	r2, [r7, #18]
 80009d6:	4619      	mov	r1, r3
 80009d8:	68b8      	ldr	r0, [r7, #8]
 80009da:	f00b fb24 	bl	800c026 <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 80009de:	8a7b      	ldrh	r3, [r7, #18]
 80009e0:	68ba      	ldr	r2, [r7, #8]
 80009e2:	18d0      	adds	r0, r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	68d9      	ldr	r1, [r3, #12]
 80009e8:	88fa      	ldrh	r2, [r7, #6]
 80009ea:	8a7b      	ldrh	r3, [r7, #18]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	f00b fb19 	bl	800c026 <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009fa:	461a      	mov	r2, r3
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	4413      	add	r3, r2
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	8812      	ldrh	r2, [r2, #0]
 8000a04:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a08:	fb01 f202 	mul.w	r2, r1, r2
 8000a0c:	1a9b      	subs	r3, r3, r2
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000a14:	2301      	movs	r3, #1
 8000a16:	75fb      	strb	r3, [r7, #23]
 8000a18:	e010      	b.n	8000a3c <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	891b      	ldrh	r3, [r3, #8]
 8000a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d004      	beq.n	8000a30 <Q_Read+0xc6>
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	891b      	ldrh	r3, [r3, #8]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	e001      	b.n	8000a34 <Q_Read+0xca>
 8000a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a62:	1a9b      	subs	r3, r3, r2
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	8812      	ldrh	r2, [r2, #0]
 8000a68:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a6c:	fb01 f202 	mul.w	r2, r1, r2
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	b29b      	uxth	r3, r3
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	881c      	ldrh	r4, [r3, #0]
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ffda 	bl	8000a46 <Q_NumContents>
 8000a92:	4603      	mov	r3, r0
 8000a94:	1ae3      	subs	r3, r4, r3
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	b29b      	uxth	r3, r3
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd90      	pop	{r4, r7, pc}

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac6:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ada:	f003 fd61 	bl	80045a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <NMI_Handler+0x4>

08000af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <MemManage_Handler+0x4>

08000b04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b42:	f001 f92f 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <DMA1_Channel1_IRQHandler+0x10>)
 8000b52:	f001 fc5a 	bl	800240a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000ecc 	.word	0x20000ecc

08000b60 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <USB_LP_IRQHandler+0x10>)
 8000b66:	f002 f866 	bl	8002c36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20002620 	.word	0x20002620

08000b74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b78:	2020      	movs	r0, #32
 8000b7a:	f001 ff49 	bl	8002a10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b7e:	2080      	movs	r0, #128	@ 0x80
 8000b80:	f001 ff46 	bl	8002a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b8e:	f004 fcf7 	bl	8005580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000e80 	.word	0x20000e80

08000b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <USART1_IRQHandler+0x3c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d006      	beq.n	8000bbc <USART1_IRQHandler+0x20>
 8000bae:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <USART1_IRQHandler+0x3c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	69db      	ldr	r3, [r3, #28]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d107      	bne.n	8000bcc <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <USART1_IRQHandler+0x3c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <USART1_IRQHandler+0x3c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2202      	movs	r2, #2
 8000bca:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <USART1_IRQHandler+0x3c>)
 8000bce:	f005 fa2d 	bl	800602c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000f2c 	.word	0x20000f2c

08000bdc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000be8:	4818      	ldr	r0, [pc, #96]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bea:	f7ff ff2c 	bl	8000a46 <Q_NumContents>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	81fb      	strh	r3, [r7, #14]
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d016      	beq.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000bf8:	f00a fb64 	bl	800b2c4 <CDC_Transmit_Is_Busy>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d011      	beq.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c04:	881a      	ldrh	r2, [r3, #0]
 8000c06:	89fb      	ldrh	r3, [r7, #14]
 8000c08:	4413      	add	r3, r2
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c0e:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000c10:	89fb      	ldrh	r3, [r7, #14]
 8000c12:	461a      	mov	r2, r3
 8000c14:	490f      	ldr	r1, [pc, #60]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c16:	480d      	ldr	r0, [pc, #52]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c18:	f7ff fea7 	bl	800096a <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000c1c:	89fb      	ldrh	r3, [r7, #14]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c22:	f00a fb17 	bl	800b254 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d109      	bne.n	8000c44 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c38:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c42:	6013      	str	r3, [r2, #0]
  }
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000fc0 	.word	0x20000fc0
 8000c50:	200002a6 	.word	0x200002a6
 8000c54:	200002a8 	.word	0x200002a8
 8000c58:	40012c00 	.word	0x40012c00
 8000c5c:	2000029c 	.word	0x2000029c
 8000c60:	200002a0 	.word	0x200002a0

08000c64 <HAL_UARTEx_RxEventCallback>:

uint8_t IOL_Rx_IDLEFlag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000c70:	887a      	ldrh	r2, [r7, #2]
 8000c72:	4b31      	ldr	r3, [pc, #196]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a2f      	ldr	r2, [pc, #188]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c7a:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2e      	ldr	r2, [pc, #184]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0xd8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d153      	bne.n	8000d2e <HAL_UARTEx_RxEventCallback+0xca>
    // {
    //   IOL_RX_CONTINUE_FLAG = 0;
    //   return;
    // }

    if (uart_rx_IDLE_TotalCnt >= 3)
 8000c86:	4b2c      	ldr	r3, [pc, #176]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d912      	bls.n	8000cb4 <HAL_UARTEx_RxEventCallback+0x50>
    {
      DEBUG_GPIO_TOGGLE;
 8000c8e:	2101      	movs	r1, #1
 8000c90:	482b      	ldr	r0, [pc, #172]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000c92:	f001 fea3 	bl	80029dc <HAL_GPIO_TogglePin>
      if (IOL_Rx_IDLEFlag == 1)
 8000c96:	4b2b      	ldr	r3, [pc, #172]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d103      	bne.n	8000ca6 <HAL_UARTEx_RxEventCallback+0x42>
      {
        IOL_Rx_IDLEFlag = 0;
 8000c9e:	4b29      	ldr	r3, [pc, #164]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e006      	b.n	8000cb4 <HAL_UARTEx_RxEventCallback+0x50>
      }
      else
      {
        IOL_Rx_IDLEFlag = 1;
 8000ca6:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_StartUp_Seq_Page(Size);
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 ff20 	bl	8001af4 <IOL_StartUp_Seq_Page>
      }

    }

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 0201 	bic.w	r2, r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2264      	movs	r2, #100	@ 0x64
 8000cca:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0201 	orr.w	r2, r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	e853 3f00 	ldrex	r3, [r3]
 8000cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	61bb      	str	r3, [r7, #24]
 8000d02:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d04:	6979      	ldr	r1, [r7, #20]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	e841 2300 	strex	r3, r2, [r1]
 8000d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1e6      	bne.n	8000ce2 <HAL_UARTEx_RxEventCallback+0x7e>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000d14:	2264      	movs	r2, #100	@ 0x64
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <HAL_UARTEx_RxEventCallback+0xe8>)
 8000d18:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <HAL_UARTEx_RxEventCallback+0xec>)
 8000d1a:	f006 fe61 	bl	80079e0 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 0204 	bic.w	r2, r2, #4
 8000d2c:	601a      	str	r2, [r3, #0]

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8000d2e:	bf00      	nop
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000a78 	.word	0x20000a78
 8000d3c:	40013800 	.word	0x40013800
 8000d40:	48000400 	.word	0x48000400
 8000d44:	20000294 	.word	0x20000294
 8000d48:	20000ecc 	.word	0x20000ecc
 8000d4c:	20000a7c 	.word	0x20000a7c
 8000d50:	20000f2c 	.word	0x20000f2c

08000d54 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_UART_TxCpltCallback+0x2c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d107      	bne.n	8000d76 <HAL_UART_TxCpltCallback+0x22>
  {
    IOL_DISABLE;
 8000d66:	2200      	movs	r2, #0
 8000d68:	2140      	movs	r1, #64	@ 0x40
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6e:	f001 fe1d 	bl	80029ac <HAL_GPIO_WritePin>
    IOL_PD_Buffer_Clear();
 8000d72:	f000 fc87 	bl	8001684 <IOL_PD_Buffer_Clear>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40013800 	.word	0x40013800

08000d84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d96:	f3af 8000 	nop.w
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
  }

  return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
  return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f00b f8b8 	bl	800bfcc <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20008000 	.word	0x20008000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000298 	.word	0x20000298
 8000e90:	20002900 	.word	0x20002900

08000e94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	@ (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed6:	4b20      	ldr	r3, [pc, #128]	@ (8000f58 <MX_TIM1_Init+0xa0>)
 8000ed8:	4a20      	ldr	r2, [pc, #128]	@ (8000f5c <MX_TIM1_Init+0xa4>)
 8000eda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8000edc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <MX_TIM1_Init+0xa0>)
 8000ede:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ee2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <MX_TIM1_Init+0xa0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <MX_TIM1_Init+0xa0>)
 8000eec:	22a9      	movs	r2, #169	@ 0xa9
 8000eee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef0:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <MX_TIM1_Init+0xa0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <MX_TIM1_Init+0xa0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <MX_TIM1_Init+0xa0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f02:	4815      	ldr	r0, [pc, #84]	@ (8000f58 <MX_TIM1_Init+0xa0>)
 8000f04:	f004 fa7a 	bl	80053fc <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f0e:	f7ff fc9c 	bl	800084a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480e      	ldr	r0, [pc, #56]	@ (8000f58 <MX_TIM1_Init+0xa0>)
 8000f20:	f004 fc7e 	bl	8005820 <HAL_TIM_ConfigClockSource>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f2a:	f7ff fc8e 	bl	800084a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <MX_TIM1_Init+0xa0>)
 8000f40:	f004 fec8 	bl	8005cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f4a:	f7ff fc7e 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000e80 	.word	0x20000e80
 8000f5c:	40012c00 	.word	0x40012c00

08000f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x44>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d113      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f76:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2019      	movs	r0, #25
 8000f90:	f001 f823 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f94:	2019      	movs	r0, #25
 8000f96:	f001 f83a 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	40021000 	.word	0x40021000

08000fac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000fb2:	4a24      	ldr	r2, [pc, #144]	@ (8001044 <MX_USART1_UART_Init+0x98>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000fb6:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000fb8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000fbe:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000fc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fc4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fec:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff8:	4811      	ldr	r0, [pc, #68]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 8000ffa:	f004 ff33 	bl	8005e64 <HAL_UART_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001004:	f7ff fc21 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001008:	2100      	movs	r1, #0
 800100a:	480d      	ldr	r0, [pc, #52]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 800100c:	f006 fc6c 	bl	80078e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001016:	f7ff fc18 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101a:	2100      	movs	r1, #0
 800101c:	4808      	ldr	r0, [pc, #32]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 800101e:	f006 fca1 	bl	8007964 <HAL_UARTEx_SetRxFifoThreshold>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001028:	f7ff fc0f 	bl	800084a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <MX_USART1_UART_Init+0x94>)
 800102e:	f006 fc22 	bl	8007876 <HAL_UARTEx_DisableFifoMode>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001038:	f7ff fc07 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000f2c 	.word	0x20000f2c
 8001044:	40013800 	.word	0x40013800

08001048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b09a      	sub	sp, #104	@ 0x68
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2244      	movs	r2, #68	@ 0x44
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f00a ff61 	bl	800bf30 <memset>
  if(uartHandle->Instance==USART1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a38      	ldr	r2, [pc, #224]	@ (8001154 <HAL_UART_MspInit+0x10c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d169      	bne.n	800114c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4618      	mov	r0, r3
 8001086:	f003 ffc9 	bl	800501c <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001090:	f7ff fbdb 	bl	800084a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001094:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <HAL_UART_MspInit+0x110>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001098:	4a2f      	ldr	r2, [pc, #188]	@ (8001158 <HAL_UART_MspInit+0x110>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800109e:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001158 <HAL_UART_MspInit+0x110>)
 80010a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <HAL_UART_MspInit+0x110>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b0:	4a29      	ldr	r2, [pc, #164]	@ (8001158 <HAL_UART_MspInit+0x110>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b8:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <HAL_UART_MspInit+0x110>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d6:	2307      	movs	r3, #7
 80010d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e4:	f001 fae0 	bl	80026a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <HAL_UART_MspInit+0x114>)
 80010ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001160 <HAL_UART_MspInit+0x118>)
 80010ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_UART_MspInit+0x114>)
 80010f0:	2218      	movs	r2, #24
 80010f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f4:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_UART_MspInit+0x114>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <HAL_UART_MspInit+0x114>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_UART_MspInit+0x114>)
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_UART_MspInit+0x114>)
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <HAL_UART_MspInit+0x114>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_UART_MspInit+0x114>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001118:	4b10      	ldr	r3, [pc, #64]	@ (800115c <HAL_UART_MspInit+0x114>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800111e:	480f      	ldr	r0, [pc, #60]	@ (800115c <HAL_UART_MspInit+0x114>)
 8001120:	f000 ff90 	bl	8002044 <HAL_DMA_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800112a:	f7ff fb8e 	bl	800084a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <HAL_UART_MspInit+0x114>)
 8001132:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001136:	4a09      	ldr	r2, [pc, #36]	@ (800115c <HAL_UART_MspInit+0x114>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2025      	movs	r0, #37	@ 0x25
 8001142:	f000 ff4a 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001146:	2025      	movs	r0, #37	@ 0x25
 8001148:	f000 ff61 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800114c:	bf00      	nop
 800114e:	3768      	adds	r7, #104	@ 0x68
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40013800 	.word	0x40013800
 8001158:	40021000 	.word	0x40021000
 800115c:	20000ecc 	.word	0x20000ecc
 8001160:	40020008 	.word	0x40020008

08001164 <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <_write+0x24>)
 800117a:	f7ff fb8b 	bl	8000894 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 800117e:	687b      	ldr	r3, [r7, #4]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000fc0 	.word	0x20000fc0

0800118c <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <User_Toggle_Led+0x24>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001198:	d307      	bcc.n	80011aa <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 800119a:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <User_Toggle_Led+0x24>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 80011a0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80011a4:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <User_Toggle_Led+0x28>)
 80011a6:	f001 fc19 	bl	80029dc <HAL_GPIO_TogglePin>
    }
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000029c 	.word	0x2000029c
 80011b4:	48000800 	.word	0x48000800

080011b8 <ProcessDataIn_IncreaseCntValue>:

void ProcessDataIn_IncreaseCntValue (void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    if ( TIM1_CNT_2 >= 1000)
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <ProcessDataIn_IncreaseCntValue+0x30>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011c4:	d30e      	bcc.n	80011e4 <ProcessDataIn_IncreaseCntValue+0x2c>
    {
        TIM1_CNT_2 = 0;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <ProcessDataIn_IncreaseCntValue+0x30>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
        ProcessDataIn_cnt++;
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <ProcessDataIn_IncreaseCntValue+0x34>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <ProcessDataIn_IncreaseCntValue+0x34>)
 80011d6:	701a      	strb	r2, [r3, #0]

        printf("Master to Device Temp Value :   %d\r\n", Test_M2D_TempValue);
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <ProcessDataIn_IncreaseCntValue+0x38>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <ProcessDataIn_IncreaseCntValue+0x3c>)
 80011e0:	f00a fd5e 	bl	800bca0 <iprintf>
    }
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200002a0 	.word	0x200002a0
 80011ec:	200002a4 	.word	0x200002a4
 80011f0:	20000b02 	.word	0x20000b02
 80011f4:	0800ca6c 	.word	0x0800ca6c

080011f8 <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <BootMessagePrint+0x38>)
 80011fe:	f00a fdb7 	bl	800bd70 <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 8001202:	490c      	ldr	r1, [pc, #48]	@ (8001234 <BootMessagePrint+0x3c>)
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <BootMessagePrint+0x40>)
 8001206:	f00a fd4b 	bl	800bca0 <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 800120a:	490c      	ldr	r1, [pc, #48]	@ (800123c <BootMessagePrint+0x44>)
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <BootMessagePrint+0x48>)
 800120e:	f00a fd47 	bl	800bca0 <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 8001212:	490c      	ldr	r1, [pc, #48]	@ (8001244 <BootMessagePrint+0x4c>)
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <BootMessagePrint+0x50>)
 8001216:	f00a fd43 	bl	800bca0 <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 800121a:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <BootMessagePrint+0x54>)
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <BootMessagePrint+0x58>)
 800121e:	480d      	ldr	r0, [pc, #52]	@ (8001254 <BootMessagePrint+0x5c>)
 8001220:	f00a fd3e 	bl	800bca0 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <BootMessagePrint+0x38>)
 8001226:	f00a fda3 	bl	800bd70 <puts>
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	0800ca94 	.word	0x0800ca94
 8001234:	0800cadc 	.word	0x0800cadc
 8001238:	0800caec 	.word	0x0800caec
 800123c:	0800cb08 	.word	0x0800cb08
 8001240:	0800cb10 	.word	0x0800cb10
 8001244:	0800cb2c 	.word	0x0800cb2c
 8001248:	0800cb40 	.word	0x0800cb40
 800124c:	0800cb5c 	.word	0x0800cb5c
 8001250:	0800cb68 	.word	0x0800cb68
 8001254:	0800cb74 	.word	0x0800cb74

08001258 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 800125c:	4819      	ldr	r0, [pc, #100]	@ (80012c4 <GetClockSourcePrint+0x6c>)
 800125e:	f00a fd87 	bl	800bd70 <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 8001262:	f003 fdfb 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 8001266:	4603      	mov	r3, r0
 8001268:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <GetClockSourcePrint+0x70>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	0c9b      	lsrs	r3, r3, #18
 8001270:	4619      	mov	r1, r3
 8001272:	4816      	ldr	r0, [pc, #88]	@ (80012cc <GetClockSourcePrint+0x74>)
 8001274:	f00a fd14 	bl	800bca0 <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8001278:	f003 fe52 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 800127c:	4603      	mov	r3, r0
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <GetClockSourcePrint+0x70>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0c9b      	lsrs	r3, r3, #18
 8001286:	4619      	mov	r1, r3
 8001288:	4811      	ldr	r0, [pc, #68]	@ (80012d0 <GetClockSourcePrint+0x78>)
 800128a:	f00a fd09 	bl	800bca0 <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 800128e:	f003 fe53 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 8001292:	4603      	mov	r3, r0
 8001294:	4a0c      	ldr	r2, [pc, #48]	@ (80012c8 <GetClockSourcePrint+0x70>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	0c9b      	lsrs	r3, r3, #18
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <GetClockSourcePrint+0x7c>)
 80012a0:	f00a fcfe 	bl	800bca0 <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 80012a4:	f003 fe5e 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a07      	ldr	r2, [pc, #28]	@ (80012c8 <GetClockSourcePrint+0x70>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	0c9b      	lsrs	r3, r3, #18
 80012b2:	4619      	mov	r1, r3
 80012b4:	4808      	ldr	r0, [pc, #32]	@ (80012d8 <GetClockSourcePrint+0x80>)
 80012b6:	f00a fcf3 	bl	800bca0 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 80012ba:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <GetClockSourcePrint+0x6c>)
 80012bc:	f00a fd58 	bl	800bd70 <puts>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0800ca94 	.word	0x0800ca94
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	0800cb94 	.word	0x0800cb94
 80012d0:	0800cbc4 	.word	0x0800cbc4
 80012d4:	0800cbf4 	.word	0x0800cbf4
 80012d8:	0800cc24 	.word	0x0800cc24

080012dc <Decode_CKS_GetChecksum>:
    //     return 0;
    // }
}

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80012e8:	2352      	movs	r3, #82	@ 0x52
 80012ea:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	757b      	strb	r3, [r7, #21]

    // ck8 ^= *pData++; // MC Check 

    // ck8 ^= *pData++ & 0xC0; // CKT 6b clear. CKT Check
    // for (uint8_t i = 0; i < checksumsize; i++)
    for (uint8_t i = 0; i < checksumsize; i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	75bb      	strb	r3, [r7, #22]
 80012f8:	e009      	b.n	800130e <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	781a      	ldrb	r2, [r3, #0]
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	4053      	eors	r3, r2
 8001306:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	3301      	adds	r3, #1
 800130c:	75bb      	strb	r3, [r7, #22]
 800130e:	7dba      	ldrb	r2, [r7, #22]
 8001310:	7d7b      	ldrb	r3, [r7, #21]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3f1      	bcc.n	80012fa <Decode_CKS_GetChecksum+0x1e>
    // {
    //         ck8 ^= *pData++;
    // }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	09db      	lsrs	r3, r3, #7
 800131a:	b2da      	uxtb	r2, r3
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4053      	eors	r3, r2
 8001324:	b2da      	uxtb	r2, r3
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4053      	eors	r3, r2
 800132e:	b2da      	uxtb	r2, r3
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	085b      	lsrs	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4053      	eors	r3, r2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	099b      	lsrs	r3, r3, #6
 8001344:	b2da      	uxtb	r2, r3
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4053      	eors	r3, r2
 800134e:	b2da      	uxtb	r2, r3
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4053      	eors	r3, r2
 8001358:	b2da      	uxtb	r2, r3
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	4053      	eors	r3, r2
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	09db      	lsrs	r3, r3, #7
 800136a:	b2da      	uxtb	r2, r3
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	099b      	lsrs	r3, r3, #6
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4053      	eors	r3, r2
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	b2da      	uxtb	r2, r3
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	b2db      	uxtb	r3, r3
 8001388:	4053      	eors	r3, r2
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 8001392:	7dfb      	ldrb	r3, [r7, #23]
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	b2da      	uxtb	r2, r3
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4053      	eors	r3, r2
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	4053      	eors	r3, r2
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 80013ba:	7d3b      	ldrb	r3, [r7, #20]
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 80013c0:	7cfb      	ldrb	r3, [r7, #19]
 80013c2:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 80013ca:	7cbb      	ldrb	r3, [r7, #18]
 80013cc:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 80013d4:	7c7b      	ldrb	r3, [r7, #17]
 80013d6:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80013de:	7c3b      	ldrb	r3, [r7, #16]
 80013e0:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80013f0:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <IOL_PreOP_ReadWriteCheck>:
    DirectParameterPage1.Page_1_15_SystemCommand = 0x00;
}

// PreOP Mode R/W 체크
static uint8_t IOL_PreOP_ReadWriteCheck (void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
    // R/W   Read 체크
    if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <IOL_PreOP_ReadWriteCheck+0x30>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fc05 	bl	8001c18 <Decode_MC_ReadWrite>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <IOL_PreOP_ReadWriteCheck+0x18>
    {
        return IOL_RW_Read;
 8001414:	2301      	movs	r3, #1
 8001416:	e009      	b.n	800142c <IOL_PreOP_ReadWriteCheck+0x2c>
    }
    // R/W   Write 체크
    else if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Write)
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <IOL_PreOP_ReadWriteCheck+0x30>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fbfb 	bl	8001c18 <Decode_MC_ReadWrite>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <IOL_PreOP_ReadWriteCheck+0x2c>
    {
        return IOL_RW_Write;
 8001428:	2300      	movs	r3, #0
 800142a:	e7ff      	b.n	800142c <IOL_PreOP_ReadWriteCheck+0x2c>
    }
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000a7c 	.word	0x20000a7c

08001434 <PreOP_CKS_GetChecksum>:

//preOP 모드 Event 비트 포함 CKS 생성
static uint8_t PreOP_CKS_GetChecksum (const uint8_t * pData, uint8_t length, uint8_t eventflag)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
 8001440:	4613      	mov	r3, r2
 8001442:	70bb      	strb	r3, [r7, #2]
    uint8_t ck8 = 0x52;
 8001444:	2352      	movs	r3, #82	@ 0x52
 8001446:	77fb      	strb	r3, [r7, #31]
    uint8_t checksumsize = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	773b      	strb	r3, [r7, #28]
    uint8_t eventbitset = 0x80;
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	76fb      	strb	r3, [r7, #27]

    checksumsize = length;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	773b      	strb	r3, [r7, #28]

    if (eventflag == 0)
 8001454:	78bb      	ldrb	r3, [r7, #2]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8081 	bne.w	800155e <PreOP_CKS_GetChecksum+0x12a>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 800145c:	2300      	movs	r3, #0
 800145e:	77bb      	strb	r3, [r7, #30]
 8001460:	e009      	b.n	8001476 <PreOP_CKS_GetChecksum+0x42>
        {
            ck8 ^= *pData++;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	7ffb      	ldrb	r3, [r7, #31]
 800146c:	4053      	eors	r3, r2
 800146e:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 8001470:	7fbb      	ldrb	r3, [r7, #30]
 8001472:	3301      	adds	r3, #1
 8001474:	77bb      	strb	r3, [r7, #30]
 8001476:	7fba      	ldrb	r2, [r7, #30]
 8001478:	7f3b      	ldrb	r3, [r7, #28]
 800147a:	429a      	cmp	r2, r3
 800147c:	d3f1      	bcc.n	8001462 <PreOP_CKS_GetChecksum+0x2e>
        }
        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 800147e:	7ffb      	ldrb	r3, [r7, #31]
 8001480:	09db      	lsrs	r3, r3, #7
 8001482:	b2da      	uxtb	r2, r3
 8001484:	7ffb      	ldrb	r3, [r7, #31]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4053      	eors	r3, r2
 800148c:	b2da      	uxtb	r2, r3
 800148e:	7ffb      	ldrb	r3, [r7, #31]
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4053      	eors	r3, r2
 8001496:	b2da      	uxtb	r2, r3
 8001498:	7ffb      	ldrb	r3, [r7, #31]
 800149a:	085b      	lsrs	r3, r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4053      	eors	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	74fb      	strb	r3, [r7, #19]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 80014a8:	7ffb      	ldrb	r3, [r7, #31]
 80014aa:	099b      	lsrs	r3, r3, #6
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	7ffb      	ldrb	r3, [r7, #31]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4053      	eors	r3, r2
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	7ffb      	ldrb	r3, [r7, #31]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4053      	eors	r3, r2
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	7ffb      	ldrb	r3, [r7, #31]
 80014c4:	4053      	eors	r3, r2
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	74bb      	strb	r3, [r7, #18]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	09db      	lsrs	r3, r3, #7
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	7ffb      	ldrb	r3, [r7, #31]
 80014d6:	099b      	lsrs	r3, r3, #6
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4053      	eors	r3, r2
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	747b      	strb	r3, [r7, #17]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 80014e4:	7ffb      	ldrb	r3, [r7, #31]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4053      	eors	r3, r2
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	743b      	strb	r3, [r7, #16]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80014fa:	7ffb      	ldrb	r3, [r7, #31]
 80014fc:	08db      	lsrs	r3, r3, #3
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	7ffb      	ldrb	r3, [r7, #31]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4053      	eors	r3, r2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8001510:	7ffb      	ldrb	r3, [r7, #31]
 8001512:	085b      	lsrs	r3, r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	7ffb      	ldrb	r3, [r7, #31]
 8001518:	4053      	eors	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	73bb      	strb	r3, [r7, #14]
        uint8_t ck6 =   bit5 << 5 |
 8001522:	7cfb      	ldrb	r3, [r7, #19]
 8001524:	015b      	lsls	r3, r3, #5
 8001526:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 8001528:	7cbb      	ldrb	r3, [r7, #18]
 800152a:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 800152c:	b25b      	sxtb	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 8001532:	7c7b      	ldrb	r3, [r7, #17]
 8001534:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 8001536:	b25b      	sxtb	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 800153c:	7c3b      	ldrb	r3, [r7, #16]
 800153e:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 8001540:	b25b      	sxtb	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 800154a:	b25b      	sxtb	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8001550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001554:	4313      	orrs	r3, r2
 8001556:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 8001558:	737b      	strb	r3, [r7, #13]
                        bit0;
        
        return ck6;
 800155a:	7b7b      	ldrb	r3, [r7, #13]
 800155c:	e08b      	b.n	8001676 <PreOP_CKS_GetChecksum+0x242>
    }
    else if (eventflag == 1)
 800155e:	78bb      	ldrb	r3, [r7, #2]
 8001560:	2b01      	cmp	r3, #1
 8001562:	f040 8088 	bne.w	8001676 <PreOP_CKS_GetChecksum+0x242>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	777b      	strb	r3, [r7, #29]
 800156a:	e009      	b.n	8001580 <PreOP_CKS_GetChecksum+0x14c>
        {
            ck8 ^= *pData++;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	7ffb      	ldrb	r3, [r7, #31]
 8001576:	4053      	eors	r3, r2
 8001578:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 800157a:	7f7b      	ldrb	r3, [r7, #29]
 800157c:	3301      	adds	r3, #1
 800157e:	777b      	strb	r3, [r7, #29]
 8001580:	7f7a      	ldrb	r2, [r7, #29]
 8001582:	7f3b      	ldrb	r3, [r7, #28]
 8001584:	429a      	cmp	r2, r3
 8001586:	d3f1      	bcc.n	800156c <PreOP_CKS_GetChecksum+0x138>
        }

        ck8 ^= eventbitset;
 8001588:	7ffa      	ldrb	r2, [r7, #31]
 800158a:	7efb      	ldrb	r3, [r7, #27]
 800158c:	4053      	eors	r3, r2
 800158e:	77fb      	strb	r3, [r7, #31]

        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8001590:	7ffb      	ldrb	r3, [r7, #31]
 8001592:	09db      	lsrs	r3, r3, #7
 8001594:	b2da      	uxtb	r2, r3
 8001596:	7ffb      	ldrb	r3, [r7, #31]
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	b2db      	uxtb	r3, r3
 800159c:	4053      	eors	r3, r2
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	7ffb      	ldrb	r3, [r7, #31]
 80015a2:	08db      	lsrs	r3, r3, #3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4053      	eors	r3, r2
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4053      	eors	r3, r2
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	76bb      	strb	r3, [r7, #26]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 80015ba:	7ffb      	ldrb	r3, [r7, #31]
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	7ffb      	ldrb	r3, [r7, #31]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4053      	eors	r3, r2
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	7ffb      	ldrb	r3, [r7, #31]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4053      	eors	r3, r2
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	7ffb      	ldrb	r3, [r7, #31]
 80015d6:	4053      	eors	r3, r2
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	767b      	strb	r3, [r7, #25]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 80015e0:	7ffb      	ldrb	r3, [r7, #31]
 80015e2:	09db      	lsrs	r3, r3, #7
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	7ffb      	ldrb	r3, [r7, #31]
 80015e8:	099b      	lsrs	r3, r3, #6
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4053      	eors	r3, r2
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	763b      	strb	r3, [r7, #24]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
 80015f8:	095b      	lsrs	r3, r3, #5
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	7ffb      	ldrb	r3, [r7, #31]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4053      	eors	r3, r2
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	75fb      	strb	r3, [r7, #23]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	b2da      	uxtb	r2, r3
 8001612:	7ffb      	ldrb	r3, [r7, #31]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4053      	eors	r3, r2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	75bb      	strb	r3, [r7, #22]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	b2da      	uxtb	r2, r3
 8001628:	7ffb      	ldrb	r3, [r7, #31]
 800162a:	4053      	eors	r3, r2
 800162c:	b2db      	uxtb	r3, r3
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	757b      	strb	r3, [r7, #21]
        uint8_t ck6 =   bit5 << 5 |
 8001634:	7ebb      	ldrb	r3, [r7, #26]
 8001636:	015b      	lsls	r3, r3, #5
 8001638:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 800163a:	7e7b      	ldrb	r3, [r7, #25]
 800163c:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 800163e:	b25b      	sxtb	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 8001644:	7e3b      	ldrb	r3, [r7, #24]
 8001646:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 8001648:	b25b      	sxtb	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 8001652:	b25b      	sxtb	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8001658:	7dbb      	ldrb	r3, [r7, #22]
 800165a:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 800165c:	b25b      	sxtb	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8001662:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001666:	4313      	orrs	r3, r2
 8001668:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 800166a:	753b      	strb	r3, [r7, #20]
                        bit0;
        
        return eventbitset | ck6;
 800166c:	7efa      	ldrb	r2, [r7, #27]
 800166e:	7d3b      	ldrb	r3, [r7, #20]
 8001670:	4313      	orrs	r3, r2
 8001672:	b2db      	uxtb	r3, r3
 8001674:	e7ff      	b.n	8001676 <PreOP_CKS_GetChecksum+0x242>
    }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <IOL_PD_Buffer_Clear>:
{
    return ;
}

void IOL_PD_Buffer_Clear (void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    memset(device_ProcessDataIn_arr, 0, sizeof(device_ProcessDataIn_arr));
 8001688:	2207      	movs	r2, #7
 800168a:	2100      	movs	r1, #0
 800168c:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <IOL_PD_Buffer_Clear+0x1c>)
 800168e:	f00a fc4f 	bl	800bf30 <memset>
    memset(device_ProcessDataOut_arr, 0, sizeof(device_ProcessDataOut_arr));
 8001692:	2205      	movs	r2, #5
 8001694:	2100      	movs	r1, #0
 8001696:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <IOL_PD_Buffer_Clear+0x20>)
 8001698:	f00a fc4a 	bl	800bf30 <memset>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000af0 	.word	0x20000af0
 80016a4:	20000af8 	.word	0x20000af8

080016a8 <IOL_ConnectToIFM_ReadDP>:

void IOL_ConnectToIFM_ReadDP (void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	71bb      	strb	r3, [r7, #6]
    uint8_t setpage1first[2] = {0x00, 0x22};
 80016b2:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80016b6:	80bb      	strh	r3, [r7, #4]
    // uint8_t Pagevalue[16] = { 0 };

    for (i = 2; i < 16; i++)
 80016b8:	2302      	movs	r3, #2
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	e01a      	b.n	80016f4 <IOL_ConnectToIFM_ReadDP+0x4c>
    {
        for(j = 0; j < 2; j++)
 80016be:	2300      	movs	r3, #0
 80016c0:	71bb      	strb	r3, [r7, #6]
 80016c2:	e00a      	b.n	80016da <IOL_ConnectToIFM_ReadDP+0x32>
        {
            IOL_ISDUPage_value[j] = setpage1first[j];
 80016c4:	79ba      	ldrb	r2, [r7, #6]
 80016c6:	79bb      	ldrb	r3, [r7, #6]
 80016c8:	3208      	adds	r2, #8
 80016ca:	443a      	add	r2, r7
 80016cc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80016d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001708 <IOL_ConnectToIFM_ReadDP+0x60>)
 80016d2:	54d1      	strb	r1, [r2, r3]
        for(j = 0; j < 2; j++)
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	3301      	adds	r3, #1
 80016d8:	71bb      	strb	r3, [r7, #6]
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d9f1      	bls.n	80016c4 <IOL_ConnectToIFM_ReadDP+0x1c>
        }
        IOL_ISDUPage_value[i] = IOL_Page1_SeqValue[i - 1];
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	1e5a      	subs	r2, r3, #1
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	4909      	ldr	r1, [pc, #36]	@ (800170c <IOL_ConnectToIFM_ReadDP+0x64>)
 80016e8:	5c89      	ldrb	r1, [r1, r2]
 80016ea:	4a07      	ldr	r2, [pc, #28]	@ (8001708 <IOL_ConnectToIFM_ReadDP+0x60>)
 80016ec:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < 16; i++)
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	3301      	adds	r3, #1
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	d9e1      	bls.n	80016be <IOL_ConnectToIFM_ReadDP+0x16>
    }
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	20000ae0 	.word	0x20000ae0
 800170c:	20000004 	.word	0x20000004

08001710 <IOL_State_OP>:

// if (stateIOLseq == IOL_OP)
void IOL_State_OP (void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	71fb      	strb	r3, [r7, #7]
    uint8_t IOL_Commchannel_value = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	71bb      	strb	r3, [r7, #6]
    // static uint8_t device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH];

    // static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 
    // uint8_t Page_Write_ChecksumValue[0] = {0};

    IOL_Commchannel_value = Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]);
 800171e:	4b93      	ldr	r3, [pc, #588]	@ (800196c <IOL_State_OP+0x25c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f000 fa96 	bl	8001c54 <Print_MC_CommunicationChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	71bb      	strb	r3, [r7, #6]
    // uint8_t Page_Write_ChecksumValue[1] = {0};

    if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Read)
 800172c:	f7ff fe68 	bl	8001400 <IOL_PreOP_ReadWriteCheck>
 8001730:	4603      	mov	r3, r0
 8001732:	2b01      	cmp	r3, #1
 8001734:	f040 80aa 	bne.w	800188c <IOL_State_OP+0x17c>
    {
        if (IOL_Commchannel_value == IOL_Channel_ISDU)
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d169      	bne.n	8001812 <IOL_State_OP+0x102>
        {
            if (IOL_OP_PD_Req_ProductName_Chkpdu == 1) // Product Name 요청이 있으면.
 800173e:	4b8c      	ldr	r3, [pc, #560]	@ (8001970 <IOL_State_OP+0x260>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d129      	bne.n	800179a <IOL_State_OP+0x8a>
            {
                // IOL_OP_PD_Req_ProductName = 0;
                device_ProcessDataIn_arr[0] = IOL_OP_ProductName[IOL_OP_OD_Res_cnt][0];
 8001746:	4b8b      	ldr	r3, [pc, #556]	@ (8001974 <IOL_State_OP+0x264>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b8a      	ldr	r3, [pc, #552]	@ (8001978 <IOL_State_OP+0x268>)
 800174e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001752:	4b8a      	ldr	r3, [pc, #552]	@ (800197c <IOL_State_OP+0x26c>)
 8001754:	701a      	strb	r2, [r3, #0]
                device_ProcessDataIn_arr[1] = IOL_OP_ProductName[IOL_OP_OD_Res_cnt][1];
 8001756:	4b87      	ldr	r3, [pc, #540]	@ (8001974 <IOL_State_OP+0x264>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4a87      	ldr	r2, [pc, #540]	@ (8001978 <IOL_State_OP+0x268>)
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	785a      	ldrb	r2, [r3, #1]
 8001762:	4b86      	ldr	r3, [pc, #536]	@ (800197c <IOL_State_OP+0x26c>)
 8001764:	705a      	strb	r2, [r3, #1]
                IOL_OP_OD_Res_cnt++;
 8001766:	4b83      	ldr	r3, [pc, #524]	@ (8001974 <IOL_State_OP+0x264>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b81      	ldr	r3, [pc, #516]	@ (8001974 <IOL_State_OP+0x264>)
 8001770:	701a      	strb	r2, [r3, #0]

                if (IOL_OP_OD_Res_cnt >= 13)
 8001772:	4b80      	ldr	r3, [pc, #512]	@ (8001974 <IOL_State_OP+0x264>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d905      	bls.n	8001786 <IOL_State_OP+0x76>
                {
                    IOL_OP_PD_Req_ProductName_Chkpdu = 0;
 800177a:	4b7d      	ldr	r3, [pc, #500]	@ (8001970 <IOL_State_OP+0x260>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
                    IOL_OP_OD_Res_cnt = 0;
 8001780:	4b7c      	ldr	r3, [pc, #496]	@ (8001974 <IOL_State_OP+0x264>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
                }

                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2106      	movs	r1, #6
 800178a:	487c      	ldr	r0, [pc, #496]	@ (800197c <IOL_State_OP+0x26c>)
 800178c:	f7ff fe52 	bl	8001434 <PreOP_CKS_GetChecksum>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	4b79      	ldr	r3, [pc, #484]	@ (800197c <IOL_State_OP+0x26c>)
 8001796:	719a      	strb	r2, [r3, #6]
 8001798:	e067      	b.n	800186a <IOL_State_OP+0x15a>
            }
            else if (IOL_OP_PD_Req_SerialNumber_Chkpdu == 1) // Serial Number 요청이 있으면.
 800179a:	4b79      	ldr	r3, [pc, #484]	@ (8001980 <IOL_State_OP+0x270>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d129      	bne.n	80017f6 <IOL_State_OP+0xe6>
            {
                // IOL_OP_PD_Req_ProductName = 0;
                device_ProcessDataIn_arr[0] = IOL_OP_SerialNumber[IOL_OP_OD_Res_cnt][0];
 80017a2:	4b74      	ldr	r3, [pc, #464]	@ (8001974 <IOL_State_OP+0x264>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b76      	ldr	r3, [pc, #472]	@ (8001984 <IOL_State_OP+0x274>)
 80017aa:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80017ae:	4b73      	ldr	r3, [pc, #460]	@ (800197c <IOL_State_OP+0x26c>)
 80017b0:	701a      	strb	r2, [r3, #0]
                device_ProcessDataIn_arr[1] = IOL_OP_SerialNumber[IOL_OP_OD_Res_cnt][1];
 80017b2:	4b70      	ldr	r3, [pc, #448]	@ (8001974 <IOL_State_OP+0x264>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4a73      	ldr	r2, [pc, #460]	@ (8001984 <IOL_State_OP+0x274>)
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	785a      	ldrb	r2, [r3, #1]
 80017be:	4b6f      	ldr	r3, [pc, #444]	@ (800197c <IOL_State_OP+0x26c>)
 80017c0:	705a      	strb	r2, [r3, #1]
                IOL_OP_OD_Res_cnt++;
 80017c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001974 <IOL_State_OP+0x264>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001974 <IOL_State_OP+0x264>)
 80017cc:	701a      	strb	r2, [r3, #0]

                if (IOL_OP_OD_Res_cnt >= 10)
 80017ce:	4b69      	ldr	r3, [pc, #420]	@ (8001974 <IOL_State_OP+0x264>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b09      	cmp	r3, #9
 80017d4:	d905      	bls.n	80017e2 <IOL_State_OP+0xd2>
                {
                    IOL_OP_PD_Req_SerialNumber_Chkpdu = 0;
 80017d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001980 <IOL_State_OP+0x270>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
                    IOL_OP_OD_Res_cnt = 0;
 80017dc:	4b65      	ldr	r3, [pc, #404]	@ (8001974 <IOL_State_OP+0x264>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
                }

                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);    
 80017e2:	2200      	movs	r2, #0
 80017e4:	2106      	movs	r1, #6
 80017e6:	4865      	ldr	r0, [pc, #404]	@ (800197c <IOL_State_OP+0x26c>)
 80017e8:	f7ff fe24 	bl	8001434 <PreOP_CKS_GetChecksum>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b62      	ldr	r3, [pc, #392]	@ (800197c <IOL_State_OP+0x26c>)
 80017f2:	719a      	strb	r2, [r3, #6]
 80017f4:	e039      	b.n	800186a <IOL_State_OP+0x15a>
            }
            else
            {
                // device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt++; // Test cnt Value 
                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
 80017f6:	4b64      	ldr	r3, [pc, #400]	@ (8001988 <IOL_State_OP+0x278>)
 80017f8:	781a      	ldrb	r2, [r3, #0]
 80017fa:	4b60      	ldr	r3, [pc, #384]	@ (800197c <IOL_State_OP+0x26c>)
 80017fc:	715a      	strb	r2, [r3, #5]
                device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2106      	movs	r1, #6
 8001802:	485e      	ldr	r0, [pc, #376]	@ (800197c <IOL_State_OP+0x26c>)
 8001804:	f7ff fe16 	bl	8001434 <PreOP_CKS_GetChecksum>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	4b5b      	ldr	r3, [pc, #364]	@ (800197c <IOL_State_OP+0x26c>)
 800180e:	719a      	strb	r2, [r3, #6]
 8001810:	e02b      	b.n	800186a <IOL_State_OP+0x15a>
            }
        }
        else if (IOL_Commchannel_value == IOL_Channel_Page)
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d128      	bne.n	800186a <IOL_State_OP+0x15a>
        {
            IOL_ConnectToIFM_ReadDP();
 8001818:	f7ff ff46 	bl	80016a8 <IOL_ConnectToIFM_ReadDP>

            device_ProcessDataIn_arr[0] = IOL_ISDUPage_value[IOL_OP_OD_Res_cnt];
 800181c:	4b55      	ldr	r3, [pc, #340]	@ (8001974 <IOL_State_OP+0x264>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b5a      	ldr	r3, [pc, #360]	@ (800198c <IOL_State_OP+0x27c>)
 8001824:	5c9a      	ldrb	r2, [r3, r2]
 8001826:	4b55      	ldr	r3, [pc, #340]	@ (800197c <IOL_State_OP+0x26c>)
 8001828:	701a      	strb	r2, [r3, #0]
            device_ProcessDataIn_arr[1] = IOL_ISDUPage_value[IOL_OP_OD_Res_cnt + 1];
 800182a:	4b52      	ldr	r3, [pc, #328]	@ (8001974 <IOL_State_OP+0x264>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	4a56      	ldr	r2, [pc, #344]	@ (800198c <IOL_State_OP+0x27c>)
 8001832:	5cd2      	ldrb	r2, [r2, r3]
 8001834:	4b51      	ldr	r3, [pc, #324]	@ (800197c <IOL_State_OP+0x26c>)
 8001836:	705a      	strb	r2, [r3, #1]
            IOL_OP_OD_Res_cnt++;
 8001838:	4b4e      	ldr	r3, [pc, #312]	@ (8001974 <IOL_State_OP+0x264>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <IOL_State_OP+0x264>)
 8001842:	701a      	strb	r2, [r3, #0]

            if (IOL_OP_OD_Res_cnt >= 16)
 8001844:	4b4b      	ldr	r3, [pc, #300]	@ (8001974 <IOL_State_OP+0x264>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d905      	bls.n	8001858 <IOL_State_OP+0x148>
            {
                IOL_OP_PD_Req_SerialNumber_Chkpdu = 0;
 800184c:	4b4c      	ldr	r3, [pc, #304]	@ (8001980 <IOL_State_OP+0x270>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
                IOL_OP_OD_Res_cnt = 0;
 8001852:	4b48      	ldr	r3, [pc, #288]	@ (8001974 <IOL_State_OP+0x264>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
            }

            device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataIn_arr[0], (OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2106      	movs	r1, #6
 800185c:	4847      	ldr	r0, [pc, #284]	@ (800197c <IOL_State_OP+0x26c>)
 800185e:	f7ff fde9 	bl	8001434 <PreOP_CKS_GetChecksum>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b45      	ldr	r3, [pc, #276]	@ (800197c <IOL_State_OP+0x26c>)
 8001868:	719a      	strb	r2, [r3, #6]
        }

        IOL_ENABLE;
 800186a:	2201      	movs	r2, #1
 800186c:	2140      	movs	r1, #64	@ 0x40
 800186e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001872:	f001 f89b 	bl	80029ac <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataIn_arr, OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 8001876:	2207      	movs	r2, #7
 8001878:	4940      	ldr	r1, [pc, #256]	@ (800197c <IOL_State_OP+0x26c>)
 800187a:	4845      	ldr	r0, [pc, #276]	@ (8001990 <IOL_State_OP+0x280>)
 800187c:	f004 fb42 	bl	8005f04 <HAL_UART_Transmit_IT>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d06e      	beq.n	8001964 <IOL_State_OP+0x254>
        {
            Error_Handler();
 8001886:	f7fe ffe0 	bl	800084a <Error_Handler>
        if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_arr, OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
        {
            Error_Handler();
        }
    }
}
 800188a:	e06b      	b.n	8001964 <IOL_State_OP+0x254>
    else if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Write)
 800188c:	f7ff fdb8 	bl	8001400 <IOL_PreOP_ReadWriteCheck>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d166      	bne.n	8001964 <IOL_State_OP+0x254>
        if (IOL_Commchannel_value == IOL_Channel_ISDU)
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d143      	bne.n	8001924 <IOL_State_OP+0x214>
            if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x93) // ISDU Req
 800189c:	4b33      	ldr	r3, [pc, #204]	@ (800196c <IOL_State_OP+0x25c>)
 800189e:	799b      	ldrb	r3, [r3, #6]
 80018a0:	2b93      	cmp	r3, #147	@ 0x93
 80018a2:	d118      	bne.n	80018d6 <IOL_State_OP+0x1c6>
                if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH] == 0x12) // Index : 18.  Product Name
 80018a4:	4b31      	ldr	r3, [pc, #196]	@ (800196c <IOL_State_OP+0x25c>)
 80018a6:	79db      	ldrb	r3, [r3, #7]
 80018a8:	2b12      	cmp	r3, #18
 80018aa:	d103      	bne.n	80018b4 <IOL_State_OP+0x1a4>
                    IOL_OP_PD_Req_ProductName = 1;
 80018ac:	4b39      	ldr	r3, [pc, #228]	@ (8001994 <IOL_State_OP+0x284>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	e006      	b.n	80018c2 <IOL_State_OP+0x1b2>
                else if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH] == 0x15) // Index : 20. Serial number
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <IOL_State_OP+0x25c>)
 80018b6:	79db      	ldrb	r3, [r3, #7]
 80018b8:	2b15      	cmp	r3, #21
 80018ba:	d102      	bne.n	80018c2 <IOL_State_OP+0x1b2>
                    IOL_OP_PD_Req_SerialNumber = 1;
 80018bc:	4b36      	ldr	r3, [pc, #216]	@ (8001998 <IOL_State_OP+0x288>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
                device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2104      	movs	r1, #4
 80018c6:	4835      	ldr	r0, [pc, #212]	@ (800199c <IOL_State_OP+0x28c>)
 80018c8:	f7ff fdb4 	bl	8001434 <PreOP_CKS_GetChecksum>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b32      	ldr	r3, [pc, #200]	@ (800199c <IOL_State_OP+0x28c>)
 80018d2:	711a      	strb	r2, [r3, #4]
 80018d4:	e036      	b.n	8001944 <IOL_State_OP+0x234>
                if ((uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x81) && (IOL_OP_PD_Req_ProductName == 1))   // Product Name CHKPDU 0x81 0x00 .
 80018d6:	4b25      	ldr	r3, [pc, #148]	@ (800196c <IOL_State_OP+0x25c>)
 80018d8:	799b      	ldrb	r3, [r3, #6]
 80018da:	2b81      	cmp	r3, #129	@ 0x81
 80018dc:	d10a      	bne.n	80018f4 <IOL_State_OP+0x1e4>
 80018de:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <IOL_State_OP+0x284>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d106      	bne.n	80018f4 <IOL_State_OP+0x1e4>
                    IOL_OP_PD_Req_ProductName = 0;
 80018e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <IOL_State_OP+0x284>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
                    IOL_OP_PD_Req_ProductName_Chkpdu = 1;
 80018ec:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <IOL_State_OP+0x260>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e00d      	b.n	8001910 <IOL_State_OP+0x200>
                else if ((uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x86) && (IOL_OP_PD_Req_SerialNumber == 1))   // Serial Number CHKPDU 0x86 0x00 .
 80018f4:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <IOL_State_OP+0x25c>)
 80018f6:	799b      	ldrb	r3, [r3, #6]
 80018f8:	2b86      	cmp	r3, #134	@ 0x86
 80018fa:	d109      	bne.n	8001910 <IOL_State_OP+0x200>
 80018fc:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <IOL_State_OP+0x288>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d105      	bne.n	8001910 <IOL_State_OP+0x200>
                    IOL_OP_PD_Req_SerialNumber = 0;
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <IOL_State_OP+0x288>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
                    IOL_OP_PD_Req_SerialNumber_Chkpdu = 1;
 800190a:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <IOL_State_OP+0x270>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
                device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2104      	movs	r1, #4
 8001914:	4821      	ldr	r0, [pc, #132]	@ (800199c <IOL_State_OP+0x28c>)
 8001916:	f7ff fd8d 	bl	8001434 <PreOP_CKS_GetChecksum>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <IOL_State_OP+0x28c>)
 8001920:	711a      	strb	r2, [r3, #4]
 8001922:	e00f      	b.n	8001944 <IOL_State_OP+0x234>
        else if (IOL_Commchannel_value == IOL_Channel_Page)  // Page Write.
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10c      	bne.n	8001944 <IOL_State_OP+0x234>
            if (uart1_rx_IDLE_buf[OP_ISDU_IN_PROCESSDATALENGTH - 1] == 0x98) // Master Command - ProcessDataOutputOperatre.
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <IOL_State_OP+0x25c>)
 800192c:	799b      	ldrb	r3, [r3, #6]
 800192e:	2b98      	cmp	r3, #152	@ 0x98
 8001930:	d108      	bne.n	8001944 <IOL_State_OP+0x234>
                device_ProcessDataOut_arr[OP_ISDU_OUT_PROCESSDATALENGTH - 1] = PreOP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2104      	movs	r1, #4
 8001936:	4819      	ldr	r0, [pc, #100]	@ (800199c <IOL_State_OP+0x28c>)
 8001938:	f7ff fd7c 	bl	8001434 <PreOP_CKS_GetChecksum>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b16      	ldr	r3, [pc, #88]	@ (800199c <IOL_State_OP+0x28c>)
 8001942:	711a      	strb	r2, [r3, #4]
        IOL_ENABLE;
 8001944:	2201      	movs	r2, #1
 8001946:	2140      	movs	r1, #64	@ 0x40
 8001948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800194c:	f001 f82e 	bl	80029ac <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_arr, OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 8001950:	2205      	movs	r2, #5
 8001952:	4912      	ldr	r1, [pc, #72]	@ (800199c <IOL_State_OP+0x28c>)
 8001954:	480e      	ldr	r0, [pc, #56]	@ (8001990 <IOL_State_OP+0x280>)
 8001956:	f004 fad5 	bl	8005f04 <HAL_UART_Transmit_IT>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <IOL_State_OP+0x254>
            Error_Handler();
 8001960:	f7fe ff73 	bl	800084a <Error_Handler>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000a7c 	.word	0x20000a7c
 8001970:	20000aff 	.word	0x20000aff
 8001974:	20000b01 	.word	0x20000b01
 8001978:	20000054 	.word	0x20000054
 800197c:	20000af0 	.word	0x20000af0
 8001980:	20000b00 	.word	0x20000b00
 8001984:	20000084 	.word	0x20000084
 8001988:	200002a4 	.word	0x200002a4
 800198c:	20000ae0 	.word	0x20000ae0
 8001990:	20000f2c 	.word	0x20000f2c
 8001994:	20000afd 	.word	0x20000afd
 8001998:	20000afe 	.word	0x20000afe
 800199c:	20000af8 	.word	0x20000af8

080019a0 <IOL_State_PreOP>:

// if (stateIOLseq == IOL_PreOP)
void IOL_State_PreOP (void)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71bb      	strb	r3, [r7, #6]
    uint8_t IOL_Commchannel_value = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	717b      	strb	r3, [r7, #5]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 
    // uint8_t Page_Write_ChecksumValue[0] = {0};

    IOL_Commchannel_value = Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]);
 80019ae:	4b4b      	ldr	r3, [pc, #300]	@ (8001adc <IOL_State_PreOP+0x13c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f94e 	bl	8001c54 <Print_MC_CommunicationChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	717b      	strb	r3, [r7, #5]
    // uint8_t Page_Write_ChecksumValue[1] = {0};

    if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Read)
 80019bc:	f7ff fd20 	bl	8001400 <IOL_PreOP_ReadWriteCheck>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d151      	bne.n	8001a6a <IOL_State_PreOP+0xca>
    {
        for (i=0; i < PREOP_DATA_LENGTH; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	e00e      	b.n	80019ea <IOL_State_PreOP+0x4a>
        {
            preop_data_arr[i]= IOL_PreOP_Packet[PreOP_seq_cnt][i];
 80019cc:	4b44      	ldr	r3, [pc, #272]	@ (8001ae0 <IOL_State_PreOP+0x140>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	79fa      	ldrb	r2, [r7, #7]
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	4843      	ldr	r0, [pc, #268]	@ (8001ae4 <IOL_State_PreOP+0x144>)
 80019d8:	00c9      	lsls	r1, r1, #3
 80019da:	4401      	add	r1, r0
 80019dc:	440a      	add	r2, r1
 80019de:	7811      	ldrb	r1, [r2, #0]
 80019e0:	4a41      	ldr	r2, [pc, #260]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 80019e2:	54d1      	strb	r1, [r2, r3]
        for (i=0; i < PREOP_DATA_LENGTH; i++)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	3301      	adds	r3, #1
 80019e8:	71fb      	strb	r3, [r7, #7]
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	d9ed      	bls.n	80019cc <IOL_State_PreOP+0x2c>
        }

        // PreOP Mode에서 Diagnosis 는 Event flag 있음 PreOP_CKS_GetChecksum 함수의 3번째 인자 1 = event set, 0 = event reset.
        if (IOL_Commchannel_value == IOL_Channel_Diagnosis)
 80019f0:	797b      	ldrb	r3, [r7, #5]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d10a      	bne.n	8001a0c <IOL_State_PreOP+0x6c>
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 1);
 80019f6:	79fc      	ldrb	r4, [r7, #7]
 80019f8:	2201      	movs	r2, #1
 80019fa:	2108      	movs	r1, #8
 80019fc:	483a      	ldr	r0, [pc, #232]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 80019fe:	f7ff fd19 	bl	8001434 <PreOP_CKS_GetChecksum>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b38      	ldr	r3, [pc, #224]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001a08:	551a      	strb	r2, [r3, r4]
 8001a0a:	e017      	b.n	8001a3c <IOL_State_PreOP+0x9c>
        }
        else if (IOL_Commchannel_value == IOL_Channel_ISDU)
 8001a0c:	797b      	ldrb	r3, [r7, #5]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d10a      	bne.n	8001a28 <IOL_State_PreOP+0x88>
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8001a12:	79fc      	ldrb	r4, [r7, #7]
 8001a14:	2200      	movs	r2, #0
 8001a16:	2108      	movs	r1, #8
 8001a18:	4833      	ldr	r0, [pc, #204]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001a1a:	f7ff fd0b 	bl	8001434 <PreOP_CKS_GetChecksum>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001a24:	551a      	strb	r2, [r3, r4]
 8001a26:	e009      	b.n	8001a3c <IOL_State_PreOP+0x9c>
        }
        else
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8001a28:	79fc      	ldrb	r4, [r7, #7]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2108      	movs	r1, #8
 8001a2e:	482e      	ldr	r0, [pc, #184]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001a30:	f7ff fd00 	bl	8001434 <PreOP_CKS_GetChecksum>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001a3a:	551a      	strb	r2, [r3, r4]
        }
        
        PreOP_seq_cnt++;
 8001a3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <IOL_State_PreOP+0x140>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b26      	ldr	r3, [pc, #152]	@ (8001ae0 <IOL_State_PreOP+0x140>)
 8001a46:	701a      	strb	r2, [r3, #0]

        IOL_ENABLE;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2140      	movs	r1, #64	@ 0x40
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a50:	f000 ffac 	bl	80029ac <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, preop_data_arr, 9) != HAL_OK)
 8001a54:	2209      	movs	r2, #9
 8001a56:	4924      	ldr	r1, [pc, #144]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001a58:	4824      	ldr	r0, [pc, #144]	@ (8001aec <IOL_State_PreOP+0x14c>)
 8001a5a:	f004 fa53 	bl	8005f04 <HAL_UART_Transmit_IT>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d037      	beq.n	8001ad4 <IOL_State_PreOP+0x134>
        {
            Error_Handler();
 8001a64:	f7fe fef1 	bl	800084a <Error_Handler>
        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
        {
            Error_Handler();
        }
    }
}
 8001a68:	e034      	b.n	8001ad4 <IOL_State_PreOP+0x134>
    else if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Write)
 8001a6a:	f7ff fcc9 	bl	8001400 <IOL_PreOP_ReadWriteCheck>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d12f      	bne.n	8001ad4 <IOL_State_PreOP+0x134>
        if ((IOL_Commchannel_value == IOL_Channel_Diagnosis) || (IOL_Commchannel_value == IOL_Channel_ISDU))
 8001a74:	797b      	ldrb	r3, [r7, #5]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d002      	beq.n	8001a80 <IOL_State_PreOP+0xe0>
 8001a7a:	797b      	ldrb	r3, [r7, #5]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d109      	bne.n	8001a94 <IOL_State_PreOP+0xf4>
            preop_data_arr[0] = PreOP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2100      	movs	r1, #0
 8001a84:	4818      	ldr	r0, [pc, #96]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001a86:	f7ff fcd5 	bl	8001434 <PreOP_CKS_GetChecksum>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	e00f      	b.n	8001ab4 <IOL_State_PreOP+0x114>
            preop_data_arr[0] = PreOP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	4813      	ldr	r0, [pc, #76]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001a9a:	f7ff fccb 	bl	8001434 <PreOP_CKS_GetChecksum>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001aa4:	701a      	strb	r2, [r3, #0]
            if(uart1_rx_IDLE_buf[2] == 0x99)
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <IOL_State_PreOP+0x13c>)
 8001aa8:	789b      	ldrb	r3, [r3, #2]
 8001aaa:	2b99      	cmp	r3, #153	@ 0x99
 8001aac:	d102      	bne.n	8001ab4 <IOL_State_PreOP+0x114>
                stateIOLseq = IOL_OP;
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <IOL_State_PreOP+0x150>)
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	701a      	strb	r2, [r3, #0]
        IOL_ENABLE;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2140      	movs	r1, #64	@ 0x40
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001abc:	f000 ff76 	bl	80029ac <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4909      	ldr	r1, [pc, #36]	@ (8001ae8 <IOL_State_PreOP+0x148>)
 8001ac4:	4809      	ldr	r0, [pc, #36]	@ (8001aec <IOL_State_PreOP+0x14c>)
 8001ac6:	f004 fa1d 	bl	8005f04 <HAL_UART_Transmit_IT>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <IOL_State_PreOP+0x134>
            Error_Handler();
 8001ad0:	f7fe febb 	bl	800084a <Error_Handler>
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	20000a7c 	.word	0x20000a7c
 8001ae0:	20000b07 	.word	0x20000b07
 8001ae4:	20000014 	.word	0x20000014
 8001ae8:	20000b08 	.word	0x20000b08
 8001aec:	20000f2c 	.word	0x20000f2c
 8001af0:	20000fd0 	.word	0x20000fd0

08001af4 <IOL_StartUp_Seq_Page>:
        
    }
}

void IOL_StartUp_Seq_Page (uint16_t size)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
    uint8_t rxdataSize = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
    uint8_t eventdebug = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73bb      	strb	r3, [r7, #14]
    uint8_t Page_Write_ChecksumValue[0] = {0};
    
    rxdataSize = (uint8_t)size;
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	73fb      	strb	r3, [r7, #15]

    // State = StartUP ,   Channel = Page인지 구분
    if ((stateIOLseq == IOL_StartUp) && (Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]) == IOL_Channel_Page))
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf8 <IOL_StartUp_Seq_Page+0x104>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d15b      	bne.n	8001bca <IOL_StartUp_Seq_Page+0xd6>
 8001b12:	4b3a      	ldr	r3, [pc, #232]	@ (8001bfc <IOL_StartUp_Seq_Page+0x108>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f89c 	bl	8001c54 <Print_MC_CommunicationChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d153      	bne.n	8001bca <IOL_StartUp_Seq_Page+0xd6>
    {
        // R/W   Read 체크
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001b22:	4b36      	ldr	r3, [pc, #216]	@ (8001bfc <IOL_StartUp_Seq_Page+0x108>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f876 	bl	8001c18 <Decode_MC_ReadWrite>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d123      	bne.n	8001b7a <IOL_StartUp_Seq_Page+0x86>
        {
            
            IOL_Page1_Packet[0] = IOL_Page1_SeqValue[Page1_seq++];
 8001b32:	4b33      	ldr	r3, [pc, #204]	@ (8001c00 <IOL_StartUp_Seq_Page+0x10c>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	b2d1      	uxtb	r1, r2
 8001b3a:	4a31      	ldr	r2, [pc, #196]	@ (8001c00 <IOL_StartUp_Seq_Page+0x10c>)
 8001b3c:	7011      	strb	r1, [r2, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b30      	ldr	r3, [pc, #192]	@ (8001c04 <IOL_StartUp_Seq_Page+0x110>)
 8001b42:	5c9a      	ldrb	r2, [r3, r2]
 8001b44:	4b30      	ldr	r3, [pc, #192]	@ (8001c08 <IOL_StartUp_Seq_Page+0x114>)
 8001b46:	701a      	strb	r2, [r3, #0]

            // IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(IOL_Page1_Packet[0], 1);
            IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(&IOL_Page1_Packet[0], 1);
 8001b48:	2101      	movs	r1, #1
 8001b4a:	482f      	ldr	r0, [pc, #188]	@ (8001c08 <IOL_StartUp_Seq_Page+0x114>)
 8001b4c:	f7ff fbc6 	bl	80012dc <Decode_CKS_GetChecksum>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b2c      	ldr	r3, [pc, #176]	@ (8001c08 <IOL_StartUp_Seq_Page+0x114>)
 8001b56:	705a      	strb	r2, [r3, #1]

            IOL_ENABLE;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2140      	movs	r1, #64	@ 0x40
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b60:	f000 ff24 	bl	80029ac <HAL_GPIO_WritePin>
            if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) IOL_Page1_Packet, 2) != HAL_OK)
 8001b64:	2202      	movs	r2, #2
 8001b66:	4928      	ldr	r1, [pc, #160]	@ (8001c08 <IOL_StartUp_Seq_Page+0x114>)
 8001b68:	4828      	ldr	r0, [pc, #160]	@ (8001c0c <IOL_StartUp_Seq_Page+0x118>)
 8001b6a:	f004 f9cb 	bl	8005f04 <HAL_UART_Transmit_IT>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d038      	beq.n	8001be6 <IOL_StartUp_Seq_Page+0xf2>
            {
                Error_Handler();
 8001b74:	f7fe fe69 	bl	800084a <Error_Handler>
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001b78:	e035      	b.n	8001be6 <IOL_StartUp_Seq_Page+0xf2>
            }
            // HAL_UART_Transmit(&huart1,(uint8_t *) IOL_Page1_Packet, 2, 10);
            // IOL_DISABLE;
        }
        // R/W   Write 체크
        else if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Write)
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <IOL_StartUp_Seq_Page+0x108>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f84a 	bl	8001c18 <Decode_MC_ReadWrite>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d12d      	bne.n	8001be6 <IOL_StartUp_Seq_Page+0xf2>
        {
            Page_Write_ChecksumValue[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4820      	ldr	r0, [pc, #128]	@ (8001c10 <IOL_StartUp_Seq_Page+0x11c>)
 8001b8e:	f7ff fba5 	bl	80012dc <Decode_CKS_GetChecksum>
 8001b92:	4603      	mov	r3, r0
 8001b94:	733b      	strb	r3, [r7, #12]
            // if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) Decode_CKS_GetChecksum(0x52, 0), 1) != HAL_OK)
            IOL_ENABLE;
 8001b96:	2201      	movs	r2, #1
 8001b98:	2140      	movs	r1, #64	@ 0x40
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b9e:	f000 ff05 	bl	80029ac <HAL_GPIO_WritePin>
            if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) Page_Write_ChecksumValue, 1) != HAL_OK)
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4818      	ldr	r0, [pc, #96]	@ (8001c0c <IOL_StartUp_Seq_Page+0x118>)
 8001bac:	f004 f9aa 	bl	8005f04 <HAL_UART_Transmit_IT>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <IOL_StartUp_Seq_Page+0xc6>
            {
                Error_Handler();
 8001bb6:	f7fe fe48 	bl	800084a <Error_Handler>
            }

            //Master Command to PreOP.
            if (uart1_rx_IDLE_buf[2] == 0x9A)
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <IOL_StartUp_Seq_Page+0x108>)
 8001bbc:	789b      	ldrb	r3, [r3, #2]
 8001bbe:	2b9a      	cmp	r3, #154	@ 0x9a
 8001bc0:	d111      	bne.n	8001be6 <IOL_StartUp_Seq_Page+0xf2>
            {
                stateIOLseq = IOL_PreOP;
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <IOL_StartUp_Seq_Page+0x104>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001bc8:	e00d      	b.n	8001be6 <IOL_StartUp_Seq_Page+0xf2>
            }
            
        }
    }
    // PreOperate Mode
    else if (stateIOLseq == IOL_PreOP)
 8001bca:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <IOL_StartUp_Seq_Page+0x104>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d102      	bne.n	8001bd8 <IOL_StartUp_Seq_Page+0xe4>
    {
        IOL_State_PreOP();
 8001bd2:	f7ff fee5 	bl	80019a0 <IOL_State_PreOP>
 8001bd6:	e007      	b.n	8001be8 <IOL_StartUp_Seq_Page+0xf4>
    }
    // Operate Mode
    else if (stateIOLseq == IOL_OP)
 8001bd8:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <IOL_StartUp_Seq_Page+0x104>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d103      	bne.n	8001be8 <IOL_StartUp_Seq_Page+0xf4>
    {
        IOL_State_OP();
 8001be0:	f7ff fd96 	bl	8001710 <IOL_State_OP>
 8001be4:	e000      	b.n	8001be8 <IOL_StartUp_Seq_Page+0xf4>
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001be6:	bf00      	nop
    }

    #if 1 // debug Test 
    Test_M2D_TempValue = uart1_rx_IDLE_buf[3];
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <IOL_StartUp_Seq_Page+0x108>)
 8001bea:	78da      	ldrb	r2, [r3, #3]
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <IOL_StartUp_Seq_Page+0x120>)
 8001bee:	701a      	strb	r2, [r3, #0]
    #endif
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000fd0 	.word	0x20000fd0
 8001bfc:	20000a7c 	.word	0x20000a7c
 8001c00:	20000b06 	.word	0x20000b06
 8001c04:	20000004 	.word	0x20000004
 8001c08:	20000b04 	.word	0x20000b04
 8001c0c:	20000f2c 	.word	0x20000f2c
 8001c10:	20000098 	.word	0x20000098
 8001c14:	20000b02 	.word	0x20000b02

08001c18 <Decode_MC_ReadWrite>:
    #endif
  }
}

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	09db      	lsrs	r3, r3, #7
 8001c2e:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <Decode_MC_ReadWrite+0x24>
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d002      	beq.n	8001c40 <Decode_MC_ReadWrite+0x28>
 8001c3a:	e003      	b.n	8001c44 <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e002      	b.n	8001c46 <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 8001c44:	2358      	movs	r3, #88	@ 0x58
    }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <Print_MC_CommunicationChannel>:

//     return MCdata & 0x03;
// }

static uint8_t Print_MC_CommunicationChannel (uint8_t Data)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	095b      	lsrs	r3, r3, #5
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d813      	bhi.n	8001ca0 <Print_MC_CommunicationChannel+0x4c>
 8001c78:	a201      	add	r2, pc, #4	@ (adr r2, 8001c80 <Print_MC_CommunicationChannel+0x2c>)
 8001c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7e:	bf00      	nop
 8001c80:	08001c91 	.word	0x08001c91
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001c99 	.word	0x08001c99
 8001c8c:	08001c9d 	.word	0x08001c9d
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e005      	b.n	8001ca0 <Print_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e003      	b.n	8001ca0 <Print_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e001      	b.n	8001ca0 <Print_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e7ff      	b.n	8001ca0 <Print_MC_CommunicationChannel+0x4c>
    }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cac:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb0:	f7ff f8f0 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	@ (8001ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	@ (8001cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <LoopForever+0xe>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf8 <LoopForever+0x16>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001cda:	f00a f97d 	bl	800bfd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cde:	f7fe fd29 	bl	8000734 <main>

08001ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce2:	e7fe      	b.n	8001ce2 <LoopForever>
  ldr   r0, =_estack
 8001ce4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001cf0:	0800cd20 	.word	0x0800cd20
  ldr r2, =_sbss
 8001cf4:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8001cf8:	200028fc 	.word	0x200028fc

08001cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC1_2_IRQHandler>

08001cfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f95b 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d0e:	200f      	movs	r0, #15
 8001d10:	f000 f80e 	bl	8001d30 <HAL_InitTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	e001      	b.n	8001d24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d20:	f7fe fec0 	bl	8000aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d24:	79fb      	ldrb	r3, [r7, #7]

}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d3c:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <HAL_InitTick+0x68>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d022      	beq.n	8001d8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d44:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_InitTick+0x6c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_InitTick+0x68>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f966 	bl	800202a <HAL_SYSTICK_Config>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10f      	bne.n	8001d84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	d809      	bhi.n	8001d7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d72:	f000 f932 	bl	8001fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <HAL_InitTick+0x70>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e007      	b.n	8001d8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e004      	b.n	8001d8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e001      	b.n	8001d8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200000a0 	.word	0x200000a0
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	2000009c 	.word	0x2000009c

08001da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_IncTick+0x1c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_IncTick+0x20>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a03      	ldr	r2, [pc, #12]	@ (8001dc0 <HAL_IncTick+0x1c>)
 8001db4:	6013      	str	r3, [r2, #0]
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	2000194c 	.word	0x2000194c
 8001dc4:	200000a0 	.word	0x200000a0

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	2000194c 	.word	0x2000194c

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d004      	beq.n	8001e04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_Delay+0x40>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4413      	add	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e04:	bf00      	nop
 8001e06:	f7ff ffdf 	bl	8001dc8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d8f7      	bhi.n	8001e06 <HAL_Delay+0x26>
  {
  }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200000a0 	.word	0x200000a0

08001e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e56:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60d3      	str	r3, [r2, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <__NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	db0b      	blt.n	8001eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4907      	ldr	r1, [pc, #28]	@ (8001ec0 <__NVIC_EnableIRQ+0x38>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	@ (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	@ (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	@ 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff29 	bl	8001e24 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff40 	bl	8001e6c <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff90 	bl	8001f18 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5f 	bl	8001ec4 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff33 	bl	8001e88 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa4 	bl	8001f80 <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e08d      	b.n	8002172 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_DMA_Init+0x138>)
 800205e:	429a      	cmp	r2, r3
 8002060:	d80f      	bhi.n	8002082 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	4b45      	ldr	r3, [pc, #276]	@ (8002180 <HAL_DMA_Init+0x13c>)
 800206a:	4413      	add	r3, r2
 800206c:	4a45      	ldr	r2, [pc, #276]	@ (8002184 <HAL_DMA_Init+0x140>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	009a      	lsls	r2, r3, #2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a42      	ldr	r2, [pc, #264]	@ (8002188 <HAL_DMA_Init+0x144>)
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002080:	e00e      	b.n	80020a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	4b40      	ldr	r3, [pc, #256]	@ (800218c <HAL_DMA_Init+0x148>)
 800208a:	4413      	add	r3, r2
 800208c:	4a3d      	ldr	r2, [pc, #244]	@ (8002184 <HAL_DMA_Init+0x140>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	009a      	lsls	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a3c      	ldr	r2, [pc, #240]	@ (8002190 <HAL_DMA_Init+0x14c>)
 800209e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80020b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80020c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fa76 	bl	80025e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002100:	d102      	bne.n	8002108 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800211c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_DMA_Init+0x104>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b04      	cmp	r3, #4
 800212c:	d80c      	bhi.n	8002148 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fa96 	bl	8002660 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	e008      	b.n	800215a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40020407 	.word	0x40020407
 8002180:	bffdfff8 	.word	0xbffdfff8
 8002184:	cccccccd 	.word	0xcccccccd
 8002188:	40020000 	.word	0x40020000
 800218c:	bffdfbf8 	.word	0xbffdfbf8
 8002190:	40020400 	.word	0x40020400

08002194 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_DMA_Start_IT+0x20>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e066      	b.n	8002282 <HAL_DMA_Start_IT+0xee>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d155      	bne.n	8002274 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f9bb 	bl	8002568 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 020e 	orr.w	r2, r2, #14
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e00f      	b.n	800222c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0204 	bic.w	r2, r2, #4
 800221a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 020a 	orr.w	r2, r2, #10
 800222a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002244:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002248:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002260:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0201 	orr.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e005      	b.n	8002280 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800227c:	2302      	movs	r3, #2
 800227e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002280:	7dfb      	ldrb	r3, [r7, #23]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d005      	beq.n	80022ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e037      	b.n	800231e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 020e 	bic.w	r2, r2, #14
 80022bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f003 021f 	and.w	r2, r3, #31
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00c      	beq.n	800231e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002312:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800231c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d00d      	beq.n	8002370 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2204      	movs	r2, #4
 8002358:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	e047      	b.n	8002400 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 020e 	bic.w	r2, r2, #14
 800237e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800239e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f202 	lsl.w	r2, r1, r2
 80023b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4798      	blx	r3
    }
  }
  return status;
 8002400:	7bfb      	ldrb	r3, [r7, #15]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2204      	movs	r2, #4
 800242c:	409a      	lsls	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d026      	beq.n	8002484 <HAL_DMA_IRQHandler+0x7a>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d021      	beq.n	8002484 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0204 	bic.w	r2, r2, #4
 800245c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	f003 021f 	and.w	r2, r3, #31
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	2104      	movs	r1, #4
 800246c:	fa01 f202 	lsl.w	r2, r1, r2
 8002470:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	2b00      	cmp	r3, #0
 8002478:	d071      	beq.n	800255e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002482:	e06c      	b.n	800255e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2202      	movs	r2, #2
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02e      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d029      	beq.n	80024f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10b      	bne.n	80024c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020a 	bic.w	r2, r2, #10
 80024be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	2102      	movs	r1, #2
 80024d6:	fa01 f202 	lsl.w	r2, r1, r2
 80024da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d038      	beq.n	800255e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80024f4:	e033      	b.n	800255e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2208      	movs	r2, #8
 8002500:	409a      	lsls	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d02a      	beq.n	8002560 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d025      	beq.n	8002560 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 020e 	bic.w	r2, r2, #14
 8002522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f202 	lsl.w	r2, r1, r2
 8002536:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800255e:	bf00      	nop
 8002560:	bf00      	nop
}
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800257e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002590:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f003 021f 	and.w	r2, r3, #31
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	d108      	bne.n	80025c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025c6:	e007      	b.n	80025d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	60da      	str	r2, [r3, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b16      	ldr	r3, [pc, #88]	@ (800264c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d802      	bhi.n	80025fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80025f8:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e001      	b.n	8002602 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002600:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3b08      	subs	r3, #8
 800260e:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	009a      	lsls	r2, r3, #2
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	461a      	mov	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a0b      	ldr	r2, [pc, #44]	@ (800265c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800262e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2201      	movs	r2, #1
 8002638:	409a      	lsls	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40020407 	.word	0x40020407
 8002650:	40020800 	.word	0x40020800
 8002654:	40020820 	.word	0x40020820
 8002658:	cccccccd 	.word	0xcccccccd
 800265c:	40020880 	.word	0x40020880

08002660 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	461a      	mov	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a08      	ldr	r2, [pc, #32]	@ (80026a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002682:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3b01      	subs	r3, #1
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2201      	movs	r2, #1
 800268e:	409a      	lsls	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	1000823f 	.word	0x1000823f
 80026a4:	40020940 	.word	0x40020940

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026b6:	e15a      	b.n	800296e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2101      	movs	r1, #1
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 814c 	beq.w	8002968 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d005      	beq.n	80026e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d130      	bne.n	800274a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800271e:	2201      	movs	r2, #1
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 0201 	and.w	r2, r3, #1
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b03      	cmp	r3, #3
 8002754:	d017      	beq.n	8002786 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	2203      	movs	r2, #3
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d123      	bne.n	80027da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	08da      	lsrs	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3208      	adds	r2, #8
 800279a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	220f      	movs	r2, #15
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	6939      	ldr	r1, [r7, #16]
 80027d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	2203      	movs	r2, #3
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0203 	and.w	r2, r3, #3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80a6 	beq.w	8002968 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281c:	4b5b      	ldr	r3, [pc, #364]	@ (800298c <HAL_GPIO_Init+0x2e4>)
 800281e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002820:	4a5a      	ldr	r2, [pc, #360]	@ (800298c <HAL_GPIO_Init+0x2e4>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6613      	str	r3, [r2, #96]	@ 0x60
 8002828:	4b58      	ldr	r3, [pc, #352]	@ (800298c <HAL_GPIO_Init+0x2e4>)
 800282a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002834:	4a56      	ldr	r2, [pc, #344]	@ (8002990 <HAL_GPIO_Init+0x2e8>)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	089b      	lsrs	r3, r3, #2
 800283a:	3302      	adds	r3, #2
 800283c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	220f      	movs	r2, #15
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800285e:	d01f      	beq.n	80028a0 <HAL_GPIO_Init+0x1f8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a4c      	ldr	r2, [pc, #304]	@ (8002994 <HAL_GPIO_Init+0x2ec>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d019      	beq.n	800289c <HAL_GPIO_Init+0x1f4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a4b      	ldr	r2, [pc, #300]	@ (8002998 <HAL_GPIO_Init+0x2f0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d013      	beq.n	8002898 <HAL_GPIO_Init+0x1f0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a4a      	ldr	r2, [pc, #296]	@ (800299c <HAL_GPIO_Init+0x2f4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00d      	beq.n	8002894 <HAL_GPIO_Init+0x1ec>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a49      	ldr	r2, [pc, #292]	@ (80029a0 <HAL_GPIO_Init+0x2f8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <HAL_GPIO_Init+0x1e8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a48      	ldr	r2, [pc, #288]	@ (80029a4 <HAL_GPIO_Init+0x2fc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_GPIO_Init+0x1e4>
 8002888:	2305      	movs	r3, #5
 800288a:	e00a      	b.n	80028a2 <HAL_GPIO_Init+0x1fa>
 800288c:	2306      	movs	r3, #6
 800288e:	e008      	b.n	80028a2 <HAL_GPIO_Init+0x1fa>
 8002890:	2304      	movs	r3, #4
 8002892:	e006      	b.n	80028a2 <HAL_GPIO_Init+0x1fa>
 8002894:	2303      	movs	r3, #3
 8002896:	e004      	b.n	80028a2 <HAL_GPIO_Init+0x1fa>
 8002898:	2302      	movs	r3, #2
 800289a:	e002      	b.n	80028a2 <HAL_GPIO_Init+0x1fa>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_GPIO_Init+0x1fa>
 80028a0:	2300      	movs	r3, #0
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	f002 0203 	and.w	r2, r2, #3
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	4093      	lsls	r3, r2
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b2:	4937      	ldr	r1, [pc, #220]	@ (8002990 <HAL_GPIO_Init+0x2e8>)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c0:	4b39      	ldr	r3, [pc, #228]	@ (80029a8 <HAL_GPIO_Init+0x300>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028e4:	4a30      	ldr	r2, [pc, #192]	@ (80029a8 <HAL_GPIO_Init+0x300>)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028ea:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <HAL_GPIO_Init+0x300>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800290e:	4a26      	ldr	r2, [pc, #152]	@ (80029a8 <HAL_GPIO_Init+0x300>)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002914:	4b24      	ldr	r3, [pc, #144]	@ (80029a8 <HAL_GPIO_Init+0x300>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002938:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <HAL_GPIO_Init+0x300>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800293e:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <HAL_GPIO_Init+0x300>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002962:	4a11      	ldr	r2, [pc, #68]	@ (80029a8 <HAL_GPIO_Init+0x300>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3301      	adds	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	f47f ae9d 	bne.w	80026b8 <HAL_GPIO_Init+0x10>
  }
}
 800297e:	bf00      	nop
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40021000 	.word	0x40021000
 8002990:	40010000 	.word	0x40010000
 8002994:	48000400 	.word	0x48000400
 8002998:	48000800 	.word	0x48000800
 800299c:	48000c00 	.word	0x48000c00
 80029a0:	48001000 	.word	0x48001000
 80029a4:	48001400 	.word	0x48001400
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029c8:	e002      	b.n	80029d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	041a      	lsls	r2, r3, #16
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	43d9      	mvns	r1, r3
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	400b      	ands	r3, r1
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	619a      	str	r2, [r3, #24]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a1a:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d006      	beq.n	8002a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a26:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f806 	bl	8002a40 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0c0      	b.n	8002bea <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f008 fd49 	bl	800b514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2203      	movs	r2, #3
 8002a86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f005 f85f 	bl	8007b52 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e03e      	b.n	8002b18 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3311      	adds	r3, #17
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	3310      	adds	r3, #16
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	3313      	adds	r3, #19
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3320      	adds	r3, #32
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	3324      	adds	r3, #36	@ 0x24
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	3301      	adds	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	791b      	ldrb	r3, [r3, #4]
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d3bb      	bcc.n	8002a9a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
 8002b26:	e044      	b.n	8002bb2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	791b      	ldrb	r3, [r3, #4]
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d3b5      	bcc.n	8002b28 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002bc8:	f004 ffde 	bl	8007b88 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7a9b      	ldrb	r3, [r3, #10]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f001 fc0e 	bl	8004404 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_PCD_Start+0x16>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e012      	b.n	8002c2e <HAL_PCD_Start+0x3c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 ff85 	bl	8007b24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f006 fd62 	bl	80096e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f006 fd67 	bl	8009716 <USB_ReadInterrupts>
 8002c48:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fb06 	bl	8003266 <PCD_EP_ISR_Handler>

    return;
 8002c5a:	e110      	b.n	8002e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d013      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f008 fcd9 	bl	800b636 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c84:	2100      	movs	r1, #0
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8fc 	bl	8002e84 <HAL_PCD_SetAddress>

    return;
 8002c8c:	e0f7      	b.n	8002e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002caa:	b292      	uxth	r2, r2
 8002cac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cb0:	e0e5      	b.n	8002e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00c      	beq.n	8002cd6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cce:	b292      	uxth	r2, r2
 8002cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cd4:	e0d3      	b.n	8002e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	b292      	uxth	r2, r2
 8002cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0208 	bic.w	r2, r2, #8
 8002d0a:	b292      	uxth	r2, r2
 8002d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d22:	2100      	movs	r1, #0
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f008 fe79 	bl	800ba1c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f008 fcbc 	bl	800b6a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d42:	b292      	uxth	r2, r2
 8002d44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d48:	e099      	b.n	8002e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d027      	beq.n	8002da4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0208 	orr.w	r2, r2, #8
 8002d66:	b292      	uxth	r2, r2
 8002d68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0204 	orr.w	r2, r2, #4
 8002d96:	b292      	uxth	r2, r2
 8002d98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f008 fc69 	bl	800b674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002da2:	e06c      	b.n	8002e7e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d040      	beq.n	8002e30 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d12b      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0204 	orr.w	r2, r2, #4
 8002de2:	b292      	uxth	r2, r2
 8002de4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0208 	orr.w	r2, r2, #8
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e1e:	2101      	movs	r1, #1
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f008 fdfb 	bl	800ba1c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002e26:	e02a      	b.n	8002e7e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f008 fc23 	bl	800b674 <HAL_PCD_SuspendCallback>
    return;
 8002e2e:	e026      	b.n	8002e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00f      	beq.n	8002e5a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e4c:	b292      	uxth	r2, r2
 8002e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f008 fbe1 	bl	800b61a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e58:	e011      	b.n	8002e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00c      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e76:	b292      	uxth	r2, r2
 8002e78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e7c:	bf00      	nop
  }
}
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_PCD_SetAddress+0x1a>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e012      	b.n	8002ec4 <HAL_PCD_SetAddress+0x40>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f006 fc03 	bl	80096c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	70fb      	strb	r3, [r7, #3]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	803b      	strh	r3, [r7, #0]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	da0e      	bge.n	8002f10 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	f003 0207 	and.w	r2, r3, #7
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	3310      	adds	r3, #16
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	705a      	strb	r2, [r3, #1]
 8002f0e:	e00e      	b.n	8002f2e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 0207 	and.w	r2, r3, #7
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002f3a:	883b      	ldrh	r3, [r7, #0]
 8002f3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	78ba      	ldrb	r2, [r7, #2]
 8002f48:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f4a:	78bb      	ldrb	r3, [r7, #2]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d102      	bne.n	8002f56 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_PCD_EP_Open+0x98>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e00e      	b.n	8002f82 <HAL_PCD_EP_Open+0xb6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f004 fe26 	bl	8007bc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002f80:	7afb      	ldrb	r3, [r7, #11]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	da0e      	bge.n	8002fbc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	f003 0207 	and.w	r2, r3, #7
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	3310      	adds	r3, #16
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	705a      	strb	r2, [r3, #1]
 8002fba:	e00e      	b.n	8002fda <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 0207 	and.w	r2, r3, #7
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_PCD_EP_Close+0x6a>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e00e      	b.n	8003012 <HAL_PCD_EP_Close+0x88>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	4618      	mov	r0, r3
 8003004:	f005 fac6 	bl	8008594 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	460b      	mov	r3, r1
 8003028:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800302a:	7afb      	ldrb	r3, [r7, #11]
 800302c:	f003 0207 	and.w	r2, r3, #7
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800305a:	7afb      	ldrb	r3, [r7, #11]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	b2da      	uxtb	r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	4618      	mov	r0, r3
 800306e:	f005 fc7e 	bl	800896e <USB_EPStartXfer>

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 0207 	and.w	r2, r3, #7
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	460b      	mov	r3, r1
 80030ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	f003 0207 	and.w	r2, r3, #7
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	3310      	adds	r3, #16
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2201      	movs	r2, #1
 80030f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6979      	ldr	r1, [r7, #20]
 800310a:	4618      	mov	r0, r3
 800310c:	f005 fc2f 	bl	800896e <USB_EPStartXfer>

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	7912      	ldrb	r2, [r2, #4]
 8003130:	4293      	cmp	r3, r2
 8003132:	d901      	bls.n	8003138 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e03e      	b.n	80031b6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800313c:	2b00      	cmp	r3, #0
 800313e:	da0e      	bge.n	800315e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 0207 	and.w	r2, r3, #7
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	3310      	adds	r3, #16
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	705a      	strb	r2, [r3, #1]
 800315c:	e00c      	b.n	8003178 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_PCD_EP_SetStall+0x7e>
 8003194:	2302      	movs	r3, #2
 8003196:	e00e      	b.n	80031b6 <HAL_PCD_EP_SetStall+0x9c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f006 f990 	bl	80094cc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	7912      	ldrb	r2, [r2, #4]
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e040      	b.n	800325e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da0e      	bge.n	8003202 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 0207 	and.w	r2, r3, #7
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	3310      	adds	r3, #16
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	705a      	strb	r2, [r3, #1]
 8003200:	e00e      	b.n	8003220 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	f003 0207 	and.w	r2, r3, #7
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_PCD_EP_ClrStall+0x82>
 800323c:	2302      	movs	r3, #2
 800323e:	e00e      	b.n	800325e <HAL_PCD_EP_ClrStall+0xa0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68f9      	ldr	r1, [r7, #12]
 800324e:	4618      	mov	r0, r3
 8003250:	f006 f98d 	bl	800956e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b092      	sub	sp, #72	@ 0x48
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800326e:	e333      	b.n	80038d8 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003278:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800327a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003286:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 8108 	bne.w	80034a0 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003290:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d14c      	bne.n	8003334 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80032a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032aa:	813b      	strh	r3, [r7, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	893b      	ldrh	r3, [r7, #8]
 80032b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3310      	adds	r3, #16
 80032c2:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	4413      	add	r3, r2
 80032de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80032ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	441a      	add	r2, r3
 80032f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032fa:	2100      	movs	r1, #0
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f008 f972 	bl	800b5e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7b1b      	ldrb	r3, [r3, #12]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 82e5 	beq.w	80038d8 <PCD_EP_ISR_Handler+0x672>
 800330e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 82e0 	bne.w	80038d8 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	7b1b      	ldrb	r3, [r3, #12]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003322:	b2da      	uxtb	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	731a      	strb	r2, [r3, #12]
 8003332:	e2d1      	b.n	80038d8 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800333a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003344:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003346:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800334a:	2b00      	cmp	r3, #0
 800334c:	d032      	beq.n	80033b4 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	4413      	add	r3, r2
 8003368:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003374:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003382:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003386:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003388:	b29b      	uxth	r3, r3
 800338a:	f006 fa16 	bl	80097ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29a      	uxth	r2, r3
 8003396:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800339a:	4013      	ands	r3, r2
 800339c:	817b      	strh	r3, [r7, #10]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	897a      	ldrh	r2, [r7, #10]
 80033a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033a8:	b292      	uxth	r2, r2
 80033aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f008 f8ed 	bl	800b58c <HAL_PCD_SetupStageCallback>
 80033b2:	e291      	b.n	80038d8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033b4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f280 828d 	bge.w	80038d8 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033ca:	4013      	ands	r3, r2
 80033cc:	81fb      	strh	r3, [r7, #14]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	89fa      	ldrh	r2, [r7, #14]
 80033d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033d8:	b292      	uxth	r2, r2
 80033da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003402:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d019      	beq.n	8003440 <PCD_EP_ISR_Handler+0x1da>
 800340c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d015      	beq.n	8003440 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800341a:	6959      	ldr	r1, [r3, #20]
 800341c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800341e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003422:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003424:	b29b      	uxth	r3, r3
 8003426:	f006 f9c8 	bl	80097ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800342a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	441a      	add	r2, r3
 8003434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003436:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003438:	2100      	movs	r1, #0
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f008 f8b8 	bl	800b5b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003448:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800344a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 8242 	bne.w	80038d8 <PCD_EP_ISR_Handler+0x672>
 8003454:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003456:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800345a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800345e:	f000 823b 	beq.w	80038d8 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800346e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003472:	81bb      	strh	r3, [r7, #12]
 8003474:	89bb      	ldrh	r3, [r7, #12]
 8003476:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800347a:	81bb      	strh	r3, [r7, #12]
 800347c:	89bb      	ldrh	r3, [r7, #12]
 800347e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003482:	81bb      	strh	r3, [r7, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	89bb      	ldrh	r3, [r7, #12]
 800348a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800348e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800349a:	b29b      	uxth	r3, r3
 800349c:	8013      	strh	r3, [r2, #0]
 800349e:	e21b      	b.n	80038d8 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034b2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f280 80f1 	bge.w	800369e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034d2:	4013      	ands	r3, r2
 80034d4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034ea:	b292      	uxth	r2, r2
 80034ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80034ee:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003506:	7b1b      	ldrb	r3, [r3, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d123      	bne.n	8003554 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003514:	b29b      	uxth	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	4413      	add	r3, r2
 8003526:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003530:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003534:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 808b 	beq.w	8003654 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003544:	6959      	ldr	r1, [r3, #20]
 8003546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003548:	88da      	ldrh	r2, [r3, #6]
 800354a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800354e:	f006 f934 	bl	80097ba <USB_ReadPMA>
 8003552:	e07f      	b.n	8003654 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003556:	78db      	ldrb	r3, [r3, #3]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d109      	bne.n	8003570 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800355c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800355e:	461a      	mov	r2, r3
 8003560:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9c6 	bl	80038f4 <HAL_PCD_EP_DB_Receive>
 8003568:	4603      	mov	r3, r0
 800356a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800356e:	e071      	b.n	8003654 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	b29b      	uxth	r3, r3
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	441a      	add	r2, r3
 800359a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800359c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d022      	beq.n	8003610 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80035f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02c      	beq.n	8003654 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003600:	6959      	ldr	r1, [r3, #20]
 8003602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003604:	891a      	ldrh	r2, [r3, #8]
 8003606:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800360a:	f006 f8d6 	bl	80097ba <USB_ReadPMA>
 800360e:	e021      	b.n	8003654 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003618:	b29b      	uxth	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	4413      	add	r3, r2
 800362a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003634:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003638:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003646:	6959      	ldr	r1, [r3, #20]
 8003648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800364a:	895a      	ldrh	r2, [r3, #10]
 800364c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003650:	f006 f8b3 	bl	80097ba <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800365c:	441a      	add	r2, r3
 800365e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003660:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800366a:	441a      	add	r2, r3
 800366c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800366e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <PCD_EP_ISR_Handler+0x41e>
 8003678:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800367c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	429a      	cmp	r2, r3
 8003682:	d206      	bcs.n	8003692 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	4619      	mov	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f007 ff90 	bl	800b5b0 <HAL_PCD_DataOutStageCallback>
 8003690:	e005      	b.n	800369e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003698:	4618      	mov	r0, r3
 800369a:	f005 f968 	bl	800896e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800369e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8117 	beq.w	80038d8 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80036aa:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	3310      	adds	r3, #16
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80036d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	441a      	add	r2, r3
 80036e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80036ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80036f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f8:	78db      	ldrb	r3, [r3, #3]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	f040 80a1 	bne.w	8003842 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003702:	2200      	movs	r2, #0
 8003704:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003708:	7b1b      	ldrb	r3, [r3, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8092 	beq.w	8003834 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003710:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d046      	beq.n	80037a8 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800371a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371c:	785b      	ldrb	r3, [r3, #1]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d126      	bne.n	8003770 <PCD_EP_ISR_Handler+0x50a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003730:	b29b      	uxth	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	4413      	add	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	00da      	lsls	r2, r3, #3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	4413      	add	r3, r2
 8003744:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29b      	uxth	r3, r3
 8003750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003754:	b29a      	uxth	r2, r3
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29b      	uxth	r3, r3
 8003760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003768:	b29a      	uxth	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	e061      	b.n	8003834 <PCD_EP_ISR_Handler+0x5ce>
 8003770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003772:	785b      	ldrb	r3, [r3, #1]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d15d      	bne.n	8003834 <PCD_EP_ISR_Handler+0x5ce>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003786:	b29b      	uxth	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	00da      	lsls	r2, r3, #3
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4413      	add	r3, r2
 800379a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2200      	movs	r2, #0
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	e045      	b.n	8003834 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b0:	785b      	ldrb	r3, [r3, #1]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d126      	bne.n	8003804 <PCD_EP_ISR_Handler+0x59e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	4413      	add	r3, r2
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	00da      	lsls	r2, r3, #3
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	4413      	add	r3, r2
 80037d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037dc:	623b      	str	r3, [r7, #32]
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	801a      	strh	r2, [r3, #0]
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	e017      	b.n	8003834 <PCD_EP_ISR_Handler+0x5ce>
 8003804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d113      	bne.n	8003834 <PCD_EP_ISR_Handler+0x5ce>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003814:	b29b      	uxth	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	4413      	add	r3, r2
 800381c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800381e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	00da      	lsls	r2, r3, #3
 8003824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003826:	4413      	add	r3, r2
 8003828:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800382c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003830:	2200      	movs	r2, #0
 8003832:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f007 fed3 	bl	800b5e6 <HAL_PCD_DataInStageCallback>
 8003840:	e04a      	b.n	80038d8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003842:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d13f      	bne.n	80038cc <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003854:	b29b      	uxth	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	4413      	add	r3, r2
 8003866:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003870:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003878:	429a      	cmp	r2, r3
 800387a:	d906      	bls.n	800388a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800387c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003882:	1ad2      	subs	r2, r2, r3
 8003884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003886:	619a      	str	r2, [r3, #24]
 8003888:	e002      	b.n	8003890 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800388a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f007 fea1 	bl	800b5e6 <HAL_PCD_DataInStageCallback>
 80038a4:	e018      	b.n	80038d8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80038a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80038ac:	441a      	add	r2, r3
 80038ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80038b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80038b8:	441a      	add	r2, r3
 80038ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038bc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038c4:	4618      	mov	r0, r3
 80038c6:	f005 f852 	bl	800896e <USB_EPStartXfer>
 80038ca:	e005      	b.n	80038d8 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80038cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038ce:	461a      	mov	r2, r3
 80038d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f917 	bl	8003b06 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	b21b      	sxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f6ff acc3 	blt.w	8003270 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3748      	adds	r7, #72	@ 0x48
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d07c      	beq.n	8003a06 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003914:	b29b      	uxth	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	4413      	add	r3, r2
 8003926:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003930:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	8b7b      	ldrh	r3, [r7, #26]
 8003938:	429a      	cmp	r2, r3
 800393a:	d306      	bcc.n	800394a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	8b7b      	ldrh	r3, [r7, #26]
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	619a      	str	r2, [r3, #24]
 8003948:	e002      	b.n	8003950 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d123      	bne.n	80039a0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	833b      	strh	r3, [r7, #24]
 8003974:	8b3b      	ldrh	r3, [r7, #24]
 8003976:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800397a:	833b      	strh	r3, [r7, #24]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	8b3b      	ldrh	r3, [r7, #24]
 800398c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800399c:	b29b      	uxth	r3, r3
 800399e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01f      	beq.n	80039ea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c4:	82fb      	strh	r3, [r7, #22]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	441a      	add	r2, r3
 80039d4:	8afb      	ldrh	r3, [r7, #22]
 80039d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039ea:	8b7b      	ldrh	r3, [r7, #26]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8085 	beq.w	8003afc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	6959      	ldr	r1, [r3, #20]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	891a      	ldrh	r2, [r3, #8]
 80039fe:	8b7b      	ldrh	r3, [r7, #26]
 8003a00:	f005 fedb 	bl	80097ba <USB_ReadPMA>
 8003a04:	e07a      	b.n	8003afc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d306      	bcc.n	8003a44 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	8b7b      	ldrh	r3, [r7, #26]
 8003a3c:	1ad2      	subs	r2, r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	619a      	str	r2, [r3, #24]
 8003a42:	e002      	b.n	8003a4a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d123      	bne.n	8003a9a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6c:	83fb      	strh	r3, [r7, #30]
 8003a6e:	8bfb      	ldrh	r3, [r7, #30]
 8003a70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a74:	83fb      	strh	r3, [r7, #30]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	8bfb      	ldrh	r3, [r7, #30]
 8003a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11f      	bne.n	8003ae4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003abe:	83bb      	strh	r3, [r7, #28]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	441a      	add	r2, r3
 8003ace:	8bbb      	ldrh	r3, [r7, #28]
 8003ad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003adc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ae4:	8b7b      	ldrh	r3, [r7, #26]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6959      	ldr	r1, [r3, #20]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	895a      	ldrh	r2, [r3, #10]
 8003af6:	8b7b      	ldrh	r3, [r7, #26]
 8003af8:	f005 fe5f 	bl	80097ba <USB_ReadPMA>
    }
  }

  return count;
 8003afc:	8b7b      	ldrh	r3, [r7, #26]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b0a6      	sub	sp, #152	@ 0x98
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	4613      	mov	r3, r2
 8003b12:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 81f7 	beq.w	8003f0e <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b44:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d907      	bls.n	8003b64 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003b5c:	1ad2      	subs	r2, r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	619a      	str	r2, [r3, #24]
 8003b62:	e002      	b.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f040 80e1 	bne.w	8003d36 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	785b      	ldrb	r3, [r3, #1]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d126      	bne.n	8003bca <HAL_PCD_EP_DB_Transmit+0xc4>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b90:	4413      	add	r3, r2
 8003b92:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	00da      	lsls	r2, r3, #3
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb2:	801a      	strh	r2, [r3, #0]
 8003bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc6:	801a      	strh	r2, [r3, #0]
 8003bc8:	e01a      	b.n	8003c00 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d116      	bne.n	8003c00 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be6:	4413      	add	r3, r2
 8003be8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	00da      	lsls	r2, r3, #3
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	785b      	ldrb	r3, [r3, #1]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d126      	bne.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x156>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	623b      	str	r3, [r7, #32]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	4413      	add	r3, r2
 8003c24:	623b      	str	r3, [r7, #32]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	00da      	lsls	r2, r3, #3
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	801a      	strh	r2, [r3, #0]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	801a      	strh	r2, [r3, #0]
 8003c5a:	e017      	b.n	8003c8c <HAL_PCD_EP_DB_Transmit+0x186>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	785b      	ldrb	r3, [r3, #1]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d113      	bne.n	8003c8c <HAL_PCD_EP_DB_Transmit+0x186>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c72:	4413      	add	r3, r2
 8003c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	00da      	lsls	r2, r3, #3
 8003c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7e:	4413      	add	r3, r2
 8003c80:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	2200      	movs	r2, #0
 8003c8a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	78db      	ldrb	r3, [r3, #3]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d123      	bne.n	8003cdc <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cae:	837b      	strh	r3, [r7, #26]
 8003cb0:	8b7b      	ldrh	r3, [r7, #26]
 8003cb2:	f083 0320 	eor.w	r3, r3, #32
 8003cb6:	837b      	strh	r3, [r7, #26]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	441a      	add	r2, r3
 8003cc6:	8b7b      	ldrh	r3, [r7, #26]
 8003cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f007 fc7f 	bl	800b5e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01f      	beq.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0c:	833b      	strh	r3, [r7, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	441a      	add	r2, r3
 8003d1c:	8b3b      	ldrh	r3, [r7, #24]
 8003d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e31f      	b.n	8004376 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d021      	beq.n	8003d84 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d5a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	441a      	add	r2, r3
 8003d6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	f040 82ca 	bne.w	8004324 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d98:	441a      	add	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003da6:	441a      	add	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d309      	bcc.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6a1a      	ldr	r2, [r3, #32]
 8003dc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dc4:	1ad2      	subs	r2, r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	621a      	str	r2, [r3, #32]
 8003dca:	e015      	b.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d107      	bne.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003dd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003de2:	e009      	b.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2200      	movs	r2, #0
 8003df6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d15f      	bne.n	8003ec0 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e14:	4413      	add	r3, r2
 8003e16:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	00da      	lsls	r2, r3, #3
 8003e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e20:	4413      	add	r3, r2
 8003e22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e36:	801a      	strh	r2, [r3, #0]
 8003e38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	e051      	b.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003e54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e56:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e58:	d816      	bhi.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x382>
 8003e5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	029b      	lsls	r3, r3, #10
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	e037      	b.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x398>
 8003e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	029b      	lsls	r3, r3, #10
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4313      	orrs	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ebc:	801a      	strh	r2, [r3, #0]
 8003ebe:	e01b      	b.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d117      	bne.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003edc:	4413      	add	r3, r2
 8003ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	00da      	lsls	r2, r3, #3
 8003ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ee8:	4413      	add	r3, r2
 8003eea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6959      	ldr	r1, [r3, #20]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	891a      	ldrh	r2, [r3, #8]
 8003f04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f005 fc15 	bl	8009736 <USB_WritePMA>
 8003f0c:	e20a      	b.n	8004324 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	4413      	add	r3, r2
 8003f28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f32:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d307      	bcc.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f4a:	1ad2      	subs	r2, r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	619a      	str	r2, [r3, #24]
 8003f50:	e002      	b.n	8003f58 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2200      	movs	r2, #0
 8003f56:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 80f6 	bne.w	800414e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	785b      	ldrb	r3, [r3, #1]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d126      	bne.n	8003fb8 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f7e:	4413      	add	r3, r2
 8003f80:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	00da      	lsls	r2, r3, #3
 8003f88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f90:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fa0:	801a      	strh	r2, [r3, #0]
 8003fa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fb4:	801a      	strh	r2, [r3, #0]
 8003fb6:	e01a      	b.n	8003fee <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d116      	bne.n	8003fee <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fd4:	4413      	add	r3, r2
 8003fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	00da      	lsls	r2, r3, #3
 8003fde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fe6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fea:	2200      	movs	r2, #0
 8003fec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d12f      	bne.n	800405e <HAL_PCD_EP_DB_Transmit+0x558>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800400e:	b29b      	uxth	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004016:	4413      	add	r3, r2
 8004018:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	00da      	lsls	r2, r3, #3
 8004022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004026:	4413      	add	r3, r2
 8004028:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800402c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004030:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800403c:	b29a      	uxth	r2, r3
 800403e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004042:	801a      	strh	r2, [r3, #0]
 8004044:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004054:	b29a      	uxth	r2, r3
 8004056:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800405a:	801a      	strh	r2, [r3, #0]
 800405c:	e01c      	b.n	8004098 <HAL_PCD_EP_DB_Transmit+0x592>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	785b      	ldrb	r3, [r3, #1]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d118      	bne.n	8004098 <HAL_PCD_EP_DB_Transmit+0x592>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004076:	4413      	add	r3, r2
 8004078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	00da      	lsls	r2, r3, #3
 8004082:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004086:	4413      	add	r3, r2
 8004088:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800408c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004094:	2200      	movs	r2, #0
 8004096:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	78db      	ldrb	r3, [r3, #3]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d127      	bne.n	80040f0 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80040be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80040c2:	f083 0320 	eor.w	r3, r3, #32
 80040c6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	441a      	add	r2, r3
 80040d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80040dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	4619      	mov	r1, r3
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f007 fa75 	bl	800b5e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d121      	bne.n	800414a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800411c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004120:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	441a      	add	r2, r3
 8004132:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800413a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800413e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004146:	b29b      	uxth	r3, r3
 8004148:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e113      	b.n	8004376 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d121      	bne.n	800419c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800416e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004172:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	441a      	add	r2, r3
 8004184:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800418c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004190:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004198:	b29b      	uxth	r3, r3
 800419a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	f040 80be 	bne.w	8004324 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80041b0:	441a      	add	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80041be:	441a      	add	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6a1a      	ldr	r2, [r3, #32]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d309      	bcc.n	80041e4 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6a1a      	ldr	r2, [r3, #32]
 80041da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041dc:	1ad2      	subs	r2, r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	621a      	str	r2, [r3, #32]
 80041e2:	e015      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d107      	bne.n	80041fc <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80041ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80041f0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80041fa:	e009      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2200      	movs	r2, #0
 8004206:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d15f      	bne.n	80042de <HAL_PCD_EP_DB_Transmit+0x7d8>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800422c:	b29b      	uxth	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004232:	4413      	add	r3, r2
 8004234:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	00da      	lsls	r2, r3, #3
 800423c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800423e:	4413      	add	r3, r2
 8004240:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004244:	667b      	str	r3, [r7, #100]	@ 0x64
 8004246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004250:	b29a      	uxth	r2, r3
 8004252:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <HAL_PCD_EP_DB_Transmit+0x76c>
 800425c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426a:	b29a      	uxth	r2, r3
 800426c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800426e:	801a      	strh	r2, [r3, #0]
 8004270:	e04e      	b.n	8004310 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004272:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004274:	2b3e      	cmp	r3, #62	@ 0x3e
 8004276:	d816      	bhi.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	663b      	str	r3, [r7, #96]	@ 0x60
 800427e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_PCD_EP_DB_Transmit+0x788>
 8004288:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800428a:	3301      	adds	r3, #1
 800428c:	663b      	str	r3, [r7, #96]	@ 0x60
 800428e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29a      	uxth	r2, r3
 8004294:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004296:	b29b      	uxth	r3, r3
 8004298:	029b      	lsls	r3, r3, #10
 800429a:	b29b      	uxth	r3, r3
 800429c:	4313      	orrs	r3, r2
 800429e:	b29a      	uxth	r2, r3
 80042a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	e034      	b.n	8004310 <HAL_PCD_EP_DB_Transmit+0x80a>
 80042a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <HAL_PCD_EP_DB_Transmit+0x7b6>
 80042b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042b8:	3b01      	subs	r3, #1
 80042ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80042bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	029b      	lsls	r3, r3, #10
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	4313      	orrs	r3, r2
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	e018      	b.n	8004310 <HAL_PCD_EP_DB_Transmit+0x80a>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d114      	bne.n	8004310 <HAL_PCD_EP_DB_Transmit+0x80a>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042f4:	4413      	add	r3, r2
 80042f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	00da      	lsls	r2, r3, #3
 80042fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004300:	4413      	add	r3, r2
 8004302:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004306:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004308:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800430a:	b29a      	uxth	r2, r3
 800430c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800430e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	6959      	ldr	r1, [r3, #20]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	895a      	ldrh	r2, [r3, #10]
 800431c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800431e:	b29b      	uxth	r3, r3
 8004320:	f005 fa09 	bl	8009736 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800433a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800433e:	82fb      	strh	r3, [r7, #22]
 8004340:	8afb      	ldrh	r3, [r7, #22]
 8004342:	f083 0310 	eor.w	r3, r3, #16
 8004346:	82fb      	strh	r3, [r7, #22]
 8004348:	8afb      	ldrh	r3, [r7, #22]
 800434a:	f083 0320 	eor.w	r3, r3, #32
 800434e:	82fb      	strh	r3, [r7, #22]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	8afb      	ldrh	r3, [r7, #22]
 8004360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800436c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004370:	b29b      	uxth	r3, r3
 8004372:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3798      	adds	r7, #152	@ 0x98
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800437e:	b480      	push	{r7}
 8004380:	b087      	sub	sp, #28
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	817b      	strh	r3, [r7, #10]
 800438c:	4613      	mov	r3, r2
 800438e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004390:	897b      	ldrh	r3, [r7, #10]
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00b      	beq.n	80043b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800439c:	897b      	ldrh	r3, [r7, #10]
 800439e:	f003 0207 	and.w	r2, r3, #7
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	3310      	adds	r3, #16
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e009      	b.n	80043c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043b4:	897a      	ldrh	r2, [r7, #10]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043c8:	893b      	ldrh	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	80da      	strh	r2, [r3, #6]
 80043dc:	e00b      	b.n	80043f6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2201      	movs	r2, #1
 80043e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004428:	b29b      	uxth	r3, r3
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800443c:	b29b      	uxth	r3, r3
 800443e:	f043 0302 	orr.w	r3, r3, #2
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d141      	bne.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004466:	4b4b      	ldr	r3, [pc, #300]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004472:	d131      	bne.n	80044d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004474:	4b47      	ldr	r3, [pc, #284]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800447a:	4a46      	ldr	r2, [pc, #280]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004484:	4b43      	ldr	r3, [pc, #268]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800448c:	4a41      	ldr	r2, [pc, #260]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004494:	4b40      	ldr	r3, [pc, #256]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2232      	movs	r2, #50	@ 0x32
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	4a3f      	ldr	r2, [pc, #252]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	0c9b      	lsrs	r3, r3, #18
 80044a6:	3301      	adds	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044aa:	e002      	b.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b2:	4b38      	ldr	r3, [pc, #224]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044be:	d102      	bne.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f2      	bne.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044c6:	4b33      	ldr	r3, [pc, #204]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d2:	d158      	bne.n	8004586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e057      	b.n	8004588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044de:	4a2d      	ldr	r2, [pc, #180]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044e8:	e04d      	b.n	8004586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f0:	d141      	bne.n	8004576 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044f2:	4b28      	ldr	r3, [pc, #160]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	d131      	bne.n	8004564 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004500:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004506:	4a23      	ldr	r2, [pc, #140]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800450c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004510:	4b20      	ldr	r3, [pc, #128]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004518:	4a1e      	ldr	r2, [pc, #120]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800451e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004520:	4b1d      	ldr	r3, [pc, #116]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2232      	movs	r2, #50	@ 0x32
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	4a1c      	ldr	r2, [pc, #112]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	0c9b      	lsrs	r3, r3, #18
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004536:	e002      	b.n	800453e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3b01      	subs	r3, #1
 800453c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800453e:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800454a:	d102      	bne.n	8004552 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f2      	bne.n	8004538 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004552:	4b10      	ldr	r3, [pc, #64]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800455e:	d112      	bne.n	8004586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e011      	b.n	8004588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004564:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800456a:	4a0a      	ldr	r2, [pc, #40]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004570:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004574:	e007      	b.n	8004586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004576:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800457e:	4a05      	ldr	r2, [pc, #20]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004580:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004584:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40007000 	.word	0x40007000
 8004598:	20000000 	.word	0x20000000
 800459c:	431bde83 	.word	0x431bde83

080045a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4a04      	ldr	r2, [pc, #16]	@ (80045bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045ae:	6093      	str	r3, [r2, #8]
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40007000 	.word	0x40007000

080045c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e2fe      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d075      	beq.n	80046ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045de:	4b97      	ldr	r3, [pc, #604]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045e8:	4b94      	ldr	r3, [pc, #592]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b0c      	cmp	r3, #12
 80045f6:	d102      	bne.n	80045fe <HAL_RCC_OscConfig+0x3e>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d002      	beq.n	8004604 <HAL_RCC_OscConfig+0x44>
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d10b      	bne.n	800461c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004604:	4b8d      	ldr	r3, [pc, #564]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d05b      	beq.n	80046c8 <HAL_RCC_OscConfig+0x108>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d157      	bne.n	80046c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e2d9      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004624:	d106      	bne.n	8004634 <HAL_RCC_OscConfig+0x74>
 8004626:	4b85      	ldr	r3, [pc, #532]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a84      	ldr	r2, [pc, #528]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 800462c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e01d      	b.n	8004670 <HAL_RCC_OscConfig+0xb0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800463c:	d10c      	bne.n	8004658 <HAL_RCC_OscConfig+0x98>
 800463e:	4b7f      	ldr	r3, [pc, #508]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a7e      	ldr	r2, [pc, #504]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004644:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	4b7c      	ldr	r3, [pc, #496]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7b      	ldr	r2, [pc, #492]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	e00b      	b.n	8004670 <HAL_RCC_OscConfig+0xb0>
 8004658:	4b78      	ldr	r3, [pc, #480]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a77      	ldr	r2, [pc, #476]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 800465e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b75      	ldr	r3, [pc, #468]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a74      	ldr	r2, [pc, #464]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 800466a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800466e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d013      	beq.n	80046a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fd fba6 	bl	8001dc8 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7fd fba2 	bl	8001dc8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	@ 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e29e      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004692:	4b6a      	ldr	r3, [pc, #424]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0xc0>
 800469e:	e014      	b.n	80046ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fd fb92 	bl	8001dc8 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fd fb8e 	bl	8001dc8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	@ 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e28a      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ba:	4b60      	ldr	r3, [pc, #384]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0xe8>
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d075      	beq.n	80047c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d6:	4b59      	ldr	r3, [pc, #356]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046e0:	4b56      	ldr	r3, [pc, #344]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	d102      	bne.n	80046f6 <HAL_RCC_OscConfig+0x136>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d002      	beq.n	80046fc <HAL_RCC_OscConfig+0x13c>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d11f      	bne.n	800473c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046fc:	4b4f      	ldr	r3, [pc, #316]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_OscConfig+0x154>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e25d      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004714:	4b49      	ldr	r3, [pc, #292]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	4946      	ldr	r1, [pc, #280]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004728:	4b45      	ldr	r3, [pc, #276]	@ (8004840 <HAL_RCC_OscConfig+0x280>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fd faff 	bl	8001d30 <HAL_InitTick>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d043      	beq.n	80047c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e249      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d023      	beq.n	800478c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004744:	4b3d      	ldr	r3, [pc, #244]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a3c      	ldr	r2, [pc, #240]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 800474a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd fb3a 	bl	8001dc8 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004758:	f7fd fb36 	bl	8001dc8 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e232      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800476a:	4b34      	ldr	r3, [pc, #208]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004776:	4b31      	ldr	r3, [pc, #196]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	061b      	lsls	r3, r3, #24
 8004784:	492d      	ldr	r1, [pc, #180]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]
 800478a:	e01a      	b.n	80047c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800478c:	4b2b      	ldr	r3, [pc, #172]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a2a      	ldr	r2, [pc, #168]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004792:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fd fb16 	bl	8001dc8 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a0:	f7fd fb12 	bl	8001dc8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e20e      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047b2:	4b22      	ldr	r3, [pc, #136]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x1e0>
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d041      	beq.n	8004852 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01c      	beq.n	8004810 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047d6:	4b19      	ldr	r3, [pc, #100]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 80047d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047dc:	4a17      	ldr	r2, [pc, #92]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fd faef 	bl	8001dc8 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ee:	f7fd faeb 	bl	8001dc8 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e1e7      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004800:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0ef      	beq.n	80047ee <HAL_RCC_OscConfig+0x22e>
 800480e:	e020      	b.n	8004852 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004810:	4b0a      	ldr	r3, [pc, #40]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004816:	4a09      	ldr	r2, [pc, #36]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fd fad2 	bl	8001dc8 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004826:	e00d      	b.n	8004844 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004828:	f7fd face 	bl	8001dc8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d906      	bls.n	8004844 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e1ca      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000
 8004840:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004844:	4b8c      	ldr	r3, [pc, #560]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1ea      	bne.n	8004828 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 80a6 	beq.w	80049ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004860:	2300      	movs	r3, #0
 8004862:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004864:	4b84      	ldr	r3, [pc, #528]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_OscConfig+0x2b4>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x2b6>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00d      	beq.n	8004896 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004884:	6593      	str	r3, [r2, #88]	@ 0x58
 8004886:	4b7c      	ldr	r3, [pc, #496]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004892:	2301      	movs	r3, #1
 8004894:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004896:	4b79      	ldr	r3, [pc, #484]	@ (8004a7c <HAL_RCC_OscConfig+0x4bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d118      	bne.n	80048d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a2:	4b76      	ldr	r3, [pc, #472]	@ (8004a7c <HAL_RCC_OscConfig+0x4bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a75      	ldr	r2, [pc, #468]	@ (8004a7c <HAL_RCC_OscConfig+0x4bc>)
 80048a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ae:	f7fd fa8b 	bl	8001dc8 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b6:	f7fd fa87 	bl	8001dc8 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e183      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c8:	4b6c      	ldr	r3, [pc, #432]	@ (8004a7c <HAL_RCC_OscConfig+0x4bc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d108      	bne.n	80048ee <HAL_RCC_OscConfig+0x32e>
 80048dc:	4b66      	ldr	r3, [pc, #408]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e2:	4a65      	ldr	r2, [pc, #404]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048ec:	e024      	b.n	8004938 <HAL_RCC_OscConfig+0x378>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d110      	bne.n	8004918 <HAL_RCC_OscConfig+0x358>
 80048f6:	4b60      	ldr	r3, [pc, #384]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004906:	4b5c      	ldr	r3, [pc, #368]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490c:	4a5a      	ldr	r2, [pc, #360]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004916:	e00f      	b.n	8004938 <HAL_RCC_OscConfig+0x378>
 8004918:	4b57      	ldr	r3, [pc, #348]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	4a56      	ldr	r2, [pc, #344]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004928:	4b53      	ldr	r3, [pc, #332]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492e:	4a52      	ldr	r2, [pc, #328]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004930:	f023 0304 	bic.w	r3, r3, #4
 8004934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d016      	beq.n	800496e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fd fa42 	bl	8001dc8 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004946:	e00a      	b.n	800495e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fd fa3e 	bl	8001dc8 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e138      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495e:	4b46      	ldr	r3, [pc, #280]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0ed      	beq.n	8004948 <HAL_RCC_OscConfig+0x388>
 800496c:	e015      	b.n	800499a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496e:	f7fd fa2b 	bl	8001dc8 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004974:	e00a      	b.n	800498c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004976:	f7fd fa27 	bl	8001dc8 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004984:	4293      	cmp	r3, r2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e121      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800498c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1ed      	bne.n	8004976 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800499a:	7ffb      	ldrb	r3, [r7, #31]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d105      	bne.n	80049ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a0:	4b35      	ldr	r3, [pc, #212]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 80049a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a4:	4a34      	ldr	r2, [pc, #208]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 80049a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d03c      	beq.n	8004a32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01c      	beq.n	80049fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 80049c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd f9fa 	bl	8001dc8 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049d8:	f7fd f9f6 	bl	8001dc8 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e0f2      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049ea:	4b23      	ldr	r3, [pc, #140]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 80049ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ef      	beq.n	80049d8 <HAL_RCC_OscConfig+0x418>
 80049f8:	e01b      	b.n	8004a32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 80049fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a00:	4a1d      	ldr	r2, [pc, #116]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0a:	f7fd f9dd 	bl	8001dc8 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a12:	f7fd f9d9 	bl	8001dc8 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e0d5      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a24:	4b14      	ldr	r3, [pc, #80]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1ef      	bne.n	8004a12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80c9 	beq.w	8004bce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	f000 8083 	beq.w	8004b50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d15e      	bne.n	8004b10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a52:	4b09      	ldr	r3, [pc, #36]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a08      	ldr	r2, [pc, #32]	@ (8004a78 <HAL_RCC_OscConfig+0x4b8>)
 8004a58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fd f9b3 	bl	8001dc8 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a64:	e00c      	b.n	8004a80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a66:	f7fd f9af 	bl	8001dc8 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d905      	bls.n	8004a80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e0ab      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a80:	4b55      	ldr	r3, [pc, #340]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1ec      	bne.n	8004a66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a8c:	4b52      	ldr	r3, [pc, #328]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	4b52      	ldr	r3, [pc, #328]	@ (8004bdc <HAL_RCC_OscConfig+0x61c>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6a11      	ldr	r1, [r2, #32]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a9c:	3a01      	subs	r2, #1
 8004a9e:	0112      	lsls	r2, r2, #4
 8004aa0:	4311      	orrs	r1, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004aa6:	0212      	lsls	r2, r2, #8
 8004aa8:	4311      	orrs	r1, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004aae:	0852      	lsrs	r2, r2, #1
 8004ab0:	3a01      	subs	r2, #1
 8004ab2:	0552      	lsls	r2, r2, #21
 8004ab4:	4311      	orrs	r1, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004aba:	0852      	lsrs	r2, r2, #1
 8004abc:	3a01      	subs	r2, #1
 8004abe:	0652      	lsls	r2, r2, #25
 8004ac0:	4311      	orrs	r1, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ac6:	06d2      	lsls	r2, r2, #27
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	4943      	ldr	r1, [pc, #268]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad0:	4b41      	ldr	r3, [pc, #260]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a40      	ldr	r2, [pc, #256]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ada:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004adc:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4a3d      	ldr	r2, [pc, #244]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ae6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd f96e 	bl	8001dc8 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd f96a 	bl	8001dc8 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e066      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b02:	4b35      	ldr	r3, [pc, #212]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x530>
 8004b0e:	e05e      	b.n	8004bce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b10:	4b31      	ldr	r3, [pc, #196]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a30      	ldr	r2, [pc, #192]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fd f954 	bl	8001dc8 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fd f950 	bl	8001dc8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e04c      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b36:	4b28      	ldr	r3, [pc, #160]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004b42:	4b25      	ldr	r3, [pc, #148]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	4924      	ldr	r1, [pc, #144]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004b48:	4b25      	ldr	r3, [pc, #148]	@ (8004be0 <HAL_RCC_OscConfig+0x620>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60cb      	str	r3, [r1, #12]
 8004b4e:	e03e      	b.n	8004bce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e039      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd8 <HAL_RCC_OscConfig+0x618>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f003 0203 	and.w	r2, r3, #3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d12c      	bne.n	8004bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d123      	bne.n	8004bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d11b      	bne.n	8004bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d113      	bne.n	8004bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d109      	bne.n	8004bca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d001      	beq.n	8004bce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3720      	adds	r7, #32
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	019f800c 	.word	0x019f800c
 8004be0:	feeefffc 	.word	0xfeeefffc

08004be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e11e      	b.n	8004e3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bfc:	4b91      	ldr	r3, [pc, #580]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d910      	bls.n	8004c2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 020f 	bic.w	r2, r3, #15
 8004c12:	498c      	ldr	r1, [pc, #560]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1a:	4b8a      	ldr	r3, [pc, #552]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e106      	b.n	8004e3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d073      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d129      	bne.n	8004c94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c40:	4b81      	ldr	r3, [pc, #516]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0f4      	b.n	8004e3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004c50:	f000 f99e 	bl	8004f90 <RCC_GetSysClockFreqFromPLLSource>
 8004c54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4a7c      	ldr	r2, [pc, #496]	@ (8004e4c <HAL_RCC_ClockConfig+0x268>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d93f      	bls.n	8004cde <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c5e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d033      	beq.n	8004cde <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d12f      	bne.n	8004cde <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c7e:	4b72      	ldr	r3, [pc, #456]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c86:	4a70      	ldr	r2, [pc, #448]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c8e:	2380      	movs	r3, #128	@ 0x80
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e024      	b.n	8004cde <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d107      	bne.n	8004cac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0c6      	b.n	8004e3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cac:	4b66      	ldr	r3, [pc, #408]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0be      	b.n	8004e3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004cbc:	f000 f8ce 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4a61      	ldr	r2, [pc, #388]	@ (8004e4c <HAL_RCC_ClockConfig+0x268>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d909      	bls.n	8004cde <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cca:	4b5f      	ldr	r3, [pc, #380]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004cda:	2380      	movs	r3, #128	@ 0x80
 8004cdc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cde:	4b5a      	ldr	r3, [pc, #360]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f023 0203 	bic.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4957      	ldr	r1, [pc, #348]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf0:	f7fd f86a 	bl	8001dc8 <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf8:	f7fd f866 	bl	8001dc8 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e095      	b.n	8004e3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 020c 	and.w	r2, r3, #12
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d1eb      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d023      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d38:	4b43      	ldr	r3, [pc, #268]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4a42      	ldr	r2, [pc, #264]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004d3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004d50:	4b3d      	ldr	r3, [pc, #244]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d58:	4a3b      	ldr	r2, [pc, #236]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004d5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d60:	4b39      	ldr	r3, [pc, #228]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4936      	ldr	r1, [pc, #216]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b80      	cmp	r3, #128	@ 0x80
 8004d78:	d105      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d7a:	4b33      	ldr	r3, [pc, #204]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4a32      	ldr	r2, [pc, #200]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004d80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d86:	4b2f      	ldr	r3, [pc, #188]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d21d      	bcs.n	8004dd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d94:	4b2b      	ldr	r3, [pc, #172]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f023 020f 	bic.w	r2, r3, #15
 8004d9c:	4929      	ldr	r1, [pc, #164]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004da4:	f7fd f810 	bl	8001dc8 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dac:	f7fd f80c 	bl	8001dc8 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e03b      	b.n	8004e3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b20      	ldr	r3, [pc, #128]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1ed      	bne.n	8004dac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4917      	ldr	r1, [pc, #92]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dfa:	4b13      	ldr	r3, [pc, #76]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	490f      	ldr	r1, [pc, #60]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e0e:	f000 f825 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 8004e12:	4602      	mov	r2, r0
 8004e14:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	490c      	ldr	r1, [pc, #48]	@ (8004e50 <HAL_RCC_ClockConfig+0x26c>)
 8004e20:	5ccb      	ldrb	r3, [r1, r3]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e54 <HAL_RCC_ClockConfig+0x270>)
 8004e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <HAL_RCC_ClockConfig+0x274>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fc ff7c 	bl	8001d30 <HAL_InitTick>
 8004e38:	4603      	mov	r3, r0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40022000 	.word	0x40022000
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	04c4b400 	.word	0x04c4b400
 8004e50:	0800cc9c 	.word	0x0800cc9c
 8004e54:	20000000 	.word	0x20000000
 8004e58:	2000009c 	.word	0x2000009c

08004e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e62:	4b2c      	ldr	r3, [pc, #176]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d102      	bne.n	8004e74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	e047      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e74:	4b27      	ldr	r3, [pc, #156]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 030c 	and.w	r3, r3, #12
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d102      	bne.n	8004e86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e80:	4b26      	ldr	r3, [pc, #152]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	e03e      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e86:	4b23      	ldr	r3, [pc, #140]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b0c      	cmp	r3, #12
 8004e90:	d136      	bne.n	8004f00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e92:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d10c      	bne.n	8004eca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	4a16      	ldr	r2, [pc, #88]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eba:	68d2      	ldr	r2, [r2, #12]
 8004ebc:	0a12      	lsrs	r2, r2, #8
 8004ebe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	617b      	str	r3, [r7, #20]
      break;
 8004ec8:	e00c      	b.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eca:	4a13      	ldr	r2, [pc, #76]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed2:	4a10      	ldr	r2, [pc, #64]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed4:	68d2      	ldr	r2, [r2, #12]
 8004ed6:	0a12      	lsrs	r2, r2, #8
 8004ed8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
      break;
 8004ee2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	0e5b      	lsrs	r3, r3, #25
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	e001      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f04:	693b      	ldr	r3, [r7, #16]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000
 8004f18:	00f42400 	.word	0x00f42400
 8004f1c:	016e3600 	.word	0x016e3600

08004f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f24:	4b03      	ldr	r3, [pc, #12]	@ (8004f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f26:	681b      	ldr	r3, [r3, #0]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000000 	.word	0x20000000

08004f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f3c:	f7ff fff0 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	4904      	ldr	r1, [pc, #16]	@ (8004f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	0800ccac 	.word	0x0800ccac

08004f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f68:	f7ff ffda 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	0adb      	lsrs	r3, r3, #11
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4904      	ldr	r1, [pc, #16]	@ (8004f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	0800ccac 	.word	0x0800ccac

08004f90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f96:	4b1e      	ldr	r3, [pc, #120]	@ (8005010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8005010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	3301      	adds	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d10c      	bne.n	8004fce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fb4:	4a17      	ldr	r2, [pc, #92]	@ (8005014 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	4a14      	ldr	r2, [pc, #80]	@ (8005010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fbe:	68d2      	ldr	r2, [r2, #12]
 8004fc0:	0a12      	lsrs	r2, r2, #8
 8004fc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	617b      	str	r3, [r7, #20]
    break;
 8004fcc:	e00c      	b.n	8004fe8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fce:	4a12      	ldr	r2, [pc, #72]	@ (8005018 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8005010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fd8:	68d2      	ldr	r2, [r2, #12]
 8004fda:	0a12      	lsrs	r2, r2, #8
 8004fdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fe0:	fb02 f303 	mul.w	r3, r2, r3
 8004fe4:	617b      	str	r3, [r7, #20]
    break;
 8004fe6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fe8:	4b09      	ldr	r3, [pc, #36]	@ (8005010 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	0e5b      	lsrs	r3, r3, #25
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005002:	687b      	ldr	r3, [r7, #4]
}
 8005004:	4618      	mov	r0, r3
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40021000 	.word	0x40021000
 8005014:	016e3600 	.word	0x016e3600
 8005018:	00f42400 	.word	0x00f42400

0800501c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005024:	2300      	movs	r3, #0
 8005026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005028:	2300      	movs	r3, #0
 800502a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8098 	beq.w	800516a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800503e:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10d      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	4b40      	ldr	r3, [pc, #256]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504e:	4a3f      	ldr	r2, [pc, #252]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005054:	6593      	str	r3, [r2, #88]	@ 0x58
 8005056:	4b3d      	ldr	r3, [pc, #244]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800505e:	60bb      	str	r3, [r7, #8]
 8005060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005062:	2301      	movs	r3, #1
 8005064:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005066:	4b3a      	ldr	r3, [pc, #232]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a39      	ldr	r2, [pc, #228]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800506c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005070:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005072:	f7fc fea9 	bl	8001dc8 <HAL_GetTick>
 8005076:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005078:	e009      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507a:	f7fc fea5 	bl	8001dc8 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d902      	bls.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	74fb      	strb	r3, [r7, #19]
        break;
 800508c:	e005      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800508e:	4b30      	ldr	r3, [pc, #192]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0ef      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800509a:	7cfb      	ldrb	r3, [r7, #19]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d159      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050a0:	4b2a      	ldr	r3, [pc, #168]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01e      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d019      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050bc:	4b23      	ldr	r3, [pc, #140]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c8:	4b20      	ldr	r3, [pc, #128]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ce:	4a1f      	ldr	r2, [pc, #124]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d8:	4b1c      	ldr	r3, [pc, #112]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050de:	4a1b      	ldr	r2, [pc, #108]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050e8:	4a18      	ldr	r2, [pc, #96]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d016      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fc fe65 	bl	8001dc8 <HAL_GetTick>
 80050fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005100:	e00b      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fc fe61 	bl	8001dc8 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d902      	bls.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	74fb      	strb	r3, [r7, #19]
            break;
 8005118:	e006      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511a:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0ec      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005128:	7cfb      	ldrb	r3, [r7, #19]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800512e:	4b07      	ldr	r3, [pc, #28]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005134:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513c:	4903      	ldr	r1, [pc, #12]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005144:	e008      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005146:	7cfb      	ldrb	r3, [r7, #19]
 8005148:	74bb      	strb	r3, [r7, #18]
 800514a:	e005      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800514c:	40021000 	.word	0x40021000
 8005150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005154:	7cfb      	ldrb	r3, [r7, #19]
 8005156:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005158:	7c7b      	ldrb	r3, [r7, #17]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d105      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515e:	4ba6      	ldr	r3, [pc, #664]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005162:	4aa5      	ldr	r2, [pc, #660]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005168:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005176:	4ba0      	ldr	r3, [pc, #640]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517c:	f023 0203 	bic.w	r2, r3, #3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	499c      	ldr	r1, [pc, #624]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005198:	4b97      	ldr	r3, [pc, #604]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519e:	f023 020c 	bic.w	r2, r3, #12
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	4994      	ldr	r1, [pc, #592]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051ba:	4b8f      	ldr	r3, [pc, #572]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	498b      	ldr	r1, [pc, #556]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051dc:	4b86      	ldr	r3, [pc, #536]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	4983      	ldr	r1, [pc, #524]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051fe:	4b7e      	ldr	r3, [pc, #504]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005204:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	497a      	ldr	r1, [pc, #488]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005220:	4b75      	ldr	r3, [pc, #468]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	4972      	ldr	r1, [pc, #456]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005242:	4b6d      	ldr	r3, [pc, #436]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005248:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	4969      	ldr	r1, [pc, #420]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005264:	4b64      	ldr	r3, [pc, #400]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	4961      	ldr	r1, [pc, #388]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005286:	4b5c      	ldr	r3, [pc, #368]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	4958      	ldr	r1, [pc, #352]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d015      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052a8:	4b53      	ldr	r3, [pc, #332]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b6:	4950      	ldr	r1, [pc, #320]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052c6:	d105      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c8:	4b4b      	ldr	r3, [pc, #300]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a4a      	ldr	r2, [pc, #296]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d015      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052e0:	4b45      	ldr	r3, [pc, #276]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	4942      	ldr	r1, [pc, #264]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052fe:	d105      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005300:	4b3d      	ldr	r3, [pc, #244]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	4a3c      	ldr	r2, [pc, #240]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800530a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d015      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005318:	4b37      	ldr	r3, [pc, #220]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005326:	4934      	ldr	r1, [pc, #208]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005336:	d105      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005338:	4b2f      	ldr	r3, [pc, #188]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a2e      	ldr	r2, [pc, #184]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005342:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d015      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005350:	4b29      	ldr	r3, [pc, #164]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005356:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535e:	4926      	ldr	r1, [pc, #152]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800536e:	d105      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005370:	4b21      	ldr	r3, [pc, #132]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a20      	ldr	r2, [pc, #128]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800537a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d015      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005388:	4b1b      	ldr	r3, [pc, #108]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005396:	4918      	ldr	r1, [pc, #96]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053a6:	d105      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a8:	4b13      	ldr	r3, [pc, #76]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4a12      	ldr	r2, [pc, #72]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d015      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053c0:	4b0d      	ldr	r3, [pc, #52]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ce:	490a      	ldr	r1, [pc, #40]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053de:	d105      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053e0:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	4a04      	ldr	r2, [pc, #16]	@ (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80053ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40021000 	.word	0x40021000

080053fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e049      	b.n	80054a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fb fd9c 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3304      	adds	r3, #4
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f000 fb12 	bl	8005a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d001      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e04a      	b.n	800555a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a21      	ldr	r2, [pc, #132]	@ (8005568 <HAL_TIM_Base_Start_IT+0xbc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x6c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ee:	d013      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x6c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1d      	ldr	r2, [pc, #116]	@ (800556c <HAL_TIM_Base_Start_IT+0xc0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x6c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005570 <HAL_TIM_Base_Start_IT+0xc4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x6c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1a      	ldr	r2, [pc, #104]	@ (8005574 <HAL_TIM_Base_Start_IT+0xc8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x6c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a19      	ldr	r2, [pc, #100]	@ (8005578 <HAL_TIM_Base_Start_IT+0xcc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d115      	bne.n	8005544 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	4b17      	ldr	r3, [pc, #92]	@ (800557c <HAL_TIM_Base_Start_IT+0xd0>)
 8005520:	4013      	ands	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b06      	cmp	r3, #6
 8005528:	d015      	beq.n	8005556 <HAL_TIM_Base_Start_IT+0xaa>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005530:	d011      	beq.n	8005556 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0201 	orr.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005542:	e008      	b.n	8005556 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	e000      	b.n	8005558 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40013400 	.word	0x40013400
 8005578:	40014000 	.word	0x40014000
 800557c:	00010007 	.word	0x00010007

08005580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d020      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01b      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0202 	mvn.w	r2, #2
 80055b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa2c 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 80055d0:	e005      	b.n	80055de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa1e 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fa2f 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d020      	beq.n	8005630 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01b      	beq.n	8005630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0204 	mvn.w	r2, #4
 8005600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fa06 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 800561c:	e005      	b.n	800562a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f9f8 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fa09 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d020      	beq.n	800567c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01b      	beq.n	800567c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0208 	mvn.w	r2, #8
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2204      	movs	r2, #4
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9e0 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f9d2 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f9e3 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f003 0310 	and.w	r3, r3, #16
 8005682:	2b00      	cmp	r3, #0
 8005684:	d020      	beq.n	80056c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01b      	beq.n	80056c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0210 	mvn.w	r2, #16
 8005698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2208      	movs	r2, #8
 800569e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f9ba 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 80056b4:	e005      	b.n	80056c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f9ac 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f9bd 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00c      	beq.n	80056ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0201 	mvn.w	r2, #1
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fb fa78 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d104      	bne.n	8005700 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00c      	beq.n	800571a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fb69 	bl	8005dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00c      	beq.n	800573e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fb61 	bl	8005e00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00c      	beq.n	8005762 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800575a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f977 	bl	8005a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f06f 0220 	mvn.w	r2, #32
 800577e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fb29 	bl	8005dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00c      	beq.n	80057aa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80057a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fb35 	bl	8005e14 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00c      	beq.n	80057ce <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80057c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fb2d 	bl	8005e28 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00c      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80057ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fb25 	bl	8005e3c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00c      	beq.n	8005816 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800580e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fb1d 	bl	8005e50 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_TIM_ConfigClockSource+0x1c>
 8005838:	2302      	movs	r3, #2
 800583a:	e0de      	b.n	80059fa <HAL_TIM_ConfigClockSource+0x1da>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800585a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800585e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a63      	ldr	r2, [pc, #396]	@ (8005a04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	f000 80a9 	beq.w	80059ce <HAL_TIM_ConfigClockSource+0x1ae>
 800587c:	4a61      	ldr	r2, [pc, #388]	@ (8005a04 <HAL_TIM_ConfigClockSource+0x1e4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	f200 80ae 	bhi.w	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005884:	4a60      	ldr	r2, [pc, #384]	@ (8005a08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	f000 80a1 	beq.w	80059ce <HAL_TIM_ConfigClockSource+0x1ae>
 800588c:	4a5e      	ldr	r2, [pc, #376]	@ (8005a08 <HAL_TIM_ConfigClockSource+0x1e8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	f200 80a6 	bhi.w	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005894:	4a5d      	ldr	r2, [pc, #372]	@ (8005a0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005896:	4293      	cmp	r3, r2
 8005898:	f000 8099 	beq.w	80059ce <HAL_TIM_ConfigClockSource+0x1ae>
 800589c:	4a5b      	ldr	r2, [pc, #364]	@ (8005a0c <HAL_TIM_ConfigClockSource+0x1ec>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	f200 809e 	bhi.w	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058a4:	4a5a      	ldr	r2, [pc, #360]	@ (8005a10 <HAL_TIM_ConfigClockSource+0x1f0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	f000 8091 	beq.w	80059ce <HAL_TIM_ConfigClockSource+0x1ae>
 80058ac:	4a58      	ldr	r2, [pc, #352]	@ (8005a10 <HAL_TIM_ConfigClockSource+0x1f0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	f200 8096 	bhi.w	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80058b8:	f000 8089 	beq.w	80059ce <HAL_TIM_ConfigClockSource+0x1ae>
 80058bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80058c0:	f200 808e 	bhi.w	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c8:	d03e      	beq.n	8005948 <HAL_TIM_ConfigClockSource+0x128>
 80058ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ce:	f200 8087 	bhi.w	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d6:	f000 8086 	beq.w	80059e6 <HAL_TIM_ConfigClockSource+0x1c6>
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058de:	d87f      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058e0:	2b70      	cmp	r3, #112	@ 0x70
 80058e2:	d01a      	beq.n	800591a <HAL_TIM_ConfigClockSource+0xfa>
 80058e4:	2b70      	cmp	r3, #112	@ 0x70
 80058e6:	d87b      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058e8:	2b60      	cmp	r3, #96	@ 0x60
 80058ea:	d050      	beq.n	800598e <HAL_TIM_ConfigClockSource+0x16e>
 80058ec:	2b60      	cmp	r3, #96	@ 0x60
 80058ee:	d877      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058f0:	2b50      	cmp	r3, #80	@ 0x50
 80058f2:	d03c      	beq.n	800596e <HAL_TIM_ConfigClockSource+0x14e>
 80058f4:	2b50      	cmp	r3, #80	@ 0x50
 80058f6:	d873      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80058f8:	2b40      	cmp	r3, #64	@ 0x40
 80058fa:	d058      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x18e>
 80058fc:	2b40      	cmp	r3, #64	@ 0x40
 80058fe:	d86f      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005900:	2b30      	cmp	r3, #48	@ 0x30
 8005902:	d064      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x1ae>
 8005904:	2b30      	cmp	r3, #48	@ 0x30
 8005906:	d86b      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005908:	2b20      	cmp	r3, #32
 800590a:	d060      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x1ae>
 800590c:	2b20      	cmp	r3, #32
 800590e:	d867      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d05c      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x1ae>
 8005914:	2b10      	cmp	r3, #16
 8005916:	d05a      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x1ae>
 8005918:	e062      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800592a:	f000 f9b3 	bl	8005c94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800593c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	609a      	str	r2, [r3, #8]
      break;
 8005946:	e04f      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005958:	f000 f99c 	bl	8005c94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800596a:	609a      	str	r2, [r3, #8]
      break;
 800596c:	e03c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	461a      	mov	r2, r3
 800597c:	f000 f90e 	bl	8005b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2150      	movs	r1, #80	@ 0x50
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f967 	bl	8005c5a <TIM_ITRx_SetConfig>
      break;
 800598c:	e02c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800599a:	461a      	mov	r2, r3
 800599c:	f000 f92d 	bl	8005bfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2160      	movs	r1, #96	@ 0x60
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 f957 	bl	8005c5a <TIM_ITRx_SetConfig>
      break;
 80059ac:	e01c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	461a      	mov	r2, r3
 80059bc:	f000 f8ee 	bl	8005b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2140      	movs	r1, #64	@ 0x40
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f947 	bl	8005c5a <TIM_ITRx_SetConfig>
      break;
 80059cc:	e00c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f000 f93e 	bl	8005c5a <TIM_ITRx_SetConfig>
      break;
 80059de:	e003      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
      break;
 80059e4:	e000      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80059e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	00100070 	.word	0x00100070
 8005a08:	00100040 	.word	0x00100040
 8005a0c:	00100030 	.word	0x00100030
 8005a10:	00100020 	.word	0x00100020

08005a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a42      	ldr	r2, [pc, #264]	@ (8005b80 <TIM_Base_SetConfig+0x11c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00f      	beq.n	8005a9c <TIM_Base_SetConfig+0x38>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a82:	d00b      	beq.n	8005a9c <TIM_Base_SetConfig+0x38>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a3f      	ldr	r2, [pc, #252]	@ (8005b84 <TIM_Base_SetConfig+0x120>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d007      	beq.n	8005a9c <TIM_Base_SetConfig+0x38>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b88 <TIM_Base_SetConfig+0x124>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_Base_SetConfig+0x38>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3d      	ldr	r2, [pc, #244]	@ (8005b8c <TIM_Base_SetConfig+0x128>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d108      	bne.n	8005aae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a33      	ldr	r2, [pc, #204]	@ (8005b80 <TIM_Base_SetConfig+0x11c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d01b      	beq.n	8005aee <TIM_Base_SetConfig+0x8a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005abc:	d017      	beq.n	8005aee <TIM_Base_SetConfig+0x8a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a30      	ldr	r2, [pc, #192]	@ (8005b84 <TIM_Base_SetConfig+0x120>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <TIM_Base_SetConfig+0x8a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8005b88 <TIM_Base_SetConfig+0x124>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00f      	beq.n	8005aee <TIM_Base_SetConfig+0x8a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8005b8c <TIM_Base_SetConfig+0x128>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00b      	beq.n	8005aee <TIM_Base_SetConfig+0x8a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8005b90 <TIM_Base_SetConfig+0x12c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d007      	beq.n	8005aee <TIM_Base_SetConfig+0x8a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8005b94 <TIM_Base_SetConfig+0x130>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_Base_SetConfig+0x8a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b98 <TIM_Base_SetConfig+0x134>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d108      	bne.n	8005b00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a16      	ldr	r2, [pc, #88]	@ (8005b80 <TIM_Base_SetConfig+0x11c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00f      	beq.n	8005b4c <TIM_Base_SetConfig+0xe8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <TIM_Base_SetConfig+0x128>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00b      	beq.n	8005b4c <TIM_Base_SetConfig+0xe8>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a16      	ldr	r2, [pc, #88]	@ (8005b90 <TIM_Base_SetConfig+0x12c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d007      	beq.n	8005b4c <TIM_Base_SetConfig+0xe8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a15      	ldr	r2, [pc, #84]	@ (8005b94 <TIM_Base_SetConfig+0x130>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_Base_SetConfig+0xe8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a14      	ldr	r2, [pc, #80]	@ (8005b98 <TIM_Base_SetConfig+0x134>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d103      	bne.n	8005b54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d105      	bne.n	8005b72 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f023 0201 	bic.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]
  }
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40012c00 	.word	0x40012c00
 8005b84:	40000400 	.word	0x40000400
 8005b88:	40000800 	.word	0x40000800
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f023 0201 	bic.w	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f023 030a 	bic.w	r3, r3, #10
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b087      	sub	sp, #28
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f023 0210 	bic.w	r2, r3, #16
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	031b      	lsls	r3, r3, #12
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f043 0307 	orr.w	r3, r3, #7
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	609a      	str	r2, [r3, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	021a      	lsls	r2, r3, #8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	609a      	str	r2, [r3, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e065      	b.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2c      	ldr	r2, [pc, #176]	@ (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d004      	beq.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d108      	bne.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d018      	beq.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d62:	d013      	beq.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a18      	ldr	r2, [pc, #96]	@ (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a17      	ldr	r2, [pc, #92]	@ (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a12      	ldr	r2, [pc, #72]	@ (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a13      	ldr	r2, [pc, #76]	@ (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d10c      	bne.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40013400 	.word	0x40013400
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40000800 	.word	0x40000800
 8005dd4:	40014000 	.word	0x40014000

08005dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e042      	b.n	8005efc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7fb f8dd 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2224      	movs	r2, #36	@ 0x24
 8005e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fee8 	bl	8006c84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fc19 	bl	80066ec <UART_SetConfig>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e01b      	b.n	8005efc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0201 	orr.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 ff67 	bl	8006dc8 <UART_CheckIdleState>
 8005efa:	4603      	mov	r3, r0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b091      	sub	sp, #68	@ 0x44
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d178      	bne.n	800600e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_UART_Transmit_IT+0x24>
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e071      	b.n	8006010 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	88fa      	ldrh	r2, [r7, #6]
 8005f3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2221      	movs	r2, #33	@ 0x21
 8005f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f60:	d12a      	bne.n	8005fb8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6a:	d107      	bne.n	8005f7c <HAL_UART_Transmit_IT+0x78>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d103      	bne.n	8005f7c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4a29      	ldr	r2, [pc, #164]	@ (800601c <HAL_UART_Transmit_IT+0x118>)
 8005f78:	679a      	str	r2, [r3, #120]	@ 0x78
 8005f7a:	e002      	b.n	8005f82 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a28      	ldr	r2, [pc, #160]	@ (8006020 <HAL_UART_Transmit_IT+0x11c>)
 8005f80:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3308      	adds	r3, #8
 8005f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fa2:	637a      	str	r2, [r7, #52]	@ 0x34
 8005fa4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e5      	bne.n	8005f82 <HAL_UART_Transmit_IT+0x7e>
 8005fb6:	e028      	b.n	800600a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc0:	d107      	bne.n	8005fd2 <HAL_UART_Transmit_IT+0xce>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d103      	bne.n	8005fd2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4a15      	ldr	r2, [pc, #84]	@ (8006024 <HAL_UART_Transmit_IT+0x120>)
 8005fce:	679a      	str	r2, [r3, #120]	@ 0x78
 8005fd0:	e002      	b.n	8005fd8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a14      	ldr	r2, [pc, #80]	@ (8006028 <HAL_UART_Transmit_IT+0x124>)
 8005fd6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff6:	623b      	str	r3, [r7, #32]
 8005ff8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	69f9      	ldr	r1, [r7, #28]
 8005ffc:	6a3a      	ldr	r2, [r7, #32]
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	61bb      	str	r3, [r7, #24]
   return(result);
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e6      	bne.n	8005fd8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	e000      	b.n	8006010 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800600e:	2302      	movs	r3, #2
  }
}
 8006010:	4618      	mov	r0, r3
 8006012:	3744      	adds	r7, #68	@ 0x44
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	080076fb 	.word	0x080076fb
 8006020:	0800761b 	.word	0x0800761b
 8006024:	08007559 	.word	0x08007559
 8006028:	080074a1 	.word	0x080074a1

0800602c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b0ba      	sub	sp, #232	@ 0xe8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006056:	f640 030f 	movw	r3, #2063	@ 0x80f
 800605a:	4013      	ands	r3, r2
 800605c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11b      	bne.n	80060a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d015      	beq.n	80060a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d105      	bne.n	800608c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8300 	beq.w	8006696 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
      }
      return;
 800609e:	e2fa      	b.n	8006696 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8123 	beq.w	80062f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80060ae:	4b8d      	ldr	r3, [pc, #564]	@ (80062e4 <HAL_UART_IRQHandler+0x2b8>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80060ba:	4b8b      	ldr	r3, [pc, #556]	@ (80062e8 <HAL_UART_IRQHandler+0x2bc>)
 80060bc:	4013      	ands	r3, r2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8116 	beq.w	80062f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d011      	beq.n	80060f4 <HAL_UART_IRQHandler+0xc8>
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2201      	movs	r2, #1
 80060e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d011      	beq.n	8006124 <HAL_UART_IRQHandler+0xf8>
 8006100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2202      	movs	r2, #2
 8006112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611a:	f043 0204 	orr.w	r2, r3, #4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d011      	beq.n	8006154 <HAL_UART_IRQHandler+0x128>
 8006130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2204      	movs	r2, #4
 8006142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614a:	f043 0202 	orr.w	r2, r3, #2
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d017      	beq.n	8006190 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800616c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006170:	4b5c      	ldr	r3, [pc, #368]	@ (80062e4 <HAL_UART_IRQHandler+0x2b8>)
 8006172:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2208      	movs	r2, #8
 800617e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006186:	f043 0208 	orr.w	r2, r3, #8
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <HAL_UART_IRQHandler+0x196>
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8266 	beq.w	800669a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d013      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d105      	bne.n	80061f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006208:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006216:	2b40      	cmp	r3, #64	@ 0x40
 8006218:	d005      	beq.n	8006226 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800621a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800621e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006222:	2b00      	cmp	r3, #0
 8006224:	d054      	beq.n	80062d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 ffcd 	bl	80071c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006236:	2b40      	cmp	r3, #64	@ 0x40
 8006238:	d146      	bne.n	80062c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006250:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006266:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800626a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800627e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1d9      	bne.n	800623a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800628c:	2b00      	cmp	r3, #0
 800628e:	d017      	beq.n	80062c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006296:	4a15      	ldr	r2, [pc, #84]	@ (80062ec <HAL_UART_IRQHandler+0x2c0>)
 8006298:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fc f84b 	bl	800233c <HAL_DMA_Abort_IT>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d019      	beq.n	80062e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80062ba:	4610      	mov	r0, r2
 80062bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062be:	e00f      	b.n	80062e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fa09 	bl	80066d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c6:	e00b      	b.n	80062e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fa05 	bl	80066d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ce:	e007      	b.n	80062e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fa01 	bl	80066d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80062de:	e1dc      	b.n	800669a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	bf00      	nop
    return;
 80062e2:	e1da      	b.n	800669a <HAL_UART_IRQHandler+0x66e>
 80062e4:	10000001 	.word	0x10000001
 80062e8:	04000120 	.word	0x04000120
 80062ec:	0800747d 	.word	0x0800747d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	f040 8170 	bne.w	80065da <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8169 	beq.w	80065da <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8162 	beq.w	80065da <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2210      	movs	r2, #16
 800631c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006328:	2b40      	cmp	r3, #64	@ 0x40
 800632a:	f040 80d8 	bne.w	80064de <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800633c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80af 	beq.w	80064a4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800634c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006350:	429a      	cmp	r2, r3
 8006352:	f080 80a7 	bcs.w	80064a4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800635c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 8087 	bne.w	8006482 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800638c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800639e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1da      	bne.n	8006374 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e1      	bne.n	80063be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3308      	adds	r3, #8
 8006400:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800640a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800640c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800641e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006420:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006424:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800642c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e3      	bne.n	80063fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800644e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006450:	f023 0310 	bic.w	r3, r3, #16
 8006454:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006462:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006464:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006468:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e4      	bne.n	8006440 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647c:	4618      	mov	r0, r3
 800647e:	f7fb ff04 	bl	800228a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2202      	movs	r2, #2
 8006486:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006494:	b29b      	uxth	r3, r3
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	b29b      	uxth	r3, r3
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fa fbe1 	bl	8000c64 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80064a2:	e0fc      	b.n	800669e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ae:	429a      	cmp	r2, r3
 80064b0:	f040 80f5 	bne.w	800669e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	f040 80eb 	bne.w	800669e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fa fbc4 	bl	8000c64 <HAL_UARTEx_RxEventCallback>
      return;
 80064dc:	e0df      	b.n	800669e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 80d1 	beq.w	80066a2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 80cc 	beq.w	80066a2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800651a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800651e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800652c:	647b      	str	r3, [r7, #68]	@ 0x44
 800652e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800653a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e4      	bne.n	800650a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3308      	adds	r3, #8
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	623b      	str	r3, [r7, #32]
   return(result);
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006556:	f023 0301 	bic.w	r3, r3, #1
 800655a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3308      	adds	r3, #8
 8006564:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006568:	633a      	str	r2, [r7, #48]	@ 0x30
 800656a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800656e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e1      	bne.n	8006540 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2220      	movs	r2, #32
 8006580:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	60fb      	str	r3, [r7, #12]
   return(result);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f023 0310 	bic.w	r3, r3, #16
 80065a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	69b9      	ldr	r1, [r7, #24]
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	617b      	str	r3, [r7, #20]
   return(result);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e4      	bne.n	8006590 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2202      	movs	r2, #2
 80065ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fa fb46 	bl	8000c64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065d8:	e063      	b.n	80066a2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00e      	beq.n	8006604 <HAL_UART_IRQHandler+0x5d8>
 80065e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80065fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 f91c 	bl	800783a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006602:	e051      	b.n	80066a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660c:	2b00      	cmp	r3, #0
 800660e:	d014      	beq.n	800663a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006618:	2b00      	cmp	r3, #0
 800661a:	d105      	bne.n	8006628 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800661c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006620:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800662c:	2b00      	cmp	r3, #0
 800662e:	d03a      	beq.n	80066a6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3
    }
    return;
 8006638:	e035      	b.n	80066a6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <HAL_UART_IRQHandler+0x62e>
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800664a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f8c6 	bl	80077e4 <UART_EndTransmit_IT>
    return;
 8006658:	e026      	b.n	80066a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d009      	beq.n	800667a <HAL_UART_IRQHandler+0x64e>
 8006666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800666a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f001 f8f5 	bl	8007862 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006678:	e016      	b.n	80066a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d010      	beq.n	80066a8 <HAL_UART_IRQHandler+0x67c>
 8006686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800668a:	2b00      	cmp	r3, #0
 800668c:	da0c      	bge.n	80066a8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 f8dd 	bl	800784e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006694:	e008      	b.n	80066a8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006696:	bf00      	nop
 8006698:	e006      	b.n	80066a8 <HAL_UART_IRQHandler+0x67c>
    return;
 800669a:	bf00      	nop
 800669c:	e004      	b.n	80066a8 <HAL_UART_IRQHandler+0x67c>
      return;
 800669e:	bf00      	nop
 80066a0:	e002      	b.n	80066a8 <HAL_UART_IRQHandler+0x67c>
      return;
 80066a2:	bf00      	nop
 80066a4:	e000      	b.n	80066a8 <HAL_UART_IRQHandler+0x67c>
    return;
 80066a6:	bf00      	nop
  }
}
 80066a8:	37e8      	adds	r7, #232	@ 0xe8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop

080066b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066f0:	b08c      	sub	sp, #48	@ 0x30
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	431a      	orrs	r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	431a      	orrs	r2, r3
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	4313      	orrs	r3, r2
 8006712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4bab      	ldr	r3, [pc, #684]	@ (80069c8 <UART_SetConfig+0x2dc>)
 800671c:	4013      	ands	r3, r2
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006724:	430b      	orrs	r3, r1
 8006726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4aa0      	ldr	r2, [pc, #640]	@ (80069cc <UART_SetConfig+0x2e0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006754:	4313      	orrs	r3, r2
 8006756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006762:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800676c:	430b      	orrs	r3, r1
 800676e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	f023 010f 	bic.w	r1, r3, #15
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a91      	ldr	r2, [pc, #580]	@ (80069d0 <UART_SetConfig+0x2e4>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d125      	bne.n	80067dc <UART_SetConfig+0xf0>
 8006790:	4b90      	ldr	r3, [pc, #576]	@ (80069d4 <UART_SetConfig+0x2e8>)
 8006792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	2b03      	cmp	r3, #3
 800679c:	d81a      	bhi.n	80067d4 <UART_SetConfig+0xe8>
 800679e:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <UART_SetConfig+0xb8>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	080067c5 	.word	0x080067c5
 80067ac:	080067bd 	.word	0x080067bd
 80067b0:	080067cd 	.word	0x080067cd
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ba:	e0d6      	b.n	800696a <UART_SetConfig+0x27e>
 80067bc:	2302      	movs	r3, #2
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c2:	e0d2      	b.n	800696a <UART_SetConfig+0x27e>
 80067c4:	2304      	movs	r3, #4
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ca:	e0ce      	b.n	800696a <UART_SetConfig+0x27e>
 80067cc:	2308      	movs	r3, #8
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d2:	e0ca      	b.n	800696a <UART_SetConfig+0x27e>
 80067d4:	2310      	movs	r3, #16
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067da:	e0c6      	b.n	800696a <UART_SetConfig+0x27e>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a7d      	ldr	r2, [pc, #500]	@ (80069d8 <UART_SetConfig+0x2ec>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d138      	bne.n	8006858 <UART_SetConfig+0x16c>
 80067e6:	4b7b      	ldr	r3, [pc, #492]	@ (80069d4 <UART_SetConfig+0x2e8>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ec:	f003 030c 	and.w	r3, r3, #12
 80067f0:	2b0c      	cmp	r3, #12
 80067f2:	d82d      	bhi.n	8006850 <UART_SetConfig+0x164>
 80067f4:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <UART_SetConfig+0x110>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006831 	.word	0x08006831
 8006800:	08006851 	.word	0x08006851
 8006804:	08006851 	.word	0x08006851
 8006808:	08006851 	.word	0x08006851
 800680c:	08006841 	.word	0x08006841
 8006810:	08006851 	.word	0x08006851
 8006814:	08006851 	.word	0x08006851
 8006818:	08006851 	.word	0x08006851
 800681c:	08006839 	.word	0x08006839
 8006820:	08006851 	.word	0x08006851
 8006824:	08006851 	.word	0x08006851
 8006828:	08006851 	.word	0x08006851
 800682c:	08006849 	.word	0x08006849
 8006830:	2300      	movs	r3, #0
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006836:	e098      	b.n	800696a <UART_SetConfig+0x27e>
 8006838:	2302      	movs	r3, #2
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683e:	e094      	b.n	800696a <UART_SetConfig+0x27e>
 8006840:	2304      	movs	r3, #4
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006846:	e090      	b.n	800696a <UART_SetConfig+0x27e>
 8006848:	2308      	movs	r3, #8
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684e:	e08c      	b.n	800696a <UART_SetConfig+0x27e>
 8006850:	2310      	movs	r3, #16
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006856:	e088      	b.n	800696a <UART_SetConfig+0x27e>
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a5f      	ldr	r2, [pc, #380]	@ (80069dc <UART_SetConfig+0x2f0>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d125      	bne.n	80068ae <UART_SetConfig+0x1c2>
 8006862:	4b5c      	ldr	r3, [pc, #368]	@ (80069d4 <UART_SetConfig+0x2e8>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006868:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800686c:	2b30      	cmp	r3, #48	@ 0x30
 800686e:	d016      	beq.n	800689e <UART_SetConfig+0x1b2>
 8006870:	2b30      	cmp	r3, #48	@ 0x30
 8006872:	d818      	bhi.n	80068a6 <UART_SetConfig+0x1ba>
 8006874:	2b20      	cmp	r3, #32
 8006876:	d00a      	beq.n	800688e <UART_SetConfig+0x1a2>
 8006878:	2b20      	cmp	r3, #32
 800687a:	d814      	bhi.n	80068a6 <UART_SetConfig+0x1ba>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <UART_SetConfig+0x19a>
 8006880:	2b10      	cmp	r3, #16
 8006882:	d008      	beq.n	8006896 <UART_SetConfig+0x1aa>
 8006884:	e00f      	b.n	80068a6 <UART_SetConfig+0x1ba>
 8006886:	2300      	movs	r3, #0
 8006888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800688c:	e06d      	b.n	800696a <UART_SetConfig+0x27e>
 800688e:	2302      	movs	r3, #2
 8006890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006894:	e069      	b.n	800696a <UART_SetConfig+0x27e>
 8006896:	2304      	movs	r3, #4
 8006898:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800689c:	e065      	b.n	800696a <UART_SetConfig+0x27e>
 800689e:	2308      	movs	r3, #8
 80068a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a4:	e061      	b.n	800696a <UART_SetConfig+0x27e>
 80068a6:	2310      	movs	r3, #16
 80068a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ac:	e05d      	b.n	800696a <UART_SetConfig+0x27e>
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a4b      	ldr	r2, [pc, #300]	@ (80069e0 <UART_SetConfig+0x2f4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d125      	bne.n	8006904 <UART_SetConfig+0x218>
 80068b8:	4b46      	ldr	r3, [pc, #280]	@ (80069d4 <UART_SetConfig+0x2e8>)
 80068ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80068c4:	d016      	beq.n	80068f4 <UART_SetConfig+0x208>
 80068c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068c8:	d818      	bhi.n	80068fc <UART_SetConfig+0x210>
 80068ca:	2b80      	cmp	r3, #128	@ 0x80
 80068cc:	d00a      	beq.n	80068e4 <UART_SetConfig+0x1f8>
 80068ce:	2b80      	cmp	r3, #128	@ 0x80
 80068d0:	d814      	bhi.n	80068fc <UART_SetConfig+0x210>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <UART_SetConfig+0x1f0>
 80068d6:	2b40      	cmp	r3, #64	@ 0x40
 80068d8:	d008      	beq.n	80068ec <UART_SetConfig+0x200>
 80068da:	e00f      	b.n	80068fc <UART_SetConfig+0x210>
 80068dc:	2300      	movs	r3, #0
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e2:	e042      	b.n	800696a <UART_SetConfig+0x27e>
 80068e4:	2302      	movs	r3, #2
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ea:	e03e      	b.n	800696a <UART_SetConfig+0x27e>
 80068ec:	2304      	movs	r3, #4
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f2:	e03a      	b.n	800696a <UART_SetConfig+0x27e>
 80068f4:	2308      	movs	r3, #8
 80068f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068fa:	e036      	b.n	800696a <UART_SetConfig+0x27e>
 80068fc:	2310      	movs	r3, #16
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006902:	e032      	b.n	800696a <UART_SetConfig+0x27e>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a30      	ldr	r2, [pc, #192]	@ (80069cc <UART_SetConfig+0x2e0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d12a      	bne.n	8006964 <UART_SetConfig+0x278>
 800690e:	4b31      	ldr	r3, [pc, #196]	@ (80069d4 <UART_SetConfig+0x2e8>)
 8006910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006914:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006918:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800691c:	d01a      	beq.n	8006954 <UART_SetConfig+0x268>
 800691e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006922:	d81b      	bhi.n	800695c <UART_SetConfig+0x270>
 8006924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006928:	d00c      	beq.n	8006944 <UART_SetConfig+0x258>
 800692a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800692e:	d815      	bhi.n	800695c <UART_SetConfig+0x270>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <UART_SetConfig+0x250>
 8006934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006938:	d008      	beq.n	800694c <UART_SetConfig+0x260>
 800693a:	e00f      	b.n	800695c <UART_SetConfig+0x270>
 800693c:	2300      	movs	r3, #0
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006942:	e012      	b.n	800696a <UART_SetConfig+0x27e>
 8006944:	2302      	movs	r3, #2
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694a:	e00e      	b.n	800696a <UART_SetConfig+0x27e>
 800694c:	2304      	movs	r3, #4
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006952:	e00a      	b.n	800696a <UART_SetConfig+0x27e>
 8006954:	2308      	movs	r3, #8
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695a:	e006      	b.n	800696a <UART_SetConfig+0x27e>
 800695c:	2310      	movs	r3, #16
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006962:	e002      	b.n	800696a <UART_SetConfig+0x27e>
 8006964:	2310      	movs	r3, #16
 8006966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a17      	ldr	r2, [pc, #92]	@ (80069cc <UART_SetConfig+0x2e0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	f040 80a8 	bne.w	8006ac6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006976:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800697a:	2b08      	cmp	r3, #8
 800697c:	d834      	bhi.n	80069e8 <UART_SetConfig+0x2fc>
 800697e:	a201      	add	r2, pc, #4	@ (adr r2, 8006984 <UART_SetConfig+0x298>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	080069a9 	.word	0x080069a9
 8006988:	080069e9 	.word	0x080069e9
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069e9 	.word	0x080069e9
 8006994:	080069b7 	.word	0x080069b7
 8006998:	080069e9 	.word	0x080069e9
 800699c:	080069e9 	.word	0x080069e9
 80069a0:	080069e9 	.word	0x080069e9
 80069a4:	080069bf 	.word	0x080069bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a8:	f7fe fac6 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 80069ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069ae:	e021      	b.n	80069f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b0:	4b0c      	ldr	r3, [pc, #48]	@ (80069e4 <UART_SetConfig+0x2f8>)
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069b4:	e01e      	b.n	80069f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069b6:	f7fe fa51 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 80069ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069bc:	e01a      	b.n	80069f4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069c4:	e016      	b.n	80069f4 <UART_SetConfig+0x308>
 80069c6:	bf00      	nop
 80069c8:	cfff69f3 	.word	0xcfff69f3
 80069cc:	40008000 	.word	0x40008000
 80069d0:	40013800 	.word	0x40013800
 80069d4:	40021000 	.word	0x40021000
 80069d8:	40004400 	.word	0x40004400
 80069dc:	40004800 	.word	0x40004800
 80069e0:	40004c00 	.word	0x40004c00
 80069e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 812a 	beq.w	8006c50 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	4a9e      	ldr	r2, [pc, #632]	@ (8006c7c <UART_SetConfig+0x590>)
 8006a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a06:	461a      	mov	r2, r3
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	4413      	add	r3, r2
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d305      	bcc.n	8006a2c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d903      	bls.n	8006a34 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a32:	e10d      	b.n	8006c50 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	2200      	movs	r2, #0
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	60fa      	str	r2, [r7, #12]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a40:	4a8e      	ldr	r2, [pc, #568]	@ (8006c7c <UART_SetConfig+0x590>)
 8006a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2200      	movs	r2, #0
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	607a      	str	r2, [r7, #4]
 8006a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a56:	f7f9 fc33 	bl	80002c0 <__aeabi_uldivmod>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4610      	mov	r0, r2
 8006a60:	4619      	mov	r1, r3
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	020b      	lsls	r3, r1, #8
 8006a6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a70:	0202      	lsls	r2, r0, #8
 8006a72:	6979      	ldr	r1, [r7, #20]
 8006a74:	6849      	ldr	r1, [r1, #4]
 8006a76:	0849      	lsrs	r1, r1, #1
 8006a78:	2000      	movs	r0, #0
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	eb12 0804 	adds.w	r8, r2, r4
 8006a82:	eb43 0905 	adc.w	r9, r3, r5
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	469a      	mov	sl, r3
 8006a8e:	4693      	mov	fp, r2
 8006a90:	4652      	mov	r2, sl
 8006a92:	465b      	mov	r3, fp
 8006a94:	4640      	mov	r0, r8
 8006a96:	4649      	mov	r1, r9
 8006a98:	f7f9 fc12 	bl	80002c0 <__aeabi_uldivmod>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aaa:	d308      	bcc.n	8006abe <UART_SetConfig+0x3d2>
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ab2:	d204      	bcs.n	8006abe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6a3a      	ldr	r2, [r7, #32]
 8006aba:	60da      	str	r2, [r3, #12]
 8006abc:	e0c8      	b.n	8006c50 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ac4:	e0c4      	b.n	8006c50 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ace:	d167      	bne.n	8006ba0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d828      	bhi.n	8006b2a <UART_SetConfig+0x43e>
 8006ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae0 <UART_SetConfig+0x3f4>)
 8006ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ade:	bf00      	nop
 8006ae0:	08006b05 	.word	0x08006b05
 8006ae4:	08006b0d 	.word	0x08006b0d
 8006ae8:	08006b15 	.word	0x08006b15
 8006aec:	08006b2b 	.word	0x08006b2b
 8006af0:	08006b1b 	.word	0x08006b1b
 8006af4:	08006b2b 	.word	0x08006b2b
 8006af8:	08006b2b 	.word	0x08006b2b
 8006afc:	08006b2b 	.word	0x08006b2b
 8006b00:	08006b23 	.word	0x08006b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b04:	f7fe fa18 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 8006b08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b0a:	e014      	b.n	8006b36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b0c:	f7fe fa2a 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8006b10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b12:	e010      	b.n	8006b36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b14:	4b5a      	ldr	r3, [pc, #360]	@ (8006c80 <UART_SetConfig+0x594>)
 8006b16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b18:	e00d      	b.n	8006b36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1a:	f7fe f99f 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 8006b1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b20:	e009      	b.n	8006b36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b28:	e005      	b.n	8006b36 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8089 	beq.w	8006c50 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b42:	4a4e      	ldr	r2, [pc, #312]	@ (8006c7c <UART_SetConfig+0x590>)
 8006b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b50:	005a      	lsls	r2, r3, #1
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	085b      	lsrs	r3, r3, #1
 8006b58:	441a      	add	r2, r3
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d916      	bls.n	8006b98 <UART_SetConfig+0x4ac>
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b70:	d212      	bcs.n	8006b98 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f023 030f 	bic.w	r3, r3, #15
 8006b7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	8bfb      	ldrh	r3, [r7, #30]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	8bfa      	ldrh	r2, [r7, #30]
 8006b94:	60da      	str	r2, [r3, #12]
 8006b96:	e05b      	b.n	8006c50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b9e:	e057      	b.n	8006c50 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ba0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d828      	bhi.n	8006bfa <UART_SetConfig+0x50e>
 8006ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb0 <UART_SetConfig+0x4c4>)
 8006baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bae:	bf00      	nop
 8006bb0:	08006bd5 	.word	0x08006bd5
 8006bb4:	08006bdd 	.word	0x08006bdd
 8006bb8:	08006be5 	.word	0x08006be5
 8006bbc:	08006bfb 	.word	0x08006bfb
 8006bc0:	08006beb 	.word	0x08006beb
 8006bc4:	08006bfb 	.word	0x08006bfb
 8006bc8:	08006bfb 	.word	0x08006bfb
 8006bcc:	08006bfb 	.word	0x08006bfb
 8006bd0:	08006bf3 	.word	0x08006bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd4:	f7fe f9b0 	bl	8004f38 <HAL_RCC_GetPCLK1Freq>
 8006bd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bda:	e014      	b.n	8006c06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bdc:	f7fe f9c2 	bl	8004f64 <HAL_RCC_GetPCLK2Freq>
 8006be0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006be2:	e010      	b.n	8006c06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006be4:	4b26      	ldr	r3, [pc, #152]	@ (8006c80 <UART_SetConfig+0x594>)
 8006be6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006be8:	e00d      	b.n	8006c06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bea:	f7fe f937 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 8006bee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bf0:	e009      	b.n	8006c06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bf8:	e005      	b.n	8006c06 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c04:	bf00      	nop
    }

    if (pclk != 0U)
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d021      	beq.n	8006c50 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	4a1a      	ldr	r2, [pc, #104]	@ (8006c7c <UART_SetConfig+0x590>)
 8006c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c16:	461a      	mov	r2, r3
 8006c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	441a      	add	r2, r3
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	2b0f      	cmp	r3, #15
 8006c34:	d909      	bls.n	8006c4a <UART_SetConfig+0x55e>
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c3c:	d205      	bcs.n	8006c4a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60da      	str	r2, [r3, #12]
 8006c48:	e002      	b.n	8006c50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2200      	movs	r2, #0
 8006c64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006c6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3730      	adds	r7, #48	@ 0x30
 8006c74:	46bd      	mov	sp, r7
 8006c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c7a:	bf00      	nop
 8006c7c:	0800ccb4 	.word	0x0800ccb4
 8006c80:	00f42400 	.word	0x00f42400

08006c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c90:	f003 0308 	and.w	r3, r3, #8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01a      	beq.n	8006d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d82:	d10a      	bne.n	8006d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	605a      	str	r2, [r3, #4]
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b098      	sub	sp, #96	@ 0x60
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dd8:	f7fa fff6 	bl	8001dc8 <HAL_GetTick>
 8006ddc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d12f      	bne.n	8006e4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df4:	2200      	movs	r2, #0
 8006df6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f88e 	bl	8006f1c <UART_WaitOnFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d022      	beq.n	8006e4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e6      	bne.n	8006e06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e063      	b.n	8006f14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d149      	bne.n	8006eee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e62:	2200      	movs	r2, #0
 8006e64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f857 	bl	8006f1c <UART_WaitOnFlagUntilTimeout>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d03c      	beq.n	8006eee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	623b      	str	r3, [r7, #32]
   return(result);
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e92:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e6      	bne.n	8006e74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ec6:	61fa      	str	r2, [r7, #28]
 8006ec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	69b9      	ldr	r1, [r7, #24]
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e5      	bne.n	8006ea6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e012      	b.n	8006f14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3758      	adds	r7, #88	@ 0x58
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f2c:	e04f      	b.n	8006fce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f34:	d04b      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f36:	f7fa ff47 	bl	8001dc8 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d302      	bcc.n	8006f4c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e04e      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d037      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b80      	cmp	r3, #128	@ 0x80
 8006f62:	d034      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b40      	cmp	r3, #64	@ 0x40
 8006f68:	d031      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d110      	bne.n	8006f9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f920 	bl	80071c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e029      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fa8:	d111      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 f906 	bl	80071c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e00f      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69da      	ldr	r2, [r3, #28]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	bf0c      	ite	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	2300      	movne	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d0a0      	beq.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b096      	sub	sp, #88	@ 0x58
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	4613      	mov	r3, r2
 8007004:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	88fa      	ldrh	r2, [r7, #6]
 8007010:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2222      	movs	r2, #34	@ 0x22
 8007020:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800702a:	2b00      	cmp	r3, #0
 800702c:	d02d      	beq.n	800708a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007034:	4a40      	ldr	r2, [pc, #256]	@ (8007138 <UART_Start_Receive_DMA+0x140>)
 8007036:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800703e:	4a3f      	ldr	r2, [pc, #252]	@ (800713c <UART_Start_Receive_DMA+0x144>)
 8007040:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007048:	4a3d      	ldr	r2, [pc, #244]	@ (8007140 <UART_Start_Receive_DMA+0x148>)
 800704a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007052:	2200      	movs	r2, #0
 8007054:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3324      	adds	r3, #36	@ 0x24
 8007062:	4619      	mov	r1, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007068:	461a      	mov	r2, r3
 800706a:	88fb      	ldrh	r3, [r7, #6]
 800706c:	f7fb f892 	bl	8002194 <HAL_DMA_Start_IT>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2210      	movs	r2, #16
 800707a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2220      	movs	r2, #32
 8007082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e051      	b.n	800712e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d018      	beq.n	80070c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070b2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80070be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e6      	bne.n	8007092 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3308      	adds	r3, #8
 80070ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	f043 0301 	orr.w	r3, r3, #1
 80070da:	653b      	str	r3, [r7, #80]	@ 0x50
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3308      	adds	r3, #8
 80070e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80070e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80070e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80070f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e5      	bne.n	80070c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3308      	adds	r3, #8
 80070fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	613b      	str	r3, [r7, #16]
   return(result);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800710e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3308      	adds	r3, #8
 8007116:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007118:	623a      	str	r2, [r7, #32]
 800711a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	69f9      	ldr	r1, [r7, #28]
 800711e:	6a3a      	ldr	r2, [r7, #32]
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	61bb      	str	r3, [r7, #24]
   return(result);
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e5      	bne.n	80070f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3758      	adds	r7, #88	@ 0x58
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	08007293 	.word	0x08007293
 800713c:	080073bf 	.word	0x080073bf
 8007140:	080073fd 	.word	0x080073fd

08007144 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b08f      	sub	sp, #60	@ 0x3c
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	61fb      	str	r3, [r7, #28]
   return(result);
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007160:	637b      	str	r3, [r7, #52]	@ 0x34
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800716c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e6      	bne.n	800714c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3308      	adds	r3, #8
 8007184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	60bb      	str	r3, [r7, #8]
   return(result);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007194:	633b      	str	r3, [r7, #48]	@ 0x30
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3308      	adds	r3, #8
 800719c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800719e:	61ba      	str	r2, [r7, #24]
 80071a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	6979      	ldr	r1, [r7, #20]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	613b      	str	r3, [r7, #16]
   return(result);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e5      	bne.n	800717e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80071ba:	bf00      	nop
 80071bc:	373c      	adds	r7, #60	@ 0x3c
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b095      	sub	sp, #84	@ 0x54
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e6      	bne.n	80071ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3308      	adds	r3, #8
 8007206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007216:	f023 0301 	bic.w	r3, r3, #1
 800721a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3308      	adds	r3, #8
 8007222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800722a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e3      	bne.n	8007200 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d118      	bne.n	8007272 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	60bb      	str	r3, [r7, #8]
   return(result);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f023 0310 	bic.w	r3, r3, #16
 8007254:	647b      	str	r3, [r7, #68]	@ 0x44
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6979      	ldr	r1, [r7, #20]
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	613b      	str	r3, [r7, #16]
   return(result);
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e6      	bne.n	8007240 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007286:	bf00      	nop
 8007288:	3754      	adds	r7, #84	@ 0x54
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b09c      	sub	sp, #112	@ 0x70
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d171      	bne.n	8007392 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80072ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e6      	bne.n	80072b6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3308      	adds	r3, #8
 80072ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fa:	f023 0301 	bic.w	r3, r3, #1
 80072fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8007300:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3308      	adds	r3, #8
 8007306:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007308:	647a      	str	r2, [r7, #68]	@ 0x44
 800730a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800730e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e5      	bne.n	80072e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800731c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3308      	adds	r3, #8
 8007322:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	623b      	str	r3, [r7, #32]
   return(result);
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007332:	663b      	str	r3, [r7, #96]	@ 0x60
 8007334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800733c:	633a      	str	r2, [r7, #48]	@ 0x30
 800733e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800734a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007350:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007352:	2220      	movs	r2, #32
 8007354:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800735a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800735c:	2b01      	cmp	r3, #1
 800735e:	d118      	bne.n	8007392 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	60fb      	str	r3, [r7, #12]
   return(result);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f023 0310 	bic.w	r3, r3, #16
 8007374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	69b9      	ldr	r1, [r7, #24]
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	617b      	str	r3, [r7, #20]
   return(result);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e6      	bne.n	8007360 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007394:	2200      	movs	r2, #0
 8007396:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800739a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800739c:	2b01      	cmp	r3, #1
 800739e:	d107      	bne.n	80073b0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073a6:	4619      	mov	r1, r3
 80073a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80073aa:	f7f9 fc5b 	bl	8000c64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073ae:	e002      	b.n	80073b6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80073b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80073b2:	f7ff f97d 	bl	80066b0 <HAL_UART_RxCpltCallback>
}
 80073b6:	bf00      	nop
 80073b8:	3770      	adds	r7, #112	@ 0x70
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2201      	movs	r2, #1
 80073d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d109      	bne.n	80073ee <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073e0:	085b      	lsrs	r3, r3, #1
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	4619      	mov	r1, r3
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7f9 fc3c 	bl	8000c64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073ec:	e002      	b.n	80073f4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff f968 	bl	80066c4 <HAL_UART_RxHalfCpltCallback>
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007408:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007410:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007418:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007424:	2b80      	cmp	r3, #128	@ 0x80
 8007426:	d109      	bne.n	800743c <UART_DMAError+0x40>
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b21      	cmp	r3, #33	@ 0x21
 800742c:	d106      	bne.n	800743c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2200      	movs	r2, #0
 8007432:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007436:	6978      	ldr	r0, [r7, #20]
 8007438:	f7ff fe84 	bl	8007144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007446:	2b40      	cmp	r3, #64	@ 0x40
 8007448:	d109      	bne.n	800745e <UART_DMAError+0x62>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b22      	cmp	r3, #34	@ 0x22
 800744e:	d106      	bne.n	800745e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2200      	movs	r2, #0
 8007454:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007458:	6978      	ldr	r0, [r7, #20]
 800745a:	f7ff feb4 	bl	80071c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007464:	f043 0210 	orr.w	r2, r3, #16
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800746e:	6978      	ldr	r0, [r7, #20]
 8007470:	f7ff f932 	bl	80066d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007474:	bf00      	nop
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7ff f920 	bl	80066d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b08f      	sub	sp, #60	@ 0x3c
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ae:	2b21      	cmp	r3, #33	@ 0x21
 80074b0:	d14c      	bne.n	800754c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d132      	bne.n	8007524 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	e853 3f00 	ldrex	r3, [r3]
 80074ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e6      	bne.n	80074be <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007504:	633b      	str	r3, [r7, #48]	@ 0x30
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6979      	ldr	r1, [r7, #20]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	613b      	str	r3, [r7, #16]
   return(result);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e6      	bne.n	80074f0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007522:	e013      	b.n	800754c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007528:	781a      	ldrb	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800754c:	bf00      	nop
 800754e:	373c      	adds	r7, #60	@ 0x3c
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b091      	sub	sp, #68	@ 0x44
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007566:	2b21      	cmp	r3, #33	@ 0x21
 8007568:	d151      	bne.n	800760e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007570:	b29b      	uxth	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d132      	bne.n	80075dc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	e853 3f00 	ldrex	r3, [r3]
 8007582:	623b      	str	r3, [r7, #32]
   return(result);
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800758a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007594:	633b      	str	r3, [r7, #48]	@ 0x30
 8007596:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800759a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e6      	bne.n	8007576 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	69b9      	ldr	r1, [r7, #24]
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	617b      	str	r3, [r7, #20]
   return(result);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e6      	bne.n	80075a8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80075da:	e018      	b.n	800760e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80075e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f6:	1c9a      	adds	r2, r3, #2
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007602:	b29b      	uxth	r3, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800760e:	bf00      	nop
 8007610:	3744      	adds	r7, #68	@ 0x44
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800761a:	b480      	push	{r7}
 800761c:	b091      	sub	sp, #68	@ 0x44
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007628:	2b21      	cmp	r3, #33	@ 0x21
 800762a:	d160      	bne.n	80076ee <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007632:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007634:	e057      	b.n	80076e6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d133      	bne.n	80076aa <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	623b      	str	r3, [r7, #32]
   return(result);
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007658:	63bb      	str	r3, [r7, #56]	@ 0x38
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3308      	adds	r3, #8
 8007660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007662:	633a      	str	r2, [r7, #48]	@ 0x30
 8007664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e5      	bne.n	8007642 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	60fb      	str	r3, [r7, #12]
   return(result);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800768a:	637b      	str	r3, [r7, #52]	@ 0x34
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007694:	61fb      	str	r3, [r7, #28]
 8007696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	69b9      	ldr	r1, [r7, #24]
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	617b      	str	r3, [r7, #20]
   return(result);
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e6      	bne.n	8007676 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80076a8:	e021      	b.n	80076ee <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d013      	beq.n	80076e0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076bc:	781a      	ldrb	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3b01      	subs	r3, #1
 80076d8:	b29a      	uxth	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80076e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80076e2:	3b01      	subs	r3, #1
 80076e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80076e6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1a4      	bne.n	8007636 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80076ec:	e7ff      	b.n	80076ee <UART_TxISR_8BIT_FIFOEN+0xd4>
 80076ee:	bf00      	nop
 80076f0:	3744      	adds	r7, #68	@ 0x44
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b091      	sub	sp, #68	@ 0x44
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007708:	2b21      	cmp	r3, #33	@ 0x21
 800770a:	d165      	bne.n	80077d8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007712:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007714:	e05c      	b.n	80077d0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d133      	bne.n	800778a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	61fb      	str	r3, [r7, #28]
   return(result);
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007738:	637b      	str	r3, [r7, #52]	@ 0x34
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007742:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007744:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e5      	bne.n	8007722 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	60bb      	str	r3, [r7, #8]
   return(result);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800776a:	633b      	str	r3, [r7, #48]	@ 0x30
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6979      	ldr	r1, [r7, #20]
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	613b      	str	r3, [r7, #16]
   return(result);
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e6      	bne.n	8007756 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007788:	e026      	b.n	80077d8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007794:	2b00      	cmp	r3, #0
 8007796:	d018      	beq.n	80077ca <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800779c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800779e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077ac:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b2:	1c9a      	adds	r2, r3, #2
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80077ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80077cc:	3b01      	subs	r3, #1
 80077ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80077d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d19f      	bne.n	8007716 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80077d6:	e7ff      	b.n	80077d8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80077d8:	bf00      	nop
 80077da:	3744      	adds	r7, #68	@ 0x44
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	61bb      	str	r3, [r7, #24]
 800780c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6979      	ldr	r1, [r7, #20]
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	613b      	str	r3, [r7, #16]
   return(result);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e6      	bne.n	80077ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7f9 fa91 	bl	8000d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007832:	bf00      	nop
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007876:	b480      	push	{r7}
 8007878:	b085      	sub	sp, #20
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007884:	2b01      	cmp	r3, #1
 8007886:	d101      	bne.n	800788c <HAL_UARTEx_DisableFifoMode+0x16>
 8007888:	2302      	movs	r3, #2
 800788a:	e027      	b.n	80078dc <HAL_UARTEx_DisableFifoMode+0x66>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2224      	movs	r2, #36	@ 0x24
 8007898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0201 	bic.w	r2, r2, #1
 80078b2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e02d      	b.n	800795c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2224      	movs	r2, #36	@ 0x24
 800790c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0201 	bic.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f8a3 	bl	8007a88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007974:	2b01      	cmp	r3, #1
 8007976:	d101      	bne.n	800797c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007978:	2302      	movs	r3, #2
 800797a:	e02d      	b.n	80079d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2224      	movs	r2, #36	@ 0x24
 8007988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f865 	bl	8007a88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08c      	sub	sp, #48	@ 0x30
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d142      	bne.n	8007a7e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e03b      	b.n	8007a80 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007a14:	88fb      	ldrh	r3, [r7, #6]
 8007a16:	461a      	mov	r2, r3
 8007a18:	68b9      	ldr	r1, [r7, #8]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f7ff faec 	bl	8006ff8 <UART_Start_Receive_DMA>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007a26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d124      	bne.n	8007a78 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d11d      	bne.n	8007a72 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2210      	movs	r2, #16
 8007a3c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f043 0310 	orr.w	r3, r3, #16
 8007a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a5e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6a39      	ldr	r1, [r7, #32]
 8007a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007a70:	e002      	b.n	8007a78 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007a78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a7c:	e000      	b.n	8007a80 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a7e:	2302      	movs	r3, #2
  }
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3730      	adds	r7, #48	@ 0x30
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d108      	bne.n	8007aaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007aa8:	e031      	b.n	8007b0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aaa:	2308      	movs	r3, #8
 8007aac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007aae:	2308      	movs	r3, #8
 8007ab0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	0e5b      	lsrs	r3, r3, #25
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f003 0307 	and.w	r3, r3, #7
 8007ac0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	0f5b      	lsrs	r3, r3, #29
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	f003 0307 	and.w	r3, r3, #7
 8007ad0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	7b3a      	ldrb	r2, [r7, #12]
 8007ad6:	4911      	ldr	r1, [pc, #68]	@ (8007b1c <UARTEx_SetNbDataToProcess+0x94>)
 8007ad8:	5c8a      	ldrb	r2, [r1, r2]
 8007ada:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ade:	7b3a      	ldrb	r2, [r7, #12]
 8007ae0:	490f      	ldr	r1, [pc, #60]	@ (8007b20 <UARTEx_SetNbDataToProcess+0x98>)
 8007ae2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ae4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	7b7a      	ldrb	r2, [r7, #13]
 8007af4:	4909      	ldr	r1, [pc, #36]	@ (8007b1c <UARTEx_SetNbDataToProcess+0x94>)
 8007af6:	5c8a      	ldrb	r2, [r1, r2]
 8007af8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007afc:	7b7a      	ldrb	r2, [r7, #13]
 8007afe:	4908      	ldr	r1, [pc, #32]	@ (8007b20 <UARTEx_SetNbDataToProcess+0x98>)
 8007b00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b02:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	0800cccc 	.word	0x0800cccc
 8007b20:	0800ccd4 	.word	0x0800ccd4

08007b24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007b34:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007b38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007b5a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007b5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	43db      	mvns	r3, r3
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	4013      	ands	r3, r2
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	1d3b      	adds	r3, r7, #4
 8007b92:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b0a7      	sub	sp, #156	@ 0x9c
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bea:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	78db      	ldrb	r3, [r3, #3]
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d81f      	bhi.n	8007c36 <USB_ActivateEndpoint+0x72>
 8007bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <USB_ActivateEndpoint+0x38>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007c0d 	.word	0x08007c0d
 8007c00:	08007c29 	.word	0x08007c29
 8007c04:	08007c3f 	.word	0x08007c3f
 8007c08:	08007c1b 	.word	0x08007c1b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007c0c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007c10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c14:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007c18:	e012      	b.n	8007c40 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007c1a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007c1e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007c22:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007c26:	e00b      	b.n	8007c40 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007c28:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007c2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c30:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007c34:	e004      	b.n	8007c40 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007c3c:	e000      	b.n	8007c40 <USB_ActivateEndpoint+0x7c>
      break;
 8007c3e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	441a      	add	r2, r3
 8007c4a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	b21b      	sxth	r3, r3
 8007c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c7a:	b21a      	sxth	r2, r3
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	b21b      	sxth	r3, r3
 8007c82:	4313      	orrs	r3, r2
 8007c84:	b21b      	sxth	r3, r3
 8007c86:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	7b1b      	ldrb	r3, [r3, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f040 8180 	bne.w	8007fb6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	785b      	ldrb	r3, [r3, #1]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 8084 	beq.w	8007dc8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	61bb      	str	r3, [r7, #24]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	461a      	mov	r2, r3
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	61bb      	str	r3, [r7, #24]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	00da      	lsls	r2, r3, #3
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	88db      	ldrh	r3, [r3, #6]
 8007ce8:	085b      	lsrs	r3, r3, #1
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	827b      	strh	r3, [r7, #18]
 8007d02:	8a7b      	ldrh	r3, [r7, #18]
 8007d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01b      	beq.n	8007d44 <USB_ActivateEndpoint+0x180>
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d22:	823b      	strh	r3, [r7, #16]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	441a      	add	r2, r3
 8007d2e:	8a3b      	ldrh	r3, [r7, #16]
 8007d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	78db      	ldrb	r3, [r3, #3]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d020      	beq.n	8007d8e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d62:	81bb      	strh	r3, [r7, #12]
 8007d64:	89bb      	ldrh	r3, [r7, #12]
 8007d66:	f083 0320 	eor.w	r3, r3, #32
 8007d6a:	81bb      	strh	r3, [r7, #12]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	441a      	add	r2, r3
 8007d76:	89bb      	ldrh	r3, [r7, #12]
 8007d78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	8013      	strh	r3, [r2, #0]
 8007d8c:	e3f9      	b.n	8008582 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007da4:	81fb      	strh	r3, [r7, #14]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	441a      	add	r2, r3
 8007db0:	89fb      	ldrh	r3, [r7, #14]
 8007db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	8013      	strh	r3, [r2, #0]
 8007dc6:	e3dc      	b.n	8008582 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	4413      	add	r3, r2
 8007dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	00da      	lsls	r2, r3, #3
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	4413      	add	r3, r2
 8007de6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	88db      	ldrh	r3, [r3, #6]
 8007df0:	085b      	lsrs	r3, r3, #1
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0c:	4413      	add	r3, r2
 8007e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	00da      	lsls	r2, r3, #3
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	4413      	add	r3, r2
 8007e1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	801a      	strh	r2, [r3, #0]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10a      	bne.n	8007e4e <USB_ActivateEndpoint+0x28a>
 8007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	801a      	strh	r2, [r3, #0]
 8007e4c:	e041      	b.n	8007ed2 <USB_ActivateEndpoint+0x30e>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e54:	d81c      	bhi.n	8007e90 <USB_ActivateEndpoint+0x2cc>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <USB_ActivateEndpoint+0x2b2>
 8007e6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e70:	3301      	adds	r3, #1
 8007e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	029b      	lsls	r3, r3, #10
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	4313      	orrs	r3, r2
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	801a      	strh	r2, [r3, #0]
 8007e8e:	e020      	b.n	8007ed2 <USB_ActivateEndpoint+0x30e>
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	095b      	lsrs	r3, r3, #5
 8007e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	f003 031f 	and.w	r3, r3, #31
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <USB_ActivateEndpoint+0x2ec>
 8007ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	029b      	lsls	r3, r3, #10
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007ee0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01b      	beq.n	8007f22 <USB_ActivateEndpoint+0x35e>
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f00:	843b      	strh	r3, [r7, #32]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	441a      	add	r2, r3
 8007f0c:	8c3b      	ldrh	r3, [r7, #32]
 8007f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d124      	bne.n	8007f74 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f40:	83bb      	strh	r3, [r7, #28]
 8007f42:	8bbb      	ldrh	r3, [r7, #28]
 8007f44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f48:	83bb      	strh	r3, [r7, #28]
 8007f4a:	8bbb      	ldrh	r3, [r7, #28]
 8007f4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f50:	83bb      	strh	r3, [r7, #28]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	8bbb      	ldrh	r3, [r7, #28]
 8007f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	8013      	strh	r3, [r2, #0]
 8007f72:	e306      	b.n	8008582 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f8a:	83fb      	strh	r3, [r7, #30]
 8007f8c:	8bfb      	ldrh	r3, [r7, #30]
 8007f8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f92:	83fb      	strh	r3, [r7, #30]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	441a      	add	r2, r3
 8007f9e:	8bfb      	ldrh	r3, [r7, #30]
 8007fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	8013      	strh	r3, [r2, #0]
 8007fb4:	e2e5      	b.n	8008582 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	78db      	ldrb	r3, [r3, #3]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d11e      	bne.n	8007ffc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fd4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	441a      	add	r2, r3
 8007fe2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8007fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	8013      	strh	r3, [r2, #0]
 8007ffa:	e01d      	b.n	8008038 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800800e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008012:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	441a      	add	r2, r3
 8008020:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800802c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008034:	b29b      	uxth	r3, r3
 8008036:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008042:	b29b      	uxth	r3, r3
 8008044:	461a      	mov	r2, r3
 8008046:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008048:	4413      	add	r3, r2
 800804a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	00da      	lsls	r2, r3, #3
 8008052:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008054:	4413      	add	r3, r2
 8008056:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800805a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	891b      	ldrh	r3, [r3, #8]
 8008060:	085b      	lsrs	r3, r3, #1
 8008062:	b29b      	uxth	r3, r3
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800806a:	801a      	strh	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008076:	b29b      	uxth	r3, r3
 8008078:	461a      	mov	r2, r3
 800807a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800807c:	4413      	add	r3, r2
 800807e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	00da      	lsls	r2, r3, #3
 8008086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008088:	4413      	add	r3, r2
 800808a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800808e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	895b      	ldrh	r3, [r3, #10]
 8008094:	085b      	lsrs	r3, r3, #1
 8008096:	b29b      	uxth	r3, r3
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800809e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	785b      	ldrb	r3, [r3, #1]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f040 81af 	bne.w	8008408 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80080ba:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80080be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d01d      	beq.n	8008102 <USB_ActivateEndpoint+0x53e>
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080dc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	441a      	add	r2, r3
 80080ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80080ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080fe:	b29b      	uxth	r3, r3
 8008100:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008112:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	d01d      	beq.n	800815a <USB_ActivateEndpoint+0x596>
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008134:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	441a      	add	r2, r3
 8008142:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800814a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800814e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008152:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008156:	b29b      	uxth	r3, r3
 8008158:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d16b      	bne.n	800823a <USB_ActivateEndpoint+0x676>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800816c:	b29b      	uxth	r3, r3
 800816e:	461a      	mov	r2, r3
 8008170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008172:	4413      	add	r3, r2
 8008174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	00da      	lsls	r2, r3, #3
 800817c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800817e:	4413      	add	r3, r2
 8008180:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008190:	b29a      	uxth	r2, r3
 8008192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <USB_ActivateEndpoint+0x5f0>
 800819e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081b0:	801a      	strh	r2, [r3, #0]
 80081b2:	e05d      	b.n	8008270 <USB_ActivateEndpoint+0x6ac>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80081ba:	d81c      	bhi.n	80081f6 <USB_ActivateEndpoint+0x632>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d004      	beq.n	80081dc <USB_ActivateEndpoint+0x618>
 80081d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081d6:	3301      	adds	r3, #1
 80081d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	029b      	lsls	r3, r3, #10
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	4313      	orrs	r3, r2
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081f2:	801a      	strh	r2, [r3, #0]
 80081f4:	e03c      	b.n	8008270 <USB_ActivateEndpoint+0x6ac>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <USB_ActivateEndpoint+0x652>
 800820c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008210:	3b01      	subs	r3, #1
 8008212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29a      	uxth	r2, r3
 800821c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008220:	b29b      	uxth	r3, r3
 8008222:	029b      	lsls	r3, r3, #10
 8008224:	b29b      	uxth	r3, r3
 8008226:	4313      	orrs	r3, r2
 8008228:	b29b      	uxth	r3, r3
 800822a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008232:	b29a      	uxth	r2, r3
 8008234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e01a      	b.n	8008270 <USB_ActivateEndpoint+0x6ac>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d116      	bne.n	8008270 <USB_ActivateEndpoint+0x6ac>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	657b      	str	r3, [r7, #84]	@ 0x54
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800824c:	b29b      	uxth	r3, r3
 800824e:	461a      	mov	r2, r3
 8008250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008252:	4413      	add	r3, r2
 8008254:	657b      	str	r3, [r7, #84]	@ 0x54
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	00da      	lsls	r2, r3, #3
 800825c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800825e:	4413      	add	r3, r2
 8008260:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008264:	653b      	str	r3, [r7, #80]	@ 0x50
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	b29a      	uxth	r2, r3
 800826c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	647b      	str	r3, [r7, #68]	@ 0x44
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	785b      	ldrb	r3, [r3, #1]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d16b      	bne.n	8008354 <USB_ActivateEndpoint+0x790>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008286:	b29b      	uxth	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800828c:	4413      	add	r3, r2
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	00da      	lsls	r2, r3, #3
 8008296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008298:	4413      	add	r3, r2
 800829a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800829e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <USB_ActivateEndpoint+0x70a>
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ca:	801a      	strh	r2, [r3, #0]
 80082cc:	e05b      	b.n	8008386 <USB_ActivateEndpoint+0x7c2>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80082d4:	d81c      	bhi.n	8008310 <USB_ActivateEndpoint+0x74c>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	085b      	lsrs	r3, r3, #1
 80082dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d004      	beq.n	80082f6 <USB_ActivateEndpoint+0x732>
 80082ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082f0:	3301      	adds	r3, #1
 80082f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008300:	b29b      	uxth	r3, r3
 8008302:	029b      	lsls	r3, r3, #10
 8008304:	b29b      	uxth	r3, r3
 8008306:	4313      	orrs	r3, r2
 8008308:	b29a      	uxth	r2, r3
 800830a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	e03a      	b.n	8008386 <USB_ActivateEndpoint+0x7c2>
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	095b      	lsrs	r3, r3, #5
 8008316:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 031f 	and.w	r3, r3, #31
 8008322:	2b00      	cmp	r3, #0
 8008324:	d104      	bne.n	8008330 <USB_ActivateEndpoint+0x76c>
 8008326:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800832a:	3b01      	subs	r3, #1
 800832c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800833a:	b29b      	uxth	r3, r3
 800833c:	029b      	lsls	r3, r3, #10
 800833e:	b29b      	uxth	r3, r3
 8008340:	4313      	orrs	r3, r2
 8008342:	b29b      	uxth	r3, r3
 8008344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800834c:	b29a      	uxth	r2, r3
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	801a      	strh	r2, [r3, #0]
 8008352:	e018      	b.n	8008386 <USB_ActivateEndpoint+0x7c2>
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d114      	bne.n	8008386 <USB_ActivateEndpoint+0x7c2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008362:	b29b      	uxth	r3, r3
 8008364:	461a      	mov	r2, r3
 8008366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008368:	4413      	add	r3, r2
 800836a:	647b      	str	r3, [r7, #68]	@ 0x44
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	00da      	lsls	r2, r3, #3
 8008372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008374:	4413      	add	r3, r2
 8008376:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800837a:	643b      	str	r3, [r7, #64]	@ 0x40
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	b29a      	uxth	r2, r3
 8008382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008384:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b29b      	uxth	r3, r3
 8008394:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800839c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800839e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80083a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80083a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80083ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	441a      	add	r2, r3
 80083b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083e4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	441a      	add	r2, r3
 80083f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80083f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008402:	b29b      	uxth	r3, r3
 8008404:	8013      	strh	r3, [r2, #0]
 8008406:	e0bc      	b.n	8008582 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8008418:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800841c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01d      	beq.n	8008460 <USB_ActivateEndpoint+0x89c>
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800843a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	441a      	add	r2, r3
 8008448:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800844c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008450:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800845c:	b29b      	uxth	r3, r3
 800845e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8008470:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01d      	beq.n	80084b8 <USB_ActivateEndpoint+0x8f4>
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	b29b      	uxth	r3, r3
 800848a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800848e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008492:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	441a      	add	r2, r3
 80084a0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80084a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	78db      	ldrb	r3, [r3, #3]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d024      	beq.n	800850a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084d6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80084da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80084de:	f083 0320 	eor.w	r3, r3, #32
 80084e2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	441a      	add	r2, r3
 80084f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80084f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008504:	b29b      	uxth	r3, r3
 8008506:	8013      	strh	r3, [r2, #0]
 8008508:	e01d      	b.n	8008546 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800851c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008520:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	441a      	add	r2, r3
 800852e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800853a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800853e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008542:	b29b      	uxth	r3, r3
 8008544:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	b29b      	uxth	r3, r3
 8008554:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800855c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	441a      	add	r2, r3
 800856a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800856e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800857a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800857e:	b29b      	uxth	r3, r3
 8008580:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008582:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8008586:	4618      	mov	r0, r3
 8008588:	379c      	adds	r7, #156	@ 0x9c
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop

08008594 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008594:	b480      	push	{r7}
 8008596:	b08d      	sub	sp, #52	@ 0x34
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	7b1b      	ldrb	r3, [r3, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f040 808e 	bne.w	80086c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d044      	beq.n	800863a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	881b      	ldrh	r3, [r3, #0]
 80085bc:	81bb      	strh	r3, [r7, #12]
 80085be:	89bb      	ldrh	r3, [r7, #12]
 80085c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01b      	beq.n	8008600 <USB_DeactivateEndpoint+0x6c>
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085de:	817b      	strh	r3, [r7, #10]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	441a      	add	r2, r3
 80085ea:	897b      	ldrh	r3, [r7, #10]
 80085ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	b29b      	uxth	r3, r3
 800860e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008616:	813b      	strh	r3, [r7, #8]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	441a      	add	r2, r3
 8008622:	893b      	ldrh	r3, [r7, #8]
 8008624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800862c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008634:	b29b      	uxth	r3, r3
 8008636:	8013      	strh	r3, [r2, #0]
 8008638:	e192      	b.n	8008960 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	827b      	strh	r3, [r7, #18]
 8008648:	8a7b      	ldrh	r3, [r7, #18]
 800864a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01b      	beq.n	800868a <USB_DeactivateEndpoint+0xf6>
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008668:	823b      	strh	r3, [r7, #16]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	441a      	add	r2, r3
 8008674:	8a3b      	ldrh	r3, [r7, #16]
 8008676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800867a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800867e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008686:	b29b      	uxth	r3, r3
 8008688:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800869c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a0:	81fb      	strh	r3, [r7, #14]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	89fb      	ldrh	r3, [r7, #14]
 80086ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086be:	b29b      	uxth	r3, r3
 80086c0:	8013      	strh	r3, [r2, #0]
 80086c2:	e14d      	b.n	8008960 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	785b      	ldrb	r3, [r3, #1]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f040 80a5 	bne.w	8008818 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	843b      	strh	r3, [r7, #32]
 80086dc:	8c3b      	ldrh	r3, [r7, #32]
 80086de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d01b      	beq.n	800871e <USB_DeactivateEndpoint+0x18a>
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086fc:	83fb      	strh	r3, [r7, #30]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	441a      	add	r2, r3
 8008708:	8bfb      	ldrh	r3, [r7, #30]
 800870a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800870e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800871a:	b29b      	uxth	r3, r3
 800871c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	83bb      	strh	r3, [r7, #28]
 800872c:	8bbb      	ldrh	r3, [r7, #28]
 800872e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d01b      	beq.n	800876e <USB_DeactivateEndpoint+0x1da>
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	b29b      	uxth	r3, r3
 8008744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800874c:	837b      	strh	r3, [r7, #26]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	441a      	add	r2, r3
 8008758:	8b7b      	ldrh	r3, [r7, #26]
 800875a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800875e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008766:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800876a:	b29b      	uxth	r3, r3
 800876c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	b29b      	uxth	r3, r3
 800877c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008784:	833b      	strh	r3, [r7, #24]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	441a      	add	r2, r3
 8008790:	8b3b      	ldrh	r3, [r7, #24]
 8008792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800879a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800879e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087bc:	82fb      	strh	r3, [r7, #22]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	441a      	add	r2, r3
 80087c8:	8afb      	ldrh	r3, [r7, #22]
 80087ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087da:	b29b      	uxth	r3, r3
 80087dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087f4:	82bb      	strh	r3, [r7, #20]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	441a      	add	r2, r3
 8008800:	8abb      	ldrh	r3, [r7, #20]
 8008802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800880a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800880e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008812:	b29b      	uxth	r3, r3
 8008814:	8013      	strh	r3, [r2, #0]
 8008816:	e0a3      	b.n	8008960 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008826:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01b      	beq.n	8008868 <USB_DeactivateEndpoint+0x2d4>
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008846:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	441a      	add	r2, r3
 8008852:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800885c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008864:	b29b      	uxth	r3, r3
 8008866:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008876:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01b      	beq.n	80088b8 <USB_DeactivateEndpoint+0x324>
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	b29b      	uxth	r3, r3
 800888e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008896:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	441a      	add	r2, r3
 80088a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80088a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	441a      	add	r2, r3
 80088da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008906:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	441a      	add	r2, r3
 8008912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800891c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008924:	b29b      	uxth	r3, r3
 8008926:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800893a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800893e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	441a      	add	r2, r3
 800894a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800894c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800895c:	b29b      	uxth	r3, r3
 800895e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3734      	adds	r7, #52	@ 0x34
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b0ac      	sub	sp, #176	@ 0xb0
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b01      	cmp	r3, #1
 800897e:	f040 84ca 	bne.w	8009316 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	429a      	cmp	r2, r3
 800898c:	d904      	bls.n	8008998 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008996:	e003      	b.n	80089a0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	7b1b      	ldrb	r3, [r3, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d122      	bne.n	80089ee <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	6959      	ldr	r1, [r3, #20]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	88da      	ldrh	r2, [r3, #6]
 80089b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 febd 	bl	8009736 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	461a      	mov	r2, r3
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	4413      	add	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	00da      	lsls	r2, r3, #3
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	4413      	add	r3, r2
 80089da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	801a      	strh	r2, [r3, #0]
 80089ea:	f000 bc6f 	b.w	80092cc <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	78db      	ldrb	r3, [r3, #3]
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	f040 831e 	bne.w	8009034 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	6a1a      	ldr	r2, [r3, #32]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	f240 82cf 	bls.w	8008fa4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a1c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	441a      	add	r2, r3
 8008a2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a36:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	6a1a      	ldr	r2, [r3, #32]
 8008a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a4a:	1ad2      	subs	r2, r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 814f 	beq.w	8008d06 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d16b      	bne.n	8008b4c <USB_EPStartXfer+0x1de>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	461a      	mov	r2, r3
 8008a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a84:	4413      	add	r3, r2
 8008a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	00da      	lsls	r2, r3, #3
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	4413      	add	r3, r2
 8008a92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10a      	bne.n	8008ac6 <USB_EPStartXfer+0x158>
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	e05b      	b.n	8008b7e <USB_EPStartXfer+0x210>
 8008ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aca:	2b3e      	cmp	r3, #62	@ 0x3e
 8008acc:	d81c      	bhi.n	8008b08 <USB_EPStartXfer+0x19a>
 8008ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ad2:	085b      	lsrs	r3, r3, #1
 8008ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d004      	beq.n	8008aee <USB_EPStartXfer+0x180>
 8008ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ae8:	3301      	adds	r3, #1
 8008aea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	029b      	lsls	r3, r3, #10
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	4313      	orrs	r3, r2
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b04:	801a      	strh	r2, [r3, #0]
 8008b06:	e03a      	b.n	8008b7e <USB_EPStartXfer+0x210>
 8008b08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b0c:	095b      	lsrs	r3, r3, #5
 8008b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b16:	f003 031f 	and.w	r3, r3, #31
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d104      	bne.n	8008b28 <USB_EPStartXfer+0x1ba>
 8008b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b22:	3b01      	subs	r3, #1
 8008b24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	029b      	lsls	r3, r3, #10
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b48:	801a      	strh	r2, [r3, #0]
 8008b4a:	e018      	b.n	8008b7e <USB_EPStartXfer+0x210>
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	785b      	ldrb	r3, [r3, #1]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d114      	bne.n	8008b7e <USB_EPStartXfer+0x210>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b60:	4413      	add	r3, r2
 8008b62:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	00da      	lsls	r2, r3, #3
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	895b      	ldrh	r3, [r3, #10]
 8008b82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	6959      	ldr	r1, [r3, #20]
 8008b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fdce 	bl	8009736 <USB_WritePMA>
            ep->xfer_buff += len;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	695a      	ldr	r2, [r3, #20]
 8008b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ba2:	441a      	add	r2, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	6a1a      	ldr	r2, [r3, #32]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d907      	bls.n	8008bc4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	6a1a      	ldr	r2, [r3, #32]
 8008bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bbc:	1ad2      	subs	r2, r2, r3
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	621a      	str	r2, [r3, #32]
 8008bc2:	e006      	b.n	8008bd2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	785b      	ldrb	r3, [r3, #1]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d16b      	bne.n	8008cb2 <USB_EPStartXfer+0x344>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	61bb      	str	r3, [r7, #24]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	461a      	mov	r2, r3
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	4413      	add	r3, r2
 8008bec:	61bb      	str	r3, [r7, #24]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	00da      	lsls	r2, r3, #3
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008bfc:	617b      	str	r3, [r7, #20]
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	801a      	strh	r2, [r3, #0]
 8008c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10a      	bne.n	8008c2c <USB_EPStartXfer+0x2be>
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	801a      	strh	r2, [r3, #0]
 8008c2a:	e05d      	b.n	8008ce8 <USB_EPStartXfer+0x37a>
 8008c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c30:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c32:	d81c      	bhi.n	8008c6e <USB_EPStartXfer+0x300>
 8008c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c38:	085b      	lsrs	r3, r3, #1
 8008c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d004      	beq.n	8008c54 <USB_EPStartXfer+0x2e6>
 8008c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c4e:	3301      	adds	r3, #1
 8008c50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	029b      	lsls	r3, r3, #10
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	4313      	orrs	r3, r2
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	801a      	strh	r2, [r3, #0]
 8008c6c:	e03c      	b.n	8008ce8 <USB_EPStartXfer+0x37a>
 8008c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c72:	095b      	lsrs	r3, r3, #5
 8008c74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c7c:	f003 031f 	and.w	r3, r3, #31
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d104      	bne.n	8008c8e <USB_EPStartXfer+0x320>
 8008c84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	029b      	lsls	r3, r3, #10
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	801a      	strh	r2, [r3, #0]
 8008cb0:	e01a      	b.n	8008ce8 <USB_EPStartXfer+0x37a>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	785b      	ldrb	r3, [r3, #1]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d116      	bne.n	8008ce8 <USB_EPStartXfer+0x37a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	623b      	str	r3, [r7, #32]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	4413      	add	r3, r2
 8008ccc:	623b      	str	r3, [r7, #32]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	00da      	lsls	r2, r3, #3
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008cdc:	61fb      	str	r3, [r7, #28]
 8008cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	891b      	ldrh	r3, [r3, #8]
 8008cec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	6959      	ldr	r1, [r3, #20]
 8008cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fd19 	bl	8009736 <USB_WritePMA>
 8008d04:	e2e2      	b.n	80092cc <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	785b      	ldrb	r3, [r3, #1]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d16b      	bne.n	8008de6 <USB_EPStartXfer+0x478>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d1e:	4413      	add	r3, r2
 8008d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	00da      	lsls	r2, r3, #3
 8008d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d40:	801a      	strh	r2, [r3, #0]
 8008d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10a      	bne.n	8008d60 <USB_EPStartXfer+0x3f2>
 8008d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d5c:	801a      	strh	r2, [r3, #0]
 8008d5e:	e05d      	b.n	8008e1c <USB_EPStartXfer+0x4ae>
 8008d60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d64:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d66:	d81c      	bhi.n	8008da2 <USB_EPStartXfer+0x434>
 8008d68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d6c:	085b      	lsrs	r3, r3, #1
 8008d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d004      	beq.n	8008d88 <USB_EPStartXfer+0x41a>
 8008d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d82:	3301      	adds	r3, #1
 8008d84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	029b      	lsls	r3, r3, #10
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d9e:	801a      	strh	r2, [r3, #0]
 8008da0:	e03c      	b.n	8008e1c <USB_EPStartXfer+0x4ae>
 8008da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008da6:	095b      	lsrs	r3, r3, #5
 8008da8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008db0:	f003 031f 	and.w	r3, r3, #31
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d104      	bne.n	8008dc2 <USB_EPStartXfer+0x454>
 8008db8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	029b      	lsls	r3, r3, #10
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008de2:	801a      	strh	r2, [r3, #0]
 8008de4:	e01a      	b.n	8008e1c <USB_EPStartXfer+0x4ae>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	785b      	ldrb	r3, [r3, #1]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d116      	bne.n	8008e1c <USB_EPStartXfer+0x4ae>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dfe:	4413      	add	r3, r2
 8008e00:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	00da      	lsls	r2, r3, #3
 8008e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	891b      	ldrh	r3, [r3, #8]
 8008e20:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	6959      	ldr	r1, [r3, #20]
 8008e28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fc7f 	bl	8009736 <USB_WritePMA>
            ep->xfer_buff += len;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	695a      	ldr	r2, [r3, #20]
 8008e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e40:	441a      	add	r2, r3
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	6a1a      	ldr	r2, [r3, #32]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d907      	bls.n	8008e62 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	6a1a      	ldr	r2, [r3, #32]
 8008e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e5a:	1ad2      	subs	r2, r2, r3
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	621a      	str	r2, [r3, #32]
 8008e60:	e006      	b.n	8008e70 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	785b      	ldrb	r3, [r3, #1]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d16b      	bne.n	8008f54 <USB_EPStartXfer+0x5e6>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8c:	4413      	add	r3, r2
 8008e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	00da      	lsls	r2, r3, #3
 8008e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e98:	4413      	add	r3, r2
 8008e9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eae:	801a      	strh	r2, [r3, #0]
 8008eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <USB_EPStartXfer+0x560>
 8008eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eca:	801a      	strh	r2, [r3, #0]
 8008ecc:	e05b      	b.n	8008f86 <USB_EPStartXfer+0x618>
 8008ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ed2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ed4:	d81c      	bhi.n	8008f10 <USB_EPStartXfer+0x5a2>
 8008ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eda:	085b      	lsrs	r3, r3, #1
 8008edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d004      	beq.n	8008ef6 <USB_EPStartXfer+0x588>
 8008eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	029b      	lsls	r3, r3, #10
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	4313      	orrs	r3, r2
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f0c:	801a      	strh	r2, [r3, #0]
 8008f0e:	e03a      	b.n	8008f86 <USB_EPStartXfer+0x618>
 8008f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f14:	095b      	lsrs	r3, r3, #5
 8008f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f1e:	f003 031f 	and.w	r3, r3, #31
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d104      	bne.n	8008f30 <USB_EPStartXfer+0x5c2>
 8008f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	029b      	lsls	r3, r3, #10
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	4313      	orrs	r3, r2
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f50:	801a      	strh	r2, [r3, #0]
 8008f52:	e018      	b.n	8008f86 <USB_EPStartXfer+0x618>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	785b      	ldrb	r3, [r3, #1]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d114      	bne.n	8008f86 <USB_EPStartXfer+0x618>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	461a      	mov	r2, r3
 8008f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f68:	4413      	add	r3, r2
 8008f6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	00da      	lsls	r2, r3, #3
 8008f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f74:	4413      	add	r3, r2
 8008f76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	895b      	ldrh	r3, [r3, #10]
 8008f8a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	6959      	ldr	r1, [r3, #20]
 8008f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fbca 	bl	8009736 <USB_WritePMA>
 8008fa2:	e193      	b.n	80092cc <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fc2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	441a      	add	r2, r3
 8008fd0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ff8:	4413      	add	r3, r2
 8008ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	00da      	lsls	r2, r3, #3
 8009002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009004:	4413      	add	r3, r2
 8009006:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800900a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800900c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009010:	b29a      	uxth	r2, r3
 8009012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009014:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	891b      	ldrh	r3, [r3, #8]
 800901a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	6959      	ldr	r1, [r3, #20]
 8009022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009026:	b29b      	uxth	r3, r3
 8009028:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fb82 	bl	8009736 <USB_WritePMA>
 8009032:	e14b      	b.n	80092cc <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	6a1a      	ldr	r2, [r3, #32]
 8009038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800903c:	1ad2      	subs	r2, r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	b29b      	uxth	r3, r3
 8009050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 809a 	beq.w	800918e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	673b      	str	r3, [r7, #112]	@ 0x70
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d16b      	bne.n	800913e <USB_EPStartXfer+0x7d0>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009070:	b29b      	uxth	r3, r3
 8009072:	461a      	mov	r2, r3
 8009074:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009076:	4413      	add	r3, r2
 8009078:	66bb      	str	r3, [r7, #104]	@ 0x68
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	00da      	lsls	r2, r3, #3
 8009080:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009082:	4413      	add	r3, r2
 8009084:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009088:	667b      	str	r3, [r7, #100]	@ 0x64
 800908a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009094:	b29a      	uxth	r2, r3
 8009096:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009098:	801a      	strh	r2, [r3, #0]
 800909a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <USB_EPStartXfer+0x74a>
 80090a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090b4:	801a      	strh	r2, [r3, #0]
 80090b6:	e05b      	b.n	8009170 <USB_EPStartXfer+0x802>
 80090b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80090be:	d81c      	bhi.n	80090fa <USB_EPStartXfer+0x78c>
 80090c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090c4:	085b      	lsrs	r3, r3, #1
 80090c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <USB_EPStartXfer+0x772>
 80090d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090da:	3301      	adds	r3, #1
 80090dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	029b      	lsls	r3, r3, #10
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	4313      	orrs	r3, r2
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090f6:	801a      	strh	r2, [r3, #0]
 80090f8:	e03a      	b.n	8009170 <USB_EPStartXfer+0x802>
 80090fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090fe:	095b      	lsrs	r3, r3, #5
 8009100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009108:	f003 031f 	and.w	r3, r3, #31
 800910c:	2b00      	cmp	r3, #0
 800910e:	d104      	bne.n	800911a <USB_EPStartXfer+0x7ac>
 8009110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009114:	3b01      	subs	r3, #1
 8009116:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800911a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	b29a      	uxth	r2, r3
 8009120:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009124:	b29b      	uxth	r3, r3
 8009126:	029b      	lsls	r3, r3, #10
 8009128:	b29b      	uxth	r3, r3
 800912a:	4313      	orrs	r3, r2
 800912c:	b29b      	uxth	r3, r3
 800912e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009136:	b29a      	uxth	r2, r3
 8009138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800913a:	801a      	strh	r2, [r3, #0]
 800913c:	e018      	b.n	8009170 <USB_EPStartXfer+0x802>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	785b      	ldrb	r3, [r3, #1]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d114      	bne.n	8009170 <USB_EPStartXfer+0x802>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800914c:	b29b      	uxth	r3, r3
 800914e:	461a      	mov	r2, r3
 8009150:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009152:	4413      	add	r3, r2
 8009154:	673b      	str	r3, [r7, #112]	@ 0x70
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	00da      	lsls	r2, r3, #3
 800915c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800915e:	4413      	add	r3, r2
 8009160:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009164:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800916a:	b29a      	uxth	r2, r3
 800916c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800916e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	895b      	ldrh	r3, [r3, #10]
 8009174:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	6959      	ldr	r1, [r3, #20]
 800917c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009180:	b29b      	uxth	r3, r3
 8009182:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fad5 	bl	8009736 <USB_WritePMA>
 800918c:	e09e      	b.n	80092cc <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	785b      	ldrb	r3, [r3, #1]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d16b      	bne.n	800926e <USB_EPStartXfer+0x900>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80091a6:	4413      	add	r3, r2
 80091a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	00da      	lsls	r2, r3, #3
 80091b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80091b2:	4413      	add	r3, r2
 80091b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80091b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091c8:	801a      	strh	r2, [r3, #0]
 80091ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10a      	bne.n	80091e8 <USB_EPStartXfer+0x87a>
 80091d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091e4:	801a      	strh	r2, [r3, #0]
 80091e6:	e063      	b.n	80092b0 <USB_EPStartXfer+0x942>
 80091e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80091ee:	d81c      	bhi.n	800922a <USB_EPStartXfer+0x8bc>
 80091f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091f4:	085b      	lsrs	r3, r3, #1
 80091f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <USB_EPStartXfer+0x8a2>
 8009206:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800920a:	3301      	adds	r3, #1
 800920c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009210:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	b29a      	uxth	r2, r3
 8009216:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800921a:	b29b      	uxth	r3, r3
 800921c:	029b      	lsls	r3, r3, #10
 800921e:	b29b      	uxth	r3, r3
 8009220:	4313      	orrs	r3, r2
 8009222:	b29a      	uxth	r2, r3
 8009224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009226:	801a      	strh	r2, [r3, #0]
 8009228:	e042      	b.n	80092b0 <USB_EPStartXfer+0x942>
 800922a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800922e:	095b      	lsrs	r3, r3, #5
 8009230:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009238:	f003 031f 	and.w	r3, r3, #31
 800923c:	2b00      	cmp	r3, #0
 800923e:	d104      	bne.n	800924a <USB_EPStartXfer+0x8dc>
 8009240:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009244:	3b01      	subs	r3, #1
 8009246:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800924a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	b29a      	uxth	r2, r3
 8009250:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009254:	b29b      	uxth	r3, r3
 8009256:	029b      	lsls	r3, r3, #10
 8009258:	b29b      	uxth	r3, r3
 800925a:	4313      	orrs	r3, r2
 800925c:	b29b      	uxth	r3, r3
 800925e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009266:	b29a      	uxth	r2, r3
 8009268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800926a:	801a      	strh	r2, [r3, #0]
 800926c:	e020      	b.n	80092b0 <USB_EPStartXfer+0x942>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	785b      	ldrb	r3, [r3, #1]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d11c      	bne.n	80092b0 <USB_EPStartXfer+0x942>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009282:	b29b      	uxth	r3, r3
 8009284:	461a      	mov	r2, r3
 8009286:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800928a:	4413      	add	r3, r2
 800928c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	00da      	lsls	r2, r3, #3
 8009296:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800929a:	4413      	add	r3, r2
 800929c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80092a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	891b      	ldrh	r3, [r3, #8]
 80092b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	6959      	ldr	r1, [r3, #20]
 80092bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fa35 	bl	8009736 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4413      	add	r3, r2
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	b29b      	uxth	r3, r3
 80092da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092e2:	817b      	strh	r3, [r7, #10]
 80092e4:	897b      	ldrh	r3, [r7, #10]
 80092e6:	f083 0310 	eor.w	r3, r3, #16
 80092ea:	817b      	strh	r3, [r7, #10]
 80092ec:	897b      	ldrh	r3, [r7, #10]
 80092ee:	f083 0320 	eor.w	r3, r3, #32
 80092f2:	817b      	strh	r3, [r7, #10]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	441a      	add	r2, r3
 80092fe:	897b      	ldrh	r3, [r7, #10]
 8009300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800930c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009310:	b29b      	uxth	r3, r3
 8009312:	8013      	strh	r3, [r2, #0]
 8009314:	e0d5      	b.n	80094c2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	7b1b      	ldrb	r3, [r3, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d156      	bne.n	80093cc <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d122      	bne.n	800936c <USB_EPStartXfer+0x9fe>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	78db      	ldrb	r3, [r3, #3]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d11e      	bne.n	800936c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4413      	add	r3, r2
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	b29b      	uxth	r3, r3
 800933c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009344:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	441a      	add	r2, r3
 8009352:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800935a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800935e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009366:	b29b      	uxth	r3, r3
 8009368:	8013      	strh	r3, [r2, #0]
 800936a:	e01d      	b.n	80093a8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800937e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009382:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	441a      	add	r2, r3
 8009390:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009394:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009398:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800939c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	699a      	ldr	r2, [r3, #24]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d907      	bls.n	80093c4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	699a      	ldr	r2, [r3, #24]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	1ad2      	subs	r2, r2, r3
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	619a      	str	r2, [r3, #24]
 80093c2:	e054      	b.n	800946e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2200      	movs	r2, #0
 80093c8:	619a      	str	r2, [r3, #24]
 80093ca:	e050      	b.n	800946e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	78db      	ldrb	r3, [r3, #3]
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d142      	bne.n	800945a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	69db      	ldr	r3, [r3, #28]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d048      	beq.n	800946e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80093f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d005      	beq.n	8009404 <USB_EPStartXfer+0xa96>
 80093f8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80093fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10b      	bne.n	800941c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009404:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800940c:	2b00      	cmp	r3, #0
 800940e:	d12e      	bne.n	800946e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009410:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009418:	2b00      	cmp	r3, #0
 800941a:	d128      	bne.n	800946e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	b29b      	uxth	r3, r3
 800942a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800942e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009432:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	441a      	add	r2, r3
 8009440:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800944c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009450:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009454:	b29b      	uxth	r3, r3
 8009456:	8013      	strh	r3, [r2, #0]
 8009458:	e009      	b.n	800946e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	78db      	ldrb	r3, [r3, #3]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d103      	bne.n	800946a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2200      	movs	r2, #0
 8009466:	619a      	str	r2, [r3, #24]
 8009468:	e001      	b.n	800946e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e02a      	b.n	80094c4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	b29b      	uxth	r3, r3
 800947c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009484:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009488:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800948c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009490:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009494:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009498:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800949c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	441a      	add	r2, r3
 80094aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80094ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094be:	b29b      	uxth	r3, r3
 80094c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	37b0      	adds	r7, #176	@ 0xb0
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	785b      	ldrb	r3, [r3, #1]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d020      	beq.n	8009520 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f4:	81bb      	strh	r3, [r7, #12]
 80094f6:	89bb      	ldrh	r3, [r7, #12]
 80094f8:	f083 0310 	eor.w	r3, r3, #16
 80094fc:	81bb      	strh	r3, [r7, #12]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	441a      	add	r2, r3
 8009508:	89bb      	ldrh	r3, [r7, #12]
 800950a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800950e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800951a:	b29b      	uxth	r3, r3
 800951c:	8013      	strh	r3, [r2, #0]
 800951e:	e01f      	b.n	8009560 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	b29b      	uxth	r3, r3
 800952e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009536:	81fb      	strh	r3, [r7, #14]
 8009538:	89fb      	ldrh	r3, [r7, #14]
 800953a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800953e:	81fb      	strh	r3, [r7, #14]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	441a      	add	r2, r3
 800954a:	89fb      	ldrh	r3, [r7, #14]
 800954c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800955c:	b29b      	uxth	r3, r3
 800955e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800956e:	b480      	push	{r7}
 8009570:	b087      	sub	sp, #28
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	785b      	ldrb	r3, [r3, #1]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d04c      	beq.n	800961a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	823b      	strh	r3, [r7, #16]
 800958e:	8a3b      	ldrh	r3, [r7, #16]
 8009590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009594:	2b00      	cmp	r3, #0
 8009596:	d01b      	beq.n	80095d0 <USB_EPClearStall+0x62>
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ae:	81fb      	strh	r3, [r7, #14]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	441a      	add	r2, r3
 80095ba:	89fb      	ldrh	r3, [r7, #14]
 80095bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	78db      	ldrb	r3, [r3, #3]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d06c      	beq.n	80096b2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ee:	81bb      	strh	r3, [r7, #12]
 80095f0:	89bb      	ldrh	r3, [r7, #12]
 80095f2:	f083 0320 	eor.w	r3, r3, #32
 80095f6:	81bb      	strh	r3, [r7, #12]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	441a      	add	r2, r3
 8009602:	89bb      	ldrh	r3, [r7, #12]
 8009604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800960c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009614:	b29b      	uxth	r3, r3
 8009616:	8013      	strh	r3, [r2, #0]
 8009618:	e04b      	b.n	80096b2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	82fb      	strh	r3, [r7, #22]
 8009628:	8afb      	ldrh	r3, [r7, #22]
 800962a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d01b      	beq.n	800966a <USB_EPClearStall+0xfc>
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	b29b      	uxth	r3, r3
 8009640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009648:	82bb      	strh	r3, [r7, #20]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	441a      	add	r2, r3
 8009654:	8abb      	ldrh	r3, [r7, #20]
 8009656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800965a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800965e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009666:	b29b      	uxth	r3, r3
 8009668:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	b29b      	uxth	r3, r3
 8009678:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800967c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009680:	827b      	strh	r3, [r7, #18]
 8009682:	8a7b      	ldrh	r3, [r7, #18]
 8009684:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009688:	827b      	strh	r3, [r7, #18]
 800968a:	8a7b      	ldrh	r3, [r7, #18]
 800968c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009690:	827b      	strh	r3, [r7, #18]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	441a      	add	r2, r3
 800969c:	8a7b      	ldrh	r3, [r7, #18]
 800969e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	371c      	adds	r7, #28
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80096cc:	78fb      	ldrb	r3, [r7, #3]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d103      	bne.n	80096da <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2280      	movs	r2, #128	@ 0x80
 80096d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009700:	b29a      	uxth	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009716:	b480      	push	{r7}
 8009718:	b085      	sub	sp, #20
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009724:	b29b      	uxth	r3, r3
 8009726:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009728:	68fb      	ldr	r3, [r7, #12]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009736:	b480      	push	{r7}
 8009738:	b08b      	sub	sp, #44	@ 0x2c
 800973a:	af00      	add	r7, sp, #0
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	4611      	mov	r1, r2
 8009742:	461a      	mov	r2, r3
 8009744:	460b      	mov	r3, r1
 8009746:	80fb      	strh	r3, [r7, #6]
 8009748:	4613      	mov	r3, r2
 800974a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800974c:	88bb      	ldrh	r3, [r7, #4]
 800974e:	3301      	adds	r3, #1
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800975c:	88fa      	ldrh	r2, [r7, #6]
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	4413      	add	r3, r2
 8009762:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009766:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	627b      	str	r3, [r7, #36]	@ 0x24
 800976c:	e01b      	b.n	80097a6 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	3301      	adds	r3, #1
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	b21a      	sxth	r2, r3
 800977e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009782:	4313      	orrs	r3, r2
 8009784:	b21b      	sxth	r3, r3
 8009786:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	8a7a      	ldrh	r2, [r7, #18]
 800978c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	3302      	adds	r3, #2
 8009792:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	3301      	adds	r3, #1
 8009798:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	3301      	adds	r3, #1
 800979e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80097a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a2:	3b01      	subs	r3, #1
 80097a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80097a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e0      	bne.n	800976e <USB_WritePMA+0x38>
  }
}
 80097ac:	bf00      	nop
 80097ae:	bf00      	nop
 80097b0:	372c      	adds	r7, #44	@ 0x2c
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b08b      	sub	sp, #44	@ 0x2c
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	4611      	mov	r1, r2
 80097c6:	461a      	mov	r2, r3
 80097c8:	460b      	mov	r3, r1
 80097ca:	80fb      	strh	r3, [r7, #6]
 80097cc:	4613      	mov	r3, r2
 80097ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80097d0:	88bb      	ldrh	r3, [r7, #4]
 80097d2:	085b      	lsrs	r3, r3, #1
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80097e0:	88fa      	ldrh	r2, [r7, #6]
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097ea:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80097f0:	e018      	b.n	8009824 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	3302      	adds	r3, #2
 80097fe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	b2da      	uxtb	r2, r3
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	3301      	adds	r3, #1
 800980c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	0a1b      	lsrs	r3, r3, #8
 8009812:	b2da      	uxtb	r2, r3
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	3301      	adds	r3, #1
 800981c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009820:	3b01      	subs	r3, #1
 8009822:	627b      	str	r3, [r7, #36]	@ 0x24
 8009824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e3      	bne.n	80097f2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800982a:	88bb      	ldrh	r3, [r7, #4]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	b29b      	uxth	r3, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d007      	beq.n	8009846 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	b29b      	uxth	r3, r3
 800983c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	701a      	strb	r2, [r3, #0]
  }
}
 8009846:	bf00      	nop
 8009848:	372c      	adds	r7, #44	@ 0x2c
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800985e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009862:	f002 f911 	bl	800ba88 <USBD_static_malloc>
 8009866:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d105      	bne.n	800987a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009876:	2302      	movs	r3, #2
 8009878:	e066      	b.n	8009948 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	7c1b      	ldrb	r3, [r3, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d119      	bne.n	80098be <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800988a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800988e:	2202      	movs	r2, #2
 8009890:	2181      	movs	r1, #129	@ 0x81
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f001 ff9f 	bl	800b7d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800989e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098a2:	2202      	movs	r2, #2
 80098a4:	2101      	movs	r1, #1
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 ff95 	bl	800b7d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2210      	movs	r2, #16
 80098b8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 80098bc:	e016      	b.n	80098ec <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80098be:	2340      	movs	r3, #64	@ 0x40
 80098c0:	2202      	movs	r2, #2
 80098c2:	2181      	movs	r1, #129	@ 0x81
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f001 ff86 	bl	800b7d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80098d0:	2340      	movs	r3, #64	@ 0x40
 80098d2:	2202      	movs	r2, #2
 80098d4:	2101      	movs	r1, #1
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f001 ff7d 	bl	800b7d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2210      	movs	r2, #16
 80098e8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80098ec:	2308      	movs	r3, #8
 80098ee:	2203      	movs	r2, #3
 80098f0:	2182      	movs	r1, #130	@ 0x82
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f001 ff6f 	bl	800b7d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	7c1b      	ldrb	r3, [r3, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d109      	bne.n	8009936 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800992c:	2101      	movs	r1, #1
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f002 f840 	bl	800b9b4 <USBD_LL_PrepareReceive>
 8009934:	e007      	b.n	8009946 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800993c:	2340      	movs	r3, #64	@ 0x40
 800993e:	2101      	movs	r1, #1
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f002 f837 	bl	800b9b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800995c:	2181      	movs	r1, #129	@ 0x81
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 ff5f 	bl	800b822 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800996a:	2101      	movs	r1, #1
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 ff58 	bl	800b822 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800997a:	2182      	movs	r1, #130	@ 0x82
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f001 ff50 	bl	800b822 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00e      	beq.n	80099ba <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80099ac:	4618      	mov	r0, r3
 80099ae:	f002 f879 	bl	800baa4 <USBD_static_free>
    pdev->pClassData = NULL;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80099d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e0af      	b.n	8009b4c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d03f      	beq.n	8009a78 <USBD_CDC_Setup+0xb4>
 80099f8:	2b20      	cmp	r3, #32
 80099fa:	f040 809f 	bne.w	8009b3c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	88db      	ldrh	r3, [r3, #6]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d02e      	beq.n	8009a64 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	b25b      	sxtb	r3, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	da16      	bge.n	8009a3e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009a1c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	88d2      	ldrh	r2, [r2, #6]
 8009a22:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	88db      	ldrh	r3, [r3, #6]
 8009a28:	2b07      	cmp	r3, #7
 8009a2a:	bf28      	it	cs
 8009a2c:	2307      	movcs	r3, #7
 8009a2e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	89fa      	ldrh	r2, [r7, #14]
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 facd 	bl	800afd6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009a3c:	e085      	b.n	8009b4a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	785a      	ldrb	r2, [r3, #1]
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	88db      	ldrh	r3, [r3, #6]
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009a54:	6939      	ldr	r1, [r7, #16]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	88db      	ldrh	r3, [r3, #6]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 fae6 	bl	800b02e <USBD_CtlPrepareRx>
      break;
 8009a62:	e072      	b.n	8009b4a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	7850      	ldrb	r0, [r2, #1]
 8009a70:	2200      	movs	r2, #0
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	4798      	blx	r3
      break;
 8009a76:	e068      	b.n	8009b4a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	785b      	ldrb	r3, [r3, #1]
 8009a7c:	2b0b      	cmp	r3, #11
 8009a7e:	d852      	bhi.n	8009b26 <USBD_CDC_Setup+0x162>
 8009a80:	a201      	add	r2, pc, #4	@ (adr r2, 8009a88 <USBD_CDC_Setup+0xc4>)
 8009a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a86:	bf00      	nop
 8009a88:	08009ab9 	.word	0x08009ab9
 8009a8c:	08009b35 	.word	0x08009b35
 8009a90:	08009b27 	.word	0x08009b27
 8009a94:	08009b27 	.word	0x08009b27
 8009a98:	08009b27 	.word	0x08009b27
 8009a9c:	08009b27 	.word	0x08009b27
 8009aa0:	08009b27 	.word	0x08009b27
 8009aa4:	08009b27 	.word	0x08009b27
 8009aa8:	08009b27 	.word	0x08009b27
 8009aac:	08009b27 	.word	0x08009b27
 8009ab0:	08009ae3 	.word	0x08009ae3
 8009ab4:	08009b0d 	.word	0x08009b0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d107      	bne.n	8009ad4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ac4:	f107 030a 	add.w	r3, r7, #10
 8009ac8:	2202      	movs	r2, #2
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 fa82 	bl	800afd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ad2:	e032      	b.n	8009b3a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 fa0c 	bl	800aef4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009adc:	2303      	movs	r3, #3
 8009ade:	75fb      	strb	r3, [r7, #23]
          break;
 8009ae0:	e02b      	b.n	8009b3a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d107      	bne.n	8009afe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009aee:	f107 030d 	add.w	r3, r7, #13
 8009af2:	2201      	movs	r2, #1
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 fa6d 	bl	800afd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009afc:	e01d      	b.n	8009b3a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f001 f9f7 	bl	800aef4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b06:	2303      	movs	r3, #3
 8009b08:	75fb      	strb	r3, [r7, #23]
          break;
 8009b0a:	e016      	b.n	8009b3a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	d00f      	beq.n	8009b38 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f001 f9ea 	bl	800aef4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b20:	2303      	movs	r3, #3
 8009b22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b24:	e008      	b.n	8009b38 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f001 f9e3 	bl	800aef4 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	75fb      	strb	r3, [r7, #23]
          break;
 8009b32:	e002      	b.n	8009b3a <USBD_CDC_Setup+0x176>
          break;
 8009b34:	bf00      	nop
 8009b36:	e008      	b.n	8009b4a <USBD_CDC_Setup+0x186>
          break;
 8009b38:	bf00      	nop
      }
      break;
 8009b3a:	e006      	b.n	8009b4a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f001 f9d8 	bl	800aef4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b44:	2303      	movs	r3, #3
 8009b46:	75fb      	strb	r3, [r7, #23]
      break;
 8009b48:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009b66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e04f      	b.n	8009c16 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009b7e:	78fa      	ldrb	r2, [r7, #3]
 8009b80:	6879      	ldr	r1, [r7, #4]
 8009b82:	4613      	mov	r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4413      	add	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	440b      	add	r3, r1
 8009b8c:	3318      	adds	r3, #24
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d029      	beq.n	8009be8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	440b      	add	r3, r1
 8009ba2:	3318      	adds	r3, #24
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	78f9      	ldrb	r1, [r7, #3]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	460b      	mov	r3, r1
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	440b      	add	r3, r1
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	4403      	add	r3, r0
 8009bb4:	3320      	adds	r3, #32
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009bbc:	fb01 f303 	mul.w	r3, r1, r3
 8009bc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d110      	bne.n	8009be8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009bc6:	78fa      	ldrb	r2, [r7, #3]
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	3318      	adds	r3, #24
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009bda:	78f9      	ldrb	r1, [r7, #3]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	2200      	movs	r2, #0
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f001 fec6 	bl	800b972 <USBD_LL_Transmit>
 8009be6:	e015      	b.n	8009c14 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009c10:	78fa      	ldrb	r2, [r7, #3]
 8009c12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	460b      	mov	r3, r1
 8009c28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e015      	b.n	8009c6c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c40:	78fb      	ldrb	r3, [r7, #3]
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 fed6 	bl	800b9f6 <USBD_LL_GetRxDataSize>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009c66:	4611      	mov	r1, r2
 8009c68:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e01a      	b.n	8009cc4 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d014      	beq.n	8009cc2 <USBD_CDC_EP0_RxReady+0x4e>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009c9e:	2bff      	cmp	r3, #255	@ 0xff
 8009ca0:	d00f      	beq.n	8009cc2 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009cb0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009cb8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	22ff      	movs	r2, #255	@ 0xff
 8009cbe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2243      	movs	r2, #67	@ 0x43
 8009cd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009cda:	4b03      	ldr	r3, [pc, #12]	@ (8009ce8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	2000012c 	.word	0x2000012c

08009cec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2243      	movs	r2, #67	@ 0x43
 8009cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009cfa:	4b03      	ldr	r3, [pc, #12]	@ (8009d08 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	200000e8 	.word	0x200000e8

08009d0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2243      	movs	r2, #67	@ 0x43
 8009d18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009d1a:	4b03      	ldr	r3, [pc, #12]	@ (8009d28 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	20000170 	.word	0x20000170

08009d2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	220a      	movs	r2, #10
 8009d38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009d3a:	4b03      	ldr	r3, [pc, #12]	@ (8009d48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	200000a4 	.word	0x200000a4

08009d4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e004      	b.n	8009d6a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b087      	sub	sp, #28
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d88:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e008      	b.n	8009da6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b085      	sub	sp, #20
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009dc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d101      	bne.n	8009dce <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e004      	b.n	8009dd8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009df2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009df4:	2301      	movs	r3, #1
 8009df6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e01a      	b.n	8009e3c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d114      	bne.n	8009e3a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009e2e:	2181      	movs	r1, #129	@ 0x81
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 fd9e 	bl	800b972 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e016      	b.n	8009e90 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	7c1b      	ldrb	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d109      	bne.n	8009e7e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e74:	2101      	movs	r1, #1
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 fd9c 	bl	800b9b4 <USBD_LL_PrepareReceive>
 8009e7c:	e007      	b.n	8009e8e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e84:	2340      	movs	r3, #64	@ 0x40
 8009e86:	2101      	movs	r1, #1
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 fd93 	bl	800b9b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e01f      	b.n	8009ef0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	79fa      	ldrb	r2, [r7, #7]
 8009ee2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f001 fbfb 	bl	800b6e0 <USBD_LL_Init>
 8009eea:	4603      	mov	r3, r0
 8009eec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e016      	b.n	8009f3e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00b      	beq.n	8009f3c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2c:	f107 020e 	add.w	r2, r7, #14
 8009f30:	4610      	mov	r0, r2
 8009f32:	4798      	blx	r3
 8009f34:	4602      	mov	r2, r0
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 fc26 	bl	800b7a0 <USBD_LL_Start>
 8009f54:	4603      	mov	r3, r0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d009      	beq.n	8009fa2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	78fa      	ldrb	r2, [r7, #3]
 8009f98:	4611      	mov	r1, r2
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	4798      	blx	r3
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d007      	beq.n	8009fd2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	78fa      	ldrb	r2, [r7, #3]
 8009fcc:	4611      	mov	r1, r2
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	4798      	blx	r3
  }

  return USBD_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 ff46 	bl	800ae80 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a002:	461a      	mov	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a010:	f003 031f 	and.w	r3, r3, #31
 800a014:	2b02      	cmp	r3, #2
 800a016:	d01a      	beq.n	800a04e <USBD_LL_SetupStage+0x72>
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d822      	bhi.n	800a062 <USBD_LL_SetupStage+0x86>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <USBD_LL_SetupStage+0x4a>
 800a020:	2b01      	cmp	r3, #1
 800a022:	d00a      	beq.n	800a03a <USBD_LL_SetupStage+0x5e>
 800a024:	e01d      	b.n	800a062 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f9ee 	bl	800a410 <USBD_StdDevReq>
 800a034:	4603      	mov	r3, r0
 800a036:	73fb      	strb	r3, [r7, #15]
      break;
 800a038:	e020      	b.n	800a07c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fa52 	bl	800a4ec <USBD_StdItfReq>
 800a048:	4603      	mov	r3, r0
 800a04a:	73fb      	strb	r3, [r7, #15]
      break;
 800a04c:	e016      	b.n	800a07c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fa91 	bl	800a57e <USBD_StdEPReq>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
      break;
 800a060:	e00c      	b.n	800a07c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a068:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 fbf5 	bl	800b860 <USBD_LL_StallEP>
 800a076:	4603      	mov	r3, r0
 800a078:	73fb      	strb	r3, [r7, #15]
      break;
 800a07a:	bf00      	nop
  }

  return ret;
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b086      	sub	sp, #24
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	60f8      	str	r0, [r7, #12]
 800a08e:	460b      	mov	r3, r1
 800a090:	607a      	str	r2, [r7, #4]
 800a092:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a094:	7afb      	ldrb	r3, [r7, #11]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d138      	bne.n	800a10c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a0a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a0a8:	2b03      	cmp	r3, #3
 800a0aa:	d14a      	bne.n	800a142 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d913      	bls.n	800a0e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	689a      	ldr	r2, [r3, #8]
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	1ad2      	subs	r2, r2, r3
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	bf28      	it	cs
 800a0d2:	4613      	movcs	r3, r2
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 ffc5 	bl	800b068 <USBD_CtlContinueRx>
 800a0de:	e030      	b.n	800a142 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d10b      	bne.n	800a104 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d005      	beq.n	800a104 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 ffc0 	bl	800b08a <USBD_CtlSendStatus>
 800a10a:	e01a      	b.n	800a142 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b03      	cmp	r3, #3
 800a116:	d114      	bne.n	800a142 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00e      	beq.n	800a142 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	7afa      	ldrb	r2, [r7, #11]
 800a12e:	4611      	mov	r1, r2
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	4798      	blx	r3
 800a134:	4603      	mov	r3, r0
 800a136:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a138:	7dfb      	ldrb	r3, [r7, #23]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
 800a140:	e000      	b.n	800a144 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	460b      	mov	r3, r1
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a15a:	7afb      	ldrb	r3, [r7, #11]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d16b      	bne.n	800a238 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	3314      	adds	r3, #20
 800a164:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d156      	bne.n	800a21e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	689a      	ldr	r2, [r3, #8]
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d914      	bls.n	800a1a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	1ad2      	subs	r2, r2, r3
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	461a      	mov	r2, r3
 800a190:	6879      	ldr	r1, [r7, #4]
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 ff3a 	bl	800b00c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a198:	2300      	movs	r3, #0
 800a19a:	2200      	movs	r2, #0
 800a19c:	2100      	movs	r1, #0
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f001 fc08 	bl	800b9b4 <USBD_LL_PrepareReceive>
 800a1a4:	e03b      	b.n	800a21e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	68da      	ldr	r2, [r3, #12]
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d11c      	bne.n	800a1ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d316      	bcc.n	800a1ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d20f      	bcs.n	800a1ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 ff1b 	bl	800b00c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f001 fbe5 	bl	800b9b4 <USBD_LL_PrepareReceive>
 800a1ea:	e018      	b.n	800a21e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	d10b      	bne.n	800a210 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a210:	2180      	movs	r1, #128	@ 0x80
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f001 fb24 	bl	800b860 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 ff49 	bl	800b0b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a224:	2b01      	cmp	r3, #1
 800a226:	d122      	bne.n	800a26e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7ff fe98 	bl	8009f5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a236:	e01a      	b.n	800a26e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b03      	cmp	r3, #3
 800a242:	d114      	bne.n	800a26e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a24a:	695b      	ldr	r3, [r3, #20]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00e      	beq.n	800a26e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	7afa      	ldrb	r2, [r7, #11]
 800a25a:	4611      	mov	r1, r2
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	4798      	blx	r3
 800a260:	4603      	mov	r3, r0
 800a262:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a264:	7dfb      	ldrb	r3, [r7, #23]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
 800a26c:	e000      	b.n	800a270 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e02f      	b.n	800a30c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00f      	beq.n	800a2d6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d009      	beq.n	800a2d6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	6852      	ldr	r2, [r2, #4]
 800a2ce:	b2d2      	uxtb	r2, r2
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2d6:	2340      	movs	r3, #64	@ 0x40
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2100      	movs	r1, #0
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f001 fa7a 	bl	800b7d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2240      	movs	r2, #64	@ 0x40
 800a2ee:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2f2:	2340      	movs	r3, #64	@ 0x40
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2180      	movs	r1, #128	@ 0x80
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f001 fa6c 	bl	800b7d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2240      	movs	r2, #64	@ 0x40
 800a308:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	460b      	mov	r3, r1
 800a31e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	78fa      	ldrb	r2, [r7, #3]
 800a324:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a342:	b2da      	uxtb	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2204      	movs	r2, #4
 800a34e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	2b04      	cmp	r3, #4
 800a372:	d106      	bne.n	800a382 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e012      	b.n	800a3cc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d10b      	bne.n	800a3ca <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3b8:	69db      	ldr	r3, [r3, #28]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d005      	beq.n	800a3ca <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a3f2:	8a3b      	ldrh	r3, [r7, #16]
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	b21a      	sxth	r2, r3
 800a3f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	b21b      	sxth	r3, r3
 800a400:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a402:	89fb      	ldrh	r3, [r7, #14]
}
 800a404:	4618      	mov	r0, r3
 800a406:	371c      	adds	r7, #28
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a426:	2b40      	cmp	r3, #64	@ 0x40
 800a428:	d005      	beq.n	800a436 <USBD_StdDevReq+0x26>
 800a42a:	2b40      	cmp	r3, #64	@ 0x40
 800a42c:	d853      	bhi.n	800a4d6 <USBD_StdDevReq+0xc6>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00b      	beq.n	800a44a <USBD_StdDevReq+0x3a>
 800a432:	2b20      	cmp	r3, #32
 800a434:	d14f      	bne.n	800a4d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	4798      	blx	r3
 800a444:	4603      	mov	r3, r0
 800a446:	73fb      	strb	r3, [r7, #15]
      break;
 800a448:	e04a      	b.n	800a4e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	2b09      	cmp	r3, #9
 800a450:	d83b      	bhi.n	800a4ca <USBD_StdDevReq+0xba>
 800a452:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <USBD_StdDevReq+0x48>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a4ad 	.word	0x0800a4ad
 800a45c:	0800a4c1 	.word	0x0800a4c1
 800a460:	0800a4cb 	.word	0x0800a4cb
 800a464:	0800a4b7 	.word	0x0800a4b7
 800a468:	0800a4cb 	.word	0x0800a4cb
 800a46c:	0800a48b 	.word	0x0800a48b
 800a470:	0800a481 	.word	0x0800a481
 800a474:	0800a4cb 	.word	0x0800a4cb
 800a478:	0800a4a3 	.word	0x0800a4a3
 800a47c:	0800a495 	.word	0x0800a495
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f9de 	bl	800a844 <USBD_GetDescriptor>
          break;
 800a488:	e024      	b.n	800a4d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fb6d 	bl	800ab6c <USBD_SetAddress>
          break;
 800a492:	e01f      	b.n	800a4d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a494:	6839      	ldr	r1, [r7, #0]
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 fbac 	bl	800abf4 <USBD_SetConfig>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]
          break;
 800a4a0:	e018      	b.n	800a4d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fc4b 	bl	800ad40 <USBD_GetConfig>
          break;
 800a4aa:	e013      	b.n	800a4d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fc7c 	bl	800adac <USBD_GetStatus>
          break;
 800a4b4:	e00e      	b.n	800a4d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fcab 	bl	800ae14 <USBD_SetFeature>
          break;
 800a4be:	e009      	b.n	800a4d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fcba 	bl	800ae3c <USBD_ClrFeature>
          break;
 800a4c8:	e004      	b.n	800a4d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fd11 	bl	800aef4 <USBD_CtlError>
          break;
 800a4d2:	bf00      	nop
      }
      break;
 800a4d4:	e004      	b.n	800a4e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fd0b 	bl	800aef4 <USBD_CtlError>
      break;
 800a4de:	bf00      	nop
  }

  return ret;
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop

0800a4ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a502:	2b40      	cmp	r3, #64	@ 0x40
 800a504:	d005      	beq.n	800a512 <USBD_StdItfReq+0x26>
 800a506:	2b40      	cmp	r3, #64	@ 0x40
 800a508:	d82f      	bhi.n	800a56a <USBD_StdItfReq+0x7e>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <USBD_StdItfReq+0x26>
 800a50e:	2b20      	cmp	r3, #32
 800a510:	d12b      	bne.n	800a56a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	3b01      	subs	r3, #1
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d81d      	bhi.n	800a55c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	889b      	ldrh	r3, [r3, #4]
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b01      	cmp	r3, #1
 800a528:	d813      	bhi.n	800a552 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	4798      	blx	r3
 800a538:	4603      	mov	r3, r0
 800a53a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	88db      	ldrh	r3, [r3, #6]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d110      	bne.n	800a566 <USBD_StdItfReq+0x7a>
 800a544:	7bfb      	ldrb	r3, [r7, #15]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10d      	bne.n	800a566 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fd9d 	bl	800b08a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a550:	e009      	b.n	800a566 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fccd 	bl	800aef4 <USBD_CtlError>
          break;
 800a55a:	e004      	b.n	800a566 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fcc8 	bl	800aef4 <USBD_CtlError>
          break;
 800a564:	e000      	b.n	800a568 <USBD_StdItfReq+0x7c>
          break;
 800a566:	bf00      	nop
      }
      break;
 800a568:	e004      	b.n	800a574 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fcc1 	bl	800aef4 <USBD_CtlError>
      break;
 800a572:	bf00      	nop
  }

  return ret;
 800a574:	7bfb      	ldrb	r3, [r7, #15]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	889b      	ldrh	r3, [r3, #4]
 800a590:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a59a:	2b40      	cmp	r3, #64	@ 0x40
 800a59c:	d007      	beq.n	800a5ae <USBD_StdEPReq+0x30>
 800a59e:	2b40      	cmp	r3, #64	@ 0x40
 800a5a0:	f200 8145 	bhi.w	800a82e <USBD_StdEPReq+0x2b0>
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00c      	beq.n	800a5c2 <USBD_StdEPReq+0x44>
 800a5a8:	2b20      	cmp	r3, #32
 800a5aa:	f040 8140 	bne.w	800a82e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	4798      	blx	r3
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c0:	e13a      	b.n	800a838 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	785b      	ldrb	r3, [r3, #1]
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d007      	beq.n	800a5da <USBD_StdEPReq+0x5c>
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	f300 8129 	bgt.w	800a822 <USBD_StdEPReq+0x2a4>
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d07f      	beq.n	800a6d4 <USBD_StdEPReq+0x156>
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d03c      	beq.n	800a652 <USBD_StdEPReq+0xd4>
 800a5d8:	e123      	b.n	800a822 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d002      	beq.n	800a5ec <USBD_StdEPReq+0x6e>
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d016      	beq.n	800a618 <USBD_StdEPReq+0x9a>
 800a5ea:	e02c      	b.n	800a646 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00d      	beq.n	800a60e <USBD_StdEPReq+0x90>
 800a5f2:	7bbb      	ldrb	r3, [r7, #14]
 800a5f4:	2b80      	cmp	r3, #128	@ 0x80
 800a5f6:	d00a      	beq.n	800a60e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 f92f 	bl	800b860 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a602:	2180      	movs	r1, #128	@ 0x80
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 f92b 	bl	800b860 <USBD_LL_StallEP>
 800a60a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a60c:	e020      	b.n	800a650 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fc6f 	bl	800aef4 <USBD_CtlError>
              break;
 800a616:	e01b      	b.n	800a650 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	885b      	ldrh	r3, [r3, #2]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10e      	bne.n	800a63e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a620:	7bbb      	ldrb	r3, [r7, #14]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00b      	beq.n	800a63e <USBD_StdEPReq+0xc0>
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	2b80      	cmp	r3, #128	@ 0x80
 800a62a:	d008      	beq.n	800a63e <USBD_StdEPReq+0xc0>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	88db      	ldrh	r3, [r3, #6]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d104      	bne.n	800a63e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f001 f911 	bl	800b860 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fd23 	bl	800b08a <USBD_CtlSendStatus>

              break;
 800a644:	e004      	b.n	800a650 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fc53 	bl	800aef4 <USBD_CtlError>
              break;
 800a64e:	bf00      	nop
          }
          break;
 800a650:	e0ec      	b.n	800a82c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d002      	beq.n	800a664 <USBD_StdEPReq+0xe6>
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d016      	beq.n	800a690 <USBD_StdEPReq+0x112>
 800a662:	e030      	b.n	800a6c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a664:	7bbb      	ldrb	r3, [r7, #14]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00d      	beq.n	800a686 <USBD_StdEPReq+0x108>
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	2b80      	cmp	r3, #128	@ 0x80
 800a66e:	d00a      	beq.n	800a686 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f001 f8f3 	bl	800b860 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a67a:	2180      	movs	r1, #128	@ 0x80
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f001 f8ef 	bl	800b860 <USBD_LL_StallEP>
 800a682:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a684:	e025      	b.n	800a6d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fc33 	bl	800aef4 <USBD_CtlError>
              break;
 800a68e:	e020      	b.n	800a6d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	885b      	ldrh	r3, [r3, #2]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d11b      	bne.n	800a6d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a698:	7bbb      	ldrb	r3, [r7, #14]
 800a69a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d004      	beq.n	800a6ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 f8f9 	bl	800b89e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fcec 	bl	800b08a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	4798      	blx	r3
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a6c4:	e004      	b.n	800a6d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fc13 	bl	800aef4 <USBD_CtlError>
              break;
 800a6ce:	e000      	b.n	800a6d2 <USBD_StdEPReq+0x154>
              break;
 800a6d0:	bf00      	nop
          }
          break;
 800a6d2:	e0ab      	b.n	800a82c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d002      	beq.n	800a6e6 <USBD_StdEPReq+0x168>
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d032      	beq.n	800a74a <USBD_StdEPReq+0x1cc>
 800a6e4:	e097      	b.n	800a816 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d007      	beq.n	800a6fc <USBD_StdEPReq+0x17e>
 800a6ec:	7bbb      	ldrb	r3, [r7, #14]
 800a6ee:	2b80      	cmp	r3, #128	@ 0x80
 800a6f0:	d004      	beq.n	800a6fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fbfd 	bl	800aef4 <USBD_CtlError>
                break;
 800a6fa:	e091      	b.n	800a820 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a700:	2b00      	cmp	r3, #0
 800a702:	da0b      	bge.n	800a71c <USBD_StdEPReq+0x19e>
 800a704:	7bbb      	ldrb	r3, [r7, #14]
 800a706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a70a:	4613      	mov	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	3310      	adds	r3, #16
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	4413      	add	r3, r2
 800a718:	3304      	adds	r3, #4
 800a71a:	e00b      	b.n	800a734 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
 800a71e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a722:	4613      	mov	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	4413      	add	r3, r2
 800a732:	3304      	adds	r3, #4
 800a734:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2200      	movs	r2, #0
 800a73a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2202      	movs	r2, #2
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fc47 	bl	800afd6 <USBD_CtlSendData>
              break;
 800a748:	e06a      	b.n	800a820 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a74a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	da11      	bge.n	800a776 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	f003 020f 	and.w	r2, r3, #15
 800a758:	6879      	ldr	r1, [r7, #4]
 800a75a:	4613      	mov	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4413      	add	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	440b      	add	r3, r1
 800a764:	3324      	adds	r3, #36	@ 0x24
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d117      	bne.n	800a79c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fbc0 	bl	800aef4 <USBD_CtlError>
                  break;
 800a774:	e054      	b.n	800a820 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	f003 020f 	and.w	r2, r3, #15
 800a77c:	6879      	ldr	r1, [r7, #4]
 800a77e:	4613      	mov	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	440b      	add	r3, r1
 800a788:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d104      	bne.n	800a79c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fbad 	bl	800aef4 <USBD_CtlError>
                  break;
 800a79a:	e041      	b.n	800a820 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a79c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	da0b      	bge.n	800a7bc <USBD_StdEPReq+0x23e>
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	3310      	adds	r3, #16
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	e00b      	b.n	800a7d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <USBD_StdEPReq+0x264>
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	2b80      	cmp	r3, #128	@ 0x80
 800a7e0:	d103      	bne.n	800a7ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	e00e      	b.n	800a808 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a7ea:	7bbb      	ldrb	r3, [r7, #14]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f001 f874 	bl	800b8dc <USBD_LL_IsStallEP>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	e002      	b.n	800a808 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2202      	movs	r2, #2
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fbe1 	bl	800afd6 <USBD_CtlSendData>
              break;
 800a814:	e004      	b.n	800a820 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fb6b 	bl	800aef4 <USBD_CtlError>
              break;
 800a81e:	bf00      	nop
          }
          break;
 800a820:	e004      	b.n	800a82c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fb65 	bl	800aef4 <USBD_CtlError>
          break;
 800a82a:	bf00      	nop
      }
      break;
 800a82c:	e004      	b.n	800a838 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fb5f 	bl	800aef4 <USBD_CtlError>
      break;
 800a836:	bf00      	nop
  }

  return ret;
 800a838:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
	...

0800a844 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a84e:	2300      	movs	r3, #0
 800a850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a852:	2300      	movs	r3, #0
 800a854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a856:	2300      	movs	r3, #0
 800a858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	885b      	ldrh	r3, [r3, #2]
 800a85e:	0a1b      	lsrs	r3, r3, #8
 800a860:	b29b      	uxth	r3, r3
 800a862:	3b01      	subs	r3, #1
 800a864:	2b0e      	cmp	r3, #14
 800a866:	f200 8152 	bhi.w	800ab0e <USBD_GetDescriptor+0x2ca>
 800a86a:	a201      	add	r2, pc, #4	@ (adr r2, 800a870 <USBD_GetDescriptor+0x2c>)
 800a86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a870:	0800a8e1 	.word	0x0800a8e1
 800a874:	0800a8f9 	.word	0x0800a8f9
 800a878:	0800a939 	.word	0x0800a939
 800a87c:	0800ab0f 	.word	0x0800ab0f
 800a880:	0800ab0f 	.word	0x0800ab0f
 800a884:	0800aaaf 	.word	0x0800aaaf
 800a888:	0800aadb 	.word	0x0800aadb
 800a88c:	0800ab0f 	.word	0x0800ab0f
 800a890:	0800ab0f 	.word	0x0800ab0f
 800a894:	0800ab0f 	.word	0x0800ab0f
 800a898:	0800ab0f 	.word	0x0800ab0f
 800a89c:	0800ab0f 	.word	0x0800ab0f
 800a8a0:	0800ab0f 	.word	0x0800ab0f
 800a8a4:	0800ab0f 	.word	0x0800ab0f
 800a8a8:	0800a8ad 	.word	0x0800a8ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00b      	beq.n	800a8d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	7c12      	ldrb	r2, [r2, #16]
 800a8c4:	f107 0108 	add.w	r1, r7, #8
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	4798      	blx	r3
 800a8cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8ce:	e126      	b.n	800ab1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fb0e 	bl	800aef4 <USBD_CtlError>
        err++;
 800a8d8:	7afb      	ldrb	r3, [r7, #11]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	72fb      	strb	r3, [r7, #11]
      break;
 800a8de:	e11e      	b.n	800ab1e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	7c12      	ldrb	r2, [r2, #16]
 800a8ec:	f107 0108 	add.w	r1, r7, #8
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	4798      	blx	r3
 800a8f4:	60f8      	str	r0, [r7, #12]
      break;
 800a8f6:	e112      	b.n	800ab1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	7c1b      	ldrb	r3, [r3, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10d      	bne.n	800a91c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a908:	f107 0208 	add.w	r2, r7, #8
 800a90c:	4610      	mov	r0, r2
 800a90e:	4798      	blx	r3
 800a910:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3301      	adds	r3, #1
 800a916:	2202      	movs	r2, #2
 800a918:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a91a:	e100      	b.n	800ab1e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a924:	f107 0208 	add.w	r2, r7, #8
 800a928:	4610      	mov	r0, r2
 800a92a:	4798      	blx	r3
 800a92c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3301      	adds	r3, #1
 800a932:	2202      	movs	r2, #2
 800a934:	701a      	strb	r2, [r3, #0]
      break;
 800a936:	e0f2      	b.n	800ab1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	885b      	ldrh	r3, [r3, #2]
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b05      	cmp	r3, #5
 800a940:	f200 80ac 	bhi.w	800aa9c <USBD_GetDescriptor+0x258>
 800a944:	a201      	add	r2, pc, #4	@ (adr r2, 800a94c <USBD_GetDescriptor+0x108>)
 800a946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94a:	bf00      	nop
 800a94c:	0800a965 	.word	0x0800a965
 800a950:	0800a999 	.word	0x0800a999
 800a954:	0800a9cd 	.word	0x0800a9cd
 800a958:	0800aa01 	.word	0x0800aa01
 800a95c:	0800aa35 	.word	0x0800aa35
 800a960:	0800aa69 	.word	0x0800aa69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00b      	beq.n	800a988 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	7c12      	ldrb	r2, [r2, #16]
 800a97c:	f107 0108 	add.w	r1, r7, #8
 800a980:	4610      	mov	r0, r2
 800a982:	4798      	blx	r3
 800a984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a986:	e091      	b.n	800aaac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fab2 	bl	800aef4 <USBD_CtlError>
            err++;
 800a990:	7afb      	ldrb	r3, [r7, #11]
 800a992:	3301      	adds	r3, #1
 800a994:	72fb      	strb	r3, [r7, #11]
          break;
 800a996:	e089      	b.n	800aaac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00b      	beq.n	800a9bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	7c12      	ldrb	r2, [r2, #16]
 800a9b0:	f107 0108 	add.w	r1, r7, #8
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	4798      	blx	r3
 800a9b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ba:	e077      	b.n	800aaac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fa98 	bl	800aef4 <USBD_CtlError>
            err++;
 800a9c4:	7afb      	ldrb	r3, [r7, #11]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ca:	e06f      	b.n	800aaac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00b      	beq.n	800a9f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	7c12      	ldrb	r2, [r2, #16]
 800a9e4:	f107 0108 	add.w	r1, r7, #8
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	4798      	blx	r3
 800a9ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ee:	e05d      	b.n	800aaac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fa7e 	bl	800aef4 <USBD_CtlError>
            err++;
 800a9f8:	7afb      	ldrb	r3, [r7, #11]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a9fe:	e055      	b.n	800aaac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00b      	beq.n	800aa24 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	7c12      	ldrb	r2, [r2, #16]
 800aa18:	f107 0108 	add.w	r1, r7, #8
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	4798      	blx	r3
 800aa20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa22:	e043      	b.n	800aaac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fa64 	bl	800aef4 <USBD_CtlError>
            err++;
 800aa2c:	7afb      	ldrb	r3, [r7, #11]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	72fb      	strb	r3, [r7, #11]
          break;
 800aa32:	e03b      	b.n	800aaac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa46:	695b      	ldr	r3, [r3, #20]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	7c12      	ldrb	r2, [r2, #16]
 800aa4c:	f107 0108 	add.w	r1, r7, #8
 800aa50:	4610      	mov	r0, r2
 800aa52:	4798      	blx	r3
 800aa54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa56:	e029      	b.n	800aaac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa58:	6839      	ldr	r1, [r7, #0]
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fa4a 	bl	800aef4 <USBD_CtlError>
            err++;
 800aa60:	7afb      	ldrb	r3, [r7, #11]
 800aa62:	3301      	adds	r3, #1
 800aa64:	72fb      	strb	r3, [r7, #11]
          break;
 800aa66:	e021      	b.n	800aaac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	7c12      	ldrb	r2, [r2, #16]
 800aa80:	f107 0108 	add.w	r1, r7, #8
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
 800aa88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa8a:	e00f      	b.n	800aaac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fa30 	bl	800aef4 <USBD_CtlError>
            err++;
 800aa94:	7afb      	ldrb	r3, [r7, #11]
 800aa96:	3301      	adds	r3, #1
 800aa98:	72fb      	strb	r3, [r7, #11]
          break;
 800aa9a:	e007      	b.n	800aaac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fa28 	bl	800aef4 <USBD_CtlError>
          err++;
 800aaa4:	7afb      	ldrb	r3, [r7, #11]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800aaaa:	bf00      	nop
      }
      break;
 800aaac:	e037      	b.n	800ab1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	7c1b      	ldrb	r3, [r3, #16]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d109      	bne.n	800aaca <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aabc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aabe:	f107 0208 	add.w	r2, r7, #8
 800aac2:	4610      	mov	r0, r2
 800aac4:	4798      	blx	r3
 800aac6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aac8:	e029      	b.n	800ab1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fa11 	bl	800aef4 <USBD_CtlError>
        err++;
 800aad2:	7afb      	ldrb	r3, [r7, #11]
 800aad4:	3301      	adds	r3, #1
 800aad6:	72fb      	strb	r3, [r7, #11]
      break;
 800aad8:	e021      	b.n	800ab1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	7c1b      	ldrb	r3, [r3, #16]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10d      	bne.n	800aafe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaea:	f107 0208 	add.w	r2, r7, #8
 800aaee:	4610      	mov	r0, r2
 800aaf0:	4798      	blx	r3
 800aaf2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	2207      	movs	r2, #7
 800aafa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aafc:	e00f      	b.n	800ab1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f9f7 	bl	800aef4 <USBD_CtlError>
        err++;
 800ab06:	7afb      	ldrb	r3, [r7, #11]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab0c:	e007      	b.n	800ab1e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f9ef 	bl	800aef4 <USBD_CtlError>
      err++;
 800ab16:	7afb      	ldrb	r3, [r7, #11]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab1c:	bf00      	nop
  }

  if (err != 0U)
 800ab1e:	7afb      	ldrb	r3, [r7, #11]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d11e      	bne.n	800ab62 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	88db      	ldrh	r3, [r3, #6]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d016      	beq.n	800ab5a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ab2c:	893b      	ldrh	r3, [r7, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00e      	beq.n	800ab50 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	88da      	ldrh	r2, [r3, #6]
 800ab36:	893b      	ldrh	r3, [r7, #8]
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	bf28      	it	cs
 800ab3c:	4613      	movcs	r3, r2
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab42:	893b      	ldrh	r3, [r7, #8]
 800ab44:	461a      	mov	r2, r3
 800ab46:	68f9      	ldr	r1, [r7, #12]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 fa44 	bl	800afd6 <USBD_CtlSendData>
 800ab4e:	e009      	b.n	800ab64 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f9ce 	bl	800aef4 <USBD_CtlError>
 800ab58:	e004      	b.n	800ab64 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fa95 	bl	800b08a <USBD_CtlSendStatus>
 800ab60:	e000      	b.n	800ab64 <USBD_GetDescriptor+0x320>
    return;
 800ab62:	bf00      	nop
  }
}
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop

0800ab6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	889b      	ldrh	r3, [r3, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d131      	bne.n	800abe2 <USBD_SetAddress+0x76>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	88db      	ldrh	r3, [r3, #6]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d12d      	bne.n	800abe2 <USBD_SetAddress+0x76>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	885b      	ldrh	r3, [r3, #2]
 800ab8a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab8c:	d829      	bhi.n	800abe2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	885b      	ldrh	r3, [r3, #2]
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b03      	cmp	r3, #3
 800aba4:	d104      	bne.n	800abb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f9a3 	bl	800aef4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abae:	e01d      	b.n	800abec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	7bfa      	ldrb	r2, [r7, #15]
 800abb4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	4619      	mov	r1, r3
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 feb9 	bl	800b934 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa61 	bl	800b08a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d004      	beq.n	800abd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2202      	movs	r2, #2
 800abd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd6:	e009      	b.n	800abec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe0:	e004      	b.n	800abec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f985 	bl	800aef4 <USBD_CtlError>
  }
}
 800abea:	bf00      	nop
 800abec:	bf00      	nop
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	885b      	ldrh	r3, [r3, #2]
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	4b4c      	ldr	r3, [pc, #304]	@ (800ad3c <USBD_SetConfig+0x148>)
 800ac0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac0c:	4b4b      	ldr	r3, [pc, #300]	@ (800ad3c <USBD_SetConfig+0x148>)
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d905      	bls.n	800ac20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f96c 	bl	800aef4 <USBD_CtlError>
    return USBD_FAIL;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e088      	b.n	800ad32 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d002      	beq.n	800ac32 <USBD_SetConfig+0x3e>
 800ac2c:	2b03      	cmp	r3, #3
 800ac2e:	d025      	beq.n	800ac7c <USBD_SetConfig+0x88>
 800ac30:	e071      	b.n	800ad16 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac32:	4b42      	ldr	r3, [pc, #264]	@ (800ad3c <USBD_SetConfig+0x148>)
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d01c      	beq.n	800ac74 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ac3a:	4b40      	ldr	r3, [pc, #256]	@ (800ad3c <USBD_SetConfig+0x148>)
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac44:	4b3d      	ldr	r3, [pc, #244]	@ (800ad3c <USBD_SetConfig+0x148>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff f992 	bl	8009f74 <USBD_SetClassConfig>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d004      	beq.n	800ac64 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f949 	bl	800aef4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac62:	e065      	b.n	800ad30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fa10 	bl	800b08a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2203      	movs	r2, #3
 800ac6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ac72:	e05d      	b.n	800ad30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fa08 	bl	800b08a <USBD_CtlSendStatus>
      break;
 800ac7a:	e059      	b.n	800ad30 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac7c:	4b2f      	ldr	r3, [pc, #188]	@ (800ad3c <USBD_SetConfig+0x148>)
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d112      	bne.n	800acaa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2202      	movs	r2, #2
 800ac88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ac8c:	4b2b      	ldr	r3, [pc, #172]	@ (800ad3c <USBD_SetConfig+0x148>)
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	461a      	mov	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac96:	4b29      	ldr	r3, [pc, #164]	@ (800ad3c <USBD_SetConfig+0x148>)
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff f985 	bl	8009fac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f9f1 	bl	800b08a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aca8:	e042      	b.n	800ad30 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800acaa:	4b24      	ldr	r3, [pc, #144]	@ (800ad3c <USBD_SetConfig+0x148>)
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d02a      	beq.n	800ad0e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff f973 	bl	8009fac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800acc6:	4b1d      	ldr	r3, [pc, #116]	@ (800ad3c <USBD_SetConfig+0x148>)
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	461a      	mov	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acd0:	4b1a      	ldr	r3, [pc, #104]	@ (800ad3c <USBD_SetConfig+0x148>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff f94c 	bl	8009f74 <USBD_SetClassConfig>
 800acdc:	4603      	mov	r3, r0
 800acde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00f      	beq.n	800ad06 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f903 	bl	800aef4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	4619      	mov	r1, r3
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7ff f958 	bl	8009fac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ad04:	e014      	b.n	800ad30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f9bf 	bl	800b08a <USBD_CtlSendStatus>
      break;
 800ad0c:	e010      	b.n	800ad30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f9bb 	bl	800b08a <USBD_CtlSendStatus>
      break;
 800ad14:	e00c      	b.n	800ad30 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f8eb 	bl	800aef4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad1e:	4b07      	ldr	r3, [pc, #28]	@ (800ad3c <USBD_SetConfig+0x148>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff f941 	bl	8009fac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad2e:	bf00      	nop
  }

  return ret;
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20000b11 	.word	0x20000b11

0800ad40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	88db      	ldrh	r3, [r3, #6]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d004      	beq.n	800ad5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f8cd 	bl	800aef4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad5a:	e023      	b.n	800ada4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	dc02      	bgt.n	800ad6e <USBD_GetConfig+0x2e>
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dc03      	bgt.n	800ad74 <USBD_GetConfig+0x34>
 800ad6c:	e015      	b.n	800ad9a <USBD_GetConfig+0x5a>
 800ad6e:	2b03      	cmp	r3, #3
 800ad70:	d00b      	beq.n	800ad8a <USBD_GetConfig+0x4a>
 800ad72:	e012      	b.n	800ad9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3308      	adds	r3, #8
 800ad7e:	2201      	movs	r2, #1
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f927 	bl	800afd6 <USBD_CtlSendData>
        break;
 800ad88:	e00c      	b.n	800ada4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	2201      	movs	r2, #1
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f91f 	bl	800afd6 <USBD_CtlSendData>
        break;
 800ad98:	e004      	b.n	800ada4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f8a9 	bl	800aef4 <USBD_CtlError>
        break;
 800ada2:	bf00      	nop
}
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	3b01      	subs	r3, #1
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d81e      	bhi.n	800ae02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	88db      	ldrh	r3, [r3, #6]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d004      	beq.n	800add6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f890 	bl	800aef4 <USBD_CtlError>
        break;
 800add4:	e01a      	b.n	800ae0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d005      	beq.n	800adf2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	f043 0202 	orr.w	r2, r3, #2
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	330c      	adds	r3, #12
 800adf6:	2202      	movs	r2, #2
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f8eb 	bl	800afd6 <USBD_CtlSendData>
      break;
 800ae00:	e004      	b.n	800ae0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 f875 	bl	800aef4 <USBD_CtlError>
      break;
 800ae0a:	bf00      	nop
  }
}
 800ae0c:	bf00      	nop
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	885b      	ldrh	r3, [r3, #2]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d106      	bne.n	800ae34 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f92b 	bl	800b08a <USBD_CtlSendStatus>
  }
}
 800ae34:	bf00      	nop
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d80b      	bhi.n	800ae6c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	885b      	ldrh	r3, [r3, #2]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d10c      	bne.n	800ae76 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f910 	bl	800b08a <USBD_CtlSendStatus>
      }
      break;
 800ae6a:	e004      	b.n	800ae76 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f840 	bl	800aef4 <USBD_CtlError>
      break;
 800ae74:	e000      	b.n	800ae78 <USBD_ClrFeature+0x3c>
      break;
 800ae76:	bf00      	nop
  }
}
 800ae78:	bf00      	nop
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	781a      	ldrb	r2, [r3, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	781a      	ldrb	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	3301      	adds	r3, #1
 800aea8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7ff fa92 	bl	800a3d4 <SWAPBYTE>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	3301      	adds	r3, #1
 800aebc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3301      	adds	r3, #1
 800aec2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f7ff fa85 	bl	800a3d4 <SWAPBYTE>
 800aeca:	4603      	mov	r3, r0
 800aecc:	461a      	mov	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3301      	adds	r3, #1
 800aed6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	3301      	adds	r3, #1
 800aedc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f7ff fa78 	bl	800a3d4 <SWAPBYTE>
 800aee4:	4603      	mov	r3, r0
 800aee6:	461a      	mov	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	80da      	strh	r2, [r3, #6]
}
 800aeec:	bf00      	nop
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aefe:	2180      	movs	r1, #128	@ 0x80
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fcad 	bl	800b860 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af06:	2100      	movs	r1, #0
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fca9 	bl	800b860 <USBD_LL_StallEP>
}
 800af0e:	bf00      	nop
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b086      	sub	sp, #24
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d036      	beq.n	800af9a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af30:	6938      	ldr	r0, [r7, #16]
 800af32:	f000 f836 	bl	800afa2 <USBD_GetLen>
 800af36:	4603      	mov	r3, r0
 800af38:	3301      	adds	r3, #1
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	b29a      	uxth	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af44:	7dfb      	ldrb	r3, [r7, #23]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	4413      	add	r3, r2
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	7812      	ldrb	r2, [r2, #0]
 800af4e:	701a      	strb	r2, [r3, #0]
  idx++;
 800af50:	7dfb      	ldrb	r3, [r7, #23]
 800af52:	3301      	adds	r3, #1
 800af54:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800af56:	7dfb      	ldrb	r3, [r7, #23]
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	4413      	add	r3, r2
 800af5c:	2203      	movs	r2, #3
 800af5e:	701a      	strb	r2, [r3, #0]
  idx++;
 800af60:	7dfb      	ldrb	r3, [r7, #23]
 800af62:	3301      	adds	r3, #1
 800af64:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800af66:	e013      	b.n	800af90 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	4413      	add	r3, r2
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	7812      	ldrb	r2, [r2, #0]
 800af72:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	3301      	adds	r3, #1
 800af78:	613b      	str	r3, [r7, #16]
    idx++;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	3301      	adds	r3, #1
 800af7e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	4413      	add	r3, r2
 800af86:	2200      	movs	r2, #0
 800af88:	701a      	strb	r2, [r3, #0]
    idx++;
 800af8a:	7dfb      	ldrb	r3, [r7, #23]
 800af8c:	3301      	adds	r3, #1
 800af8e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e7      	bne.n	800af68 <USBD_GetString+0x52>
 800af98:	e000      	b.n	800af9c <USBD_GetString+0x86>
    return;
 800af9a:	bf00      	nop
  }
}
 800af9c:	3718      	adds	r7, #24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b085      	sub	sp, #20
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800afb2:	e005      	b.n	800afc0 <USBD_GetLen+0x1e>
  {
    len++;
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
 800afb6:	3301      	adds	r3, #1
 800afb8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1f5      	bne.n	800afb4 <USBD_GetLen+0x12>
  }

  return len;
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b084      	sub	sp, #16
 800afda:	af00      	add	r7, sp, #0
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2202      	movs	r2, #2
 800afe6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	2100      	movs	r1, #0
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 fcb8 	bl	800b972 <USBD_LL_Transmit>

  return USBD_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	2100      	movs	r1, #0
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f000 fca7 	bl	800b972 <USBD_LL_Transmit>

  return USBD_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	60f8      	str	r0, [r7, #12]
 800b036:	60b9      	str	r1, [r7, #8]
 800b038:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2203      	movs	r2, #3
 800b03e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	2100      	movs	r1, #0
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f000 fcab 	bl	800b9b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	2100      	movs	r1, #0
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 fc9a 	bl	800b9b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b082      	sub	sp, #8
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2204      	movs	r2, #4
 800b096:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b09a:	2300      	movs	r3, #0
 800b09c:	2200      	movs	r2, #0
 800b09e:	2100      	movs	r1, #0
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fc66 	bl	800b972 <USBD_LL_Transmit>

  return USBD_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2205      	movs	r2, #5
 800b0bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fc74 	bl	800b9b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
	...

0800b0d8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b0dc:	2200      	movs	r2, #0
 800b0de:	4912      	ldr	r1, [pc, #72]	@ (800b128 <MX_USB_Device_Init+0x50>)
 800b0e0:	4812      	ldr	r0, [pc, #72]	@ (800b12c <MX_USB_Device_Init+0x54>)
 800b0e2:	f7fe fed9 	bl	8009e98 <USBD_Init>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b0ec:	f7f5 fbad 	bl	800084a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b0f0:	490f      	ldr	r1, [pc, #60]	@ (800b130 <MX_USB_Device_Init+0x58>)
 800b0f2:	480e      	ldr	r0, [pc, #56]	@ (800b12c <MX_USB_Device_Init+0x54>)
 800b0f4:	f7fe ff00 	bl	8009ef8 <USBD_RegisterClass>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b0fe:	f7f5 fba4 	bl	800084a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b102:	490c      	ldr	r1, [pc, #48]	@ (800b134 <MX_USB_Device_Init+0x5c>)
 800b104:	4809      	ldr	r0, [pc, #36]	@ (800b12c <MX_USB_Device_Init+0x54>)
 800b106:	f7fe fe21 	bl	8009d4c <USBD_CDC_RegisterInterface>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b110:	f7f5 fb9b 	bl	800084a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b114:	4805      	ldr	r0, [pc, #20]	@ (800b12c <MX_USB_Device_Init+0x54>)
 800b116:	f7fe ff16 	bl	8009f46 <USBD_Start>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b120:	f7f5 fb93 	bl	800084a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b124:	bf00      	nop
 800b126:	bd80      	pop	{r7, pc}
 800b128:	200001c8 	.word	0x200001c8
 800b12c:	20001950 	.word	0x20001950
 800b130:	200000b0 	.word	0x200000b0
 800b134:	200001b4 	.word	0x200001b4

0800b138 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b13c:	2200      	movs	r2, #0
 800b13e:	4905      	ldr	r1, [pc, #20]	@ (800b154 <CDC_Init_FS+0x1c>)
 800b140:	4805      	ldr	r0, [pc, #20]	@ (800b158 <CDC_Init_FS+0x20>)
 800b142:	f7fe fe18 	bl	8009d76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b146:	4905      	ldr	r1, [pc, #20]	@ (800b15c <CDC_Init_FS+0x24>)
 800b148:	4803      	ldr	r0, [pc, #12]	@ (800b158 <CDC_Init_FS+0x20>)
 800b14a:	f7fe fe32 	bl	8009db2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b14e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b150:	4618      	mov	r0, r3
 800b152:	bd80      	pop	{r7, pc}
 800b154:	20002020 	.word	0x20002020
 800b158:	20001950 	.word	0x20001950
 800b15c:	20001c20 	.word	0x20001c20

0800b160 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b160:	b480      	push	{r7}
 800b162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b164:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b166:	4618      	mov	r0, r3
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	4603      	mov	r3, r0
 800b178:	6039      	str	r1, [r7, #0]
 800b17a:	71fb      	strb	r3, [r7, #7]
 800b17c:	4613      	mov	r3, r2
 800b17e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	2b23      	cmp	r3, #35	@ 0x23
 800b184:	d84a      	bhi.n	800b21c <CDC_Control_FS+0xac>
 800b186:	a201      	add	r2, pc, #4	@ (adr r2, 800b18c <CDC_Control_FS+0x1c>)
 800b188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18c:	0800b21d 	.word	0x0800b21d
 800b190:	0800b21d 	.word	0x0800b21d
 800b194:	0800b21d 	.word	0x0800b21d
 800b198:	0800b21d 	.word	0x0800b21d
 800b19c:	0800b21d 	.word	0x0800b21d
 800b1a0:	0800b21d 	.word	0x0800b21d
 800b1a4:	0800b21d 	.word	0x0800b21d
 800b1a8:	0800b21d 	.word	0x0800b21d
 800b1ac:	0800b21d 	.word	0x0800b21d
 800b1b0:	0800b21d 	.word	0x0800b21d
 800b1b4:	0800b21d 	.word	0x0800b21d
 800b1b8:	0800b21d 	.word	0x0800b21d
 800b1bc:	0800b21d 	.word	0x0800b21d
 800b1c0:	0800b21d 	.word	0x0800b21d
 800b1c4:	0800b21d 	.word	0x0800b21d
 800b1c8:	0800b21d 	.word	0x0800b21d
 800b1cc:	0800b21d 	.word	0x0800b21d
 800b1d0:	0800b21d 	.word	0x0800b21d
 800b1d4:	0800b21d 	.word	0x0800b21d
 800b1d8:	0800b21d 	.word	0x0800b21d
 800b1dc:	0800b21d 	.word	0x0800b21d
 800b1e0:	0800b21d 	.word	0x0800b21d
 800b1e4:	0800b21d 	.word	0x0800b21d
 800b1e8:	0800b21d 	.word	0x0800b21d
 800b1ec:	0800b21d 	.word	0x0800b21d
 800b1f0:	0800b21d 	.word	0x0800b21d
 800b1f4:	0800b21d 	.word	0x0800b21d
 800b1f8:	0800b21d 	.word	0x0800b21d
 800b1fc:	0800b21d 	.word	0x0800b21d
 800b200:	0800b21d 	.word	0x0800b21d
 800b204:	0800b21d 	.word	0x0800b21d
 800b208:	0800b21d 	.word	0x0800b21d
 800b20c:	0800b21d 	.word	0x0800b21d
 800b210:	0800b21d 	.word	0x0800b21d
 800b214:	0800b21d 	.word	0x0800b21d
 800b218:	0800b21d 	.word	0x0800b21d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b21c:	bf00      	nop
  }

  return (USBD_OK);
 800b21e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b220:	4618      	mov	r0, r3
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b236:	6879      	ldr	r1, [r7, #4]
 800b238:	4805      	ldr	r0, [pc, #20]	@ (800b250 <CDC_Receive_FS+0x24>)
 800b23a:	f7fe fdba 	bl	8009db2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b23e:	4804      	ldr	r0, [pc, #16]	@ (800b250 <CDC_Receive_FS+0x24>)
 800b240:	f7fe fe00 	bl	8009e44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b244:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b246:	4618      	mov	r0, r3
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	20001950 	.word	0x20001950

0800b254 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	460b      	mov	r3, r1
 800b25e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b264:	4b0d      	ldr	r3, [pc, #52]	@ (800b29c <CDC_Transmit_FS+0x48>)
 800b266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b26a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b276:	2301      	movs	r3, #1
 800b278:	e00b      	b.n	800b292 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b27a:	887b      	ldrh	r3, [r7, #2]
 800b27c:	461a      	mov	r2, r3
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	4806      	ldr	r0, [pc, #24]	@ (800b29c <CDC_Transmit_FS+0x48>)
 800b282:	f7fe fd78 	bl	8009d76 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b286:	4805      	ldr	r0, [pc, #20]	@ (800b29c <CDC_Transmit_FS+0x48>)
 800b288:	f7fe fdac 	bl	8009de4 <USBD_CDC_TransmitPacket>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b290:	7bfb      	ldrb	r3, [r7, #15]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	20001950 	.word	0x20001950

0800b2a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b2b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
	...

0800b2c4 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b2ca:	4b09      	ldr	r3, [pc, #36]	@ (800b2f0 <CDC_Transmit_Is_Busy+0x2c>)
 800b2cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2d0:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e000      	b.n	800b2e2 <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800b2e0:	2300      	movs	r3, #0
  }
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	370c      	adds	r7, #12
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	20001950 	.word	0x20001950

0800b2f4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	6039      	str	r1, [r7, #0]
 800b2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	2212      	movs	r2, #18
 800b304:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b306:	4b03      	ldr	r3, [pc, #12]	@ (800b314 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b308:	4618      	mov	r0, r3
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr
 800b314:	200001e8 	.word	0x200001e8

0800b318 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	4603      	mov	r3, r0
 800b320:	6039      	str	r1, [r7, #0]
 800b322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2204      	movs	r2, #4
 800b328:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b32a:	4b03      	ldr	r3, [pc, #12]	@ (800b338 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr
 800b338:	200001fc 	.word	0x200001fc

0800b33c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	6039      	str	r1, [r7, #0]
 800b346:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b348:	79fb      	ldrb	r3, [r7, #7]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d105      	bne.n	800b35a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	4907      	ldr	r1, [pc, #28]	@ (800b370 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b352:	4808      	ldr	r0, [pc, #32]	@ (800b374 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b354:	f7ff fddf 	bl	800af16 <USBD_GetString>
 800b358:	e004      	b.n	800b364 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	4904      	ldr	r1, [pc, #16]	@ (800b370 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b35e:	4805      	ldr	r0, [pc, #20]	@ (800b374 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b360:	f7ff fdd9 	bl	800af16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b364:	4b02      	ldr	r3, [pc, #8]	@ (800b370 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b366:	4618      	mov	r0, r3
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	20002420 	.word	0x20002420
 800b374:	0800cc54 	.word	0x0800cc54

0800b378 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	4603      	mov	r3, r0
 800b380:	6039      	str	r1, [r7, #0]
 800b382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b384:	683a      	ldr	r2, [r7, #0]
 800b386:	4904      	ldr	r1, [pc, #16]	@ (800b398 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b388:	4804      	ldr	r0, [pc, #16]	@ (800b39c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b38a:	f7ff fdc4 	bl	800af16 <USBD_GetString>
  return USBD_StrDesc;
 800b38e:	4b02      	ldr	r3, [pc, #8]	@ (800b398 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b390:	4618      	mov	r0, r3
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	20002420 	.word	0x20002420
 800b39c:	0800cc6c 	.word	0x0800cc6c

0800b3a0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	6039      	str	r1, [r7, #0]
 800b3aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	221a      	movs	r2, #26
 800b3b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b3b2:	f000 f843 	bl	800b43c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b3b6:	4b02      	ldr	r3, [pc, #8]	@ (800b3c0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20000200 	.word	0x20000200

0800b3c4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	6039      	str	r1, [r7, #0]
 800b3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d105      	bne.n	800b3e2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	4907      	ldr	r1, [pc, #28]	@ (800b3f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b3da:	4808      	ldr	r0, [pc, #32]	@ (800b3fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b3dc:	f7ff fd9b 	bl	800af16 <USBD_GetString>
 800b3e0:	e004      	b.n	800b3ec <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4904      	ldr	r1, [pc, #16]	@ (800b3f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b3e6:	4805      	ldr	r0, [pc, #20]	@ (800b3fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b3e8:	f7ff fd95 	bl	800af16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3ec:	4b02      	ldr	r3, [pc, #8]	@ (800b3f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20002420 	.word	0x20002420
 800b3fc:	0800cc80 	.word	0x0800cc80

0800b400 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	6039      	str	r1, [r7, #0]
 800b40a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b40c:	79fb      	ldrb	r3, [r7, #7]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d105      	bne.n	800b41e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	4907      	ldr	r1, [pc, #28]	@ (800b434 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b416:	4808      	ldr	r0, [pc, #32]	@ (800b438 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b418:	f7ff fd7d 	bl	800af16 <USBD_GetString>
 800b41c:	e004      	b.n	800b428 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b41e:	683a      	ldr	r2, [r7, #0]
 800b420:	4904      	ldr	r1, [pc, #16]	@ (800b434 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b422:	4805      	ldr	r0, [pc, #20]	@ (800b438 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b424:	f7ff fd77 	bl	800af16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b428:	4b02      	ldr	r3, [pc, #8]	@ (800b434 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	20002420 	.word	0x20002420
 800b438:	0800cc8c 	.word	0x0800cc8c

0800b43c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b442:	4b0f      	ldr	r3, [pc, #60]	@ (800b480 <Get_SerialNum+0x44>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b448:	4b0e      	ldr	r3, [pc, #56]	@ (800b484 <Get_SerialNum+0x48>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b44e:	4b0e      	ldr	r3, [pc, #56]	@ (800b488 <Get_SerialNum+0x4c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4413      	add	r3, r2
 800b45a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b462:	2208      	movs	r2, #8
 800b464:	4909      	ldr	r1, [pc, #36]	@ (800b48c <Get_SerialNum+0x50>)
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 f814 	bl	800b494 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b46c:	2204      	movs	r2, #4
 800b46e:	4908      	ldr	r1, [pc, #32]	@ (800b490 <Get_SerialNum+0x54>)
 800b470:	68b8      	ldr	r0, [r7, #8]
 800b472:	f000 f80f 	bl	800b494 <IntToUnicode>
  }
}
 800b476:	bf00      	nop
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	1fff7590 	.word	0x1fff7590
 800b484:	1fff7594 	.word	0x1fff7594
 800b488:	1fff7598 	.word	0x1fff7598
 800b48c:	20000202 	.word	0x20000202
 800b490:	20000212 	.word	0x20000212

0800b494 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b494:	b480      	push	{r7}
 800b496:	b087      	sub	sp, #28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	75fb      	strb	r3, [r7, #23]
 800b4aa:	e027      	b.n	800b4fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	0f1b      	lsrs	r3, r3, #28
 800b4b0:	2b09      	cmp	r3, #9
 800b4b2:	d80b      	bhi.n	800b4cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	0f1b      	lsrs	r3, r3, #28
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	4619      	mov	r1, r3
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	440b      	add	r3, r1
 800b4c4:	3230      	adds	r2, #48	@ 0x30
 800b4c6:	b2d2      	uxtb	r2, r2
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	e00a      	b.n	800b4e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	0f1b      	lsrs	r3, r3, #28
 800b4d0:	b2da      	uxtb	r2, r3
 800b4d2:	7dfb      	ldrb	r3, [r7, #23]
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	440b      	add	r3, r1
 800b4dc:	3237      	adds	r2, #55	@ 0x37
 800b4de:	b2d2      	uxtb	r2, r2
 800b4e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	011b      	lsls	r3, r3, #4
 800b4e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b4f6:	7dfb      	ldrb	r3, [r7, #23]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	75fb      	strb	r3, [r7, #23]
 800b4fc:	7dfa      	ldrb	r2, [r7, #23]
 800b4fe:	79fb      	ldrb	r3, [r7, #7]
 800b500:	429a      	cmp	r2, r3
 800b502:	d3d3      	bcc.n	800b4ac <IntToUnicode+0x18>
  }
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop
 800b508:	371c      	adds	r7, #28
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
	...

0800b514 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b094      	sub	sp, #80	@ 0x50
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b51c:	f107 030c 	add.w	r3, r7, #12
 800b520:	2244      	movs	r2, #68	@ 0x44
 800b522:	2100      	movs	r1, #0
 800b524:	4618      	mov	r0, r3
 800b526:	f000 fd03 	bl	800bf30 <memset>
  if(pcdHandle->Instance==USB)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a15      	ldr	r2, [pc, #84]	@ (800b584 <HAL_PCD_MspInit+0x70>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d122      	bne.n	800b57a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b534:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b538:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b53a:	2300      	movs	r3, #0
 800b53c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b53e:	f107 030c 	add.w	r3, r7, #12
 800b542:	4618      	mov	r0, r3
 800b544:	f7f9 fd6a 	bl	800501c <HAL_RCCEx_PeriphCLKConfig>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b54e:	f7f5 f97c 	bl	800084a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b552:	4b0d      	ldr	r3, [pc, #52]	@ (800b588 <HAL_PCD_MspInit+0x74>)
 800b554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b556:	4a0c      	ldr	r2, [pc, #48]	@ (800b588 <HAL_PCD_MspInit+0x74>)
 800b558:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b55c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b55e:	4b0a      	ldr	r3, [pc, #40]	@ (800b588 <HAL_PCD_MspInit+0x74>)
 800b560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b566:	60bb      	str	r3, [r7, #8]
 800b568:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b56a:	2200      	movs	r2, #0
 800b56c:	2100      	movs	r1, #0
 800b56e:	2014      	movs	r0, #20
 800b570:	f7f6 fd33 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b574:	2014      	movs	r0, #20
 800b576:	f7f6 fd4a 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b57a:	bf00      	nop
 800b57c:	3750      	adds	r7, #80	@ 0x50
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	40005c00 	.word	0x40005c00
 800b588:	40021000 	.word	0x40021000

0800b58c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	f7fe fd1a 	bl	8009fdc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b5a8:	bf00      	nop
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b5c2:	78fa      	ldrb	r2, [r7, #3]
 800b5c4:	6879      	ldr	r1, [r7, #4]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	00db      	lsls	r3, r3, #3
 800b5ce:	440b      	add	r3, r1
 800b5d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	78fb      	ldrb	r3, [r7, #3]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	f7fe fd54 	bl	800a086 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b5de:	bf00      	nop
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b082      	sub	sp, #8
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b5f8:	78fa      	ldrb	r2, [r7, #3]
 800b5fa:	6879      	ldr	r1, [r7, #4]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4413      	add	r3, r2
 800b602:	00db      	lsls	r3, r3, #3
 800b604:	440b      	add	r3, r1
 800b606:	3324      	adds	r3, #36	@ 0x24
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	78fb      	ldrb	r3, [r7, #3]
 800b60c:	4619      	mov	r1, r3
 800b60e:	f7fe fd9d 	bl	800a14c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b612:	bf00      	nop
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b082      	sub	sp, #8
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fe feb1 	bl	800a390 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b084      	sub	sp, #16
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b63e:	2301      	movs	r3, #1
 800b640:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	795b      	ldrb	r3, [r3, #5]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d001      	beq.n	800b64e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b64a:	f7f5 f8fe 	bl	800084a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b654:	7bfa      	ldrb	r2, [r7, #15]
 800b656:	4611      	mov	r1, r2
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fe fe5b 	bl	800a314 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b664:	4618      	mov	r0, r3
 800b666:	f7fe fe07 	bl	800a278 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b66a:	bf00      	nop
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fe56 	bl	800a334 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	7a5b      	ldrb	r3, [r3, #9]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d005      	beq.n	800b69c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b690:	4b04      	ldr	r3, [pc, #16]	@ (800b6a4 <HAL_PCD_SuspendCallback+0x30>)
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	4a03      	ldr	r2, [pc, #12]	@ (800b6a4 <HAL_PCD_SuspendCallback+0x30>)
 800b696:	f043 0306 	orr.w	r3, r3, #6
 800b69a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b69c:	bf00      	nop
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	e000ed00 	.word	0xe000ed00

0800b6a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	7a5b      	ldrb	r3, [r3, #9]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d007      	beq.n	800b6c8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6b8:	4b08      	ldr	r3, [pc, #32]	@ (800b6dc <HAL_PCD_ResumeCallback+0x34>)
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	4a07      	ldr	r2, [pc, #28]	@ (800b6dc <HAL_PCD_ResumeCallback+0x34>)
 800b6be:	f023 0306 	bic.w	r3, r3, #6
 800b6c2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b6c4:	f000 f9f8 	bl	800bab8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fe fe46 	bl	800a360 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b6d4:	bf00      	nop
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	e000ed00 	.word	0xe000ed00

0800b6e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b6e8:	4a2b      	ldr	r2, [pc, #172]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a29      	ldr	r2, [pc, #164]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b6f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b6f8:	4b27      	ldr	r3, [pc, #156]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b6fa:	4a28      	ldr	r2, [pc, #160]	@ (800b79c <USBD_LL_Init+0xbc>)
 800b6fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b6fe:	4b26      	ldr	r3, [pc, #152]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b700:	2208      	movs	r2, #8
 800b702:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b704:	4b24      	ldr	r3, [pc, #144]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b706:	2202      	movs	r2, #2
 800b708:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b70a:	4b23      	ldr	r3, [pc, #140]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b70c:	2202      	movs	r2, #2
 800b70e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b710:	4b21      	ldr	r3, [pc, #132]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b712:	2200      	movs	r2, #0
 800b714:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b716:	4b20      	ldr	r3, [pc, #128]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b718:	2200      	movs	r2, #0
 800b71a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b71c:	4b1e      	ldr	r3, [pc, #120]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b71e:	2200      	movs	r2, #0
 800b720:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b722:	4b1d      	ldr	r3, [pc, #116]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b724:	2200      	movs	r2, #0
 800b726:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b728:	481b      	ldr	r0, [pc, #108]	@ (800b798 <USBD_LL_Init+0xb8>)
 800b72a:	f7f7 f994 	bl	8002a56 <HAL_PCD_Init>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b734:	f7f5 f889 	bl	800084a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b73e:	2318      	movs	r3, #24
 800b740:	2200      	movs	r2, #0
 800b742:	2100      	movs	r1, #0
 800b744:	f7f8 fe1b 	bl	800437e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b74e:	2358      	movs	r3, #88	@ 0x58
 800b750:	2200      	movs	r2, #0
 800b752:	2180      	movs	r1, #128	@ 0x80
 800b754:	f7f8 fe13 	bl	800437e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b75e:	23c0      	movs	r3, #192	@ 0xc0
 800b760:	2200      	movs	r2, #0
 800b762:	2181      	movs	r1, #129	@ 0x81
 800b764:	f7f8 fe0b 	bl	800437e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b76e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b772:	2200      	movs	r2, #0
 800b774:	2101      	movs	r1, #1
 800b776:	f7f8 fe02 	bl	800437e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b780:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b784:	2200      	movs	r2, #0
 800b786:	2182      	movs	r1, #130	@ 0x82
 800b788:	f7f8 fdf9 	bl	800437e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20002620 	.word	0x20002620
 800b79c:	40005c00 	.word	0x40005c00

0800b7a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7f7 fa1b 	bl	8002bf2 <HAL_PCD_Start>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 f97e 	bl	800bac4 <USBD_Get_USB_Status>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b084      	sub	sp, #16
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	4608      	mov	r0, r1
 800b7e0:	4611      	mov	r1, r2
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	70fb      	strb	r3, [r7, #3]
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	70bb      	strb	r3, [r7, #2]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b7fe:	78bb      	ldrb	r3, [r7, #2]
 800b800:	883a      	ldrh	r2, [r7, #0]
 800b802:	78f9      	ldrb	r1, [r7, #3]
 800b804:	f7f7 fb62 	bl	8002ecc <HAL_PCD_EP_Open>
 800b808:	4603      	mov	r3, r0
 800b80a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 f958 	bl	800bac4 <USBD_Get_USB_Status>
 800b814:	4603      	mov	r3, r0
 800b816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b818:	7bbb      	ldrb	r3, [r7, #14]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	460b      	mov	r3, r1
 800b82c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b83c:	78fa      	ldrb	r2, [r7, #3]
 800b83e:	4611      	mov	r1, r2
 800b840:	4618      	mov	r0, r3
 800b842:	f7f7 fba2 	bl	8002f8a <HAL_PCD_EP_Close>
 800b846:	4603      	mov	r3, r0
 800b848:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 f939 	bl	800bac4 <USBD_Get_USB_Status>
 800b852:	4603      	mov	r3, r0
 800b854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b856:	7bbb      	ldrb	r3, [r7, #14]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	4611      	mov	r1, r2
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f7 fc4b 	bl	800311a <HAL_PCD_EP_SetStall>
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b888:	7bfb      	ldrb	r3, [r7, #15]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 f91a 	bl	800bac4 <USBD_Get_USB_Status>
 800b890:	4603      	mov	r3, r0
 800b892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b894:	7bbb      	ldrb	r3, [r7, #14]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b8b8:	78fa      	ldrb	r2, [r7, #3]
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7f7 fc7e 	bl	80031be <HAL_PCD_EP_ClrStall>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f000 f8fb 	bl	800bac4 <USBD_Get_USB_Status>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b8ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	da0b      	bge.n	800b910 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8fe:	68f9      	ldr	r1, [r7, #12]
 800b900:	4613      	mov	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	440b      	add	r3, r1
 800b90a:	3312      	adds	r3, #18
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	e00b      	b.n	800b928 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b910:	78fb      	ldrb	r3, [r7, #3]
 800b912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b916:	68f9      	ldr	r1, [r7, #12]
 800b918:	4613      	mov	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	00db      	lsls	r3, r3, #3
 800b920:	440b      	add	r3, r1
 800b922:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b926:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b944:	2300      	movs	r3, #0
 800b946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b94e:	78fa      	ldrb	r2, [r7, #3]
 800b950:	4611      	mov	r1, r2
 800b952:	4618      	mov	r0, r3
 800b954:	f7f7 fa96 	bl	8002e84 <HAL_PCD_SetAddress>
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 f8b0 	bl	800bac4 <USBD_Get_USB_Status>
 800b964:	4603      	mov	r3, r0
 800b966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b968:	7bbb      	ldrb	r3, [r7, #14]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b086      	sub	sp, #24
 800b976:	af00      	add	r7, sp, #0
 800b978:	60f8      	str	r0, [r7, #12]
 800b97a:	607a      	str	r2, [r7, #4]
 800b97c:	603b      	str	r3, [r7, #0]
 800b97e:	460b      	mov	r3, r1
 800b980:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b990:	7af9      	ldrb	r1, [r7, #11]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	f7f7 fb89 	bl	80030ac <HAL_PCD_EP_Transmit>
 800b99a:	4603      	mov	r3, r0
 800b99c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 f88f 	bl	800bac4 <USBD_Get_USB_Status>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	607a      	str	r2, [r7, #4]
 800b9be:	603b      	str	r3, [r7, #0]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b9d2:	7af9      	ldrb	r1, [r7, #11]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	f7f7 fb1f 	bl	800301a <HAL_PCD_EP_Receive>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e0:	7dfb      	ldrb	r3, [r7, #23]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 f86e 	bl	800bac4 <USBD_Get_USB_Status>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3718      	adds	r7, #24
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ba08:	78fa      	ldrb	r2, [r7, #3]
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7f7 fb35 	bl	800307c <HAL_PCD_EP_GetRxCount>
 800ba12:	4603      	mov	r3, r0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ba28:	78fb      	ldrb	r3, [r7, #3]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <HAL_PCDEx_LPM_Callback+0x18>
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d013      	beq.n	800ba5a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ba32:	e023      	b.n	800ba7c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	7a5b      	ldrb	r3, [r3, #9]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d007      	beq.n	800ba4c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ba3c:	f000 f83c 	bl	800bab8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba40:	4b10      	ldr	r3, [pc, #64]	@ (800ba84 <HAL_PCDEx_LPM_Callback+0x68>)
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	4a0f      	ldr	r2, [pc, #60]	@ (800ba84 <HAL_PCDEx_LPM_Callback+0x68>)
 800ba46:	f023 0306 	bic.w	r3, r3, #6
 800ba4a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fc84 	bl	800a360 <USBD_LL_Resume>
    break;
 800ba58:	e010      	b.n	800ba7c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fe fc67 	bl	800a334 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	7a5b      	ldrb	r3, [r3, #9]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d005      	beq.n	800ba7a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba6e:	4b05      	ldr	r3, [pc, #20]	@ (800ba84 <HAL_PCDEx_LPM_Callback+0x68>)
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	4a04      	ldr	r2, [pc, #16]	@ (800ba84 <HAL_PCDEx_LPM_Callback+0x68>)
 800ba74:	f043 0306 	orr.w	r3, r3, #6
 800ba78:	6113      	str	r3, [r2, #16]
    break;
 800ba7a:	bf00      	nop
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	e000ed00 	.word	0xe000ed00

0800ba88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ba90:	4b03      	ldr	r3, [pc, #12]	@ (800baa0 <USBD_static_malloc+0x18>)
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	20000b14 	.word	0x20000b14

0800baa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]

}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800babc:	f7f4 fe7a 	bl	80007b4 <SystemClock_Config>
}
 800bac0:	bf00      	nop
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	4603      	mov	r3, r0
 800bacc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d817      	bhi.n	800bb08 <USBD_Get_USB_Status+0x44>
 800bad8:	a201      	add	r2, pc, #4	@ (adr r2, 800bae0 <USBD_Get_USB_Status+0x1c>)
 800bada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bade:	bf00      	nop
 800bae0:	0800baf1 	.word	0x0800baf1
 800bae4:	0800baf7 	.word	0x0800baf7
 800bae8:	0800bafd 	.word	0x0800bafd
 800baec:	0800bb03 	.word	0x0800bb03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73fb      	strb	r3, [r7, #15]
    break;
 800baf4:	e00b      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800baf6:	2303      	movs	r3, #3
 800baf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bafa:	e008      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bafc:	2301      	movs	r3, #1
 800bafe:	73fb      	strb	r3, [r7, #15]
    break;
 800bb00:	e005      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb02:	2303      	movs	r3, #3
 800bb04:	73fb      	strb	r3, [r7, #15]
    break;
 800bb06:	e002      	b.n	800bb0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb0c:	bf00      	nop
  }
  return usb_status;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <std>:
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	b510      	push	{r4, lr}
 800bb20:	4604      	mov	r4, r0
 800bb22:	e9c0 3300 	strd	r3, r3, [r0]
 800bb26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb2a:	6083      	str	r3, [r0, #8]
 800bb2c:	8181      	strh	r1, [r0, #12]
 800bb2e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb30:	81c2      	strh	r2, [r0, #14]
 800bb32:	6183      	str	r3, [r0, #24]
 800bb34:	4619      	mov	r1, r3
 800bb36:	2208      	movs	r2, #8
 800bb38:	305c      	adds	r0, #92	@ 0x5c
 800bb3a:	f000 f9f9 	bl	800bf30 <memset>
 800bb3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb74 <std+0x58>)
 800bb40:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb42:	4b0d      	ldr	r3, [pc, #52]	@ (800bb78 <std+0x5c>)
 800bb44:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb46:	4b0d      	ldr	r3, [pc, #52]	@ (800bb7c <std+0x60>)
 800bb48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb80 <std+0x64>)
 800bb4c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb4e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb84 <std+0x68>)
 800bb50:	6224      	str	r4, [r4, #32]
 800bb52:	429c      	cmp	r4, r3
 800bb54:	d006      	beq.n	800bb64 <std+0x48>
 800bb56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb5a:	4294      	cmp	r4, r2
 800bb5c:	d002      	beq.n	800bb64 <std+0x48>
 800bb5e:	33d0      	adds	r3, #208	@ 0xd0
 800bb60:	429c      	cmp	r4, r3
 800bb62:	d105      	bne.n	800bb70 <std+0x54>
 800bb64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb6c:	f000 ba58 	b.w	800c020 <__retarget_lock_init_recursive>
 800bb70:	bd10      	pop	{r4, pc}
 800bb72:	bf00      	nop
 800bb74:	0800bd81 	.word	0x0800bd81
 800bb78:	0800bda3 	.word	0x0800bda3
 800bb7c:	0800bddb 	.word	0x0800bddb
 800bb80:	0800bdff 	.word	0x0800bdff
 800bb84:	20000d34 	.word	0x20000d34

0800bb88 <stdio_exit_handler>:
 800bb88:	4a02      	ldr	r2, [pc, #8]	@ (800bb94 <stdio_exit_handler+0xc>)
 800bb8a:	4903      	ldr	r1, [pc, #12]	@ (800bb98 <stdio_exit_handler+0x10>)
 800bb8c:	4803      	ldr	r0, [pc, #12]	@ (800bb9c <stdio_exit_handler+0x14>)
 800bb8e:	f000 b869 	b.w	800bc64 <_fwalk_sglue>
 800bb92:	bf00      	nop
 800bb94:	2000021c 	.word	0x2000021c
 800bb98:	0800c8dd 	.word	0x0800c8dd
 800bb9c:	2000022c 	.word	0x2000022c

0800bba0 <cleanup_stdio>:
 800bba0:	6841      	ldr	r1, [r0, #4]
 800bba2:	4b0c      	ldr	r3, [pc, #48]	@ (800bbd4 <cleanup_stdio+0x34>)
 800bba4:	4299      	cmp	r1, r3
 800bba6:	b510      	push	{r4, lr}
 800bba8:	4604      	mov	r4, r0
 800bbaa:	d001      	beq.n	800bbb0 <cleanup_stdio+0x10>
 800bbac:	f000 fe96 	bl	800c8dc <_fflush_r>
 800bbb0:	68a1      	ldr	r1, [r4, #8]
 800bbb2:	4b09      	ldr	r3, [pc, #36]	@ (800bbd8 <cleanup_stdio+0x38>)
 800bbb4:	4299      	cmp	r1, r3
 800bbb6:	d002      	beq.n	800bbbe <cleanup_stdio+0x1e>
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f000 fe8f 	bl	800c8dc <_fflush_r>
 800bbbe:	68e1      	ldr	r1, [r4, #12]
 800bbc0:	4b06      	ldr	r3, [pc, #24]	@ (800bbdc <cleanup_stdio+0x3c>)
 800bbc2:	4299      	cmp	r1, r3
 800bbc4:	d004      	beq.n	800bbd0 <cleanup_stdio+0x30>
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbcc:	f000 be86 	b.w	800c8dc <_fflush_r>
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20000d34 	.word	0x20000d34
 800bbd8:	20000d9c 	.word	0x20000d9c
 800bbdc:	20000e04 	.word	0x20000e04

0800bbe0 <global_stdio_init.part.0>:
 800bbe0:	b510      	push	{r4, lr}
 800bbe2:	4b0b      	ldr	r3, [pc, #44]	@ (800bc10 <global_stdio_init.part.0+0x30>)
 800bbe4:	4c0b      	ldr	r4, [pc, #44]	@ (800bc14 <global_stdio_init.part.0+0x34>)
 800bbe6:	4a0c      	ldr	r2, [pc, #48]	@ (800bc18 <global_stdio_init.part.0+0x38>)
 800bbe8:	601a      	str	r2, [r3, #0]
 800bbea:	4620      	mov	r0, r4
 800bbec:	2200      	movs	r2, #0
 800bbee:	2104      	movs	r1, #4
 800bbf0:	f7ff ff94 	bl	800bb1c <std>
 800bbf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	2109      	movs	r1, #9
 800bbfc:	f7ff ff8e 	bl	800bb1c <std>
 800bc00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc04:	2202      	movs	r2, #2
 800bc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc0a:	2112      	movs	r1, #18
 800bc0c:	f7ff bf86 	b.w	800bb1c <std>
 800bc10:	20000e6c 	.word	0x20000e6c
 800bc14:	20000d34 	.word	0x20000d34
 800bc18:	0800bb89 	.word	0x0800bb89

0800bc1c <__sfp_lock_acquire>:
 800bc1c:	4801      	ldr	r0, [pc, #4]	@ (800bc24 <__sfp_lock_acquire+0x8>)
 800bc1e:	f000 ba00 	b.w	800c022 <__retarget_lock_acquire_recursive>
 800bc22:	bf00      	nop
 800bc24:	20000e75 	.word	0x20000e75

0800bc28 <__sfp_lock_release>:
 800bc28:	4801      	ldr	r0, [pc, #4]	@ (800bc30 <__sfp_lock_release+0x8>)
 800bc2a:	f000 b9fb 	b.w	800c024 <__retarget_lock_release_recursive>
 800bc2e:	bf00      	nop
 800bc30:	20000e75 	.word	0x20000e75

0800bc34 <__sinit>:
 800bc34:	b510      	push	{r4, lr}
 800bc36:	4604      	mov	r4, r0
 800bc38:	f7ff fff0 	bl	800bc1c <__sfp_lock_acquire>
 800bc3c:	6a23      	ldr	r3, [r4, #32]
 800bc3e:	b11b      	cbz	r3, 800bc48 <__sinit+0x14>
 800bc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc44:	f7ff bff0 	b.w	800bc28 <__sfp_lock_release>
 800bc48:	4b04      	ldr	r3, [pc, #16]	@ (800bc5c <__sinit+0x28>)
 800bc4a:	6223      	str	r3, [r4, #32]
 800bc4c:	4b04      	ldr	r3, [pc, #16]	@ (800bc60 <__sinit+0x2c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1f5      	bne.n	800bc40 <__sinit+0xc>
 800bc54:	f7ff ffc4 	bl	800bbe0 <global_stdio_init.part.0>
 800bc58:	e7f2      	b.n	800bc40 <__sinit+0xc>
 800bc5a:	bf00      	nop
 800bc5c:	0800bba1 	.word	0x0800bba1
 800bc60:	20000e6c 	.word	0x20000e6c

0800bc64 <_fwalk_sglue>:
 800bc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc68:	4607      	mov	r7, r0
 800bc6a:	4688      	mov	r8, r1
 800bc6c:	4614      	mov	r4, r2
 800bc6e:	2600      	movs	r6, #0
 800bc70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc74:	f1b9 0901 	subs.w	r9, r9, #1
 800bc78:	d505      	bpl.n	800bc86 <_fwalk_sglue+0x22>
 800bc7a:	6824      	ldr	r4, [r4, #0]
 800bc7c:	2c00      	cmp	r4, #0
 800bc7e:	d1f7      	bne.n	800bc70 <_fwalk_sglue+0xc>
 800bc80:	4630      	mov	r0, r6
 800bc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc86:	89ab      	ldrh	r3, [r5, #12]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d907      	bls.n	800bc9c <_fwalk_sglue+0x38>
 800bc8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc90:	3301      	adds	r3, #1
 800bc92:	d003      	beq.n	800bc9c <_fwalk_sglue+0x38>
 800bc94:	4629      	mov	r1, r5
 800bc96:	4638      	mov	r0, r7
 800bc98:	47c0      	blx	r8
 800bc9a:	4306      	orrs	r6, r0
 800bc9c:	3568      	adds	r5, #104	@ 0x68
 800bc9e:	e7e9      	b.n	800bc74 <_fwalk_sglue+0x10>

0800bca0 <iprintf>:
 800bca0:	b40f      	push	{r0, r1, r2, r3}
 800bca2:	b507      	push	{r0, r1, r2, lr}
 800bca4:	4906      	ldr	r1, [pc, #24]	@ (800bcc0 <iprintf+0x20>)
 800bca6:	ab04      	add	r3, sp, #16
 800bca8:	6808      	ldr	r0, [r1, #0]
 800bcaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcae:	6881      	ldr	r1, [r0, #8]
 800bcb0:	9301      	str	r3, [sp, #4]
 800bcb2:	f000 fae9 	bl	800c288 <_vfiprintf_r>
 800bcb6:	b003      	add	sp, #12
 800bcb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcbc:	b004      	add	sp, #16
 800bcbe:	4770      	bx	lr
 800bcc0:	20000228 	.word	0x20000228

0800bcc4 <_puts_r>:
 800bcc4:	6a03      	ldr	r3, [r0, #32]
 800bcc6:	b570      	push	{r4, r5, r6, lr}
 800bcc8:	6884      	ldr	r4, [r0, #8]
 800bcca:	4605      	mov	r5, r0
 800bccc:	460e      	mov	r6, r1
 800bcce:	b90b      	cbnz	r3, 800bcd4 <_puts_r+0x10>
 800bcd0:	f7ff ffb0 	bl	800bc34 <__sinit>
 800bcd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcd6:	07db      	lsls	r3, r3, #31
 800bcd8:	d405      	bmi.n	800bce6 <_puts_r+0x22>
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	0598      	lsls	r0, r3, #22
 800bcde:	d402      	bmi.n	800bce6 <_puts_r+0x22>
 800bce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bce2:	f000 f99e 	bl	800c022 <__retarget_lock_acquire_recursive>
 800bce6:	89a3      	ldrh	r3, [r4, #12]
 800bce8:	0719      	lsls	r1, r3, #28
 800bcea:	d502      	bpl.n	800bcf2 <_puts_r+0x2e>
 800bcec:	6923      	ldr	r3, [r4, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d135      	bne.n	800bd5e <_puts_r+0x9a>
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	f000 f8c5 	bl	800be84 <__swsetup_r>
 800bcfa:	b380      	cbz	r0, 800bd5e <_puts_r+0x9a>
 800bcfc:	f04f 35ff 	mov.w	r5, #4294967295
 800bd00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd02:	07da      	lsls	r2, r3, #31
 800bd04:	d405      	bmi.n	800bd12 <_puts_r+0x4e>
 800bd06:	89a3      	ldrh	r3, [r4, #12]
 800bd08:	059b      	lsls	r3, r3, #22
 800bd0a:	d402      	bmi.n	800bd12 <_puts_r+0x4e>
 800bd0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd0e:	f000 f989 	bl	800c024 <__retarget_lock_release_recursive>
 800bd12:	4628      	mov	r0, r5
 800bd14:	bd70      	pop	{r4, r5, r6, pc}
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	da04      	bge.n	800bd24 <_puts_r+0x60>
 800bd1a:	69a2      	ldr	r2, [r4, #24]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	dc17      	bgt.n	800bd50 <_puts_r+0x8c>
 800bd20:	290a      	cmp	r1, #10
 800bd22:	d015      	beq.n	800bd50 <_puts_r+0x8c>
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	1c5a      	adds	r2, r3, #1
 800bd28:	6022      	str	r2, [r4, #0]
 800bd2a:	7019      	strb	r1, [r3, #0]
 800bd2c:	68a3      	ldr	r3, [r4, #8]
 800bd2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd32:	3b01      	subs	r3, #1
 800bd34:	60a3      	str	r3, [r4, #8]
 800bd36:	2900      	cmp	r1, #0
 800bd38:	d1ed      	bne.n	800bd16 <_puts_r+0x52>
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	da11      	bge.n	800bd62 <_puts_r+0x9e>
 800bd3e:	4622      	mov	r2, r4
 800bd40:	210a      	movs	r1, #10
 800bd42:	4628      	mov	r0, r5
 800bd44:	f000 f85f 	bl	800be06 <__swbuf_r>
 800bd48:	3001      	adds	r0, #1
 800bd4a:	d0d7      	beq.n	800bcfc <_puts_r+0x38>
 800bd4c:	250a      	movs	r5, #10
 800bd4e:	e7d7      	b.n	800bd00 <_puts_r+0x3c>
 800bd50:	4622      	mov	r2, r4
 800bd52:	4628      	mov	r0, r5
 800bd54:	f000 f857 	bl	800be06 <__swbuf_r>
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d1e7      	bne.n	800bd2c <_puts_r+0x68>
 800bd5c:	e7ce      	b.n	800bcfc <_puts_r+0x38>
 800bd5e:	3e01      	subs	r6, #1
 800bd60:	e7e4      	b.n	800bd2c <_puts_r+0x68>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	1c5a      	adds	r2, r3, #1
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	220a      	movs	r2, #10
 800bd6a:	701a      	strb	r2, [r3, #0]
 800bd6c:	e7ee      	b.n	800bd4c <_puts_r+0x88>
	...

0800bd70 <puts>:
 800bd70:	4b02      	ldr	r3, [pc, #8]	@ (800bd7c <puts+0xc>)
 800bd72:	4601      	mov	r1, r0
 800bd74:	6818      	ldr	r0, [r3, #0]
 800bd76:	f7ff bfa5 	b.w	800bcc4 <_puts_r>
 800bd7a:	bf00      	nop
 800bd7c:	20000228 	.word	0x20000228

0800bd80 <__sread>:
 800bd80:	b510      	push	{r4, lr}
 800bd82:	460c      	mov	r4, r1
 800bd84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd88:	f000 f8fc 	bl	800bf84 <_read_r>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	bfab      	itete	ge
 800bd90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd92:	89a3      	ldrhlt	r3, [r4, #12]
 800bd94:	181b      	addge	r3, r3, r0
 800bd96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd9a:	bfac      	ite	ge
 800bd9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd9e:	81a3      	strhlt	r3, [r4, #12]
 800bda0:	bd10      	pop	{r4, pc}

0800bda2 <__swrite>:
 800bda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda6:	461f      	mov	r7, r3
 800bda8:	898b      	ldrh	r3, [r1, #12]
 800bdaa:	05db      	lsls	r3, r3, #23
 800bdac:	4605      	mov	r5, r0
 800bdae:	460c      	mov	r4, r1
 800bdb0:	4616      	mov	r6, r2
 800bdb2:	d505      	bpl.n	800bdc0 <__swrite+0x1e>
 800bdb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb8:	2302      	movs	r3, #2
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f000 f8d0 	bl	800bf60 <_lseek_r>
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bdca:	81a3      	strh	r3, [r4, #12]
 800bdcc:	4632      	mov	r2, r6
 800bdce:	463b      	mov	r3, r7
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd6:	f000 b8e7 	b.w	800bfa8 <_write_r>

0800bdda <__sseek>:
 800bdda:	b510      	push	{r4, lr}
 800bddc:	460c      	mov	r4, r1
 800bdde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde2:	f000 f8bd 	bl	800bf60 <_lseek_r>
 800bde6:	1c43      	adds	r3, r0, #1
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	bf15      	itete	ne
 800bdec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bdee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bdf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bdf6:	81a3      	strheq	r3, [r4, #12]
 800bdf8:	bf18      	it	ne
 800bdfa:	81a3      	strhne	r3, [r4, #12]
 800bdfc:	bd10      	pop	{r4, pc}

0800bdfe <__sclose>:
 800bdfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be02:	f000 b89d 	b.w	800bf40 <_close_r>

0800be06 <__swbuf_r>:
 800be06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be08:	460e      	mov	r6, r1
 800be0a:	4614      	mov	r4, r2
 800be0c:	4605      	mov	r5, r0
 800be0e:	b118      	cbz	r0, 800be18 <__swbuf_r+0x12>
 800be10:	6a03      	ldr	r3, [r0, #32]
 800be12:	b90b      	cbnz	r3, 800be18 <__swbuf_r+0x12>
 800be14:	f7ff ff0e 	bl	800bc34 <__sinit>
 800be18:	69a3      	ldr	r3, [r4, #24]
 800be1a:	60a3      	str	r3, [r4, #8]
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	071a      	lsls	r2, r3, #28
 800be20:	d501      	bpl.n	800be26 <__swbuf_r+0x20>
 800be22:	6923      	ldr	r3, [r4, #16]
 800be24:	b943      	cbnz	r3, 800be38 <__swbuf_r+0x32>
 800be26:	4621      	mov	r1, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	f000 f82b 	bl	800be84 <__swsetup_r>
 800be2e:	b118      	cbz	r0, 800be38 <__swbuf_r+0x32>
 800be30:	f04f 37ff 	mov.w	r7, #4294967295
 800be34:	4638      	mov	r0, r7
 800be36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	6922      	ldr	r2, [r4, #16]
 800be3c:	1a98      	subs	r0, r3, r2
 800be3e:	6963      	ldr	r3, [r4, #20]
 800be40:	b2f6      	uxtb	r6, r6
 800be42:	4283      	cmp	r3, r0
 800be44:	4637      	mov	r7, r6
 800be46:	dc05      	bgt.n	800be54 <__swbuf_r+0x4e>
 800be48:	4621      	mov	r1, r4
 800be4a:	4628      	mov	r0, r5
 800be4c:	f000 fd46 	bl	800c8dc <_fflush_r>
 800be50:	2800      	cmp	r0, #0
 800be52:	d1ed      	bne.n	800be30 <__swbuf_r+0x2a>
 800be54:	68a3      	ldr	r3, [r4, #8]
 800be56:	3b01      	subs	r3, #1
 800be58:	60a3      	str	r3, [r4, #8]
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	6022      	str	r2, [r4, #0]
 800be60:	701e      	strb	r6, [r3, #0]
 800be62:	6962      	ldr	r2, [r4, #20]
 800be64:	1c43      	adds	r3, r0, #1
 800be66:	429a      	cmp	r2, r3
 800be68:	d004      	beq.n	800be74 <__swbuf_r+0x6e>
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	07db      	lsls	r3, r3, #31
 800be6e:	d5e1      	bpl.n	800be34 <__swbuf_r+0x2e>
 800be70:	2e0a      	cmp	r6, #10
 800be72:	d1df      	bne.n	800be34 <__swbuf_r+0x2e>
 800be74:	4621      	mov	r1, r4
 800be76:	4628      	mov	r0, r5
 800be78:	f000 fd30 	bl	800c8dc <_fflush_r>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d0d9      	beq.n	800be34 <__swbuf_r+0x2e>
 800be80:	e7d6      	b.n	800be30 <__swbuf_r+0x2a>
	...

0800be84 <__swsetup_r>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	4b29      	ldr	r3, [pc, #164]	@ (800bf2c <__swsetup_r+0xa8>)
 800be88:	4605      	mov	r5, r0
 800be8a:	6818      	ldr	r0, [r3, #0]
 800be8c:	460c      	mov	r4, r1
 800be8e:	b118      	cbz	r0, 800be98 <__swsetup_r+0x14>
 800be90:	6a03      	ldr	r3, [r0, #32]
 800be92:	b90b      	cbnz	r3, 800be98 <__swsetup_r+0x14>
 800be94:	f7ff fece 	bl	800bc34 <__sinit>
 800be98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be9c:	0719      	lsls	r1, r3, #28
 800be9e:	d422      	bmi.n	800bee6 <__swsetup_r+0x62>
 800bea0:	06da      	lsls	r2, r3, #27
 800bea2:	d407      	bmi.n	800beb4 <__swsetup_r+0x30>
 800bea4:	2209      	movs	r2, #9
 800bea6:	602a      	str	r2, [r5, #0]
 800bea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beac:	81a3      	strh	r3, [r4, #12]
 800beae:	f04f 30ff 	mov.w	r0, #4294967295
 800beb2:	e033      	b.n	800bf1c <__swsetup_r+0x98>
 800beb4:	0758      	lsls	r0, r3, #29
 800beb6:	d512      	bpl.n	800bede <__swsetup_r+0x5a>
 800beb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800beba:	b141      	cbz	r1, 800bece <__swsetup_r+0x4a>
 800bebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bec0:	4299      	cmp	r1, r3
 800bec2:	d002      	beq.n	800beca <__swsetup_r+0x46>
 800bec4:	4628      	mov	r0, r5
 800bec6:	f000 f8bd 	bl	800c044 <_free_r>
 800beca:	2300      	movs	r3, #0
 800becc:	6363      	str	r3, [r4, #52]	@ 0x34
 800bece:	89a3      	ldrh	r3, [r4, #12]
 800bed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bed4:	81a3      	strh	r3, [r4, #12]
 800bed6:	2300      	movs	r3, #0
 800bed8:	6063      	str	r3, [r4, #4]
 800beda:	6923      	ldr	r3, [r4, #16]
 800bedc:	6023      	str	r3, [r4, #0]
 800bede:	89a3      	ldrh	r3, [r4, #12]
 800bee0:	f043 0308 	orr.w	r3, r3, #8
 800bee4:	81a3      	strh	r3, [r4, #12]
 800bee6:	6923      	ldr	r3, [r4, #16]
 800bee8:	b94b      	cbnz	r3, 800befe <__swsetup_r+0x7a>
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bef4:	d003      	beq.n	800befe <__swsetup_r+0x7a>
 800bef6:	4621      	mov	r1, r4
 800bef8:	4628      	mov	r0, r5
 800befa:	f000 fd3d 	bl	800c978 <__smakebuf_r>
 800befe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf02:	f013 0201 	ands.w	r2, r3, #1
 800bf06:	d00a      	beq.n	800bf1e <__swsetup_r+0x9a>
 800bf08:	2200      	movs	r2, #0
 800bf0a:	60a2      	str	r2, [r4, #8]
 800bf0c:	6962      	ldr	r2, [r4, #20]
 800bf0e:	4252      	negs	r2, r2
 800bf10:	61a2      	str	r2, [r4, #24]
 800bf12:	6922      	ldr	r2, [r4, #16]
 800bf14:	b942      	cbnz	r2, 800bf28 <__swsetup_r+0xa4>
 800bf16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf1a:	d1c5      	bne.n	800bea8 <__swsetup_r+0x24>
 800bf1c:	bd38      	pop	{r3, r4, r5, pc}
 800bf1e:	0799      	lsls	r1, r3, #30
 800bf20:	bf58      	it	pl
 800bf22:	6962      	ldrpl	r2, [r4, #20]
 800bf24:	60a2      	str	r2, [r4, #8]
 800bf26:	e7f4      	b.n	800bf12 <__swsetup_r+0x8e>
 800bf28:	2000      	movs	r0, #0
 800bf2a:	e7f7      	b.n	800bf1c <__swsetup_r+0x98>
 800bf2c:	20000228 	.word	0x20000228

0800bf30 <memset>:
 800bf30:	4402      	add	r2, r0
 800bf32:	4603      	mov	r3, r0
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d100      	bne.n	800bf3a <memset+0xa>
 800bf38:	4770      	bx	lr
 800bf3a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf3e:	e7f9      	b.n	800bf34 <memset+0x4>

0800bf40 <_close_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	4d06      	ldr	r5, [pc, #24]	@ (800bf5c <_close_r+0x1c>)
 800bf44:	2300      	movs	r3, #0
 800bf46:	4604      	mov	r4, r0
 800bf48:	4608      	mov	r0, r1
 800bf4a:	602b      	str	r3, [r5, #0]
 800bf4c:	f7f4 ff37 	bl	8000dbe <_close>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d102      	bne.n	800bf5a <_close_r+0x1a>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	b103      	cbz	r3, 800bf5a <_close_r+0x1a>
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	20000e70 	.word	0x20000e70

0800bf60 <_lseek_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4d07      	ldr	r5, [pc, #28]	@ (800bf80 <_lseek_r+0x20>)
 800bf64:	4604      	mov	r4, r0
 800bf66:	4608      	mov	r0, r1
 800bf68:	4611      	mov	r1, r2
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	602a      	str	r2, [r5, #0]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	f7f4 ff4c 	bl	8000e0c <_lseek>
 800bf74:	1c43      	adds	r3, r0, #1
 800bf76:	d102      	bne.n	800bf7e <_lseek_r+0x1e>
 800bf78:	682b      	ldr	r3, [r5, #0]
 800bf7a:	b103      	cbz	r3, 800bf7e <_lseek_r+0x1e>
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	20000e70 	.word	0x20000e70

0800bf84 <_read_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d07      	ldr	r5, [pc, #28]	@ (800bfa4 <_read_r+0x20>)
 800bf88:	4604      	mov	r4, r0
 800bf8a:	4608      	mov	r0, r1
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	2200      	movs	r2, #0
 800bf90:	602a      	str	r2, [r5, #0]
 800bf92:	461a      	mov	r2, r3
 800bf94:	f7f4 fef6 	bl	8000d84 <_read>
 800bf98:	1c43      	adds	r3, r0, #1
 800bf9a:	d102      	bne.n	800bfa2 <_read_r+0x1e>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	b103      	cbz	r3, 800bfa2 <_read_r+0x1e>
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
 800bfa4:	20000e70 	.word	0x20000e70

0800bfa8 <_write_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4d07      	ldr	r5, [pc, #28]	@ (800bfc8 <_write_r+0x20>)
 800bfac:	4604      	mov	r4, r0
 800bfae:	4608      	mov	r0, r1
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	602a      	str	r2, [r5, #0]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	f7f5 f8d4 	bl	8001164 <_write>
 800bfbc:	1c43      	adds	r3, r0, #1
 800bfbe:	d102      	bne.n	800bfc6 <_write_r+0x1e>
 800bfc0:	682b      	ldr	r3, [r5, #0]
 800bfc2:	b103      	cbz	r3, 800bfc6 <_write_r+0x1e>
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	bd38      	pop	{r3, r4, r5, pc}
 800bfc8:	20000e70 	.word	0x20000e70

0800bfcc <__errno>:
 800bfcc:	4b01      	ldr	r3, [pc, #4]	@ (800bfd4 <__errno+0x8>)
 800bfce:	6818      	ldr	r0, [r3, #0]
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	20000228 	.word	0x20000228

0800bfd8 <__libc_init_array>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	4d0d      	ldr	r5, [pc, #52]	@ (800c010 <__libc_init_array+0x38>)
 800bfdc:	4c0d      	ldr	r4, [pc, #52]	@ (800c014 <__libc_init_array+0x3c>)
 800bfde:	1b64      	subs	r4, r4, r5
 800bfe0:	10a4      	asrs	r4, r4, #2
 800bfe2:	2600      	movs	r6, #0
 800bfe4:	42a6      	cmp	r6, r4
 800bfe6:	d109      	bne.n	800bffc <__libc_init_array+0x24>
 800bfe8:	4d0b      	ldr	r5, [pc, #44]	@ (800c018 <__libc_init_array+0x40>)
 800bfea:	4c0c      	ldr	r4, [pc, #48]	@ (800c01c <__libc_init_array+0x44>)
 800bfec:	f000 fd32 	bl	800ca54 <_init>
 800bff0:	1b64      	subs	r4, r4, r5
 800bff2:	10a4      	asrs	r4, r4, #2
 800bff4:	2600      	movs	r6, #0
 800bff6:	42a6      	cmp	r6, r4
 800bff8:	d105      	bne.n	800c006 <__libc_init_array+0x2e>
 800bffa:	bd70      	pop	{r4, r5, r6, pc}
 800bffc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c000:	4798      	blx	r3
 800c002:	3601      	adds	r6, #1
 800c004:	e7ee      	b.n	800bfe4 <__libc_init_array+0xc>
 800c006:	f855 3b04 	ldr.w	r3, [r5], #4
 800c00a:	4798      	blx	r3
 800c00c:	3601      	adds	r6, #1
 800c00e:	e7f2      	b.n	800bff6 <__libc_init_array+0x1e>
 800c010:	0800cd18 	.word	0x0800cd18
 800c014:	0800cd18 	.word	0x0800cd18
 800c018:	0800cd18 	.word	0x0800cd18
 800c01c:	0800cd1c 	.word	0x0800cd1c

0800c020 <__retarget_lock_init_recursive>:
 800c020:	4770      	bx	lr

0800c022 <__retarget_lock_acquire_recursive>:
 800c022:	4770      	bx	lr

0800c024 <__retarget_lock_release_recursive>:
 800c024:	4770      	bx	lr

0800c026 <memcpy>:
 800c026:	440a      	add	r2, r1
 800c028:	4291      	cmp	r1, r2
 800c02a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c02e:	d100      	bne.n	800c032 <memcpy+0xc>
 800c030:	4770      	bx	lr
 800c032:	b510      	push	{r4, lr}
 800c034:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c038:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c03c:	4291      	cmp	r1, r2
 800c03e:	d1f9      	bne.n	800c034 <memcpy+0xe>
 800c040:	bd10      	pop	{r4, pc}
	...

0800c044 <_free_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4605      	mov	r5, r0
 800c048:	2900      	cmp	r1, #0
 800c04a:	d041      	beq.n	800c0d0 <_free_r+0x8c>
 800c04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c050:	1f0c      	subs	r4, r1, #4
 800c052:	2b00      	cmp	r3, #0
 800c054:	bfb8      	it	lt
 800c056:	18e4      	addlt	r4, r4, r3
 800c058:	f000 f8e0 	bl	800c21c <__malloc_lock>
 800c05c:	4a1d      	ldr	r2, [pc, #116]	@ (800c0d4 <_free_r+0x90>)
 800c05e:	6813      	ldr	r3, [r2, #0]
 800c060:	b933      	cbnz	r3, 800c070 <_free_r+0x2c>
 800c062:	6063      	str	r3, [r4, #4]
 800c064:	6014      	str	r4, [r2, #0]
 800c066:	4628      	mov	r0, r5
 800c068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c06c:	f000 b8dc 	b.w	800c228 <__malloc_unlock>
 800c070:	42a3      	cmp	r3, r4
 800c072:	d908      	bls.n	800c086 <_free_r+0x42>
 800c074:	6820      	ldr	r0, [r4, #0]
 800c076:	1821      	adds	r1, r4, r0
 800c078:	428b      	cmp	r3, r1
 800c07a:	bf01      	itttt	eq
 800c07c:	6819      	ldreq	r1, [r3, #0]
 800c07e:	685b      	ldreq	r3, [r3, #4]
 800c080:	1809      	addeq	r1, r1, r0
 800c082:	6021      	streq	r1, [r4, #0]
 800c084:	e7ed      	b.n	800c062 <_free_r+0x1e>
 800c086:	461a      	mov	r2, r3
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	b10b      	cbz	r3, 800c090 <_free_r+0x4c>
 800c08c:	42a3      	cmp	r3, r4
 800c08e:	d9fa      	bls.n	800c086 <_free_r+0x42>
 800c090:	6811      	ldr	r1, [r2, #0]
 800c092:	1850      	adds	r0, r2, r1
 800c094:	42a0      	cmp	r0, r4
 800c096:	d10b      	bne.n	800c0b0 <_free_r+0x6c>
 800c098:	6820      	ldr	r0, [r4, #0]
 800c09a:	4401      	add	r1, r0
 800c09c:	1850      	adds	r0, r2, r1
 800c09e:	4283      	cmp	r3, r0
 800c0a0:	6011      	str	r1, [r2, #0]
 800c0a2:	d1e0      	bne.n	800c066 <_free_r+0x22>
 800c0a4:	6818      	ldr	r0, [r3, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	6053      	str	r3, [r2, #4]
 800c0aa:	4408      	add	r0, r1
 800c0ac:	6010      	str	r0, [r2, #0]
 800c0ae:	e7da      	b.n	800c066 <_free_r+0x22>
 800c0b0:	d902      	bls.n	800c0b8 <_free_r+0x74>
 800c0b2:	230c      	movs	r3, #12
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	e7d6      	b.n	800c066 <_free_r+0x22>
 800c0b8:	6820      	ldr	r0, [r4, #0]
 800c0ba:	1821      	adds	r1, r4, r0
 800c0bc:	428b      	cmp	r3, r1
 800c0be:	bf04      	itt	eq
 800c0c0:	6819      	ldreq	r1, [r3, #0]
 800c0c2:	685b      	ldreq	r3, [r3, #4]
 800c0c4:	6063      	str	r3, [r4, #4]
 800c0c6:	bf04      	itt	eq
 800c0c8:	1809      	addeq	r1, r1, r0
 800c0ca:	6021      	streq	r1, [r4, #0]
 800c0cc:	6054      	str	r4, [r2, #4]
 800c0ce:	e7ca      	b.n	800c066 <_free_r+0x22>
 800c0d0:	bd38      	pop	{r3, r4, r5, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20000e7c 	.word	0x20000e7c

0800c0d8 <sbrk_aligned>:
 800c0d8:	b570      	push	{r4, r5, r6, lr}
 800c0da:	4e0f      	ldr	r6, [pc, #60]	@ (800c118 <sbrk_aligned+0x40>)
 800c0dc:	460c      	mov	r4, r1
 800c0de:	6831      	ldr	r1, [r6, #0]
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	b911      	cbnz	r1, 800c0ea <sbrk_aligned+0x12>
 800c0e4:	f000 fca6 	bl	800ca34 <_sbrk_r>
 800c0e8:	6030      	str	r0, [r6, #0]
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	f000 fca1 	bl	800ca34 <_sbrk_r>
 800c0f2:	1c43      	adds	r3, r0, #1
 800c0f4:	d103      	bne.n	800c0fe <sbrk_aligned+0x26>
 800c0f6:	f04f 34ff 	mov.w	r4, #4294967295
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
 800c0fe:	1cc4      	adds	r4, r0, #3
 800c100:	f024 0403 	bic.w	r4, r4, #3
 800c104:	42a0      	cmp	r0, r4
 800c106:	d0f8      	beq.n	800c0fa <sbrk_aligned+0x22>
 800c108:	1a21      	subs	r1, r4, r0
 800c10a:	4628      	mov	r0, r5
 800c10c:	f000 fc92 	bl	800ca34 <_sbrk_r>
 800c110:	3001      	adds	r0, #1
 800c112:	d1f2      	bne.n	800c0fa <sbrk_aligned+0x22>
 800c114:	e7ef      	b.n	800c0f6 <sbrk_aligned+0x1e>
 800c116:	bf00      	nop
 800c118:	20000e78 	.word	0x20000e78

0800c11c <_malloc_r>:
 800c11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c120:	1ccd      	adds	r5, r1, #3
 800c122:	f025 0503 	bic.w	r5, r5, #3
 800c126:	3508      	adds	r5, #8
 800c128:	2d0c      	cmp	r5, #12
 800c12a:	bf38      	it	cc
 800c12c:	250c      	movcc	r5, #12
 800c12e:	2d00      	cmp	r5, #0
 800c130:	4606      	mov	r6, r0
 800c132:	db01      	blt.n	800c138 <_malloc_r+0x1c>
 800c134:	42a9      	cmp	r1, r5
 800c136:	d904      	bls.n	800c142 <_malloc_r+0x26>
 800c138:	230c      	movs	r3, #12
 800c13a:	6033      	str	r3, [r6, #0]
 800c13c:	2000      	movs	r0, #0
 800c13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c218 <_malloc_r+0xfc>
 800c146:	f000 f869 	bl	800c21c <__malloc_lock>
 800c14a:	f8d8 3000 	ldr.w	r3, [r8]
 800c14e:	461c      	mov	r4, r3
 800c150:	bb44      	cbnz	r4, 800c1a4 <_malloc_r+0x88>
 800c152:	4629      	mov	r1, r5
 800c154:	4630      	mov	r0, r6
 800c156:	f7ff ffbf 	bl	800c0d8 <sbrk_aligned>
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	4604      	mov	r4, r0
 800c15e:	d158      	bne.n	800c212 <_malloc_r+0xf6>
 800c160:	f8d8 4000 	ldr.w	r4, [r8]
 800c164:	4627      	mov	r7, r4
 800c166:	2f00      	cmp	r7, #0
 800c168:	d143      	bne.n	800c1f2 <_malloc_r+0xd6>
 800c16a:	2c00      	cmp	r4, #0
 800c16c:	d04b      	beq.n	800c206 <_malloc_r+0xea>
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	4639      	mov	r1, r7
 800c172:	4630      	mov	r0, r6
 800c174:	eb04 0903 	add.w	r9, r4, r3
 800c178:	f000 fc5c 	bl	800ca34 <_sbrk_r>
 800c17c:	4581      	cmp	r9, r0
 800c17e:	d142      	bne.n	800c206 <_malloc_r+0xea>
 800c180:	6821      	ldr	r1, [r4, #0]
 800c182:	1a6d      	subs	r5, r5, r1
 800c184:	4629      	mov	r1, r5
 800c186:	4630      	mov	r0, r6
 800c188:	f7ff ffa6 	bl	800c0d8 <sbrk_aligned>
 800c18c:	3001      	adds	r0, #1
 800c18e:	d03a      	beq.n	800c206 <_malloc_r+0xea>
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	442b      	add	r3, r5
 800c194:	6023      	str	r3, [r4, #0]
 800c196:	f8d8 3000 	ldr.w	r3, [r8]
 800c19a:	685a      	ldr	r2, [r3, #4]
 800c19c:	bb62      	cbnz	r2, 800c1f8 <_malloc_r+0xdc>
 800c19e:	f8c8 7000 	str.w	r7, [r8]
 800c1a2:	e00f      	b.n	800c1c4 <_malloc_r+0xa8>
 800c1a4:	6822      	ldr	r2, [r4, #0]
 800c1a6:	1b52      	subs	r2, r2, r5
 800c1a8:	d420      	bmi.n	800c1ec <_malloc_r+0xd0>
 800c1aa:	2a0b      	cmp	r2, #11
 800c1ac:	d917      	bls.n	800c1de <_malloc_r+0xc2>
 800c1ae:	1961      	adds	r1, r4, r5
 800c1b0:	42a3      	cmp	r3, r4
 800c1b2:	6025      	str	r5, [r4, #0]
 800c1b4:	bf18      	it	ne
 800c1b6:	6059      	strne	r1, [r3, #4]
 800c1b8:	6863      	ldr	r3, [r4, #4]
 800c1ba:	bf08      	it	eq
 800c1bc:	f8c8 1000 	streq.w	r1, [r8]
 800c1c0:	5162      	str	r2, [r4, r5]
 800c1c2:	604b      	str	r3, [r1, #4]
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f000 f82f 	bl	800c228 <__malloc_unlock>
 800c1ca:	f104 000b 	add.w	r0, r4, #11
 800c1ce:	1d23      	adds	r3, r4, #4
 800c1d0:	f020 0007 	bic.w	r0, r0, #7
 800c1d4:	1ac2      	subs	r2, r0, r3
 800c1d6:	bf1c      	itt	ne
 800c1d8:	1a1b      	subne	r3, r3, r0
 800c1da:	50a3      	strne	r3, [r4, r2]
 800c1dc:	e7af      	b.n	800c13e <_malloc_r+0x22>
 800c1de:	6862      	ldr	r2, [r4, #4]
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	bf0c      	ite	eq
 800c1e4:	f8c8 2000 	streq.w	r2, [r8]
 800c1e8:	605a      	strne	r2, [r3, #4]
 800c1ea:	e7eb      	b.n	800c1c4 <_malloc_r+0xa8>
 800c1ec:	4623      	mov	r3, r4
 800c1ee:	6864      	ldr	r4, [r4, #4]
 800c1f0:	e7ae      	b.n	800c150 <_malloc_r+0x34>
 800c1f2:	463c      	mov	r4, r7
 800c1f4:	687f      	ldr	r7, [r7, #4]
 800c1f6:	e7b6      	b.n	800c166 <_malloc_r+0x4a>
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	42a3      	cmp	r3, r4
 800c1fe:	d1fb      	bne.n	800c1f8 <_malloc_r+0xdc>
 800c200:	2300      	movs	r3, #0
 800c202:	6053      	str	r3, [r2, #4]
 800c204:	e7de      	b.n	800c1c4 <_malloc_r+0xa8>
 800c206:	230c      	movs	r3, #12
 800c208:	6033      	str	r3, [r6, #0]
 800c20a:	4630      	mov	r0, r6
 800c20c:	f000 f80c 	bl	800c228 <__malloc_unlock>
 800c210:	e794      	b.n	800c13c <_malloc_r+0x20>
 800c212:	6005      	str	r5, [r0, #0]
 800c214:	e7d6      	b.n	800c1c4 <_malloc_r+0xa8>
 800c216:	bf00      	nop
 800c218:	20000e7c 	.word	0x20000e7c

0800c21c <__malloc_lock>:
 800c21c:	4801      	ldr	r0, [pc, #4]	@ (800c224 <__malloc_lock+0x8>)
 800c21e:	f7ff bf00 	b.w	800c022 <__retarget_lock_acquire_recursive>
 800c222:	bf00      	nop
 800c224:	20000e74 	.word	0x20000e74

0800c228 <__malloc_unlock>:
 800c228:	4801      	ldr	r0, [pc, #4]	@ (800c230 <__malloc_unlock+0x8>)
 800c22a:	f7ff befb 	b.w	800c024 <__retarget_lock_release_recursive>
 800c22e:	bf00      	nop
 800c230:	20000e74 	.word	0x20000e74

0800c234 <__sfputc_r>:
 800c234:	6893      	ldr	r3, [r2, #8]
 800c236:	3b01      	subs	r3, #1
 800c238:	2b00      	cmp	r3, #0
 800c23a:	b410      	push	{r4}
 800c23c:	6093      	str	r3, [r2, #8]
 800c23e:	da08      	bge.n	800c252 <__sfputc_r+0x1e>
 800c240:	6994      	ldr	r4, [r2, #24]
 800c242:	42a3      	cmp	r3, r4
 800c244:	db01      	blt.n	800c24a <__sfputc_r+0x16>
 800c246:	290a      	cmp	r1, #10
 800c248:	d103      	bne.n	800c252 <__sfputc_r+0x1e>
 800c24a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c24e:	f7ff bdda 	b.w	800be06 <__swbuf_r>
 800c252:	6813      	ldr	r3, [r2, #0]
 800c254:	1c58      	adds	r0, r3, #1
 800c256:	6010      	str	r0, [r2, #0]
 800c258:	7019      	strb	r1, [r3, #0]
 800c25a:	4608      	mov	r0, r1
 800c25c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <__sfputs_r>:
 800c262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c264:	4606      	mov	r6, r0
 800c266:	460f      	mov	r7, r1
 800c268:	4614      	mov	r4, r2
 800c26a:	18d5      	adds	r5, r2, r3
 800c26c:	42ac      	cmp	r4, r5
 800c26e:	d101      	bne.n	800c274 <__sfputs_r+0x12>
 800c270:	2000      	movs	r0, #0
 800c272:	e007      	b.n	800c284 <__sfputs_r+0x22>
 800c274:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c278:	463a      	mov	r2, r7
 800c27a:	4630      	mov	r0, r6
 800c27c:	f7ff ffda 	bl	800c234 <__sfputc_r>
 800c280:	1c43      	adds	r3, r0, #1
 800c282:	d1f3      	bne.n	800c26c <__sfputs_r+0xa>
 800c284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c288 <_vfiprintf_r>:
 800c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	460d      	mov	r5, r1
 800c28e:	b09d      	sub	sp, #116	@ 0x74
 800c290:	4614      	mov	r4, r2
 800c292:	4698      	mov	r8, r3
 800c294:	4606      	mov	r6, r0
 800c296:	b118      	cbz	r0, 800c2a0 <_vfiprintf_r+0x18>
 800c298:	6a03      	ldr	r3, [r0, #32]
 800c29a:	b90b      	cbnz	r3, 800c2a0 <_vfiprintf_r+0x18>
 800c29c:	f7ff fcca 	bl	800bc34 <__sinit>
 800c2a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2a2:	07d9      	lsls	r1, r3, #31
 800c2a4:	d405      	bmi.n	800c2b2 <_vfiprintf_r+0x2a>
 800c2a6:	89ab      	ldrh	r3, [r5, #12]
 800c2a8:	059a      	lsls	r2, r3, #22
 800c2aa:	d402      	bmi.n	800c2b2 <_vfiprintf_r+0x2a>
 800c2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2ae:	f7ff feb8 	bl	800c022 <__retarget_lock_acquire_recursive>
 800c2b2:	89ab      	ldrh	r3, [r5, #12]
 800c2b4:	071b      	lsls	r3, r3, #28
 800c2b6:	d501      	bpl.n	800c2bc <_vfiprintf_r+0x34>
 800c2b8:	692b      	ldr	r3, [r5, #16]
 800c2ba:	b99b      	cbnz	r3, 800c2e4 <_vfiprintf_r+0x5c>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f7ff fde0 	bl	800be84 <__swsetup_r>
 800c2c4:	b170      	cbz	r0, 800c2e4 <_vfiprintf_r+0x5c>
 800c2c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2c8:	07dc      	lsls	r4, r3, #31
 800c2ca:	d504      	bpl.n	800c2d6 <_vfiprintf_r+0x4e>
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	b01d      	add	sp, #116	@ 0x74
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d6:	89ab      	ldrh	r3, [r5, #12]
 800c2d8:	0598      	lsls	r0, r3, #22
 800c2da:	d4f7      	bmi.n	800c2cc <_vfiprintf_r+0x44>
 800c2dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2de:	f7ff fea1 	bl	800c024 <__retarget_lock_release_recursive>
 800c2e2:	e7f3      	b.n	800c2cc <_vfiprintf_r+0x44>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2e8:	2320      	movs	r3, #32
 800c2ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2f2:	2330      	movs	r3, #48	@ 0x30
 800c2f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c4a4 <_vfiprintf_r+0x21c>
 800c2f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2fc:	f04f 0901 	mov.w	r9, #1
 800c300:	4623      	mov	r3, r4
 800c302:	469a      	mov	sl, r3
 800c304:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c308:	b10a      	cbz	r2, 800c30e <_vfiprintf_r+0x86>
 800c30a:	2a25      	cmp	r2, #37	@ 0x25
 800c30c:	d1f9      	bne.n	800c302 <_vfiprintf_r+0x7a>
 800c30e:	ebba 0b04 	subs.w	fp, sl, r4
 800c312:	d00b      	beq.n	800c32c <_vfiprintf_r+0xa4>
 800c314:	465b      	mov	r3, fp
 800c316:	4622      	mov	r2, r4
 800c318:	4629      	mov	r1, r5
 800c31a:	4630      	mov	r0, r6
 800c31c:	f7ff ffa1 	bl	800c262 <__sfputs_r>
 800c320:	3001      	adds	r0, #1
 800c322:	f000 80a7 	beq.w	800c474 <_vfiprintf_r+0x1ec>
 800c326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c328:	445a      	add	r2, fp
 800c32a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c32c:	f89a 3000 	ldrb.w	r3, [sl]
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 809f 	beq.w	800c474 <_vfiprintf_r+0x1ec>
 800c336:	2300      	movs	r3, #0
 800c338:	f04f 32ff 	mov.w	r2, #4294967295
 800c33c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c340:	f10a 0a01 	add.w	sl, sl, #1
 800c344:	9304      	str	r3, [sp, #16]
 800c346:	9307      	str	r3, [sp, #28]
 800c348:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c34c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c34e:	4654      	mov	r4, sl
 800c350:	2205      	movs	r2, #5
 800c352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c356:	4853      	ldr	r0, [pc, #332]	@ (800c4a4 <_vfiprintf_r+0x21c>)
 800c358:	f7f3 ff62 	bl	8000220 <memchr>
 800c35c:	9a04      	ldr	r2, [sp, #16]
 800c35e:	b9d8      	cbnz	r0, 800c398 <_vfiprintf_r+0x110>
 800c360:	06d1      	lsls	r1, r2, #27
 800c362:	bf44      	itt	mi
 800c364:	2320      	movmi	r3, #32
 800c366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c36a:	0713      	lsls	r3, r2, #28
 800c36c:	bf44      	itt	mi
 800c36e:	232b      	movmi	r3, #43	@ 0x2b
 800c370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c374:	f89a 3000 	ldrb.w	r3, [sl]
 800c378:	2b2a      	cmp	r3, #42	@ 0x2a
 800c37a:	d015      	beq.n	800c3a8 <_vfiprintf_r+0x120>
 800c37c:	9a07      	ldr	r2, [sp, #28]
 800c37e:	4654      	mov	r4, sl
 800c380:	2000      	movs	r0, #0
 800c382:	f04f 0c0a 	mov.w	ip, #10
 800c386:	4621      	mov	r1, r4
 800c388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c38c:	3b30      	subs	r3, #48	@ 0x30
 800c38e:	2b09      	cmp	r3, #9
 800c390:	d94b      	bls.n	800c42a <_vfiprintf_r+0x1a2>
 800c392:	b1b0      	cbz	r0, 800c3c2 <_vfiprintf_r+0x13a>
 800c394:	9207      	str	r2, [sp, #28]
 800c396:	e014      	b.n	800c3c2 <_vfiprintf_r+0x13a>
 800c398:	eba0 0308 	sub.w	r3, r0, r8
 800c39c:	fa09 f303 	lsl.w	r3, r9, r3
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	46a2      	mov	sl, r4
 800c3a6:	e7d2      	b.n	800c34e <_vfiprintf_r+0xc6>
 800c3a8:	9b03      	ldr	r3, [sp, #12]
 800c3aa:	1d19      	adds	r1, r3, #4
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	9103      	str	r1, [sp, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	bfbb      	ittet	lt
 800c3b4:	425b      	neglt	r3, r3
 800c3b6:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ba:	9307      	strge	r3, [sp, #28]
 800c3bc:	9307      	strlt	r3, [sp, #28]
 800c3be:	bfb8      	it	lt
 800c3c0:	9204      	strlt	r2, [sp, #16]
 800c3c2:	7823      	ldrb	r3, [r4, #0]
 800c3c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3c6:	d10a      	bne.n	800c3de <_vfiprintf_r+0x156>
 800c3c8:	7863      	ldrb	r3, [r4, #1]
 800c3ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3cc:	d132      	bne.n	800c434 <_vfiprintf_r+0x1ac>
 800c3ce:	9b03      	ldr	r3, [sp, #12]
 800c3d0:	1d1a      	adds	r2, r3, #4
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	9203      	str	r2, [sp, #12]
 800c3d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3da:	3402      	adds	r4, #2
 800c3dc:	9305      	str	r3, [sp, #20]
 800c3de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c4b4 <_vfiprintf_r+0x22c>
 800c3e2:	7821      	ldrb	r1, [r4, #0]
 800c3e4:	2203      	movs	r2, #3
 800c3e6:	4650      	mov	r0, sl
 800c3e8:	f7f3 ff1a 	bl	8000220 <memchr>
 800c3ec:	b138      	cbz	r0, 800c3fe <_vfiprintf_r+0x176>
 800c3ee:	9b04      	ldr	r3, [sp, #16]
 800c3f0:	eba0 000a 	sub.w	r0, r0, sl
 800c3f4:	2240      	movs	r2, #64	@ 0x40
 800c3f6:	4082      	lsls	r2, r0
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	3401      	adds	r4, #1
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c402:	4829      	ldr	r0, [pc, #164]	@ (800c4a8 <_vfiprintf_r+0x220>)
 800c404:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c408:	2206      	movs	r2, #6
 800c40a:	f7f3 ff09 	bl	8000220 <memchr>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d03f      	beq.n	800c492 <_vfiprintf_r+0x20a>
 800c412:	4b26      	ldr	r3, [pc, #152]	@ (800c4ac <_vfiprintf_r+0x224>)
 800c414:	bb1b      	cbnz	r3, 800c45e <_vfiprintf_r+0x1d6>
 800c416:	9b03      	ldr	r3, [sp, #12]
 800c418:	3307      	adds	r3, #7
 800c41a:	f023 0307 	bic.w	r3, r3, #7
 800c41e:	3308      	adds	r3, #8
 800c420:	9303      	str	r3, [sp, #12]
 800c422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c424:	443b      	add	r3, r7
 800c426:	9309      	str	r3, [sp, #36]	@ 0x24
 800c428:	e76a      	b.n	800c300 <_vfiprintf_r+0x78>
 800c42a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c42e:	460c      	mov	r4, r1
 800c430:	2001      	movs	r0, #1
 800c432:	e7a8      	b.n	800c386 <_vfiprintf_r+0xfe>
 800c434:	2300      	movs	r3, #0
 800c436:	3401      	adds	r4, #1
 800c438:	9305      	str	r3, [sp, #20]
 800c43a:	4619      	mov	r1, r3
 800c43c:	f04f 0c0a 	mov.w	ip, #10
 800c440:	4620      	mov	r0, r4
 800c442:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c446:	3a30      	subs	r2, #48	@ 0x30
 800c448:	2a09      	cmp	r2, #9
 800c44a:	d903      	bls.n	800c454 <_vfiprintf_r+0x1cc>
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d0c6      	beq.n	800c3de <_vfiprintf_r+0x156>
 800c450:	9105      	str	r1, [sp, #20]
 800c452:	e7c4      	b.n	800c3de <_vfiprintf_r+0x156>
 800c454:	fb0c 2101 	mla	r1, ip, r1, r2
 800c458:	4604      	mov	r4, r0
 800c45a:	2301      	movs	r3, #1
 800c45c:	e7f0      	b.n	800c440 <_vfiprintf_r+0x1b8>
 800c45e:	ab03      	add	r3, sp, #12
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	462a      	mov	r2, r5
 800c464:	4b12      	ldr	r3, [pc, #72]	@ (800c4b0 <_vfiprintf_r+0x228>)
 800c466:	a904      	add	r1, sp, #16
 800c468:	4630      	mov	r0, r6
 800c46a:	f3af 8000 	nop.w
 800c46e:	4607      	mov	r7, r0
 800c470:	1c78      	adds	r0, r7, #1
 800c472:	d1d6      	bne.n	800c422 <_vfiprintf_r+0x19a>
 800c474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c476:	07d9      	lsls	r1, r3, #31
 800c478:	d405      	bmi.n	800c486 <_vfiprintf_r+0x1fe>
 800c47a:	89ab      	ldrh	r3, [r5, #12]
 800c47c:	059a      	lsls	r2, r3, #22
 800c47e:	d402      	bmi.n	800c486 <_vfiprintf_r+0x1fe>
 800c480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c482:	f7ff fdcf 	bl	800c024 <__retarget_lock_release_recursive>
 800c486:	89ab      	ldrh	r3, [r5, #12]
 800c488:	065b      	lsls	r3, r3, #25
 800c48a:	f53f af1f 	bmi.w	800c2cc <_vfiprintf_r+0x44>
 800c48e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c490:	e71e      	b.n	800c2d0 <_vfiprintf_r+0x48>
 800c492:	ab03      	add	r3, sp, #12
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	462a      	mov	r2, r5
 800c498:	4b05      	ldr	r3, [pc, #20]	@ (800c4b0 <_vfiprintf_r+0x228>)
 800c49a:	a904      	add	r1, sp, #16
 800c49c:	4630      	mov	r0, r6
 800c49e:	f000 f879 	bl	800c594 <_printf_i>
 800c4a2:	e7e4      	b.n	800c46e <_vfiprintf_r+0x1e6>
 800c4a4:	0800ccdc 	.word	0x0800ccdc
 800c4a8:	0800cce6 	.word	0x0800cce6
 800c4ac:	00000000 	.word	0x00000000
 800c4b0:	0800c263 	.word	0x0800c263
 800c4b4:	0800cce2 	.word	0x0800cce2

0800c4b8 <_printf_common>:
 800c4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4bc:	4616      	mov	r6, r2
 800c4be:	4698      	mov	r8, r3
 800c4c0:	688a      	ldr	r2, [r1, #8]
 800c4c2:	690b      	ldr	r3, [r1, #16]
 800c4c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	bfb8      	it	lt
 800c4cc:	4613      	movlt	r3, r2
 800c4ce:	6033      	str	r3, [r6, #0]
 800c4d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4d4:	4607      	mov	r7, r0
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	b10a      	cbz	r2, 800c4de <_printf_common+0x26>
 800c4da:	3301      	adds	r3, #1
 800c4dc:	6033      	str	r3, [r6, #0]
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	0699      	lsls	r1, r3, #26
 800c4e2:	bf42      	ittt	mi
 800c4e4:	6833      	ldrmi	r3, [r6, #0]
 800c4e6:	3302      	addmi	r3, #2
 800c4e8:	6033      	strmi	r3, [r6, #0]
 800c4ea:	6825      	ldr	r5, [r4, #0]
 800c4ec:	f015 0506 	ands.w	r5, r5, #6
 800c4f0:	d106      	bne.n	800c500 <_printf_common+0x48>
 800c4f2:	f104 0a19 	add.w	sl, r4, #25
 800c4f6:	68e3      	ldr	r3, [r4, #12]
 800c4f8:	6832      	ldr	r2, [r6, #0]
 800c4fa:	1a9b      	subs	r3, r3, r2
 800c4fc:	42ab      	cmp	r3, r5
 800c4fe:	dc26      	bgt.n	800c54e <_printf_common+0x96>
 800c500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c504:	6822      	ldr	r2, [r4, #0]
 800c506:	3b00      	subs	r3, #0
 800c508:	bf18      	it	ne
 800c50a:	2301      	movne	r3, #1
 800c50c:	0692      	lsls	r2, r2, #26
 800c50e:	d42b      	bmi.n	800c568 <_printf_common+0xb0>
 800c510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c514:	4641      	mov	r1, r8
 800c516:	4638      	mov	r0, r7
 800c518:	47c8      	blx	r9
 800c51a:	3001      	adds	r0, #1
 800c51c:	d01e      	beq.n	800c55c <_printf_common+0xa4>
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	6922      	ldr	r2, [r4, #16]
 800c522:	f003 0306 	and.w	r3, r3, #6
 800c526:	2b04      	cmp	r3, #4
 800c528:	bf02      	ittt	eq
 800c52a:	68e5      	ldreq	r5, [r4, #12]
 800c52c:	6833      	ldreq	r3, [r6, #0]
 800c52e:	1aed      	subeq	r5, r5, r3
 800c530:	68a3      	ldr	r3, [r4, #8]
 800c532:	bf0c      	ite	eq
 800c534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c538:	2500      	movne	r5, #0
 800c53a:	4293      	cmp	r3, r2
 800c53c:	bfc4      	itt	gt
 800c53e:	1a9b      	subgt	r3, r3, r2
 800c540:	18ed      	addgt	r5, r5, r3
 800c542:	2600      	movs	r6, #0
 800c544:	341a      	adds	r4, #26
 800c546:	42b5      	cmp	r5, r6
 800c548:	d11a      	bne.n	800c580 <_printf_common+0xc8>
 800c54a:	2000      	movs	r0, #0
 800c54c:	e008      	b.n	800c560 <_printf_common+0xa8>
 800c54e:	2301      	movs	r3, #1
 800c550:	4652      	mov	r2, sl
 800c552:	4641      	mov	r1, r8
 800c554:	4638      	mov	r0, r7
 800c556:	47c8      	blx	r9
 800c558:	3001      	adds	r0, #1
 800c55a:	d103      	bne.n	800c564 <_printf_common+0xac>
 800c55c:	f04f 30ff 	mov.w	r0, #4294967295
 800c560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c564:	3501      	adds	r5, #1
 800c566:	e7c6      	b.n	800c4f6 <_printf_common+0x3e>
 800c568:	18e1      	adds	r1, r4, r3
 800c56a:	1c5a      	adds	r2, r3, #1
 800c56c:	2030      	movs	r0, #48	@ 0x30
 800c56e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c572:	4422      	add	r2, r4
 800c574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c57c:	3302      	adds	r3, #2
 800c57e:	e7c7      	b.n	800c510 <_printf_common+0x58>
 800c580:	2301      	movs	r3, #1
 800c582:	4622      	mov	r2, r4
 800c584:	4641      	mov	r1, r8
 800c586:	4638      	mov	r0, r7
 800c588:	47c8      	blx	r9
 800c58a:	3001      	adds	r0, #1
 800c58c:	d0e6      	beq.n	800c55c <_printf_common+0xa4>
 800c58e:	3601      	adds	r6, #1
 800c590:	e7d9      	b.n	800c546 <_printf_common+0x8e>
	...

0800c594 <_printf_i>:
 800c594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c598:	7e0f      	ldrb	r7, [r1, #24]
 800c59a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c59c:	2f78      	cmp	r7, #120	@ 0x78
 800c59e:	4691      	mov	r9, r2
 800c5a0:	4680      	mov	r8, r0
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	469a      	mov	sl, r3
 800c5a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5aa:	d807      	bhi.n	800c5bc <_printf_i+0x28>
 800c5ac:	2f62      	cmp	r7, #98	@ 0x62
 800c5ae:	d80a      	bhi.n	800c5c6 <_printf_i+0x32>
 800c5b0:	2f00      	cmp	r7, #0
 800c5b2:	f000 80d2 	beq.w	800c75a <_printf_i+0x1c6>
 800c5b6:	2f58      	cmp	r7, #88	@ 0x58
 800c5b8:	f000 80b9 	beq.w	800c72e <_printf_i+0x19a>
 800c5bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5c4:	e03a      	b.n	800c63c <_printf_i+0xa8>
 800c5c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5ca:	2b15      	cmp	r3, #21
 800c5cc:	d8f6      	bhi.n	800c5bc <_printf_i+0x28>
 800c5ce:	a101      	add	r1, pc, #4	@ (adr r1, 800c5d4 <_printf_i+0x40>)
 800c5d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5d4:	0800c62d 	.word	0x0800c62d
 800c5d8:	0800c641 	.word	0x0800c641
 800c5dc:	0800c5bd 	.word	0x0800c5bd
 800c5e0:	0800c5bd 	.word	0x0800c5bd
 800c5e4:	0800c5bd 	.word	0x0800c5bd
 800c5e8:	0800c5bd 	.word	0x0800c5bd
 800c5ec:	0800c641 	.word	0x0800c641
 800c5f0:	0800c5bd 	.word	0x0800c5bd
 800c5f4:	0800c5bd 	.word	0x0800c5bd
 800c5f8:	0800c5bd 	.word	0x0800c5bd
 800c5fc:	0800c5bd 	.word	0x0800c5bd
 800c600:	0800c741 	.word	0x0800c741
 800c604:	0800c66b 	.word	0x0800c66b
 800c608:	0800c6fb 	.word	0x0800c6fb
 800c60c:	0800c5bd 	.word	0x0800c5bd
 800c610:	0800c5bd 	.word	0x0800c5bd
 800c614:	0800c763 	.word	0x0800c763
 800c618:	0800c5bd 	.word	0x0800c5bd
 800c61c:	0800c66b 	.word	0x0800c66b
 800c620:	0800c5bd 	.word	0x0800c5bd
 800c624:	0800c5bd 	.word	0x0800c5bd
 800c628:	0800c703 	.word	0x0800c703
 800c62c:	6833      	ldr	r3, [r6, #0]
 800c62e:	1d1a      	adds	r2, r3, #4
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	6032      	str	r2, [r6, #0]
 800c634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c63c:	2301      	movs	r3, #1
 800c63e:	e09d      	b.n	800c77c <_printf_i+0x1e8>
 800c640:	6833      	ldr	r3, [r6, #0]
 800c642:	6820      	ldr	r0, [r4, #0]
 800c644:	1d19      	adds	r1, r3, #4
 800c646:	6031      	str	r1, [r6, #0]
 800c648:	0606      	lsls	r6, r0, #24
 800c64a:	d501      	bpl.n	800c650 <_printf_i+0xbc>
 800c64c:	681d      	ldr	r5, [r3, #0]
 800c64e:	e003      	b.n	800c658 <_printf_i+0xc4>
 800c650:	0645      	lsls	r5, r0, #25
 800c652:	d5fb      	bpl.n	800c64c <_printf_i+0xb8>
 800c654:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c658:	2d00      	cmp	r5, #0
 800c65a:	da03      	bge.n	800c664 <_printf_i+0xd0>
 800c65c:	232d      	movs	r3, #45	@ 0x2d
 800c65e:	426d      	negs	r5, r5
 800c660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c664:	4859      	ldr	r0, [pc, #356]	@ (800c7cc <_printf_i+0x238>)
 800c666:	230a      	movs	r3, #10
 800c668:	e011      	b.n	800c68e <_printf_i+0xfa>
 800c66a:	6821      	ldr	r1, [r4, #0]
 800c66c:	6833      	ldr	r3, [r6, #0]
 800c66e:	0608      	lsls	r0, r1, #24
 800c670:	f853 5b04 	ldr.w	r5, [r3], #4
 800c674:	d402      	bmi.n	800c67c <_printf_i+0xe8>
 800c676:	0649      	lsls	r1, r1, #25
 800c678:	bf48      	it	mi
 800c67a:	b2ad      	uxthmi	r5, r5
 800c67c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c67e:	4853      	ldr	r0, [pc, #332]	@ (800c7cc <_printf_i+0x238>)
 800c680:	6033      	str	r3, [r6, #0]
 800c682:	bf14      	ite	ne
 800c684:	230a      	movne	r3, #10
 800c686:	2308      	moveq	r3, #8
 800c688:	2100      	movs	r1, #0
 800c68a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c68e:	6866      	ldr	r6, [r4, #4]
 800c690:	60a6      	str	r6, [r4, #8]
 800c692:	2e00      	cmp	r6, #0
 800c694:	bfa2      	ittt	ge
 800c696:	6821      	ldrge	r1, [r4, #0]
 800c698:	f021 0104 	bicge.w	r1, r1, #4
 800c69c:	6021      	strge	r1, [r4, #0]
 800c69e:	b90d      	cbnz	r5, 800c6a4 <_printf_i+0x110>
 800c6a0:	2e00      	cmp	r6, #0
 800c6a2:	d04b      	beq.n	800c73c <_printf_i+0x1a8>
 800c6a4:	4616      	mov	r6, r2
 800c6a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6aa:	fb03 5711 	mls	r7, r3, r1, r5
 800c6ae:	5dc7      	ldrb	r7, [r0, r7]
 800c6b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6b4:	462f      	mov	r7, r5
 800c6b6:	42bb      	cmp	r3, r7
 800c6b8:	460d      	mov	r5, r1
 800c6ba:	d9f4      	bls.n	800c6a6 <_printf_i+0x112>
 800c6bc:	2b08      	cmp	r3, #8
 800c6be:	d10b      	bne.n	800c6d8 <_printf_i+0x144>
 800c6c0:	6823      	ldr	r3, [r4, #0]
 800c6c2:	07df      	lsls	r7, r3, #31
 800c6c4:	d508      	bpl.n	800c6d8 <_printf_i+0x144>
 800c6c6:	6923      	ldr	r3, [r4, #16]
 800c6c8:	6861      	ldr	r1, [r4, #4]
 800c6ca:	4299      	cmp	r1, r3
 800c6cc:	bfde      	ittt	le
 800c6ce:	2330      	movle	r3, #48	@ 0x30
 800c6d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6d8:	1b92      	subs	r2, r2, r6
 800c6da:	6122      	str	r2, [r4, #16]
 800c6dc:	f8cd a000 	str.w	sl, [sp]
 800c6e0:	464b      	mov	r3, r9
 800c6e2:	aa03      	add	r2, sp, #12
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	f7ff fee6 	bl	800c4b8 <_printf_common>
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	d14a      	bne.n	800c786 <_printf_i+0x1f2>
 800c6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f4:	b004      	add	sp, #16
 800c6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	f043 0320 	orr.w	r3, r3, #32
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	4833      	ldr	r0, [pc, #204]	@ (800c7d0 <_printf_i+0x23c>)
 800c704:	2778      	movs	r7, #120	@ 0x78
 800c706:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	6831      	ldr	r1, [r6, #0]
 800c70e:	061f      	lsls	r7, r3, #24
 800c710:	f851 5b04 	ldr.w	r5, [r1], #4
 800c714:	d402      	bmi.n	800c71c <_printf_i+0x188>
 800c716:	065f      	lsls	r7, r3, #25
 800c718:	bf48      	it	mi
 800c71a:	b2ad      	uxthmi	r5, r5
 800c71c:	6031      	str	r1, [r6, #0]
 800c71e:	07d9      	lsls	r1, r3, #31
 800c720:	bf44      	itt	mi
 800c722:	f043 0320 	orrmi.w	r3, r3, #32
 800c726:	6023      	strmi	r3, [r4, #0]
 800c728:	b11d      	cbz	r5, 800c732 <_printf_i+0x19e>
 800c72a:	2310      	movs	r3, #16
 800c72c:	e7ac      	b.n	800c688 <_printf_i+0xf4>
 800c72e:	4827      	ldr	r0, [pc, #156]	@ (800c7cc <_printf_i+0x238>)
 800c730:	e7e9      	b.n	800c706 <_printf_i+0x172>
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	f023 0320 	bic.w	r3, r3, #32
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	e7f6      	b.n	800c72a <_printf_i+0x196>
 800c73c:	4616      	mov	r6, r2
 800c73e:	e7bd      	b.n	800c6bc <_printf_i+0x128>
 800c740:	6833      	ldr	r3, [r6, #0]
 800c742:	6825      	ldr	r5, [r4, #0]
 800c744:	6961      	ldr	r1, [r4, #20]
 800c746:	1d18      	adds	r0, r3, #4
 800c748:	6030      	str	r0, [r6, #0]
 800c74a:	062e      	lsls	r6, r5, #24
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	d501      	bpl.n	800c754 <_printf_i+0x1c0>
 800c750:	6019      	str	r1, [r3, #0]
 800c752:	e002      	b.n	800c75a <_printf_i+0x1c6>
 800c754:	0668      	lsls	r0, r5, #25
 800c756:	d5fb      	bpl.n	800c750 <_printf_i+0x1bc>
 800c758:	8019      	strh	r1, [r3, #0]
 800c75a:	2300      	movs	r3, #0
 800c75c:	6123      	str	r3, [r4, #16]
 800c75e:	4616      	mov	r6, r2
 800c760:	e7bc      	b.n	800c6dc <_printf_i+0x148>
 800c762:	6833      	ldr	r3, [r6, #0]
 800c764:	1d1a      	adds	r2, r3, #4
 800c766:	6032      	str	r2, [r6, #0]
 800c768:	681e      	ldr	r6, [r3, #0]
 800c76a:	6862      	ldr	r2, [r4, #4]
 800c76c:	2100      	movs	r1, #0
 800c76e:	4630      	mov	r0, r6
 800c770:	f7f3 fd56 	bl	8000220 <memchr>
 800c774:	b108      	cbz	r0, 800c77a <_printf_i+0x1e6>
 800c776:	1b80      	subs	r0, r0, r6
 800c778:	6060      	str	r0, [r4, #4]
 800c77a:	6863      	ldr	r3, [r4, #4]
 800c77c:	6123      	str	r3, [r4, #16]
 800c77e:	2300      	movs	r3, #0
 800c780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c784:	e7aa      	b.n	800c6dc <_printf_i+0x148>
 800c786:	6923      	ldr	r3, [r4, #16]
 800c788:	4632      	mov	r2, r6
 800c78a:	4649      	mov	r1, r9
 800c78c:	4640      	mov	r0, r8
 800c78e:	47d0      	blx	sl
 800c790:	3001      	adds	r0, #1
 800c792:	d0ad      	beq.n	800c6f0 <_printf_i+0x15c>
 800c794:	6823      	ldr	r3, [r4, #0]
 800c796:	079b      	lsls	r3, r3, #30
 800c798:	d413      	bmi.n	800c7c2 <_printf_i+0x22e>
 800c79a:	68e0      	ldr	r0, [r4, #12]
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	4298      	cmp	r0, r3
 800c7a0:	bfb8      	it	lt
 800c7a2:	4618      	movlt	r0, r3
 800c7a4:	e7a6      	b.n	800c6f4 <_printf_i+0x160>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	4632      	mov	r2, r6
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	47d0      	blx	sl
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	d09d      	beq.n	800c6f0 <_printf_i+0x15c>
 800c7b4:	3501      	adds	r5, #1
 800c7b6:	68e3      	ldr	r3, [r4, #12]
 800c7b8:	9903      	ldr	r1, [sp, #12]
 800c7ba:	1a5b      	subs	r3, r3, r1
 800c7bc:	42ab      	cmp	r3, r5
 800c7be:	dcf2      	bgt.n	800c7a6 <_printf_i+0x212>
 800c7c0:	e7eb      	b.n	800c79a <_printf_i+0x206>
 800c7c2:	2500      	movs	r5, #0
 800c7c4:	f104 0619 	add.w	r6, r4, #25
 800c7c8:	e7f5      	b.n	800c7b6 <_printf_i+0x222>
 800c7ca:	bf00      	nop
 800c7cc:	0800cced 	.word	0x0800cced
 800c7d0:	0800ccfe 	.word	0x0800ccfe

0800c7d4 <__sflush_r>:
 800c7d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7dc:	0716      	lsls	r6, r2, #28
 800c7de:	4605      	mov	r5, r0
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	d454      	bmi.n	800c88e <__sflush_r+0xba>
 800c7e4:	684b      	ldr	r3, [r1, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	dc02      	bgt.n	800c7f0 <__sflush_r+0x1c>
 800c7ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dd48      	ble.n	800c882 <__sflush_r+0xae>
 800c7f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7f2:	2e00      	cmp	r6, #0
 800c7f4:	d045      	beq.n	800c882 <__sflush_r+0xae>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c7fc:	682f      	ldr	r7, [r5, #0]
 800c7fe:	6a21      	ldr	r1, [r4, #32]
 800c800:	602b      	str	r3, [r5, #0]
 800c802:	d030      	beq.n	800c866 <__sflush_r+0x92>
 800c804:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	0759      	lsls	r1, r3, #29
 800c80a:	d505      	bpl.n	800c818 <__sflush_r+0x44>
 800c80c:	6863      	ldr	r3, [r4, #4]
 800c80e:	1ad2      	subs	r2, r2, r3
 800c810:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c812:	b10b      	cbz	r3, 800c818 <__sflush_r+0x44>
 800c814:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c816:	1ad2      	subs	r2, r2, r3
 800c818:	2300      	movs	r3, #0
 800c81a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c81c:	6a21      	ldr	r1, [r4, #32]
 800c81e:	4628      	mov	r0, r5
 800c820:	47b0      	blx	r6
 800c822:	1c43      	adds	r3, r0, #1
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	d106      	bne.n	800c836 <__sflush_r+0x62>
 800c828:	6829      	ldr	r1, [r5, #0]
 800c82a:	291d      	cmp	r1, #29
 800c82c:	d82b      	bhi.n	800c886 <__sflush_r+0xb2>
 800c82e:	4a2a      	ldr	r2, [pc, #168]	@ (800c8d8 <__sflush_r+0x104>)
 800c830:	410a      	asrs	r2, r1
 800c832:	07d6      	lsls	r6, r2, #31
 800c834:	d427      	bmi.n	800c886 <__sflush_r+0xb2>
 800c836:	2200      	movs	r2, #0
 800c838:	6062      	str	r2, [r4, #4]
 800c83a:	04d9      	lsls	r1, r3, #19
 800c83c:	6922      	ldr	r2, [r4, #16]
 800c83e:	6022      	str	r2, [r4, #0]
 800c840:	d504      	bpl.n	800c84c <__sflush_r+0x78>
 800c842:	1c42      	adds	r2, r0, #1
 800c844:	d101      	bne.n	800c84a <__sflush_r+0x76>
 800c846:	682b      	ldr	r3, [r5, #0]
 800c848:	b903      	cbnz	r3, 800c84c <__sflush_r+0x78>
 800c84a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c84c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c84e:	602f      	str	r7, [r5, #0]
 800c850:	b1b9      	cbz	r1, 800c882 <__sflush_r+0xae>
 800c852:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c856:	4299      	cmp	r1, r3
 800c858:	d002      	beq.n	800c860 <__sflush_r+0x8c>
 800c85a:	4628      	mov	r0, r5
 800c85c:	f7ff fbf2 	bl	800c044 <_free_r>
 800c860:	2300      	movs	r3, #0
 800c862:	6363      	str	r3, [r4, #52]	@ 0x34
 800c864:	e00d      	b.n	800c882 <__sflush_r+0xae>
 800c866:	2301      	movs	r3, #1
 800c868:	4628      	mov	r0, r5
 800c86a:	47b0      	blx	r6
 800c86c:	4602      	mov	r2, r0
 800c86e:	1c50      	adds	r0, r2, #1
 800c870:	d1c9      	bne.n	800c806 <__sflush_r+0x32>
 800c872:	682b      	ldr	r3, [r5, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d0c6      	beq.n	800c806 <__sflush_r+0x32>
 800c878:	2b1d      	cmp	r3, #29
 800c87a:	d001      	beq.n	800c880 <__sflush_r+0xac>
 800c87c:	2b16      	cmp	r3, #22
 800c87e:	d11e      	bne.n	800c8be <__sflush_r+0xea>
 800c880:	602f      	str	r7, [r5, #0]
 800c882:	2000      	movs	r0, #0
 800c884:	e022      	b.n	800c8cc <__sflush_r+0xf8>
 800c886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c88a:	b21b      	sxth	r3, r3
 800c88c:	e01b      	b.n	800c8c6 <__sflush_r+0xf2>
 800c88e:	690f      	ldr	r7, [r1, #16]
 800c890:	2f00      	cmp	r7, #0
 800c892:	d0f6      	beq.n	800c882 <__sflush_r+0xae>
 800c894:	0793      	lsls	r3, r2, #30
 800c896:	680e      	ldr	r6, [r1, #0]
 800c898:	bf08      	it	eq
 800c89a:	694b      	ldreq	r3, [r1, #20]
 800c89c:	600f      	str	r7, [r1, #0]
 800c89e:	bf18      	it	ne
 800c8a0:	2300      	movne	r3, #0
 800c8a2:	eba6 0807 	sub.w	r8, r6, r7
 800c8a6:	608b      	str	r3, [r1, #8]
 800c8a8:	f1b8 0f00 	cmp.w	r8, #0
 800c8ac:	dde9      	ble.n	800c882 <__sflush_r+0xae>
 800c8ae:	6a21      	ldr	r1, [r4, #32]
 800c8b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c8b2:	4643      	mov	r3, r8
 800c8b4:	463a      	mov	r2, r7
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	47b0      	blx	r6
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	dc08      	bgt.n	800c8d0 <__sflush_r+0xfc>
 800c8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8c6:	81a3      	strh	r3, [r4, #12]
 800c8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d0:	4407      	add	r7, r0
 800c8d2:	eba8 0800 	sub.w	r8, r8, r0
 800c8d6:	e7e7      	b.n	800c8a8 <__sflush_r+0xd4>
 800c8d8:	dfbffffe 	.word	0xdfbffffe

0800c8dc <_fflush_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	690b      	ldr	r3, [r1, #16]
 800c8e0:	4605      	mov	r5, r0
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	b913      	cbnz	r3, 800c8ec <_fflush_r+0x10>
 800c8e6:	2500      	movs	r5, #0
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	bd38      	pop	{r3, r4, r5, pc}
 800c8ec:	b118      	cbz	r0, 800c8f6 <_fflush_r+0x1a>
 800c8ee:	6a03      	ldr	r3, [r0, #32]
 800c8f0:	b90b      	cbnz	r3, 800c8f6 <_fflush_r+0x1a>
 800c8f2:	f7ff f99f 	bl	800bc34 <__sinit>
 800c8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d0f3      	beq.n	800c8e6 <_fflush_r+0xa>
 800c8fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c900:	07d0      	lsls	r0, r2, #31
 800c902:	d404      	bmi.n	800c90e <_fflush_r+0x32>
 800c904:	0599      	lsls	r1, r3, #22
 800c906:	d402      	bmi.n	800c90e <_fflush_r+0x32>
 800c908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c90a:	f7ff fb8a 	bl	800c022 <__retarget_lock_acquire_recursive>
 800c90e:	4628      	mov	r0, r5
 800c910:	4621      	mov	r1, r4
 800c912:	f7ff ff5f 	bl	800c7d4 <__sflush_r>
 800c916:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c918:	07da      	lsls	r2, r3, #31
 800c91a:	4605      	mov	r5, r0
 800c91c:	d4e4      	bmi.n	800c8e8 <_fflush_r+0xc>
 800c91e:	89a3      	ldrh	r3, [r4, #12]
 800c920:	059b      	lsls	r3, r3, #22
 800c922:	d4e1      	bmi.n	800c8e8 <_fflush_r+0xc>
 800c924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c926:	f7ff fb7d 	bl	800c024 <__retarget_lock_release_recursive>
 800c92a:	e7dd      	b.n	800c8e8 <_fflush_r+0xc>

0800c92c <__swhatbuf_r>:
 800c92c:	b570      	push	{r4, r5, r6, lr}
 800c92e:	460c      	mov	r4, r1
 800c930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c934:	2900      	cmp	r1, #0
 800c936:	b096      	sub	sp, #88	@ 0x58
 800c938:	4615      	mov	r5, r2
 800c93a:	461e      	mov	r6, r3
 800c93c:	da0d      	bge.n	800c95a <__swhatbuf_r+0x2e>
 800c93e:	89a3      	ldrh	r3, [r4, #12]
 800c940:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c944:	f04f 0100 	mov.w	r1, #0
 800c948:	bf14      	ite	ne
 800c94a:	2340      	movne	r3, #64	@ 0x40
 800c94c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c950:	2000      	movs	r0, #0
 800c952:	6031      	str	r1, [r6, #0]
 800c954:	602b      	str	r3, [r5, #0]
 800c956:	b016      	add	sp, #88	@ 0x58
 800c958:	bd70      	pop	{r4, r5, r6, pc}
 800c95a:	466a      	mov	r2, sp
 800c95c:	f000 f848 	bl	800c9f0 <_fstat_r>
 800c960:	2800      	cmp	r0, #0
 800c962:	dbec      	blt.n	800c93e <__swhatbuf_r+0x12>
 800c964:	9901      	ldr	r1, [sp, #4]
 800c966:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c96a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c96e:	4259      	negs	r1, r3
 800c970:	4159      	adcs	r1, r3
 800c972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c976:	e7eb      	b.n	800c950 <__swhatbuf_r+0x24>

0800c978 <__smakebuf_r>:
 800c978:	898b      	ldrh	r3, [r1, #12]
 800c97a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c97c:	079d      	lsls	r5, r3, #30
 800c97e:	4606      	mov	r6, r0
 800c980:	460c      	mov	r4, r1
 800c982:	d507      	bpl.n	800c994 <__smakebuf_r+0x1c>
 800c984:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c988:	6023      	str	r3, [r4, #0]
 800c98a:	6123      	str	r3, [r4, #16]
 800c98c:	2301      	movs	r3, #1
 800c98e:	6163      	str	r3, [r4, #20]
 800c990:	b003      	add	sp, #12
 800c992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c994:	ab01      	add	r3, sp, #4
 800c996:	466a      	mov	r2, sp
 800c998:	f7ff ffc8 	bl	800c92c <__swhatbuf_r>
 800c99c:	9f00      	ldr	r7, [sp, #0]
 800c99e:	4605      	mov	r5, r0
 800c9a0:	4639      	mov	r1, r7
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f7ff fbba 	bl	800c11c <_malloc_r>
 800c9a8:	b948      	cbnz	r0, 800c9be <__smakebuf_r+0x46>
 800c9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ae:	059a      	lsls	r2, r3, #22
 800c9b0:	d4ee      	bmi.n	800c990 <__smakebuf_r+0x18>
 800c9b2:	f023 0303 	bic.w	r3, r3, #3
 800c9b6:	f043 0302 	orr.w	r3, r3, #2
 800c9ba:	81a3      	strh	r3, [r4, #12]
 800c9bc:	e7e2      	b.n	800c984 <__smakebuf_r+0xc>
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	6020      	str	r0, [r4, #0]
 800c9c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9c6:	81a3      	strh	r3, [r4, #12]
 800c9c8:	9b01      	ldr	r3, [sp, #4]
 800c9ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c9ce:	b15b      	cbz	r3, 800c9e8 <__smakebuf_r+0x70>
 800c9d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f000 f81d 	bl	800ca14 <_isatty_r>
 800c9da:	b128      	cbz	r0, 800c9e8 <__smakebuf_r+0x70>
 800c9dc:	89a3      	ldrh	r3, [r4, #12]
 800c9de:	f023 0303 	bic.w	r3, r3, #3
 800c9e2:	f043 0301 	orr.w	r3, r3, #1
 800c9e6:	81a3      	strh	r3, [r4, #12]
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	431d      	orrs	r5, r3
 800c9ec:	81a5      	strh	r5, [r4, #12]
 800c9ee:	e7cf      	b.n	800c990 <__smakebuf_r+0x18>

0800c9f0 <_fstat_r>:
 800c9f0:	b538      	push	{r3, r4, r5, lr}
 800c9f2:	4d07      	ldr	r5, [pc, #28]	@ (800ca10 <_fstat_r+0x20>)
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	4608      	mov	r0, r1
 800c9fa:	4611      	mov	r1, r2
 800c9fc:	602b      	str	r3, [r5, #0]
 800c9fe:	f7f4 f9ea 	bl	8000dd6 <_fstat>
 800ca02:	1c43      	adds	r3, r0, #1
 800ca04:	d102      	bne.n	800ca0c <_fstat_r+0x1c>
 800ca06:	682b      	ldr	r3, [r5, #0]
 800ca08:	b103      	cbz	r3, 800ca0c <_fstat_r+0x1c>
 800ca0a:	6023      	str	r3, [r4, #0]
 800ca0c:	bd38      	pop	{r3, r4, r5, pc}
 800ca0e:	bf00      	nop
 800ca10:	20000e70 	.word	0x20000e70

0800ca14 <_isatty_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4d06      	ldr	r5, [pc, #24]	@ (800ca30 <_isatty_r+0x1c>)
 800ca18:	2300      	movs	r3, #0
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	4608      	mov	r0, r1
 800ca1e:	602b      	str	r3, [r5, #0]
 800ca20:	f7f4 f9e9 	bl	8000df6 <_isatty>
 800ca24:	1c43      	adds	r3, r0, #1
 800ca26:	d102      	bne.n	800ca2e <_isatty_r+0x1a>
 800ca28:	682b      	ldr	r3, [r5, #0]
 800ca2a:	b103      	cbz	r3, 800ca2e <_isatty_r+0x1a>
 800ca2c:	6023      	str	r3, [r4, #0]
 800ca2e:	bd38      	pop	{r3, r4, r5, pc}
 800ca30:	20000e70 	.word	0x20000e70

0800ca34 <_sbrk_r>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	4d06      	ldr	r5, [pc, #24]	@ (800ca50 <_sbrk_r+0x1c>)
 800ca38:	2300      	movs	r3, #0
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	4608      	mov	r0, r1
 800ca3e:	602b      	str	r3, [r5, #0]
 800ca40:	f7f4 f9f2 	bl	8000e28 <_sbrk>
 800ca44:	1c43      	adds	r3, r0, #1
 800ca46:	d102      	bne.n	800ca4e <_sbrk_r+0x1a>
 800ca48:	682b      	ldr	r3, [r5, #0]
 800ca4a:	b103      	cbz	r3, 800ca4e <_sbrk_r+0x1a>
 800ca4c:	6023      	str	r3, [r4, #0]
 800ca4e:	bd38      	pop	{r3, r4, r5, pc}
 800ca50:	20000e70 	.word	0x20000e70

0800ca54 <_init>:
 800ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca56:	bf00      	nop
 800ca58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5a:	bc08      	pop	{r3}
 800ca5c:	469e      	mov	lr, r3
 800ca5e:	4770      	bx	lr

0800ca60 <_fini>:
 800ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca62:	bf00      	nop
 800ca64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca66:	bc08      	pop	{r3}
 800ca68:	469e      	mov	lr, r3
 800ca6a:	4770      	bx	lr
