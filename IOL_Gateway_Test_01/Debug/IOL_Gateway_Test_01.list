
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cef4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800d0d4  0800d0d4  0000e0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3c4  0800d3c4  0000f388  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3c4  0800d3c4  0000e3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3cc  0800d3cc  0000f388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3cc  0800d3cc  0000e3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3d0  0800d3d0  0000e3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000388  20000000  0800d3d4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026e4  20000388  0800d75c  0000f388  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a6c  0800d75c  0000fa6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022b9f  00000000  00000000  0000f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000561e  00000000  00000000  00031f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  00037578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001519  00000000  00000000  00039120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247e7  00000000  00000000  0003a639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000253db  00000000  00000000  0005ee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cee82  00000000  00000000  000841fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015307d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000790c  00000000  00000000  001530c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015a9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000388 	.word	0x20000388
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d0bc 	.word	0x0800d0bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000038c 	.word	0x2000038c
 800021c:	0800d0bc 	.word	0x0800d0bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Decode_MC_ReadWrite>:
extern uint8_t device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH];
extern uint8_t ProcessDataIn_cnt;
extern uint8_t IOL_OP_ISDU_OD_Res_cnt;

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	09db      	lsrs	r3, r3, #7
 80005c6:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <Decode_MC_ReadWrite+0x24>
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d002      	beq.n	80005d8 <Decode_MC_ReadWrite+0x28>
 80005d2:	e003      	b.n	80005dc <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e002      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 80005dc:	2358      	movs	r3, #88	@ 0x58
    }
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <Decode_MC_CommunicationChannel>:

static uint8_t Decode_MC_CommunicationChannel (uint8_t Data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d813      	bhi.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
 8000610:	a201      	add	r2, pc, #4	@ (adr r2, 8000618 <Decode_MC_CommunicationChannel+0x2c>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000629 	.word	0x08000629
 800061c:	0800062d 	.word	0x0800062d
 8000620:	08000631 	.word	0x08000631
 8000624:	08000635 	.word	0x08000635
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8000628:	2300      	movs	r3, #0
 800062a:	e005      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 800062c:	2301      	movs	r3, #1
 800062e:	e003      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8000630:	2302      	movs	r3, #2
 8000632:	e001      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8000634:	2303      	movs	r3, #3
 8000636:	e7ff      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
    }
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <Decode_MC_Address>:

static uint8_t Decode_MC_Address (uint8_t Data)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	73fb      	strb	r3, [r7, #15]
    
    return MCdata & 0x1F;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2db      	uxtb	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Decode_CKT_Type>:

static uint8_t Decode_CKT_Type (uint8_t Data)
{
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]
    
    MCdata = Data;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 6) & 0x03;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	099b      	lsrs	r3, r3, #6
 8000680:	b2db      	uxtb	r3, r3
}
 8000682:	4618      	mov	r0, r3
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <Decode_CKT_Checksum>:

static uint8_t Decode_CKT_Checksum (uint8_t Data)
{
 800068e:	b480      	push	{r7}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <Decode_CKS_GetChecksum>:

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80006c0:	2352      	movs	r3, #82	@ 0x52
 80006c2:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	757b      	strb	r3, [r7, #21]

    for (uint8_t i = 0; i < checksumsize; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	75bb      	strb	r3, [r7, #22]
 80006d0:	e009      	b.n	80006e6 <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	4053      	eors	r3, r2
 80006de:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 80006e0:	7dbb      	ldrb	r3, [r7, #22]
 80006e2:	3301      	adds	r3, #1
 80006e4:	75bb      	strb	r3, [r7, #22]
 80006e6:	7dba      	ldrb	r2, [r7, #22]
 80006e8:	7d7b      	ldrb	r3, [r7, #21]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d3f1      	bcc.n	80006d2 <Decode_CKS_GetChecksum+0x1e>
    }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	09db      	lsrs	r3, r3, #7
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4053      	eors	r3, r2
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4053      	eors	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	085b      	lsrs	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4053      	eors	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	099b      	lsrs	r3, r3, #6
 800071c:	b2da      	uxtb	r2, r3
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4053      	eors	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4053      	eors	r3, r2
 8000730:	b2da      	uxtb	r2, r3
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	4053      	eors	r3, r2
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	09db      	lsrs	r3, r3, #7
 8000742:	b2da      	uxtb	r2, r3
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	099b      	lsrs	r3, r3, #6
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4053      	eors	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	b2da      	uxtb	r2, r3
 800075a:	7dfb      	ldrb	r3, [r7, #23]
 800075c:	091b      	lsrs	r3, r3, #4
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4053      	eors	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	089b      	lsrs	r3, r3, #2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4053      	eors	r3, r2
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	085b      	lsrs	r3, r3, #1
 8000784:	b2da      	uxtb	r2, r3
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	4053      	eors	r3, r2
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 8000792:	7d3b      	ldrb	r3, [r7, #20]
 8000794:	015b      	lsls	r3, r3, #5
 8000796:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 8000798:	7cfb      	ldrb	r3, [r7, #19]
 800079a:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 800079c:	b25b      	sxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 80007a2:	7cbb      	ldrb	r3, [r7, #18]
 80007a4:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 80007ac:	7c7b      	ldrb	r3, [r7, #17]
 80007ae:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80007b6:	7c3b      	ldrb	r3, [r7, #16]
 80007b8:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80007c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80007c8:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <OP_CKS_GetChecksum>:

//OP 모드 Event 비트 포함 CKS 생성
uint8_t OP_CKS_GetChecksum (const uint8_t * pData, uint8_t length, uint8_t eventflag)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
 80007e4:	4613      	mov	r3, r2
 80007e6:	70bb      	strb	r3, [r7, #2]
    uint8_t ck8 = 0x52;
 80007e8:	2352      	movs	r3, #82	@ 0x52
 80007ea:	77fb      	strb	r3, [r7, #31]
    uint8_t checksumsize = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	773b      	strb	r3, [r7, #28]
    uint8_t eventbitset = 0x80;
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	76fb      	strb	r3, [r7, #27]

    checksumsize = length;
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	773b      	strb	r3, [r7, #28]

    if (eventflag == 0)
 80007f8:	78bb      	ldrb	r3, [r7, #2]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 8081 	bne.w	8000902 <OP_CKS_GetChecksum+0x12a>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 8000800:	2300      	movs	r3, #0
 8000802:	77bb      	strb	r3, [r7, #30]
 8000804:	e009      	b.n	800081a <OP_CKS_GetChecksum+0x42>
        {
            ck8 ^= *pData++;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	7ffb      	ldrb	r3, [r7, #31]
 8000810:	4053      	eors	r3, r2
 8000812:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 8000814:	7fbb      	ldrb	r3, [r7, #30]
 8000816:	3301      	adds	r3, #1
 8000818:	77bb      	strb	r3, [r7, #30]
 800081a:	7fba      	ldrb	r2, [r7, #30]
 800081c:	7f3b      	ldrb	r3, [r7, #28]
 800081e:	429a      	cmp	r2, r3
 8000820:	d3f1      	bcc.n	8000806 <OP_CKS_GetChecksum+0x2e>
        }
        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8000822:	7ffb      	ldrb	r3, [r7, #31]
 8000824:	09db      	lsrs	r3, r3, #7
 8000826:	b2da      	uxtb	r2, r3
 8000828:	7ffb      	ldrb	r3, [r7, #31]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4053      	eors	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	7ffb      	ldrb	r3, [r7, #31]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4053      	eors	r3, r2
 800083a:	b2da      	uxtb	r2, r3
 800083c:	7ffb      	ldrb	r3, [r7, #31]
 800083e:	085b      	lsrs	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4053      	eors	r3, r2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	74fb      	strb	r3, [r7, #19]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800084c:	7ffb      	ldrb	r3, [r7, #31]
 800084e:	099b      	lsrs	r3, r3, #6
 8000850:	b2da      	uxtb	r2, r3
 8000852:	7ffb      	ldrb	r3, [r7, #31]
 8000854:	091b      	lsrs	r3, r3, #4
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4053      	eors	r3, r2
 800085a:	b2da      	uxtb	r2, r3
 800085c:	7ffb      	ldrb	r3, [r7, #31]
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4053      	eors	r3, r2
 8000864:	b2da      	uxtb	r2, r3
 8000866:	7ffb      	ldrb	r3, [r7, #31]
 8000868:	4053      	eors	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	74bb      	strb	r3, [r7, #18]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8000872:	7ffb      	ldrb	r3, [r7, #31]
 8000874:	09db      	lsrs	r3, r3, #7
 8000876:	b2da      	uxtb	r2, r3
 8000878:	7ffb      	ldrb	r3, [r7, #31]
 800087a:	099b      	lsrs	r3, r3, #6
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4053      	eors	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	747b      	strb	r3, [r7, #17]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8000888:	7ffb      	ldrb	r3, [r7, #31]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	b2da      	uxtb	r2, r3
 800088e:	7ffb      	ldrb	r3, [r7, #31]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4053      	eors	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	743b      	strb	r3, [r7, #16]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800089e:	7ffb      	ldrb	r3, [r7, #31]
 80008a0:	08db      	lsrs	r3, r3, #3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	7ffb      	ldrb	r3, [r7, #31]
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
 80008bc:	4053      	eors	r3, r2
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	73bb      	strb	r3, [r7, #14]
        uint8_t ck6 =   bit5 << 5 |
 80008c6:	7cfb      	ldrb	r3, [r7, #19]
 80008c8:	015b      	lsls	r3, r3, #5
 80008ca:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80008cc:	7cbb      	ldrb	r3, [r7, #18]
 80008ce:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80008d6:	7c7b      	ldrb	r3, [r7, #17]
 80008d8:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80008e0:	7c3b      	ldrb	r3, [r7, #16]
 80008e2:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80008f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 80008fc:	737b      	strb	r3, [r7, #13]
                        bit0;
        
        return ck6;
 80008fe:	7b7b      	ldrb	r3, [r7, #13]
 8000900:	e08b      	b.n	8000a1a <OP_CKS_GetChecksum+0x242>
    }
    else if (eventflag == 1)
 8000902:	78bb      	ldrb	r3, [r7, #2]
 8000904:	2b01      	cmp	r3, #1
 8000906:	f040 8088 	bne.w	8000a1a <OP_CKS_GetChecksum+0x242>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	777b      	strb	r3, [r7, #29]
 800090e:	e009      	b.n	8000924 <OP_CKS_GetChecksum+0x14c>
        {
            ck8 ^= *pData++;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	7ffb      	ldrb	r3, [r7, #31]
 800091a:	4053      	eors	r3, r2
 800091c:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 800091e:	7f7b      	ldrb	r3, [r7, #29]
 8000920:	3301      	adds	r3, #1
 8000922:	777b      	strb	r3, [r7, #29]
 8000924:	7f7a      	ldrb	r2, [r7, #29]
 8000926:	7f3b      	ldrb	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	d3f1      	bcc.n	8000910 <OP_CKS_GetChecksum+0x138>
        }

        ck8 ^= eventbitset;
 800092c:	7ffa      	ldrb	r2, [r7, #31]
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	4053      	eors	r3, r2
 8000932:	77fb      	strb	r3, [r7, #31]

        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8000934:	7ffb      	ldrb	r3, [r7, #31]
 8000936:	09db      	lsrs	r3, r3, #7
 8000938:	b2da      	uxtb	r2, r3
 800093a:	7ffb      	ldrb	r3, [r7, #31]
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4053      	eors	r3, r2
 8000942:	b2da      	uxtb	r2, r3
 8000944:	7ffb      	ldrb	r3, [r7, #31]
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4053      	eors	r3, r2
 800094c:	b2da      	uxtb	r2, r3
 800094e:	7ffb      	ldrb	r3, [r7, #31]
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4053      	eors	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	76bb      	strb	r3, [r7, #26]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800095e:	7ffb      	ldrb	r3, [r7, #31]
 8000960:	099b      	lsrs	r3, r3, #6
 8000962:	b2da      	uxtb	r2, r3
 8000964:	7ffb      	ldrb	r3, [r7, #31]
 8000966:	091b      	lsrs	r3, r3, #4
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4053      	eors	r3, r2
 800096c:	b2da      	uxtb	r2, r3
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4053      	eors	r3, r2
 8000976:	b2da      	uxtb	r2, r3
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	4053      	eors	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	767b      	strb	r3, [r7, #25]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	09db      	lsrs	r3, r3, #7
 8000988:	b2da      	uxtb	r2, r3
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	099b      	lsrs	r3, r3, #6
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4053      	eors	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	763b      	strb	r3, [r7, #24]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 800099a:	7ffb      	ldrb	r3, [r7, #31]
 800099c:	095b      	lsrs	r3, r3, #5
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	7ffb      	ldrb	r3, [r7, #31]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4053      	eors	r3, r2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	75fb      	strb	r3, [r7, #23]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	7ffb      	ldrb	r3, [r7, #31]
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4053      	eors	r3, r2
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	75bb      	strb	r3, [r7, #22]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	4053      	eors	r3, r2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	757b      	strb	r3, [r7, #21]
        uint8_t ck6 =   bit5 << 5 |
 80009d8:	7ebb      	ldrb	r3, [r7, #26]
 80009da:	015b      	lsls	r3, r3, #5
 80009dc:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80009de:	7e7b      	ldrb	r3, [r7, #25]
 80009e0:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80009e8:	7e3b      	ldrb	r3, [r7, #24]
 80009ea:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80009fc:	7dbb      	ldrb	r3, [r7, #22]
 80009fe:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8000a06:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 8000a0e:	753b      	strb	r3, [r7, #20]
                        bit0;
        
        return eventbitset | ck6;
 8000a10:	7efa      	ldrb	r2, [r7, #27]
 8000a12:	7d3b      	ldrb	r3, [r7, #20]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	e7ff      	b.n	8000a1a <OP_CKS_GetChecksum+0x242>
    }
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <IOL_StartUp_Read_MakePacket>:

static uint8_t* IOL_StartUp_Read_MakePacket (uint8_t * pData)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
    
    pData[0] = IOL_Page1_SeqValue[Page1_seq++];
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <IOL_StartUp_Read_MakePacket+0x3c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	b2d1      	uxtb	r1, r2
 8000a3c:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <IOL_StartUp_Read_MakePacket+0x3c>)
 8000a3e:	7011      	strb	r1, [r2, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <IOL_StartUp_Read_MakePacket+0x40>)
 8000a44:	5c9a      	ldrb	r2, [r3, r2]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	701a      	strb	r2, [r3, #0]
    pData[1] = Decode_CKS_GetChecksum(&pData[0], 1);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1c5c      	adds	r4, r3, #1
 8000a4e:	2101      	movs	r1, #1
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fe2f 	bl	80006b4 <Decode_CKS_GetChecksum>
 8000a56:	4603      	mov	r3, r0
 8000a58:	7023      	strb	r3, [r4, #0]
    
    return pData;
 8000a5a:	687b      	ldr	r3, [r7, #4]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	200003a4 	.word	0x200003a4
 8000a68:	20000004 	.word	0x20000004

08000a6c <IOL_StartUp_Write_MakePacket>:

static uint8_t* IOL_StartUp_Write_MakePacket (uint8_t * pData)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
    
    pData[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <IOL_StartUp_Write_MakePacket+0x28>)
 8000a7c:	f7ff fe1a 	bl	80006b4 <Decode_CKS_GetChecksum>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	701a      	strb	r2, [r3, #0]
    
    return pData;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000000 	.word	0x20000000

08000a98 <IOL_State_StartUp>:

static uint8_t IOL_State_StartUp (void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
    uint8_t Page_ChecksumValue = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
    uint8_t Length = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t * pData;

    switch (IOL_M2D_rxpacket.rw)
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <IOL_State_StartUp+0x74>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d008      	beq.n	8000ac0 <IOL_State_StartUp+0x28>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10d      	bne.n	8000ace <IOL_State_StartUp+0x36>
    {
        case IOL_RW_Read :
            //to do
            Length = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	73fb      	strb	r3, [r7, #15]
            pData = IOL_StartUp_Read_MakePacket(uart1_rx_IDLE_buf);
 8000ab6:	4816      	ldr	r0, [pc, #88]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000ab8:	f7ff ffb6 	bl	8000a28 <IOL_StartUp_Read_MakePacket>
 8000abc:	60b8      	str	r0, [r7, #8]
            break;
 8000abe:	e006      	b.n	8000ace <IOL_State_StartUp+0x36>
        case IOL_RW_Write :
            // to do
            Length = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
            pData = IOL_StartUp_Write_MakePacket(uart1_rx_IDLE_buf);
 8000ac4:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000ac6:	f7ff ffd1 	bl	8000a6c <IOL_StartUp_Write_MakePacket>
 8000aca:	60b8      	str	r0, [r7, #8]
            break;
 8000acc:	bf00      	nop
    }

    IOL_ENABLE;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f002 fa9d 	bl	8003014 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) pData, Length) != HAL_OK)
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <IOL_State_StartUp+0x7c>)
 8000ae4:	f005 fd42 	bl	800656c <HAL_UART_Transmit_IT>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <IOL_State_StartUp+0x5a>
    {
        Error_Handler();
 8000aee:	f000 fecc 	bl	800188a <Error_Handler>
    }

    //Master Command to PreOP.
    if (uart1_rx_IDLE_buf[2] == 0x9A)
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	2b9a      	cmp	r3, #154	@ 0x9a
 8000af8:	d102      	bne.n	8000b00 <IOL_State_StartUp+0x68>
    {
        stateIOLseq = IOL_PreOP;
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <IOL_State_StartUp+0x80>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
    }

    return ;
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000f94 	.word	0x20000f94
 8000b10:	20000bc0 	.word	0x20000bc0
 8000b14:	2000109c 	.word	0x2000109c
 8000b18:	20001140 	.word	0x20001140

08000b1c <IOL_State_PreOP_Read_Channel>:

//  OP 모드 Read 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_PreOP_Read_Channel (void)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71bb      	strb	r3, [r7, #6]
    uint8_t IOL_Commchannel_value = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	717b      	strb	r3, [r7, #5]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 

    for (i=0; i < PREOP_DATA_LENGTH; i++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e00e      	b.n	8000b4e <IOL_State_PreOP_Read_Channel+0x32>
    {
        preop_data_arr[i]= IOL_PreOP_Packet[PreOP_seq_cnt][i];
 8000b30:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	79fa      	ldrb	r2, [r7, #7]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4833      	ldr	r0, [pc, #204]	@ (8000c08 <IOL_State_PreOP_Read_Channel+0xec>)
 8000b3c:	00c9      	lsls	r1, r1, #3
 8000b3e:	4401      	add	r1, r0
 8000b40:	440a      	add	r2, r1
 8000b42:	7811      	ldrb	r1, [r2, #0]
 8000b44:	4a31      	ldr	r2, [pc, #196]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b46:	54d1      	strb	r1, [r2, r3]
    for (i=0; i < PREOP_DATA_LENGTH; i++)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b07      	cmp	r3, #7
 8000b52:	d9ed      	bls.n	8000b30 <IOL_State_PreOP_Read_Channel+0x14>
    }

    switch (IOL_M2D_rxpacket.commchannel)
 8000b54:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <IOL_State_PreOP_Read_Channel+0xf4>)
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d837      	bhi.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>
 8000b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b64 <IOL_State_PreOP_Read_Channel+0x48>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000b8b 	.word	0x08000b8b
 8000b6c:	08000ba1 	.word	0x08000ba1
 8000b70:	08000bb7 	.word	0x08000bb7
    {
        case IOL_Channel_Process :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000b74:	79fc      	ldrb	r4, [r7, #7]
 8000b76:	2200      	movs	r2, #0
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4824      	ldr	r0, [pc, #144]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b7c:	f7ff fe2c 	bl	80007d8 <OP_CKS_GetChecksum>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b86:	551a      	strb	r2, [r3, r4]
            break;
 8000b88:	e020      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_Page :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000b8a:	79fc      	ldrb	r4, [r7, #7]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2108      	movs	r1, #8
 8000b90:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b92:	f7ff fe21 	bl	80007d8 <OP_CKS_GetChecksum>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b9c:	551a      	strb	r2, [r3, r4]
            break;
 8000b9e:	e015      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_Diagnosis :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 1);
 8000ba0:	79fc      	ldrb	r4, [r7, #7]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4819      	ldr	r0, [pc, #100]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000ba8:	f7ff fe16 	bl	80007d8 <OP_CKS_GetChecksum>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bb2:	551a      	strb	r2, [r3, r4]
            break;
 8000bb4:	e00a      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_ISDU :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000bb6:	79fc      	ldrb	r4, [r7, #7]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bbe:	f7ff fe0b 	bl	80007d8 <OP_CKS_GetChecksum>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bc8:	551a      	strb	r2, [r3, r4]
            break;
 8000bca:	bf00      	nop
    }

    PreOP_seq_cnt++;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000bd6:	701a      	strb	r2, [r3, #0]

    IOL_ENABLE;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be0:	f002 fa18 	bl	8003014 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, preop_data_arr, 9) != HAL_OK)
 8000be4:	2209      	movs	r2, #9
 8000be6:	4909      	ldr	r1, [pc, #36]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000be8:	480a      	ldr	r0, [pc, #40]	@ (8000c14 <IOL_State_PreOP_Read_Channel+0xf8>)
 8000bea:	f005 fcbf 	bl	800656c <HAL_UART_Transmit_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <IOL_State_PreOP_Read_Channel+0xdc>
    {
        Error_Handler();
 8000bf4:	f000 fe49 	bl	800188a <Error_Handler>
    }

    return ;
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	200003a5 	.word	0x200003a5
 8000c08:	20000014 	.word	0x20000014
 8000c0c:	200003a8 	.word	0x200003a8
 8000c10:	20000f94 	.word	0x20000f94
 8000c14:	2000109c 	.word	0x2000109c

08000c18 <IOL_State_PreOP_Write_Channel>:

//  OP 모드 Write 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_PreOP_Write_Channel (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
    uint8_t IOL_Commchannel_value = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71bb      	strb	r3, [r7, #6]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 

    switch (IOL_M2D_rxpacket.commchannel)
 8000c26:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <IOL_State_PreOP_Write_Channel+0xb8>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d832      	bhi.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>
 8000c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <IOL_State_PreOP_Write_Channel+0x1c>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000c45 	.word	0x08000c45
 8000c38:	08000c59 	.word	0x08000c59
 8000c3c:	08000c6d 	.word	0x08000c6d
 8000c40:	08000c81 	.word	0x08000c81
    {
        case IOL_Channel_Process :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	4822      	ldr	r0, [pc, #136]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c4a:	f7ff fdc5 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c54:	701a      	strb	r2, [r3, #0]
            break;
 8000c56:	e01d      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_Page :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	481d      	ldr	r0, [pc, #116]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c5e:	f7ff fdbb 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c68:	701a      	strb	r2, [r3, #0]
            break;
 8000c6a:	e013      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_Diagnosis :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4818      	ldr	r0, [pc, #96]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c72:	f7ff fdb1 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c7c:	701a      	strb	r2, [r3, #0]
            break;
 8000c7e:	e009      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_ISDU :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2100      	movs	r1, #0
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c86:	f7ff fda7 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c90:	701a      	strb	r2, [r3, #0]
            break;
 8000c92:	bf00      	nop
    }

    //Master Command to OP.
    if(uart1_rx_IDLE_buf[2] == 0x99)
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <IOL_State_PreOP_Write_Channel+0xc0>)
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	2b99      	cmp	r3, #153	@ 0x99
 8000c9a:	d102      	bne.n	8000ca2 <IOL_State_PreOP_Write_Channel+0x8a>
    {
        stateIOLseq = IOL_OP;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <IOL_State_PreOP_Write_Channel+0xc4>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	701a      	strb	r2, [r3, #0]
    }
    
    IOL_ENABLE;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	@ 0x40
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000caa:	f002 f9b3 	bl	8003014 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000cb2:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <IOL_State_PreOP_Write_Channel+0xc8>)
 8000cb4:	f005 fc5a 	bl	800656c <HAL_UART_Transmit_IT>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <IOL_State_PreOP_Write_Channel+0xaa>
    {
        Error_Handler();
 8000cbe:	f000 fde4 	bl	800188a <Error_Handler>
    }
    return ;
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000f94 	.word	0x20000f94
 8000cd4:	200003b4 	.word	0x200003b4
 8000cd8:	20000bc0 	.word	0x20000bc0
 8000cdc:	20001140 	.word	0x20001140
 8000ce0:	2000109c 	.word	0x2000109c

08000ce4 <IOL_State_PreOP_Process>:

static uint8_t IOL_State_PreOP_Process (void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

    switch ( IOL_M2D_rxpacket.rw)
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <IOL_State_PreOP_Process+0x24>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d004      	beq.n	8000cfa <IOL_State_PreOP_Process+0x16>
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d105      	bne.n	8000d00 <IOL_State_PreOP_Process+0x1c>
    {
        case IOL_RW_Read :
            IOL_State_PreOP_Read_Channel();
 8000cf4:	f7ff ff12 	bl	8000b1c <IOL_State_PreOP_Read_Channel>
            break;
 8000cf8:	e002      	b.n	8000d00 <IOL_State_PreOP_Process+0x1c>
        case IOL_RW_Write :
            IOL_State_PreOP_Write_Channel();
 8000cfa:	f7ff ff8d 	bl	8000c18 <IOL_State_PreOP_Write_Channel>
            break;
 8000cfe:	bf00      	nop
    }

    return ;
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000f94 	.word	0x20000f94

08000d0c <IOL_State_OP_Read_Channel>:


//  OP 모드 Read 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_OP_Read_Channel (void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    switch (IOL_M2D_rxpacket.commchannel)
 8000d10:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <IOL_State_OP_Read_Channel+0xd0>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d85c      	bhi.n	8000dd2 <IOL_State_OP_Read_Channel+0xc6>
 8000d18:	a201      	add	r2, pc, #4	@ (adr r2, 8000d20 <IOL_State_OP_Read_Channel+0x14>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000dcd 	.word	0x08000dcd
 8000d24:	08000d31 	.word	0x08000d31
 8000d28:	08000d37 	.word	0x08000d37
 8000d2c:	08000dc7 	.word	0x08000dc7
        case IOL_Channel_Process :
            
            break;

        case IOL_Channel_Page :
            IOL_State_OP_Page_ReadProcess();
 8000d30:	f000 fbec 	bl	800150c <IOL_State_OP_Page_ReadProcess>

            break;
 8000d34:	e04d      	b.n	8000dd2 <IOL_State_OP_Read_Channel+0xc6>

        case IOL_Channel_Diagnosis :
            #if 1 // 이벤트 테스트 중

            if ((ProcessDataIn_cnt >= 40) && (ProcessDataIn_cnt <= 59))
 8000d36:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <IOL_State_OP_Read_Channel+0xd4>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b27      	cmp	r3, #39	@ 0x27
 8000d3c:	d911      	bls.n	8000d62 <IOL_State_OP_Read_Channel+0x56>
 8000d3e:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <IOL_State_OP_Read_Channel+0xd4>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d44:	d80d      	bhi.n	8000d62 <IOL_State_OP_Read_Channel+0x56>
            {
                device_ProcessDataIn_Arr[0] = IOL_OP_EventTest2[IOL_OP_ISDU_OD_Res_cnt];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 8000d46:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <IOL_State_OP_Read_Channel+0xdc>)
 8000d4e:	5c9a      	ldrb	r2, [r3, r2]
 8000d50:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <IOL_State_OP_Read_Channel+0xe0>)
 8000d52:	701a      	strb	r2, [r3, #0]
                // device_ProcessDataIn_Arr[1] = IOL_OP_EventTest[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
                IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 8000d54:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e010      	b.n	8000d84 <IOL_State_OP_Read_Channel+0x78>
            }
            else if (ProcessDataIn_cnt >= 60)
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <IOL_State_OP_Read_Channel+0xd4>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d68:	d90c      	bls.n	8000d84 <IOL_State_OP_Read_Channel+0x78>
            {
                device_ProcessDataIn_Arr[0] = IOL_OP_EventTest3[IOL_OP_ISDU_OD_Res_cnt];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <IOL_State_OP_Read_Channel+0xe4>)
 8000d72:	5c9a      	ldrb	r2, [r3, r2]
 8000d74:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <IOL_State_OP_Read_Channel+0xe0>)
 8000d76:	701a      	strb	r2, [r3, #0]
                // device_ProcessDataIn_Arr[1] = IOL_OP_EventTest[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
                IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d82:	701a      	strb	r2, [r3, #0]
            }

            // if (IOL_OP_ISDU_OD_Res_cnt >= 10)
            if (IOL_OP_ISDU_OD_Res_cnt >= 4)
 8000d84:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d902      	bls.n	8000d92 <IOL_State_OP_Read_Channel+0x86>
            {
                // isdudata.isdu_od_writereq_flag = 0;
                IOL_OP_ISDU_OD_Res_cnt = 0;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
            }

            device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2106      	movs	r1, #6
 8000d96:	4815      	ldr	r0, [pc, #84]	@ (8000dec <IOL_State_OP_Read_Channel+0xe0>)
 8000d98:	f7ff fd1e 	bl	80007d8 <OP_CKS_GetChecksum>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <IOL_State_OP_Read_Channel+0xe0>)
 8000da2:	719a      	strb	r2, [r3, #6]
            IOL_ENABLE;
 8000da4:	2201      	movs	r2, #1
 8000da6:	2140      	movs	r1, #64	@ 0x40
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dac:	f002 f932 	bl	8003014 <HAL_GPIO_WritePin>
    
            if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataIn_Arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 8000db0:	2207      	movs	r2, #7
 8000db2:	490e      	ldr	r1, [pc, #56]	@ (8000dec <IOL_State_OP_Read_Channel+0xe0>)
 8000db4:	480f      	ldr	r0, [pc, #60]	@ (8000df4 <IOL_State_OP_Read_Channel+0xe8>)
 8000db6:	f005 fbd9 	bl	800656c <HAL_UART_Transmit_IT>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d007      	beq.n	8000dd0 <IOL_State_OP_Read_Channel+0xc4>
            {
                Error_Handler();
 8000dc0:	f000 fd63 	bl	800188a <Error_Handler>
            {
                Error_Handler();
            }
            #endif

            break;
 8000dc4:	e004      	b.n	8000dd0 <IOL_State_OP_Read_Channel+0xc4>

        case IOL_Channel_ISDU :
            IOL_State_OP_ISDU_ReadProcess();
 8000dc6:	f000 fa55 	bl	8001274 <IOL_State_OP_ISDU_ReadProcess>

            break;
 8000dca:	e002      	b.n	8000dd2 <IOL_State_OP_Read_Channel+0xc6>
            break;
 8000dcc:	bf00      	nop
 8000dce:	e000      	b.n	8000dd2 <IOL_State_OP_Read_Channel+0xc6>
            break;
 8000dd0:	bf00      	nop
    }

    return ;
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000f94 	.word	0x20000f94
 8000de0:	200003e8 	.word	0x200003e8
 8000de4:	200003be 	.word	0x200003be
 8000de8:	20000054 	.word	0x20000054
 8000dec:	20000fa4 	.word	0x20000fa4
 8000df0:	20000058 	.word	0x20000058
 8000df4:	2000109c 	.word	0x2000109c

08000df8 <IOL_State_OP_Write_Channel>:

//  OP 모드 Write 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_OP_Write_Channel (void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
    switch (IOL_M2D_rxpacket.commchannel)
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <IOL_State_OP_Write_Channel+0x7c>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d833      	bhi.n	8000e6c <IOL_State_OP_Write_Channel+0x74>
 8000e04:	a201      	add	r2, pc, #4	@ (adr r2, 8000e0c <IOL_State_OP_Write_Channel+0x14>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e6b 	.word	0x08000e6b
 8000e10:	08000e1d 	.word	0x08000e1d
 8000e14:	08000e23 	.word	0x08000e23
 8000e18:	08000e5f 	.word	0x08000e5f
            
            
            break;

        case IOL_Channel_Page :
            IOL_State_OP_Page_WriteProcess();
 8000e1c:	f000 fbc0 	bl	80015a0 <IOL_State_OP_Page_WriteProcess>

            break;
 8000e20:	e024      	b.n	8000e6c <IOL_State_OP_Write_Channel+0x74>

        case IOL_Channel_Diagnosis :
            #if 1 // event 테스트 중
            device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_Arr[0], (IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1), 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2104      	movs	r1, #4
 8000e26:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <IOL_State_OP_Write_Channel+0x80>)
 8000e28:	f7ff fcd6 	bl	80007d8 <OP_CKS_GetChecksum>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <IOL_State_OP_Write_Channel+0x80>)
 8000e32:	711a      	strb	r2, [r3, #4]
            IOL_ENABLE;
 8000e34:	2201      	movs	r2, #1
 8000e36:	2140      	movs	r1, #64	@ 0x40
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3c:	f002 f8ea 	bl	8003014 <HAL_GPIO_WritePin>
    
            if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_Arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 8000e40:	2205      	movs	r2, #5
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <IOL_State_OP_Write_Channel+0x80>)
 8000e44:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <IOL_State_OP_Write_Channel+0x84>)
 8000e46:	f005 fb91 	bl	800656c <HAL_UART_Transmit_IT>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <IOL_State_OP_Write_Channel+0x5c>
            {
                Error_Handler();
 8000e50:	f000 fd1b 	bl	800188a <Error_Handler>
            }
            DEBUG_GPIO_TOGGLE;
 8000e54:	2101      	movs	r1, #1
 8000e56:	480a      	ldr	r0, [pc, #40]	@ (8000e80 <IOL_State_OP_Write_Channel+0x88>)
 8000e58:	f002 f8f4 	bl	8003044 <HAL_GPIO_TogglePin>
            #endif
            break;
 8000e5c:	e006      	b.n	8000e6c <IOL_State_OP_Write_Channel+0x74>

        case IOL_Channel_ISDU :
            IOL_Get_ISDU_WR_ODArr(uart1_rx_IDLE_buf);
 8000e5e:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <IOL_State_OP_Write_Channel+0x8c>)
 8000e60:	f000 f92e 	bl	80010c0 <IOL_Get_ISDU_WR_ODArr>
            IOL_State_OP_ISDU_WriteProcess();
 8000e64:	f000 faec 	bl	8001440 <IOL_State_OP_ISDU_WriteProcess>

            break;
 8000e68:	e000      	b.n	8000e6c <IOL_State_OP_Write_Channel+0x74>
            break;
 8000e6a:	bf00      	nop
    }

    return ;
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000f94 	.word	0x20000f94
 8000e78:	20000f9c 	.word	0x20000f9c
 8000e7c:	2000109c 	.word	0x2000109c
 8000e80:	48000400 	.word	0x48000400
 8000e84:	20000bc0 	.word	0x20000bc0

08000e88 <IOL_State_OP_Process>:

static uint8_t IOL_State_OP_Process (void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
    switch ( IOL_M2D_rxpacket.rw)
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <IOL_State_OP_Process+0x24>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <IOL_State_OP_Process+0x16>
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <IOL_State_OP_Process+0x1c>
    {
        case IOL_RW_Read :
            IOL_State_OP_Read_Channel();
 8000e98:	f7ff ff38 	bl	8000d0c <IOL_State_OP_Read_Channel>
            break;
 8000e9c:	e002      	b.n	8000ea4 <IOL_State_OP_Process+0x1c>
        case IOL_RW_Write :
            IOL_State_OP_Write_Channel();
 8000e9e:	f7ff ffab 	bl	8000df8 <IOL_State_OP_Write_Channel>
            break;
 8000ea2:	bf00      	nop
    }

    return ;
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000f94 	.word	0x20000f94

08000eb0 <IOL_StateM_Process>:

uint8_t IOL_StateM_Process (void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    switch (stateIOLseq)
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <IOL_StateM_Process+0x3c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d00c      	beq.n	8000ed6 <IOL_StateM_Process+0x26>
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	dc0d      	bgt.n	8000edc <IOL_StateM_Process+0x2c>
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <IOL_StateM_Process+0x1a>
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d003      	beq.n	8000ed0 <IOL_StateM_Process+0x20>
 8000ec8:	e008      	b.n	8000edc <IOL_StateM_Process+0x2c>
    {
        case IOL_StartUp :
            IOL_State_StartUp();
 8000eca:	f7ff fde5 	bl	8000a98 <IOL_State_StartUp>
            break;
 8000ece:	e005      	b.n	8000edc <IOL_StateM_Process+0x2c>
        case IOL_PreOP :
            IOL_State_PreOP_Process();
 8000ed0:	f7ff ff08 	bl	8000ce4 <IOL_State_PreOP_Process>
            break;
 8000ed4:	e002      	b.n	8000edc <IOL_StateM_Process+0x2c>
        case IOL_OP :
            // IOL_Get_ISDU_WR_ODArr(uart1_rx_IDLE_buf);
            IOL_State_OP_Process();
 8000ed6:	f7ff ffd7 	bl	8000e88 <IOL_State_OP_Process>
            break;
 8000eda:	bf00      	nop
    }
    #if 1 // debug Test 
    Test_M2D_TempValue = uart1_rx_IDLE_buf[3];
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <IOL_StateM_Process+0x40>)
 8000ede:	78da      	ldrb	r2, [r3, #3]
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <IOL_StateM_Process+0x44>)
 8000ee2:	701a      	strb	r2, [r3, #0]
    #endif
    return ;
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20001140 	.word	0x20001140
 8000ef0:	20000bc0 	.word	0x20000bc0
 8000ef4:	20000c24 	.word	0x20000c24

08000ef8 <IOL_Parse_Rx_data>:

// 마스터로부터 받은 데이터를 분석하기 위해 파싱하여 해당 구조체멤버에 넣어줌
uint8_t IOL_Parse_Rx_data (uint8_t * pData)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    IOL_M2D_rxpacket.rw = Decode_MC_ReadWrite(*pData);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fb53 	bl	80005b0 <Decode_MC_ReadWrite>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <IOL_Parse_Rx_data+0x74>)
 8000f10:	701a      	strb	r2, [r3, #0]
    IOL_M2D_rxpacket.commchannel = Decode_MC_CommunicationChannel(*pData);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fb68 	bl	80005ec <Decode_MC_CommunicationChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <IOL_Parse_Rx_data+0x74>)
 8000f22:	705a      	strb	r2, [r3, #1]
    IOL_M2D_rxpacket.addr = Decode_MC_Address(*pData);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fb8b 	bl	8000644 <Decode_MC_Address>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <IOL_Parse_Rx_data+0x74>)
 8000f34:	709a      	strb	r2, [r3, #2]

    IOL_M2D_rxpacket.mseqtype = Decode_CKT_Type(*(++pData));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fb92 	bl	800066a <Decode_CKT_Type>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <IOL_Parse_Rx_data+0x74>)
 8000f4c:	70da      	strb	r2, [r3, #3]
    IOL_M2D_rxpacket.ckt = Decode_CKT_Checksum(*pData);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fb9b 	bl	800068e <Decode_CKT_Checksum>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <IOL_Parse_Rx_data+0x74>)
 8000f5e:	711a      	strb	r2, [r3, #4]

    return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000f94 	.word	0x20000f94

08000f70 <IOL_Print_ParsingM2Ddata>:

void IOL_Print_ParsingM2Ddata (void)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af02      	add	r7, sp, #8
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <IOL_Print_ParsingM2Ddata+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4619      	mov	r1, r3
                                                                    , IOL_M2D_rxpacket.commchannel
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <IOL_Print_ParsingM2Ddata+0x44>)
 8000f7e:	785b      	ldrb	r3, [r3, #1]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000f80:	4618      	mov	r0, r3
                                                                    , IOL_M2D_rxpacket.addr
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <IOL_Print_ParsingM2Ddata+0x44>)
 8000f84:	789b      	ldrb	r3, [r3, #2]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000f86:	461c      	mov	r4, r3
                                                                    , IOL_M2D_rxpacket.mseqtype
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <IOL_Print_ParsingM2Ddata+0x44>)
 8000f8a:	78db      	ldrb	r3, [r3, #3]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000f8c:	461a      	mov	r2, r3
                                                                    , IOL_M2D_rxpacket.ckt);
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <IOL_Print_ParsingM2Ddata+0x44>)
 8000f90:	791b      	ldrb	r3, [r3, #4]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	9200      	str	r2, [sp, #0]
 8000f96:	4623      	mov	r3, r4
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4807      	ldr	r0, [pc, #28]	@ (8000fb8 <IOL_Print_ParsingM2Ddata+0x48>)
 8000f9c:	f00b f9b4 	bl	800c308 <iprintf>

    printf("Device State : %d\r\n", stateIOLseq);
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <IOL_Print_ParsingM2Ddata+0x4c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <IOL_Print_ParsingM2Ddata+0x50>)
 8000fa8:	f00b f9ae 	bl	800c308 <iprintf>
}
 8000fac:	bf00      	nop
 8000fae:	3704      	adds	r7, #4
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	20000f94 	.word	0x20000f94
 8000fb8:	0800d0d4 	.word	0x0800d0d4
 8000fbc:	20001140 	.word	0x20001140
 8000fc0:	0800d10c 	.word	0x0800d10c

08000fc4 <IOL_Get_ISDU_Iservice>:
    {0xbd, 0x00},
};

//IO-Link ISDU 의 Iservice
static uint8_t IOL_Get_ISDU_Iservice (uint8_t * pData)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    uint8_t first_od = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
    // IOL_ISDUPacket_t isdudata;

    first_od = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	799b      	ldrb	r3, [r3, #6]
 8000fd4:	73fb      	strb	r3, [r7, #15]
    first_od = (first_od >> 4 ) & 0x0F;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	73fb      	strb	r3, [r7, #15]

    isdudata.iservice = first_od;
 8000fdc:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <IOL_Get_ISDU_Iservice+0x30>)
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	7013      	strb	r3, [r2, #0]
  
    return isdudata.iservice;
 8000fe2:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <IOL_Get_ISDU_Iservice+0x30>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000fac 	.word	0x20000fac

08000ff8 <IOL_Get_ISDU_ExtLength>:

// IO-lInk ISDU 의 extLength 
static uint8_t IOL_Get_ISDU_ExtLength (uint8_t * pData)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    uint8_t od_extlength = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]

    od_extlength = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH];
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	79db      	ldrb	r3, [r3, #7]
 8001008:	73fb      	strb	r3, [r7, #15]
    
    return od_extlength;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <IOL_Get_ISDU_Length>:

// IO-Link ISDU 의 Length
static uint8_t IOL_Get_ISDU_Length (uint8_t * pData)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    uint8_t first_od = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
    uint8_t extlength = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	73bb      	strb	r3, [r7, #14]
    // IOL_ISDUPacket_t isdudata;

    first_od = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	799b      	ldrb	r3, [r3, #6]
 800102c:	73fb      	strb	r3, [r7, #15]
    extlength = first_od & 0x0F;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f003 030f 	and.w	r3, r3, #15
 8001034:	73bb      	strb	r3, [r7, #14]

    // extlength 있는 경우
    if (extlength == 1)
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d10b      	bne.n	8001054 <IOL_Get_ISDU_Length+0x3c>
    {
        extlength_flag = 1;
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <IOL_Get_ISDU_Length+0x50>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
        extlength = IOL_Get_ISDU_ExtLength(pData);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffd8 	bl	8000ff8 <IOL_Get_ISDU_ExtLength>
 8001048:	4603      	mov	r3, r0
 800104a:	73bb      	strb	r3, [r7, #14]
        isdudata.length = extlength;
 800104c:	4a07      	ldr	r2, [pc, #28]	@ (800106c <IOL_Get_ISDU_Length+0x54>)
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	7053      	strb	r3, [r2, #1]
 8001052:	e002      	b.n	800105a <IOL_Get_ISDU_Length+0x42>
    }
    else // extlegnth 없는 경우
    {
        isdudata.length = extlength;
 8001054:	4a05      	ldr	r2, [pc, #20]	@ (800106c <IOL_Get_ISDU_Length+0x54>)
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	7053      	strb	r3, [r2, #1]
    }

    return isdudata.length;
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <IOL_Get_ISDU_Length+0x54>)
 800105c:	785b      	ldrb	r3, [r3, #1]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200003bd 	.word	0x200003bd
 800106c:	20000fac 	.word	0x20000fac

08001070 <IOL_Get_ISDU_Index>:

static uint8_t IOL_Get_ISDU_Index (uint8_t * pData)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    //extlegnth 있는 경우
    if (extlength_flag == 1)
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <IOL_Get_ISDU_Index+0x48>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d107      	bne.n	8001090 <IOL_Get_ISDU_Index+0x20>
    {
        isdudata.index = isdudata.isdu_od[2];
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <IOL_Get_ISDU_Index+0x4c>)
 8001082:	7b9a      	ldrb	r2, [r3, #14]
 8001084:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <IOL_Get_ISDU_Index+0x4c>)
 8001086:	709a      	strb	r2, [r3, #2]
        extlength_flag = 0;
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <IOL_Get_ISDU_Index+0x48>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	e003      	b.n	8001098 <IOL_Get_ISDU_Index+0x28>
    }
    else // extlength 없는 경우
    {
        isdudata.index = isdudata.isdu_od[1];
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <IOL_Get_ISDU_Index+0x4c>)
 8001092:	7b5a      	ldrb	r2, [r3, #13]
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <IOL_Get_ISDU_Index+0x4c>)
 8001096:	709a      	strb	r2, [r3, #2]
    }

    // 마스터에서 8bit index 쓰기 요청이 있는 경우
    if(isdudata.iservice == 0x01)
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <IOL_Get_ISDU_Index+0x4c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d103      	bne.n	80010a8 <IOL_Get_ISDU_Index+0x38>
    {
        // 8bit 쓰기 요청 플래그 셋
        isdudata.isdu_od_writeReq8bit_flag = 1;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <IOL_Get_ISDU_Index+0x4c>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }

    return isdudata.index;
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <IOL_Get_ISDU_Index+0x4c>)
 80010aa:	789b      	ldrb	r3, [r3, #2]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	200003bd 	.word	0x200003bd
 80010bc:	20000fac 	.word	0x20000fac

080010c0 <IOL_Get_ISDU_WR_ODArr>:

// ISDU Write OD 데이터 수신 처리
uint8_t IOL_Get_ISDU_WR_ODArr (uint8_t * pData)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    
    isdudata.isdu_od[isdudata.isdu_od_cnt++] = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 80010c8:	4b20      	ldr	r3, [pc, #128]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80010ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	b2d1      	uxtb	r1, r2
 80010d2:	4a1e      	ldr	r2, [pc, #120]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80010d4:	f882 103e 	strb.w	r1, [r2, #62]	@ 0x3e
 80010d8:	4619      	mov	r1, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	799a      	ldrb	r2, [r3, #6]
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80010e0:	440b      	add	r3, r1
 80010e2:	731a      	strb	r2, [r3, #12]
    isdudata.isdu_od[isdudata.isdu_od_cnt++] = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH];
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80010e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	b2d1      	uxtb	r1, r2
 80010ee:	4a17      	ldr	r2, [pc, #92]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80010f0:	f882 103e 	strb.w	r1, [r2, #62]	@ 0x3e
 80010f4:	4619      	mov	r1, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	79da      	ldrb	r2, [r3, #7]
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80010fc:	440b      	add	r3, r1
 80010fe:	731a      	strb	r2, [r3, #12]
    
    // 첫 OD 데이터 수신시 Iservice값과 ISDU의 데이터 길이를 구하기 위함.
    if (isdudata.isdu_od_cnt == 2)
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001102:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001106:	2b02      	cmp	r3, #2
 8001108:	d105      	bne.n	8001116 <IOL_Get_ISDU_WR_ODArr+0x56>
    {
        IOL_Get_ISDU_Iservice(pData);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff5a 	bl	8000fc4 <IOL_Get_ISDU_Iservice>
        IOL_Get_ISDU_Length(pData);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff81 	bl	8001018 <IOL_Get_ISDU_Length>
    }

    // OD 데이터의 길이까지 데이터 쌓은 경우.
    if (isdudata.isdu_od_cnt >= isdudata.length)
 8001116:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001118:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800111e:	785b      	ldrb	r3, [r3, #1]
 8001120:	429a      	cmp	r2, r3
 8001122:	d30d      	bcc.n	8001140 <IOL_Get_ISDU_WR_ODArr+0x80>
    {
        IOL_Get_ISDU_Index(pData);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffa3 	bl	8001070 <IOL_Get_ISDU_Index>

        isdudata.length = 0;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800112c:	2200      	movs	r2, #0
 800112e:	705a      	strb	r2, [r3, #1]
        isdudata.isdu_od_cnt = 0; // od length clear
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        isdudata.isdu_od_rxcplt = 1;
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800113a:	2201      	movs	r2, #1
 800113c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    }

    return ;
 8001140:	bf00      	nop
 8001142:	bf00      	nop
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000fac 	.word	0x20000fac

08001150 <IOL_Clear_PDBuffer>:
    return ;
}

// IO-Link 송/수신 데이터를 업데이트 및 갱신하기 전 송신완료시 버퍼를 클리어해 준다
void IOL_Clear_PDBuffer (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    memset(device_ProcessDataIn_Arr, 0, sizeof(device_ProcessDataIn_Arr));
 8001154:	2207      	movs	r2, #7
 8001156:	2100      	movs	r1, #0
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <IOL_Clear_PDBuffer+0x1c>)
 800115a:	f00b fa1d 	bl	800c598 <memset>
    memset(device_ProcessDataOut_Arr, 0, sizeof(device_ProcessDataOut_Arr));
 800115e:	2205      	movs	r2, #5
 8001160:	2100      	movs	r1, #0
 8001162:	4803      	ldr	r0, [pc, #12]	@ (8001170 <IOL_Clear_PDBuffer+0x20>)
 8001164:	f00b fa18 	bl	800c598 <memset>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000fa4 	.word	0x20000fa4
 8001170:	20000f9c 	.word	0x20000f9c

08001174 <IOL_Make_Resp_PDOD>:
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
}

// 각 index 응답 송신하는 부분을 모듈화하기 위한 함수
static void IOL_Make_Resp_PDOD (uint8_t * respArray, uint8_t size)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
    uint8_t (* Resp_IndexArray)[IOL_OP_ISDU_OD_LENGTH];
    uint8_t od_size = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]

    Resp_IndexArray = respArray;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	60bb      	str	r3, [r7, #8]
    od_size = size;
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	73fb      	strb	r3, [r7, #15]

    device_ProcessDataIn_Arr[0] = Resp_IndexArray[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <IOL_Make_Resp_PDOD+0x78>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	4413      	add	r3, r2
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <IOL_Make_Resp_PDOD+0x7c>)
 800119a:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = Resp_IndexArray[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <IOL_Make_Resp_PDOD+0x78>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	4413      	add	r3, r2
 80011a6:	785a      	ldrb	r2, [r3, #1]
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <IOL_Make_Resp_PDOD+0x7c>)
 80011aa:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <IOL_Make_Resp_PDOD+0x78>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <IOL_Make_Resp_PDOD+0x78>)
 80011b6:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= od_size)
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <IOL_Make_Resp_PDOD+0x78>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d806      	bhi.n	80011d0 <IOL_Make_Resp_PDOD+0x5c>
    {
        isdudata.isdu_od_writereq_flag = 0;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <IOL_Make_Resp_PDOD+0x80>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        IOL_OP_ISDU_OD_Res_cnt = 0;
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <IOL_Make_Resp_PDOD+0x78>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2106      	movs	r1, #6
 80011d4:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <IOL_Make_Resp_PDOD+0x7c>)
 80011d6:	f7ff faff 	bl	80007d8 <OP_CKS_GetChecksum>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <IOL_Make_Resp_PDOD+0x7c>)
 80011e0:	719a      	strb	r2, [r3, #6]
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200003be 	.word	0x200003be
 80011f0:	20000fa4 	.word	0x20000fa4
 80011f4:	20000fac 	.word	0x20000fac

080011f8 <IOL_Make_Resp_default>:
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
}
#else
static void IOL_Make_Resp_default (void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    // device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt++; // Test cnt Value 
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <IOL_Make_Resp_default+0x74>)
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <IOL_Make_Resp_default+0x78>)
 8001202:	715a      	strb	r2, [r3, #5]

    if (ProcessDataIn_cnt == 40)
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <IOL_Make_Resp_default+0x74>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b28      	cmp	r3, #40	@ 0x28
 800120a:	d10f      	bne.n	800122c <IOL_Make_Resp_default+0x34>
    {
        ProcessDataIn_cnt++;
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <IOL_Make_Resp_default+0x74>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <IOL_Make_Resp_default+0x74>)
 8001216:	701a      	strb	r2, [r3, #0]
        device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 1); 
 8001218:	2201      	movs	r2, #1
 800121a:	2106      	movs	r1, #6
 800121c:	4814      	ldr	r0, [pc, #80]	@ (8001270 <IOL_Make_Resp_default+0x78>)
 800121e:	f7ff fadb 	bl	80007d8 <OP_CKS_GetChecksum>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <IOL_Make_Resp_default+0x78>)
 8001228:	719a      	strb	r2, [r3, #6]
    else
    {
        device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
    }
    
}
 800122a:	e01c      	b.n	8001266 <IOL_Make_Resp_default+0x6e>
    else if (ProcessDataIn_cnt == 60)
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <IOL_Make_Resp_default+0x74>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b3c      	cmp	r3, #60	@ 0x3c
 8001232:	d10f      	bne.n	8001254 <IOL_Make_Resp_default+0x5c>
        ProcessDataIn_cnt++;
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <IOL_Make_Resp_default+0x74>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <IOL_Make_Resp_default+0x74>)
 800123e:	701a      	strb	r2, [r3, #0]
        device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 1); 
 8001240:	2201      	movs	r2, #1
 8001242:	2106      	movs	r1, #6
 8001244:	480a      	ldr	r0, [pc, #40]	@ (8001270 <IOL_Make_Resp_default+0x78>)
 8001246:	f7ff fac7 	bl	80007d8 <OP_CKS_GetChecksum>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <IOL_Make_Resp_default+0x78>)
 8001250:	719a      	strb	r2, [r3, #6]
}
 8001252:	e008      	b.n	8001266 <IOL_Make_Resp_default+0x6e>
        device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2106      	movs	r1, #6
 8001258:	4805      	ldr	r0, [pc, #20]	@ (8001270 <IOL_Make_Resp_default+0x78>)
 800125a:	f7ff fabd 	bl	80007d8 <OP_CKS_GetChecksum>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <IOL_Make_Resp_default+0x78>)
 8001264:	719a      	strb	r2, [r3, #6]
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200003e8 	.word	0x200003e8
 8001270:	20000fa4 	.word	0x20000fa4

08001274 <IOL_State_OP_ISDU_ReadProcess>:
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
}

// ISDU OD Read Process
uint8_t IOL_State_OP_ISDU_ReadProcess (void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
            //     break;
        }
        // device_ProcessDataOut_arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
    }
    #else
    if (isdudata.isdu_od_writereq_flag == 1)
 8001278:	4b63      	ldr	r3, [pc, #396]	@ (8001408 <IOL_State_OP_ISDU_ReadProcess+0x194>)
 800127a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800127e:	2b01      	cmp	r3, #1
 8001280:	f040 80ac 	bne.w	80013dc <IOL_State_OP_ISDU_ReadProcess+0x168>
    {
        // isdudata.isdudata.isdu_od_writereq_flag = 0;

        switch (isdudata.index)
 8001284:	4b60      	ldr	r3, [pc, #384]	@ (8001408 <IOL_State_OP_ISDU_ReadProcess+0x194>)
 8001286:	789b      	ldrb	r3, [r3, #2]
 8001288:	3b10      	subs	r3, #16
 800128a:	2b30      	cmp	r3, #48	@ 0x30
 800128c:	f200 80a8 	bhi.w	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>
 8001290:	a201      	add	r2, pc, #4	@ (adr r2, 8001298 <IOL_State_OP_ISDU_ReadProcess+0x24>)
 8001292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001296:	bf00      	nop
 8001298:	080013bf 	.word	0x080013bf
 800129c:	080013e1 	.word	0x080013e1
 80012a0:	0800135d 	.word	0x0800135d
 80012a4:	08001379 	.word	0x08001379
 80012a8:	080013e1 	.word	0x080013e1
 80012ac:	08001367 	.word	0x08001367
 80012b0:	080013c9 	.word	0x080013c9
 80012b4:	080013d3 	.word	0x080013d3
 80012b8:	08001383 	.word	0x08001383
 80012bc:	0800138d 	.word	0x0800138d
 80012c0:	08001397 	.word	0x08001397
 80012c4:	080013e1 	.word	0x080013e1
 80012c8:	080013e1 	.word	0x080013e1
 80012cc:	080013e1 	.word	0x080013e1
 80012d0:	080013e1 	.word	0x080013e1
 80012d4:	080013e1 	.word	0x080013e1
 80012d8:	080013e1 	.word	0x080013e1
 80012dc:	080013e1 	.word	0x080013e1
 80012e0:	080013e1 	.word	0x080013e1
 80012e4:	080013e1 	.word	0x080013e1
 80012e8:	080013ab 	.word	0x080013ab
 80012ec:	080013b5 	.word	0x080013b5
 80012f0:	080013e1 	.word	0x080013e1
 80012f4:	080013e1 	.word	0x080013e1
 80012f8:	080013e1 	.word	0x080013e1
 80012fc:	080013e1 	.word	0x080013e1
 8001300:	080013e1 	.word	0x080013e1
 8001304:	080013e1 	.word	0x080013e1
 8001308:	080013e1 	.word	0x080013e1
 800130c:	080013e1 	.word	0x080013e1
 8001310:	080013e1 	.word	0x080013e1
 8001314:	080013e1 	.word	0x080013e1
 8001318:	080013e1 	.word	0x080013e1
 800131c:	080013e1 	.word	0x080013e1
 8001320:	080013e1 	.word	0x080013e1
 8001324:	080013e1 	.word	0x080013e1
 8001328:	080013e1 	.word	0x080013e1
 800132c:	080013e1 	.word	0x080013e1
 8001330:	080013e1 	.word	0x080013e1
 8001334:	080013e1 	.word	0x080013e1
 8001338:	080013e1 	.word	0x080013e1
 800133c:	080013e1 	.word	0x080013e1
 8001340:	080013e1 	.word	0x080013e1
 8001344:	080013e1 	.word	0x080013e1
 8001348:	080013e1 	.word	0x080013e1
 800134c:	080013e1 	.word	0x080013e1
 8001350:	080013e1 	.word	0x080013e1
 8001354:	080013e1 	.word	0x080013e1
 8001358:	080013a1 	.word	0x080013a1
        {
            case IOL_Index_ProductName :
                // IOL_Make_Resp_ProductName();
                IOL_Make_Resp_PDOD(IOL_OP_ProductName, IOL_OP_ISDU_PRODUCTNAME_LENGTH);
 800135c:	210d      	movs	r1, #13
 800135e:	482b      	ldr	r0, [pc, #172]	@ (800140c <IOL_State_OP_ISDU_ReadProcess+0x198>)
 8001360:	f7ff ff08 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 8001364:	e03c      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_SerialNumber :
                DEBUG_GPIO_TOGGLE;
 8001366:	2101      	movs	r1, #1
 8001368:	4829      	ldr	r0, [pc, #164]	@ (8001410 <IOL_State_OP_ISDU_ReadProcess+0x19c>)
 800136a:	f001 fe6b 	bl	8003044 <HAL_GPIO_TogglePin>
                // IOL_Make_Resp_SerialNumber();
                IOL_Make_Resp_PDOD(IOL_OP_SerialNumber, IOL_OP_ISDU_SERIALNUMBER_LENGTH);
 800136e:	2105      	movs	r1, #5
 8001370:	4828      	ldr	r0, [pc, #160]	@ (8001414 <IOL_State_OP_ISDU_ReadProcess+0x1a0>)
 8001372:	f7ff feff 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 8001376:	e033      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>
            //     break;
            // case IOL_Index_ProductText :
            //     break;
            case IOL_Index_ProductID :
                // IOL_Make_Resp_ProductID();
                IOL_Make_Resp_PDOD(IOL_OP_ProductID, IOL_OP_ISDU_PRODUCTID_LENGTH);
 8001378:	2106      	movs	r1, #6
 800137a:	4827      	ldr	r0, [pc, #156]	@ (8001418 <IOL_State_OP_ISDU_ReadProcess+0x1a4>)
 800137c:	f7ff fefa 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 8001380:	e02e      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_ApplicationSpecificTag :
                // IOL_Make_Resp_ApplicationSpecificTag();
                IOL_Make_Resp_PDOD(IOL_OP_ApplicationSpecificTag, IOL_OP_ISDU_APPLICATIONSPECIFICTAG_LENGTH);
 8001382:	2112      	movs	r1, #18
 8001384:	4825      	ldr	r0, [pc, #148]	@ (800141c <IOL_State_OP_ISDU_ReadProcess+0x1a8>)
 8001386:	f7ff fef5 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 800138a:	e029      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_FunctionTag :
                // IOL_Make_Resp_ApplicationSpecificTag();
                IOL_Make_Resp_PDOD(IOL_OP_ApplicationSpecificTag, IOL_OP_ISDU_APPLICATIONSPECIFICTAG_LENGTH);
 800138c:	2112      	movs	r1, #18
 800138e:	4823      	ldr	r0, [pc, #140]	@ (800141c <IOL_State_OP_ISDU_ReadProcess+0x1a8>)
 8001390:	f7ff fef0 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 8001394:	e024      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>
                
            case IOL_Index_LocationTag :
                // IOL_Make_Resp_ApplicationSpecificTag();
                IOL_Make_Resp_PDOD(IOL_OP_ApplicationSpecificTag, IOL_OP_ISDU_APPLICATIONSPECIFICTAG_LENGTH);
 8001396:	2112      	movs	r1, #18
 8001398:	4820      	ldr	r0, [pc, #128]	@ (800141c <IOL_State_OP_ISDU_ReadProcess+0x1a8>)
 800139a:	f7ff feeb 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 800139e:	e01f      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_PreferredIndex :
                // DEBUG_GPIO_TOGGLE;
                // IOL_Make_Resp_ExampleParameter();
                IOL_Make_Resp_PDOD(IOL_OP_ExampleParameter, IOL_OP_ISDU_EXAMPLEPARAMETER_LENGTH);
 80013a0:	2102      	movs	r1, #2
 80013a2:	481f      	ldr	r0, [pc, #124]	@ (8001420 <IOL_State_OP_ISDU_ReadProcess+0x1ac>)
 80013a4:	f7ff fee6 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 80013a8:	e01a      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_DeviceStatus :
                // IOL_Make_Resp_DeviceStatus();
                IOL_Make_Resp_PDOD(IOL_OP_DeviceStatus, IOL_OP_ISDU_DEVICESTATUS_LENGTH);
 80013aa:	2102      	movs	r1, #2
 80013ac:	481d      	ldr	r0, [pc, #116]	@ (8001424 <IOL_State_OP_ISDU_ReadProcess+0x1b0>)
 80013ae:	f7ff fee1 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 80013b2:	e015      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_DetailedDeviceStatus :
                // IOL_Make_Resp_DetailedDeviceStatus();
                IOL_Make_Resp_PDOD(IOL_OP_DetailedDeviceStatus, IOL_OP_ISDU_DETAILEDDEVICESTATUS_LENGTH);
 80013b4:	2103      	movs	r1, #3
 80013b6:	481c      	ldr	r0, [pc, #112]	@ (8001428 <IOL_State_OP_ISDU_ReadProcess+0x1b4>)
 80013b8:	f7ff fedc 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 80013bc:	e010      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>
            
            case IOL_Index_VendorName :
                // IOL_Make_Resp_VendorName();
                IOL_Make_Resp_PDOD(IOL_OP_VendorName, IOL_OP_ISDU_VENDORNAME_LENGTH);
 80013be:	2122      	movs	r1, #34	@ 0x22
 80013c0:	481a      	ldr	r0, [pc, #104]	@ (800142c <IOL_State_OP_ISDU_ReadProcess+0x1b8>)
 80013c2:	f7ff fed7 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 80013c6:	e00b      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_HardwareRevision :
                // IOL_Make_Resp_HWRevision();
                IOL_Make_Resp_PDOD(IOL_OP_HWRevision, IOL_OP_ISDU_HWREVISION_LENGTH);
 80013c8:	2122      	movs	r1, #34	@ 0x22
 80013ca:	4819      	ldr	r0, [pc, #100]	@ (8001430 <IOL_State_OP_ISDU_ReadProcess+0x1bc>)
 80013cc:	f7ff fed2 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 80013d0:	e006      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>
            
            case IOL_Index_FirmwareRevision :
                // IOL_Make_Resp_FWRevision();
                IOL_Make_Resp_PDOD(IOL_OP_FWRevision, IOL_OP_ISDU_FWREVISION_LENGTH);
 80013d2:	2122      	movs	r1, #34	@ 0x22
 80013d4:	4817      	ldr	r0, [pc, #92]	@ (8001434 <IOL_State_OP_ISDU_ReadProcess+0x1c0>)
 80013d6:	f7ff fecd 	bl	8001174 <IOL_Make_Resp_PDOD>
                break;
 80013da:	e001      	b.n	80013e0 <IOL_State_OP_ISDU_ReadProcess+0x16c>
        // device_ProcessDataOut_arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
    }
    #endif
    else
    {
        IOL_Make_Resp_default();
 80013dc:	f7ff ff0c 	bl	80011f8 <IOL_Make_Resp_default>
    }

    IOL_ENABLE;
 80013e0:	2201      	movs	r2, #1
 80013e2:	2140      	movs	r1, #64	@ 0x40
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e8:	f001 fe14 	bl	8003014 <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataIn_Arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 80013ec:	2207      	movs	r2, #7
 80013ee:	4912      	ldr	r1, [pc, #72]	@ (8001438 <IOL_State_OP_ISDU_ReadProcess+0x1c4>)
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <IOL_State_OP_ISDU_ReadProcess+0x1c8>)
 80013f2:	f005 f8bb 	bl	800656c <HAL_UART_Transmit_IT>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <IOL_State_OP_ISDU_ReadProcess+0x18c>
    {
        Error_Handler();
 80013fc:	f000 fa45 	bl	800188a <Error_Handler>
    }

    return ;
 8001400:	bf00      	nop
 8001402:	bf00      	nop
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000fac 	.word	0x20000fac
 800140c:	2000005c 	.word	0x2000005c
 8001410:	48000400 	.word	0x48000400
 8001414:	20000078 	.word	0x20000078
 8001418:	200000a8 	.word	0x200000a8
 800141c:	20000084 	.word	0x20000084
 8001420:	200000b4 	.word	0x200000b4
 8001424:	200000c0 	.word	0x200000c0
 8001428:	200000c4 	.word	0x200000c4
 800142c:	200000cc 	.word	0x200000cc
 8001430:	20000110 	.word	0x20000110
 8001434:	20000154 	.word	0x20000154
 8001438:	20000fa4 	.word	0x20000fa4
 800143c:	2000109c 	.word	0x2000109c

08001440 <IOL_State_OP_ISDU_WriteProcess>:

// ISDU OD Process
uint8_t IOL_State_OP_ISDU_WriteProcess (void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    if (isdudata.isdu_od_rxcplt == 1)
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 8001446:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <IOL_State_OP_ISDU_WriteProcess+0x1e>
    {
        isdudata.isdu_od_rxcplt = 0;
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

        isdudata.isdu_od_writereq_flag = 1;
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <IOL_State_OP_ISDU_WriteProcess+0x58>)
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_Arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
 800145e:	2200      	movs	r2, #0
 8001460:	2104      	movs	r1, #4
 8001462:	480e      	ldr	r0, [pc, #56]	@ (800149c <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 8001464:	f7ff f9b8 	bl	80007d8 <OP_CKS_GetChecksum>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 800146e:	711a      	strb	r2, [r3, #4]

    IOL_ENABLE;
 8001470:	2201      	movs	r2, #1
 8001472:	2140      	movs	r1, #64	@ 0x40
 8001474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001478:	f001 fdcc 	bl	8003014 <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_Arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 800147c:	2205      	movs	r2, #5
 800147e:	4907      	ldr	r1, [pc, #28]	@ (800149c <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 8001480:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <IOL_State_OP_ISDU_WriteProcess+0x60>)
 8001482:	f005 f873 	bl	800656c <HAL_UART_Transmit_IT>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <IOL_State_OP_ISDU_WriteProcess+0x50>
    {
        Error_Handler();
 800148c:	f000 f9fd 	bl	800188a <Error_Handler>
    }

    return ;
 8001490:	bf00      	nop
 8001492:	bf00      	nop
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000fac 	.word	0x20000fac
 800149c:	20000f9c 	.word	0x20000f9c
 80014a0:	2000109c 	.word	0x2000109c

080014a4 <IOL_ConnectToIFM_Read>:
extern uint8_t device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH];
extern uint8_t ProcessDataIn_cnt;

// for 문 수정이 필요. j 카운트 부분이 쓸모없이 중복 실행.
void IOL_ConnectToIFM_Read (void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	71bb      	strb	r3, [r7, #6]
    uint8_t setpage1first[2] = {0x00, 0x22};
 80014ae:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80014b2:	80bb      	strh	r3, [r7, #4]
    // uint8_t Pagevalue[16] = { 0 };

    for (i = 2; i < 16; i++)
 80014b4:	2302      	movs	r3, #2
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	e01a      	b.n	80014f0 <IOL_ConnectToIFM_Read+0x4c>
    {
        for(j = 0; j < 2; j++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	71bb      	strb	r3, [r7, #6]
 80014be:	e00a      	b.n	80014d6 <IOL_ConnectToIFM_Read+0x32>
        {
            IOL_ISDUPage_value[j] = setpage1first[j];
 80014c0:	79ba      	ldrb	r2, [r7, #6]
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	3208      	adds	r2, #8
 80014c6:	443a      	add	r2, r7
 80014c8:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001504 <IOL_ConnectToIFM_Read+0x60>)
 80014ce:	54d1      	strb	r1, [r2, r3]
        for(j = 0; j < 2; j++)
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	3301      	adds	r3, #1
 80014d4:	71bb      	strb	r3, [r7, #6]
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d9f1      	bls.n	80014c0 <IOL_ConnectToIFM_Read+0x1c>
        }
        IOL_ISDUPage_value[i] = IOL_Page1_SeqValue[i - 1];
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	1e5a      	subs	r2, r3, #1
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4909      	ldr	r1, [pc, #36]	@ (8001508 <IOL_ConnectToIFM_Read+0x64>)
 80014e4:	5c89      	ldrb	r1, [r1, r2]
 80014e6:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <IOL_ConnectToIFM_Read+0x60>)
 80014e8:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < 16; i++)
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	3301      	adds	r3, #1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d9e1      	bls.n	80014ba <IOL_ConnectToIFM_Read+0x16>
    }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	200003c0 	.word	0x200003c0
 8001508:	20000198 	.word	0x20000198

0800150c <IOL_State_OP_Page_ReadProcess>:

uint8_t IOL_State_OP_Page_ReadProcess (void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
    IOL_ConnectToIFM_Read();
 8001510:	f7ff ffc8 	bl	80014a4 <IOL_ConnectToIFM_Read>

    device_Page_OD_arr[0] = IOL_ISDUPage_value[IOL_OP_OD_Page_Res_cnt];
 8001514:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <IOL_State_OP_Page_ReadProcess+0x80>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <IOL_State_OP_Page_ReadProcess+0x84>)
 800151c:	5c9a      	ldrb	r2, [r3, r2]
 800151e:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <IOL_State_OP_Page_ReadProcess+0x88>)
 8001520:	701a      	strb	r2, [r3, #0]
    device_Page_OD_arr[1] = IOL_ISDUPage_value[IOL_OP_OD_Page_Res_cnt + 1];
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <IOL_State_OP_Page_ReadProcess+0x80>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <IOL_State_OP_Page_ReadProcess+0x84>)
 800152a:	5cd2      	ldrb	r2, [r2, r3]
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <IOL_State_OP_Page_ReadProcess+0x88>)
 800152e:	705a      	strb	r2, [r3, #1]
    IOL_OP_OD_Page_Res_cnt++;
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <IOL_State_OP_Page_ReadProcess+0x80>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <IOL_State_OP_Page_ReadProcess+0x80>)
 800153a:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_OD_Page_Res_cnt >= 16)
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <IOL_State_OP_Page_ReadProcess+0x80>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d906      	bls.n	8001552 <IOL_State_OP_Page_ReadProcess+0x46>
    {
        DEBUG_GPIO_TOGGLE; // 디버깅 트리거
 8001544:	2101      	movs	r1, #1
 8001546:	4814      	ldr	r0, [pc, #80]	@ (8001598 <IOL_State_OP_Page_ReadProcess+0x8c>)
 8001548:	f001 fd7c 	bl	8003044 <HAL_GPIO_TogglePin>
        IOL_OP_OD_Page_Res_cnt = 0;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <IOL_State_OP_Page_ReadProcess+0x80>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
    }

    device_Page_OD_arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_Page_OD_arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2106      	movs	r1, #6
 8001556:	480f      	ldr	r0, [pc, #60]	@ (8001594 <IOL_State_OP_Page_ReadProcess+0x88>)
 8001558:	f7ff f93e 	bl	80007d8 <OP_CKS_GetChecksum>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <IOL_State_OP_Page_ReadProcess+0x88>)
 8001562:	719a      	strb	r2, [r3, #6]

    IOL_ENABLE;
 8001564:	2201      	movs	r2, #1
 8001566:	2140      	movs	r1, #64	@ 0x40
 8001568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156c:	f001 fd52 	bl	8003014 <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_Page_OD_arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 8001570:	2207      	movs	r2, #7
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <IOL_State_OP_Page_ReadProcess+0x88>)
 8001574:	4809      	ldr	r0, [pc, #36]	@ (800159c <IOL_State_OP_Page_ReadProcess+0x90>)
 8001576:	f004 fff9 	bl	800656c <HAL_UART_Transmit_IT>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <IOL_State_OP_Page_ReadProcess+0x78>
    {
        Error_Handler();
 8001580:	f000 f983 	bl	800188a <Error_Handler>
    }
}
 8001584:	bf00      	nop
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200003d2 	.word	0x200003d2
 8001590:	200003c0 	.word	0x200003c0
 8001594:	200003d4 	.word	0x200003d4
 8001598:	48000400 	.word	0x48000400
 800159c:	2000109c 	.word	0x2000109c

080015a0 <IOL_State_OP_Page_WriteProcess>:

uint8_t IOL_State_OP_Page_WriteProcess (void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <IOL_State_OP_Page_WriteProcess+0x44>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <IOL_State_OP_Page_WriteProcess+0x48>)
 80015aa:	70da      	strb	r2, [r3, #3]
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_Arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2104      	movs	r1, #4
 80015b0:	480d      	ldr	r0, [pc, #52]	@ (80015e8 <IOL_State_OP_Page_WriteProcess+0x48>)
 80015b2:	f7ff f911 	bl	80007d8 <OP_CKS_GetChecksum>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <IOL_State_OP_Page_WriteProcess+0x48>)
 80015bc:	711a      	strb	r2, [r3, #4]

    IOL_ENABLE;
 80015be:	2201      	movs	r2, #1
 80015c0:	2140      	movs	r1, #64	@ 0x40
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c6:	f001 fd25 	bl	8003014 <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_Arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 80015ca:	2205      	movs	r2, #5
 80015cc:	4906      	ldr	r1, [pc, #24]	@ (80015e8 <IOL_State_OP_Page_WriteProcess+0x48>)
 80015ce:	4807      	ldr	r0, [pc, #28]	@ (80015ec <IOL_State_OP_Page_WriteProcess+0x4c>)
 80015d0:	f004 ffcc 	bl	800656c <HAL_UART_Transmit_IT>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <IOL_State_OP_Page_WriteProcess+0x3e>
    {
        Error_Handler();
 80015da:	f000 f956 	bl	800188a <Error_Handler>
    }
}
 80015de:	bf00      	nop
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200003e8 	.word	0x200003e8
 80015e8:	20000f9c 	.word	0x20000f9c
 80015ec:	2000109c 	.word	0x2000109c

080015f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <MX_DMA_Init+0x50>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <MX_DMA_Init+0x50>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6493      	str	r3, [r2, #72]	@ 0x48
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <MX_DMA_Init+0x50>)
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <MX_DMA_Init+0x50>)
 8001610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001612:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <MX_DMA_Init+0x50>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6493      	str	r3, [r2, #72]	@ 0x48
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <MX_DMA_Init+0x50>)
 800161c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	200b      	movs	r0, #11
 800162c:	f001 f809 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001630:	200b      	movs	r0, #11
 8001632:	f001 f820 	bl	8002676 <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	4b43      	ldr	r3, [pc, #268]	@ (8001768 <MX_GPIO_Init+0x124>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	4a42      	ldr	r2, [pc, #264]	@ (8001768 <MX_GPIO_Init+0x124>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001666:	4b40      	ldr	r3, [pc, #256]	@ (8001768 <MX_GPIO_Init+0x124>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <MX_GPIO_Init+0x124>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	4a3c      	ldr	r2, [pc, #240]	@ (8001768 <MX_GPIO_Init+0x124>)
 8001678:	f043 0320 	orr.w	r3, r3, #32
 800167c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167e:	4b3a      	ldr	r3, [pc, #232]	@ (8001768 <MX_GPIO_Init+0x124>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b37      	ldr	r3, [pc, #220]	@ (8001768 <MX_GPIO_Init+0x124>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	4a36      	ldr	r2, [pc, #216]	@ (8001768 <MX_GPIO_Init+0x124>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001696:	4b34      	ldr	r3, [pc, #208]	@ (8001768 <MX_GPIO_Init+0x124>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <MX_GPIO_Init+0x124>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	4a30      	ldr	r2, [pc, #192]	@ (8001768 <MX_GPIO_Init+0x124>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <MX_GPIO_Init+0x124>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80016c0:	482a      	ldr	r0, [pc, #168]	@ (800176c <MX_GPIO_Init+0x128>)
 80016c2:	f001 fca7 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2140      	movs	r1, #64	@ 0x40
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ce:	f001 fca1 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2101      	movs	r1, #1
 80016d6:	4826      	ldr	r0, [pc, #152]	@ (8001770 <MX_GPIO_Init+0x12c>)
 80016d8:	f001 fc9c 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016dc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	481d      	ldr	r0, [pc, #116]	@ (800176c <MX_GPIO_Init+0x128>)
 80016f6:	f001 fb0b 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016fa:	23a0      	movs	r3, #160	@ 0xa0
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001712:	f001 fafd 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001716:	2340      	movs	r3, #64	@ 0x40
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001730:	f001 faee 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001734:	2301      	movs	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4809      	ldr	r0, [pc, #36]	@ (8001770 <MX_GPIO_Init+0x12c>)
 800174c:	f001 fae0 	bl	8002d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	2017      	movs	r0, #23
 8001756:	f000 ff74 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800175a:	2017      	movs	r0, #23
 800175c:	f000 ff8b 	bl	8002676 <HAL_NVIC_EnableIRQ>

}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	@ 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000
 800176c:	48000800 	.word	0x48000800
 8001770:	48000400 	.word	0x48000400

08001774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001778:	f000 fdf5 	bl	8002366 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177c:	f000 f83a 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f7ff ff60 	bl	8001644 <MX_GPIO_Init>
  MX_DMA_Init();
 8001784:	f7ff ff34 	bl	80015f0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001788:	f000 fc2a 	bl	8001fe0 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 800178c:	f009 ffd8 	bl	800b740 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8001790:	f000 fbac 	bl	8001eec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8001794:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001798:	4910      	ldr	r1, [pc, #64]	@ (80017dc <main+0x68>)
 800179a:	4811      	ldr	r0, [pc, #68]	@ (80017e0 <main+0x6c>)
 800179c:	f000 f87b 	bl	8001896 <Q_Init>

  HAL_Delay(3000);
 80017a0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017a4:	f000 fe50 	bl	8002448 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80017a8:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <main+0x70>)
 80017aa:	f004 f9b3 	bl	8005b14 <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 80017ae:	f000 fd6f 	bl	8002290 <GetClockSourcePrint>
  BootMessagePrint();
 80017b2:	f000 fd3d 	bl	8002230 <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 80017b6:	2264      	movs	r2, #100	@ 0x64
 80017b8:	490b      	ldr	r1, [pc, #44]	@ (80017e8 <main+0x74>)
 80017ba:	480c      	ldr	r0, [pc, #48]	@ (80017ec <main+0x78>)
 80017bc:	f006 fc44 	bl	8008048 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <main+0x7c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <main+0x7c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0204 	bic.w	r2, r2, #4
 80017ce:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 80017d0:	f000 fcf6 	bl	80021c0 <User_Toggle_Led>
    ProcessDataIn_IncreaseCntValue();
 80017d4:	f000 fd0a 	bl	80021ec <ProcessDataIn_IncreaseCntValue>
    User_Toggle_Led();
 80017d8:	bf00      	nop
 80017da:	e7f9      	b.n	80017d0 <main+0x5c>
 80017dc:	200007d4 	.word	0x200007d4
 80017e0:	20001130 	.word	0x20001130
 80017e4:	20000ff0 	.word	0x20000ff0
 80017e8:	20000bc0 	.word	0x20000bc0
 80017ec:	2000109c 	.word	0x2000109c
 80017f0:	2000103c 	.word	0x2000103c

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b094      	sub	sp, #80	@ 0x50
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 0318 	add.w	r3, r7, #24
 80017fe:	2238      	movs	r2, #56	@ 0x38
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f00a fec8 	bl	800c598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001816:	2000      	movs	r0, #0
 8001818:	f003 f952 	bl	8004ac0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800181c:	2321      	movs	r3, #33	@ 0x21
 800181e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001820:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001824:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001826:	2301      	movs	r3, #1
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182a:	2302      	movs	r3, #2
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800182e:	2303      	movs	r3, #3
 8001830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001832:	2306      	movs	r3, #6
 8001834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001836:	2355      	movs	r3, #85	@ 0x55
 8001838:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800183a:	2302      	movs	r3, #2
 800183c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800183e:	2304      	movs	r3, #4
 8001840:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001842:	2302      	movs	r3, #2
 8001844:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001846:	f107 0318 	add.w	r3, r7, #24
 800184a:	4618      	mov	r0, r3
 800184c:	f003 f9ec 	bl	8004c28 <HAL_RCC_OscConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001856:	f000 f818 	bl	800188a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185a:	230f      	movs	r3, #15
 800185c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185e:	2303      	movs	r3, #3
 8001860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2104      	movs	r1, #4
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fcea 	bl	800524c <HAL_RCC_ClockConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800187e:	f000 f804 	bl	800188a <Error_Handler>
  }
}
 8001882:	bf00      	nop
 8001884:	3750      	adds	r7, #80	@ 0x50
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188e:	b672      	cpsid	i
}
 8001890:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001892:	bf00      	nop
 8001894:	e7fd      	b.n	8001892 <Error_Handler+0x8>

08001896 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	4613      	mov	r3, r2
 80018a2:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	88fa      	ldrh	r2, [r7, #6]
 80018c0:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	60da      	str	r2, [r3, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	4613      	mov	r3, r2
 80018e0:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 80018e2:	2300      	movs	r3, #0
 80018e4:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f8ea 	bl	8001ac0 <Q_NumEmptyBytes>
 80018ec:	4603      	mov	r3, r0
 80018ee:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	db44      	blt.n	8001982 <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4413      	add	r3, r2
 8001904:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	8afa      	ldrh	r2, [r7, #22]
 800190c:	429a      	cmp	r2, r3
 800190e:	d20b      	bcs.n	8001928 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800191a:	4413      	add	r3, r2
 800191c:	88fa      	ldrh	r2, [r7, #6]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	4618      	mov	r0, r3
 8001922:	f00a feb4 	bl	800c68e <memcpy>
 8001926:	e01d      	b.n	8001964 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	881a      	ldrh	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001932:	b29b      	uxth	r3, r3
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001942:	4413      	add	r3, r2
 8001944:	8aba      	ldrh	r2, [r7, #20]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	4618      	mov	r0, r3
 800194a:	f00a fea0 	bl	800c68e <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	68d8      	ldr	r0, [r3, #12]
 8001952:	8abb      	ldrh	r3, [r7, #20]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	18d1      	adds	r1, r2, r3
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	8abb      	ldrh	r3, [r7, #20]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	461a      	mov	r2, r3
 8001960:	f00a fe95 	bl	800c68e <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	8afb      	ldrh	r3, [r7, #22]
 800196a:	fbb3 f1f2 	udiv	r1, r3, r2
 800196e:	fb01 f202 	mul.w	r2, r1, r2
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	b21a      	sxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	805a      	strh	r2, [r3, #2]
        ret = true;        
 800197c:	2301      	movs	r3, #1
 800197e:	77fb      	strb	r3, [r7, #31]
 8001980:	e00e      	b.n	80019a0 <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	88db      	ldrh	r3, [r3, #6]
 8001986:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800198a:	4293      	cmp	r3, r2
 800198c:	d004      	beq.n	8001998 <Q_Write+0xc4>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	88db      	ldrh	r3, [r3, #6]
 8001992:	3301      	adds	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	e001      	b.n	800199c <Q_Write+0xc8>
 8001998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	80da      	strh	r2, [r3, #6]
    return ret;    
 80019a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	4613      	mov	r3, r2
 80019b6:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f864 	bl	8001a86 <Q_NumContents>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d848      	bhi.n	8001a5a <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	4413      	add	r3, r2
 80019d4:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	8aba      	ldrh	r2, [r7, #20]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d20b      	bcs.n	80019f8 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	88fa      	ldrh	r2, [r7, #6]
 80019ee:	4619      	mov	r1, r3
 80019f0:	68b8      	ldr	r0, [r7, #8]
 80019f2:	f00a fe4c 	bl	800c68e <memcpy>
 80019f6:	e01d      	b.n	8001a34 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	881a      	ldrh	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	8a7a      	ldrh	r2, [r7, #18]
 8001a16:	4619      	mov	r1, r3
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f00a fe38 	bl	800c68e <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8001a1e:	8a7b      	ldrh	r3, [r7, #18]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	18d0      	adds	r0, r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	68d9      	ldr	r1, [r3, #12]
 8001a28:	88fa      	ldrh	r2, [r7, #6]
 8001a2a:	8a7b      	ldrh	r3, [r7, #18]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f00a fe2d 	bl	800c68e <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	4413      	add	r3, r2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	8812      	ldrh	r2, [r2, #0]
 8001a44:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a48:	fb01 f202 	mul.w	r2, r1, r2
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	809a      	strh	r2, [r3, #4]
        ret = true;
 8001a54:	2301      	movs	r3, #1
 8001a56:	75fb      	strb	r3, [r7, #23]
 8001a58:	e010      	b.n	8001a7c <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	891b      	ldrh	r3, [r3, #8]
 8001a5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d004      	beq.n	8001a70 <Q_Read+0xc6>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	891b      	ldrh	r3, [r3, #8]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	e001      	b.n	8001a74 <Q_Read+0xca>
 8001a70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	811a      	strh	r2, [r3, #8]
        ret = false;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	8812      	ldrh	r2, [r2, #0]
 8001aa8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001aac:	fb01 f202 	mul.w	r2, r1, r2
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	b29b      	uxth	r3, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	881c      	ldrh	r4, [r3, #0]
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ffda 	bl	8001a86 <Q_NumContents>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	1ae3      	subs	r3, r4, r3
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29b      	uxth	r3, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd90      	pop	{r4, r7, pc}

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_MspInit+0x44>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aee:	4a0e      	ldr	r2, [pc, #56]	@ (8001b28 <HAL_MspInit+0x44>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001af6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <HAL_MspInit+0x44>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <HAL_MspInit+0x44>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <HAL_MspInit+0x44>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_MspInit+0x44>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b1a:	f003 f875 	bl	8004c08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <NMI_Handler+0x4>

08001b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <HardFault_Handler+0x4>

08001b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <MemManage_Handler+0x4>

08001b44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b82:	f000 fc43 	bl	800240c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <DMA1_Channel1_IRQHandler+0x10>)
 8001b92:	f000 ff6e 	bl	8002a72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000103c 	.word	0x2000103c

08001ba0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <USB_LP_IRQHandler+0x10>)
 8001ba6:	f001 fb7a 	bl	800329e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20002790 	.word	0x20002790

08001bb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001bb8:	2020      	movs	r0, #32
 8001bba:	f001 fa5d 	bl	8003078 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001bbe:	2080      	movs	r0, #128	@ 0x80
 8001bc0:	f001 fa5a 	bl	8003078 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001bce:	f004 f80b 	bl	8005be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000ff0 	.word	0x20000ff0

08001bdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8001be0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <USART1_IRQHandler+0x3c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d006      	beq.n	8001bfc <USART1_IRQHandler+0x20>
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <USART1_IRQHandler+0x3c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d107      	bne.n	8001c0c <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <USART1_IRQHandler+0x3c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2208      	movs	r2, #8
 8001c02:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8001c04:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <USART1_IRQHandler+0x3c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <USART1_IRQHandler+0x3c>)
 8001c0e:	f004 fd41 	bl	8006694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000109c 	.word	0x2000109c

08001c1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8001c28:	4818      	ldr	r0, [pc, #96]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c2a:	f7ff ff2c 	bl	8001a86 <Q_NumContents>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	81fb      	strh	r3, [r7, #14]
 8001c32:	89fb      	ldrh	r3, [r7, #14]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d016      	beq.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8001c38:	f009 fe78 	bl	800b92c <CDC_Transmit_Is_Busy>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d011      	beq.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8001c42:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c44:	881a      	ldrh	r2, [r3, #0]
 8001c46:	89fb      	ldrh	r3, [r7, #14]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c4e:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8001c50:	89fb      	ldrh	r3, [r7, #14]
 8001c52:	461a      	mov	r2, r3
 8001c54:	490f      	ldr	r1, [pc, #60]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c56:	480d      	ldr	r0, [pc, #52]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c58:	f7ff fea7 	bl	80019aa <Q_Read>

      CDC_Transmit_FS(queData, num);
 8001c5c:	89fb      	ldrh	r3, [r7, #14]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c62:	f009 fe2b 	bl	800b8bc <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d109      	bne.n	8001c84 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c78:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4a07      	ldr	r2, [pc, #28]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c82:	6013      	str	r3, [r2, #0]
  }
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20001130 	.word	0x20001130
 8001c90:	200003ea 	.word	0x200003ea
 8001c94:	200003ec 	.word	0x200003ec
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	200003e0 	.word	0x200003e0
 8001ca0:	200003e4 	.word	0x200003e4

08001ca4 <HAL_UARTEx_RxEventCallback>:

uint8_t IOL_Rx_IDLEFlag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d70 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8001d70 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001cba:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8001d74 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d150      	bne.n	8001d68 <HAL_UARTEx_RxEventCallback+0xc4>
  {


    if (uart_rx_IDLE_TotalCnt >= 3)
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d70 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d90f      	bls.n	8001cee <HAL_UARTEx_RxEventCallback+0x4a>
    {
      // DEBUG_GPIO_TOGGLE;
      if (IOL_Rx_IDLEFlag == 1)
 8001cce:	4b2a      	ldr	r3, [pc, #168]	@ (8001d78 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d103      	bne.n	8001cde <HAL_UARTEx_RxEventCallback+0x3a>
      {
        IOL_Rx_IDLEFlag = 0;
 8001cd6:	4b28      	ldr	r3, [pc, #160]	@ (8001d78 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e007      	b.n	8001cee <HAL_UARTEx_RxEventCallback+0x4a>
      }
      else
      {
        // DEBUG_GPIO_TOGGLE;
        IOL_Rx_IDLEFlag = 1;
 8001cde:	4b26      	ldr	r3, [pc, #152]	@ (8001d78 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_Parse_Rx_data(uart1_rx_IDLE_buf);
 8001ce4:	4825      	ldr	r0, [pc, #148]	@ (8001d7c <HAL_UARTEx_RxEventCallback+0xd8>)
 8001ce6:	f7ff f907 	bl	8000ef8 <IOL_Parse_Rx_data>
        // IOL_Parse_Rx_data();
        IOL_StateM_Process();
 8001cea:	f7ff f8e1 	bl	8000eb0 <IOL_StateM_Process>
        // IOL_StartUp_Seq_Page(Size);
      }

    }

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8001cee:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2264      	movs	r2, #100	@ 0x64
 8001d04:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8001d06:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	e853 3f00 	ldrex	r3, [r3]
 8001d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f043 0310 	orr.w	r3, r3, #16
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d3e:	6979      	ldr	r1, [r7, #20]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	e841 2300 	strex	r3, r2, [r1]
 8001d46:	613b      	str	r3, [r7, #16]
   return(result);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e6      	bne.n	8001d1c <HAL_UARTEx_RxEventCallback+0x78>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001d4e:	2264      	movs	r2, #100	@ 0x64
 8001d50:	490a      	ldr	r1, [pc, #40]	@ (8001d7c <HAL_UARTEx_RxEventCallback+0xd8>)
 8001d52:	480c      	ldr	r0, [pc, #48]	@ (8001d84 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001d54:	f006 f978 	bl	8008048 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001d58:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0204 	bic.w	r2, r2, #4
 8001d66:	601a      	str	r2, [r3, #0]

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8001d68:	bf00      	nop
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000bbc 	.word	0x20000bbc
 8001d74:	40013800 	.word	0x40013800
 8001d78:	200003db 	.word	0x200003db
 8001d7c:	20000bc0 	.word	0x20000bc0
 8001d80:	2000103c 	.word	0x2000103c
 8001d84:	2000109c 	.word	0x2000109c

08001d88 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	@ (8001db4 <HAL_UART_TxCpltCallback+0x2c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d107      	bne.n	8001daa <HAL_UART_TxCpltCallback+0x22>
  {
    IOL_DISABLE;
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2140      	movs	r1, #64	@ 0x40
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da2:	f001 f937 	bl	8003014 <HAL_GPIO_WritePin>
    
    IOL_Clear_PDBuffer();
 8001da6:	f7ff f9d3 	bl	8001150 <IOL_Clear_PDBuffer>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40013800 	.word	0x40013800

08001db8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e00a      	b.n	8001de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dca:	f3af 8000 	nop.w
 8001dce:	4601      	mov	r1, r0
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	b2ca      	uxtb	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf0      	blt.n	8001dca <_read+0x12>
  }

  return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_isatty>:

int _isatty(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e64:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <_sbrk+0x5c>)
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <_sbrk+0x60>)
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <_sbrk+0x64>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ec4 <_sbrk+0x68>)
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e8c:	f00a fbd2 	bl	800c634 <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	220c      	movs	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	e009      	b.n	8001eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <_sbrk+0x64>)
 8001eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20008000 	.word	0x20008000
 8001ebc:	00000400 	.word	0x00000400
 8001ec0:	200003dc 	.word	0x200003dc
 8001ec4:	20002a70 	.word	0x20002a70

08001ec8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f0a:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <MX_TIM1_Init+0xa0>)
 8001f0c:	4a20      	ldr	r2, [pc, #128]	@ (8001f90 <MX_TIM1_Init+0xa4>)
 8001f0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001f10:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <MX_TIM1_Init+0xa0>)
 8001f12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <MX_TIM1_Init+0xa0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <MX_TIM1_Init+0xa0>)
 8001f20:	22a9      	movs	r2, #169	@ 0xa9
 8001f22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f24:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <MX_TIM1_Init+0xa0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f2a:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <MX_TIM1_Init+0xa0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <MX_TIM1_Init+0xa0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f36:	4815      	ldr	r0, [pc, #84]	@ (8001f8c <MX_TIM1_Init+0xa0>)
 8001f38:	f003 fd94 	bl	8005a64 <HAL_TIM_Base_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001f42:	f7ff fca2 	bl	800188a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	480e      	ldr	r0, [pc, #56]	@ (8001f8c <MX_TIM1_Init+0xa0>)
 8001f54:	f003 ff98 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001f5e:	f7ff fc94 	bl	800188a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4806      	ldr	r0, [pc, #24]	@ (8001f8c <MX_TIM1_Init+0xa0>)
 8001f74:	f004 f9e2 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f7e:	f7ff fc84 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000ff0 	.word	0x20000ff0
 8001f90:	40012c00 	.word	0x40012c00

08001f94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x44>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d113      	bne.n	8001fce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <HAL_TIM_Base_MspInit+0x48>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001faa:	4a0c      	ldr	r2, [pc, #48]	@ (8001fdc <HAL_TIM_Base_MspInit+0x48>)
 8001fac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <HAL_TIM_Base_MspInit+0x48>)
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2019      	movs	r0, #25
 8001fc4:	f000 fb3d 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fc8:	2019      	movs	r0, #25
 8001fca:	f000 fb54 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fe4:	4b23      	ldr	r3, [pc, #140]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8001fe6:	4a24      	ldr	r2, [pc, #144]	@ (8002078 <MX_USART1_UART_Init+0x98>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001fea:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8001fec:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001ff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001ff2:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8001ff4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ff8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002000:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8002002:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002006:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002008:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 800200a:	220c      	movs	r2, #12
 800200c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200e:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002014:	4b17      	ldr	r3, [pc, #92]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800201a:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002020:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8002022:	2200      	movs	r2, #0
 8002024:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002026:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800202c:	4811      	ldr	r0, [pc, #68]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 800202e:	f004 fa4d 	bl	80064cc <HAL_UART_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002038:	f7ff fc27 	bl	800188a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800203c:	2100      	movs	r1, #0
 800203e:	480d      	ldr	r0, [pc, #52]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8002040:	f005 ff86 	bl	8007f50 <HAL_UARTEx_SetTxFifoThreshold>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800204a:	f7ff fc1e 	bl	800188a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800204e:	2100      	movs	r1, #0
 8002050:	4808      	ldr	r0, [pc, #32]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8002052:	f005 ffbb 	bl	8007fcc <HAL_UARTEx_SetRxFifoThreshold>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 800205c:	f7ff fc15 	bl	800188a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	@ (8002074 <MX_USART1_UART_Init+0x94>)
 8002062:	f005 ff3c 	bl	8007ede <HAL_UARTEx_DisableFifoMode>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 800206c:	f7ff fc0d 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	2000109c 	.word	0x2000109c
 8002078:	40013800 	.word	0x40013800

0800207c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b09a      	sub	sp, #104	@ 0x68
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	2244      	movs	r2, #68	@ 0x44
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f00a fa7b 	bl	800c598 <memset>
  if(uartHandle->Instance==USART1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a38      	ldr	r2, [pc, #224]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d169      	bne.n	8002180 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fae3 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020c4:	f7ff fbe1 	bl	800188a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c8:	4b30      	ldr	r3, [pc, #192]	@ (800218c <HAL_UART_MspInit+0x110>)
 80020ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020cc:	4a2f      	ldr	r2, [pc, #188]	@ (800218c <HAL_UART_MspInit+0x110>)
 80020ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80020d4:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <HAL_UART_MspInit+0x110>)
 80020d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_UART_MspInit+0x110>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e4:	4a29      	ldr	r2, [pc, #164]	@ (800218c <HAL_UART_MspInit+0x110>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ec:	4b27      	ldr	r3, [pc, #156]	@ (800218c <HAL_UART_MspInit+0x110>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800210a:	2307      	movs	r3, #7
 800210c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002112:	4619      	mov	r1, r3
 8002114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002118:	f000 fdfa 	bl	8002d10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800211c:	4b1c      	ldr	r3, [pc, #112]	@ (8002190 <HAL_UART_MspInit+0x114>)
 800211e:	4a1d      	ldr	r2, [pc, #116]	@ (8002194 <HAL_UART_MspInit+0x118>)
 8002120:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002122:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_UART_MspInit+0x114>)
 8002124:	2218      	movs	r2, #24
 8002126:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002128:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <HAL_UART_MspInit+0x114>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800212e:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <HAL_UART_MspInit+0x114>)
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002134:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <HAL_UART_MspInit+0x114>)
 8002136:	2280      	movs	r2, #128	@ 0x80
 8002138:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_UART_MspInit+0x114>)
 800213c:	2200      	movs	r2, #0
 800213e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002140:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <HAL_UART_MspInit+0x114>)
 8002142:	2200      	movs	r2, #0
 8002144:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002146:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_UART_MspInit+0x114>)
 8002148:	2200      	movs	r2, #0
 800214a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_UART_MspInit+0x114>)
 800214e:	2200      	movs	r2, #0
 8002150:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002152:	480f      	ldr	r0, [pc, #60]	@ (8002190 <HAL_UART_MspInit+0x114>)
 8002154:	f000 faaa 	bl	80026ac <HAL_DMA_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800215e:	f7ff fb94 	bl	800188a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <HAL_UART_MspInit+0x114>)
 8002166:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800216a:	4a09      	ldr	r2, [pc, #36]	@ (8002190 <HAL_UART_MspInit+0x114>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	2025      	movs	r0, #37	@ 0x25
 8002176:	f000 fa64 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800217a:	2025      	movs	r0, #37	@ 0x25
 800217c:	f000 fa7b 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002180:	bf00      	nop
 8002182:	3768      	adds	r7, #104	@ 0x68
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40013800 	.word	0x40013800
 800218c:	40021000 	.word	0x40021000
 8002190:	2000103c 	.word	0x2000103c
 8002194:	40020008 	.word	0x40020008

08002198 <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	4803      	ldr	r0, [pc, #12]	@ (80021bc <_write+0x24>)
 80021ae:	f7ff fb91 	bl	80018d4 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 80021b2:	687b      	ldr	r3, [r7, #4]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20001130 	.word	0x20001130

080021c0 <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 80021c4:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <User_Toggle_Led+0x24>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021cc:	d307      	bcc.n	80021de <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 80021ce:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <User_Toggle_Led+0x24>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 80021d4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80021d8:	4803      	ldr	r0, [pc, #12]	@ (80021e8 <User_Toggle_Led+0x28>)
 80021da:	f000 ff33 	bl	8003044 <HAL_GPIO_TogglePin>
    }
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200003e0 	.word	0x200003e0
 80021e8:	48000800 	.word	0x48000800

080021ec <ProcessDataIn_IncreaseCntValue>:

void ProcessDataIn_IncreaseCntValue (void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
    if ( TIM1_CNT_2 >= 1000)
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <ProcessDataIn_IncreaseCntValue+0x34>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021f8:	d310      	bcc.n	800221c <ProcessDataIn_IncreaseCntValue+0x30>
    {
        TIM1_CNT_2 = 0;
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <ProcessDataIn_IncreaseCntValue+0x34>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
        ProcessDataIn_cnt++;
 8002200:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <ProcessDataIn_IncreaseCntValue+0x38>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <ProcessDataIn_IncreaseCntValue+0x38>)
 800220a:	701a      	strb	r2, [r3, #0]

        printf("Master to Device Temp Value :   %d\r\n", Test_M2D_TempValue);
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <ProcessDataIn_IncreaseCntValue+0x3c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	4806      	ldr	r0, [pc, #24]	@ (800222c <ProcessDataIn_IncreaseCntValue+0x40>)
 8002214:	f00a f878 	bl	800c308 <iprintf>
        IOL_Print_ParsingM2Ddata();
 8002218:	f7fe feaa 	bl	8000f70 <IOL_Print_ParsingM2Ddata>
    }
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200003e4 	.word	0x200003e4
 8002224:	200003e8 	.word	0x200003e8
 8002228:	20000c24 	.word	0x20000c24
 800222c:	0800d120 	.word	0x0800d120

08002230 <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8002234:	480c      	ldr	r0, [pc, #48]	@ (8002268 <BootMessagePrint+0x38>)
 8002236:	f00a f8cf 	bl	800c3d8 <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 800223a:	490c      	ldr	r1, [pc, #48]	@ (800226c <BootMessagePrint+0x3c>)
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <BootMessagePrint+0x40>)
 800223e:	f00a f863 	bl	800c308 <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 8002242:	490c      	ldr	r1, [pc, #48]	@ (8002274 <BootMessagePrint+0x44>)
 8002244:	480c      	ldr	r0, [pc, #48]	@ (8002278 <BootMessagePrint+0x48>)
 8002246:	f00a f85f 	bl	800c308 <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 800224a:	490c      	ldr	r1, [pc, #48]	@ (800227c <BootMessagePrint+0x4c>)
 800224c:	480c      	ldr	r0, [pc, #48]	@ (8002280 <BootMessagePrint+0x50>)
 800224e:	f00a f85b 	bl	800c308 <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 8002252:	4a0c      	ldr	r2, [pc, #48]	@ (8002284 <BootMessagePrint+0x54>)
 8002254:	490c      	ldr	r1, [pc, #48]	@ (8002288 <BootMessagePrint+0x58>)
 8002256:	480d      	ldr	r0, [pc, #52]	@ (800228c <BootMessagePrint+0x5c>)
 8002258:	f00a f856 	bl	800c308 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 800225c:	4802      	ldr	r0, [pc, #8]	@ (8002268 <BootMessagePrint+0x38>)
 800225e:	f00a f8bb 	bl	800c3d8 <puts>
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	0800d148 	.word	0x0800d148
 800226c:	0800d190 	.word	0x0800d190
 8002270:	0800d1a0 	.word	0x0800d1a0
 8002274:	0800d1bc 	.word	0x0800d1bc
 8002278:	0800d1c4 	.word	0x0800d1c4
 800227c:	0800d1e0 	.word	0x0800d1e0
 8002280:	0800d1f4 	.word	0x0800d1f4
 8002284:	0800d210 	.word	0x0800d210
 8002288:	0800d21c 	.word	0x0800d21c
 800228c:	0800d228 	.word	0x0800d228

08002290 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8002294:	4819      	ldr	r0, [pc, #100]	@ (80022fc <GetClockSourcePrint+0x6c>)
 8002296:	f00a f89f 	bl	800c3d8 <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 800229a:	f003 f913 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <GetClockSourcePrint+0x70>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0c9b      	lsrs	r3, r3, #18
 80022a8:	4619      	mov	r1, r3
 80022aa:	4816      	ldr	r0, [pc, #88]	@ (8002304 <GetClockSourcePrint+0x74>)
 80022ac:	f00a f82c 	bl	800c308 <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 80022b0:	f003 f96a 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <GetClockSourcePrint+0x70>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	0c9b      	lsrs	r3, r3, #18
 80022be:	4619      	mov	r1, r3
 80022c0:	4811      	ldr	r0, [pc, #68]	@ (8002308 <GetClockSourcePrint+0x78>)
 80022c2:	f00a f821 	bl	800c308 <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 80022c6:	f003 f96b 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002300 <GetClockSourcePrint+0x70>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9b      	lsrs	r3, r3, #18
 80022d4:	4619      	mov	r1, r3
 80022d6:	480d      	ldr	r0, [pc, #52]	@ (800230c <GetClockSourcePrint+0x7c>)
 80022d8:	f00a f816 	bl	800c308 <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 80022dc:	f003 f976 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a07      	ldr	r2, [pc, #28]	@ (8002300 <GetClockSourcePrint+0x70>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	0c9b      	lsrs	r3, r3, #18
 80022ea:	4619      	mov	r1, r3
 80022ec:	4808      	ldr	r0, [pc, #32]	@ (8002310 <GetClockSourcePrint+0x80>)
 80022ee:	f00a f80b 	bl	800c308 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 80022f2:	4802      	ldr	r0, [pc, #8]	@ (80022fc <GetClockSourcePrint+0x6c>)
 80022f4:	f00a f870 	bl	800c3d8 <puts>
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	0800d148 	.word	0x0800d148
 8002300:	431bde83 	.word	0x431bde83
 8002304:	0800d248 	.word	0x0800d248
 8002308:	0800d278 	.word	0x0800d278
 800230c:	0800d2a8 	.word	0x0800d2a8
 8002310:	0800d2d8 	.word	0x0800d2d8

08002314 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002314:	480d      	ldr	r0, [pc, #52]	@ (800234c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002316:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002318:	f7ff fdd6 	bl	8001ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800231c:	480c      	ldr	r0, [pc, #48]	@ (8002350 <LoopForever+0x6>)
  ldr r1, =_edata
 800231e:	490d      	ldr	r1, [pc, #52]	@ (8002354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002320:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <LoopForever+0xe>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002324:	e002      	b.n	800232c <LoopCopyDataInit>

08002326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232a:	3304      	adds	r3, #4

0800232c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800232c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002330:	d3f9      	bcc.n	8002326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002332:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002334:	4c0a      	ldr	r4, [pc, #40]	@ (8002360 <LoopForever+0x16>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002338:	e001      	b.n	800233e <LoopFillZerobss>

0800233a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800233c:	3204      	adds	r2, #4

0800233e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002340:	d3fb      	bcc.n	800233a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002342:	f00a f97d 	bl	800c640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002346:	f7ff fa15 	bl	8001774 <main>

0800234a <LoopForever>:

LoopForever:
    b LoopForever
 800234a:	e7fe      	b.n	800234a <LoopForever>
  ldr   r0, =_estack
 800234c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002354:	20000388 	.word	0x20000388
  ldr r2, =_sidata
 8002358:	0800d3d4 	.word	0x0800d3d4
  ldr r2, =_sbss
 800235c:	20000388 	.word	0x20000388
  ldr r4, =_ebss
 8002360:	20002a6c 	.word	0x20002a6c

08002364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <ADC1_2_IRQHandler>

08002366 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002370:	2003      	movs	r0, #3
 8002372:	f000 f95b 	bl	800262c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002376:	200f      	movs	r0, #15
 8002378:	f000 f80e 	bl	8002398 <HAL_InitTick>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	71fb      	strb	r3, [r7, #7]
 8002386:	e001      	b.n	800238c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002388:	f7ff fbac 	bl	8001ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800238c:	79fb      	ldrb	r3, [r7, #7]

}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023a4:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <HAL_InitTick+0x68>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d022      	beq.n	80023f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023ac:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <HAL_InitTick+0x6c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <HAL_InitTick+0x68>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f966 	bl	8002692 <HAL_SYSTICK_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10f      	bne.n	80023ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	d809      	bhi.n	80023e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d2:	2200      	movs	r2, #0
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	f04f 30ff 	mov.w	r0, #4294967295
 80023da:	f000 f932 	bl	8002642 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023de:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <HAL_InitTick+0x70>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	e007      	b.n	80023f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	e004      	b.n	80023f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	e001      	b.n	80023f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	200001b0 	.word	0x200001b0
 8002404:	200001a8 	.word	0x200001a8
 8002408:	200001ac 	.word	0x200001ac

0800240c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_IncTick+0x1c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <HAL_IncTick+0x20>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4413      	add	r3, r2
 800241a:	4a03      	ldr	r2, [pc, #12]	@ (8002428 <HAL_IncTick+0x1c>)
 800241c:	6013      	str	r3, [r2, #0]
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	20001abc 	.word	0x20001abc
 800242c:	200001b0 	.word	0x200001b0

08002430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return uwTick;
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_GetTick+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20001abc 	.word	0x20001abc

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff ffee 	bl	8002430 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d004      	beq.n	800246c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_Delay+0x40>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4413      	add	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800246c:	bf00      	nop
 800246e:	f7ff ffdf 	bl	8002430 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	429a      	cmp	r2, r3
 800247c:	d8f7      	bhi.n	800246e <HAL_Delay+0x26>
  {
  }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	200001b0 	.word	0x200001b0

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4907      	ldr	r1, [pc, #28]	@ (8002528 <__NVIC_EnableIRQ+0x38>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	@ (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	@ (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	@ 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	@ 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f8:	d301      	bcc.n	80025fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00f      	b.n	800261e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <SysTick_Config+0x40>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002606:	210f      	movs	r1, #15
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f7ff ff8e 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002610:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <SysTick_Config+0x40>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002616:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <SysTick_Config+0x40>)
 8002618:	2207      	movs	r2, #7
 800261a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	e000e010 	.word	0xe000e010

0800262c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff29 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff40 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff90 	bl	8002580 <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5f 	bl	800252c <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff33 	bl	80024f0 <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa4 	bl	80025e8 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e08d      	b.n	80027da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b47      	ldr	r3, [pc, #284]	@ (80027e4 <HAL_DMA_Init+0x138>)
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d80f      	bhi.n	80026ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b45      	ldr	r3, [pc, #276]	@ (80027e8 <HAL_DMA_Init+0x13c>)
 80026d2:	4413      	add	r3, r2
 80026d4:	4a45      	ldr	r2, [pc, #276]	@ (80027ec <HAL_DMA_Init+0x140>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	009a      	lsls	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a42      	ldr	r2, [pc, #264]	@ (80027f0 <HAL_DMA_Init+0x144>)
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026e8:	e00e      	b.n	8002708 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	4b40      	ldr	r3, [pc, #256]	@ (80027f4 <HAL_DMA_Init+0x148>)
 80026f2:	4413      	add	r3, r2
 80026f4:	4a3d      	ldr	r2, [pc, #244]	@ (80027ec <HAL_DMA_Init+0x140>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	009a      	lsls	r2, r3, #2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a3c      	ldr	r2, [pc, #240]	@ (80027f8 <HAL_DMA_Init+0x14c>)
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800271e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002722:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800272c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa76 	bl	8002c4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002768:	d102      	bne.n	8002770 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002784:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d010      	beq.n	80027b0 <HAL_DMA_Init+0x104>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d80c      	bhi.n	80027b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fa96 	bl	8002cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	e008      	b.n	80027c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40020407 	.word	0x40020407
 80027e8:	bffdfff8 	.word	0xbffdfff8
 80027ec:	cccccccd 	.word	0xcccccccd
 80027f0:	40020000 	.word	0x40020000
 80027f4:	bffdfbf8 	.word	0xbffdfbf8
 80027f8:	40020400 	.word	0x40020400

080027fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_DMA_Start_IT+0x20>
 8002818:	2302      	movs	r3, #2
 800281a:	e066      	b.n	80028ea <HAL_DMA_Start_IT+0xee>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d155      	bne.n	80028dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f9bb 	bl	8002bd0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 020e 	orr.w	r2, r2, #14
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e00f      	b.n	8002894 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0204 	bic.w	r2, r2, #4
 8002882:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 020a 	orr.w	r2, r2, #10
 8002892:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e005      	b.n	80028e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
 80028e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d005      	beq.n	8002916 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2204      	movs	r2, #4
 800290e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	e037      	b.n	8002986 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 020e 	bic.w	r2, r2, #14
 8002924:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002930:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002934:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	f003 021f 	and.w	r2, r3, #31
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002962:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00c      	beq.n	8002986 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002976:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800297a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002984:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d00d      	beq.n	80029d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2204      	movs	r2, #4
 80029c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e047      	b.n	8002a68 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 020e 	bic.w	r2, r2, #14
 80029e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00c      	beq.n	8002a48 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
    }
  }
  return status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2204      	movs	r2, #4
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d026      	beq.n	8002aec <HAL_DMA_IRQHandler+0x7a>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d021      	beq.n	8002aec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0204 	bic.w	r2, r2, #4
 8002ac4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f003 021f 	and.w	r2, r3, #31
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d071      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002aea:	e06c      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2202      	movs	r2, #2
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d02e      	beq.n	8002b5e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d029      	beq.n	8002b5e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 020a 	bic.w	r2, r2, #10
 8002b26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d038      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b5c:	e033      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2208      	movs	r2, #8
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d02a      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d025      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 020e 	bic.w	r2, r2, #14
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bc6:	bf00      	nop
 8002bc8:	bf00      	nop
}
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002be6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002bf8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	f003 021f 	and.w	r2, r3, #31
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d108      	bne.n	8002c30 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c2e:	e007      	b.n	8002c40 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b16      	ldr	r3, [pc, #88]	@ (8002cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d802      	bhi.n	8002c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002c60:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e001      	b.n	8002c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c68:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	3b08      	subs	r3, #8
 8002c76:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	009a      	lsls	r2, r3, #2
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40020407 	.word	0x40020407
 8002cb8:	40020800 	.word	0x40020800
 8002cbc:	40020820 	.word	0x40020820
 8002cc0:	cccccccd 	.word	0xcccccccd
 8002cc4:	40020880 	.word	0x40020880

08002cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a08      	ldr	r2, [pc, #32]	@ (8002d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002cea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	1000823f 	.word	0x1000823f
 8002d0c:	40020940 	.word	0x40020940

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d1e:	e15a      	b.n	8002fd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2101      	movs	r1, #1
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 814c 	beq.w	8002fd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d005      	beq.n	8002d50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d130      	bne.n	8002db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d86:	2201      	movs	r2, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	f003 0201 	and.w	r2, r3, #1
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d017      	beq.n	8002dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	2203      	movs	r2, #3
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d123      	bne.n	8002e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	08da      	lsrs	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3208      	adds	r2, #8
 8002e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	220f      	movs	r2, #15
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	6939      	ldr	r1, [r7, #16]
 8002e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0203 	and.w	r2, r3, #3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80a6 	beq.w	8002fd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e84:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff4 <HAL_GPIO_Init+0x2e4>)
 8002e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e88:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff4 <HAL_GPIO_Init+0x2e4>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e90:	4b58      	ldr	r3, [pc, #352]	@ (8002ff4 <HAL_GPIO_Init+0x2e4>)
 8002e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9c:	4a56      	ldr	r2, [pc, #344]	@ (8002ff8 <HAL_GPIO_Init+0x2e8>)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ec6:	d01f      	beq.n	8002f08 <HAL_GPIO_Init+0x1f8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a4c      	ldr	r2, [pc, #304]	@ (8002ffc <HAL_GPIO_Init+0x2ec>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d019      	beq.n	8002f04 <HAL_GPIO_Init+0x1f4>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a4b      	ldr	r2, [pc, #300]	@ (8003000 <HAL_GPIO_Init+0x2f0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_GPIO_Init+0x1f0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a4a      	ldr	r2, [pc, #296]	@ (8003004 <HAL_GPIO_Init+0x2f4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00d      	beq.n	8002efc <HAL_GPIO_Init+0x1ec>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a49      	ldr	r2, [pc, #292]	@ (8003008 <HAL_GPIO_Init+0x2f8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <HAL_GPIO_Init+0x1e8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a48      	ldr	r2, [pc, #288]	@ (800300c <HAL_GPIO_Init+0x2fc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_GPIO_Init+0x1e4>
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	e00a      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002ef4:	2306      	movs	r3, #6
 8002ef6:	e008      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e006      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002efc:	2303      	movs	r3, #3
 8002efe:	e004      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e002      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	f002 0203 	and.w	r2, r2, #3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4093      	lsls	r3, r2
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f1a:	4937      	ldr	r1, [pc, #220]	@ (8002ff8 <HAL_GPIO_Init+0x2e8>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f28:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f4c:	4a30      	ldr	r2, [pc, #192]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f52:	4b2f      	ldr	r3, [pc, #188]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f76:	4a26      	ldr	r2, [pc, #152]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f7c:	4b24      	ldr	r3, [pc, #144]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fca:	4a11      	ldr	r2, [pc, #68]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f47f ae9d 	bne.w	8002d20 <HAL_GPIO_Init+0x10>
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	48000400 	.word	0x48000400
 8003000:	48000800 	.word	0x48000800
 8003004:	48000c00 	.word	0x48000c00
 8003008:	48001000 	.word	0x48001000
 800300c:	48001400 	.word	0x48001400
 8003010:	40010400 	.word	0x40010400

08003014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003024:	787b      	ldrb	r3, [r7, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003030:	e002      	b.n	8003038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4013      	ands	r3, r2
 800305c:	041a      	lsls	r2, r3, #16
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	43d9      	mvns	r1, r3
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	400b      	ands	r3, r1
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003082:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d006      	beq.n	800309c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800308e:	4a05      	ldr	r2, [pc, #20]	@ (80030a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f806 	bl	80030a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40010400 	.word	0x40010400

080030a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0c0      	b.n	8003252 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f008 fd49 	bl	800bb7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2203      	movs	r2, #3
 80030ee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f005 f85f 	bl	80081ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	e03e      	b.n	8003180 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	3311      	adds	r3, #17
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	440b      	add	r3, r1
 8003124:	3310      	adds	r3, #16
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	3313      	adds	r3, #19
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	3320      	adds	r3, #32
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	3324      	adds	r3, #36	@ 0x24
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	3301      	adds	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	791b      	ldrb	r3, [r3, #4]
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	429a      	cmp	r2, r3
 8003188:	d3bb      	bcc.n	8003102 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	e044      	b.n	800321a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	3301      	adds	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	791b      	ldrb	r3, [r3, #4]
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	429a      	cmp	r2, r3
 8003222:	d3b5      	bcc.n	8003190 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003230:	f004 ffde 	bl	80081f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7a9b      	ldrb	r3, [r3, #10]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d102      	bne.n	8003250 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f001 fc0e 	bl	8004a6c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_PCD_Start+0x16>
 800326c:	2302      	movs	r3, #2
 800326e:	e012      	b.n	8003296 <HAL_PCD_Start+0x3c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f004 ff85 	bl	800818c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f006 fd62 	bl	8009d50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f006 fd67 	bl	8009d7e <USB_ReadInterrupts>
 80032b0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fb06 	bl	80038ce <PCD_EP_ISR_Handler>

    return;
 80032c2:	e110      	b.n	80034e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d013      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e0:	b292      	uxth	r2, r2
 80032e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f008 fcd9 	bl	800bc9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80032ec:	2100      	movs	r1, #0
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8fc 	bl	80034ec <HAL_PCD_SetAddress>

    return;
 80032f4:	e0f7      	b.n	80034e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00c      	beq.n	800331a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003308:	b29a      	uxth	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003312:	b292      	uxth	r2, r2
 8003314:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003318:	e0e5      	b.n	80034e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00c      	beq.n	800333e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800332c:	b29a      	uxth	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003336:	b292      	uxth	r2, r2
 8003338:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800333c:	e0d3      	b.n	80034e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d034      	beq.n	80033b2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003350:	b29a      	uxth	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	b292      	uxth	r2, r2
 800335c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003368:	b29a      	uxth	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0208 	bic.w	r2, r2, #8
 8003372:	b292      	uxth	r2, r2
 8003374:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800338a:	2100      	movs	r1, #0
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f008 fe79 	bl	800c084 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f008 fcbc 	bl	800bd10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033aa:	b292      	uxth	r2, r2
 80033ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80033b0:	e099      	b.n	80034e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d027      	beq.n	800340c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0208 	orr.w	r2, r2, #8
 80033ce:	b292      	uxth	r2, r2
 80033d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033dc:	b29a      	uxth	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033e6:	b292      	uxth	r2, r2
 80033e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0204 	orr.w	r2, r2, #4
 80033fe:	b292      	uxth	r2, r2
 8003400:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f008 fc69 	bl	800bcdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800340a:	e06c      	b.n	80034e6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003412:	2b00      	cmp	r3, #0
 8003414:	d040      	beq.n	8003498 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003428:	b292      	uxth	r2, r2
 800342a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d12b      	bne.n	8003490 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003440:	b29a      	uxth	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0204 	orr.w	r2, r2, #4
 800344a:	b292      	uxth	r2, r2
 800344c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003458:	b29a      	uxth	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0208 	orr.w	r2, r2, #8
 8003462:	b292      	uxth	r2, r2
 8003464:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003478:	b29b      	uxth	r3, r3
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003486:	2101      	movs	r1, #1
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f008 fdfb 	bl	800c084 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800348e:	e02a      	b.n	80034e6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f008 fc23 	bl	800bcdc <HAL_PCD_SuspendCallback>
    return;
 8003496:	e026      	b.n	80034e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00f      	beq.n	80034c2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034b4:	b292      	uxth	r2, r2
 80034b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f008 fbe1 	bl	800bc82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80034c0:	e011      	b.n	80034e6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00c      	beq.n	80034e6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034de:	b292      	uxth	r2, r2
 80034e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80034e4:	bf00      	nop
  }
}
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_PCD_SetAddress+0x1a>
 8003502:	2302      	movs	r3, #2
 8003504:	e012      	b.n	800352c <HAL_PCD_SetAddress+0x40>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f006 fc03 	bl	8009d28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	4608      	mov	r0, r1
 800353e:	4611      	mov	r1, r2
 8003540:	461a      	mov	r2, r3
 8003542:	4603      	mov	r3, r0
 8003544:	70fb      	strb	r3, [r7, #3]
 8003546:	460b      	mov	r3, r1
 8003548:	803b      	strh	r3, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003556:	2b00      	cmp	r3, #0
 8003558:	da0e      	bge.n	8003578 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	f003 0207 	and.w	r2, r3, #7
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	3310      	adds	r3, #16
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	705a      	strb	r2, [r3, #1]
 8003576:	e00e      	b.n	8003596 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	f003 0207 	and.w	r2, r3, #7
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80035a2:	883b      	ldrh	r3, [r7, #0]
 80035a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	78ba      	ldrb	r2, [r7, #2]
 80035b0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035b2:	78bb      	ldrb	r3, [r7, #2]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d102      	bne.n	80035be <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_PCD_EP_Open+0x98>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e00e      	b.n	80035ea <HAL_PCD_EP_Open+0xb6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	4618      	mov	r0, r3
 80035dc:	f004 fe26 	bl	800822c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80035e8:	7afb      	ldrb	r3, [r7, #11]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003602:	2b00      	cmp	r3, #0
 8003604:	da0e      	bge.n	8003624 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 0207 	and.w	r2, r3, #7
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	3310      	adds	r3, #16
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	705a      	strb	r2, [r3, #1]
 8003622:	e00e      	b.n	8003642 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	f003 0207 	and.w	r2, r3, #7
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_PCD_EP_Close+0x6a>
 8003658:	2302      	movs	r3, #2
 800365a:	e00e      	b.n	800367a <HAL_PCD_EP_Close+0x88>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	4618      	mov	r0, r3
 800366c:	f005 fac6 	bl	8008bfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	460b      	mov	r3, r1
 8003690:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	f003 0207 	and.w	r2, r3, #7
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c2:	7afb      	ldrb	r3, [r7, #11]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f005 fc7e 	bl	8008fd6 <USB_EPStartXfer>

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 0207 	and.w	r2, r3, #7
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	440b      	add	r3, r1
 8003702:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	460b      	mov	r3, r1
 8003722:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	f003 0207 	and.w	r2, r3, #7
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	3310      	adds	r3, #16
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2200      	movs	r2, #0
 8003758:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2201      	movs	r2, #1
 800375e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003760:	7afb      	ldrb	r3, [r7, #11]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	b2da      	uxtb	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6979      	ldr	r1, [r7, #20]
 8003772:	4618      	mov	r0, r3
 8003774:	f005 fc2f 	bl	8008fd6 <USB_EPStartXfer>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	7912      	ldrb	r2, [r2, #4]
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e03e      	b.n	800381e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	da0e      	bge.n	80037c6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	f003 0207 	and.w	r2, r3, #7
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	3310      	adds	r3, #16
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	705a      	strb	r2, [r3, #1]
 80037c4:	e00c      	b.n	80037e0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_PCD_EP_SetStall+0x7e>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e00e      	b.n	800381e <HAL_PCD_EP_SetStall+0x9c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68f9      	ldr	r1, [r7, #12]
 800380e:	4618      	mov	r0, r3
 8003810:	f006 f990 	bl	8009b34 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	7912      	ldrb	r2, [r2, #4]
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e040      	b.n	80038c6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003848:	2b00      	cmp	r3, #0
 800384a:	da0e      	bge.n	800386a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	f003 0207 	and.w	r2, r3, #7
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	3310      	adds	r3, #16
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	705a      	strb	r2, [r3, #1]
 8003868:	e00e      	b.n	8003888 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 0207 	and.w	r2, r3, #7
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	b2da      	uxtb	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_PCD_EP_ClrStall+0x82>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e00e      	b.n	80038c6 <HAL_PCD_EP_ClrStall+0xa0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68f9      	ldr	r1, [r7, #12]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f006 f98d 	bl	8009bd6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b092      	sub	sp, #72	@ 0x48
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038d6:	e333      	b.n	8003f40 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038e0:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80038e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80038ee:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 8108 	bne.w	8003b08 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80038f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d14c      	bne.n	800399c <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	b29b      	uxth	r3, r3
 800390a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800390e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003912:	813b      	strh	r3, [r7, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	893b      	ldrh	r3, [r7, #8]
 800391a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800391e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003922:	b29b      	uxth	r3, r3
 8003924:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3310      	adds	r3, #16
 800392a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003934:	b29b      	uxth	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	4413      	add	r3, r2
 8003946:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003952:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	441a      	add	r2, r3
 800395e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003960:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003962:	2100      	movs	r1, #0
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f008 f972 	bl	800bc4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	7b1b      	ldrb	r3, [r3, #12]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 82e5 	beq.w	8003f40 <PCD_EP_ISR_Handler+0x672>
 8003976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 82e0 	bne.w	8003f40 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	7b1b      	ldrb	r3, [r3, #12]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800398a:	b2da      	uxtb	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	731a      	strb	r2, [r3, #12]
 800399a:	e2d1      	b.n	8003f40 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039a2:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80039ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d032      	beq.n	8003a1c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039be:	b29b      	uxth	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	4413      	add	r3, r2
 80039d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039dc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80039e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80039ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f006 fa16 	bl	8009e22 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003a02:	4013      	ands	r3, r2
 8003a04:	817b      	strh	r3, [r7, #10]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	897a      	ldrh	r2, [r7, #10]
 8003a0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a10:	b292      	uxth	r2, r2
 8003a12:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f008 f8ed 	bl	800bbf4 <HAL_PCD_SetupStageCallback>
 8003a1a:	e291      	b.n	8003f40 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a1c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f280 828d 	bge.w	8003f40 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003a32:	4013      	ands	r3, r2
 8003a34:	81fb      	strh	r3, [r7, #14]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	89fa      	ldrh	r2, [r7, #14]
 8003a3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a40:	b292      	uxth	r2, r2
 8003a42:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a6a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d019      	beq.n	8003aa8 <PCD_EP_ISR_Handler+0x1da>
 8003a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d015      	beq.n	8003aa8 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a82:	6959      	ldr	r1, [r3, #20]
 8003a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a86:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f006 f9c8 	bl	8009e22 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	441a      	add	r2, r3
 8003a9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a9e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f008 f8b8 	bl	800bc18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ab0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f040 8242 	bne.w	8003f40 <PCD_EP_ISR_Handler+0x672>
 8003abc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003abe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ac2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ac6:	f000 823b 	beq.w	8003f40 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	81bb      	strh	r3, [r7, #12]
 8003adc:	89bb      	ldrh	r3, [r7, #12]
 8003ade:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003ae2:	81bb      	strh	r3, [r7, #12]
 8003ae4:	89bb      	ldrh	r3, [r7, #12]
 8003ae6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003aea:	81bb      	strh	r3, [r7, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	89bb      	ldrh	r3, [r7, #12]
 8003af2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003af6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	8013      	strh	r3, [r2, #0]
 8003b06:	e21b      	b.n	8003f40 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b1a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f280 80f1 	bge.w	8003d06 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b52:	b292      	uxth	r2, r2
 8003b54:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b56:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6e:	7b1b      	ldrb	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d123      	bne.n	8003bbc <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b98:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003b9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 808b 	beq.w	8003cbc <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bac:	6959      	ldr	r1, [r3, #20]
 8003bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb0:	88da      	ldrh	r2, [r3, #6]
 8003bb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003bb6:	f006 f934 	bl	8009e22 <USB_ReadPMA>
 8003bba:	e07f      	b.n	8003cbc <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bbe:	78db      	ldrb	r3, [r3, #3]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d109      	bne.n	8003bd8 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003bc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f9c6 	bl	8003f5c <HAL_PCD_EP_DB_Receive>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003bd6:	e071      	b.n	8003cbc <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	441a      	add	r2, r3
 8003c02:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d022      	beq.n	8003c78 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c56:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003c5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02c      	beq.n	8003cbc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c68:	6959      	ldr	r1, [r3, #20]
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c6c:	891a      	ldrh	r2, [r3, #8]
 8003c6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003c72:	f006 f8d6 	bl	8009e22 <USB_ReadPMA>
 8003c76:	e021      	b.n	8003cbc <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003ca0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cae:	6959      	ldr	r1, [r3, #20]
 8003cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb2:	895a      	ldrh	r2, [r3, #10]
 8003cb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003cb8:	f006 f8b3 	bl	8009e22 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003cc4:	441a      	add	r2, r3
 8003cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003cd2:	441a      	add	r2, r3
 8003cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <PCD_EP_ISR_Handler+0x41e>
 8003ce0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d206      	bcs.n	8003cfa <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f007 ff90 	bl	800bc18 <HAL_PCD_DataOutStageCallback>
 8003cf8:	e005      	b.n	8003d06 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d00:	4618      	mov	r0, r3
 8003d02:	f005 f968 	bl	8008fd6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8117 	beq.w	8003f40 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d12:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	3310      	adds	r3, #16
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4413      	add	r3, r2
 8003d24:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d40:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	441a      	add	r2, r3
 8003d50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d60:	78db      	ldrb	r3, [r3, #3]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	f040 80a1 	bne.w	8003eaa <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003d68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d70:	7b1b      	ldrb	r3, [r3, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8092 	beq.w	8003e9c <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d046      	beq.n	8003e10 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d84:	785b      	ldrb	r3, [r3, #1]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d126      	bne.n	8003dd8 <PCD_EP_ISR_Handler+0x50a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4413      	add	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	00da      	lsls	r2, r3, #3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4413      	add	r3, r2
 8003dac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	801a      	strh	r2, [r3, #0]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	801a      	strh	r2, [r3, #0]
 8003dd6:	e061      	b.n	8003e9c <PCD_EP_ISR_Handler+0x5ce>
 8003dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dda:	785b      	ldrb	r3, [r3, #1]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d15d      	bne.n	8003e9c <PCD_EP_ISR_Handler+0x5ce>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	00da      	lsls	r2, r3, #3
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	4413      	add	r3, r2
 8003e02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	801a      	strh	r2, [r3, #0]
 8003e0e:	e045      	b.n	8003e9c <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d126      	bne.n	8003e6c <PCD_EP_ISR_Handler+0x59e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	4413      	add	r3, r2
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	00da      	lsls	r2, r3, #3
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	4413      	add	r3, r2
 8003e40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	801a      	strh	r2, [r3, #0]
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	e017      	b.n	8003e9c <PCD_EP_ISR_Handler+0x5ce>
 8003e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e6e:	785b      	ldrb	r3, [r3, #1]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d113      	bne.n	8003e9c <PCD_EP_ISR_Handler+0x5ce>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e82:	4413      	add	r3, r2
 8003e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	00da      	lsls	r2, r3, #3
 8003e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8e:	4413      	add	r3, r2
 8003e90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	2200      	movs	r2, #0
 8003e9a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f007 fed3 	bl	800bc4e <HAL_PCD_DataInStageCallback>
 8003ea8:	e04a      	b.n	8003f40 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003eaa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d13f      	bne.n	8003f34 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed8:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d906      	bls.n	8003ef2 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003eea:	1ad2      	subs	r2, r2, r3
 8003eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eee:	619a      	str	r2, [r3, #24]
 8003ef0:	e002      	b.n	8003ef8 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	4619      	mov	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f007 fea1 	bl	800bc4e <HAL_PCD_DataInStageCallback>
 8003f0c:	e018      	b.n	8003f40 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003f14:	441a      	add	r2, r3
 8003f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f18:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003f20:	441a      	add	r2, r3
 8003f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f24:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f005 f852 	bl	8008fd6 <USB_EPStartXfer>
 8003f32:	e005      	b.n	8003f40 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003f36:	461a      	mov	r2, r3
 8003f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f917 	bl	800416e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f6ff acc3 	blt.w	80038d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3748      	adds	r7, #72	@ 0x48
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d07c      	beq.n	800406e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f98:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	8b7b      	ldrh	r3, [r7, #26]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d306      	bcc.n	8003fb2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	699a      	ldr	r2, [r3, #24]
 8003fa8:	8b7b      	ldrh	r3, [r7, #26]
 8003faa:	1ad2      	subs	r2, r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	619a      	str	r2, [r3, #24]
 8003fb0:	e002      	b.n	8003fb8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d123      	bne.n	8004008 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fda:	833b      	strh	r3, [r7, #24]
 8003fdc:	8b3b      	ldrh	r3, [r7, #24]
 8003fde:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fe2:	833b      	strh	r3, [r7, #24]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	8b3b      	ldrh	r3, [r7, #24]
 8003ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004004:	b29b      	uxth	r3, r3
 8004006:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01f      	beq.n	8004052 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402c:	82fb      	strh	r3, [r7, #22]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	441a      	add	r2, r3
 800403c:	8afb      	ldrh	r3, [r7, #22]
 800403e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004042:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800404a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800404e:	b29b      	uxth	r3, r3
 8004050:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004052:	8b7b      	ldrh	r3, [r7, #26]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8085 	beq.w	8004164 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6959      	ldr	r1, [r3, #20]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	891a      	ldrh	r2, [r3, #8]
 8004066:	8b7b      	ldrh	r3, [r7, #26]
 8004068:	f005 fedb 	bl	8009e22 <USB_ReadPMA>
 800406c:	e07a      	b.n	8004164 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004076:	b29b      	uxth	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	4413      	add	r3, r2
 8004088:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004092:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	699a      	ldr	r2, [r3, #24]
 8004098:	8b7b      	ldrh	r3, [r7, #26]
 800409a:	429a      	cmp	r2, r3
 800409c:	d306      	bcc.n	80040ac <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	8b7b      	ldrh	r3, [r7, #26]
 80040a4:	1ad2      	subs	r2, r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	619a      	str	r2, [r3, #24]
 80040aa:	e002      	b.n	80040b2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2200      	movs	r2, #0
 80040b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d123      	bne.n	8004102 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d4:	83fb      	strh	r3, [r7, #30]
 80040d6:	8bfb      	ldrh	r3, [r7, #30]
 80040d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80040dc:	83fb      	strh	r3, [r7, #30]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	441a      	add	r2, r3
 80040ec:	8bfb      	ldrh	r3, [r7, #30]
 80040ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d11f      	bne.n	800414c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	83bb      	strh	r3, [r7, #28]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	441a      	add	r2, r3
 8004136:	8bbb      	ldrh	r3, [r7, #28]
 8004138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800413c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004144:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004148:	b29b      	uxth	r3, r3
 800414a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800414c:	8b7b      	ldrh	r3, [r7, #26]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6959      	ldr	r1, [r3, #20]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	895a      	ldrh	r2, [r3, #10]
 800415e:	8b7b      	ldrh	r3, [r7, #26]
 8004160:	f005 fe5f 	bl	8009e22 <USB_ReadPMA>
    }
  }

  return count;
 8004164:	8b7b      	ldrh	r3, [r7, #26]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b0a6      	sub	sp, #152	@ 0x98
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	4613      	mov	r3, r2
 800417a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 81f7 	beq.w	8004576 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004190:	b29b      	uxth	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	4413      	add	r3, r2
 80041a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ac:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d907      	bls.n	80041cc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80041c4:	1ad2      	subs	r2, r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	619a      	str	r2, [r3, #24]
 80041ca:	e002      	b.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f040 80e1 	bne.w	800439e <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d126      	bne.n	8004232 <HAL_PCD_EP_DB_Transmit+0xc4>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	4413      	add	r3, r2
 80041fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	00da      	lsls	r2, r3, #3
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	4413      	add	r3, r2
 8004206:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800420a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800420c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004216:	b29a      	uxth	r2, r3
 8004218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800422a:	b29a      	uxth	r2, r3
 800422c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422e:	801a      	strh	r2, [r3, #0]
 8004230:	e01a      	b.n	8004268 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d116      	bne.n	8004268 <HAL_PCD_EP_DB_Transmit+0xfa>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	4413      	add	r3, r2
 8004250:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	00da      	lsls	r2, r3, #3
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	4413      	add	r3, r2
 800425c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
 8004262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004264:	2200      	movs	r2, #0
 8004266:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d126      	bne.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x156>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004284:	b29b      	uxth	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	4413      	add	r3, r2
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	00da      	lsls	r2, r3, #3
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	4413      	add	r3, r2
 8004298:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042bc:	b29a      	uxth	r2, r3
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	e017      	b.n	80042f4 <HAL_PCD_EP_DB_Transmit+0x186>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d113      	bne.n	80042f4 <HAL_PCD_EP_DB_Transmit+0x186>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	4413      	add	r3, r2
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	00da      	lsls	r2, r3, #3
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	4413      	add	r3, r2
 80042e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	2200      	movs	r2, #0
 80042f2:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	78db      	ldrb	r3, [r3, #3]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d123      	bne.n	8004344 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004316:	837b      	strh	r3, [r7, #26]
 8004318:	8b7b      	ldrh	r3, [r7, #26]
 800431a:	f083 0320 	eor.w	r3, r3, #32
 800431e:	837b      	strh	r3, [r7, #26]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	441a      	add	r2, r3
 800432e:	8b7b      	ldrh	r3, [r7, #26]
 8004330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800433c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004340:	b29b      	uxth	r3, r3
 8004342:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	4619      	mov	r1, r3
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f007 fc7f 	bl	800bc4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01f      	beq.n	800439a <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004374:	833b      	strh	r3, [r7, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	441a      	add	r2, r3
 8004384:	8b3b      	ldrh	r3, [r7, #24]
 8004386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800438a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800438e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004396:	b29b      	uxth	r3, r3
 8004398:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e31f      	b.n	80049de <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d021      	beq.n	80043ec <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	441a      	add	r2, r3
 80043d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80043d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	f040 82ca 	bne.w	800498c <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004400:	441a      	add	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800440e:	441a      	add	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	429a      	cmp	r2, r3
 800441e:	d309      	bcc.n	8004434 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6a1a      	ldr	r2, [r3, #32]
 800442a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800442c:	1ad2      	subs	r2, r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	621a      	str	r2, [r3, #32]
 8004432:	e015      	b.n	8004460 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d107      	bne.n	800444c <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800443c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004440:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800444a:	e009      	b.n	8004460 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2200      	movs	r2, #0
 800445e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	785b      	ldrb	r3, [r3, #1]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d15f      	bne.n	8004528 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	643b      	str	r3, [r7, #64]	@ 0x40
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004476:	b29b      	uxth	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800447c:	4413      	add	r3, r2
 800447e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	00da      	lsls	r2, r3, #3
 8004486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004488:	4413      	add	r3, r2
 800448a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800448e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800449a:	b29a      	uxth	r2, r3
 800449c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <HAL_PCD_EP_DB_Transmit+0x34e>
 80044a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b8:	801a      	strh	r2, [r3, #0]
 80044ba:	e051      	b.n	8004560 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80044bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044be:	2b3e      	cmp	r3, #62	@ 0x3e
 80044c0:	d816      	bhi.n	80044f0 <HAL_PCD_EP_DB_Transmit+0x382>
 80044c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80044d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044d4:	3301      	adds	r3, #1
 80044d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29a      	uxth	r2, r3
 80044de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	029b      	lsls	r3, r3, #10
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	4313      	orrs	r3, r2
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	e037      	b.n	8004560 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80044f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d102      	bne.n	8004506 <HAL_PCD_EP_DB_Transmit+0x398>
 8004500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004502:	3b01      	subs	r3, #1
 8004504:	653b      	str	r3, [r7, #80]	@ 0x50
 8004506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29a      	uxth	r2, r3
 800450c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800450e:	b29b      	uxth	r3, r3
 8004510:	029b      	lsls	r3, r3, #10
 8004512:	b29b      	uxth	r3, r3
 8004514:	4313      	orrs	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004520:	b29a      	uxth	r2, r3
 8004522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	e01b      	b.n	8004560 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d117      	bne.n	8004560 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800453e:	b29b      	uxth	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004544:	4413      	add	r3, r2
 8004546:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	00da      	lsls	r2, r3, #3
 800454e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004550:	4413      	add	r3, r2
 8004552:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004556:	647b      	str	r3, [r7, #68]	@ 0x44
 8004558:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800455a:	b29a      	uxth	r2, r3
 800455c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800455e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6959      	ldr	r1, [r3, #20]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	891a      	ldrh	r2, [r3, #8]
 800456c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800456e:	b29b      	uxth	r3, r3
 8004570:	f005 fc15 	bl	8009d9e <USB_WritePMA>
 8004574:	e20a      	b.n	800498c <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800457e:	b29b      	uxth	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	4413      	add	r3, r2
 8004590:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800459a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d307      	bcc.n	80045ba <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80045b2:	1ad2      	subs	r2, r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	619a      	str	r2, [r3, #24]
 80045b8:	e002      	b.n	80045c0 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2200      	movs	r2, #0
 80045be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f040 80f6 	bne.w	80047b6 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d126      	bne.n	8004620 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045e6:	4413      	add	r3, r2
 80045e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	00da      	lsls	r2, r3, #3
 80045f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f2:	4413      	add	r3, r2
 80045f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80045fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004604:	b29a      	uxth	r2, r3
 8004606:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004618:	b29a      	uxth	r2, r3
 800461a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	e01a      	b.n	8004656 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	785b      	ldrb	r3, [r3, #1]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d116      	bne.n	8004656 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004636:	b29b      	uxth	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800463c:	4413      	add	r3, r2
 800463e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	00da      	lsls	r2, r3, #3
 8004646:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004648:	4413      	add	r3, r2
 800464a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800464e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004652:	2200      	movs	r2, #0
 8004654:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d12f      	bne.n	80046c6 <HAL_PCD_EP_DB_Transmit+0x558>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004676:	b29b      	uxth	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800467e:	4413      	add	r3, r2
 8004680:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	00da      	lsls	r2, r3, #3
 800468a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800468e:	4413      	add	r3, r2
 8004690:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004694:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004698:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046bc:	b29a      	uxth	r2, r3
 80046be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046c2:	801a      	strh	r2, [r3, #0]
 80046c4:	e01c      	b.n	8004700 <HAL_PCD_EP_DB_Transmit+0x592>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	785b      	ldrb	r3, [r3, #1]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d118      	bne.n	8004700 <HAL_PCD_EP_DB_Transmit+0x592>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046de:	4413      	add	r3, r2
 80046e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	00da      	lsls	r2, r3, #3
 80046ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046ee:	4413      	add	r3, r2
 80046f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046fc:	2200      	movs	r2, #0
 80046fe:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	78db      	ldrb	r3, [r3, #3]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d127      	bne.n	8004758 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800471e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004722:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004726:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800472a:	f083 0320 	eor.w	r3, r3, #32
 800472e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	441a      	add	r2, r3
 8004740:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800474c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004754:	b29b      	uxth	r3, r3
 8004756:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	4619      	mov	r1, r3
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f007 fa75 	bl	800bc4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d121      	bne.n	80047b2 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004788:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	441a      	add	r2, r3
 800479a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800479e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e113      	b.n	80049de <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d121      	bne.n	8004804 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047da:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	441a      	add	r2, r3
 80047ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80047f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004800:	b29b      	uxth	r3, r3
 8004802:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800480a:	2b01      	cmp	r3, #1
 800480c:	f040 80be 	bne.w	800498c <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004818:	441a      	add	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004826:	441a      	add	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	429a      	cmp	r2, r3
 8004836:	d309      	bcc.n	800484c <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6a1a      	ldr	r2, [r3, #32]
 8004842:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004844:	1ad2      	subs	r2, r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	621a      	str	r2, [r3, #32]
 800484a:	e015      	b.n	8004878 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004854:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004858:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004862:	e009      	b.n	8004878 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2200      	movs	r2, #0
 800486e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	785b      	ldrb	r3, [r3, #1]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d15f      	bne.n	8004946 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004894:	b29b      	uxth	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800489a:	4413      	add	r3, r2
 800489c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	00da      	lsls	r2, r3, #3
 80048a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048a6:	4413      	add	r3, r2
 80048a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80048ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <HAL_PCD_EP_DB_Transmit+0x76c>
 80048c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	e04e      	b.n	8004978 <HAL_PCD_EP_DB_Transmit+0x80a>
 80048da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80048de:	d816      	bhi.n	800490e <HAL_PCD_EP_DB_Transmit+0x7a0>
 80048e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80048e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_PCD_EP_DB_Transmit+0x788>
 80048f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048f2:	3301      	adds	r3, #1
 80048f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80048f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048fe:	b29b      	uxth	r3, r3
 8004900:	029b      	lsls	r3, r3, #10
 8004902:	b29b      	uxth	r3, r3
 8004904:	4313      	orrs	r3, r2
 8004906:	b29a      	uxth	r2, r3
 8004908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	e034      	b.n	8004978 <HAL_PCD_EP_DB_Transmit+0x80a>
 800490e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	663b      	str	r3, [r7, #96]	@ 0x60
 8004914:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800491e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004920:	3b01      	subs	r3, #1
 8004922:	663b      	str	r3, [r7, #96]	@ 0x60
 8004924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29a      	uxth	r2, r3
 800492a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800492c:	b29b      	uxth	r3, r3
 800492e:	029b      	lsls	r3, r3, #10
 8004930:	b29b      	uxth	r3, r3
 8004932:	4313      	orrs	r3, r2
 8004934:	b29b      	uxth	r3, r3
 8004936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493e:	b29a      	uxth	r2, r3
 8004940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004942:	801a      	strh	r2, [r3, #0]
 8004944:	e018      	b.n	8004978 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d114      	bne.n	8004978 <HAL_PCD_EP_DB_Transmit+0x80a>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004956:	b29b      	uxth	r3, r3
 8004958:	461a      	mov	r2, r3
 800495a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800495c:	4413      	add	r3, r2
 800495e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	00da      	lsls	r2, r3, #3
 8004966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004968:	4413      	add	r3, r2
 800496a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800496e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004970:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004972:	b29a      	uxth	r2, r3
 8004974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004976:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	6959      	ldr	r1, [r3, #20]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	895a      	ldrh	r2, [r3, #10]
 8004984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004986:	b29b      	uxth	r3, r3
 8004988:	f005 fa09 	bl	8009d9e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049a6:	82fb      	strh	r3, [r7, #22]
 80049a8:	8afb      	ldrh	r3, [r7, #22]
 80049aa:	f083 0310 	eor.w	r3, r3, #16
 80049ae:	82fb      	strh	r3, [r7, #22]
 80049b0:	8afb      	ldrh	r3, [r7, #22]
 80049b2:	f083 0320 	eor.w	r3, r3, #32
 80049b6:	82fb      	strh	r3, [r7, #22]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	8afb      	ldrh	r3, [r7, #22]
 80049c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d8:	b29b      	uxth	r3, r3
 80049da:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3798      	adds	r7, #152	@ 0x98
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b087      	sub	sp, #28
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	817b      	strh	r3, [r7, #10]
 80049f4:	4613      	mov	r3, r2
 80049f6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80049f8:	897b      	ldrh	r3, [r7, #10]
 80049fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00b      	beq.n	8004a1c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a04:	897b      	ldrh	r3, [r7, #10]
 8004a06:	f003 0207 	and.w	r2, r3, #7
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	3310      	adds	r3, #16
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e009      	b.n	8004a30 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a1c:	897a      	ldrh	r2, [r7, #10]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d107      	bne.n	8004a46 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	80da      	strh	r2, [r3, #6]
 8004a44:	e00b      	b.n	8004a5e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f043 0302 	orr.w	r3, r3, #2
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d141      	bne.n	8004b52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ace:	4b4b      	ldr	r3, [pc, #300]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ada:	d131      	bne.n	8004b40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004adc:	4b47      	ldr	r3, [pc, #284]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ae2:	4a46      	ldr	r2, [pc, #280]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aec:	4b43      	ldr	r3, [pc, #268]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004af4:	4a41      	ldr	r2, [pc, #260]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004afa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004afc:	4b40      	ldr	r3, [pc, #256]	@ (8004c00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2232      	movs	r2, #50	@ 0x32
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	4a3f      	ldr	r2, [pc, #252]	@ (8004c04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	0c9b      	lsrs	r3, r3, #18
 8004b0e:	3301      	adds	r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b12:	e002      	b.n	8004b1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b1a:	4b38      	ldr	r3, [pc, #224]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b26:	d102      	bne.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f2      	bne.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b2e:	4b33      	ldr	r3, [pc, #204]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3a:	d158      	bne.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e057      	b.n	8004bf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b40:	4b2e      	ldr	r3, [pc, #184]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b46:	4a2d      	ldr	r2, [pc, #180]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b50:	e04d      	b.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b58:	d141      	bne.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b5a:	4b28      	ldr	r3, [pc, #160]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b66:	d131      	bne.n	8004bcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b68:	4b24      	ldr	r3, [pc, #144]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b6e:	4a23      	ldr	r2, [pc, #140]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b78:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b80:	4a1e      	ldr	r2, [pc, #120]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b88:	4b1d      	ldr	r3, [pc, #116]	@ (8004c00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2232      	movs	r2, #50	@ 0x32
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	4a1c      	ldr	r2, [pc, #112]	@ (8004c04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	0c9b      	lsrs	r3, r3, #18
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b9e:	e002      	b.n	8004ba6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ba6:	4b15      	ldr	r3, [pc, #84]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb2:	d102      	bne.n	8004bba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f2      	bne.n	8004ba0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bba:	4b10      	ldr	r3, [pc, #64]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc6:	d112      	bne.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e011      	b.n	8004bf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bdc:	e007      	b.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bde:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004be6:	4a05      	ldr	r2, [pc, #20]	@ (8004bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	200001a8 	.word	0x200001a8
 8004c04:	431bde83 	.word	0x431bde83

08004c08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c0c:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4a04      	ldr	r2, [pc, #16]	@ (8004c24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c16:	6093      	str	r3, [r2, #8]
}
 8004c18:	bf00      	nop
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40007000 	.word	0x40007000

08004c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e2fe      	b.n	8005238 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d075      	beq.n	8004d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c46:	4b97      	ldr	r3, [pc, #604]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c50:	4b94      	ldr	r3, [pc, #592]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	d102      	bne.n	8004c66 <HAL_RCC_OscConfig+0x3e>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d002      	beq.n	8004c6c <HAL_RCC_OscConfig+0x44>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d10b      	bne.n	8004c84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c6c:	4b8d      	ldr	r3, [pc, #564]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d05b      	beq.n	8004d30 <HAL_RCC_OscConfig+0x108>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d157      	bne.n	8004d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e2d9      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c8c:	d106      	bne.n	8004c9c <HAL_RCC_OscConfig+0x74>
 8004c8e:	4b85      	ldr	r3, [pc, #532]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a84      	ldr	r2, [pc, #528]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e01d      	b.n	8004cd8 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ca4:	d10c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x98>
 8004ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a7e      	ldr	r2, [pc, #504]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a7b      	ldr	r2, [pc, #492]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	e00b      	b.n	8004cd8 <HAL_RCC_OscConfig+0xb0>
 8004cc0:	4b78      	ldr	r3, [pc, #480]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a77      	ldr	r2, [pc, #476]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	4b75      	ldr	r3, [pc, #468]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a74      	ldr	r2, [pc, #464]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d013      	beq.n	8004d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7fd fba6 	bl	8002430 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7fd fba2 	bl	8002430 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b64      	cmp	r3, #100	@ 0x64
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e29e      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xc0>
 8004d06:	e014      	b.n	8004d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fd fb92 	bl	8002430 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d10:	f7fd fb8e 	bl	8002430 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	@ 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e28a      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d22:	4b60      	ldr	r3, [pc, #384]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0xe8>
 8004d2e:	e000      	b.n	8004d32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d075      	beq.n	8004e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d3e:	4b59      	ldr	r3, [pc, #356]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d48:	4b56      	ldr	r3, [pc, #344]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b0c      	cmp	r3, #12
 8004d56:	d102      	bne.n	8004d5e <HAL_RCC_OscConfig+0x136>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d002      	beq.n	8004d64 <HAL_RCC_OscConfig+0x13c>
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d11f      	bne.n	8004da4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d64:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_OscConfig+0x154>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e25d      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7c:	4b49      	ldr	r3, [pc, #292]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	061b      	lsls	r3, r3, #24
 8004d8a:	4946      	ldr	r1, [pc, #280]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d90:	4b45      	ldr	r3, [pc, #276]	@ (8004ea8 <HAL_RCC_OscConfig+0x280>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fd faff 	bl	8002398 <HAL_InitTick>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d043      	beq.n	8004e28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e249      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d023      	beq.n	8004df4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dac:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fd fb3a 	bl	8002430 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc0:	f7fd fb36 	bl	8002430 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e232      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dd2:	4b34      	ldr	r3, [pc, #208]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b31      	ldr	r3, [pc, #196]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	492d      	ldr	r1, [pc, #180]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	604b      	str	r3, [r1, #4]
 8004df2:	e01a      	b.n	8004e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df4:	4b2b      	ldr	r3, [pc, #172]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004dfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fd fb16 	bl	8002430 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e08:	f7fd fb12 	bl	8002430 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e20e      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e1a:	4b22      	ldr	r3, [pc, #136]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x1e0>
 8004e26:	e000      	b.n	8004e2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d041      	beq.n	8004eba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e44:	4a17      	ldr	r2, [pc, #92]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fd faef 	bl	8002430 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e56:	f7fd faeb 	bl	8002430 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e1e7      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e68:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ef      	beq.n	8004e56 <HAL_RCC_OscConfig+0x22e>
 8004e76:	e020      	b.n	8004eba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e88:	f7fd fad2 	bl	8002430 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e8e:	e00d      	b.n	8004eac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e90:	f7fd face 	bl	8002430 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d906      	bls.n	8004eac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e1ca      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	200001ac 	.word	0x200001ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eac:	4b8c      	ldr	r3, [pc, #560]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1ea      	bne.n	8004e90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 80a6 	beq.w	8005014 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ecc:	4b84      	ldr	r3, [pc, #528]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_OscConfig+0x2b4>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <HAL_RCC_OscConfig+0x2b6>
 8004edc:	2300      	movs	r3, #0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eee:	4b7c      	ldr	r3, [pc, #496]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004efa:	2301      	movs	r3, #1
 8004efc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004efe:	4b79      	ldr	r3, [pc, #484]	@ (80050e4 <HAL_RCC_OscConfig+0x4bc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d118      	bne.n	8004f3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f0a:	4b76      	ldr	r3, [pc, #472]	@ (80050e4 <HAL_RCC_OscConfig+0x4bc>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a75      	ldr	r2, [pc, #468]	@ (80050e4 <HAL_RCC_OscConfig+0x4bc>)
 8004f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f16:	f7fd fa8b 	bl	8002430 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1e:	f7fd fa87 	bl	8002430 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e183      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f30:	4b6c      	ldr	r3, [pc, #432]	@ (80050e4 <HAL_RCC_OscConfig+0x4bc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d108      	bne.n	8004f56 <HAL_RCC_OscConfig+0x32e>
 8004f44:	4b66      	ldr	r3, [pc, #408]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4a:	4a65      	ldr	r2, [pc, #404]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f54:	e024      	b.n	8004fa0 <HAL_RCC_OscConfig+0x378>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b05      	cmp	r3, #5
 8004f5c:	d110      	bne.n	8004f80 <HAL_RCC_OscConfig+0x358>
 8004f5e:	4b60      	ldr	r3, [pc, #384]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f64:	4a5e      	ldr	r2, [pc, #376]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f74:	4a5a      	ldr	r2, [pc, #360]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f7e:	e00f      	b.n	8004fa0 <HAL_RCC_OscConfig+0x378>
 8004f80:	4b57      	ldr	r3, [pc, #348]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f86:	4a56      	ldr	r2, [pc, #344]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f90:	4b53      	ldr	r3, [pc, #332]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f96:	4a52      	ldr	r2, [pc, #328]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004f98:	f023 0304 	bic.w	r3, r3, #4
 8004f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d016      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa8:	f7fd fa42 	bl	8002430 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb0:	f7fd fa3e 	bl	8002430 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e138      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fc6:	4b46      	ldr	r3, [pc, #280]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ed      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x388>
 8004fd4:	e015      	b.n	8005002 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd6:	f7fd fa2b 	bl	8002430 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7fd fa27 	bl	8002430 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e121      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1ed      	bne.n	8004fde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005002:	7ffb      	ldrb	r3, [r7, #31]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d105      	bne.n	8005014 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005008:	4b35      	ldr	r3, [pc, #212]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 800500a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500c:	4a34      	ldr	r2, [pc, #208]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 800500e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005012:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d03c      	beq.n	800509a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01c      	beq.n	8005062 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005028:	4b2d      	ldr	r3, [pc, #180]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 800502a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800502e:	4a2c      	ldr	r2, [pc, #176]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005038:	f7fd f9fa 	bl	8002430 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005040:	f7fd f9f6 	bl	8002430 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e0f2      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005052:	4b23      	ldr	r3, [pc, #140]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8005054:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0ef      	beq.n	8005040 <HAL_RCC_OscConfig+0x418>
 8005060:	e01b      	b.n	800509a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005062:	4b1f      	ldr	r3, [pc, #124]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 8005064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005068:	4a1d      	ldr	r2, [pc, #116]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005072:	f7fd f9dd 	bl	8002430 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800507a:	f7fd f9d9 	bl	8002430 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e0d5      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800508c:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 800508e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1ef      	bne.n	800507a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80c9 	beq.w	8005236 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050a4:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	f000 8083 	beq.w	80051b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d15e      	bne.n	8005178 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ba:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a08      	ldr	r2, [pc, #32]	@ (80050e0 <HAL_RCC_OscConfig+0x4b8>)
 80050c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c6:	f7fd f9b3 	bl	8002430 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050cc:	e00c      	b.n	80050e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ce:	f7fd f9af 	bl	8002430 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d905      	bls.n	80050e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e0ab      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e8:	4b55      	ldr	r3, [pc, #340]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1ec      	bne.n	80050ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f4:	4b52      	ldr	r3, [pc, #328]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	4b52      	ldr	r3, [pc, #328]	@ (8005244 <HAL_RCC_OscConfig+0x61c>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6a11      	ldr	r1, [r2, #32]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005104:	3a01      	subs	r2, #1
 8005106:	0112      	lsls	r2, r2, #4
 8005108:	4311      	orrs	r1, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800510e:	0212      	lsls	r2, r2, #8
 8005110:	4311      	orrs	r1, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005116:	0852      	lsrs	r2, r2, #1
 8005118:	3a01      	subs	r2, #1
 800511a:	0552      	lsls	r2, r2, #21
 800511c:	4311      	orrs	r1, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005122:	0852      	lsrs	r2, r2, #1
 8005124:	3a01      	subs	r2, #1
 8005126:	0652      	lsls	r2, r2, #25
 8005128:	4311      	orrs	r1, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800512e:	06d2      	lsls	r2, r2, #27
 8005130:	430a      	orrs	r2, r1
 8005132:	4943      	ldr	r1, [pc, #268]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 8005134:	4313      	orrs	r3, r2
 8005136:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005138:	4b41      	ldr	r3, [pc, #260]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a40      	ldr	r2, [pc, #256]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 800513e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005142:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005144:	4b3e      	ldr	r3, [pc, #248]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4a3d      	ldr	r2, [pc, #244]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 800514a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800514e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fd f96e 	bl	8002430 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fd f96a 	bl	8002430 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e066      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516a:	4b35      	ldr	r3, [pc, #212]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x530>
 8005176:	e05e      	b.n	8005236 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005178:	4b31      	ldr	r3, [pc, #196]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a30      	ldr	r2, [pc, #192]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 800517e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fd f954 	bl	8002430 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518c:	f7fd f950 	bl	8002430 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e04c      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519e:	4b28      	ldr	r3, [pc, #160]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051aa:	4b25      	ldr	r3, [pc, #148]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	4924      	ldr	r1, [pc, #144]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 80051b0:	4b25      	ldr	r3, [pc, #148]	@ (8005248 <HAL_RCC_OscConfig+0x620>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	60cb      	str	r3, [r1, #12]
 80051b6:	e03e      	b.n	8005236 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e039      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80051c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005240 <HAL_RCC_OscConfig+0x618>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f003 0203 	and.w	r2, r3, #3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d12c      	bne.n	8005232 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	3b01      	subs	r3, #1
 80051e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d123      	bne.n	8005232 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d11b      	bne.n	8005232 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005206:	429a      	cmp	r2, r3
 8005208:	d113      	bne.n	8005232 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	3b01      	subs	r3, #1
 8005218:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d109      	bne.n	8005232 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005228:	085b      	lsrs	r3, r3, #1
 800522a:	3b01      	subs	r3, #1
 800522c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d001      	beq.n	8005236 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40021000 	.word	0x40021000
 8005244:	019f800c 	.word	0x019f800c
 8005248:	feeefffc 	.word	0xfeeefffc

0800524c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e11e      	b.n	80054a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005264:	4b91      	ldr	r3, [pc, #580]	@ (80054ac <HAL_RCC_ClockConfig+0x260>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d910      	bls.n	8005294 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b8e      	ldr	r3, [pc, #568]	@ (80054ac <HAL_RCC_ClockConfig+0x260>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 020f 	bic.w	r2, r3, #15
 800527a:	498c      	ldr	r1, [pc, #560]	@ (80054ac <HAL_RCC_ClockConfig+0x260>)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	4313      	orrs	r3, r2
 8005280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b8a      	ldr	r3, [pc, #552]	@ (80054ac <HAL_RCC_ClockConfig+0x260>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e106      	b.n	80054a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d073      	beq.n	8005388 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d129      	bne.n	80052fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a8:	4b81      	ldr	r3, [pc, #516]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0f4      	b.n	80054a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80052b8:	f000 f99e 	bl	80055f8 <RCC_GetSysClockFreqFromPLLSource>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4a7c      	ldr	r2, [pc, #496]	@ (80054b4 <HAL_RCC_ClockConfig+0x268>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d93f      	bls.n	8005346 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052c6:	4b7a      	ldr	r3, [pc, #488]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d033      	beq.n	8005346 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d12f      	bne.n	8005346 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052e6:	4b72      	ldr	r3, [pc, #456]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ee:	4a70      	ldr	r2, [pc, #448]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80052f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e024      	b.n	8005346 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d107      	bne.n	8005314 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005304:	4b6a      	ldr	r3, [pc, #424]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0c6      	b.n	80054a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005314:	4b66      	ldr	r3, [pc, #408]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0be      	b.n	80054a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005324:	f000 f8ce 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8005328:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4a61      	ldr	r2, [pc, #388]	@ (80054b4 <HAL_RCC_ClockConfig+0x268>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d909      	bls.n	8005346 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005332:	4b5f      	ldr	r3, [pc, #380]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800533a:	4a5d      	ldr	r2, [pc, #372]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 800533c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005340:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005346:	4b5a      	ldr	r3, [pc, #360]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 0203 	bic.w	r2, r3, #3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4957      	ldr	r1, [pc, #348]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 8005354:	4313      	orrs	r3, r2
 8005356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005358:	f7fd f86a 	bl	8002430 <HAL_GetTick>
 800535c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535e:	e00a      	b.n	8005376 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005360:	f7fd f866 	bl	8002430 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e095      	b.n	80054a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005376:	4b4e      	ldr	r3, [pc, #312]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 020c 	and.w	r2, r3, #12
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	429a      	cmp	r2, r3
 8005386:	d1eb      	bne.n	8005360 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d023      	beq.n	80053dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a0:	4b43      	ldr	r3, [pc, #268]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4a42      	ldr	r2, [pc, #264]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80053a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80053aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80053b8:	4b3d      	ldr	r3, [pc, #244]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80053c0:	4a3b      	ldr	r2, [pc, #236]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80053c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80053c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c8:	4b39      	ldr	r3, [pc, #228]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4936      	ldr	r1, [pc, #216]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
 80053da:	e008      	b.n	80053ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b80      	cmp	r3, #128	@ 0x80
 80053e0:	d105      	bne.n	80053ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053e2:	4b33      	ldr	r3, [pc, #204]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	4a32      	ldr	r2, [pc, #200]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 80053e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ee:	4b2f      	ldr	r3, [pc, #188]	@ (80054ac <HAL_RCC_ClockConfig+0x260>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d21d      	bcs.n	8005438 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fc:	4b2b      	ldr	r3, [pc, #172]	@ (80054ac <HAL_RCC_ClockConfig+0x260>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f023 020f 	bic.w	r2, r3, #15
 8005404:	4929      	ldr	r1, [pc, #164]	@ (80054ac <HAL_RCC_ClockConfig+0x260>)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800540c:	f7fd f810 	bl	8002430 <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005412:	e00a      	b.n	800542a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005414:	f7fd f80c 	bl	8002430 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e03b      	b.n	80054a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542a:	4b20      	ldr	r3, [pc, #128]	@ (80054ac <HAL_RCC_ClockConfig+0x260>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d1ed      	bne.n	8005414 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005444:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4917      	ldr	r1, [pc, #92]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005462:	4b13      	ldr	r3, [pc, #76]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	490f      	ldr	r1, [pc, #60]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005476:	f000 f825 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 800547a:	4602      	mov	r2, r0
 800547c:	4b0c      	ldr	r3, [pc, #48]	@ (80054b0 <HAL_RCC_ClockConfig+0x264>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	490c      	ldr	r1, [pc, #48]	@ (80054b8 <HAL_RCC_ClockConfig+0x26c>)
 8005488:	5ccb      	ldrb	r3, [r1, r3]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	fa22 f303 	lsr.w	r3, r2, r3
 8005492:	4a0a      	ldr	r2, [pc, #40]	@ (80054bc <HAL_RCC_ClockConfig+0x270>)
 8005494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005496:	4b0a      	ldr	r3, [pc, #40]	@ (80054c0 <HAL_RCC_ClockConfig+0x274>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7fc ff7c 	bl	8002398 <HAL_InitTick>
 80054a0:	4603      	mov	r3, r0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40022000 	.word	0x40022000
 80054b0:	40021000 	.word	0x40021000
 80054b4:	04c4b400 	.word	0x04c4b400
 80054b8:	0800d350 	.word	0x0800d350
 80054bc:	200001a8 	.word	0x200001a8
 80054c0:	200001ac 	.word	0x200001ac

080054c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054ca:	4b2c      	ldr	r3, [pc, #176]	@ (800557c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d102      	bne.n	80054dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005580 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	e047      	b.n	800556c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80054dc:	4b27      	ldr	r3, [pc, #156]	@ (800557c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 030c 	and.w	r3, r3, #12
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d102      	bne.n	80054ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054e8:	4b26      	ldr	r3, [pc, #152]	@ (8005584 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	e03e      	b.n	800556c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80054ee:	4b23      	ldr	r3, [pc, #140]	@ (800557c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
 80054f6:	2b0c      	cmp	r3, #12
 80054f8:	d136      	bne.n	8005568 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054fa:	4b20      	ldr	r3, [pc, #128]	@ (800557c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005504:	4b1d      	ldr	r3, [pc, #116]	@ (800557c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	3301      	adds	r3, #1
 8005510:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b03      	cmp	r3, #3
 8005516:	d10c      	bne.n	8005532 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005518:	4a1a      	ldr	r2, [pc, #104]	@ (8005584 <HAL_RCC_GetSysClockFreq+0xc0>)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	4a16      	ldr	r2, [pc, #88]	@ (800557c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005522:	68d2      	ldr	r2, [r2, #12]
 8005524:	0a12      	lsrs	r2, r2, #8
 8005526:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800552a:	fb02 f303 	mul.w	r3, r2, r3
 800552e:	617b      	str	r3, [r7, #20]
      break;
 8005530:	e00c      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005532:	4a13      	ldr	r2, [pc, #76]	@ (8005580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	fbb2 f3f3 	udiv	r3, r2, r3
 800553a:	4a10      	ldr	r2, [pc, #64]	@ (800557c <HAL_RCC_GetSysClockFreq+0xb8>)
 800553c:	68d2      	ldr	r2, [r2, #12]
 800553e:	0a12      	lsrs	r2, r2, #8
 8005540:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005544:	fb02 f303 	mul.w	r3, r2, r3
 8005548:	617b      	str	r3, [r7, #20]
      break;
 800554a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800554c:	4b0b      	ldr	r3, [pc, #44]	@ (800557c <HAL_RCC_GetSysClockFreq+0xb8>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	0e5b      	lsrs	r3, r3, #25
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	3301      	adds	r3, #1
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	e001      	b.n	800556c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800556c:	693b      	ldr	r3, [r7, #16]
}
 800556e:	4618      	mov	r0, r3
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40021000 	.word	0x40021000
 8005580:	00f42400 	.word	0x00f42400
 8005584:	016e3600 	.word	0x016e3600

08005588 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800558c:	4b03      	ldr	r3, [pc, #12]	@ (800559c <HAL_RCC_GetHCLKFreq+0x14>)
 800558e:	681b      	ldr	r3, [r3, #0]
}
 8005590:	4618      	mov	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	200001a8 	.word	0x200001a8

080055a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055a4:	f7ff fff0 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	4904      	ldr	r1, [pc, #16]	@ (80055c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055b6:	5ccb      	ldrb	r3, [r1, r3]
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	0800d360 	.word	0x0800d360

080055cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055d0:	f7ff ffda 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	0adb      	lsrs	r3, r3, #11
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	4904      	ldr	r1, [pc, #16]	@ (80055f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055e2:	5ccb      	ldrb	r3, [r1, r3]
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40021000 	.word	0x40021000
 80055f4:	0800d360 	.word	0x0800d360

080055f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005608:	4b1b      	ldr	r3, [pc, #108]	@ (8005678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	3301      	adds	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d10c      	bne.n	8005636 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800561c:	4a17      	ldr	r2, [pc, #92]	@ (800567c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	4a14      	ldr	r2, [pc, #80]	@ (8005678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005626:	68d2      	ldr	r2, [r2, #12]
 8005628:	0a12      	lsrs	r2, r2, #8
 800562a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	617b      	str	r3, [r7, #20]
    break;
 8005634:	e00c      	b.n	8005650 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005636:	4a12      	ldr	r2, [pc, #72]	@ (8005680 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	fbb2 f3f3 	udiv	r3, r2, r3
 800563e:	4a0e      	ldr	r2, [pc, #56]	@ (8005678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005640:	68d2      	ldr	r2, [r2, #12]
 8005642:	0a12      	lsrs	r2, r2, #8
 8005644:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005648:	fb02 f303 	mul.w	r3, r2, r3
 800564c:	617b      	str	r3, [r7, #20]
    break;
 800564e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005650:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	0e5b      	lsrs	r3, r3, #25
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	3301      	adds	r3, #1
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	fbb2 f3f3 	udiv	r3, r2, r3
 8005668:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800566a:	687b      	ldr	r3, [r7, #4]
}
 800566c:	4618      	mov	r0, r3
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	40021000 	.word	0x40021000
 800567c:	016e3600 	.word	0x016e3600
 8005680:	00f42400 	.word	0x00f42400

08005684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800568c:	2300      	movs	r3, #0
 800568e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005690:	2300      	movs	r3, #0
 8005692:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8098 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056a2:	2300      	movs	r3, #0
 80056a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a6:	4b43      	ldr	r3, [pc, #268]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10d      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	4b40      	ldr	r3, [pc, #256]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b6:	4a3f      	ldr	r2, [pc, #252]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80056be:	4b3d      	ldr	r3, [pc, #244]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ca:	2301      	movs	r3, #1
 80056cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ce:	4b3a      	ldr	r3, [pc, #232]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a39      	ldr	r2, [pc, #228]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056da:	f7fc fea9 	bl	8002430 <HAL_GetTick>
 80056de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056e0:	e009      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e2:	f7fc fea5 	bl	8002430 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d902      	bls.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	74fb      	strb	r3, [r7, #19]
        break;
 80056f4:	e005      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056f6:	4b30      	ldr	r3, [pc, #192]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0ef      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d159      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005708:	4b2a      	ldr	r3, [pc, #168]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005712:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d01e      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	429a      	cmp	r2, r3
 8005722:	d019      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005724:	4b23      	ldr	r3, [pc, #140]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800572e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005730:	4b20      	ldr	r3, [pc, #128]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005736:	4a1f      	ldr	r2, [pc, #124]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800573c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005740:	4b1c      	ldr	r3, [pc, #112]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005746:	4a1b      	ldr	r2, [pc, #108]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800574c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005750:	4a18      	ldr	r2, [pc, #96]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d016      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fc fe65 	bl	8002430 <HAL_GetTick>
 8005766:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005768:	e00b      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576a:	f7fc fe61 	bl	8002430 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005778:	4293      	cmp	r3, r2
 800577a:	d902      	bls.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	74fb      	strb	r3, [r7, #19]
            break;
 8005780:	e006      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005782:	4b0c      	ldr	r3, [pc, #48]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0ec      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005790:	7cfb      	ldrb	r3, [r7, #19]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005796:	4b07      	ldr	r3, [pc, #28]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a4:	4903      	ldr	r1, [pc, #12]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80057ac:	e008      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057ae:	7cfb      	ldrb	r3, [r7, #19]
 80057b0:	74bb      	strb	r3, [r7, #18]
 80057b2:	e005      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057bc:	7cfb      	ldrb	r3, [r7, #19]
 80057be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057c0:	7c7b      	ldrb	r3, [r7, #17]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d105      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c6:	4ba6      	ldr	r3, [pc, #664]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ca:	4aa5      	ldr	r2, [pc, #660]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057de:	4ba0      	ldr	r3, [pc, #640]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e4:	f023 0203 	bic.w	r2, r3, #3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	499c      	ldr	r1, [pc, #624]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005800:	4b97      	ldr	r3, [pc, #604]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005806:	f023 020c 	bic.w	r2, r3, #12
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4994      	ldr	r1, [pc, #592]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005822:	4b8f      	ldr	r3, [pc, #572]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005828:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	498b      	ldr	r1, [pc, #556]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005844:	4b86      	ldr	r3, [pc, #536]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	4983      	ldr	r1, [pc, #524]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005866:	4b7e      	ldr	r3, [pc, #504]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	497a      	ldr	r1, [pc, #488]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005888:	4b75      	ldr	r3, [pc, #468]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	4972      	ldr	r1, [pc, #456]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	4969      	ldr	r1, [pc, #420]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058cc:	4b64      	ldr	r3, [pc, #400]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	4961      	ldr	r1, [pc, #388]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	4958      	ldr	r1, [pc, #352]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800590c:	2b00      	cmp	r3, #0
 800590e:	d015      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005910:	4b53      	ldr	r3, [pc, #332]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005916:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591e:	4950      	ldr	r1, [pc, #320]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800592e:	d105      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005930:	4b4b      	ldr	r3, [pc, #300]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a4a      	ldr	r2, [pc, #296]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800593a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005944:	2b00      	cmp	r3, #0
 8005946:	d015      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005948:	4b45      	ldr	r3, [pc, #276]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005956:	4942      	ldr	r1, [pc, #264]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005966:	d105      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005968:	4b3d      	ldr	r3, [pc, #244]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005972:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d015      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005980:	4b37      	ldr	r3, [pc, #220]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005986:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	4934      	ldr	r1, [pc, #208]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800599e:	d105      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d015      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059b8:	4b29      	ldr	r3, [pc, #164]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c6:	4926      	ldr	r1, [pc, #152]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059d6:	d105      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d8:	4b21      	ldr	r3, [pc, #132]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4a20      	ldr	r2, [pc, #128]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d015      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fe:	4918      	ldr	r1, [pc, #96]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a0e:	d105      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a10:	4b13      	ldr	r3, [pc, #76]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4a12      	ldr	r2, [pc, #72]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d015      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a28:	4b0d      	ldr	r3, [pc, #52]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a36:	490a      	ldr	r1, [pc, #40]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a46:	d105      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a48:	4b05      	ldr	r3, [pc, #20]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4a04      	ldr	r2, [pc, #16]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005a54:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40021000 	.word	0x40021000

08005a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e049      	b.n	8005b0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fc fa82 	bl	8001f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f000 fb12 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d001      	beq.n	8005b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e04a      	b.n	8005bc2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a21      	ldr	r2, [pc, #132]	@ (8005bd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d018      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x6c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b56:	d013      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x6c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x6c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x6c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1a      	ldr	r2, [pc, #104]	@ (8005bdc <HAL_TIM_Base_Start_IT+0xc8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x6c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a19      	ldr	r2, [pc, #100]	@ (8005be0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d115      	bne.n	8005bac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	4b17      	ldr	r3, [pc, #92]	@ (8005be4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d015      	beq.n	8005bbe <HAL_TIM_Base_Start_IT+0xaa>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b98:	d011      	beq.n	8005bbe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	e008      	b.n	8005bbe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e000      	b.n	8005bc0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40012c00 	.word	0x40012c00
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40013400 	.word	0x40013400
 8005be0:	40014000 	.word	0x40014000
 8005be4:	00010007 	.word	0x00010007

08005be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d020      	beq.n	8005c4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01b      	beq.n	8005c4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0202 	mvn.w	r2, #2
 8005c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa2c 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005c38:	e005      	b.n	8005c46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fa1e 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fa2f 	bl	80060a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d020      	beq.n	8005c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01b      	beq.n	8005c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0204 	mvn.w	r2, #4
 8005c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fa06 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005c84:	e005      	b.n	8005c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f9f8 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fa09 	bl	80060a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d020      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01b      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0208 	mvn.w	r2, #8
 8005cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2204      	movs	r2, #4
 8005cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f9e0 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005cd0:	e005      	b.n	8005cde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f9d2 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f9e3 	bl	80060a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d020      	beq.n	8005d30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01b      	beq.n	8005d30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0210 	mvn.w	r2, #16
 8005d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2208      	movs	r2, #8
 8005d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f9ba 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005d1c:	e005      	b.n	8005d2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f9ac 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f9bd 	bl	80060a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00c      	beq.n	8005d54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0201 	mvn.w	r2, #1
 8005d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fb ff64 	bl	8001c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00c      	beq.n	8005d82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fb69 	bl	8006454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00c      	beq.n	8005da6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fb61 	bl	8006468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00c      	beq.n	8005dca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f977 	bl	80060b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00c      	beq.n	8005dee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f06f 0220 	mvn.w	r2, #32
 8005de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fb29 	bl	8006440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00c      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fb35 	bl	800647c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00c      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d007      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fb2d 	bl	8006490 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00c      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d007      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fb25 	bl	80064a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00c      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fb1d 	bl	80064b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e0de      	b.n	8006062 <HAL_TIM_ConfigClockSource+0x1da>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005ec2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a63      	ldr	r2, [pc, #396]	@ (800606c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	f000 80a9 	beq.w	8006036 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ee4:	4a61      	ldr	r2, [pc, #388]	@ (800606c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	f200 80ae 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005eec:	4a60      	ldr	r2, [pc, #384]	@ (8006070 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	f000 80a1 	beq.w	8006036 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ef4:	4a5e      	ldr	r2, [pc, #376]	@ (8006070 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f200 80a6 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005efc:	4a5d      	ldr	r2, [pc, #372]	@ (8006074 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f000 8099 	beq.w	8006036 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f04:	4a5b      	ldr	r2, [pc, #364]	@ (8006074 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f200 809e 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f0c:	4a5a      	ldr	r2, [pc, #360]	@ (8006078 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f000 8091 	beq.w	8006036 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f14:	4a58      	ldr	r2, [pc, #352]	@ (8006078 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	f200 8096 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f20:	f000 8089 	beq.w	8006036 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f28:	f200 808e 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f30:	d03e      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0x128>
 8005f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f36:	f200 8087 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3e:	f000 8086 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x1c6>
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f46:	d87f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f48:	2b70      	cmp	r3, #112	@ 0x70
 8005f4a:	d01a      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0xfa>
 8005f4c:	2b70      	cmp	r3, #112	@ 0x70
 8005f4e:	d87b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f50:	2b60      	cmp	r3, #96	@ 0x60
 8005f52:	d050      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x16e>
 8005f54:	2b60      	cmp	r3, #96	@ 0x60
 8005f56:	d877      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f58:	2b50      	cmp	r3, #80	@ 0x50
 8005f5a:	d03c      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x14e>
 8005f5c:	2b50      	cmp	r3, #80	@ 0x50
 8005f5e:	d873      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f60:	2b40      	cmp	r3, #64	@ 0x40
 8005f62:	d058      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0x18e>
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d86f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f68:	2b30      	cmp	r3, #48	@ 0x30
 8005f6a:	d064      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f6c:	2b30      	cmp	r3, #48	@ 0x30
 8005f6e:	d86b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d060      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d867      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d05c      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d05a      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f80:	e062      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f92:	f000 f9b3 	bl	80062fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	609a      	str	r2, [r3, #8]
      break;
 8005fae:	e04f      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc0:	f000 f99c 	bl	80062fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fd2:	609a      	str	r2, [r3, #8]
      break;
 8005fd4:	e03c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f000 f90e 	bl	8006204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2150      	movs	r1, #80	@ 0x50
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f967 	bl	80062c2 <TIM_ITRx_SetConfig>
      break;
 8005ff4:	e02c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006002:	461a      	mov	r2, r3
 8006004:	f000 f92d 	bl	8006262 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2160      	movs	r1, #96	@ 0x60
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f957 	bl	80062c2 <TIM_ITRx_SetConfig>
      break;
 8006014:	e01c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	461a      	mov	r2, r3
 8006024:	f000 f8ee 	bl	8006204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2140      	movs	r1, #64	@ 0x40
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f947 	bl	80062c2 <TIM_ITRx_SetConfig>
      break;
 8006034:	e00c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f000 f93e 	bl	80062c2 <TIM_ITRx_SetConfig>
      break;
 8006046:	e003      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
      break;
 800604c:	e000      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800604e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	00100070 	.word	0x00100070
 8006070:	00100040 	.word	0x00100040
 8006074:	00100030 	.word	0x00100030
 8006078:	00100020 	.word	0x00100020

0800607c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a42      	ldr	r2, [pc, #264]	@ (80061e8 <TIM_Base_SetConfig+0x11c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00f      	beq.n	8006104 <TIM_Base_SetConfig+0x38>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ea:	d00b      	beq.n	8006104 <TIM_Base_SetConfig+0x38>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a3f      	ldr	r2, [pc, #252]	@ (80061ec <TIM_Base_SetConfig+0x120>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_Base_SetConfig+0x38>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a3e      	ldr	r2, [pc, #248]	@ (80061f0 <TIM_Base_SetConfig+0x124>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_Base_SetConfig+0x38>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a3d      	ldr	r2, [pc, #244]	@ (80061f4 <TIM_Base_SetConfig+0x128>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a33      	ldr	r2, [pc, #204]	@ (80061e8 <TIM_Base_SetConfig+0x11c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d01b      	beq.n	8006156 <TIM_Base_SetConfig+0x8a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006124:	d017      	beq.n	8006156 <TIM_Base_SetConfig+0x8a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a30      	ldr	r2, [pc, #192]	@ (80061ec <TIM_Base_SetConfig+0x120>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d013      	beq.n	8006156 <TIM_Base_SetConfig+0x8a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a2f      	ldr	r2, [pc, #188]	@ (80061f0 <TIM_Base_SetConfig+0x124>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00f      	beq.n	8006156 <TIM_Base_SetConfig+0x8a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a2e      	ldr	r2, [pc, #184]	@ (80061f4 <TIM_Base_SetConfig+0x128>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00b      	beq.n	8006156 <TIM_Base_SetConfig+0x8a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a2d      	ldr	r2, [pc, #180]	@ (80061f8 <TIM_Base_SetConfig+0x12c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d007      	beq.n	8006156 <TIM_Base_SetConfig+0x8a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a2c      	ldr	r2, [pc, #176]	@ (80061fc <TIM_Base_SetConfig+0x130>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_Base_SetConfig+0x8a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a2b      	ldr	r2, [pc, #172]	@ (8006200 <TIM_Base_SetConfig+0x134>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d108      	bne.n	8006168 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a16      	ldr	r2, [pc, #88]	@ (80061e8 <TIM_Base_SetConfig+0x11c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00f      	beq.n	80061b4 <TIM_Base_SetConfig+0xe8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a17      	ldr	r2, [pc, #92]	@ (80061f4 <TIM_Base_SetConfig+0x128>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00b      	beq.n	80061b4 <TIM_Base_SetConfig+0xe8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a16      	ldr	r2, [pc, #88]	@ (80061f8 <TIM_Base_SetConfig+0x12c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d007      	beq.n	80061b4 <TIM_Base_SetConfig+0xe8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a15      	ldr	r2, [pc, #84]	@ (80061fc <TIM_Base_SetConfig+0x130>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d003      	beq.n	80061b4 <TIM_Base_SetConfig+0xe8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a14      	ldr	r2, [pc, #80]	@ (8006200 <TIM_Base_SetConfig+0x134>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d103      	bne.n	80061bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d105      	bne.n	80061da <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f023 0201 	bic.w	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	611a      	str	r2, [r3, #16]
  }
}
 80061da:	bf00      	nop
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40013400 	.word	0x40013400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800

08006204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f023 0201 	bic.w	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800622e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f023 030a 	bic.w	r3, r3, #10
 8006240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006262:	b480      	push	{r7}
 8006264:	b087      	sub	sp, #28
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	f023 0210 	bic.w	r2, r3, #16
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800628c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	031b      	lsls	r3, r3, #12
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800629e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80062d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f043 0307 	orr.w	r3, r3, #7
 80062e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	609a      	str	r2, [r3, #8]
}
 80062f0:	bf00      	nop
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	021a      	lsls	r2, r3, #8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	431a      	orrs	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	609a      	str	r2, [r3, #8]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006350:	2302      	movs	r3, #2
 8006352:	e065      	b.n	8006420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a2c      	ldr	r2, [pc, #176]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2b      	ldr	r2, [pc, #172]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d108      	bne.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800638e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1b      	ldr	r2, [pc, #108]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d018      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ca:	d013      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a18      	ldr	r2, [pc, #96]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a17      	ldr	r2, [pc, #92]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a12      	ldr	r2, [pc, #72]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a13      	ldr	r2, [pc, #76]	@ (800643c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d10c      	bne.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40013400 	.word	0x40013400
 8006434:	40000400 	.word	0x40000400
 8006438:	40000800 	.word	0x40000800
 800643c:	40014000 	.word	0x40014000

08006440 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e042      	b.n	8006564 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7fb fdc3 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2224      	movs	r2, #36	@ 0x24
 80064fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fee8 	bl	80072ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fc19 	bl	8006d54 <UART_SetConfig>
 8006522:	4603      	mov	r3, r0
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e01b      	b.n	8006564 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800653a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800654a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 ff67 	bl	8007430 <UART_CheckIdleState>
 8006562:	4603      	mov	r3, r0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800656c:	b480      	push	{r7}
 800656e:	b091      	sub	sp, #68	@ 0x44
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006580:	2b20      	cmp	r3, #32
 8006582:	d178      	bne.n	8006676 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_UART_Transmit_IT+0x24>
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e071      	b.n	8006678 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	88fa      	ldrh	r2, [r7, #6]
 800659e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2221      	movs	r2, #33	@ 0x21
 80065bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065c8:	d12a      	bne.n	8006620 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d2:	d107      	bne.n	80065e4 <HAL_UART_Transmit_IT+0x78>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d103      	bne.n	80065e4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4a29      	ldr	r2, [pc, #164]	@ (8006684 <HAL_UART_Transmit_IT+0x118>)
 80065e0:	679a      	str	r2, [r3, #120]	@ 0x78
 80065e2:	e002      	b.n	80065ea <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4a28      	ldr	r2, [pc, #160]	@ (8006688 <HAL_UART_Transmit_IT+0x11c>)
 80065e8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006600:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3308      	adds	r3, #8
 8006608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800660a:	637a      	str	r2, [r7, #52]	@ 0x34
 800660c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006610:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e5      	bne.n	80065ea <HAL_UART_Transmit_IT+0x7e>
 800661e:	e028      	b.n	8006672 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006628:	d107      	bne.n	800663a <HAL_UART_Transmit_IT+0xce>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d103      	bne.n	800663a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a15      	ldr	r2, [pc, #84]	@ (800668c <HAL_UART_Transmit_IT+0x120>)
 8006636:	679a      	str	r2, [r3, #120]	@ 0x78
 8006638:	e002      	b.n	8006640 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a14      	ldr	r2, [pc, #80]	@ (8006690 <HAL_UART_Transmit_IT+0x124>)
 800663e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	613b      	str	r3, [r7, #16]
   return(result);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800665e:	623b      	str	r3, [r7, #32]
 8006660:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	69f9      	ldr	r1, [r7, #28]
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	61bb      	str	r3, [r7, #24]
   return(result);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e6      	bne.n	8006640 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e000      	b.n	8006678 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006676:	2302      	movs	r3, #2
  }
}
 8006678:	4618      	mov	r0, r3
 800667a:	3744      	adds	r7, #68	@ 0x44
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	08007d63 	.word	0x08007d63
 8006688:	08007c83 	.word	0x08007c83
 800668c:	08007bc1 	.word	0x08007bc1
 8006690:	08007b09 	.word	0x08007b09

08006694 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b0ba      	sub	sp, #232	@ 0xe8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80066be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80066c2:	4013      	ands	r3, r2
 80066c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80066c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d11b      	bne.n	8006708 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d015      	beq.n	8006708 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d105      	bne.n	80066f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8300 	beq.w	8006cfe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
      }
      return;
 8006706:	e2fa      	b.n	8006cfe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8123 	beq.w	8006958 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006712:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006716:	4b8d      	ldr	r3, [pc, #564]	@ (800694c <HAL_UART_IRQHandler+0x2b8>)
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d106      	bne.n	800672c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800671e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006722:	4b8b      	ldr	r3, [pc, #556]	@ (8006950 <HAL_UART_IRQHandler+0x2bc>)
 8006724:	4013      	ands	r3, r2
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8116 	beq.w	8006958 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800672c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d011      	beq.n	800675c <HAL_UART_IRQHandler+0xc8>
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800673c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2201      	movs	r2, #1
 800674a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006752:	f043 0201 	orr.w	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800675c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d011      	beq.n	800678c <HAL_UART_IRQHandler+0xf8>
 8006768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2202      	movs	r2, #2
 800677a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006782:	f043 0204 	orr.w	r2, r3, #4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800678c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d011      	beq.n	80067bc <HAL_UART_IRQHandler+0x128>
 8006798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2204      	movs	r2, #4
 80067aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b2:	f043 0202 	orr.w	r2, r3, #2
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d017      	beq.n	80067f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80067d8:	4b5c      	ldr	r3, [pc, #368]	@ (800694c <HAL_UART_IRQHandler+0x2b8>)
 80067da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2208      	movs	r2, #8
 80067e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ee:	f043 0208 	orr.w	r2, r3, #8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006800:	2b00      	cmp	r3, #0
 8006802:	d012      	beq.n	800682a <HAL_UART_IRQHandler+0x196>
 8006804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006808:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00c      	beq.n	800682a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006820:	f043 0220 	orr.w	r2, r3, #32
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8266 	beq.w	8006d02 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d013      	beq.n	800686a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800684e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006870:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687e:	2b40      	cmp	r3, #64	@ 0x40
 8006880:	d005      	beq.n	800688e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006886:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800688a:	2b00      	cmp	r3, #0
 800688c:	d054      	beq.n	8006938 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 ffcd 	bl	800782e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689e:	2b40      	cmp	r3, #64	@ 0x40
 80068a0:	d146      	bne.n	8006930 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1d9      	bne.n	80068a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d017      	beq.n	8006928 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fe:	4a15      	ldr	r2, [pc, #84]	@ (8006954 <HAL_UART_IRQHandler+0x2c0>)
 8006900:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006908:	4618      	mov	r0, r3
 800690a:	f7fc f84b 	bl	80029a4 <HAL_DMA_Abort_IT>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d019      	beq.n	8006948 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006922:	4610      	mov	r0, r2
 8006924:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006926:	e00f      	b.n	8006948 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fa09 	bl	8006d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692e:	e00b      	b.n	8006948 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fa05 	bl	8006d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006936:	e007      	b.n	8006948 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa01 	bl	8006d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006946:	e1dc      	b.n	8006d02 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006948:	bf00      	nop
    return;
 800694a:	e1da      	b.n	8006d02 <HAL_UART_IRQHandler+0x66e>
 800694c:	10000001 	.word	0x10000001
 8006950:	04000120 	.word	0x04000120
 8006954:	08007ae5 	.word	0x08007ae5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800695c:	2b01      	cmp	r3, #1
 800695e:	f040 8170 	bne.w	8006c42 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006966:	f003 0310 	and.w	r3, r3, #16
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 8169 	beq.w	8006c42 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 8162 	beq.w	8006c42 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2210      	movs	r2, #16
 8006984:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006990:	2b40      	cmp	r3, #64	@ 0x40
 8006992:	f040 80d8 	bne.w	8006b46 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 80af 	beq.w	8006b0c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069b8:	429a      	cmp	r2, r3
 80069ba:	f080 80a7 	bcs.w	8006b0c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f040 8087 	bne.w	8006aea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80069f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1da      	bne.n	80069dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3308      	adds	r3, #8
 8006a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e1      	bne.n	8006a26 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3308      	adds	r3, #8
 8006a68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3308      	adds	r3, #8
 8006a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e3      	bne.n	8006a62 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ab8:	f023 0310 	bic.w	r3, r3, #16
 8006abc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006acc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ad0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e4      	bne.n	8006aa8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fb ff04 	bl	80028f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7fb f8cd 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006b0a:	e0fc      	b.n	8006d06 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b16:	429a      	cmp	r2, r3
 8006b18:	f040 80f5 	bne.w	8006d06 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	f040 80eb 	bne.w	8006d06 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fb f8b0 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
      return;
 8006b44:	e0df      	b.n	8006d06 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 80d1 	beq.w	8006d0a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80cc 	beq.w	8006d0a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e4      	bne.n	8006b72 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e1      	bne.n	8006ba8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f023 0310 	bic.w	r3, r3, #16
 8006c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c1a:	61fb      	str	r3, [r7, #28]
 8006c1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	69b9      	ldr	r1, [r7, #24]
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	617b      	str	r3, [r7, #20]
   return(result);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e4      	bne.n	8006bf8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2202      	movs	r2, #2
 8006c32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fb f832 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c40:	e063      	b.n	8006d0a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00e      	beq.n	8006c6c <HAL_UART_IRQHandler+0x5d8>
 8006c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d008      	beq.n	8006c6c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 f91c 	bl	8007ea2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c6a:	e051      	b.n	8006d10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d014      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d105      	bne.n	8006c90 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d008      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d03a      	beq.n	8006d0e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
    }
    return;
 8006ca0:	e035      	b.n	8006d0e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x62e>
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 f8c6 	bl	8007e4c <UART_EndTransmit_IT>
    return;
 8006cc0:	e026      	b.n	8006d10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x64e>
 8006cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 f8f5 	bl	8007eca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ce0:	e016      	b.n	8006d10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d010      	beq.n	8006d10 <HAL_UART_IRQHandler+0x67c>
 8006cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da0c      	bge.n	8006d10 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 f8dd 	bl	8007eb6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cfc:	e008      	b.n	8006d10 <HAL_UART_IRQHandler+0x67c>
      return;
 8006cfe:	bf00      	nop
 8006d00:	e006      	b.n	8006d10 <HAL_UART_IRQHandler+0x67c>
    return;
 8006d02:	bf00      	nop
 8006d04:	e004      	b.n	8006d10 <HAL_UART_IRQHandler+0x67c>
      return;
 8006d06:	bf00      	nop
 8006d08:	e002      	b.n	8006d10 <HAL_UART_IRQHandler+0x67c>
      return;
 8006d0a:	bf00      	nop
 8006d0c:	e000      	b.n	8006d10 <HAL_UART_IRQHandler+0x67c>
    return;
 8006d0e:	bf00      	nop
  }
}
 8006d10:	37e8      	adds	r7, #232	@ 0xe8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop

08006d18 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d58:	b08c      	sub	sp, #48	@ 0x30
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4bab      	ldr	r3, [pc, #684]	@ (8007030 <UART_SetConfig+0x2dc>)
 8006d84:	4013      	ands	r3, r2
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	6812      	ldr	r2, [r2, #0]
 8006d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4aa0      	ldr	r2, [pc, #640]	@ (8007034 <UART_SetConfig+0x2e0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d004      	beq.n	8006dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006dca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	6812      	ldr	r2, [r2, #0]
 8006dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dd4:	430b      	orrs	r3, r1
 8006dd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dde:	f023 010f 	bic.w	r1, r3, #15
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a91      	ldr	r2, [pc, #580]	@ (8007038 <UART_SetConfig+0x2e4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d125      	bne.n	8006e44 <UART_SetConfig+0xf0>
 8006df8:	4b90      	ldr	r3, [pc, #576]	@ (800703c <UART_SetConfig+0x2e8>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d81a      	bhi.n	8006e3c <UART_SetConfig+0xe8>
 8006e06:	a201      	add	r2, pc, #4	@ (adr r2, 8006e0c <UART_SetConfig+0xb8>)
 8006e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0c:	08006e1d 	.word	0x08006e1d
 8006e10:	08006e2d 	.word	0x08006e2d
 8006e14:	08006e25 	.word	0x08006e25
 8006e18:	08006e35 	.word	0x08006e35
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e22:	e0d6      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006e24:	2302      	movs	r3, #2
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e2a:	e0d2      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e32:	e0ce      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006e34:	2308      	movs	r3, #8
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3a:	e0ca      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e42:	e0c6      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a7d      	ldr	r2, [pc, #500]	@ (8007040 <UART_SetConfig+0x2ec>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d138      	bne.n	8006ec0 <UART_SetConfig+0x16c>
 8006e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800703c <UART_SetConfig+0x2e8>)
 8006e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e54:	f003 030c 	and.w	r3, r3, #12
 8006e58:	2b0c      	cmp	r3, #12
 8006e5a:	d82d      	bhi.n	8006eb8 <UART_SetConfig+0x164>
 8006e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <UART_SetConfig+0x110>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e99 	.word	0x08006e99
 8006e68:	08006eb9 	.word	0x08006eb9
 8006e6c:	08006eb9 	.word	0x08006eb9
 8006e70:	08006eb9 	.word	0x08006eb9
 8006e74:	08006ea9 	.word	0x08006ea9
 8006e78:	08006eb9 	.word	0x08006eb9
 8006e7c:	08006eb9 	.word	0x08006eb9
 8006e80:	08006eb9 	.word	0x08006eb9
 8006e84:	08006ea1 	.word	0x08006ea1
 8006e88:	08006eb9 	.word	0x08006eb9
 8006e8c:	08006eb9 	.word	0x08006eb9
 8006e90:	08006eb9 	.word	0x08006eb9
 8006e94:	08006eb1 	.word	0x08006eb1
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9e:	e098      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea6:	e094      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eae:	e090      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eb6:	e08c      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006eb8:	2310      	movs	r3, #16
 8006eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ebe:	e088      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a5f      	ldr	r2, [pc, #380]	@ (8007044 <UART_SetConfig+0x2f0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d125      	bne.n	8006f16 <UART_SetConfig+0x1c2>
 8006eca:	4b5c      	ldr	r3, [pc, #368]	@ (800703c <UART_SetConfig+0x2e8>)
 8006ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ed4:	2b30      	cmp	r3, #48	@ 0x30
 8006ed6:	d016      	beq.n	8006f06 <UART_SetConfig+0x1b2>
 8006ed8:	2b30      	cmp	r3, #48	@ 0x30
 8006eda:	d818      	bhi.n	8006f0e <UART_SetConfig+0x1ba>
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d00a      	beq.n	8006ef6 <UART_SetConfig+0x1a2>
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d814      	bhi.n	8006f0e <UART_SetConfig+0x1ba>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <UART_SetConfig+0x19a>
 8006ee8:	2b10      	cmp	r3, #16
 8006eea:	d008      	beq.n	8006efe <UART_SetConfig+0x1aa>
 8006eec:	e00f      	b.n	8006f0e <UART_SetConfig+0x1ba>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef4:	e06d      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efc:	e069      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006efe:	2304      	movs	r3, #4
 8006f00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f04:	e065      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006f06:	2308      	movs	r3, #8
 8006f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0c:	e061      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006f0e:	2310      	movs	r3, #16
 8006f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f14:	e05d      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a4b      	ldr	r2, [pc, #300]	@ (8007048 <UART_SetConfig+0x2f4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d125      	bne.n	8006f6c <UART_SetConfig+0x218>
 8006f20:	4b46      	ldr	r3, [pc, #280]	@ (800703c <UART_SetConfig+0x2e8>)
 8006f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f2c:	d016      	beq.n	8006f5c <UART_SetConfig+0x208>
 8006f2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f30:	d818      	bhi.n	8006f64 <UART_SetConfig+0x210>
 8006f32:	2b80      	cmp	r3, #128	@ 0x80
 8006f34:	d00a      	beq.n	8006f4c <UART_SetConfig+0x1f8>
 8006f36:	2b80      	cmp	r3, #128	@ 0x80
 8006f38:	d814      	bhi.n	8006f64 <UART_SetConfig+0x210>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <UART_SetConfig+0x1f0>
 8006f3e:	2b40      	cmp	r3, #64	@ 0x40
 8006f40:	d008      	beq.n	8006f54 <UART_SetConfig+0x200>
 8006f42:	e00f      	b.n	8006f64 <UART_SetConfig+0x210>
 8006f44:	2300      	movs	r3, #0
 8006f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f4a:	e042      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f52:	e03e      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006f54:	2304      	movs	r3, #4
 8006f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f5a:	e03a      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f62:	e036      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006f64:	2310      	movs	r3, #16
 8006f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f6a:	e032      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a30      	ldr	r2, [pc, #192]	@ (8007034 <UART_SetConfig+0x2e0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d12a      	bne.n	8006fcc <UART_SetConfig+0x278>
 8006f76:	4b31      	ldr	r3, [pc, #196]	@ (800703c <UART_SetConfig+0x2e8>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f84:	d01a      	beq.n	8006fbc <UART_SetConfig+0x268>
 8006f86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f8a:	d81b      	bhi.n	8006fc4 <UART_SetConfig+0x270>
 8006f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f90:	d00c      	beq.n	8006fac <UART_SetConfig+0x258>
 8006f92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f96:	d815      	bhi.n	8006fc4 <UART_SetConfig+0x270>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <UART_SetConfig+0x250>
 8006f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa0:	d008      	beq.n	8006fb4 <UART_SetConfig+0x260>
 8006fa2:	e00f      	b.n	8006fc4 <UART_SetConfig+0x270>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006faa:	e012      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006fac:	2302      	movs	r3, #2
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb2:	e00e      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fba:	e00a      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fc2:	e006      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fca:	e002      	b.n	8006fd2 <UART_SetConfig+0x27e>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a17      	ldr	r2, [pc, #92]	@ (8007034 <UART_SetConfig+0x2e0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	f040 80a8 	bne.w	800712e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d834      	bhi.n	8007050 <UART_SetConfig+0x2fc>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <UART_SetConfig+0x298>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007011 	.word	0x08007011
 8006ff0:	08007051 	.word	0x08007051
 8006ff4:	08007019 	.word	0x08007019
 8006ff8:	08007051 	.word	0x08007051
 8006ffc:	0800701f 	.word	0x0800701f
 8007000:	08007051 	.word	0x08007051
 8007004:	08007051 	.word	0x08007051
 8007008:	08007051 	.word	0x08007051
 800700c:	08007027 	.word	0x08007027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007010:	f7fe fac6 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8007014:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007016:	e021      	b.n	800705c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007018:	4b0c      	ldr	r3, [pc, #48]	@ (800704c <UART_SetConfig+0x2f8>)
 800701a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800701c:	e01e      	b.n	800705c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701e:	f7fe fa51 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8007022:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007024:	e01a      	b.n	800705c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800702a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800702c:	e016      	b.n	800705c <UART_SetConfig+0x308>
 800702e:	bf00      	nop
 8007030:	cfff69f3 	.word	0xcfff69f3
 8007034:	40008000 	.word	0x40008000
 8007038:	40013800 	.word	0x40013800
 800703c:	40021000 	.word	0x40021000
 8007040:	40004400 	.word	0x40004400
 8007044:	40004800 	.word	0x40004800
 8007048:	40004c00 	.word	0x40004c00
 800704c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800705a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 812a 	beq.w	80072b8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	4a9e      	ldr	r2, [pc, #632]	@ (80072e4 <UART_SetConfig+0x590>)
 800706a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800706e:	461a      	mov	r2, r3
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	fbb3 f3f2 	udiv	r3, r3, r2
 8007076:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4613      	mov	r3, r2
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	4413      	add	r3, r2
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	429a      	cmp	r2, r3
 8007086:	d305      	bcc.n	8007094 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	429a      	cmp	r2, r3
 8007092:	d903      	bls.n	800709c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800709a:	e10d      	b.n	80072b8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	2200      	movs	r2, #0
 80070a0:	60bb      	str	r3, [r7, #8]
 80070a2:	60fa      	str	r2, [r7, #12]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a8:	4a8e      	ldr	r2, [pc, #568]	@ (80072e4 <UART_SetConfig+0x590>)
 80070aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2200      	movs	r2, #0
 80070b2:	603b      	str	r3, [r7, #0]
 80070b4:	607a      	str	r2, [r7, #4]
 80070b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070be:	f7f9 f8ff 	bl	80002c0 <__aeabi_uldivmod>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4610      	mov	r0, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	f04f 0200 	mov.w	r2, #0
 80070ce:	f04f 0300 	mov.w	r3, #0
 80070d2:	020b      	lsls	r3, r1, #8
 80070d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070d8:	0202      	lsls	r2, r0, #8
 80070da:	6979      	ldr	r1, [r7, #20]
 80070dc:	6849      	ldr	r1, [r1, #4]
 80070de:	0849      	lsrs	r1, r1, #1
 80070e0:	2000      	movs	r0, #0
 80070e2:	460c      	mov	r4, r1
 80070e4:	4605      	mov	r5, r0
 80070e6:	eb12 0804 	adds.w	r8, r2, r4
 80070ea:	eb43 0905 	adc.w	r9, r3, r5
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	469a      	mov	sl, r3
 80070f6:	4693      	mov	fp, r2
 80070f8:	4652      	mov	r2, sl
 80070fa:	465b      	mov	r3, fp
 80070fc:	4640      	mov	r0, r8
 80070fe:	4649      	mov	r1, r9
 8007100:	f7f9 f8de 	bl	80002c0 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4613      	mov	r3, r2
 800710a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007112:	d308      	bcc.n	8007126 <UART_SetConfig+0x3d2>
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800711a:	d204      	bcs.n	8007126 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	60da      	str	r2, [r3, #12]
 8007124:	e0c8      	b.n	80072b8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800712c:	e0c4      	b.n	80072b8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007136:	d167      	bne.n	8007208 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007138:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800713c:	2b08      	cmp	r3, #8
 800713e:	d828      	bhi.n	8007192 <UART_SetConfig+0x43e>
 8007140:	a201      	add	r2, pc, #4	@ (adr r2, 8007148 <UART_SetConfig+0x3f4>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	0800716d 	.word	0x0800716d
 800714c:	08007175 	.word	0x08007175
 8007150:	0800717d 	.word	0x0800717d
 8007154:	08007193 	.word	0x08007193
 8007158:	08007183 	.word	0x08007183
 800715c:	08007193 	.word	0x08007193
 8007160:	08007193 	.word	0x08007193
 8007164:	08007193 	.word	0x08007193
 8007168:	0800718b 	.word	0x0800718b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800716c:	f7fe fa18 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8007170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007172:	e014      	b.n	800719e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007174:	f7fe fa2a 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
 8007178:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800717a:	e010      	b.n	800719e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800717c:	4b5a      	ldr	r3, [pc, #360]	@ (80072e8 <UART_SetConfig+0x594>)
 800717e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007180:	e00d      	b.n	800719e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007182:	f7fe f99f 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8007186:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007188:	e009      	b.n	800719e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800718a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007190:	e005      	b.n	800719e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800719c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 8089 	beq.w	80072b8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071aa:	4a4e      	ldr	r2, [pc, #312]	@ (80072e4 <UART_SetConfig+0x590>)
 80071ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b8:	005a      	lsls	r2, r3, #1
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	441a      	add	r2, r3
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	2b0f      	cmp	r3, #15
 80071d0:	d916      	bls.n	8007200 <UART_SetConfig+0x4ac>
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071d8:	d212      	bcs.n	8007200 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f023 030f 	bic.w	r3, r3, #15
 80071e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	8bfb      	ldrh	r3, [r7, #30]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	8bfa      	ldrh	r2, [r7, #30]
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	e05b      	b.n	80072b8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007206:	e057      	b.n	80072b8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007208:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800720c:	2b08      	cmp	r3, #8
 800720e:	d828      	bhi.n	8007262 <UART_SetConfig+0x50e>
 8007210:	a201      	add	r2, pc, #4	@ (adr r2, 8007218 <UART_SetConfig+0x4c4>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	0800723d 	.word	0x0800723d
 800721c:	08007245 	.word	0x08007245
 8007220:	0800724d 	.word	0x0800724d
 8007224:	08007263 	.word	0x08007263
 8007228:	08007253 	.word	0x08007253
 800722c:	08007263 	.word	0x08007263
 8007230:	08007263 	.word	0x08007263
 8007234:	08007263 	.word	0x08007263
 8007238:	0800725b 	.word	0x0800725b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800723c:	f7fe f9b0 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8007240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007242:	e014      	b.n	800726e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007244:	f7fe f9c2 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
 8007248:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800724a:	e010      	b.n	800726e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800724c:	4b26      	ldr	r3, [pc, #152]	@ (80072e8 <UART_SetConfig+0x594>)
 800724e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007250:	e00d      	b.n	800726e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007252:	f7fe f937 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8007256:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007258:	e009      	b.n	800726e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800725a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800725e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007260:	e005      	b.n	800726e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800726c:	bf00      	nop
    }

    if (pclk != 0U)
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d021      	beq.n	80072b8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007278:	4a1a      	ldr	r2, [pc, #104]	@ (80072e4 <UART_SetConfig+0x590>)
 800727a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800727e:	461a      	mov	r2, r3
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	fbb3 f2f2 	udiv	r2, r3, r2
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	085b      	lsrs	r3, r3, #1
 800728c:	441a      	add	r2, r3
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	fbb2 f3f3 	udiv	r3, r2, r3
 8007296:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	2b0f      	cmp	r3, #15
 800729c:	d909      	bls.n	80072b2 <UART_SetConfig+0x55e>
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a4:	d205      	bcs.n	80072b2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60da      	str	r2, [r3, #12]
 80072b0:	e002      	b.n	80072b8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	2200      	movs	r2, #0
 80072cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2200      	movs	r2, #0
 80072d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3730      	adds	r7, #48	@ 0x30
 80072dc:	46bd      	mov	sp, r7
 80072de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072e2:	bf00      	nop
 80072e4:	0800d368 	.word	0x0800d368
 80072e8:	00f42400 	.word	0x00f42400

080072ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00a      	beq.n	800735a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01a      	beq.n	8007402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ea:	d10a      	bne.n	8007402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	605a      	str	r2, [r3, #4]
  }
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b098      	sub	sp, #96	@ 0x60
 8007434:	af02      	add	r7, sp, #8
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007440:	f7fa fff6 	bl	8002430 <HAL_GetTick>
 8007444:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0308 	and.w	r3, r3, #8
 8007450:	2b08      	cmp	r3, #8
 8007452:	d12f      	bne.n	80074b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007454:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800745c:	2200      	movs	r2, #0
 800745e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f88e 	bl	8007584 <UART_WaitOnFlagUntilTimeout>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d022      	beq.n	80074b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800747c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007482:	653b      	str	r3, [r7, #80]	@ 0x50
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800748c:	647b      	str	r3, [r7, #68]	@ 0x44
 800748e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800749a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e6      	bne.n	800746e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e063      	b.n	800757c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0304 	and.w	r3, r3, #4
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d149      	bne.n	8007556 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ca:	2200      	movs	r2, #0
 80074cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f857 	bl	8007584 <UART_WaitOnFlagUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d03c      	beq.n	8007556 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	623b      	str	r3, [r7, #32]
   return(result);
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80074fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e6      	bne.n	80074dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3308      	adds	r3, #8
 8007514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	60fb      	str	r3, [r7, #12]
   return(result);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3308      	adds	r3, #8
 800752c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800752e:	61fa      	str	r2, [r7, #28]
 8007530:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	69b9      	ldr	r1, [r7, #24]
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	617b      	str	r3, [r7, #20]
   return(result);
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e5      	bne.n	800750e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e012      	b.n	800757c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3758      	adds	r7, #88	@ 0x58
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	4613      	mov	r3, r2
 8007592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007594:	e04f      	b.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d04b      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759e:	f7fa ff47 	bl	8002430 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d302      	bcc.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e04e      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d037      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b80      	cmp	r3, #128	@ 0x80
 80075ca:	d034      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b40      	cmp	r3, #64	@ 0x40
 80075d0:	d031      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d110      	bne.n	8007602 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2208      	movs	r2, #8
 80075e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f920 	bl	800782e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2208      	movs	r2, #8
 80075f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e029      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800760c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007610:	d111      	bne.n	8007636 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800761a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f906 	bl	800782e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e00f      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69da      	ldr	r2, [r3, #28]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	429a      	cmp	r2, r3
 8007652:	d0a0      	beq.n	8007596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b096      	sub	sp, #88	@ 0x58
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	88fa      	ldrh	r2, [r7, #6]
 8007678:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2222      	movs	r2, #34	@ 0x22
 8007688:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007692:	2b00      	cmp	r3, #0
 8007694:	d02d      	beq.n	80076f2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800769c:	4a40      	ldr	r2, [pc, #256]	@ (80077a0 <UART_Start_Receive_DMA+0x140>)
 800769e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a6:	4a3f      	ldr	r2, [pc, #252]	@ (80077a4 <UART_Start_Receive_DMA+0x144>)
 80076a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b0:	4a3d      	ldr	r2, [pc, #244]	@ (80077a8 <UART_Start_Receive_DMA+0x148>)
 80076b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ba:	2200      	movs	r2, #0
 80076bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3324      	adds	r3, #36	@ 0x24
 80076ca:	4619      	mov	r1, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d0:	461a      	mov	r2, r3
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	f7fb f892 	bl	80027fc <HAL_DMA_Start_IT>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2210      	movs	r2, #16
 80076e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e051      	b.n	8007796 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d018      	beq.n	800772c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800770e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800771a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800771e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e6      	bne.n	80076fa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3308      	adds	r3, #8
 8007732:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	f043 0301 	orr.w	r3, r3, #1
 8007742:	653b      	str	r3, [r7, #80]	@ 0x50
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3308      	adds	r3, #8
 800774a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800774c:	637a      	str	r2, [r7, #52]	@ 0x34
 800774e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e5      	bne.n	800772c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	613b      	str	r3, [r7, #16]
   return(result);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007780:	623a      	str	r2, [r7, #32]
 8007782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	69f9      	ldr	r1, [r7, #28]
 8007786:	6a3a      	ldr	r2, [r7, #32]
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	61bb      	str	r3, [r7, #24]
   return(result);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e5      	bne.n	8007760 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3758      	adds	r7, #88	@ 0x58
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	080078fb 	.word	0x080078fb
 80077a4:	08007a27 	.word	0x08007a27
 80077a8:	08007a65 	.word	0x08007a65

080077ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b08f      	sub	sp, #60	@ 0x3c
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80077c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e6      	bne.n	80077b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80077fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007806:	61ba      	str	r2, [r7, #24]
 8007808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6979      	ldr	r1, [r7, #20]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	613b      	str	r3, [r7, #16]
   return(result);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e5      	bne.n	80077e6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007822:	bf00      	nop
 8007824:	373c      	adds	r7, #60	@ 0x3c
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800782e:	b480      	push	{r7}
 8007830:	b095      	sub	sp, #84	@ 0x54
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007846:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800784a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007854:	643b      	str	r3, [r7, #64]	@ 0x40
 8007856:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800785a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e6      	bne.n	8007836 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	61fb      	str	r3, [r7, #28]
   return(result);
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800787e:	f023 0301 	bic.w	r3, r3, #1
 8007882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800788c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800788e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e3      	bne.n	8007868 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d118      	bne.n	80078da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f023 0310 	bic.w	r3, r3, #16
 80078bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078c6:	61bb      	str	r3, [r7, #24]
 80078c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	6979      	ldr	r1, [r7, #20]
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	613b      	str	r3, [r7, #16]
   return(result);
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e6      	bne.n	80078a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2220      	movs	r2, #32
 80078de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078ee:	bf00      	nop
 80078f0:	3754      	adds	r7, #84	@ 0x54
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b09c      	sub	sp, #112	@ 0x70
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007906:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d171      	bne.n	80079fa <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007918:	2200      	movs	r2, #0
 800791a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800791e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800792c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800792e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007932:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800793c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800793e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007942:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800794a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e6      	bne.n	800791e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007962:	f023 0301 	bic.w	r3, r3, #1
 8007966:	667b      	str	r3, [r7, #100]	@ 0x64
 8007968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3308      	adds	r3, #8
 800796e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007970:	647a      	str	r2, [r7, #68]	@ 0x44
 8007972:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800797e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e5      	bne.n	8007950 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3308      	adds	r3, #8
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	623b      	str	r3, [r7, #32]
   return(result);
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800799a:	663b      	str	r3, [r7, #96]	@ 0x60
 800799c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3308      	adds	r3, #8
 80079a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80079a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e5      	bne.n	8007984 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079ba:	2220      	movs	r2, #32
 80079bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d118      	bne.n	80079fa <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f023 0310 	bic.w	r3, r3, #16
 80079dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	69b9      	ldr	r1, [r7, #24]
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	617b      	str	r3, [r7, #20]
   return(result);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e6      	bne.n	80079c8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079fc:	2200      	movs	r2, #0
 80079fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d107      	bne.n	8007a18 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007a12:	f7fa f947 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a16:	e002      	b.n	8007a1e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007a18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007a1a:	f7ff f97d 	bl	8006d18 <HAL_UART_RxCpltCallback>
}
 8007a1e:	bf00      	nop
 8007a20:	3770      	adds	r7, #112	@ 0x70
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d109      	bne.n	8007a56 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7fa f928 	bl	8001ca4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a54:	e002      	b.n	8007a5c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff f968 	bl	8006d2c <HAL_UART_RxHalfCpltCallback>
}
 8007a5c:	bf00      	nop
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a78:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a8c:	2b80      	cmp	r3, #128	@ 0x80
 8007a8e:	d109      	bne.n	8007aa4 <UART_DMAError+0x40>
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b21      	cmp	r3, #33	@ 0x21
 8007a94:	d106      	bne.n	8007aa4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007a9e:	6978      	ldr	r0, [r7, #20]
 8007aa0:	f7ff fe84 	bl	80077ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aae:	2b40      	cmp	r3, #64	@ 0x40
 8007ab0:	d109      	bne.n	8007ac6 <UART_DMAError+0x62>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b22      	cmp	r3, #34	@ 0x22
 8007ab6:	d106      	bne.n	8007ac6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007ac0:	6978      	ldr	r0, [r7, #20]
 8007ac2:	f7ff feb4 	bl	800782e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007acc:	f043 0210 	orr.w	r2, r3, #16
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ad6:	6978      	ldr	r0, [r7, #20]
 8007ad8:	f7ff f932 	bl	8006d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007adc:	bf00      	nop
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff f920 	bl	8006d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b08f      	sub	sp, #60	@ 0x3c
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b16:	2b21      	cmp	r3, #33	@ 0x21
 8007b18:	d14c      	bne.n	8007bb4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d132      	bne.n	8007b8c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	e853 3f00 	ldrex	r3, [r3]
 8007b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b46:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e6      	bne.n	8007b26 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b76:	61bb      	str	r3, [r7, #24]
 8007b78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	6979      	ldr	r1, [r7, #20]
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	613b      	str	r3, [r7, #16]
   return(result);
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e6      	bne.n	8007b58 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007b8a:	e013      	b.n	8007bb4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b90:	781a      	ldrb	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007bb4:	bf00      	nop
 8007bb6:	373c      	adds	r7, #60	@ 0x3c
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b091      	sub	sp, #68	@ 0x44
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bce:	2b21      	cmp	r3, #33	@ 0x21
 8007bd0:	d151      	bne.n	8007c76 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d132      	bne.n	8007c44 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	623b      	str	r3, [r7, #32]
   return(result);
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e6      	bne.n	8007bde <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2e:	61fb      	str	r3, [r7, #28]
 8007c30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	69b9      	ldr	r1, [r7, #24]
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e6      	bne.n	8007c10 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007c42:	e018      	b.n	8007c76 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c58:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c5e:	1c9a      	adds	r2, r3, #2
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007c76:	bf00      	nop
 8007c78:	3744      	adds	r7, #68	@ 0x44
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b091      	sub	sp, #68	@ 0x44
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c90:	2b21      	cmp	r3, #33	@ 0x21
 8007c92:	d160      	bne.n	8007d56 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c9a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007c9c:	e057      	b.n	8007d4e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d133      	bne.n	8007d12 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3308      	adds	r3, #8
 8007cb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cca:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e5      	bne.n	8007caa <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	69b9      	ldr	r1, [r7, #24]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	617b      	str	r3, [r7, #20]
   return(result);
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e6      	bne.n	8007cde <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007d10:	e021      	b.n	8007d56 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d013      	beq.n	8007d48 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d24:	781a      	ldrb	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007d48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007d4e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1a4      	bne.n	8007c9e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007d54:	e7ff      	b.n	8007d56 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007d56:	bf00      	nop
 8007d58:	3744      	adds	r7, #68	@ 0x44
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b091      	sub	sp, #68	@ 0x44
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d70:	2b21      	cmp	r3, #33	@ 0x21
 8007d72:	d165      	bne.n	8007e40 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d7a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007d7c:	e05c      	b.n	8007e38 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d133      	bne.n	8007df2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3308      	adds	r3, #8
 8007d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	e853 3f00 	ldrex	r3, [r3]
 8007d98:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3308      	adds	r3, #8
 8007da8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e5      	bne.n	8007d8a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6979      	ldr	r1, [r7, #20]
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e6      	bne.n	8007dbe <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007df0:	e026      	b.n	8007e40 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d018      	beq.n	8007e32 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e04:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e14:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e1a:	1c9a      	adds	r2, r3, #2
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007e32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007e34:	3b01      	subs	r3, #1
 8007e36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007e38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d19f      	bne.n	8007d7e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007e3e:	e7ff      	b.n	8007e40 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007e40:	bf00      	nop
 8007e42:	3744      	adds	r7, #68	@ 0x44
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e68:	61fb      	str	r3, [r7, #28]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	61bb      	str	r3, [r7, #24]
 8007e74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6979      	ldr	r1, [r7, #20]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e6      	bne.n	8007e54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7f9 ff77 	bl	8001d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e9a:	bf00      	nop
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e027      	b.n	8007f44 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2224      	movs	r2, #36	@ 0x24
 8007f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0201 	bic.w	r2, r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e02d      	b.n	8007fc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2224      	movs	r2, #36	@ 0x24
 8007f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0201 	bic.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f8a3 	bl	80080f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e02d      	b.n	8008040 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2224      	movs	r2, #36	@ 0x24
 8007ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0201 	bic.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f865 	bl	80080f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08c      	sub	sp, #48	@ 0x30
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4613      	mov	r3, r2
 8008054:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800805c:	2b20      	cmp	r3, #32
 800805e:	d142      	bne.n	80080e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d002      	beq.n	800806c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e03b      	b.n	80080e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800807c:	88fb      	ldrh	r3, [r7, #6]
 800807e:	461a      	mov	r2, r3
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff faec 	bl	8007660 <UART_Start_Receive_DMA>
 8008088:	4603      	mov	r3, r0
 800808a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800808e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008092:	2b00      	cmp	r3, #0
 8008094:	d124      	bne.n	80080e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800809a:	2b01      	cmp	r3, #1
 800809c:	d11d      	bne.n	80080da <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2210      	movs	r2, #16
 80080a4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	617b      	str	r3, [r7, #20]
   return(result);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f043 0310 	orr.w	r3, r3, #16
 80080ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	461a      	mov	r2, r3
 80080c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6a39      	ldr	r1, [r7, #32]
 80080ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e6      	bne.n	80080a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80080d8:	e002      	b.n	80080e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80080e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080e4:	e000      	b.n	80080e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080e6:	2302      	movs	r3, #2
  }
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3730      	adds	r7, #48	@ 0x30
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d108      	bne.n	8008112 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008110:	e031      	b.n	8008176 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008112:	2308      	movs	r3, #8
 8008114:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008116:	2308      	movs	r3, #8
 8008118:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	0e5b      	lsrs	r3, r3, #25
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	0f5b      	lsrs	r3, r3, #29
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	7b3a      	ldrb	r2, [r7, #12]
 800813e:	4911      	ldr	r1, [pc, #68]	@ (8008184 <UARTEx_SetNbDataToProcess+0x94>)
 8008140:	5c8a      	ldrb	r2, [r1, r2]
 8008142:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008146:	7b3a      	ldrb	r2, [r7, #12]
 8008148:	490f      	ldr	r1, [pc, #60]	@ (8008188 <UARTEx_SetNbDataToProcess+0x98>)
 800814a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800814c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008150:	b29a      	uxth	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	7b7a      	ldrb	r2, [r7, #13]
 800815c:	4909      	ldr	r1, [pc, #36]	@ (8008184 <UARTEx_SetNbDataToProcess+0x94>)
 800815e:	5c8a      	ldrb	r2, [r1, r2]
 8008160:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008164:	7b7a      	ldrb	r2, [r7, #13]
 8008166:	4908      	ldr	r1, [pc, #32]	@ (8008188 <UARTEx_SetNbDataToProcess+0x98>)
 8008168:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800816a:	fb93 f3f2 	sdiv	r3, r3, r2
 800816e:	b29a      	uxth	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008176:	bf00      	nop
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	0800d380 	.word	0x0800d380
 8008188:	0800d388 	.word	0x0800d388

0800818c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800819c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80081a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b085      	sub	sp, #20
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081c2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80081c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	43db      	mvns	r3, r3
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	4013      	ands	r3, r2
 80081da:	b29a      	uxth	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	1d3b      	adds	r3, r7, #4
 80081fa:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800822c:	b480      	push	{r7}
 800822e:	b0a7      	sub	sp, #156	@ 0x9c
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800824e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008252:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	78db      	ldrb	r3, [r3, #3]
 800825a:	2b03      	cmp	r3, #3
 800825c:	d81f      	bhi.n	800829e <USB_ActivateEndpoint+0x72>
 800825e:	a201      	add	r2, pc, #4	@ (adr r2, 8008264 <USB_ActivateEndpoint+0x38>)
 8008260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008264:	08008275 	.word	0x08008275
 8008268:	08008291 	.word	0x08008291
 800826c:	080082a7 	.word	0x080082a7
 8008270:	08008283 	.word	0x08008283
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008274:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008278:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800827c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008280:	e012      	b.n	80082a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008282:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008286:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800828a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800828e:	e00b      	b.n	80082a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008290:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008294:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008298:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800829c:	e004      	b.n	80082a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80082a4:	e000      	b.n	80082a8 <USB_ActivateEndpoint+0x7c>
      break;
 80082a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	441a      	add	r2, r3
 80082b2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80082b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	b21b      	sxth	r3, r3
 80082da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e2:	b21a      	sxth	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	b21b      	sxth	r3, r3
 80082ea:	4313      	orrs	r3, r2
 80082ec:	b21b      	sxth	r3, r3
 80082ee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	441a      	add	r2, r3
 80082fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800830c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008310:	b29b      	uxth	r3, r3
 8008312:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	7b1b      	ldrb	r3, [r3, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f040 8180 	bne.w	800861e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 8084 	beq.w	8008430 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	61bb      	str	r3, [r7, #24]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008332:	b29b      	uxth	r3, r3
 8008334:	461a      	mov	r2, r3
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	4413      	add	r3, r2
 800833a:	61bb      	str	r3, [r7, #24]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	00da      	lsls	r2, r3, #3
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	4413      	add	r3, r2
 8008346:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	88db      	ldrh	r3, [r3, #6]
 8008350:	085b      	lsrs	r3, r3, #1
 8008352:	b29b      	uxth	r3, r3
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	827b      	strh	r3, [r7, #18]
 800836a:	8a7b      	ldrh	r3, [r7, #18]
 800836c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	d01b      	beq.n	80083ac <USB_ActivateEndpoint+0x180>
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800838a:	823b      	strh	r3, [r7, #16]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	441a      	add	r2, r3
 8008396:	8a3b      	ldrh	r3, [r7, #16]
 8008398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800839c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	78db      	ldrb	r3, [r3, #3]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d020      	beq.n	80083f6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083ca:	81bb      	strh	r3, [r7, #12]
 80083cc:	89bb      	ldrh	r3, [r7, #12]
 80083ce:	f083 0320 	eor.w	r3, r3, #32
 80083d2:	81bb      	strh	r3, [r7, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	441a      	add	r2, r3
 80083de:	89bb      	ldrh	r3, [r7, #12]
 80083e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	8013      	strh	r3, [r2, #0]
 80083f4:	e3f9      	b.n	8008bea <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800840c:	81fb      	strh	r3, [r7, #14]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	441a      	add	r2, r3
 8008418:	89fb      	ldrh	r3, [r7, #14]
 800841a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800841e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800842a:	b29b      	uxth	r3, r3
 800842c:	8013      	strh	r3, [r2, #0]
 800842e:	e3dc      	b.n	8008bea <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	633b      	str	r3, [r7, #48]	@ 0x30
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800843a:	b29b      	uxth	r3, r3
 800843c:	461a      	mov	r2, r3
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	4413      	add	r3, r2
 8008442:	633b      	str	r3, [r7, #48]	@ 0x30
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	00da      	lsls	r2, r3, #3
 800844a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844c:	4413      	add	r3, r2
 800844e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	88db      	ldrh	r3, [r3, #6]
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	b29b      	uxth	r3, r3
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	b29a      	uxth	r2, r3
 8008460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008462:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800846e:	b29b      	uxth	r3, r3
 8008470:	461a      	mov	r2, r3
 8008472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008474:	4413      	add	r3, r2
 8008476:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	00da      	lsls	r2, r3, #3
 800847e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008480:	4413      	add	r3, r2
 8008482:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008486:	627b      	str	r3, [r7, #36]	@ 0x24
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	b29b      	uxth	r3, r3
 800848e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008492:	b29a      	uxth	r2, r3
 8008494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008496:	801a      	strh	r2, [r3, #0]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10a      	bne.n	80084b6 <USB_ActivateEndpoint+0x28a>
 80084a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b2:	801a      	strh	r2, [r3, #0]
 80084b4:	e041      	b.n	800853a <USB_ActivateEndpoint+0x30e>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80084bc:	d81c      	bhi.n	80084f8 <USB_ActivateEndpoint+0x2cc>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	085b      	lsrs	r3, r3, #1
 80084c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d004      	beq.n	80084de <USB_ActivateEndpoint+0x2b2>
 80084d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084d8:	3301      	adds	r3, #1
 80084da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	029b      	lsls	r3, r3, #10
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4313      	orrs	r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	e020      	b.n	800853a <USB_ActivateEndpoint+0x30e>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	095b      	lsrs	r3, r3, #5
 80084fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	2b00      	cmp	r3, #0
 800850c:	d104      	bne.n	8008518 <USB_ActivateEndpoint+0x2ec>
 800850e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008512:	3b01      	subs	r3, #1
 8008514:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29a      	uxth	r2, r3
 800851e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008522:	b29b      	uxth	r3, r3
 8008524:	029b      	lsls	r3, r3, #10
 8008526:	b29b      	uxth	r3, r3
 8008528:	4313      	orrs	r3, r2
 800852a:	b29b      	uxth	r3, r3
 800852c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008534:	b29a      	uxth	r2, r3
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008548:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800854a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d01b      	beq.n	800858a <USB_ActivateEndpoint+0x35e>
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008568:	843b      	strh	r3, [r7, #32]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	441a      	add	r2, r3
 8008574:	8c3b      	ldrh	r3, [r7, #32]
 8008576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800857a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800857e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008586:	b29b      	uxth	r3, r3
 8008588:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d124      	bne.n	80085dc <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a8:	83bb      	strh	r3, [r7, #28]
 80085aa:	8bbb      	ldrh	r3, [r7, #28]
 80085ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80085b0:	83bb      	strh	r3, [r7, #28]
 80085b2:	8bbb      	ldrh	r3, [r7, #28]
 80085b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80085b8:	83bb      	strh	r3, [r7, #28]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	441a      	add	r2, r3
 80085c4:	8bbb      	ldrh	r3, [r7, #28]
 80085c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	8013      	strh	r3, [r2, #0]
 80085da:	e306      	b.n	8008bea <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085f2:	83fb      	strh	r3, [r7, #30]
 80085f4:	8bfb      	ldrh	r3, [r7, #30]
 80085f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80085fa:	83fb      	strh	r3, [r7, #30]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	8bfb      	ldrh	r3, [r7, #30]
 8008608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800860c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008618:	b29b      	uxth	r3, r3
 800861a:	8013      	strh	r3, [r2, #0]
 800861c:	e2e5      	b.n	8008bea <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	78db      	ldrb	r3, [r3, #3]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d11e      	bne.n	8008664 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29b      	uxth	r3, r3
 8008634:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800863c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	441a      	add	r2, r3
 800864a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800864e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008656:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800865a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800865e:	b29b      	uxth	r3, r3
 8008660:	8013      	strh	r3, [r2, #0]
 8008662:	e01d      	b.n	80086a0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29b      	uxth	r3, r3
 8008672:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	441a      	add	r2, r3
 8008688:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800868c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800869c:	b29b      	uxth	r3, r3
 800869e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	461a      	mov	r2, r3
 80086ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80086b0:	4413      	add	r3, r2
 80086b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	00da      	lsls	r2, r3, #3
 80086ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	891b      	ldrh	r3, [r3, #8]
 80086c8:	085b      	lsrs	r3, r3, #1
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086de:	b29b      	uxth	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086e4:	4413      	add	r3, r2
 80086e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	00da      	lsls	r2, r3, #3
 80086ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086f0:	4413      	add	r3, r2
 80086f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	895b      	ldrh	r3, [r3, #10]
 80086fc:	085b      	lsrs	r3, r3, #1
 80086fe:	b29b      	uxth	r3, r3
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008706:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f040 81af 	bne.w	8008a70 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8008722:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8008726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01d      	beq.n	800876a <USB_ActivateEndpoint+0x53e>
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	b29b      	uxth	r3, r3
 800873c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008744:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	441a      	add	r2, r3
 8008752:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800875a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800875e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008766:	b29b      	uxth	r3, r3
 8008768:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800877a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800877e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	d01d      	beq.n	80087c2 <USB_ActivateEndpoint+0x596>
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	b29b      	uxth	r3, r3
 8008794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800879c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	441a      	add	r2, r3
 80087aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80087ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087be:	b29b      	uxth	r3, r3
 80087c0:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	785b      	ldrb	r3, [r3, #1]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d16b      	bne.n	80088a2 <USB_ActivateEndpoint+0x676>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087da:	4413      	add	r3, r2
 80087dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	00da      	lsls	r2, r3, #3
 80087e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087e6:	4413      	add	r3, r2
 80087e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087fc:	801a      	strh	r2, [r3, #0]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10a      	bne.n	800881c <USB_ActivateEndpoint+0x5f0>
 8008806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008814:	b29a      	uxth	r2, r3
 8008816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008818:	801a      	strh	r2, [r3, #0]
 800881a:	e05d      	b.n	80088d8 <USB_ActivateEndpoint+0x6ac>
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	2b3e      	cmp	r3, #62	@ 0x3e
 8008822:	d81c      	bhi.n	800885e <USB_ActivateEndpoint+0x632>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	085b      	lsrs	r3, r3, #1
 800882a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <USB_ActivateEndpoint+0x618>
 800883a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800883e:	3301      	adds	r3, #1
 8008840:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29a      	uxth	r2, r3
 800884a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800884e:	b29b      	uxth	r3, r3
 8008850:	029b      	lsls	r3, r3, #10
 8008852:	b29b      	uxth	r3, r3
 8008854:	4313      	orrs	r3, r2
 8008856:	b29a      	uxth	r2, r3
 8008858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800885a:	801a      	strh	r2, [r3, #0]
 800885c:	e03c      	b.n	80088d8 <USB_ActivateEndpoint+0x6ac>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	095b      	lsrs	r3, r3, #5
 8008864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	f003 031f 	and.w	r3, r3, #31
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <USB_ActivateEndpoint+0x652>
 8008874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008878:	3b01      	subs	r3, #1
 800887a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800887e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b29a      	uxth	r2, r3
 8008884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008888:	b29b      	uxth	r3, r3
 800888a:	029b      	lsls	r3, r3, #10
 800888c:	b29b      	uxth	r3, r3
 800888e:	4313      	orrs	r3, r2
 8008890:	b29b      	uxth	r3, r3
 8008892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800889a:	b29a      	uxth	r2, r3
 800889c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	e01a      	b.n	80088d8 <USB_ActivateEndpoint+0x6ac>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	785b      	ldrb	r3, [r3, #1]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d116      	bne.n	80088d8 <USB_ActivateEndpoint+0x6ac>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088ba:	4413      	add	r3, r2
 80088bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	00da      	lsls	r2, r3, #3
 80088c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088c6:	4413      	add	r3, r2
 80088c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088d6:	801a      	strh	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	647b      	str	r3, [r7, #68]	@ 0x44
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d16b      	bne.n	80089bc <USB_ActivateEndpoint+0x790>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f4:	4413      	add	r3, r2
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	00da      	lsls	r2, r3, #3
 80088fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008900:	4413      	add	r3, r2
 8008902:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008906:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	b29b      	uxth	r3, r3
 800890e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008912:	b29a      	uxth	r2, r3
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	801a      	strh	r2, [r3, #0]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <USB_ActivateEndpoint+0x70a>
 8008920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800892a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800892e:	b29a      	uxth	r2, r3
 8008930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	e05b      	b.n	80089ee <USB_ActivateEndpoint+0x7c2>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b3e      	cmp	r3, #62	@ 0x3e
 800893c:	d81c      	bhi.n	8008978 <USB_ActivateEndpoint+0x74c>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	085b      	lsrs	r3, r3, #1
 8008944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <USB_ActivateEndpoint+0x732>
 8008954:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008958:	3301      	adds	r3, #1
 800895a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800895e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29a      	uxth	r2, r3
 8008964:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008968:	b29b      	uxth	r3, r3
 800896a:	029b      	lsls	r3, r3, #10
 800896c:	b29b      	uxth	r3, r3
 800896e:	4313      	orrs	r3, r2
 8008970:	b29a      	uxth	r2, r3
 8008972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	e03a      	b.n	80089ee <USB_ActivateEndpoint+0x7c2>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f003 031f 	and.w	r3, r3, #31
 800898a:	2b00      	cmp	r3, #0
 800898c:	d104      	bne.n	8008998 <USB_ActivateEndpoint+0x76c>
 800898e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008992:	3b01      	subs	r3, #1
 8008994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	b29a      	uxth	r2, r3
 800899e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	029b      	lsls	r3, r3, #10
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	4313      	orrs	r3, r2
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b8:	801a      	strh	r2, [r3, #0]
 80089ba:	e018      	b.n	80089ee <USB_ActivateEndpoint+0x7c2>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d114      	bne.n	80089ee <USB_ActivateEndpoint+0x7c2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089d0:	4413      	add	r3, r2
 80089d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	00da      	lsls	r2, r3, #3
 80089da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089dc:	4413      	add	r3, r2
 80089de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089ec:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a04:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008a06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008a08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008a0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008a0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008a10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008a14:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	441a      	add	r2, r3
 8008a20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008a22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a4c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	441a      	add	r2, r3
 8008a58:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	8013      	strh	r3, [r2, #0]
 8008a6e:	e0bc      	b.n	8008bea <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8008a80:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01d      	beq.n	8008ac8 <USB_ActivateEndpoint+0x89c>
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	441a      	add	r2, r3
 8008ab0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008ab4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ab8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008abc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8008ad8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01d      	beq.n	8008b20 <USB_ActivateEndpoint+0x8f4>
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008afa:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	441a      	add	r2, r3
 8008b08:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008b0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	78db      	ldrb	r3, [r3, #3]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d024      	beq.n	8008b72 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b3e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008b42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008b46:	f083 0320 	eor.w	r3, r3, #32
 8008b4a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	441a      	add	r2, r3
 8008b58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008b5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	8013      	strh	r3, [r2, #0]
 8008b70:	e01d      	b.n	8008bae <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b88:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	441a      	add	r2, r3
 8008b96:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bc4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	441a      	add	r2, r3
 8008bd2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008bea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	379c      	adds	r7, #156	@ 0x9c
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop

08008bfc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b08d      	sub	sp, #52	@ 0x34
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	7b1b      	ldrb	r3, [r3, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f040 808e 	bne.w	8008d2c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	785b      	ldrb	r3, [r3, #1]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d044      	beq.n	8008ca2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	881b      	ldrh	r3, [r3, #0]
 8008c24:	81bb      	strh	r3, [r7, #12]
 8008c26:	89bb      	ldrh	r3, [r7, #12]
 8008c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01b      	beq.n	8008c68 <USB_DeactivateEndpoint+0x6c>
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c46:	817b      	strh	r3, [r7, #10]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	441a      	add	r2, r3
 8008c52:	897b      	ldrh	r3, [r7, #10]
 8008c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c7e:	813b      	strh	r3, [r7, #8]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	441a      	add	r2, r3
 8008c8a:	893b      	ldrh	r3, [r7, #8]
 8008c8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	8013      	strh	r3, [r2, #0]
 8008ca0:	e192      	b.n	8008fc8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	827b      	strh	r3, [r7, #18]
 8008cb0:	8a7b      	ldrh	r3, [r7, #18]
 8008cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d01b      	beq.n	8008cf2 <USB_DeactivateEndpoint+0xf6>
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cd0:	823b      	strh	r3, [r7, #16]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	441a      	add	r2, r3
 8008cdc:	8a3b      	ldrh	r3, [r7, #16]
 8008cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ce6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d08:	81fb      	strh	r3, [r7, #14]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	441a      	add	r2, r3
 8008d14:	89fb      	ldrh	r3, [r7, #14]
 8008d16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	8013      	strh	r3, [r2, #0]
 8008d2a:	e14d      	b.n	8008fc8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f040 80a5 	bne.w	8008e80 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	843b      	strh	r3, [r7, #32]
 8008d44:	8c3b      	ldrh	r3, [r7, #32]
 8008d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01b      	beq.n	8008d86 <USB_DeactivateEndpoint+0x18a>
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d64:	83fb      	strh	r3, [r7, #30]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	441a      	add	r2, r3
 8008d70:	8bfb      	ldrh	r3, [r7, #30]
 8008d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	83bb      	strh	r3, [r7, #28]
 8008d94:	8bbb      	ldrh	r3, [r7, #28]
 8008d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d01b      	beq.n	8008dd6 <USB_DeactivateEndpoint+0x1da>
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008db4:	837b      	strh	r3, [r7, #26]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	441a      	add	r2, r3
 8008dc0:	8b7b      	ldrh	r3, [r7, #26]
 8008dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dec:	833b      	strh	r3, [r7, #24]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	441a      	add	r2, r3
 8008df8:	8b3b      	ldrh	r3, [r7, #24]
 8008dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e24:	82fb      	strh	r3, [r7, #22]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	441a      	add	r2, r3
 8008e30:	8afb      	ldrh	r3, [r7, #22]
 8008e32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e5c:	82bb      	strh	r3, [r7, #20]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	441a      	add	r2, r3
 8008e68:	8abb      	ldrh	r3, [r7, #20]
 8008e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	8013      	strh	r3, [r2, #0]
 8008e7e:	e0a3      	b.n	8008fc8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008e8e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01b      	beq.n	8008ed0 <USB_DeactivateEndpoint+0x2d4>
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	441a      	add	r2, r3
 8008eba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008ebc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ec0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ec4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008ede:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d01b      	beq.n	8008f20 <USB_DeactivateEndpoint+0x324>
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008efe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	441a      	add	r2, r3
 8008f0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008f0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f36:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	441a      	add	r2, r3
 8008f42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	441a      	add	r2, r3
 8008f7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	881b      	ldrh	r3, [r3, #0]
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fa6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	441a      	add	r2, r3
 8008fb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3734      	adds	r7, #52	@ 0x34
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b0ac      	sub	sp, #176	@ 0xb0
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	785b      	ldrb	r3, [r3, #1]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	f040 84ca 	bne.w	800997e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	699a      	ldr	r2, [r3, #24]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d904      	bls.n	8009000 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ffe:	e003      	b.n	8009008 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	7b1b      	ldrb	r3, [r3, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d122      	bne.n	8009056 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	6959      	ldr	r1, [r3, #20]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	88da      	ldrh	r2, [r3, #6]
 8009018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800901c:	b29b      	uxth	r3, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 febd 	bl	8009d9e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	613b      	str	r3, [r7, #16]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800902e:	b29b      	uxth	r3, r3
 8009030:	461a      	mov	r2, r3
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	4413      	add	r3, r2
 8009036:	613b      	str	r3, [r7, #16]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	00da      	lsls	r2, r3, #3
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	4413      	add	r3, r2
 8009042:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	801a      	strh	r2, [r3, #0]
 8009052:	f000 bc6f 	b.w	8009934 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	78db      	ldrb	r3, [r3, #3]
 800905a:	2b02      	cmp	r3, #2
 800905c:	f040 831e 	bne.w	800969c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	6a1a      	ldr	r2, [r3, #32]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	429a      	cmp	r2, r3
 800906a:	f240 82cf 	bls.w	800960c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	b29b      	uxth	r3, r3
 800907c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009084:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	441a      	add	r2, r3
 8009092:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009096:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800909a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800909e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80090a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6a1a      	ldr	r2, [r3, #32]
 80090ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090b2:	1ad2      	subs	r2, r2, r3
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 814f 	beq.w	800936e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	785b      	ldrb	r3, [r3, #1]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d16b      	bne.n	80091b4 <USB_EPStartXfer+0x1de>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ec:	4413      	add	r3, r2
 80090ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	00da      	lsls	r2, r3, #3
 80090f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f8:	4413      	add	r3, r2
 80090fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	b29b      	uxth	r3, r3
 8009106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800910a:	b29a      	uxth	r2, r3
 800910c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910e:	801a      	strh	r2, [r3, #0]
 8009110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10a      	bne.n	800912e <USB_EPStartXfer+0x158>
 8009118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	b29b      	uxth	r3, r3
 800911e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009126:	b29a      	uxth	r2, r3
 8009128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912a:	801a      	strh	r2, [r3, #0]
 800912c:	e05b      	b.n	80091e6 <USB_EPStartXfer+0x210>
 800912e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009132:	2b3e      	cmp	r3, #62	@ 0x3e
 8009134:	d81c      	bhi.n	8009170 <USB_EPStartXfer+0x19a>
 8009136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800913a:	085b      	lsrs	r3, r3, #1
 800913c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <USB_EPStartXfer+0x180>
 800914c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009150:	3301      	adds	r3, #1
 8009152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	b29a      	uxth	r2, r3
 800915c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009160:	b29b      	uxth	r3, r3
 8009162:	029b      	lsls	r3, r3, #10
 8009164:	b29b      	uxth	r3, r3
 8009166:	4313      	orrs	r3, r2
 8009168:	b29a      	uxth	r2, r3
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	801a      	strh	r2, [r3, #0]
 800916e:	e03a      	b.n	80091e6 <USB_EPStartXfer+0x210>
 8009170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009174:	095b      	lsrs	r3, r3, #5
 8009176:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800917a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800917e:	f003 031f 	and.w	r3, r3, #31
 8009182:	2b00      	cmp	r3, #0
 8009184:	d104      	bne.n	8009190 <USB_EPStartXfer+0x1ba>
 8009186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800918a:	3b01      	subs	r3, #1
 800918c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29a      	uxth	r2, r3
 8009196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800919a:	b29b      	uxth	r3, r3
 800919c:	029b      	lsls	r3, r3, #10
 800919e:	b29b      	uxth	r3, r3
 80091a0:	4313      	orrs	r3, r2
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	e018      	b.n	80091e6 <USB_EPStartXfer+0x210>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d114      	bne.n	80091e6 <USB_EPStartXfer+0x210>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	461a      	mov	r2, r3
 80091c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c8:	4413      	add	r3, r2
 80091ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	00da      	lsls	r2, r3, #3
 80091d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d4:	4413      	add	r3, r2
 80091d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80091da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	895b      	ldrh	r3, [r3, #10]
 80091ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	6959      	ldr	r1, [r3, #20]
 80091f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fdce 	bl	8009d9e <USB_WritePMA>
            ep->xfer_buff += len;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	695a      	ldr	r2, [r3, #20]
 8009206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800920a:	441a      	add	r2, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	6a1a      	ldr	r2, [r3, #32]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	429a      	cmp	r2, r3
 800921a:	d907      	bls.n	800922c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	6a1a      	ldr	r2, [r3, #32]
 8009220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009224:	1ad2      	subs	r2, r2, r3
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	621a      	str	r2, [r3, #32]
 800922a:	e006      	b.n	800923a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	785b      	ldrb	r3, [r3, #1]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d16b      	bne.n	800931a <USB_EPStartXfer+0x344>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	61bb      	str	r3, [r7, #24]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800924c:	b29b      	uxth	r3, r3
 800924e:	461a      	mov	r2, r3
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	4413      	add	r3, r2
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	00da      	lsls	r2, r3, #3
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	4413      	add	r3, r2
 8009260:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	b29b      	uxth	r3, r3
 800926c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009270:	b29a      	uxth	r2, r3
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	801a      	strh	r2, [r3, #0]
 8009276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10a      	bne.n	8009294 <USB_EPStartXfer+0x2be>
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	b29b      	uxth	r3, r3
 8009284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800928c:	b29a      	uxth	r2, r3
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	801a      	strh	r2, [r3, #0]
 8009292:	e05d      	b.n	8009350 <USB_EPStartXfer+0x37a>
 8009294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009298:	2b3e      	cmp	r3, #62	@ 0x3e
 800929a:	d81c      	bhi.n	80092d6 <USB_EPStartXfer+0x300>
 800929c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092a0:	085b      	lsrs	r3, r3, #1
 80092a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80092a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d004      	beq.n	80092bc <USB_EPStartXfer+0x2e6>
 80092b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80092b6:	3301      	adds	r3, #1
 80092b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	029b      	lsls	r3, r3, #10
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	4313      	orrs	r3, r2
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	801a      	strh	r2, [r3, #0]
 80092d4:	e03c      	b.n	8009350 <USB_EPStartXfer+0x37a>
 80092d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80092e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092e4:	f003 031f 	and.w	r3, r3, #31
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <USB_EPStartXfer+0x320>
 80092ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80092f0:	3b01      	subs	r3, #1
 80092f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009300:	b29b      	uxth	r3, r3
 8009302:	029b      	lsls	r3, r3, #10
 8009304:	b29b      	uxth	r3, r3
 8009306:	4313      	orrs	r3, r2
 8009308:	b29b      	uxth	r3, r3
 800930a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800930e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009312:	b29a      	uxth	r2, r3
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	801a      	strh	r2, [r3, #0]
 8009318:	e01a      	b.n	8009350 <USB_EPStartXfer+0x37a>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	785b      	ldrb	r3, [r3, #1]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d116      	bne.n	8009350 <USB_EPStartXfer+0x37a>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	623b      	str	r3, [r7, #32]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800932c:	b29b      	uxth	r3, r3
 800932e:	461a      	mov	r2, r3
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	4413      	add	r3, r2
 8009334:	623b      	str	r3, [r7, #32]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	00da      	lsls	r2, r3, #3
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	4413      	add	r3, r2
 8009340:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009344:	61fb      	str	r3, [r7, #28]
 8009346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800934a:	b29a      	uxth	r2, r3
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	891b      	ldrh	r3, [r3, #8]
 8009354:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	6959      	ldr	r1, [r3, #20]
 800935c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009360:	b29b      	uxth	r3, r3
 8009362:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fd19 	bl	8009d9e <USB_WritePMA>
 800936c:	e2e2      	b.n	8009934 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	785b      	ldrb	r3, [r3, #1]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d16b      	bne.n	800944e <USB_EPStartXfer+0x478>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009380:	b29b      	uxth	r3, r3
 8009382:	461a      	mov	r2, r3
 8009384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009386:	4413      	add	r3, r2
 8009388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	00da      	lsls	r2, r3, #3
 8009390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009392:	4413      	add	r3, r2
 8009394:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009398:	647b      	str	r3, [r7, #68]	@ 0x44
 800939a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <USB_EPStartXfer+0x3f2>
 80093b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093c4:	801a      	strh	r2, [r3, #0]
 80093c6:	e05d      	b.n	8009484 <USB_EPStartXfer+0x4ae>
 80093c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80093ce:	d81c      	bhi.n	800940a <USB_EPStartXfer+0x434>
 80093d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093d4:	085b      	lsrs	r3, r3, #1
 80093d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d004      	beq.n	80093f0 <USB_EPStartXfer+0x41a>
 80093e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093ea:	3301      	adds	r3, #1
 80093ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	029b      	lsls	r3, r3, #10
 80093fe:	b29b      	uxth	r3, r3
 8009400:	4313      	orrs	r3, r2
 8009402:	b29a      	uxth	r2, r3
 8009404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009406:	801a      	strh	r2, [r3, #0]
 8009408:	e03c      	b.n	8009484 <USB_EPStartXfer+0x4ae>
 800940a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800940e:	095b      	lsrs	r3, r3, #5
 8009410:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009418:	f003 031f 	and.w	r3, r3, #31
 800941c:	2b00      	cmp	r3, #0
 800941e:	d104      	bne.n	800942a <USB_EPStartXfer+0x454>
 8009420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009424:	3b01      	subs	r3, #1
 8009426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800942a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	b29a      	uxth	r2, r3
 8009430:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009434:	b29b      	uxth	r3, r3
 8009436:	029b      	lsls	r3, r3, #10
 8009438:	b29b      	uxth	r3, r3
 800943a:	4313      	orrs	r3, r2
 800943c:	b29b      	uxth	r3, r3
 800943e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009446:	b29a      	uxth	r2, r3
 8009448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800944a:	801a      	strh	r2, [r3, #0]
 800944c:	e01a      	b.n	8009484 <USB_EPStartXfer+0x4ae>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	785b      	ldrb	r3, [r3, #1]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d116      	bne.n	8009484 <USB_EPStartXfer+0x4ae>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	653b      	str	r3, [r7, #80]	@ 0x50
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009460:	b29b      	uxth	r3, r3
 8009462:	461a      	mov	r2, r3
 8009464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009466:	4413      	add	r3, r2
 8009468:	653b      	str	r3, [r7, #80]	@ 0x50
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	00da      	lsls	r2, r3, #3
 8009470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009472:	4413      	add	r3, r2
 8009474:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800947a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800947e:	b29a      	uxth	r2, r3
 8009480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009482:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	891b      	ldrh	r3, [r3, #8]
 8009488:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	6959      	ldr	r1, [r3, #20]
 8009490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009494:	b29b      	uxth	r3, r3
 8009496:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fc7f 	bl	8009d9e <USB_WritePMA>
            ep->xfer_buff += len;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	695a      	ldr	r2, [r3, #20]
 80094a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094a8:	441a      	add	r2, r3
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	6a1a      	ldr	r2, [r3, #32]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d907      	bls.n	80094ca <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	6a1a      	ldr	r2, [r3, #32]
 80094be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094c2:	1ad2      	subs	r2, r2, r3
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	621a      	str	r2, [r3, #32]
 80094c8:	e006      	b.n	80094d8 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2200      	movs	r2, #0
 80094d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	643b      	str	r3, [r7, #64]	@ 0x40
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	785b      	ldrb	r3, [r3, #1]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d16b      	bne.n	80095bc <USB_EPStartXfer+0x5e6>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f4:	4413      	add	r3, r2
 80094f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	00da      	lsls	r2, r3, #3
 80094fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009500:	4413      	add	r3, r2
 8009502:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009506:	637b      	str	r3, [r7, #52]	@ 0x34
 8009508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	b29b      	uxth	r3, r3
 800950e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009512:	b29a      	uxth	r2, r3
 8009514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009516:	801a      	strh	r2, [r3, #0]
 8009518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <USB_EPStartXfer+0x560>
 8009520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b29b      	uxth	r3, r3
 8009526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800952a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800952e:	b29a      	uxth	r2, r3
 8009530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009532:	801a      	strh	r2, [r3, #0]
 8009534:	e05b      	b.n	80095ee <USB_EPStartXfer+0x618>
 8009536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800953a:	2b3e      	cmp	r3, #62	@ 0x3e
 800953c:	d81c      	bhi.n	8009578 <USB_EPStartXfer+0x5a2>
 800953e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009542:	085b      	lsrs	r3, r3, #1
 8009544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d004      	beq.n	800955e <USB_EPStartXfer+0x588>
 8009554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009558:	3301      	adds	r3, #1
 800955a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800955e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	b29a      	uxth	r2, r3
 8009564:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009568:	b29b      	uxth	r3, r3
 800956a:	029b      	lsls	r3, r3, #10
 800956c:	b29b      	uxth	r3, r3
 800956e:	4313      	orrs	r3, r2
 8009570:	b29a      	uxth	r2, r3
 8009572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009574:	801a      	strh	r2, [r3, #0]
 8009576:	e03a      	b.n	80095ee <USB_EPStartXfer+0x618>
 8009578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800957c:	095b      	lsrs	r3, r3, #5
 800957e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009586:	f003 031f 	and.w	r3, r3, #31
 800958a:	2b00      	cmp	r3, #0
 800958c:	d104      	bne.n	8009598 <USB_EPStartXfer+0x5c2>
 800958e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009592:	3b01      	subs	r3, #1
 8009594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	b29a      	uxth	r2, r3
 800959e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	029b      	lsls	r3, r3, #10
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	4313      	orrs	r3, r2
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b8:	801a      	strh	r2, [r3, #0]
 80095ba:	e018      	b.n	80095ee <USB_EPStartXfer+0x618>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	785b      	ldrb	r3, [r3, #1]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d114      	bne.n	80095ee <USB_EPStartXfer+0x618>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	461a      	mov	r2, r3
 80095ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095d0:	4413      	add	r3, r2
 80095d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	00da      	lsls	r2, r3, #3
 80095da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095dc:	4413      	add	r3, r2
 80095de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	895b      	ldrh	r3, [r3, #10]
 80095f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	6959      	ldr	r1, [r3, #20]
 80095fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095fe:	b29b      	uxth	r3, r3
 8009600:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fbca 	bl	8009d9e <USB_WritePMA>
 800960a:	e193      	b.n	8009934 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	b29b      	uxth	r3, r3
 8009622:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800962a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	441a      	add	r2, r3
 8009638:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800963c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800964c:	b29b      	uxth	r3, r3
 800964e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800965a:	b29b      	uxth	r3, r3
 800965c:	461a      	mov	r2, r3
 800965e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009660:	4413      	add	r3, r2
 8009662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	00da      	lsls	r2, r3, #3
 800966a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800966c:	4413      	add	r3, r2
 800966e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009672:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009678:	b29a      	uxth	r2, r3
 800967a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800967c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	891b      	ldrh	r3, [r3, #8]
 8009682:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	6959      	ldr	r1, [r3, #20]
 800968a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800968e:	b29b      	uxth	r3, r3
 8009690:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fb82 	bl	8009d9e <USB_WritePMA>
 800969a:	e14b      	b.n	8009934 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	6a1a      	ldr	r2, [r3, #32]
 80096a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096a4:	1ad2      	subs	r2, r2, r3
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 809a 	beq.w	80097f6 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	785b      	ldrb	r3, [r3, #1]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d16b      	bne.n	80097a6 <USB_EPStartXfer+0x7d0>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096d8:	b29b      	uxth	r3, r3
 80096da:	461a      	mov	r2, r3
 80096dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096de:	4413      	add	r3, r2
 80096e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	00da      	lsls	r2, r3, #3
 80096e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096ea:	4413      	add	r3, r2
 80096ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80096f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80096f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009700:	801a      	strh	r2, [r3, #0]
 8009702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <USB_EPStartXfer+0x74a>
 800970a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	b29b      	uxth	r3, r3
 8009710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009718:	b29a      	uxth	r2, r3
 800971a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800971c:	801a      	strh	r2, [r3, #0]
 800971e:	e05b      	b.n	80097d8 <USB_EPStartXfer+0x802>
 8009720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009724:	2b3e      	cmp	r3, #62	@ 0x3e
 8009726:	d81c      	bhi.n	8009762 <USB_EPStartXfer+0x78c>
 8009728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800972c:	085b      	lsrs	r3, r3, #1
 800972e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d004      	beq.n	8009748 <USB_EPStartXfer+0x772>
 800973e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009742:	3301      	adds	r3, #1
 8009744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009748:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	b29a      	uxth	r2, r3
 800974e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009752:	b29b      	uxth	r3, r3
 8009754:	029b      	lsls	r3, r3, #10
 8009756:	b29b      	uxth	r3, r3
 8009758:	4313      	orrs	r3, r2
 800975a:	b29a      	uxth	r2, r3
 800975c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800975e:	801a      	strh	r2, [r3, #0]
 8009760:	e03a      	b.n	80097d8 <USB_EPStartXfer+0x802>
 8009762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009766:	095b      	lsrs	r3, r3, #5
 8009768:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800976c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009770:	f003 031f 	and.w	r3, r3, #31
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <USB_EPStartXfer+0x7ac>
 8009778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800977c:	3b01      	subs	r3, #1
 800977e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009782:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	b29a      	uxth	r2, r3
 8009788:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800978c:	b29b      	uxth	r3, r3
 800978e:	029b      	lsls	r3, r3, #10
 8009790:	b29b      	uxth	r3, r3
 8009792:	4313      	orrs	r3, r2
 8009794:	b29b      	uxth	r3, r3
 8009796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800979a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800979e:	b29a      	uxth	r2, r3
 80097a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097a2:	801a      	strh	r2, [r3, #0]
 80097a4:	e018      	b.n	80097d8 <USB_EPStartXfer+0x802>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	785b      	ldrb	r3, [r3, #1]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d114      	bne.n	80097d8 <USB_EPStartXfer+0x802>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	461a      	mov	r2, r3
 80097b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097ba:	4413      	add	r3, r2
 80097bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	00da      	lsls	r2, r3, #3
 80097c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097c6:	4413      	add	r3, r2
 80097c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80097ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	895b      	ldrh	r3, [r3, #10]
 80097dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	6959      	ldr	r1, [r3, #20]
 80097e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fad5 	bl	8009d9e <USB_WritePMA>
 80097f4:	e09e      	b.n	8009934 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	785b      	ldrb	r3, [r3, #1]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d16b      	bne.n	80098d6 <USB_EPStartXfer+0x900>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009808:	b29b      	uxth	r3, r3
 800980a:	461a      	mov	r2, r3
 800980c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800980e:	4413      	add	r3, r2
 8009810:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	00da      	lsls	r2, r3, #3
 8009818:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800981a:	4413      	add	r3, r2
 800981c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009820:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009822:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800982c:	b29a      	uxth	r2, r3
 800982e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009830:	801a      	strh	r2, [r3, #0]
 8009832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10a      	bne.n	8009850 <USB_EPStartXfer+0x87a>
 800983a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	b29b      	uxth	r3, r3
 8009840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009848:	b29a      	uxth	r2, r3
 800984a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800984c:	801a      	strh	r2, [r3, #0]
 800984e:	e063      	b.n	8009918 <USB_EPStartXfer+0x942>
 8009850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009854:	2b3e      	cmp	r3, #62	@ 0x3e
 8009856:	d81c      	bhi.n	8009892 <USB_EPStartXfer+0x8bc>
 8009858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800985c:	085b      	lsrs	r3, r3, #1
 800985e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d004      	beq.n	8009878 <USB_EPStartXfer+0x8a2>
 800986e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009872:	3301      	adds	r3, #1
 8009874:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009878:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	b29a      	uxth	r2, r3
 800987e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009882:	b29b      	uxth	r3, r3
 8009884:	029b      	lsls	r3, r3, #10
 8009886:	b29b      	uxth	r3, r3
 8009888:	4313      	orrs	r3, r2
 800988a:	b29a      	uxth	r2, r3
 800988c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	e042      	b.n	8009918 <USB_EPStartXfer+0x942>
 8009892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009896:	095b      	lsrs	r3, r3, #5
 8009898:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800989c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098a0:	f003 031f 	and.w	r3, r3, #31
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d104      	bne.n	80098b2 <USB_EPStartXfer+0x8dc>
 80098a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80098ac:	3b01      	subs	r3, #1
 80098ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80098bc:	b29b      	uxth	r3, r3
 80098be:	029b      	lsls	r3, r3, #10
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	4313      	orrs	r3, r2
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098d2:	801a      	strh	r2, [r3, #0]
 80098d4:	e020      	b.n	8009918 <USB_EPStartXfer+0x942>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d11c      	bne.n	8009918 <USB_EPStartXfer+0x942>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	461a      	mov	r2, r3
 80098ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098f2:	4413      	add	r3, r2
 80098f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	00da      	lsls	r2, r3, #3
 80098fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009902:	4413      	add	r3, r2
 8009904:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009908:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800990c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009910:	b29a      	uxth	r2, r3
 8009912:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009916:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	891b      	ldrh	r3, [r3, #8]
 800991c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	6959      	ldr	r1, [r3, #20]
 8009924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009928:	b29b      	uxth	r3, r3
 800992a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fa35 	bl	8009d9e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	b29b      	uxth	r3, r3
 8009942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800994a:	817b      	strh	r3, [r7, #10]
 800994c:	897b      	ldrh	r3, [r7, #10]
 800994e:	f083 0310 	eor.w	r3, r3, #16
 8009952:	817b      	strh	r3, [r7, #10]
 8009954:	897b      	ldrh	r3, [r7, #10]
 8009956:	f083 0320 	eor.w	r3, r3, #32
 800995a:	817b      	strh	r3, [r7, #10]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	441a      	add	r2, r3
 8009966:	897b      	ldrh	r3, [r7, #10]
 8009968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800996c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009978:	b29b      	uxth	r3, r3
 800997a:	8013      	strh	r3, [r2, #0]
 800997c:	e0d5      	b.n	8009b2a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	7b1b      	ldrb	r3, [r3, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d156      	bne.n	8009a34 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d122      	bne.n	80099d4 <USB_EPStartXfer+0x9fe>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	78db      	ldrb	r3, [r3, #3]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d11e      	bne.n	80099d4 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099ac:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	441a      	add	r2, r3
 80099ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80099be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80099ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	8013      	strh	r3, [r2, #0]
 80099d2:	e01d      	b.n	8009a10 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80099e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099ea:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	441a      	add	r2, r3
 80099f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80099fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	699a      	ldr	r2, [r3, #24]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d907      	bls.n	8009a2c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	699a      	ldr	r2, [r3, #24]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	1ad2      	subs	r2, r2, r3
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	619a      	str	r2, [r3, #24]
 8009a2a:	e054      	b.n	8009ad6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	619a      	str	r2, [r3, #24]
 8009a32:	e050      	b.n	8009ad6 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	78db      	ldrb	r3, [r3, #3]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d142      	bne.n	8009ac2 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d048      	beq.n	8009ad6 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	881b      	ldrh	r3, [r3, #0]
 8009a50:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a54:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d005      	beq.n	8009a6c <USB_EPStartXfer+0xa96>
 8009a60:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10b      	bne.n	8009a84 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a6c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d12e      	bne.n	8009ad6 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a78:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d128      	bne.n	8009ad6 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a9a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	441a      	add	r2, r3
 8009aa8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ab8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	8013      	strh	r3, [r2, #0]
 8009ac0:	e009      	b.n	8009ad6 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	78db      	ldrb	r3, [r3, #3]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d103      	bne.n	8009ad2 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2200      	movs	r2, #0
 8009ace:	619a      	str	r2, [r3, #24]
 8009ad0:	e001      	b.n	8009ad6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e02a      	b.n	8009b2c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009af0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009af4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009af8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009afc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009b00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	441a      	add	r2, r3
 8009b12:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	37b0      	adds	r7, #176	@ 0xb0
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d020      	beq.n	8009b88 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4413      	add	r3, r2
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b5c:	81bb      	strh	r3, [r7, #12]
 8009b5e:	89bb      	ldrh	r3, [r7, #12]
 8009b60:	f083 0310 	eor.w	r3, r3, #16
 8009b64:	81bb      	strh	r3, [r7, #12]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	441a      	add	r2, r3
 8009b70:	89bb      	ldrh	r3, [r7, #12]
 8009b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	8013      	strh	r3, [r2, #0]
 8009b86:	e01f      	b.n	8009bc8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b9e:	81fb      	strh	r3, [r7, #14]
 8009ba0:	89fb      	ldrh	r3, [r7, #14]
 8009ba2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009ba6:	81fb      	strh	r3, [r7, #14]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	441a      	add	r2, r3
 8009bb2:	89fb      	ldrh	r3, [r7, #14]
 8009bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b087      	sub	sp, #28
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	785b      	ldrb	r3, [r3, #1]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d04c      	beq.n	8009c82 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	823b      	strh	r3, [r7, #16]
 8009bf6:	8a3b      	ldrh	r3, [r7, #16]
 8009bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d01b      	beq.n	8009c38 <USB_EPClearStall+0x62>
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c16:	81fb      	strh	r3, [r7, #14]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	441a      	add	r2, r3
 8009c22:	89fb      	ldrh	r3, [r7, #14]
 8009c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	78db      	ldrb	r3, [r3, #3]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d06c      	beq.n	8009d1a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c56:	81bb      	strh	r3, [r7, #12]
 8009c58:	89bb      	ldrh	r3, [r7, #12]
 8009c5a:	f083 0320 	eor.w	r3, r3, #32
 8009c5e:	81bb      	strh	r3, [r7, #12]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	441a      	add	r2, r3
 8009c6a:	89bb      	ldrh	r3, [r7, #12]
 8009c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	8013      	strh	r3, [r2, #0]
 8009c80:	e04b      	b.n	8009d1a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	82fb      	strh	r3, [r7, #22]
 8009c90:	8afb      	ldrh	r3, [r7, #22]
 8009c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d01b      	beq.n	8009cd2 <USB_EPClearStall+0xfc>
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb0:	82bb      	strh	r3, [r7, #20]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	441a      	add	r2, r3
 8009cbc:	8abb      	ldrh	r3, [r7, #20]
 8009cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ce8:	827b      	strh	r3, [r7, #18]
 8009cea:	8a7b      	ldrh	r3, [r7, #18]
 8009cec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009cf0:	827b      	strh	r3, [r7, #18]
 8009cf2:	8a7b      	ldrh	r3, [r7, #18]
 8009cf4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009cf8:	827b      	strh	r3, [r7, #18]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	441a      	add	r2, r3
 8009d04:	8a7b      	ldrh	r3, [r7, #18]
 8009d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	371c      	adds	r7, #28
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	460b      	mov	r3, r1
 8009d32:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d103      	bne.n	8009d42 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2280      	movs	r2, #128	@ 0x80
 8009d3e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b085      	sub	sp, #20
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009d90:	68fb      	ldr	r3, [r7, #12]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b08b      	sub	sp, #44	@ 0x2c
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	4611      	mov	r1, r2
 8009daa:	461a      	mov	r2, r3
 8009dac:	460b      	mov	r3, r1
 8009dae:	80fb      	strh	r3, [r7, #6]
 8009db0:	4613      	mov	r3, r2
 8009db2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009db4:	88bb      	ldrh	r3, [r7, #4]
 8009db6:	3301      	adds	r3, #1
 8009db8:	085b      	lsrs	r3, r3, #1
 8009dba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009dc4:	88fa      	ldrh	r2, [r7, #6]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009dce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dd4:	e01b      	b.n	8009e0e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	3301      	adds	r3, #1
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	021b      	lsls	r3, r3, #8
 8009de4:	b21a      	sxth	r2, r3
 8009de6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	b21b      	sxth	r3, r3
 8009dee:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	8a7a      	ldrh	r2, [r7, #18]
 8009df4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	3302      	adds	r3, #2
 8009dfa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	3301      	adds	r3, #1
 8009e06:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e0      	bne.n	8009dd6 <USB_WritePMA+0x38>
  }
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	372c      	adds	r7, #44	@ 0x2c
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b08b      	sub	sp, #44	@ 0x2c
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	60b9      	str	r1, [r7, #8]
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	461a      	mov	r2, r3
 8009e30:	460b      	mov	r3, r1
 8009e32:	80fb      	strh	r3, [r7, #6]
 8009e34:	4613      	mov	r3, r2
 8009e36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009e38:	88bb      	ldrh	r3, [r7, #4]
 8009e3a:	085b      	lsrs	r3, r3, #1
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e48:	88fa      	ldrh	r2, [r7, #6]
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e52:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e58:	e018      	b.n	8009e8c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	3302      	adds	r3, #2
 8009e66:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	3301      	adds	r3, #1
 8009e74:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	0a1b      	lsrs	r3, r3, #8
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	3301      	adds	r3, #1
 8009e84:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1e3      	bne.n	8009e5a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009e92:	88bb      	ldrh	r3, [r7, #4]
 8009e94:	f003 0301 	and.w	r3, r3, #1
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d007      	beq.n	8009eae <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	701a      	strb	r2, [r3, #0]
  }
}
 8009eae:	bf00      	nop
 8009eb0:	372c      	adds	r7, #44	@ 0x2c
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ec6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009eca:	f002 f911 	bl	800c0f0 <USBD_static_malloc>
 8009ece:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d105      	bne.n	8009ee2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e066      	b.n	8009fb0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	7c1b      	ldrb	r3, [r3, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d119      	bne.n	8009f26 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	2181      	movs	r1, #129	@ 0x81
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 ff9f 	bl	800be3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	2101      	movs	r1, #1
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 ff95 	bl	800be3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2210      	movs	r2, #16
 8009f20:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009f24:	e016      	b.n	8009f54 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009f26:	2340      	movs	r3, #64	@ 0x40
 8009f28:	2202      	movs	r2, #2
 8009f2a:	2181      	movs	r1, #129	@ 0x81
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 ff86 	bl	800be3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f38:	2340      	movs	r3, #64	@ 0x40
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f001 ff7d 	bl	800be3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2210      	movs	r2, #16
 8009f50:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f54:	2308      	movs	r3, #8
 8009f56:	2203      	movs	r2, #3
 8009f58:	2182      	movs	r1, #130	@ 0x82
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f001 ff6f 	bl	800be3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	7c1b      	ldrb	r3, [r3, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d109      	bne.n	8009f9e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f94:	2101      	movs	r1, #1
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f002 f840 	bl	800c01c <USBD_LL_PrepareReceive>
 8009f9c:	e007      	b.n	8009fae <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009fa4:	2340      	movs	r3, #64	@ 0x40
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f002 f837 	bl	800c01c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009fc4:	2181      	movs	r1, #129	@ 0x81
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f001 ff5f 	bl	800be8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f001 ff58 	bl	800be8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009fe2:	2182      	movs	r1, #130	@ 0x82
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f001 ff50 	bl	800be8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00e      	beq.n	800a022 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a014:	4618      	mov	r0, r3
 800a016:	f002 f879 	bl	800c10c <USBD_static_free>
    pdev->pClassData = NULL;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a03c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a050:	2303      	movs	r3, #3
 800a052:	e0af      	b.n	800a1b4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d03f      	beq.n	800a0e0 <USBD_CDC_Setup+0xb4>
 800a060:	2b20      	cmp	r3, #32
 800a062:	f040 809f 	bne.w	800a1a4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	88db      	ldrh	r3, [r3, #6]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d02e      	beq.n	800a0cc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	b25b      	sxtb	r3, r3
 800a074:	2b00      	cmp	r3, #0
 800a076:	da16      	bge.n	800a0a6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a084:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	88d2      	ldrh	r2, [r2, #6]
 800a08a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	88db      	ldrh	r3, [r3, #6]
 800a090:	2b07      	cmp	r3, #7
 800a092:	bf28      	it	cs
 800a094:	2307      	movcs	r3, #7
 800a096:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	89fa      	ldrh	r2, [r7, #14]
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 facd 	bl	800b63e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a0a4:	e085      	b.n	800a1b2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	785a      	ldrb	r2, [r3, #1]
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	88db      	ldrh	r3, [r3, #6]
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a0bc:	6939      	ldr	r1, [r7, #16]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	88db      	ldrh	r3, [r3, #6]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f001 fae6 	bl	800b696 <USBD_CtlPrepareRx>
      break;
 800a0ca:	e072      	b.n	800a1b2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	7850      	ldrb	r0, [r2, #1]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	4798      	blx	r3
      break;
 800a0de:	e068      	b.n	800a1b2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	785b      	ldrb	r3, [r3, #1]
 800a0e4:	2b0b      	cmp	r3, #11
 800a0e6:	d852      	bhi.n	800a18e <USBD_CDC_Setup+0x162>
 800a0e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f0 <USBD_CDC_Setup+0xc4>)
 800a0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a121 	.word	0x0800a121
 800a0f4:	0800a19d 	.word	0x0800a19d
 800a0f8:	0800a18f 	.word	0x0800a18f
 800a0fc:	0800a18f 	.word	0x0800a18f
 800a100:	0800a18f 	.word	0x0800a18f
 800a104:	0800a18f 	.word	0x0800a18f
 800a108:	0800a18f 	.word	0x0800a18f
 800a10c:	0800a18f 	.word	0x0800a18f
 800a110:	0800a18f 	.word	0x0800a18f
 800a114:	0800a18f 	.word	0x0800a18f
 800a118:	0800a14b 	.word	0x0800a14b
 800a11c:	0800a175 	.word	0x0800a175
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d107      	bne.n	800a13c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a12c:	f107 030a 	add.w	r3, r7, #10
 800a130:	2202      	movs	r2, #2
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f001 fa82 	bl	800b63e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a13a:	e032      	b.n	800a1a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f001 fa0c 	bl	800b55c <USBD_CtlError>
            ret = USBD_FAIL;
 800a144:	2303      	movs	r3, #3
 800a146:	75fb      	strb	r3, [r7, #23]
          break;
 800a148:	e02b      	b.n	800a1a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b03      	cmp	r3, #3
 800a154:	d107      	bne.n	800a166 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a156:	f107 030d 	add.w	r3, r7, #13
 800a15a:	2201      	movs	r2, #1
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f001 fa6d 	bl	800b63e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a164:	e01d      	b.n	800a1a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 f9f7 	bl	800b55c <USBD_CtlError>
            ret = USBD_FAIL;
 800a16e:	2303      	movs	r3, #3
 800a170:	75fb      	strb	r3, [r7, #23]
          break;
 800a172:	e016      	b.n	800a1a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d00f      	beq.n	800a1a0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f001 f9ea 	bl	800b55c <USBD_CtlError>
            ret = USBD_FAIL;
 800a188:	2303      	movs	r3, #3
 800a18a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a18c:	e008      	b.n	800a1a0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 f9e3 	bl	800b55c <USBD_CtlError>
          ret = USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	75fb      	strb	r3, [r7, #23]
          break;
 800a19a:	e002      	b.n	800a1a2 <USBD_CDC_Setup+0x176>
          break;
 800a19c:	bf00      	nop
 800a19e:	e008      	b.n	800a1b2 <USBD_CDC_Setup+0x186>
          break;
 800a1a0:	bf00      	nop
      }
      break;
 800a1a2:	e006      	b.n	800a1b2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f001 f9d8 	bl	800b55c <USBD_CtlError>
      ret = USBD_FAIL;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3718      	adds	r7, #24
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a1ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d101      	bne.n	800a1de <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e04f      	b.n	800a27e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a1e6:	78fa      	ldrb	r2, [r7, #3]
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	3318      	adds	r3, #24
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d029      	beq.n	800a250 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a1fc:	78fa      	ldrb	r2, [r7, #3]
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4613      	mov	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	3318      	adds	r3, #24
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	78f9      	ldrb	r1, [r7, #3]
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	460b      	mov	r3, r1
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	440b      	add	r3, r1
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	4403      	add	r3, r0
 800a21c:	3320      	adds	r3, #32
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	fbb2 f1f3 	udiv	r1, r2, r3
 800a224:	fb01 f303 	mul.w	r3, r1, r3
 800a228:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d110      	bne.n	800a250 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a22e:	78fa      	ldrb	r2, [r7, #3]
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	440b      	add	r3, r1
 800a23c:	3318      	adds	r3, #24
 800a23e:	2200      	movs	r2, #0
 800a240:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a242:	78f9      	ldrb	r1, [r7, #3]
 800a244:	2300      	movs	r3, #0
 800a246:	2200      	movs	r2, #0
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f001 fec6 	bl	800bfda <USBD_LL_Transmit>
 800a24e:	e015      	b.n	800a27c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2200      	movs	r2, #0
 800a254:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00b      	beq.n	800a27c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a278:	78fa      	ldrb	r2, [r7, #3]
 800a27a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	460b      	mov	r3, r1
 800a290:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a298:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d101      	bne.n	800a2a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e015      	b.n	800a2d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f001 fed6 	bl	800c05e <USBD_LL_GetRxDataSize>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2ea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e01a      	b.n	800a32c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d014      	beq.n	800a32a <USBD_CDC_EP0_RxReady+0x4e>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a306:	2bff      	cmp	r3, #255	@ 0xff
 800a308:	d00f      	beq.n	800a32a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a318:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a320:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	22ff      	movs	r2, #255	@ 0xff
 800a326:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2243      	movs	r2, #67	@ 0x43
 800a340:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a342:	4b03      	ldr	r3, [pc, #12]	@ (800a350 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	2000023c 	.word	0x2000023c

0800a354 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2243      	movs	r2, #67	@ 0x43
 800a360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a362:	4b03      	ldr	r3, [pc, #12]	@ (800a370 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	200001f8 	.word	0x200001f8

0800a374 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2243      	movs	r2, #67	@ 0x43
 800a380:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a382:	4b03      	ldr	r3, [pc, #12]	@ (800a390 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	20000280 	.word	0x20000280

0800a394 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	220a      	movs	r2, #10
 800a3a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a3a2:	4b03      	ldr	r3, [pc, #12]	@ (800a3b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	200001b4 	.word	0x200001b4

0800a3b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e004      	b.n	800a3d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b087      	sub	sp, #28
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3f0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e008      	b.n	800a40e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	371c      	adds	r7, #28
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b085      	sub	sp, #20
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a42a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a432:	2303      	movs	r3, #3
 800a434:	e004      	b.n	800a440 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a45a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a45c:	2301      	movs	r3, #1
 800a45e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e01a      	b.n	800a4a4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a474:	2b00      	cmp	r3, #0
 800a476:	d114      	bne.n	800a4a2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a496:	2181      	movs	r1, #129	@ 0x81
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 fd9e 	bl	800bfda <USBD_LL_Transmit>

    ret = USBD_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e016      	b.n	800a4f8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	7c1b      	ldrb	r3, [r3, #16]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d109      	bne.n	800a4e6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4dc:	2101      	movs	r1, #1
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 fd9c 	bl	800c01c <USBD_LL_PrepareReceive>
 800a4e4:	e007      	b.n	800a4f6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4ec:	2340      	movs	r3, #64	@ 0x40
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f001 fd93 	bl	800c01c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	4613      	mov	r3, r2
 800a50c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a514:	2303      	movs	r3, #3
 800a516:	e01f      	b.n	800a558 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	79fa      	ldrb	r2, [r7, #7]
 800a54a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f001 fbfb 	bl	800bd48 <USBD_LL_Init>
 800a552:	4603      	mov	r3, r0
 800a554:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a556:	7dfb      	ldrb	r3, [r7, #23]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a574:	2303      	movs	r3, #3
 800a576:	e016      	b.n	800a5a6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00b      	beq.n	800a5a4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a594:	f107 020e 	add.w	r2, r7, #14
 800a598:	4610      	mov	r0, r2
 800a59a:	4798      	blx	r3
 800a59c:	4602      	mov	r2, r0
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f001 fc26 	bl	800be08 <USBD_LL_Start>
 800a5bc:	4603      	mov	r3, r0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d009      	beq.n	800a60a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	78fa      	ldrb	r2, [r7, #3]
 800a600:	4611      	mov	r1, r2
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	4798      	blx	r3
 800a606:	4603      	mov	r3, r0
 800a608:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	460b      	mov	r3, r1
 800a61e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d007      	beq.n	800a63a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	78fa      	ldrb	r2, [r7, #3]
 800a634:	4611      	mov	r1, r2
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	4798      	blx	r3
  }

  return USBD_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	4618      	mov	r0, r3
 800a658:	f000 ff46 	bl	800b4e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a66a:	461a      	mov	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a678:	f003 031f 	and.w	r3, r3, #31
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d01a      	beq.n	800a6b6 <USBD_LL_SetupStage+0x72>
 800a680:	2b02      	cmp	r3, #2
 800a682:	d822      	bhi.n	800a6ca <USBD_LL_SetupStage+0x86>
 800a684:	2b00      	cmp	r3, #0
 800a686:	d002      	beq.n	800a68e <USBD_LL_SetupStage+0x4a>
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d00a      	beq.n	800a6a2 <USBD_LL_SetupStage+0x5e>
 800a68c:	e01d      	b.n	800a6ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f9ee 	bl	800aa78 <USBD_StdDevReq>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73fb      	strb	r3, [r7, #15]
      break;
 800a6a0:	e020      	b.n	800a6e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fa52 	bl	800ab54 <USBD_StdItfReq>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b4:	e016      	b.n	800a6e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fa91 	bl	800abe6 <USBD_StdEPReq>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c8:	e00c      	b.n	800a6e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f001 fbf5 	bl	800bec8 <USBD_LL_StallEP>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e2:	bf00      	nop
  }

  return ret;
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b086      	sub	sp, #24
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	60f8      	str	r0, [r7, #12]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	607a      	str	r2, [r7, #4]
 800a6fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d138      	bne.n	800a774 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a708:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a710:	2b03      	cmp	r3, #3
 800a712:	d14a      	bne.n	800a7aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d913      	bls.n	800a748 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	689a      	ldr	r2, [r3, #8]
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	1ad2      	subs	r2, r2, r3
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	68da      	ldr	r2, [r3, #12]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	4293      	cmp	r3, r2
 800a738:	bf28      	it	cs
 800a73a:	4613      	movcs	r3, r2
 800a73c:	461a      	mov	r2, r3
 800a73e:	6879      	ldr	r1, [r7, #4]
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 ffc5 	bl	800b6d0 <USBD_CtlContinueRx>
 800a746:	e030      	b.n	800a7aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b03      	cmp	r3, #3
 800a752:	d10b      	bne.n	800a76c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 ffc0 	bl	800b6f2 <USBD_CtlSendStatus>
 800a772:	e01a      	b.n	800a7aa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	d114      	bne.n	800a7aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00e      	beq.n	800a7aa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a792:	699b      	ldr	r3, [r3, #24]
 800a794:	7afa      	ldrb	r2, [r7, #11]
 800a796:	4611      	mov	r1, r2
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	4798      	blx	r3
 800a79c:	4603      	mov	r3, r0
 800a79e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	e000      	b.n	800a7ac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a7c2:	7afb      	ldrb	r3, [r7, #11]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d16b      	bne.n	800a8a0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3314      	adds	r3, #20
 800a7cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d156      	bne.n	800a886 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	689a      	ldr	r2, [r3, #8]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d914      	bls.n	800a80e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	689a      	ldr	r2, [r3, #8]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	1ad2      	subs	r2, r2, r3
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	6879      	ldr	r1, [r7, #4]
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 ff3a 	bl	800b674 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a800:	2300      	movs	r3, #0
 800a802:	2200      	movs	r2, #0
 800a804:	2100      	movs	r1, #0
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f001 fc08 	bl	800c01c <USBD_LL_PrepareReceive>
 800a80c:	e03b      	b.n	800a886 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	68da      	ldr	r2, [r3, #12]
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	429a      	cmp	r2, r3
 800a818:	d11c      	bne.n	800a854 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a822:	429a      	cmp	r2, r3
 800a824:	d316      	bcc.n	800a854 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a830:	429a      	cmp	r2, r3
 800a832:	d20f      	bcs.n	800a854 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a834:	2200      	movs	r2, #0
 800a836:	2100      	movs	r1, #0
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 ff1b 	bl	800b674 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a846:	2300      	movs	r3, #0
 800a848:	2200      	movs	r2, #0
 800a84a:	2100      	movs	r1, #0
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f001 fbe5 	bl	800c01c <USBD_LL_PrepareReceive>
 800a852:	e018      	b.n	800a886 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d10b      	bne.n	800a878 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d005      	beq.n	800a878 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a878:	2180      	movs	r1, #128	@ 0x80
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f001 fb24 	bl	800bec8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 ff49 	bl	800b718 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d122      	bne.n	800a8d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7ff fe98 	bl	800a5c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a89e:	e01a      	b.n	800a8d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d114      	bne.n	800a8d6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00e      	beq.n	800a8d6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	7afa      	ldrb	r2, [r7, #11]
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	4798      	blx	r3
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	e000      	b.n	800a8d8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3718      	adds	r7, #24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a910:	2303      	movs	r3, #3
 800a912:	e02f      	b.n	800a974 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00f      	beq.n	800a93e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d009      	beq.n	800a93e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	6852      	ldr	r2, [r2, #4]
 800a936:	b2d2      	uxtb	r2, r2
 800a938:	4611      	mov	r1, r2
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a93e:	2340      	movs	r3, #64	@ 0x40
 800a940:	2200      	movs	r2, #0
 800a942:	2100      	movs	r1, #0
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f001 fa7a 	bl	800be3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2240      	movs	r2, #64	@ 0x40
 800a956:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a95a:	2340      	movs	r3, #64	@ 0x40
 800a95c:	2200      	movs	r2, #0
 800a95e:	2180      	movs	r1, #128	@ 0x80
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f001 fa6c 	bl	800be3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2240      	movs	r2, #64	@ 0x40
 800a970:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	78fa      	ldrb	r2, [r7, #3]
 800a98c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2204      	movs	r2, #4
 800a9b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d106      	bne.n	800a9ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e012      	b.n	800aa34 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d10b      	bne.n	800aa32 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa20:	69db      	ldr	r3, [r3, #28]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d005      	beq.n	800aa32 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	3301      	adds	r3, #1
 800aa52:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa5a:	8a3b      	ldrh	r3, [r7, #16]
 800aa5c:	021b      	lsls	r3, r3, #8
 800aa5e:	b21a      	sxth	r2, r3
 800aa60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	b21b      	sxth	r3, r3
 800aa68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa6a:	89fb      	ldrh	r3, [r7, #14]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	371c      	adds	r7, #28
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa8e:	2b40      	cmp	r3, #64	@ 0x40
 800aa90:	d005      	beq.n	800aa9e <USBD_StdDevReq+0x26>
 800aa92:	2b40      	cmp	r3, #64	@ 0x40
 800aa94:	d853      	bhi.n	800ab3e <USBD_StdDevReq+0xc6>
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00b      	beq.n	800aab2 <USBD_StdDevReq+0x3a>
 800aa9a:	2b20      	cmp	r3, #32
 800aa9c:	d14f      	bne.n	800ab3e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	4798      	blx	r3
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]
      break;
 800aab0:	e04a      	b.n	800ab48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	785b      	ldrb	r3, [r3, #1]
 800aab6:	2b09      	cmp	r3, #9
 800aab8:	d83b      	bhi.n	800ab32 <USBD_StdDevReq+0xba>
 800aaba:	a201      	add	r2, pc, #4	@ (adr r2, 800aac0 <USBD_StdDevReq+0x48>)
 800aabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac0:	0800ab15 	.word	0x0800ab15
 800aac4:	0800ab29 	.word	0x0800ab29
 800aac8:	0800ab33 	.word	0x0800ab33
 800aacc:	0800ab1f 	.word	0x0800ab1f
 800aad0:	0800ab33 	.word	0x0800ab33
 800aad4:	0800aaf3 	.word	0x0800aaf3
 800aad8:	0800aae9 	.word	0x0800aae9
 800aadc:	0800ab33 	.word	0x0800ab33
 800aae0:	0800ab0b 	.word	0x0800ab0b
 800aae4:	0800aafd 	.word	0x0800aafd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f9de 	bl	800aeac <USBD_GetDescriptor>
          break;
 800aaf0:	e024      	b.n	800ab3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fb6d 	bl	800b1d4 <USBD_SetAddress>
          break;
 800aafa:	e01f      	b.n	800ab3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fbac 	bl	800b25c <USBD_SetConfig>
 800ab04:	4603      	mov	r3, r0
 800ab06:	73fb      	strb	r3, [r7, #15]
          break;
 800ab08:	e018      	b.n	800ab3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fc4b 	bl	800b3a8 <USBD_GetConfig>
          break;
 800ab12:	e013      	b.n	800ab3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fc7c 	bl	800b414 <USBD_GetStatus>
          break;
 800ab1c:	e00e      	b.n	800ab3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fcab 	bl	800b47c <USBD_SetFeature>
          break;
 800ab26:	e009      	b.n	800ab3c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fcba 	bl	800b4a4 <USBD_ClrFeature>
          break;
 800ab30:	e004      	b.n	800ab3c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fd11 	bl	800b55c <USBD_CtlError>
          break;
 800ab3a:	bf00      	nop
      }
      break;
 800ab3c:	e004      	b.n	800ab48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fd0b 	bl	800b55c <USBD_CtlError>
      break;
 800ab46:	bf00      	nop
  }

  return ret;
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop

0800ab54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab6a:	2b40      	cmp	r3, #64	@ 0x40
 800ab6c:	d005      	beq.n	800ab7a <USBD_StdItfReq+0x26>
 800ab6e:	2b40      	cmp	r3, #64	@ 0x40
 800ab70:	d82f      	bhi.n	800abd2 <USBD_StdItfReq+0x7e>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <USBD_StdItfReq+0x26>
 800ab76:	2b20      	cmp	r3, #32
 800ab78:	d12b      	bne.n	800abd2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	3b01      	subs	r3, #1
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d81d      	bhi.n	800abc4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	889b      	ldrh	r3, [r3, #4]
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d813      	bhi.n	800abba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	4798      	blx	r3
 800aba0:	4603      	mov	r3, r0
 800aba2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	88db      	ldrh	r3, [r3, #6]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d110      	bne.n	800abce <USBD_StdItfReq+0x7a>
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10d      	bne.n	800abce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fd9d 	bl	800b6f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abb8:	e009      	b.n	800abce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800abba:	6839      	ldr	r1, [r7, #0]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 fccd 	bl	800b55c <USBD_CtlError>
          break;
 800abc2:	e004      	b.n	800abce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fcc8 	bl	800b55c <USBD_CtlError>
          break;
 800abcc:	e000      	b.n	800abd0 <USBD_StdItfReq+0x7c>
          break;
 800abce:	bf00      	nop
      }
      break;
 800abd0:	e004      	b.n	800abdc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fcc1 	bl	800b55c <USBD_CtlError>
      break;
 800abda:	bf00      	nop
  }

  return ret;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b084      	sub	sp, #16
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	889b      	ldrh	r3, [r3, #4]
 800abf8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac02:	2b40      	cmp	r3, #64	@ 0x40
 800ac04:	d007      	beq.n	800ac16 <USBD_StdEPReq+0x30>
 800ac06:	2b40      	cmp	r3, #64	@ 0x40
 800ac08:	f200 8145 	bhi.w	800ae96 <USBD_StdEPReq+0x2b0>
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00c      	beq.n	800ac2a <USBD_StdEPReq+0x44>
 800ac10:	2b20      	cmp	r3, #32
 800ac12:	f040 8140 	bne.w	800ae96 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	4798      	blx	r3
 800ac24:	4603      	mov	r3, r0
 800ac26:	73fb      	strb	r3, [r7, #15]
      break;
 800ac28:	e13a      	b.n	800aea0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	785b      	ldrb	r3, [r3, #1]
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d007      	beq.n	800ac42 <USBD_StdEPReq+0x5c>
 800ac32:	2b03      	cmp	r3, #3
 800ac34:	f300 8129 	bgt.w	800ae8a <USBD_StdEPReq+0x2a4>
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d07f      	beq.n	800ad3c <USBD_StdEPReq+0x156>
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d03c      	beq.n	800acba <USBD_StdEPReq+0xd4>
 800ac40:	e123      	b.n	800ae8a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d002      	beq.n	800ac54 <USBD_StdEPReq+0x6e>
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d016      	beq.n	800ac80 <USBD_StdEPReq+0x9a>
 800ac52:	e02c      	b.n	800acae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00d      	beq.n	800ac76 <USBD_StdEPReq+0x90>
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	2b80      	cmp	r3, #128	@ 0x80
 800ac5e:	d00a      	beq.n	800ac76 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f001 f92f 	bl	800bec8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac6a:	2180      	movs	r1, #128	@ 0x80
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f001 f92b 	bl	800bec8 <USBD_LL_StallEP>
 800ac72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac74:	e020      	b.n	800acb8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ac76:	6839      	ldr	r1, [r7, #0]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fc6f 	bl	800b55c <USBD_CtlError>
              break;
 800ac7e:	e01b      	b.n	800acb8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	885b      	ldrh	r3, [r3, #2]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10e      	bne.n	800aca6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00b      	beq.n	800aca6 <USBD_StdEPReq+0xc0>
 800ac8e:	7bbb      	ldrb	r3, [r7, #14]
 800ac90:	2b80      	cmp	r3, #128	@ 0x80
 800ac92:	d008      	beq.n	800aca6 <USBD_StdEPReq+0xc0>
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	88db      	ldrh	r3, [r3, #6]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d104      	bne.n	800aca6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f001 f911 	bl	800bec8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fd23 	bl	800b6f2 <USBD_CtlSendStatus>

              break;
 800acac:	e004      	b.n	800acb8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800acae:	6839      	ldr	r1, [r7, #0]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fc53 	bl	800b55c <USBD_CtlError>
              break;
 800acb6:	bf00      	nop
          }
          break;
 800acb8:	e0ec      	b.n	800ae94 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d002      	beq.n	800accc <USBD_StdEPReq+0xe6>
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d016      	beq.n	800acf8 <USBD_StdEPReq+0x112>
 800acca:	e030      	b.n	800ad2e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800accc:	7bbb      	ldrb	r3, [r7, #14]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00d      	beq.n	800acee <USBD_StdEPReq+0x108>
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
 800acd4:	2b80      	cmp	r3, #128	@ 0x80
 800acd6:	d00a      	beq.n	800acee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f001 f8f3 	bl	800bec8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ace2:	2180      	movs	r1, #128	@ 0x80
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f001 f8ef 	bl	800bec8 <USBD_LL_StallEP>
 800acea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800acec:	e025      	b.n	800ad3a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800acee:	6839      	ldr	r1, [r7, #0]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fc33 	bl	800b55c <USBD_CtlError>
              break;
 800acf6:	e020      	b.n	800ad3a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	885b      	ldrh	r3, [r3, #2]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d11b      	bne.n	800ad38 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d004      	beq.n	800ad14 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad0a:	7bbb      	ldrb	r3, [r7, #14]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f001 f8f9 	bl	800bf06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fcec 	bl	800b6f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	4798      	blx	r3
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ad2c:	e004      	b.n	800ad38 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fc13 	bl	800b55c <USBD_CtlError>
              break;
 800ad36:	e000      	b.n	800ad3a <USBD_StdEPReq+0x154>
              break;
 800ad38:	bf00      	nop
          }
          break;
 800ad3a:	e0ab      	b.n	800ae94 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d002      	beq.n	800ad4e <USBD_StdEPReq+0x168>
 800ad48:	2b03      	cmp	r3, #3
 800ad4a:	d032      	beq.n	800adb2 <USBD_StdEPReq+0x1cc>
 800ad4c:	e097      	b.n	800ae7e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <USBD_StdEPReq+0x17e>
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	2b80      	cmp	r3, #128	@ 0x80
 800ad58:	d004      	beq.n	800ad64 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fbfd 	bl	800b55c <USBD_CtlError>
                break;
 800ad62:	e091      	b.n	800ae88 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da0b      	bge.n	800ad84 <USBD_StdEPReq+0x19e>
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad72:	4613      	mov	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	3310      	adds	r3, #16
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	4413      	add	r3, r2
 800ad80:	3304      	adds	r3, #4
 800ad82:	e00b      	b.n	800ad9c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	4413      	add	r3, r2
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2202      	movs	r2, #2
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fc47 	bl	800b63e <USBD_CtlSendData>
              break;
 800adb0:	e06a      	b.n	800ae88 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800adb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	da11      	bge.n	800adde <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800adba:	7bbb      	ldrb	r3, [r7, #14]
 800adbc:	f003 020f 	and.w	r2, r3, #15
 800adc0:	6879      	ldr	r1, [r7, #4]
 800adc2:	4613      	mov	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	440b      	add	r3, r1
 800adcc:	3324      	adds	r3, #36	@ 0x24
 800adce:	881b      	ldrh	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d117      	bne.n	800ae04 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fbc0 	bl	800b55c <USBD_CtlError>
                  break;
 800addc:	e054      	b.n	800ae88 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800adde:	7bbb      	ldrb	r3, [r7, #14]
 800ade0:	f003 020f 	and.w	r2, r3, #15
 800ade4:	6879      	ldr	r1, [r7, #4]
 800ade6:	4613      	mov	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	440b      	add	r3, r1
 800adf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800adf4:	881b      	ldrh	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d104      	bne.n	800ae04 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fbad 	bl	800b55c <USBD_CtlError>
                  break;
 800ae02:	e041      	b.n	800ae88 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	da0b      	bge.n	800ae24 <USBD_StdEPReq+0x23e>
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae12:	4613      	mov	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	3310      	adds	r3, #16
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	4413      	add	r3, r2
 800ae20:	3304      	adds	r3, #4
 800ae22:	e00b      	b.n	800ae3c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	4413      	add	r3, r2
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <USBD_StdEPReq+0x264>
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
 800ae46:	2b80      	cmp	r3, #128	@ 0x80
 800ae48:	d103      	bne.n	800ae52 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	e00e      	b.n	800ae70 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae52:	7bbb      	ldrb	r3, [r7, #14]
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f001 f874 	bl	800bf44 <USBD_LL_IsStallEP>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d003      	beq.n	800ae6a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2201      	movs	r2, #1
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	e002      	b.n	800ae70 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2202      	movs	r2, #2
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fbe1 	bl	800b63e <USBD_CtlSendData>
              break;
 800ae7c:	e004      	b.n	800ae88 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fb6b 	bl	800b55c <USBD_CtlError>
              break;
 800ae86:	bf00      	nop
          }
          break;
 800ae88:	e004      	b.n	800ae94 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fb65 	bl	800b55c <USBD_CtlError>
          break;
 800ae92:	bf00      	nop
      }
      break;
 800ae94:	e004      	b.n	800aea0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fb5f 	bl	800b55c <USBD_CtlError>
      break;
 800ae9e:	bf00      	nop
  }

  return ret;
 800aea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	885b      	ldrh	r3, [r3, #2]
 800aec6:	0a1b      	lsrs	r3, r3, #8
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	3b01      	subs	r3, #1
 800aecc:	2b0e      	cmp	r3, #14
 800aece:	f200 8152 	bhi.w	800b176 <USBD_GetDescriptor+0x2ca>
 800aed2:	a201      	add	r2, pc, #4	@ (adr r2, 800aed8 <USBD_GetDescriptor+0x2c>)
 800aed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed8:	0800af49 	.word	0x0800af49
 800aedc:	0800af61 	.word	0x0800af61
 800aee0:	0800afa1 	.word	0x0800afa1
 800aee4:	0800b177 	.word	0x0800b177
 800aee8:	0800b177 	.word	0x0800b177
 800aeec:	0800b117 	.word	0x0800b117
 800aef0:	0800b143 	.word	0x0800b143
 800aef4:	0800b177 	.word	0x0800b177
 800aef8:	0800b177 	.word	0x0800b177
 800aefc:	0800b177 	.word	0x0800b177
 800af00:	0800b177 	.word	0x0800b177
 800af04:	0800b177 	.word	0x0800b177
 800af08:	0800b177 	.word	0x0800b177
 800af0c:	0800b177 	.word	0x0800b177
 800af10:	0800af15 	.word	0x0800af15
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af1a:	69db      	ldr	r3, [r3, #28]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00b      	beq.n	800af38 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	7c12      	ldrb	r2, [r2, #16]
 800af2c:	f107 0108 	add.w	r1, r7, #8
 800af30:	4610      	mov	r0, r2
 800af32:	4798      	blx	r3
 800af34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af36:	e126      	b.n	800b186 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fb0e 	bl	800b55c <USBD_CtlError>
        err++;
 800af40:	7afb      	ldrb	r3, [r7, #11]
 800af42:	3301      	adds	r3, #1
 800af44:	72fb      	strb	r3, [r7, #11]
      break;
 800af46:	e11e      	b.n	800b186 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	7c12      	ldrb	r2, [r2, #16]
 800af54:	f107 0108 	add.w	r1, r7, #8
 800af58:	4610      	mov	r0, r2
 800af5a:	4798      	blx	r3
 800af5c:	60f8      	str	r0, [r7, #12]
      break;
 800af5e:	e112      	b.n	800b186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	7c1b      	ldrb	r3, [r3, #16]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10d      	bne.n	800af84 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af70:	f107 0208 	add.w	r2, r7, #8
 800af74:	4610      	mov	r0, r2
 800af76:	4798      	blx	r3
 800af78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3301      	adds	r3, #1
 800af7e:	2202      	movs	r2, #2
 800af80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af82:	e100      	b.n	800b186 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af8c:	f107 0208 	add.w	r2, r7, #8
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	3301      	adds	r3, #1
 800af9a:	2202      	movs	r2, #2
 800af9c:	701a      	strb	r2, [r3, #0]
      break;
 800af9e:	e0f2      	b.n	800b186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	885b      	ldrh	r3, [r3, #2]
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b05      	cmp	r3, #5
 800afa8:	f200 80ac 	bhi.w	800b104 <USBD_GetDescriptor+0x258>
 800afac:	a201      	add	r2, pc, #4	@ (adr r2, 800afb4 <USBD_GetDescriptor+0x108>)
 800afae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb2:	bf00      	nop
 800afb4:	0800afcd 	.word	0x0800afcd
 800afb8:	0800b001 	.word	0x0800b001
 800afbc:	0800b035 	.word	0x0800b035
 800afc0:	0800b069 	.word	0x0800b069
 800afc4:	0800b09d 	.word	0x0800b09d
 800afc8:	0800b0d1 	.word	0x0800b0d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00b      	beq.n	800aff0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	7c12      	ldrb	r2, [r2, #16]
 800afe4:	f107 0108 	add.w	r1, r7, #8
 800afe8:	4610      	mov	r0, r2
 800afea:	4798      	blx	r3
 800afec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afee:	e091      	b.n	800b114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fab2 	bl	800b55c <USBD_CtlError>
            err++;
 800aff8:	7afb      	ldrb	r3, [r7, #11]
 800affa:	3301      	adds	r3, #1
 800affc:	72fb      	strb	r3, [r7, #11]
          break;
 800affe:	e089      	b.n	800b114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00b      	beq.n	800b024 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	7c12      	ldrb	r2, [r2, #16]
 800b018:	f107 0108 	add.w	r1, r7, #8
 800b01c:	4610      	mov	r0, r2
 800b01e:	4798      	blx	r3
 800b020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b022:	e077      	b.n	800b114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fa98 	bl	800b55c <USBD_CtlError>
            err++;
 800b02c:	7afb      	ldrb	r3, [r7, #11]
 800b02e:	3301      	adds	r3, #1
 800b030:	72fb      	strb	r3, [r7, #11]
          break;
 800b032:	e06f      	b.n	800b114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00b      	beq.n	800b058 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	7c12      	ldrb	r2, [r2, #16]
 800b04c:	f107 0108 	add.w	r1, r7, #8
 800b050:	4610      	mov	r0, r2
 800b052:	4798      	blx	r3
 800b054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b056:	e05d      	b.n	800b114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fa7e 	bl	800b55c <USBD_CtlError>
            err++;
 800b060:	7afb      	ldrb	r3, [r7, #11]
 800b062:	3301      	adds	r3, #1
 800b064:	72fb      	strb	r3, [r7, #11]
          break;
 800b066:	e055      	b.n	800b114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00b      	beq.n	800b08c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	7c12      	ldrb	r2, [r2, #16]
 800b080:	f107 0108 	add.w	r1, r7, #8
 800b084:	4610      	mov	r0, r2
 800b086:	4798      	blx	r3
 800b088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b08a:	e043      	b.n	800b114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fa64 	bl	800b55c <USBD_CtlError>
            err++;
 800b094:	7afb      	ldrb	r3, [r7, #11]
 800b096:	3301      	adds	r3, #1
 800b098:	72fb      	strb	r3, [r7, #11]
          break;
 800b09a:	e03b      	b.n	800b114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00b      	beq.n	800b0c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ae:	695b      	ldr	r3, [r3, #20]
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	7c12      	ldrb	r2, [r2, #16]
 800b0b4:	f107 0108 	add.w	r1, r7, #8
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	4798      	blx	r3
 800b0bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0be:	e029      	b.n	800b114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fa4a 	bl	800b55c <USBD_CtlError>
            err++;
 800b0c8:	7afb      	ldrb	r3, [r7, #11]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b0ce:	e021      	b.n	800b114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00b      	beq.n	800b0f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	7c12      	ldrb	r2, [r2, #16]
 800b0e8:	f107 0108 	add.w	r1, r7, #8
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	4798      	blx	r3
 800b0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0f2:	e00f      	b.n	800b114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fa30 	bl	800b55c <USBD_CtlError>
            err++;
 800b0fc:	7afb      	ldrb	r3, [r7, #11]
 800b0fe:	3301      	adds	r3, #1
 800b100:	72fb      	strb	r3, [r7, #11]
          break;
 800b102:	e007      	b.n	800b114 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fa28 	bl	800b55c <USBD_CtlError>
          err++;
 800b10c:	7afb      	ldrb	r3, [r7, #11]
 800b10e:	3301      	adds	r3, #1
 800b110:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b112:	bf00      	nop
      }
      break;
 800b114:	e037      	b.n	800b186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	7c1b      	ldrb	r3, [r3, #16]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d109      	bne.n	800b132 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b126:	f107 0208 	add.w	r2, r7, #8
 800b12a:	4610      	mov	r0, r2
 800b12c:	4798      	blx	r3
 800b12e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b130:	e029      	b.n	800b186 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fa11 	bl	800b55c <USBD_CtlError>
        err++;
 800b13a:	7afb      	ldrb	r3, [r7, #11]
 800b13c:	3301      	adds	r3, #1
 800b13e:	72fb      	strb	r3, [r7, #11]
      break;
 800b140:	e021      	b.n	800b186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	7c1b      	ldrb	r3, [r3, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10d      	bne.n	800b166 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b152:	f107 0208 	add.w	r2, r7, #8
 800b156:	4610      	mov	r0, r2
 800b158:	4798      	blx	r3
 800b15a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	3301      	adds	r3, #1
 800b160:	2207      	movs	r2, #7
 800b162:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b164:	e00f      	b.n	800b186 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f9f7 	bl	800b55c <USBD_CtlError>
        err++;
 800b16e:	7afb      	ldrb	r3, [r7, #11]
 800b170:	3301      	adds	r3, #1
 800b172:	72fb      	strb	r3, [r7, #11]
      break;
 800b174:	e007      	b.n	800b186 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f9ef 	bl	800b55c <USBD_CtlError>
      err++;
 800b17e:	7afb      	ldrb	r3, [r7, #11]
 800b180:	3301      	adds	r3, #1
 800b182:	72fb      	strb	r3, [r7, #11]
      break;
 800b184:	bf00      	nop
  }

  if (err != 0U)
 800b186:	7afb      	ldrb	r3, [r7, #11]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d11e      	bne.n	800b1ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	88db      	ldrh	r3, [r3, #6]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d016      	beq.n	800b1c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b194:	893b      	ldrh	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00e      	beq.n	800b1b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	88da      	ldrh	r2, [r3, #6]
 800b19e:	893b      	ldrh	r3, [r7, #8]
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	bf28      	it	cs
 800b1a4:	4613      	movcs	r3, r2
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b1aa:	893b      	ldrh	r3, [r7, #8]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68f9      	ldr	r1, [r7, #12]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fa44 	bl	800b63e <USBD_CtlSendData>
 800b1b6:	e009      	b.n	800b1cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f9ce 	bl	800b55c <USBD_CtlError>
 800b1c0:	e004      	b.n	800b1cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fa95 	bl	800b6f2 <USBD_CtlSendStatus>
 800b1c8:	e000      	b.n	800b1cc <USBD_GetDescriptor+0x320>
    return;
 800b1ca:	bf00      	nop
  }
}
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop

0800b1d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	889b      	ldrh	r3, [r3, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d131      	bne.n	800b24a <USBD_SetAddress+0x76>
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	88db      	ldrh	r3, [r3, #6]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d12d      	bne.n	800b24a <USBD_SetAddress+0x76>
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	885b      	ldrh	r3, [r3, #2]
 800b1f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b1f4:	d829      	bhi.n	800b24a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	885b      	ldrh	r3, [r3, #2]
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b200:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d104      	bne.n	800b218 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f9a3 	bl	800b55c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b216:	e01d      	b.n	800b254 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	7bfa      	ldrb	r2, [r7, #15]
 800b21c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b220:	7bfb      	ldrb	r3, [r7, #15]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 feb9 	bl	800bf9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fa61 	bl	800b6f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d004      	beq.n	800b240 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2202      	movs	r2, #2
 800b23a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23e:	e009      	b.n	800b254 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b248:	e004      	b.n	800b254 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b24a:	6839      	ldr	r1, [r7, #0]
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f985 	bl	800b55c <USBD_CtlError>
  }
}
 800b252:	bf00      	nop
 800b254:	bf00      	nop
 800b256:	3710      	adds	r7, #16
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	885b      	ldrh	r3, [r3, #2]
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	4b4c      	ldr	r3, [pc, #304]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b272:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b274:	4b4b      	ldr	r3, [pc, #300]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d905      	bls.n	800b288 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f96c 	bl	800b55c <USBD_CtlError>
    return USBD_FAIL;
 800b284:	2303      	movs	r3, #3
 800b286:	e088      	b.n	800b39a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b02      	cmp	r3, #2
 800b292:	d002      	beq.n	800b29a <USBD_SetConfig+0x3e>
 800b294:	2b03      	cmp	r3, #3
 800b296:	d025      	beq.n	800b2e4 <USBD_SetConfig+0x88>
 800b298:	e071      	b.n	800b37e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b29a:	4b42      	ldr	r3, [pc, #264]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d01c      	beq.n	800b2dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b2a2:	4b40      	ldr	r3, [pc, #256]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2ac:	4b3d      	ldr	r3, [pc, #244]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7ff f992 	bl	800a5dc <USBD_SetClassConfig>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d004      	beq.n	800b2cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f949 	bl	800b55c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b2ca:	e065      	b.n	800b398 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fa10 	bl	800b6f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2203      	movs	r2, #3
 800b2d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b2da:	e05d      	b.n	800b398 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fa08 	bl	800b6f2 <USBD_CtlSendStatus>
      break;
 800b2e2:	e059      	b.n	800b398 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b2e4:	4b2f      	ldr	r3, [pc, #188]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d112      	bne.n	800b312 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b2f4:	4b2b      	ldr	r3, [pc, #172]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2fe:	4b29      	ldr	r3, [pc, #164]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	4619      	mov	r1, r3
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f7ff f985 	bl	800a614 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f9f1 	bl	800b6f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b310:	e042      	b.n	800b398 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b312:	4b24      	ldr	r3, [pc, #144]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	461a      	mov	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d02a      	beq.n	800b376 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	b2db      	uxtb	r3, r3
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f7ff f973 	bl	800a614 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b32e:	4b1d      	ldr	r3, [pc, #116]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b338:	4b1a      	ldr	r3, [pc, #104]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff f94c 	bl	800a5dc <USBD_SetClassConfig>
 800b344:	4603      	mov	r3, r0
 800b346:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b348:	7bfb      	ldrb	r3, [r7, #15]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00f      	beq.n	800b36e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f903 	bl	800b55c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	4619      	mov	r1, r3
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7ff f958 	bl	800a614 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2202      	movs	r2, #2
 800b368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b36c:	e014      	b.n	800b398 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f9bf 	bl	800b6f2 <USBD_CtlSendStatus>
      break;
 800b374:	e010      	b.n	800b398 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f9bb 	bl	800b6f2 <USBD_CtlSendStatus>
      break;
 800b37c:	e00c      	b.n	800b398 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f8eb 	bl	800b55c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b386:	4b07      	ldr	r3, [pc, #28]	@ (800b3a4 <USBD_SetConfig+0x148>)
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f7ff f941 	bl	800a614 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b392:	2303      	movs	r3, #3
 800b394:	73fb      	strb	r3, [r7, #15]
      break;
 800b396:	bf00      	nop
  }

  return ret;
 800b398:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000c25 	.word	0x20000c25

0800b3a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	88db      	ldrh	r3, [r3, #6]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d004      	beq.n	800b3c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f8cd 	bl	800b55c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b3c2:	e023      	b.n	800b40c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	dc02      	bgt.n	800b3d6 <USBD_GetConfig+0x2e>
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	dc03      	bgt.n	800b3dc <USBD_GetConfig+0x34>
 800b3d4:	e015      	b.n	800b402 <USBD_GetConfig+0x5a>
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d00b      	beq.n	800b3f2 <USBD_GetConfig+0x4a>
 800b3da:	e012      	b.n	800b402 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f927 	bl	800b63e <USBD_CtlSendData>
        break;
 800b3f0:	e00c      	b.n	800b40c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f91f 	bl	800b63e <USBD_CtlSendData>
        break;
 800b400:	e004      	b.n	800b40c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f8a9 	bl	800b55c <USBD_CtlError>
        break;
 800b40a:	bf00      	nop
}
 800b40c:	bf00      	nop
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b424:	b2db      	uxtb	r3, r3
 800b426:	3b01      	subs	r3, #1
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d81e      	bhi.n	800b46a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	88db      	ldrh	r3, [r3, #6]
 800b430:	2b02      	cmp	r3, #2
 800b432:	d004      	beq.n	800b43e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f890 	bl	800b55c <USBD_CtlError>
        break;
 800b43c:	e01a      	b.n	800b474 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2201      	movs	r2, #1
 800b442:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d005      	beq.n	800b45a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	f043 0202 	orr.w	r2, r3, #2
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	330c      	adds	r3, #12
 800b45e:	2202      	movs	r2, #2
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f8eb 	bl	800b63e <USBD_CtlSendData>
      break;
 800b468:	e004      	b.n	800b474 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 f875 	bl	800b55c <USBD_CtlError>
      break;
 800b472:	bf00      	nop
  }
}
 800b474:	bf00      	nop
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	885b      	ldrh	r3, [r3, #2]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d106      	bne.n	800b49c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2201      	movs	r2, #1
 800b492:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f92b 	bl	800b6f2 <USBD_CtlSendStatus>
  }
}
 800b49c:	bf00      	nop
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d80b      	bhi.n	800b4d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	885b      	ldrh	r3, [r3, #2]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d10c      	bne.n	800b4de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f910 	bl	800b6f2 <USBD_CtlSendStatus>
      }
      break;
 800b4d2:	e004      	b.n	800b4de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f840 	bl	800b55c <USBD_CtlError>
      break;
 800b4dc:	e000      	b.n	800b4e0 <USBD_ClrFeature+0x3c>
      break;
 800b4de:	bf00      	nop
  }
}
 800b4e0:	bf00      	nop
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	781a      	ldrb	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3301      	adds	r3, #1
 800b502:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	781a      	ldrb	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	3301      	adds	r3, #1
 800b510:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f7ff fa92 	bl	800aa3c <SWAPBYTE>
 800b518:	4603      	mov	r3, r0
 800b51a:	461a      	mov	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	3301      	adds	r3, #1
 800b524:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3301      	adds	r3, #1
 800b52a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f7ff fa85 	bl	800aa3c <SWAPBYTE>
 800b532:	4603      	mov	r3, r0
 800b534:	461a      	mov	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	3301      	adds	r3, #1
 800b53e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	3301      	adds	r3, #1
 800b544:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f7ff fa78 	bl	800aa3c <SWAPBYTE>
 800b54c:	4603      	mov	r3, r0
 800b54e:	461a      	mov	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	80da      	strh	r2, [r3, #6]
}
 800b554:	bf00      	nop
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b566:	2180      	movs	r1, #128	@ 0x80
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fcad 	bl	800bec8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b56e:	2100      	movs	r1, #0
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fca9 	bl	800bec8 <USBD_LL_StallEP>
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b086      	sub	sp, #24
 800b582:	af00      	add	r7, sp, #0
 800b584:	60f8      	str	r0, [r7, #12]
 800b586:	60b9      	str	r1, [r7, #8]
 800b588:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b58a:	2300      	movs	r3, #0
 800b58c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d036      	beq.n	800b602 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b598:	6938      	ldr	r0, [r7, #16]
 800b59a:	f000 f836 	bl	800b60a <USBD_GetLen>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	7812      	ldrb	r2, [r2, #0]
 800b5b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5b8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b5be:	7dfb      	ldrb	r3, [r7, #23]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	2203      	movs	r2, #3
 800b5c6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b5ce:	e013      	b.n	800b5f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	7812      	ldrb	r2, [r2, #0]
 800b5da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	613b      	str	r3, [r7, #16]
    idx++;
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	701a      	strb	r2, [r3, #0]
    idx++;
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1e7      	bne.n	800b5d0 <USBD_GetString+0x52>
 800b600:	e000      	b.n	800b604 <USBD_GetString+0x86>
    return;
 800b602:	bf00      	nop
  }
}
 800b604:	3718      	adds	r7, #24
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b612:	2300      	movs	r3, #0
 800b614:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b61a:	e005      	b.n	800b628 <USBD_GetLen+0x1e>
  {
    len++;
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	3301      	adds	r3, #1
 800b620:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	3301      	adds	r3, #1
 800b626:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1f5      	bne.n	800b61c <USBD_GetLen+0x12>
  }

  return len;
 800b630:	7bfb      	ldrb	r3, [r7, #15]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3714      	adds	r7, #20
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b084      	sub	sp, #16
 800b642:	af00      	add	r7, sp, #0
 800b644:	60f8      	str	r0, [r7, #12]
 800b646:	60b9      	str	r1, [r7, #8]
 800b648:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2202      	movs	r2, #2
 800b64e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	2100      	movs	r1, #0
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 fcb8 	bl	800bfda <USBD_LL_Transmit>

  return USBD_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	2100      	movs	r1, #0
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 fca7 	bl	800bfda <USBD_LL_Transmit>

  return USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b084      	sub	sp, #16
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	60f8      	str	r0, [r7, #12]
 800b69e:	60b9      	str	r1, [r7, #8]
 800b6a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2203      	movs	r2, #3
 800b6a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	2100      	movs	r1, #0
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 fcab 	bl	800c01c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f000 fc9a 	bl	800c01c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b082      	sub	sp, #8
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2204      	movs	r2, #4
 800b6fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b702:	2300      	movs	r3, #0
 800b704:	2200      	movs	r2, #0
 800b706:	2100      	movs	r1, #0
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fc66 	bl	800bfda <USBD_LL_Transmit>

  return USBD_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2205      	movs	r2, #5
 800b724:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b728:	2300      	movs	r3, #0
 800b72a:	2200      	movs	r2, #0
 800b72c:	2100      	movs	r1, #0
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fc74 	bl	800c01c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
	...

0800b740 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b744:	2200      	movs	r2, #0
 800b746:	4912      	ldr	r1, [pc, #72]	@ (800b790 <MX_USB_Device_Init+0x50>)
 800b748:	4812      	ldr	r0, [pc, #72]	@ (800b794 <MX_USB_Device_Init+0x54>)
 800b74a:	f7fe fed9 	bl	800a500 <USBD_Init>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b754:	f7f6 f899 	bl	800188a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b758:	490f      	ldr	r1, [pc, #60]	@ (800b798 <MX_USB_Device_Init+0x58>)
 800b75a:	480e      	ldr	r0, [pc, #56]	@ (800b794 <MX_USB_Device_Init+0x54>)
 800b75c:	f7fe ff00 	bl	800a560 <USBD_RegisterClass>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b766:	f7f6 f890 	bl	800188a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b76a:	490c      	ldr	r1, [pc, #48]	@ (800b79c <MX_USB_Device_Init+0x5c>)
 800b76c:	4809      	ldr	r0, [pc, #36]	@ (800b794 <MX_USB_Device_Init+0x54>)
 800b76e:	f7fe fe21 	bl	800a3b4 <USBD_CDC_RegisterInterface>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b778:	f7f6 f887 	bl	800188a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b77c:	4805      	ldr	r0, [pc, #20]	@ (800b794 <MX_USB_Device_Init+0x54>)
 800b77e:	f7fe ff16 	bl	800a5ae <USBD_Start>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b788:	f7f6 f87f 	bl	800188a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b78c:	bf00      	nop
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	200002d8 	.word	0x200002d8
 800b794:	20001ac0 	.word	0x20001ac0
 800b798:	200001c0 	.word	0x200001c0
 800b79c:	200002c4 	.word	0x200002c4

0800b7a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4905      	ldr	r1, [pc, #20]	@ (800b7bc <CDC_Init_FS+0x1c>)
 800b7a8:	4805      	ldr	r0, [pc, #20]	@ (800b7c0 <CDC_Init_FS+0x20>)
 800b7aa:	f7fe fe18 	bl	800a3de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b7ae:	4905      	ldr	r1, [pc, #20]	@ (800b7c4 <CDC_Init_FS+0x24>)
 800b7b0:	4803      	ldr	r0, [pc, #12]	@ (800b7c0 <CDC_Init_FS+0x20>)
 800b7b2:	f7fe fe32 	bl	800a41a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b7b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	20002190 	.word	0x20002190
 800b7c0:	20001ac0 	.word	0x20001ac0
 800b7c4:	20001d90 	.word	0x20001d90

0800b7c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b7cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	4603      	mov	r3, r0
 800b7e0:	6039      	str	r1, [r7, #0]
 800b7e2:	71fb      	strb	r3, [r7, #7]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b7e8:	79fb      	ldrb	r3, [r7, #7]
 800b7ea:	2b23      	cmp	r3, #35	@ 0x23
 800b7ec:	d84a      	bhi.n	800b884 <CDC_Control_FS+0xac>
 800b7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f4 <CDC_Control_FS+0x1c>)
 800b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f4:	0800b885 	.word	0x0800b885
 800b7f8:	0800b885 	.word	0x0800b885
 800b7fc:	0800b885 	.word	0x0800b885
 800b800:	0800b885 	.word	0x0800b885
 800b804:	0800b885 	.word	0x0800b885
 800b808:	0800b885 	.word	0x0800b885
 800b80c:	0800b885 	.word	0x0800b885
 800b810:	0800b885 	.word	0x0800b885
 800b814:	0800b885 	.word	0x0800b885
 800b818:	0800b885 	.word	0x0800b885
 800b81c:	0800b885 	.word	0x0800b885
 800b820:	0800b885 	.word	0x0800b885
 800b824:	0800b885 	.word	0x0800b885
 800b828:	0800b885 	.word	0x0800b885
 800b82c:	0800b885 	.word	0x0800b885
 800b830:	0800b885 	.word	0x0800b885
 800b834:	0800b885 	.word	0x0800b885
 800b838:	0800b885 	.word	0x0800b885
 800b83c:	0800b885 	.word	0x0800b885
 800b840:	0800b885 	.word	0x0800b885
 800b844:	0800b885 	.word	0x0800b885
 800b848:	0800b885 	.word	0x0800b885
 800b84c:	0800b885 	.word	0x0800b885
 800b850:	0800b885 	.word	0x0800b885
 800b854:	0800b885 	.word	0x0800b885
 800b858:	0800b885 	.word	0x0800b885
 800b85c:	0800b885 	.word	0x0800b885
 800b860:	0800b885 	.word	0x0800b885
 800b864:	0800b885 	.word	0x0800b885
 800b868:	0800b885 	.word	0x0800b885
 800b86c:	0800b885 	.word	0x0800b885
 800b870:	0800b885 	.word	0x0800b885
 800b874:	0800b885 	.word	0x0800b885
 800b878:	0800b885 	.word	0x0800b885
 800b87c:	0800b885 	.word	0x0800b885
 800b880:	0800b885 	.word	0x0800b885
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b884:	bf00      	nop
  }

  return (USBD_OK);
 800b886:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b888:	4618      	mov	r0, r3
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b89e:	6879      	ldr	r1, [r7, #4]
 800b8a0:	4805      	ldr	r0, [pc, #20]	@ (800b8b8 <CDC_Receive_FS+0x24>)
 800b8a2:	f7fe fdba 	bl	800a41a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b8a6:	4804      	ldr	r0, [pc, #16]	@ (800b8b8 <CDC_Receive_FS+0x24>)
 800b8a8:	f7fe fe00 	bl	800a4ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b8ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20001ac0 	.word	0x20001ac0

0800b8bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b904 <CDC_Transmit_FS+0x48>)
 800b8ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b8d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e00b      	b.n	800b8fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b8e2:	887b      	ldrh	r3, [r7, #2]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	6879      	ldr	r1, [r7, #4]
 800b8e8:	4806      	ldr	r0, [pc, #24]	@ (800b904 <CDC_Transmit_FS+0x48>)
 800b8ea:	f7fe fd78 	bl	800a3de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b8ee:	4805      	ldr	r0, [pc, #20]	@ (800b904 <CDC_Transmit_FS+0x48>)
 800b8f0:	f7fe fdac 	bl	800a44c <USBD_CDC_TransmitPacket>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20001ac0 	.word	0x20001ac0

0800b908 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b908:	b480      	push	{r7}
 800b90a:	b087      	sub	sp, #28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	4613      	mov	r3, r2
 800b914:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b91a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	371c      	adds	r7, #28
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
	...

0800b92c <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b932:	4b09      	ldr	r3, [pc, #36]	@ (800b958 <CDC_Transmit_Is_Busy+0x2c>)
 800b934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b938:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b940:	2b00      	cmp	r3, #0
 800b942:	d001      	beq.n	800b948 <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800b944:	2301      	movs	r3, #1
 800b946:	e000      	b.n	800b94a <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800b948:	2300      	movs	r3, #0
  }
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	20001ac0 	.word	0x20001ac0

0800b95c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	6039      	str	r1, [r7, #0]
 800b966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	2212      	movs	r2, #18
 800b96c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b96e:	4b03      	ldr	r3, [pc, #12]	@ (800b97c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b970:	4618      	mov	r0, r3
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	200002f8 	.word	0x200002f8

0800b980 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	4603      	mov	r3, r0
 800b988:	6039      	str	r1, [r7, #0]
 800b98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2204      	movs	r2, #4
 800b990:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b992:	4b03      	ldr	r3, [pc, #12]	@ (800b9a0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b994:	4618      	mov	r0, r3
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr
 800b9a0:	2000030c 	.word	0x2000030c

0800b9a4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	6039      	str	r1, [r7, #0]
 800b9ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9b0:	79fb      	ldrb	r3, [r7, #7]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d105      	bne.n	800b9c2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	4907      	ldr	r1, [pc, #28]	@ (800b9d8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b9ba:	4808      	ldr	r0, [pc, #32]	@ (800b9dc <USBD_CDC_ProductStrDescriptor+0x38>)
 800b9bc:	f7ff fddf 	bl	800b57e <USBD_GetString>
 800b9c0:	e004      	b.n	800b9cc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	4904      	ldr	r1, [pc, #16]	@ (800b9d8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b9c6:	4805      	ldr	r0, [pc, #20]	@ (800b9dc <USBD_CDC_ProductStrDescriptor+0x38>)
 800b9c8:	f7ff fdd9 	bl	800b57e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9cc:	4b02      	ldr	r3, [pc, #8]	@ (800b9d8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20002590 	.word	0x20002590
 800b9dc:	0800d308 	.word	0x0800d308

0800b9e0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	6039      	str	r1, [r7, #0]
 800b9ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	4904      	ldr	r1, [pc, #16]	@ (800ba00 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b9f0:	4804      	ldr	r0, [pc, #16]	@ (800ba04 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b9f2:	f7ff fdc4 	bl	800b57e <USBD_GetString>
  return USBD_StrDesc;
 800b9f6:	4b02      	ldr	r3, [pc, #8]	@ (800ba00 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	20002590 	.word	0x20002590
 800ba04:	0800d320 	.word	0x0800d320

0800ba08 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	4603      	mov	r3, r0
 800ba10:	6039      	str	r1, [r7, #0]
 800ba12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	221a      	movs	r2, #26
 800ba18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba1a:	f000 f843 	bl	800baa4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ba1e:	4b02      	ldr	r3, [pc, #8]	@ (800ba28 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	20000310 	.word	0x20000310

0800ba2c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	4603      	mov	r3, r0
 800ba34:	6039      	str	r1, [r7, #0]
 800ba36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba38:	79fb      	ldrb	r3, [r7, #7]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d105      	bne.n	800ba4a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	4907      	ldr	r1, [pc, #28]	@ (800ba60 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ba42:	4808      	ldr	r0, [pc, #32]	@ (800ba64 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ba44:	f7ff fd9b 	bl	800b57e <USBD_GetString>
 800ba48:	e004      	b.n	800ba54 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	4904      	ldr	r1, [pc, #16]	@ (800ba60 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ba4e:	4805      	ldr	r0, [pc, #20]	@ (800ba64 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ba50:	f7ff fd95 	bl	800b57e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba54:	4b02      	ldr	r3, [pc, #8]	@ (800ba60 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	20002590 	.word	0x20002590
 800ba64:	0800d334 	.word	0x0800d334

0800ba68 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	6039      	str	r1, [r7, #0]
 800ba72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d105      	bne.n	800ba86 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	4907      	ldr	r1, [pc, #28]	@ (800ba9c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ba7e:	4808      	ldr	r0, [pc, #32]	@ (800baa0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ba80:	f7ff fd7d 	bl	800b57e <USBD_GetString>
 800ba84:	e004      	b.n	800ba90 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	4904      	ldr	r1, [pc, #16]	@ (800ba9c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ba8a:	4805      	ldr	r0, [pc, #20]	@ (800baa0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ba8c:	f7ff fd77 	bl	800b57e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba90:	4b02      	ldr	r3, [pc, #8]	@ (800ba9c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20002590 	.word	0x20002590
 800baa0:	0800d340 	.word	0x0800d340

0800baa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800baaa:	4b0f      	ldr	r3, [pc, #60]	@ (800bae8 <Get_SerialNum+0x44>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bab0:	4b0e      	ldr	r3, [pc, #56]	@ (800baec <Get_SerialNum+0x48>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bab6:	4b0e      	ldr	r3, [pc, #56]	@ (800baf0 <Get_SerialNum+0x4c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4413      	add	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d009      	beq.n	800bade <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800baca:	2208      	movs	r2, #8
 800bacc:	4909      	ldr	r1, [pc, #36]	@ (800baf4 <Get_SerialNum+0x50>)
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f000 f814 	bl	800bafc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bad4:	2204      	movs	r2, #4
 800bad6:	4908      	ldr	r1, [pc, #32]	@ (800baf8 <Get_SerialNum+0x54>)
 800bad8:	68b8      	ldr	r0, [r7, #8]
 800bada:	f000 f80f 	bl	800bafc <IntToUnicode>
  }
}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	1fff7590 	.word	0x1fff7590
 800baec:	1fff7594 	.word	0x1fff7594
 800baf0:	1fff7598 	.word	0x1fff7598
 800baf4:	20000312 	.word	0x20000312
 800baf8:	20000322 	.word	0x20000322

0800bafc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b087      	sub	sp, #28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	4613      	mov	r3, r2
 800bb08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb0e:	2300      	movs	r3, #0
 800bb10:	75fb      	strb	r3, [r7, #23]
 800bb12:	e027      	b.n	800bb64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	0f1b      	lsrs	r3, r3, #28
 800bb18:	2b09      	cmp	r3, #9
 800bb1a:	d80b      	bhi.n	800bb34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	0f1b      	lsrs	r3, r3, #28
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	4619      	mov	r1, r3
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	440b      	add	r3, r1
 800bb2c:	3230      	adds	r2, #48	@ 0x30
 800bb2e:	b2d2      	uxtb	r2, r2
 800bb30:	701a      	strb	r2, [r3, #0]
 800bb32:	e00a      	b.n	800bb4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	0f1b      	lsrs	r3, r3, #28
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	4619      	mov	r1, r3
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	440b      	add	r3, r1
 800bb44:	3237      	adds	r2, #55	@ 0x37
 800bb46:	b2d2      	uxtb	r2, r2
 800bb48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	011b      	lsls	r3, r3, #4
 800bb4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb50:	7dfb      	ldrb	r3, [r7, #23]
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	3301      	adds	r3, #1
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	4413      	add	r3, r2
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	3301      	adds	r3, #1
 800bb62:	75fb      	strb	r3, [r7, #23]
 800bb64:	7dfa      	ldrb	r2, [r7, #23]
 800bb66:	79fb      	ldrb	r3, [r7, #7]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d3d3      	bcc.n	800bb14 <IntToUnicode+0x18>
  }
}
 800bb6c:	bf00      	nop
 800bb6e:	bf00      	nop
 800bb70:	371c      	adds	r7, #28
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
	...

0800bb7c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b094      	sub	sp, #80	@ 0x50
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bb84:	f107 030c 	add.w	r3, r7, #12
 800bb88:	2244      	movs	r2, #68	@ 0x44
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f000 fd03 	bl	800c598 <memset>
  if(pcdHandle->Instance==USB)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a15      	ldr	r2, [pc, #84]	@ (800bbec <HAL_PCD_MspInit+0x70>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d122      	bne.n	800bbe2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bb9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bba0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bba2:	2300      	movs	r3, #0
 800bba4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bba6:	f107 030c 	add.w	r3, r7, #12
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f9 fd6a 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d001      	beq.n	800bbba <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800bbb6:	f7f5 fe68 	bl	800188a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bbba:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf0 <HAL_PCD_MspInit+0x74>)
 800bbbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbbe:	4a0c      	ldr	r2, [pc, #48]	@ (800bbf0 <HAL_PCD_MspInit+0x74>)
 800bbc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bbc4:	6593      	str	r3, [r2, #88]	@ 0x58
 800bbc6:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf0 <HAL_PCD_MspInit+0x74>)
 800bbc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbce:	60bb      	str	r3, [r7, #8]
 800bbd0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	2014      	movs	r0, #20
 800bbd8:	f7f6 fd33 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bbdc:	2014      	movs	r0, #20
 800bbde:	f7f6 fd4a 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bbe2:	bf00      	nop
 800bbe4:	3750      	adds	r7, #80	@ 0x50
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	40005c00 	.word	0x40005c00
 800bbf0:	40021000 	.word	0x40021000

0800bbf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	f7fe fd1a 	bl	800a644 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bc10:	bf00      	nop
 800bc12:	3708      	adds	r7, #8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	460b      	mov	r3, r1
 800bc22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bc2a:	78fa      	ldrb	r2, [r7, #3]
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	4413      	add	r3, r2
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	440b      	add	r3, r1
 800bc38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	78fb      	ldrb	r3, [r7, #3]
 800bc40:	4619      	mov	r1, r3
 800bc42:	f7fe fd54 	bl	800a6ee <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bc46:	bf00      	nop
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b082      	sub	sp, #8
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	460b      	mov	r3, r1
 800bc58:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800bc60:	78fa      	ldrb	r2, [r7, #3]
 800bc62:	6879      	ldr	r1, [r7, #4]
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	00db      	lsls	r3, r3, #3
 800bc6c:	440b      	add	r3, r1
 800bc6e:	3324      	adds	r3, #36	@ 0x24
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	78fb      	ldrb	r3, [r7, #3]
 800bc74:	4619      	mov	r1, r3
 800bc76:	f7fe fd9d 	bl	800a7b4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bc7a:	bf00      	nop
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b082      	sub	sp, #8
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7fe feb1 	bl	800a9f8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bc96:	bf00      	nop
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b084      	sub	sp, #16
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bca6:	2301      	movs	r3, #1
 800bca8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	795b      	ldrb	r3, [r3, #5]
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	d001      	beq.n	800bcb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bcb2:	f7f5 fdea 	bl	800188a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bcbc:	7bfa      	ldrb	r2, [r7, #15]
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fe fe5b 	bl	800a97c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe fe07 	bl	800a8e0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bcd2:	bf00      	nop
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
	...

0800bcdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe fe56 	bl	800a99c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	7a5b      	ldrb	r3, [r3, #9]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d005      	beq.n	800bd04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bcf8:	4b04      	ldr	r3, [pc, #16]	@ (800bd0c <HAL_PCD_SuspendCallback+0x30>)
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	4a03      	ldr	r2, [pc, #12]	@ (800bd0c <HAL_PCD_SuspendCallback+0x30>)
 800bcfe:	f043 0306 	orr.w	r3, r3, #6
 800bd02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bd04:	bf00      	nop
 800bd06:	3708      	adds	r7, #8
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	e000ed00 	.word	0xe000ed00

0800bd10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	7a5b      	ldrb	r3, [r3, #9]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d007      	beq.n	800bd30 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd20:	4b08      	ldr	r3, [pc, #32]	@ (800bd44 <HAL_PCD_ResumeCallback+0x34>)
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	4a07      	ldr	r2, [pc, #28]	@ (800bd44 <HAL_PCD_ResumeCallback+0x34>)
 800bd26:	f023 0306 	bic.w	r3, r3, #6
 800bd2a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bd2c:	f000 f9f8 	bl	800c120 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe fe46 	bl	800a9c8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bd3c:	bf00      	nop
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	e000ed00 	.word	0xe000ed00

0800bd48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bd50:	4a2b      	ldr	r2, [pc, #172]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a29      	ldr	r2, [pc, #164]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd5c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bd60:	4b27      	ldr	r3, [pc, #156]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd62:	4a28      	ldr	r2, [pc, #160]	@ (800be04 <USBD_LL_Init+0xbc>)
 800bd64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bd66:	4b26      	ldr	r3, [pc, #152]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd68:	2208      	movs	r2, #8
 800bd6a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bd6c:	4b24      	ldr	r3, [pc, #144]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd6e:	2202      	movs	r2, #2
 800bd70:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd72:	4b23      	ldr	r3, [pc, #140]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd74:	2202      	movs	r2, #2
 800bd76:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bd78:	4b21      	ldr	r3, [pc, #132]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bd7e:	4b20      	ldr	r3, [pc, #128]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bd84:	4b1e      	ldr	r3, [pc, #120]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bd8a:	4b1d      	ldr	r3, [pc, #116]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bd90:	481b      	ldr	r0, [pc, #108]	@ (800be00 <USBD_LL_Init+0xb8>)
 800bd92:	f7f7 f994 	bl	80030be <HAL_PCD_Init>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bd9c:	f7f5 fd75 	bl	800188a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bda6:	2318      	movs	r3, #24
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2100      	movs	r1, #0
 800bdac:	f7f8 fe1b 	bl	80049e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bdb6:	2358      	movs	r3, #88	@ 0x58
 800bdb8:	2200      	movs	r2, #0
 800bdba:	2180      	movs	r1, #128	@ 0x80
 800bdbc:	f7f8 fe13 	bl	80049e6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bdc6:	23c0      	movs	r3, #192	@ 0xc0
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2181      	movs	r1, #129	@ 0x81
 800bdcc:	f7f8 fe0b 	bl	80049e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bdd6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bdda:	2200      	movs	r2, #0
 800bddc:	2101      	movs	r1, #1
 800bdde:	f7f8 fe02 	bl	80049e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bde8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bdec:	2200      	movs	r2, #0
 800bdee:	2182      	movs	r1, #130	@ 0x82
 800bdf0:	f7f8 fdf9 	bl	80049e6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3708      	adds	r7, #8
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	20002790 	.word	0x20002790
 800be04:	40005c00 	.word	0x40005c00

0800be08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be10:	2300      	movs	r3, #0
 800be12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be14:	2300      	movs	r3, #0
 800be16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be1e:	4618      	mov	r0, r3
 800be20:	f7f7 fa1b 	bl	800325a <HAL_PCD_Start>
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be28:	7bfb      	ldrb	r3, [r7, #15]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f000 f97e 	bl	800c12c <USBD_Get_USB_Status>
 800be30:	4603      	mov	r3, r0
 800be32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be34:	7bbb      	ldrb	r3, [r7, #14]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b084      	sub	sp, #16
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	4608      	mov	r0, r1
 800be48:	4611      	mov	r1, r2
 800be4a:	461a      	mov	r2, r3
 800be4c:	4603      	mov	r3, r0
 800be4e:	70fb      	strb	r3, [r7, #3]
 800be50:	460b      	mov	r3, r1
 800be52:	70bb      	strb	r3, [r7, #2]
 800be54:	4613      	mov	r3, r2
 800be56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5c:	2300      	movs	r3, #0
 800be5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800be66:	78bb      	ldrb	r3, [r7, #2]
 800be68:	883a      	ldrh	r2, [r7, #0]
 800be6a:	78f9      	ldrb	r1, [r7, #3]
 800be6c:	f7f7 fb62 	bl	8003534 <HAL_PCD_EP_Open>
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be74:	7bfb      	ldrb	r3, [r7, #15]
 800be76:	4618      	mov	r0, r3
 800be78:	f000 f958 	bl	800c12c <USBD_Get_USB_Status>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be80:	7bbb      	ldrb	r3, [r7, #14]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b084      	sub	sp, #16
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be96:	2300      	movs	r3, #0
 800be98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bea4:	78fa      	ldrb	r2, [r7, #3]
 800bea6:	4611      	mov	r1, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7f7 fba2 	bl	80035f2 <HAL_PCD_EP_Close>
 800beae:	4603      	mov	r3, r0
 800beb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 f939 	bl	800c12c <USBD_Get_USB_Status>
 800beba:	4603      	mov	r3, r0
 800bebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bebe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	460b      	mov	r3, r1
 800bed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bee2:	78fa      	ldrb	r2, [r7, #3]
 800bee4:	4611      	mov	r1, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7f7 fc4b 	bl	8003782 <HAL_PCD_EP_SetStall>
 800beec:	4603      	mov	r3, r0
 800beee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 f91a 	bl	800c12c <USBD_Get_USB_Status>
 800bef8:	4603      	mov	r3, r0
 800befa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800befc:	7bbb      	ldrb	r3, [r7, #14]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	460b      	mov	r3, r1
 800bf10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf16:	2300      	movs	r3, #0
 800bf18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bf20:	78fa      	ldrb	r2, [r7, #3]
 800bf22:	4611      	mov	r1, r2
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7f7 fc7e 	bl	8003826 <HAL_PCD_EP_ClrStall>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 f8fb 	bl	800c12c <USBD_Get_USB_Status>
 800bf36:	4603      	mov	r3, r0
 800bf38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bf56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	da0b      	bge.n	800bf78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf60:	78fb      	ldrb	r3, [r7, #3]
 800bf62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf66:	68f9      	ldr	r1, [r7, #12]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	440b      	add	r3, r1
 800bf72:	3312      	adds	r3, #18
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	e00b      	b.n	800bf90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf78:	78fb      	ldrb	r3, [r7, #3]
 800bf7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf7e:	68f9      	ldr	r1, [r7, #12]
 800bf80:	4613      	mov	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	440b      	add	r3, r1
 800bf8a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800bf8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bfb6:	78fa      	ldrb	r2, [r7, #3]
 800bfb8:	4611      	mov	r1, r2
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7f7 fa96 	bl	80034ec <HAL_PCD_SetAddress>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 f8b0 	bl	800c12c <USBD_Get_USB_Status>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b086      	sub	sp, #24
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	607a      	str	r2, [r7, #4]
 800bfe4:	603b      	str	r3, [r7, #0]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bff8:	7af9      	ldrb	r1, [r7, #11]
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	f7f7 fb89 	bl	8003714 <HAL_PCD_EP_Transmit>
 800c002:	4603      	mov	r3, r0
 800c004:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c006:	7dfb      	ldrb	r3, [r7, #23]
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 f88f 	bl	800c12c <USBD_Get_USB_Status>
 800c00e:	4603      	mov	r3, r0
 800c010:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c012:	7dbb      	ldrb	r3, [r7, #22]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b086      	sub	sp, #24
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	607a      	str	r2, [r7, #4]
 800c026:	603b      	str	r3, [r7, #0]
 800c028:	460b      	mov	r3, r1
 800c02a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c03a:	7af9      	ldrb	r1, [r7, #11]
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	f7f7 fb1f 	bl	8003682 <HAL_PCD_EP_Receive>
 800c044:	4603      	mov	r3, r0
 800c046:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c048:	7dfb      	ldrb	r3, [r7, #23]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 f86e 	bl	800c12c <USBD_Get_USB_Status>
 800c050:	4603      	mov	r3, r0
 800c052:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c054:	7dbb      	ldrb	r3, [r7, #22]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3718      	adds	r7, #24
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b082      	sub	sp, #8
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	460b      	mov	r3, r1
 800c068:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c070:	78fa      	ldrb	r2, [r7, #3]
 800c072:	4611      	mov	r1, r2
 800c074:	4618      	mov	r0, r3
 800c076:	f7f7 fb35 	bl	80036e4 <HAL_PCD_EP_GetRxCount>
 800c07a:	4603      	mov	r3, r0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c090:	78fb      	ldrb	r3, [r7, #3]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d002      	beq.n	800c09c <HAL_PCDEx_LPM_Callback+0x18>
 800c096:	2b01      	cmp	r3, #1
 800c098:	d013      	beq.n	800c0c2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c09a:	e023      	b.n	800c0e4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	7a5b      	ldrb	r3, [r3, #9]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d007      	beq.n	800c0b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c0a4:	f000 f83c 	bl	800c120 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0a8:	4b10      	ldr	r3, [pc, #64]	@ (800c0ec <HAL_PCDEx_LPM_Callback+0x68>)
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	4a0f      	ldr	r2, [pc, #60]	@ (800c0ec <HAL_PCDEx_LPM_Callback+0x68>)
 800c0ae:	f023 0306 	bic.w	r3, r3, #6
 800c0b2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fe fc84 	bl	800a9c8 <USBD_LL_Resume>
    break;
 800c0c0:	e010      	b.n	800c0e4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fe fc67 	bl	800a99c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	7a5b      	ldrb	r3, [r3, #9]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d005      	beq.n	800c0e2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0d6:	4b05      	ldr	r3, [pc, #20]	@ (800c0ec <HAL_PCDEx_LPM_Callback+0x68>)
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	4a04      	ldr	r2, [pc, #16]	@ (800c0ec <HAL_PCDEx_LPM_Callback+0x68>)
 800c0dc:	f043 0306 	orr.w	r3, r3, #6
 800c0e0:	6113      	str	r3, [r2, #16]
    break;
 800c0e2:	bf00      	nop
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	e000ed00 	.word	0xe000ed00

0800c0f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c0f8:	4b03      	ldr	r3, [pc, #12]	@ (800c108 <USBD_static_malloc+0x18>)
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop
 800c108:	20000c28 	.word	0x20000c28

0800c10c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]

}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c124:	f7f5 fb66 	bl	80017f4 <SystemClock_Config>
}
 800c128:	bf00      	nop
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	4603      	mov	r3, r0
 800c134:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c13a:	79fb      	ldrb	r3, [r7, #7]
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	d817      	bhi.n	800c170 <USBD_Get_USB_Status+0x44>
 800c140:	a201      	add	r2, pc, #4	@ (adr r2, 800c148 <USBD_Get_USB_Status+0x1c>)
 800c142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c146:	bf00      	nop
 800c148:	0800c159 	.word	0x0800c159
 800c14c:	0800c15f 	.word	0x0800c15f
 800c150:	0800c165 	.word	0x0800c165
 800c154:	0800c16b 	.word	0x0800c16b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	73fb      	strb	r3, [r7, #15]
    break;
 800c15c:	e00b      	b.n	800c176 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c15e:	2303      	movs	r3, #3
 800c160:	73fb      	strb	r3, [r7, #15]
    break;
 800c162:	e008      	b.n	800c176 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c164:	2301      	movs	r3, #1
 800c166:	73fb      	strb	r3, [r7, #15]
    break;
 800c168:	e005      	b.n	800c176 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c16a:	2303      	movs	r3, #3
 800c16c:	73fb      	strb	r3, [r7, #15]
    break;
 800c16e:	e002      	b.n	800c176 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c170:	2303      	movs	r3, #3
 800c172:	73fb      	strb	r3, [r7, #15]
    break;
 800c174:	bf00      	nop
  }
  return usb_status;
 800c176:	7bfb      	ldrb	r3, [r7, #15]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3714      	adds	r7, #20
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <std>:
 800c184:	2300      	movs	r3, #0
 800c186:	b510      	push	{r4, lr}
 800c188:	4604      	mov	r4, r0
 800c18a:	e9c0 3300 	strd	r3, r3, [r0]
 800c18e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c192:	6083      	str	r3, [r0, #8]
 800c194:	8181      	strh	r1, [r0, #12]
 800c196:	6643      	str	r3, [r0, #100]	@ 0x64
 800c198:	81c2      	strh	r2, [r0, #14]
 800c19a:	6183      	str	r3, [r0, #24]
 800c19c:	4619      	mov	r1, r3
 800c19e:	2208      	movs	r2, #8
 800c1a0:	305c      	adds	r0, #92	@ 0x5c
 800c1a2:	f000 f9f9 	bl	800c598 <memset>
 800c1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c1dc <std+0x58>)
 800c1a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e0 <std+0x5c>)
 800c1ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e4 <std+0x60>)
 800c1b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e8 <std+0x64>)
 800c1b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c1ec <std+0x68>)
 800c1b8:	6224      	str	r4, [r4, #32]
 800c1ba:	429c      	cmp	r4, r3
 800c1bc:	d006      	beq.n	800c1cc <std+0x48>
 800c1be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c1c2:	4294      	cmp	r4, r2
 800c1c4:	d002      	beq.n	800c1cc <std+0x48>
 800c1c6:	33d0      	adds	r3, #208	@ 0xd0
 800c1c8:	429c      	cmp	r4, r3
 800c1ca:	d105      	bne.n	800c1d8 <std+0x54>
 800c1cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1d4:	f000 ba58 	b.w	800c688 <__retarget_lock_init_recursive>
 800c1d8:	bd10      	pop	{r4, pc}
 800c1da:	bf00      	nop
 800c1dc:	0800c3e9 	.word	0x0800c3e9
 800c1e0:	0800c40b 	.word	0x0800c40b
 800c1e4:	0800c443 	.word	0x0800c443
 800c1e8:	0800c467 	.word	0x0800c467
 800c1ec:	20000e48 	.word	0x20000e48

0800c1f0 <stdio_exit_handler>:
 800c1f0:	4a02      	ldr	r2, [pc, #8]	@ (800c1fc <stdio_exit_handler+0xc>)
 800c1f2:	4903      	ldr	r1, [pc, #12]	@ (800c200 <stdio_exit_handler+0x10>)
 800c1f4:	4803      	ldr	r0, [pc, #12]	@ (800c204 <stdio_exit_handler+0x14>)
 800c1f6:	f000 b869 	b.w	800c2cc <_fwalk_sglue>
 800c1fa:	bf00      	nop
 800c1fc:	2000032c 	.word	0x2000032c
 800c200:	0800cf45 	.word	0x0800cf45
 800c204:	2000033c 	.word	0x2000033c

0800c208 <cleanup_stdio>:
 800c208:	6841      	ldr	r1, [r0, #4]
 800c20a:	4b0c      	ldr	r3, [pc, #48]	@ (800c23c <cleanup_stdio+0x34>)
 800c20c:	4299      	cmp	r1, r3
 800c20e:	b510      	push	{r4, lr}
 800c210:	4604      	mov	r4, r0
 800c212:	d001      	beq.n	800c218 <cleanup_stdio+0x10>
 800c214:	f000 fe96 	bl	800cf44 <_fflush_r>
 800c218:	68a1      	ldr	r1, [r4, #8]
 800c21a:	4b09      	ldr	r3, [pc, #36]	@ (800c240 <cleanup_stdio+0x38>)
 800c21c:	4299      	cmp	r1, r3
 800c21e:	d002      	beq.n	800c226 <cleanup_stdio+0x1e>
 800c220:	4620      	mov	r0, r4
 800c222:	f000 fe8f 	bl	800cf44 <_fflush_r>
 800c226:	68e1      	ldr	r1, [r4, #12]
 800c228:	4b06      	ldr	r3, [pc, #24]	@ (800c244 <cleanup_stdio+0x3c>)
 800c22a:	4299      	cmp	r1, r3
 800c22c:	d004      	beq.n	800c238 <cleanup_stdio+0x30>
 800c22e:	4620      	mov	r0, r4
 800c230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c234:	f000 be86 	b.w	800cf44 <_fflush_r>
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	bf00      	nop
 800c23c:	20000e48 	.word	0x20000e48
 800c240:	20000eb0 	.word	0x20000eb0
 800c244:	20000f18 	.word	0x20000f18

0800c248 <global_stdio_init.part.0>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	4b0b      	ldr	r3, [pc, #44]	@ (800c278 <global_stdio_init.part.0+0x30>)
 800c24c:	4c0b      	ldr	r4, [pc, #44]	@ (800c27c <global_stdio_init.part.0+0x34>)
 800c24e:	4a0c      	ldr	r2, [pc, #48]	@ (800c280 <global_stdio_init.part.0+0x38>)
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	4620      	mov	r0, r4
 800c254:	2200      	movs	r2, #0
 800c256:	2104      	movs	r1, #4
 800c258:	f7ff ff94 	bl	800c184 <std>
 800c25c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c260:	2201      	movs	r2, #1
 800c262:	2109      	movs	r1, #9
 800c264:	f7ff ff8e 	bl	800c184 <std>
 800c268:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c26c:	2202      	movs	r2, #2
 800c26e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c272:	2112      	movs	r1, #18
 800c274:	f7ff bf86 	b.w	800c184 <std>
 800c278:	20000f80 	.word	0x20000f80
 800c27c:	20000e48 	.word	0x20000e48
 800c280:	0800c1f1 	.word	0x0800c1f1

0800c284 <__sfp_lock_acquire>:
 800c284:	4801      	ldr	r0, [pc, #4]	@ (800c28c <__sfp_lock_acquire+0x8>)
 800c286:	f000 ba00 	b.w	800c68a <__retarget_lock_acquire_recursive>
 800c28a:	bf00      	nop
 800c28c:	20000f89 	.word	0x20000f89

0800c290 <__sfp_lock_release>:
 800c290:	4801      	ldr	r0, [pc, #4]	@ (800c298 <__sfp_lock_release+0x8>)
 800c292:	f000 b9fb 	b.w	800c68c <__retarget_lock_release_recursive>
 800c296:	bf00      	nop
 800c298:	20000f89 	.word	0x20000f89

0800c29c <__sinit>:
 800c29c:	b510      	push	{r4, lr}
 800c29e:	4604      	mov	r4, r0
 800c2a0:	f7ff fff0 	bl	800c284 <__sfp_lock_acquire>
 800c2a4:	6a23      	ldr	r3, [r4, #32]
 800c2a6:	b11b      	cbz	r3, 800c2b0 <__sinit+0x14>
 800c2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ac:	f7ff bff0 	b.w	800c290 <__sfp_lock_release>
 800c2b0:	4b04      	ldr	r3, [pc, #16]	@ (800c2c4 <__sinit+0x28>)
 800c2b2:	6223      	str	r3, [r4, #32]
 800c2b4:	4b04      	ldr	r3, [pc, #16]	@ (800c2c8 <__sinit+0x2c>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1f5      	bne.n	800c2a8 <__sinit+0xc>
 800c2bc:	f7ff ffc4 	bl	800c248 <global_stdio_init.part.0>
 800c2c0:	e7f2      	b.n	800c2a8 <__sinit+0xc>
 800c2c2:	bf00      	nop
 800c2c4:	0800c209 	.word	0x0800c209
 800c2c8:	20000f80 	.word	0x20000f80

0800c2cc <_fwalk_sglue>:
 800c2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	4688      	mov	r8, r1
 800c2d4:	4614      	mov	r4, r2
 800c2d6:	2600      	movs	r6, #0
 800c2d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2dc:	f1b9 0901 	subs.w	r9, r9, #1
 800c2e0:	d505      	bpl.n	800c2ee <_fwalk_sglue+0x22>
 800c2e2:	6824      	ldr	r4, [r4, #0]
 800c2e4:	2c00      	cmp	r4, #0
 800c2e6:	d1f7      	bne.n	800c2d8 <_fwalk_sglue+0xc>
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ee:	89ab      	ldrh	r3, [r5, #12]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d907      	bls.n	800c304 <_fwalk_sglue+0x38>
 800c2f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	d003      	beq.n	800c304 <_fwalk_sglue+0x38>
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	4638      	mov	r0, r7
 800c300:	47c0      	blx	r8
 800c302:	4306      	orrs	r6, r0
 800c304:	3568      	adds	r5, #104	@ 0x68
 800c306:	e7e9      	b.n	800c2dc <_fwalk_sglue+0x10>

0800c308 <iprintf>:
 800c308:	b40f      	push	{r0, r1, r2, r3}
 800c30a:	b507      	push	{r0, r1, r2, lr}
 800c30c:	4906      	ldr	r1, [pc, #24]	@ (800c328 <iprintf+0x20>)
 800c30e:	ab04      	add	r3, sp, #16
 800c310:	6808      	ldr	r0, [r1, #0]
 800c312:	f853 2b04 	ldr.w	r2, [r3], #4
 800c316:	6881      	ldr	r1, [r0, #8]
 800c318:	9301      	str	r3, [sp, #4]
 800c31a:	f000 fae9 	bl	800c8f0 <_vfiprintf_r>
 800c31e:	b003      	add	sp, #12
 800c320:	f85d eb04 	ldr.w	lr, [sp], #4
 800c324:	b004      	add	sp, #16
 800c326:	4770      	bx	lr
 800c328:	20000338 	.word	0x20000338

0800c32c <_puts_r>:
 800c32c:	6a03      	ldr	r3, [r0, #32]
 800c32e:	b570      	push	{r4, r5, r6, lr}
 800c330:	6884      	ldr	r4, [r0, #8]
 800c332:	4605      	mov	r5, r0
 800c334:	460e      	mov	r6, r1
 800c336:	b90b      	cbnz	r3, 800c33c <_puts_r+0x10>
 800c338:	f7ff ffb0 	bl	800c29c <__sinit>
 800c33c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c33e:	07db      	lsls	r3, r3, #31
 800c340:	d405      	bmi.n	800c34e <_puts_r+0x22>
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	0598      	lsls	r0, r3, #22
 800c346:	d402      	bmi.n	800c34e <_puts_r+0x22>
 800c348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c34a:	f000 f99e 	bl	800c68a <__retarget_lock_acquire_recursive>
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	0719      	lsls	r1, r3, #28
 800c352:	d502      	bpl.n	800c35a <_puts_r+0x2e>
 800c354:	6923      	ldr	r3, [r4, #16]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d135      	bne.n	800c3c6 <_puts_r+0x9a>
 800c35a:	4621      	mov	r1, r4
 800c35c:	4628      	mov	r0, r5
 800c35e:	f000 f8c5 	bl	800c4ec <__swsetup_r>
 800c362:	b380      	cbz	r0, 800c3c6 <_puts_r+0x9a>
 800c364:	f04f 35ff 	mov.w	r5, #4294967295
 800c368:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c36a:	07da      	lsls	r2, r3, #31
 800c36c:	d405      	bmi.n	800c37a <_puts_r+0x4e>
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	059b      	lsls	r3, r3, #22
 800c372:	d402      	bmi.n	800c37a <_puts_r+0x4e>
 800c374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c376:	f000 f989 	bl	800c68c <__retarget_lock_release_recursive>
 800c37a:	4628      	mov	r0, r5
 800c37c:	bd70      	pop	{r4, r5, r6, pc}
 800c37e:	2b00      	cmp	r3, #0
 800c380:	da04      	bge.n	800c38c <_puts_r+0x60>
 800c382:	69a2      	ldr	r2, [r4, #24]
 800c384:	429a      	cmp	r2, r3
 800c386:	dc17      	bgt.n	800c3b8 <_puts_r+0x8c>
 800c388:	290a      	cmp	r1, #10
 800c38a:	d015      	beq.n	800c3b8 <_puts_r+0x8c>
 800c38c:	6823      	ldr	r3, [r4, #0]
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	6022      	str	r2, [r4, #0]
 800c392:	7019      	strb	r1, [r3, #0]
 800c394:	68a3      	ldr	r3, [r4, #8]
 800c396:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c39a:	3b01      	subs	r3, #1
 800c39c:	60a3      	str	r3, [r4, #8]
 800c39e:	2900      	cmp	r1, #0
 800c3a0:	d1ed      	bne.n	800c37e <_puts_r+0x52>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	da11      	bge.n	800c3ca <_puts_r+0x9e>
 800c3a6:	4622      	mov	r2, r4
 800c3a8:	210a      	movs	r1, #10
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	f000 f85f 	bl	800c46e <__swbuf_r>
 800c3b0:	3001      	adds	r0, #1
 800c3b2:	d0d7      	beq.n	800c364 <_puts_r+0x38>
 800c3b4:	250a      	movs	r5, #10
 800c3b6:	e7d7      	b.n	800c368 <_puts_r+0x3c>
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f000 f857 	bl	800c46e <__swbuf_r>
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	d1e7      	bne.n	800c394 <_puts_r+0x68>
 800c3c4:	e7ce      	b.n	800c364 <_puts_r+0x38>
 800c3c6:	3e01      	subs	r6, #1
 800c3c8:	e7e4      	b.n	800c394 <_puts_r+0x68>
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	6022      	str	r2, [r4, #0]
 800c3d0:	220a      	movs	r2, #10
 800c3d2:	701a      	strb	r2, [r3, #0]
 800c3d4:	e7ee      	b.n	800c3b4 <_puts_r+0x88>
	...

0800c3d8 <puts>:
 800c3d8:	4b02      	ldr	r3, [pc, #8]	@ (800c3e4 <puts+0xc>)
 800c3da:	4601      	mov	r1, r0
 800c3dc:	6818      	ldr	r0, [r3, #0]
 800c3de:	f7ff bfa5 	b.w	800c32c <_puts_r>
 800c3e2:	bf00      	nop
 800c3e4:	20000338 	.word	0x20000338

0800c3e8 <__sread>:
 800c3e8:	b510      	push	{r4, lr}
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f0:	f000 f8fc 	bl	800c5ec <_read_r>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	bfab      	itete	ge
 800c3f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c3fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c3fc:	181b      	addge	r3, r3, r0
 800c3fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c402:	bfac      	ite	ge
 800c404:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c406:	81a3      	strhlt	r3, [r4, #12]
 800c408:	bd10      	pop	{r4, pc}

0800c40a <__swrite>:
 800c40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40e:	461f      	mov	r7, r3
 800c410:	898b      	ldrh	r3, [r1, #12]
 800c412:	05db      	lsls	r3, r3, #23
 800c414:	4605      	mov	r5, r0
 800c416:	460c      	mov	r4, r1
 800c418:	4616      	mov	r6, r2
 800c41a:	d505      	bpl.n	800c428 <__swrite+0x1e>
 800c41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c420:	2302      	movs	r3, #2
 800c422:	2200      	movs	r2, #0
 800c424:	f000 f8d0 	bl	800c5c8 <_lseek_r>
 800c428:	89a3      	ldrh	r3, [r4, #12]
 800c42a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c42e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c432:	81a3      	strh	r3, [r4, #12]
 800c434:	4632      	mov	r2, r6
 800c436:	463b      	mov	r3, r7
 800c438:	4628      	mov	r0, r5
 800c43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c43e:	f000 b8e7 	b.w	800c610 <_write_r>

0800c442 <__sseek>:
 800c442:	b510      	push	{r4, lr}
 800c444:	460c      	mov	r4, r1
 800c446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44a:	f000 f8bd 	bl	800c5c8 <_lseek_r>
 800c44e:	1c43      	adds	r3, r0, #1
 800c450:	89a3      	ldrh	r3, [r4, #12]
 800c452:	bf15      	itete	ne
 800c454:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c456:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c45a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c45e:	81a3      	strheq	r3, [r4, #12]
 800c460:	bf18      	it	ne
 800c462:	81a3      	strhne	r3, [r4, #12]
 800c464:	bd10      	pop	{r4, pc}

0800c466 <__sclose>:
 800c466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c46a:	f000 b89d 	b.w	800c5a8 <_close_r>

0800c46e <__swbuf_r>:
 800c46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c470:	460e      	mov	r6, r1
 800c472:	4614      	mov	r4, r2
 800c474:	4605      	mov	r5, r0
 800c476:	b118      	cbz	r0, 800c480 <__swbuf_r+0x12>
 800c478:	6a03      	ldr	r3, [r0, #32]
 800c47a:	b90b      	cbnz	r3, 800c480 <__swbuf_r+0x12>
 800c47c:	f7ff ff0e 	bl	800c29c <__sinit>
 800c480:	69a3      	ldr	r3, [r4, #24]
 800c482:	60a3      	str	r3, [r4, #8]
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	071a      	lsls	r2, r3, #28
 800c488:	d501      	bpl.n	800c48e <__swbuf_r+0x20>
 800c48a:	6923      	ldr	r3, [r4, #16]
 800c48c:	b943      	cbnz	r3, 800c4a0 <__swbuf_r+0x32>
 800c48e:	4621      	mov	r1, r4
 800c490:	4628      	mov	r0, r5
 800c492:	f000 f82b 	bl	800c4ec <__swsetup_r>
 800c496:	b118      	cbz	r0, 800c4a0 <__swbuf_r+0x32>
 800c498:	f04f 37ff 	mov.w	r7, #4294967295
 800c49c:	4638      	mov	r0, r7
 800c49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	6922      	ldr	r2, [r4, #16]
 800c4a4:	1a98      	subs	r0, r3, r2
 800c4a6:	6963      	ldr	r3, [r4, #20]
 800c4a8:	b2f6      	uxtb	r6, r6
 800c4aa:	4283      	cmp	r3, r0
 800c4ac:	4637      	mov	r7, r6
 800c4ae:	dc05      	bgt.n	800c4bc <__swbuf_r+0x4e>
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f000 fd46 	bl	800cf44 <_fflush_r>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d1ed      	bne.n	800c498 <__swbuf_r+0x2a>
 800c4bc:	68a3      	ldr	r3, [r4, #8]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	60a3      	str	r3, [r4, #8]
 800c4c2:	6823      	ldr	r3, [r4, #0]
 800c4c4:	1c5a      	adds	r2, r3, #1
 800c4c6:	6022      	str	r2, [r4, #0]
 800c4c8:	701e      	strb	r6, [r3, #0]
 800c4ca:	6962      	ldr	r2, [r4, #20]
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d004      	beq.n	800c4dc <__swbuf_r+0x6e>
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	07db      	lsls	r3, r3, #31
 800c4d6:	d5e1      	bpl.n	800c49c <__swbuf_r+0x2e>
 800c4d8:	2e0a      	cmp	r6, #10
 800c4da:	d1df      	bne.n	800c49c <__swbuf_r+0x2e>
 800c4dc:	4621      	mov	r1, r4
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f000 fd30 	bl	800cf44 <_fflush_r>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d0d9      	beq.n	800c49c <__swbuf_r+0x2e>
 800c4e8:	e7d6      	b.n	800c498 <__swbuf_r+0x2a>
	...

0800c4ec <__swsetup_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4b29      	ldr	r3, [pc, #164]	@ (800c594 <__swsetup_r+0xa8>)
 800c4f0:	4605      	mov	r5, r0
 800c4f2:	6818      	ldr	r0, [r3, #0]
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	b118      	cbz	r0, 800c500 <__swsetup_r+0x14>
 800c4f8:	6a03      	ldr	r3, [r0, #32]
 800c4fa:	b90b      	cbnz	r3, 800c500 <__swsetup_r+0x14>
 800c4fc:	f7ff fece 	bl	800c29c <__sinit>
 800c500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c504:	0719      	lsls	r1, r3, #28
 800c506:	d422      	bmi.n	800c54e <__swsetup_r+0x62>
 800c508:	06da      	lsls	r2, r3, #27
 800c50a:	d407      	bmi.n	800c51c <__swsetup_r+0x30>
 800c50c:	2209      	movs	r2, #9
 800c50e:	602a      	str	r2, [r5, #0]
 800c510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c514:	81a3      	strh	r3, [r4, #12]
 800c516:	f04f 30ff 	mov.w	r0, #4294967295
 800c51a:	e033      	b.n	800c584 <__swsetup_r+0x98>
 800c51c:	0758      	lsls	r0, r3, #29
 800c51e:	d512      	bpl.n	800c546 <__swsetup_r+0x5a>
 800c520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c522:	b141      	cbz	r1, 800c536 <__swsetup_r+0x4a>
 800c524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c528:	4299      	cmp	r1, r3
 800c52a:	d002      	beq.n	800c532 <__swsetup_r+0x46>
 800c52c:	4628      	mov	r0, r5
 800c52e:	f000 f8bd 	bl	800c6ac <_free_r>
 800c532:	2300      	movs	r3, #0
 800c534:	6363      	str	r3, [r4, #52]	@ 0x34
 800c536:	89a3      	ldrh	r3, [r4, #12]
 800c538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c53c:	81a3      	strh	r3, [r4, #12]
 800c53e:	2300      	movs	r3, #0
 800c540:	6063      	str	r3, [r4, #4]
 800c542:	6923      	ldr	r3, [r4, #16]
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	89a3      	ldrh	r3, [r4, #12]
 800c548:	f043 0308 	orr.w	r3, r3, #8
 800c54c:	81a3      	strh	r3, [r4, #12]
 800c54e:	6923      	ldr	r3, [r4, #16]
 800c550:	b94b      	cbnz	r3, 800c566 <__swsetup_r+0x7a>
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c55c:	d003      	beq.n	800c566 <__swsetup_r+0x7a>
 800c55e:	4621      	mov	r1, r4
 800c560:	4628      	mov	r0, r5
 800c562:	f000 fd3d 	bl	800cfe0 <__smakebuf_r>
 800c566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c56a:	f013 0201 	ands.w	r2, r3, #1
 800c56e:	d00a      	beq.n	800c586 <__swsetup_r+0x9a>
 800c570:	2200      	movs	r2, #0
 800c572:	60a2      	str	r2, [r4, #8]
 800c574:	6962      	ldr	r2, [r4, #20]
 800c576:	4252      	negs	r2, r2
 800c578:	61a2      	str	r2, [r4, #24]
 800c57a:	6922      	ldr	r2, [r4, #16]
 800c57c:	b942      	cbnz	r2, 800c590 <__swsetup_r+0xa4>
 800c57e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c582:	d1c5      	bne.n	800c510 <__swsetup_r+0x24>
 800c584:	bd38      	pop	{r3, r4, r5, pc}
 800c586:	0799      	lsls	r1, r3, #30
 800c588:	bf58      	it	pl
 800c58a:	6962      	ldrpl	r2, [r4, #20]
 800c58c:	60a2      	str	r2, [r4, #8]
 800c58e:	e7f4      	b.n	800c57a <__swsetup_r+0x8e>
 800c590:	2000      	movs	r0, #0
 800c592:	e7f7      	b.n	800c584 <__swsetup_r+0x98>
 800c594:	20000338 	.word	0x20000338

0800c598 <memset>:
 800c598:	4402      	add	r2, r0
 800c59a:	4603      	mov	r3, r0
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d100      	bne.n	800c5a2 <memset+0xa>
 800c5a0:	4770      	bx	lr
 800c5a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c5a6:	e7f9      	b.n	800c59c <memset+0x4>

0800c5a8 <_close_r>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	4d06      	ldr	r5, [pc, #24]	@ (800c5c4 <_close_r+0x1c>)
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	4608      	mov	r0, r1
 800c5b2:	602b      	str	r3, [r5, #0]
 800c5b4:	f7f5 fc1d 	bl	8001df2 <_close>
 800c5b8:	1c43      	adds	r3, r0, #1
 800c5ba:	d102      	bne.n	800c5c2 <_close_r+0x1a>
 800c5bc:	682b      	ldr	r3, [r5, #0]
 800c5be:	b103      	cbz	r3, 800c5c2 <_close_r+0x1a>
 800c5c0:	6023      	str	r3, [r4, #0]
 800c5c2:	bd38      	pop	{r3, r4, r5, pc}
 800c5c4:	20000f84 	.word	0x20000f84

0800c5c8 <_lseek_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d07      	ldr	r5, [pc, #28]	@ (800c5e8 <_lseek_r+0x20>)
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	4608      	mov	r0, r1
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	602a      	str	r2, [r5, #0]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	f7f5 fc32 	bl	8001e40 <_lseek>
 800c5dc:	1c43      	adds	r3, r0, #1
 800c5de:	d102      	bne.n	800c5e6 <_lseek_r+0x1e>
 800c5e0:	682b      	ldr	r3, [r5, #0]
 800c5e2:	b103      	cbz	r3, 800c5e6 <_lseek_r+0x1e>
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	bd38      	pop	{r3, r4, r5, pc}
 800c5e8:	20000f84 	.word	0x20000f84

0800c5ec <_read_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4d07      	ldr	r5, [pc, #28]	@ (800c60c <_read_r+0x20>)
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	4608      	mov	r0, r1
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	602a      	str	r2, [r5, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f7f5 fbdc 	bl	8001db8 <_read>
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d102      	bne.n	800c60a <_read_r+0x1e>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	b103      	cbz	r3, 800c60a <_read_r+0x1e>
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	20000f84 	.word	0x20000f84

0800c610 <_write_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4d07      	ldr	r5, [pc, #28]	@ (800c630 <_write_r+0x20>)
 800c614:	4604      	mov	r4, r0
 800c616:	4608      	mov	r0, r1
 800c618:	4611      	mov	r1, r2
 800c61a:	2200      	movs	r2, #0
 800c61c:	602a      	str	r2, [r5, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	f7f5 fdba 	bl	8002198 <_write>
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	d102      	bne.n	800c62e <_write_r+0x1e>
 800c628:	682b      	ldr	r3, [r5, #0]
 800c62a:	b103      	cbz	r3, 800c62e <_write_r+0x1e>
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	bd38      	pop	{r3, r4, r5, pc}
 800c630:	20000f84 	.word	0x20000f84

0800c634 <__errno>:
 800c634:	4b01      	ldr	r3, [pc, #4]	@ (800c63c <__errno+0x8>)
 800c636:	6818      	ldr	r0, [r3, #0]
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	20000338 	.word	0x20000338

0800c640 <__libc_init_array>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	4d0d      	ldr	r5, [pc, #52]	@ (800c678 <__libc_init_array+0x38>)
 800c644:	4c0d      	ldr	r4, [pc, #52]	@ (800c67c <__libc_init_array+0x3c>)
 800c646:	1b64      	subs	r4, r4, r5
 800c648:	10a4      	asrs	r4, r4, #2
 800c64a:	2600      	movs	r6, #0
 800c64c:	42a6      	cmp	r6, r4
 800c64e:	d109      	bne.n	800c664 <__libc_init_array+0x24>
 800c650:	4d0b      	ldr	r5, [pc, #44]	@ (800c680 <__libc_init_array+0x40>)
 800c652:	4c0c      	ldr	r4, [pc, #48]	@ (800c684 <__libc_init_array+0x44>)
 800c654:	f000 fd32 	bl	800d0bc <_init>
 800c658:	1b64      	subs	r4, r4, r5
 800c65a:	10a4      	asrs	r4, r4, #2
 800c65c:	2600      	movs	r6, #0
 800c65e:	42a6      	cmp	r6, r4
 800c660:	d105      	bne.n	800c66e <__libc_init_array+0x2e>
 800c662:	bd70      	pop	{r4, r5, r6, pc}
 800c664:	f855 3b04 	ldr.w	r3, [r5], #4
 800c668:	4798      	blx	r3
 800c66a:	3601      	adds	r6, #1
 800c66c:	e7ee      	b.n	800c64c <__libc_init_array+0xc>
 800c66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c672:	4798      	blx	r3
 800c674:	3601      	adds	r6, #1
 800c676:	e7f2      	b.n	800c65e <__libc_init_array+0x1e>
 800c678:	0800d3cc 	.word	0x0800d3cc
 800c67c:	0800d3cc 	.word	0x0800d3cc
 800c680:	0800d3cc 	.word	0x0800d3cc
 800c684:	0800d3d0 	.word	0x0800d3d0

0800c688 <__retarget_lock_init_recursive>:
 800c688:	4770      	bx	lr

0800c68a <__retarget_lock_acquire_recursive>:
 800c68a:	4770      	bx	lr

0800c68c <__retarget_lock_release_recursive>:
 800c68c:	4770      	bx	lr

0800c68e <memcpy>:
 800c68e:	440a      	add	r2, r1
 800c690:	4291      	cmp	r1, r2
 800c692:	f100 33ff 	add.w	r3, r0, #4294967295
 800c696:	d100      	bne.n	800c69a <memcpy+0xc>
 800c698:	4770      	bx	lr
 800c69a:	b510      	push	{r4, lr}
 800c69c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6a4:	4291      	cmp	r1, r2
 800c6a6:	d1f9      	bne.n	800c69c <memcpy+0xe>
 800c6a8:	bd10      	pop	{r4, pc}
	...

0800c6ac <_free_r>:
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	2900      	cmp	r1, #0
 800c6b2:	d041      	beq.n	800c738 <_free_r+0x8c>
 800c6b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6b8:	1f0c      	subs	r4, r1, #4
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	bfb8      	it	lt
 800c6be:	18e4      	addlt	r4, r4, r3
 800c6c0:	f000 f8e0 	bl	800c884 <__malloc_lock>
 800c6c4:	4a1d      	ldr	r2, [pc, #116]	@ (800c73c <_free_r+0x90>)
 800c6c6:	6813      	ldr	r3, [r2, #0]
 800c6c8:	b933      	cbnz	r3, 800c6d8 <_free_r+0x2c>
 800c6ca:	6063      	str	r3, [r4, #4]
 800c6cc:	6014      	str	r4, [r2, #0]
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6d4:	f000 b8dc 	b.w	800c890 <__malloc_unlock>
 800c6d8:	42a3      	cmp	r3, r4
 800c6da:	d908      	bls.n	800c6ee <_free_r+0x42>
 800c6dc:	6820      	ldr	r0, [r4, #0]
 800c6de:	1821      	adds	r1, r4, r0
 800c6e0:	428b      	cmp	r3, r1
 800c6e2:	bf01      	itttt	eq
 800c6e4:	6819      	ldreq	r1, [r3, #0]
 800c6e6:	685b      	ldreq	r3, [r3, #4]
 800c6e8:	1809      	addeq	r1, r1, r0
 800c6ea:	6021      	streq	r1, [r4, #0]
 800c6ec:	e7ed      	b.n	800c6ca <_free_r+0x1e>
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	b10b      	cbz	r3, 800c6f8 <_free_r+0x4c>
 800c6f4:	42a3      	cmp	r3, r4
 800c6f6:	d9fa      	bls.n	800c6ee <_free_r+0x42>
 800c6f8:	6811      	ldr	r1, [r2, #0]
 800c6fa:	1850      	adds	r0, r2, r1
 800c6fc:	42a0      	cmp	r0, r4
 800c6fe:	d10b      	bne.n	800c718 <_free_r+0x6c>
 800c700:	6820      	ldr	r0, [r4, #0]
 800c702:	4401      	add	r1, r0
 800c704:	1850      	adds	r0, r2, r1
 800c706:	4283      	cmp	r3, r0
 800c708:	6011      	str	r1, [r2, #0]
 800c70a:	d1e0      	bne.n	800c6ce <_free_r+0x22>
 800c70c:	6818      	ldr	r0, [r3, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	6053      	str	r3, [r2, #4]
 800c712:	4408      	add	r0, r1
 800c714:	6010      	str	r0, [r2, #0]
 800c716:	e7da      	b.n	800c6ce <_free_r+0x22>
 800c718:	d902      	bls.n	800c720 <_free_r+0x74>
 800c71a:	230c      	movs	r3, #12
 800c71c:	602b      	str	r3, [r5, #0]
 800c71e:	e7d6      	b.n	800c6ce <_free_r+0x22>
 800c720:	6820      	ldr	r0, [r4, #0]
 800c722:	1821      	adds	r1, r4, r0
 800c724:	428b      	cmp	r3, r1
 800c726:	bf04      	itt	eq
 800c728:	6819      	ldreq	r1, [r3, #0]
 800c72a:	685b      	ldreq	r3, [r3, #4]
 800c72c:	6063      	str	r3, [r4, #4]
 800c72e:	bf04      	itt	eq
 800c730:	1809      	addeq	r1, r1, r0
 800c732:	6021      	streq	r1, [r4, #0]
 800c734:	6054      	str	r4, [r2, #4]
 800c736:	e7ca      	b.n	800c6ce <_free_r+0x22>
 800c738:	bd38      	pop	{r3, r4, r5, pc}
 800c73a:	bf00      	nop
 800c73c:	20000f90 	.word	0x20000f90

0800c740 <sbrk_aligned>:
 800c740:	b570      	push	{r4, r5, r6, lr}
 800c742:	4e0f      	ldr	r6, [pc, #60]	@ (800c780 <sbrk_aligned+0x40>)
 800c744:	460c      	mov	r4, r1
 800c746:	6831      	ldr	r1, [r6, #0]
 800c748:	4605      	mov	r5, r0
 800c74a:	b911      	cbnz	r1, 800c752 <sbrk_aligned+0x12>
 800c74c:	f000 fca6 	bl	800d09c <_sbrk_r>
 800c750:	6030      	str	r0, [r6, #0]
 800c752:	4621      	mov	r1, r4
 800c754:	4628      	mov	r0, r5
 800c756:	f000 fca1 	bl	800d09c <_sbrk_r>
 800c75a:	1c43      	adds	r3, r0, #1
 800c75c:	d103      	bne.n	800c766 <sbrk_aligned+0x26>
 800c75e:	f04f 34ff 	mov.w	r4, #4294967295
 800c762:	4620      	mov	r0, r4
 800c764:	bd70      	pop	{r4, r5, r6, pc}
 800c766:	1cc4      	adds	r4, r0, #3
 800c768:	f024 0403 	bic.w	r4, r4, #3
 800c76c:	42a0      	cmp	r0, r4
 800c76e:	d0f8      	beq.n	800c762 <sbrk_aligned+0x22>
 800c770:	1a21      	subs	r1, r4, r0
 800c772:	4628      	mov	r0, r5
 800c774:	f000 fc92 	bl	800d09c <_sbrk_r>
 800c778:	3001      	adds	r0, #1
 800c77a:	d1f2      	bne.n	800c762 <sbrk_aligned+0x22>
 800c77c:	e7ef      	b.n	800c75e <sbrk_aligned+0x1e>
 800c77e:	bf00      	nop
 800c780:	20000f8c 	.word	0x20000f8c

0800c784 <_malloc_r>:
 800c784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c788:	1ccd      	adds	r5, r1, #3
 800c78a:	f025 0503 	bic.w	r5, r5, #3
 800c78e:	3508      	adds	r5, #8
 800c790:	2d0c      	cmp	r5, #12
 800c792:	bf38      	it	cc
 800c794:	250c      	movcc	r5, #12
 800c796:	2d00      	cmp	r5, #0
 800c798:	4606      	mov	r6, r0
 800c79a:	db01      	blt.n	800c7a0 <_malloc_r+0x1c>
 800c79c:	42a9      	cmp	r1, r5
 800c79e:	d904      	bls.n	800c7aa <_malloc_r+0x26>
 800c7a0:	230c      	movs	r3, #12
 800c7a2:	6033      	str	r3, [r6, #0]
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c880 <_malloc_r+0xfc>
 800c7ae:	f000 f869 	bl	800c884 <__malloc_lock>
 800c7b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c7b6:	461c      	mov	r4, r3
 800c7b8:	bb44      	cbnz	r4, 800c80c <_malloc_r+0x88>
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7ff ffbf 	bl	800c740 <sbrk_aligned>
 800c7c2:	1c43      	adds	r3, r0, #1
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	d158      	bne.n	800c87a <_malloc_r+0xf6>
 800c7c8:	f8d8 4000 	ldr.w	r4, [r8]
 800c7cc:	4627      	mov	r7, r4
 800c7ce:	2f00      	cmp	r7, #0
 800c7d0:	d143      	bne.n	800c85a <_malloc_r+0xd6>
 800c7d2:	2c00      	cmp	r4, #0
 800c7d4:	d04b      	beq.n	800c86e <_malloc_r+0xea>
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	4639      	mov	r1, r7
 800c7da:	4630      	mov	r0, r6
 800c7dc:	eb04 0903 	add.w	r9, r4, r3
 800c7e0:	f000 fc5c 	bl	800d09c <_sbrk_r>
 800c7e4:	4581      	cmp	r9, r0
 800c7e6:	d142      	bne.n	800c86e <_malloc_r+0xea>
 800c7e8:	6821      	ldr	r1, [r4, #0]
 800c7ea:	1a6d      	subs	r5, r5, r1
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f7ff ffa6 	bl	800c740 <sbrk_aligned>
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	d03a      	beq.n	800c86e <_malloc_r+0xea>
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	442b      	add	r3, r5
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	f8d8 3000 	ldr.w	r3, [r8]
 800c802:	685a      	ldr	r2, [r3, #4]
 800c804:	bb62      	cbnz	r2, 800c860 <_malloc_r+0xdc>
 800c806:	f8c8 7000 	str.w	r7, [r8]
 800c80a:	e00f      	b.n	800c82c <_malloc_r+0xa8>
 800c80c:	6822      	ldr	r2, [r4, #0]
 800c80e:	1b52      	subs	r2, r2, r5
 800c810:	d420      	bmi.n	800c854 <_malloc_r+0xd0>
 800c812:	2a0b      	cmp	r2, #11
 800c814:	d917      	bls.n	800c846 <_malloc_r+0xc2>
 800c816:	1961      	adds	r1, r4, r5
 800c818:	42a3      	cmp	r3, r4
 800c81a:	6025      	str	r5, [r4, #0]
 800c81c:	bf18      	it	ne
 800c81e:	6059      	strne	r1, [r3, #4]
 800c820:	6863      	ldr	r3, [r4, #4]
 800c822:	bf08      	it	eq
 800c824:	f8c8 1000 	streq.w	r1, [r8]
 800c828:	5162      	str	r2, [r4, r5]
 800c82a:	604b      	str	r3, [r1, #4]
 800c82c:	4630      	mov	r0, r6
 800c82e:	f000 f82f 	bl	800c890 <__malloc_unlock>
 800c832:	f104 000b 	add.w	r0, r4, #11
 800c836:	1d23      	adds	r3, r4, #4
 800c838:	f020 0007 	bic.w	r0, r0, #7
 800c83c:	1ac2      	subs	r2, r0, r3
 800c83e:	bf1c      	itt	ne
 800c840:	1a1b      	subne	r3, r3, r0
 800c842:	50a3      	strne	r3, [r4, r2]
 800c844:	e7af      	b.n	800c7a6 <_malloc_r+0x22>
 800c846:	6862      	ldr	r2, [r4, #4]
 800c848:	42a3      	cmp	r3, r4
 800c84a:	bf0c      	ite	eq
 800c84c:	f8c8 2000 	streq.w	r2, [r8]
 800c850:	605a      	strne	r2, [r3, #4]
 800c852:	e7eb      	b.n	800c82c <_malloc_r+0xa8>
 800c854:	4623      	mov	r3, r4
 800c856:	6864      	ldr	r4, [r4, #4]
 800c858:	e7ae      	b.n	800c7b8 <_malloc_r+0x34>
 800c85a:	463c      	mov	r4, r7
 800c85c:	687f      	ldr	r7, [r7, #4]
 800c85e:	e7b6      	b.n	800c7ce <_malloc_r+0x4a>
 800c860:	461a      	mov	r2, r3
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	42a3      	cmp	r3, r4
 800c866:	d1fb      	bne.n	800c860 <_malloc_r+0xdc>
 800c868:	2300      	movs	r3, #0
 800c86a:	6053      	str	r3, [r2, #4]
 800c86c:	e7de      	b.n	800c82c <_malloc_r+0xa8>
 800c86e:	230c      	movs	r3, #12
 800c870:	6033      	str	r3, [r6, #0]
 800c872:	4630      	mov	r0, r6
 800c874:	f000 f80c 	bl	800c890 <__malloc_unlock>
 800c878:	e794      	b.n	800c7a4 <_malloc_r+0x20>
 800c87a:	6005      	str	r5, [r0, #0]
 800c87c:	e7d6      	b.n	800c82c <_malloc_r+0xa8>
 800c87e:	bf00      	nop
 800c880:	20000f90 	.word	0x20000f90

0800c884 <__malloc_lock>:
 800c884:	4801      	ldr	r0, [pc, #4]	@ (800c88c <__malloc_lock+0x8>)
 800c886:	f7ff bf00 	b.w	800c68a <__retarget_lock_acquire_recursive>
 800c88a:	bf00      	nop
 800c88c:	20000f88 	.word	0x20000f88

0800c890 <__malloc_unlock>:
 800c890:	4801      	ldr	r0, [pc, #4]	@ (800c898 <__malloc_unlock+0x8>)
 800c892:	f7ff befb 	b.w	800c68c <__retarget_lock_release_recursive>
 800c896:	bf00      	nop
 800c898:	20000f88 	.word	0x20000f88

0800c89c <__sfputc_r>:
 800c89c:	6893      	ldr	r3, [r2, #8]
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	b410      	push	{r4}
 800c8a4:	6093      	str	r3, [r2, #8]
 800c8a6:	da08      	bge.n	800c8ba <__sfputc_r+0x1e>
 800c8a8:	6994      	ldr	r4, [r2, #24]
 800c8aa:	42a3      	cmp	r3, r4
 800c8ac:	db01      	blt.n	800c8b2 <__sfputc_r+0x16>
 800c8ae:	290a      	cmp	r1, #10
 800c8b0:	d103      	bne.n	800c8ba <__sfputc_r+0x1e>
 800c8b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8b6:	f7ff bdda 	b.w	800c46e <__swbuf_r>
 800c8ba:	6813      	ldr	r3, [r2, #0]
 800c8bc:	1c58      	adds	r0, r3, #1
 800c8be:	6010      	str	r0, [r2, #0]
 800c8c0:	7019      	strb	r1, [r3, #0]
 800c8c2:	4608      	mov	r0, r1
 800c8c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <__sfputs_r>:
 800c8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	460f      	mov	r7, r1
 800c8d0:	4614      	mov	r4, r2
 800c8d2:	18d5      	adds	r5, r2, r3
 800c8d4:	42ac      	cmp	r4, r5
 800c8d6:	d101      	bne.n	800c8dc <__sfputs_r+0x12>
 800c8d8:	2000      	movs	r0, #0
 800c8da:	e007      	b.n	800c8ec <__sfputs_r+0x22>
 800c8dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e0:	463a      	mov	r2, r7
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f7ff ffda 	bl	800c89c <__sfputc_r>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d1f3      	bne.n	800c8d4 <__sfputs_r+0xa>
 800c8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8f0 <_vfiprintf_r>:
 800c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	460d      	mov	r5, r1
 800c8f6:	b09d      	sub	sp, #116	@ 0x74
 800c8f8:	4614      	mov	r4, r2
 800c8fa:	4698      	mov	r8, r3
 800c8fc:	4606      	mov	r6, r0
 800c8fe:	b118      	cbz	r0, 800c908 <_vfiprintf_r+0x18>
 800c900:	6a03      	ldr	r3, [r0, #32]
 800c902:	b90b      	cbnz	r3, 800c908 <_vfiprintf_r+0x18>
 800c904:	f7ff fcca 	bl	800c29c <__sinit>
 800c908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c90a:	07d9      	lsls	r1, r3, #31
 800c90c:	d405      	bmi.n	800c91a <_vfiprintf_r+0x2a>
 800c90e:	89ab      	ldrh	r3, [r5, #12]
 800c910:	059a      	lsls	r2, r3, #22
 800c912:	d402      	bmi.n	800c91a <_vfiprintf_r+0x2a>
 800c914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c916:	f7ff feb8 	bl	800c68a <__retarget_lock_acquire_recursive>
 800c91a:	89ab      	ldrh	r3, [r5, #12]
 800c91c:	071b      	lsls	r3, r3, #28
 800c91e:	d501      	bpl.n	800c924 <_vfiprintf_r+0x34>
 800c920:	692b      	ldr	r3, [r5, #16]
 800c922:	b99b      	cbnz	r3, 800c94c <_vfiprintf_r+0x5c>
 800c924:	4629      	mov	r1, r5
 800c926:	4630      	mov	r0, r6
 800c928:	f7ff fde0 	bl	800c4ec <__swsetup_r>
 800c92c:	b170      	cbz	r0, 800c94c <_vfiprintf_r+0x5c>
 800c92e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c930:	07dc      	lsls	r4, r3, #31
 800c932:	d504      	bpl.n	800c93e <_vfiprintf_r+0x4e>
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	b01d      	add	sp, #116	@ 0x74
 800c93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93e:	89ab      	ldrh	r3, [r5, #12]
 800c940:	0598      	lsls	r0, r3, #22
 800c942:	d4f7      	bmi.n	800c934 <_vfiprintf_r+0x44>
 800c944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c946:	f7ff fea1 	bl	800c68c <__retarget_lock_release_recursive>
 800c94a:	e7f3      	b.n	800c934 <_vfiprintf_r+0x44>
 800c94c:	2300      	movs	r3, #0
 800c94e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c950:	2320      	movs	r3, #32
 800c952:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c956:	f8cd 800c 	str.w	r8, [sp, #12]
 800c95a:	2330      	movs	r3, #48	@ 0x30
 800c95c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb0c <_vfiprintf_r+0x21c>
 800c960:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c964:	f04f 0901 	mov.w	r9, #1
 800c968:	4623      	mov	r3, r4
 800c96a:	469a      	mov	sl, r3
 800c96c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c970:	b10a      	cbz	r2, 800c976 <_vfiprintf_r+0x86>
 800c972:	2a25      	cmp	r2, #37	@ 0x25
 800c974:	d1f9      	bne.n	800c96a <_vfiprintf_r+0x7a>
 800c976:	ebba 0b04 	subs.w	fp, sl, r4
 800c97a:	d00b      	beq.n	800c994 <_vfiprintf_r+0xa4>
 800c97c:	465b      	mov	r3, fp
 800c97e:	4622      	mov	r2, r4
 800c980:	4629      	mov	r1, r5
 800c982:	4630      	mov	r0, r6
 800c984:	f7ff ffa1 	bl	800c8ca <__sfputs_r>
 800c988:	3001      	adds	r0, #1
 800c98a:	f000 80a7 	beq.w	800cadc <_vfiprintf_r+0x1ec>
 800c98e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c990:	445a      	add	r2, fp
 800c992:	9209      	str	r2, [sp, #36]	@ 0x24
 800c994:	f89a 3000 	ldrb.w	r3, [sl]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 809f 	beq.w	800cadc <_vfiprintf_r+0x1ec>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9a8:	f10a 0a01 	add.w	sl, sl, #1
 800c9ac:	9304      	str	r3, [sp, #16]
 800c9ae:	9307      	str	r3, [sp, #28]
 800c9b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9b6:	4654      	mov	r4, sl
 800c9b8:	2205      	movs	r2, #5
 800c9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9be:	4853      	ldr	r0, [pc, #332]	@ (800cb0c <_vfiprintf_r+0x21c>)
 800c9c0:	f7f3 fc2e 	bl	8000220 <memchr>
 800c9c4:	9a04      	ldr	r2, [sp, #16]
 800c9c6:	b9d8      	cbnz	r0, 800ca00 <_vfiprintf_r+0x110>
 800c9c8:	06d1      	lsls	r1, r2, #27
 800c9ca:	bf44      	itt	mi
 800c9cc:	2320      	movmi	r3, #32
 800c9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9d2:	0713      	lsls	r3, r2, #28
 800c9d4:	bf44      	itt	mi
 800c9d6:	232b      	movmi	r3, #43	@ 0x2b
 800c9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9e2:	d015      	beq.n	800ca10 <_vfiprintf_r+0x120>
 800c9e4:	9a07      	ldr	r2, [sp, #28]
 800c9e6:	4654      	mov	r4, sl
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	f04f 0c0a 	mov.w	ip, #10
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9f4:	3b30      	subs	r3, #48	@ 0x30
 800c9f6:	2b09      	cmp	r3, #9
 800c9f8:	d94b      	bls.n	800ca92 <_vfiprintf_r+0x1a2>
 800c9fa:	b1b0      	cbz	r0, 800ca2a <_vfiprintf_r+0x13a>
 800c9fc:	9207      	str	r2, [sp, #28]
 800c9fe:	e014      	b.n	800ca2a <_vfiprintf_r+0x13a>
 800ca00:	eba0 0308 	sub.w	r3, r0, r8
 800ca04:	fa09 f303 	lsl.w	r3, r9, r3
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	9304      	str	r3, [sp, #16]
 800ca0c:	46a2      	mov	sl, r4
 800ca0e:	e7d2      	b.n	800c9b6 <_vfiprintf_r+0xc6>
 800ca10:	9b03      	ldr	r3, [sp, #12]
 800ca12:	1d19      	adds	r1, r3, #4
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	9103      	str	r1, [sp, #12]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	bfbb      	ittet	lt
 800ca1c:	425b      	neglt	r3, r3
 800ca1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca22:	9307      	strge	r3, [sp, #28]
 800ca24:	9307      	strlt	r3, [sp, #28]
 800ca26:	bfb8      	it	lt
 800ca28:	9204      	strlt	r2, [sp, #16]
 800ca2a:	7823      	ldrb	r3, [r4, #0]
 800ca2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca2e:	d10a      	bne.n	800ca46 <_vfiprintf_r+0x156>
 800ca30:	7863      	ldrb	r3, [r4, #1]
 800ca32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca34:	d132      	bne.n	800ca9c <_vfiprintf_r+0x1ac>
 800ca36:	9b03      	ldr	r3, [sp, #12]
 800ca38:	1d1a      	adds	r2, r3, #4
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	9203      	str	r2, [sp, #12]
 800ca3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca42:	3402      	adds	r4, #2
 800ca44:	9305      	str	r3, [sp, #20]
 800ca46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb1c <_vfiprintf_r+0x22c>
 800ca4a:	7821      	ldrb	r1, [r4, #0]
 800ca4c:	2203      	movs	r2, #3
 800ca4e:	4650      	mov	r0, sl
 800ca50:	f7f3 fbe6 	bl	8000220 <memchr>
 800ca54:	b138      	cbz	r0, 800ca66 <_vfiprintf_r+0x176>
 800ca56:	9b04      	ldr	r3, [sp, #16]
 800ca58:	eba0 000a 	sub.w	r0, r0, sl
 800ca5c:	2240      	movs	r2, #64	@ 0x40
 800ca5e:	4082      	lsls	r2, r0
 800ca60:	4313      	orrs	r3, r2
 800ca62:	3401      	adds	r4, #1
 800ca64:	9304      	str	r3, [sp, #16]
 800ca66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca6a:	4829      	ldr	r0, [pc, #164]	@ (800cb10 <_vfiprintf_r+0x220>)
 800ca6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca70:	2206      	movs	r2, #6
 800ca72:	f7f3 fbd5 	bl	8000220 <memchr>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d03f      	beq.n	800cafa <_vfiprintf_r+0x20a>
 800ca7a:	4b26      	ldr	r3, [pc, #152]	@ (800cb14 <_vfiprintf_r+0x224>)
 800ca7c:	bb1b      	cbnz	r3, 800cac6 <_vfiprintf_r+0x1d6>
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	3307      	adds	r3, #7
 800ca82:	f023 0307 	bic.w	r3, r3, #7
 800ca86:	3308      	adds	r3, #8
 800ca88:	9303      	str	r3, [sp, #12]
 800ca8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca8c:	443b      	add	r3, r7
 800ca8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca90:	e76a      	b.n	800c968 <_vfiprintf_r+0x78>
 800ca92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca96:	460c      	mov	r4, r1
 800ca98:	2001      	movs	r0, #1
 800ca9a:	e7a8      	b.n	800c9ee <_vfiprintf_r+0xfe>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	3401      	adds	r4, #1
 800caa0:	9305      	str	r3, [sp, #20]
 800caa2:	4619      	mov	r1, r3
 800caa4:	f04f 0c0a 	mov.w	ip, #10
 800caa8:	4620      	mov	r0, r4
 800caaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caae:	3a30      	subs	r2, #48	@ 0x30
 800cab0:	2a09      	cmp	r2, #9
 800cab2:	d903      	bls.n	800cabc <_vfiprintf_r+0x1cc>
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d0c6      	beq.n	800ca46 <_vfiprintf_r+0x156>
 800cab8:	9105      	str	r1, [sp, #20]
 800caba:	e7c4      	b.n	800ca46 <_vfiprintf_r+0x156>
 800cabc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cac0:	4604      	mov	r4, r0
 800cac2:	2301      	movs	r3, #1
 800cac4:	e7f0      	b.n	800caa8 <_vfiprintf_r+0x1b8>
 800cac6:	ab03      	add	r3, sp, #12
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	462a      	mov	r2, r5
 800cacc:	4b12      	ldr	r3, [pc, #72]	@ (800cb18 <_vfiprintf_r+0x228>)
 800cace:	a904      	add	r1, sp, #16
 800cad0:	4630      	mov	r0, r6
 800cad2:	f3af 8000 	nop.w
 800cad6:	4607      	mov	r7, r0
 800cad8:	1c78      	adds	r0, r7, #1
 800cada:	d1d6      	bne.n	800ca8a <_vfiprintf_r+0x19a>
 800cadc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cade:	07d9      	lsls	r1, r3, #31
 800cae0:	d405      	bmi.n	800caee <_vfiprintf_r+0x1fe>
 800cae2:	89ab      	ldrh	r3, [r5, #12]
 800cae4:	059a      	lsls	r2, r3, #22
 800cae6:	d402      	bmi.n	800caee <_vfiprintf_r+0x1fe>
 800cae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800caea:	f7ff fdcf 	bl	800c68c <__retarget_lock_release_recursive>
 800caee:	89ab      	ldrh	r3, [r5, #12]
 800caf0:	065b      	lsls	r3, r3, #25
 800caf2:	f53f af1f 	bmi.w	800c934 <_vfiprintf_r+0x44>
 800caf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800caf8:	e71e      	b.n	800c938 <_vfiprintf_r+0x48>
 800cafa:	ab03      	add	r3, sp, #12
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	462a      	mov	r2, r5
 800cb00:	4b05      	ldr	r3, [pc, #20]	@ (800cb18 <_vfiprintf_r+0x228>)
 800cb02:	a904      	add	r1, sp, #16
 800cb04:	4630      	mov	r0, r6
 800cb06:	f000 f879 	bl	800cbfc <_printf_i>
 800cb0a:	e7e4      	b.n	800cad6 <_vfiprintf_r+0x1e6>
 800cb0c:	0800d390 	.word	0x0800d390
 800cb10:	0800d39a 	.word	0x0800d39a
 800cb14:	00000000 	.word	0x00000000
 800cb18:	0800c8cb 	.word	0x0800c8cb
 800cb1c:	0800d396 	.word	0x0800d396

0800cb20 <_printf_common>:
 800cb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb24:	4616      	mov	r6, r2
 800cb26:	4698      	mov	r8, r3
 800cb28:	688a      	ldr	r2, [r1, #8]
 800cb2a:	690b      	ldr	r3, [r1, #16]
 800cb2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb30:	4293      	cmp	r3, r2
 800cb32:	bfb8      	it	lt
 800cb34:	4613      	movlt	r3, r2
 800cb36:	6033      	str	r3, [r6, #0]
 800cb38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb3c:	4607      	mov	r7, r0
 800cb3e:	460c      	mov	r4, r1
 800cb40:	b10a      	cbz	r2, 800cb46 <_printf_common+0x26>
 800cb42:	3301      	adds	r3, #1
 800cb44:	6033      	str	r3, [r6, #0]
 800cb46:	6823      	ldr	r3, [r4, #0]
 800cb48:	0699      	lsls	r1, r3, #26
 800cb4a:	bf42      	ittt	mi
 800cb4c:	6833      	ldrmi	r3, [r6, #0]
 800cb4e:	3302      	addmi	r3, #2
 800cb50:	6033      	strmi	r3, [r6, #0]
 800cb52:	6825      	ldr	r5, [r4, #0]
 800cb54:	f015 0506 	ands.w	r5, r5, #6
 800cb58:	d106      	bne.n	800cb68 <_printf_common+0x48>
 800cb5a:	f104 0a19 	add.w	sl, r4, #25
 800cb5e:	68e3      	ldr	r3, [r4, #12]
 800cb60:	6832      	ldr	r2, [r6, #0]
 800cb62:	1a9b      	subs	r3, r3, r2
 800cb64:	42ab      	cmp	r3, r5
 800cb66:	dc26      	bgt.n	800cbb6 <_printf_common+0x96>
 800cb68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb6c:	6822      	ldr	r2, [r4, #0]
 800cb6e:	3b00      	subs	r3, #0
 800cb70:	bf18      	it	ne
 800cb72:	2301      	movne	r3, #1
 800cb74:	0692      	lsls	r2, r2, #26
 800cb76:	d42b      	bmi.n	800cbd0 <_printf_common+0xb0>
 800cb78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb7c:	4641      	mov	r1, r8
 800cb7e:	4638      	mov	r0, r7
 800cb80:	47c8      	blx	r9
 800cb82:	3001      	adds	r0, #1
 800cb84:	d01e      	beq.n	800cbc4 <_printf_common+0xa4>
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	6922      	ldr	r2, [r4, #16]
 800cb8a:	f003 0306 	and.w	r3, r3, #6
 800cb8e:	2b04      	cmp	r3, #4
 800cb90:	bf02      	ittt	eq
 800cb92:	68e5      	ldreq	r5, [r4, #12]
 800cb94:	6833      	ldreq	r3, [r6, #0]
 800cb96:	1aed      	subeq	r5, r5, r3
 800cb98:	68a3      	ldr	r3, [r4, #8]
 800cb9a:	bf0c      	ite	eq
 800cb9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cba0:	2500      	movne	r5, #0
 800cba2:	4293      	cmp	r3, r2
 800cba4:	bfc4      	itt	gt
 800cba6:	1a9b      	subgt	r3, r3, r2
 800cba8:	18ed      	addgt	r5, r5, r3
 800cbaa:	2600      	movs	r6, #0
 800cbac:	341a      	adds	r4, #26
 800cbae:	42b5      	cmp	r5, r6
 800cbb0:	d11a      	bne.n	800cbe8 <_printf_common+0xc8>
 800cbb2:	2000      	movs	r0, #0
 800cbb4:	e008      	b.n	800cbc8 <_printf_common+0xa8>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	4652      	mov	r2, sl
 800cbba:	4641      	mov	r1, r8
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	47c8      	blx	r9
 800cbc0:	3001      	adds	r0, #1
 800cbc2:	d103      	bne.n	800cbcc <_printf_common+0xac>
 800cbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbcc:	3501      	adds	r5, #1
 800cbce:	e7c6      	b.n	800cb5e <_printf_common+0x3e>
 800cbd0:	18e1      	adds	r1, r4, r3
 800cbd2:	1c5a      	adds	r2, r3, #1
 800cbd4:	2030      	movs	r0, #48	@ 0x30
 800cbd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbda:	4422      	add	r2, r4
 800cbdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbe4:	3302      	adds	r3, #2
 800cbe6:	e7c7      	b.n	800cb78 <_printf_common+0x58>
 800cbe8:	2301      	movs	r3, #1
 800cbea:	4622      	mov	r2, r4
 800cbec:	4641      	mov	r1, r8
 800cbee:	4638      	mov	r0, r7
 800cbf0:	47c8      	blx	r9
 800cbf2:	3001      	adds	r0, #1
 800cbf4:	d0e6      	beq.n	800cbc4 <_printf_common+0xa4>
 800cbf6:	3601      	adds	r6, #1
 800cbf8:	e7d9      	b.n	800cbae <_printf_common+0x8e>
	...

0800cbfc <_printf_i>:
 800cbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc00:	7e0f      	ldrb	r7, [r1, #24]
 800cc02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc04:	2f78      	cmp	r7, #120	@ 0x78
 800cc06:	4691      	mov	r9, r2
 800cc08:	4680      	mov	r8, r0
 800cc0a:	460c      	mov	r4, r1
 800cc0c:	469a      	mov	sl, r3
 800cc0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc12:	d807      	bhi.n	800cc24 <_printf_i+0x28>
 800cc14:	2f62      	cmp	r7, #98	@ 0x62
 800cc16:	d80a      	bhi.n	800cc2e <_printf_i+0x32>
 800cc18:	2f00      	cmp	r7, #0
 800cc1a:	f000 80d2 	beq.w	800cdc2 <_printf_i+0x1c6>
 800cc1e:	2f58      	cmp	r7, #88	@ 0x58
 800cc20:	f000 80b9 	beq.w	800cd96 <_printf_i+0x19a>
 800cc24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc2c:	e03a      	b.n	800cca4 <_printf_i+0xa8>
 800cc2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc32:	2b15      	cmp	r3, #21
 800cc34:	d8f6      	bhi.n	800cc24 <_printf_i+0x28>
 800cc36:	a101      	add	r1, pc, #4	@ (adr r1, 800cc3c <_printf_i+0x40>)
 800cc38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc3c:	0800cc95 	.word	0x0800cc95
 800cc40:	0800cca9 	.word	0x0800cca9
 800cc44:	0800cc25 	.word	0x0800cc25
 800cc48:	0800cc25 	.word	0x0800cc25
 800cc4c:	0800cc25 	.word	0x0800cc25
 800cc50:	0800cc25 	.word	0x0800cc25
 800cc54:	0800cca9 	.word	0x0800cca9
 800cc58:	0800cc25 	.word	0x0800cc25
 800cc5c:	0800cc25 	.word	0x0800cc25
 800cc60:	0800cc25 	.word	0x0800cc25
 800cc64:	0800cc25 	.word	0x0800cc25
 800cc68:	0800cda9 	.word	0x0800cda9
 800cc6c:	0800ccd3 	.word	0x0800ccd3
 800cc70:	0800cd63 	.word	0x0800cd63
 800cc74:	0800cc25 	.word	0x0800cc25
 800cc78:	0800cc25 	.word	0x0800cc25
 800cc7c:	0800cdcb 	.word	0x0800cdcb
 800cc80:	0800cc25 	.word	0x0800cc25
 800cc84:	0800ccd3 	.word	0x0800ccd3
 800cc88:	0800cc25 	.word	0x0800cc25
 800cc8c:	0800cc25 	.word	0x0800cc25
 800cc90:	0800cd6b 	.word	0x0800cd6b
 800cc94:	6833      	ldr	r3, [r6, #0]
 800cc96:	1d1a      	adds	r2, r3, #4
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	6032      	str	r2, [r6, #0]
 800cc9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cca0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cca4:	2301      	movs	r3, #1
 800cca6:	e09d      	b.n	800cde4 <_printf_i+0x1e8>
 800cca8:	6833      	ldr	r3, [r6, #0]
 800ccaa:	6820      	ldr	r0, [r4, #0]
 800ccac:	1d19      	adds	r1, r3, #4
 800ccae:	6031      	str	r1, [r6, #0]
 800ccb0:	0606      	lsls	r6, r0, #24
 800ccb2:	d501      	bpl.n	800ccb8 <_printf_i+0xbc>
 800ccb4:	681d      	ldr	r5, [r3, #0]
 800ccb6:	e003      	b.n	800ccc0 <_printf_i+0xc4>
 800ccb8:	0645      	lsls	r5, r0, #25
 800ccba:	d5fb      	bpl.n	800ccb4 <_printf_i+0xb8>
 800ccbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ccc0:	2d00      	cmp	r5, #0
 800ccc2:	da03      	bge.n	800cccc <_printf_i+0xd0>
 800ccc4:	232d      	movs	r3, #45	@ 0x2d
 800ccc6:	426d      	negs	r5, r5
 800ccc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cccc:	4859      	ldr	r0, [pc, #356]	@ (800ce34 <_printf_i+0x238>)
 800ccce:	230a      	movs	r3, #10
 800ccd0:	e011      	b.n	800ccf6 <_printf_i+0xfa>
 800ccd2:	6821      	ldr	r1, [r4, #0]
 800ccd4:	6833      	ldr	r3, [r6, #0]
 800ccd6:	0608      	lsls	r0, r1, #24
 800ccd8:	f853 5b04 	ldr.w	r5, [r3], #4
 800ccdc:	d402      	bmi.n	800cce4 <_printf_i+0xe8>
 800ccde:	0649      	lsls	r1, r1, #25
 800cce0:	bf48      	it	mi
 800cce2:	b2ad      	uxthmi	r5, r5
 800cce4:	2f6f      	cmp	r7, #111	@ 0x6f
 800cce6:	4853      	ldr	r0, [pc, #332]	@ (800ce34 <_printf_i+0x238>)
 800cce8:	6033      	str	r3, [r6, #0]
 800ccea:	bf14      	ite	ne
 800ccec:	230a      	movne	r3, #10
 800ccee:	2308      	moveq	r3, #8
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccf6:	6866      	ldr	r6, [r4, #4]
 800ccf8:	60a6      	str	r6, [r4, #8]
 800ccfa:	2e00      	cmp	r6, #0
 800ccfc:	bfa2      	ittt	ge
 800ccfe:	6821      	ldrge	r1, [r4, #0]
 800cd00:	f021 0104 	bicge.w	r1, r1, #4
 800cd04:	6021      	strge	r1, [r4, #0]
 800cd06:	b90d      	cbnz	r5, 800cd0c <_printf_i+0x110>
 800cd08:	2e00      	cmp	r6, #0
 800cd0a:	d04b      	beq.n	800cda4 <_printf_i+0x1a8>
 800cd0c:	4616      	mov	r6, r2
 800cd0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd12:	fb03 5711 	mls	r7, r3, r1, r5
 800cd16:	5dc7      	ldrb	r7, [r0, r7]
 800cd18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd1c:	462f      	mov	r7, r5
 800cd1e:	42bb      	cmp	r3, r7
 800cd20:	460d      	mov	r5, r1
 800cd22:	d9f4      	bls.n	800cd0e <_printf_i+0x112>
 800cd24:	2b08      	cmp	r3, #8
 800cd26:	d10b      	bne.n	800cd40 <_printf_i+0x144>
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	07df      	lsls	r7, r3, #31
 800cd2c:	d508      	bpl.n	800cd40 <_printf_i+0x144>
 800cd2e:	6923      	ldr	r3, [r4, #16]
 800cd30:	6861      	ldr	r1, [r4, #4]
 800cd32:	4299      	cmp	r1, r3
 800cd34:	bfde      	ittt	le
 800cd36:	2330      	movle	r3, #48	@ 0x30
 800cd38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd40:	1b92      	subs	r2, r2, r6
 800cd42:	6122      	str	r2, [r4, #16]
 800cd44:	f8cd a000 	str.w	sl, [sp]
 800cd48:	464b      	mov	r3, r9
 800cd4a:	aa03      	add	r2, sp, #12
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	4640      	mov	r0, r8
 800cd50:	f7ff fee6 	bl	800cb20 <_printf_common>
 800cd54:	3001      	adds	r0, #1
 800cd56:	d14a      	bne.n	800cdee <_printf_i+0x1f2>
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5c:	b004      	add	sp, #16
 800cd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	f043 0320 	orr.w	r3, r3, #32
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	4833      	ldr	r0, [pc, #204]	@ (800ce38 <_printf_i+0x23c>)
 800cd6c:	2778      	movs	r7, #120	@ 0x78
 800cd6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	6831      	ldr	r1, [r6, #0]
 800cd76:	061f      	lsls	r7, r3, #24
 800cd78:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd7c:	d402      	bmi.n	800cd84 <_printf_i+0x188>
 800cd7e:	065f      	lsls	r7, r3, #25
 800cd80:	bf48      	it	mi
 800cd82:	b2ad      	uxthmi	r5, r5
 800cd84:	6031      	str	r1, [r6, #0]
 800cd86:	07d9      	lsls	r1, r3, #31
 800cd88:	bf44      	itt	mi
 800cd8a:	f043 0320 	orrmi.w	r3, r3, #32
 800cd8e:	6023      	strmi	r3, [r4, #0]
 800cd90:	b11d      	cbz	r5, 800cd9a <_printf_i+0x19e>
 800cd92:	2310      	movs	r3, #16
 800cd94:	e7ac      	b.n	800ccf0 <_printf_i+0xf4>
 800cd96:	4827      	ldr	r0, [pc, #156]	@ (800ce34 <_printf_i+0x238>)
 800cd98:	e7e9      	b.n	800cd6e <_printf_i+0x172>
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	f023 0320 	bic.w	r3, r3, #32
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	e7f6      	b.n	800cd92 <_printf_i+0x196>
 800cda4:	4616      	mov	r6, r2
 800cda6:	e7bd      	b.n	800cd24 <_printf_i+0x128>
 800cda8:	6833      	ldr	r3, [r6, #0]
 800cdaa:	6825      	ldr	r5, [r4, #0]
 800cdac:	6961      	ldr	r1, [r4, #20]
 800cdae:	1d18      	adds	r0, r3, #4
 800cdb0:	6030      	str	r0, [r6, #0]
 800cdb2:	062e      	lsls	r6, r5, #24
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	d501      	bpl.n	800cdbc <_printf_i+0x1c0>
 800cdb8:	6019      	str	r1, [r3, #0]
 800cdba:	e002      	b.n	800cdc2 <_printf_i+0x1c6>
 800cdbc:	0668      	lsls	r0, r5, #25
 800cdbe:	d5fb      	bpl.n	800cdb8 <_printf_i+0x1bc>
 800cdc0:	8019      	strh	r1, [r3, #0]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	6123      	str	r3, [r4, #16]
 800cdc6:	4616      	mov	r6, r2
 800cdc8:	e7bc      	b.n	800cd44 <_printf_i+0x148>
 800cdca:	6833      	ldr	r3, [r6, #0]
 800cdcc:	1d1a      	adds	r2, r3, #4
 800cdce:	6032      	str	r2, [r6, #0]
 800cdd0:	681e      	ldr	r6, [r3, #0]
 800cdd2:	6862      	ldr	r2, [r4, #4]
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	4630      	mov	r0, r6
 800cdd8:	f7f3 fa22 	bl	8000220 <memchr>
 800cddc:	b108      	cbz	r0, 800cde2 <_printf_i+0x1e6>
 800cdde:	1b80      	subs	r0, r0, r6
 800cde0:	6060      	str	r0, [r4, #4]
 800cde2:	6863      	ldr	r3, [r4, #4]
 800cde4:	6123      	str	r3, [r4, #16]
 800cde6:	2300      	movs	r3, #0
 800cde8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdec:	e7aa      	b.n	800cd44 <_printf_i+0x148>
 800cdee:	6923      	ldr	r3, [r4, #16]
 800cdf0:	4632      	mov	r2, r6
 800cdf2:	4649      	mov	r1, r9
 800cdf4:	4640      	mov	r0, r8
 800cdf6:	47d0      	blx	sl
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	d0ad      	beq.n	800cd58 <_printf_i+0x15c>
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	079b      	lsls	r3, r3, #30
 800ce00:	d413      	bmi.n	800ce2a <_printf_i+0x22e>
 800ce02:	68e0      	ldr	r0, [r4, #12]
 800ce04:	9b03      	ldr	r3, [sp, #12]
 800ce06:	4298      	cmp	r0, r3
 800ce08:	bfb8      	it	lt
 800ce0a:	4618      	movlt	r0, r3
 800ce0c:	e7a6      	b.n	800cd5c <_printf_i+0x160>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	4632      	mov	r2, r6
 800ce12:	4649      	mov	r1, r9
 800ce14:	4640      	mov	r0, r8
 800ce16:	47d0      	blx	sl
 800ce18:	3001      	adds	r0, #1
 800ce1a:	d09d      	beq.n	800cd58 <_printf_i+0x15c>
 800ce1c:	3501      	adds	r5, #1
 800ce1e:	68e3      	ldr	r3, [r4, #12]
 800ce20:	9903      	ldr	r1, [sp, #12]
 800ce22:	1a5b      	subs	r3, r3, r1
 800ce24:	42ab      	cmp	r3, r5
 800ce26:	dcf2      	bgt.n	800ce0e <_printf_i+0x212>
 800ce28:	e7eb      	b.n	800ce02 <_printf_i+0x206>
 800ce2a:	2500      	movs	r5, #0
 800ce2c:	f104 0619 	add.w	r6, r4, #25
 800ce30:	e7f5      	b.n	800ce1e <_printf_i+0x222>
 800ce32:	bf00      	nop
 800ce34:	0800d3a1 	.word	0x0800d3a1
 800ce38:	0800d3b2 	.word	0x0800d3b2

0800ce3c <__sflush_r>:
 800ce3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce44:	0716      	lsls	r6, r2, #28
 800ce46:	4605      	mov	r5, r0
 800ce48:	460c      	mov	r4, r1
 800ce4a:	d454      	bmi.n	800cef6 <__sflush_r+0xba>
 800ce4c:	684b      	ldr	r3, [r1, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	dc02      	bgt.n	800ce58 <__sflush_r+0x1c>
 800ce52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	dd48      	ble.n	800ceea <__sflush_r+0xae>
 800ce58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce5a:	2e00      	cmp	r6, #0
 800ce5c:	d045      	beq.n	800ceea <__sflush_r+0xae>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce64:	682f      	ldr	r7, [r5, #0]
 800ce66:	6a21      	ldr	r1, [r4, #32]
 800ce68:	602b      	str	r3, [r5, #0]
 800ce6a:	d030      	beq.n	800cece <__sflush_r+0x92>
 800ce6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce6e:	89a3      	ldrh	r3, [r4, #12]
 800ce70:	0759      	lsls	r1, r3, #29
 800ce72:	d505      	bpl.n	800ce80 <__sflush_r+0x44>
 800ce74:	6863      	ldr	r3, [r4, #4]
 800ce76:	1ad2      	subs	r2, r2, r3
 800ce78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce7a:	b10b      	cbz	r3, 800ce80 <__sflush_r+0x44>
 800ce7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce7e:	1ad2      	subs	r2, r2, r3
 800ce80:	2300      	movs	r3, #0
 800ce82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce84:	6a21      	ldr	r1, [r4, #32]
 800ce86:	4628      	mov	r0, r5
 800ce88:	47b0      	blx	r6
 800ce8a:	1c43      	adds	r3, r0, #1
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	d106      	bne.n	800ce9e <__sflush_r+0x62>
 800ce90:	6829      	ldr	r1, [r5, #0]
 800ce92:	291d      	cmp	r1, #29
 800ce94:	d82b      	bhi.n	800ceee <__sflush_r+0xb2>
 800ce96:	4a2a      	ldr	r2, [pc, #168]	@ (800cf40 <__sflush_r+0x104>)
 800ce98:	410a      	asrs	r2, r1
 800ce9a:	07d6      	lsls	r6, r2, #31
 800ce9c:	d427      	bmi.n	800ceee <__sflush_r+0xb2>
 800ce9e:	2200      	movs	r2, #0
 800cea0:	6062      	str	r2, [r4, #4]
 800cea2:	04d9      	lsls	r1, r3, #19
 800cea4:	6922      	ldr	r2, [r4, #16]
 800cea6:	6022      	str	r2, [r4, #0]
 800cea8:	d504      	bpl.n	800ceb4 <__sflush_r+0x78>
 800ceaa:	1c42      	adds	r2, r0, #1
 800ceac:	d101      	bne.n	800ceb2 <__sflush_r+0x76>
 800ceae:	682b      	ldr	r3, [r5, #0]
 800ceb0:	b903      	cbnz	r3, 800ceb4 <__sflush_r+0x78>
 800ceb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800ceb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceb6:	602f      	str	r7, [r5, #0]
 800ceb8:	b1b9      	cbz	r1, 800ceea <__sflush_r+0xae>
 800ceba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cebe:	4299      	cmp	r1, r3
 800cec0:	d002      	beq.n	800cec8 <__sflush_r+0x8c>
 800cec2:	4628      	mov	r0, r5
 800cec4:	f7ff fbf2 	bl	800c6ac <_free_r>
 800cec8:	2300      	movs	r3, #0
 800ceca:	6363      	str	r3, [r4, #52]	@ 0x34
 800cecc:	e00d      	b.n	800ceea <__sflush_r+0xae>
 800cece:	2301      	movs	r3, #1
 800ced0:	4628      	mov	r0, r5
 800ced2:	47b0      	blx	r6
 800ced4:	4602      	mov	r2, r0
 800ced6:	1c50      	adds	r0, r2, #1
 800ced8:	d1c9      	bne.n	800ce6e <__sflush_r+0x32>
 800ceda:	682b      	ldr	r3, [r5, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d0c6      	beq.n	800ce6e <__sflush_r+0x32>
 800cee0:	2b1d      	cmp	r3, #29
 800cee2:	d001      	beq.n	800cee8 <__sflush_r+0xac>
 800cee4:	2b16      	cmp	r3, #22
 800cee6:	d11e      	bne.n	800cf26 <__sflush_r+0xea>
 800cee8:	602f      	str	r7, [r5, #0]
 800ceea:	2000      	movs	r0, #0
 800ceec:	e022      	b.n	800cf34 <__sflush_r+0xf8>
 800ceee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cef2:	b21b      	sxth	r3, r3
 800cef4:	e01b      	b.n	800cf2e <__sflush_r+0xf2>
 800cef6:	690f      	ldr	r7, [r1, #16]
 800cef8:	2f00      	cmp	r7, #0
 800cefa:	d0f6      	beq.n	800ceea <__sflush_r+0xae>
 800cefc:	0793      	lsls	r3, r2, #30
 800cefe:	680e      	ldr	r6, [r1, #0]
 800cf00:	bf08      	it	eq
 800cf02:	694b      	ldreq	r3, [r1, #20]
 800cf04:	600f      	str	r7, [r1, #0]
 800cf06:	bf18      	it	ne
 800cf08:	2300      	movne	r3, #0
 800cf0a:	eba6 0807 	sub.w	r8, r6, r7
 800cf0e:	608b      	str	r3, [r1, #8]
 800cf10:	f1b8 0f00 	cmp.w	r8, #0
 800cf14:	dde9      	ble.n	800ceea <__sflush_r+0xae>
 800cf16:	6a21      	ldr	r1, [r4, #32]
 800cf18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf1a:	4643      	mov	r3, r8
 800cf1c:	463a      	mov	r2, r7
 800cf1e:	4628      	mov	r0, r5
 800cf20:	47b0      	blx	r6
 800cf22:	2800      	cmp	r0, #0
 800cf24:	dc08      	bgt.n	800cf38 <__sflush_r+0xfc>
 800cf26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf2e:	81a3      	strh	r3, [r4, #12]
 800cf30:	f04f 30ff 	mov.w	r0, #4294967295
 800cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf38:	4407      	add	r7, r0
 800cf3a:	eba8 0800 	sub.w	r8, r8, r0
 800cf3e:	e7e7      	b.n	800cf10 <__sflush_r+0xd4>
 800cf40:	dfbffffe 	.word	0xdfbffffe

0800cf44 <_fflush_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	690b      	ldr	r3, [r1, #16]
 800cf48:	4605      	mov	r5, r0
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	b913      	cbnz	r3, 800cf54 <_fflush_r+0x10>
 800cf4e:	2500      	movs	r5, #0
 800cf50:	4628      	mov	r0, r5
 800cf52:	bd38      	pop	{r3, r4, r5, pc}
 800cf54:	b118      	cbz	r0, 800cf5e <_fflush_r+0x1a>
 800cf56:	6a03      	ldr	r3, [r0, #32]
 800cf58:	b90b      	cbnz	r3, 800cf5e <_fflush_r+0x1a>
 800cf5a:	f7ff f99f 	bl	800c29c <__sinit>
 800cf5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d0f3      	beq.n	800cf4e <_fflush_r+0xa>
 800cf66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf68:	07d0      	lsls	r0, r2, #31
 800cf6a:	d404      	bmi.n	800cf76 <_fflush_r+0x32>
 800cf6c:	0599      	lsls	r1, r3, #22
 800cf6e:	d402      	bmi.n	800cf76 <_fflush_r+0x32>
 800cf70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf72:	f7ff fb8a 	bl	800c68a <__retarget_lock_acquire_recursive>
 800cf76:	4628      	mov	r0, r5
 800cf78:	4621      	mov	r1, r4
 800cf7a:	f7ff ff5f 	bl	800ce3c <__sflush_r>
 800cf7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf80:	07da      	lsls	r2, r3, #31
 800cf82:	4605      	mov	r5, r0
 800cf84:	d4e4      	bmi.n	800cf50 <_fflush_r+0xc>
 800cf86:	89a3      	ldrh	r3, [r4, #12]
 800cf88:	059b      	lsls	r3, r3, #22
 800cf8a:	d4e1      	bmi.n	800cf50 <_fflush_r+0xc>
 800cf8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf8e:	f7ff fb7d 	bl	800c68c <__retarget_lock_release_recursive>
 800cf92:	e7dd      	b.n	800cf50 <_fflush_r+0xc>

0800cf94 <__swhatbuf_r>:
 800cf94:	b570      	push	{r4, r5, r6, lr}
 800cf96:	460c      	mov	r4, r1
 800cf98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf9c:	2900      	cmp	r1, #0
 800cf9e:	b096      	sub	sp, #88	@ 0x58
 800cfa0:	4615      	mov	r5, r2
 800cfa2:	461e      	mov	r6, r3
 800cfa4:	da0d      	bge.n	800cfc2 <__swhatbuf_r+0x2e>
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfac:	f04f 0100 	mov.w	r1, #0
 800cfb0:	bf14      	ite	ne
 800cfb2:	2340      	movne	r3, #64	@ 0x40
 800cfb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cfb8:	2000      	movs	r0, #0
 800cfba:	6031      	str	r1, [r6, #0]
 800cfbc:	602b      	str	r3, [r5, #0]
 800cfbe:	b016      	add	sp, #88	@ 0x58
 800cfc0:	bd70      	pop	{r4, r5, r6, pc}
 800cfc2:	466a      	mov	r2, sp
 800cfc4:	f000 f848 	bl	800d058 <_fstat_r>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	dbec      	blt.n	800cfa6 <__swhatbuf_r+0x12>
 800cfcc:	9901      	ldr	r1, [sp, #4]
 800cfce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cfd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cfd6:	4259      	negs	r1, r3
 800cfd8:	4159      	adcs	r1, r3
 800cfda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfde:	e7eb      	b.n	800cfb8 <__swhatbuf_r+0x24>

0800cfe0 <__smakebuf_r>:
 800cfe0:	898b      	ldrh	r3, [r1, #12]
 800cfe2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfe4:	079d      	lsls	r5, r3, #30
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460c      	mov	r4, r1
 800cfea:	d507      	bpl.n	800cffc <__smakebuf_r+0x1c>
 800cfec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	6123      	str	r3, [r4, #16]
 800cff4:	2301      	movs	r3, #1
 800cff6:	6163      	str	r3, [r4, #20]
 800cff8:	b003      	add	sp, #12
 800cffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cffc:	ab01      	add	r3, sp, #4
 800cffe:	466a      	mov	r2, sp
 800d000:	f7ff ffc8 	bl	800cf94 <__swhatbuf_r>
 800d004:	9f00      	ldr	r7, [sp, #0]
 800d006:	4605      	mov	r5, r0
 800d008:	4639      	mov	r1, r7
 800d00a:	4630      	mov	r0, r6
 800d00c:	f7ff fbba 	bl	800c784 <_malloc_r>
 800d010:	b948      	cbnz	r0, 800d026 <__smakebuf_r+0x46>
 800d012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d016:	059a      	lsls	r2, r3, #22
 800d018:	d4ee      	bmi.n	800cff8 <__smakebuf_r+0x18>
 800d01a:	f023 0303 	bic.w	r3, r3, #3
 800d01e:	f043 0302 	orr.w	r3, r3, #2
 800d022:	81a3      	strh	r3, [r4, #12]
 800d024:	e7e2      	b.n	800cfec <__smakebuf_r+0xc>
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	6020      	str	r0, [r4, #0]
 800d02a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d02e:	81a3      	strh	r3, [r4, #12]
 800d030:	9b01      	ldr	r3, [sp, #4]
 800d032:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d036:	b15b      	cbz	r3, 800d050 <__smakebuf_r+0x70>
 800d038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d03c:	4630      	mov	r0, r6
 800d03e:	f000 f81d 	bl	800d07c <_isatty_r>
 800d042:	b128      	cbz	r0, 800d050 <__smakebuf_r+0x70>
 800d044:	89a3      	ldrh	r3, [r4, #12]
 800d046:	f023 0303 	bic.w	r3, r3, #3
 800d04a:	f043 0301 	orr.w	r3, r3, #1
 800d04e:	81a3      	strh	r3, [r4, #12]
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	431d      	orrs	r5, r3
 800d054:	81a5      	strh	r5, [r4, #12]
 800d056:	e7cf      	b.n	800cff8 <__smakebuf_r+0x18>

0800d058 <_fstat_r>:
 800d058:	b538      	push	{r3, r4, r5, lr}
 800d05a:	4d07      	ldr	r5, [pc, #28]	@ (800d078 <_fstat_r+0x20>)
 800d05c:	2300      	movs	r3, #0
 800d05e:	4604      	mov	r4, r0
 800d060:	4608      	mov	r0, r1
 800d062:	4611      	mov	r1, r2
 800d064:	602b      	str	r3, [r5, #0]
 800d066:	f7f4 fed0 	bl	8001e0a <_fstat>
 800d06a:	1c43      	adds	r3, r0, #1
 800d06c:	d102      	bne.n	800d074 <_fstat_r+0x1c>
 800d06e:	682b      	ldr	r3, [r5, #0]
 800d070:	b103      	cbz	r3, 800d074 <_fstat_r+0x1c>
 800d072:	6023      	str	r3, [r4, #0]
 800d074:	bd38      	pop	{r3, r4, r5, pc}
 800d076:	bf00      	nop
 800d078:	20000f84 	.word	0x20000f84

0800d07c <_isatty_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4d06      	ldr	r5, [pc, #24]	@ (800d098 <_isatty_r+0x1c>)
 800d080:	2300      	movs	r3, #0
 800d082:	4604      	mov	r4, r0
 800d084:	4608      	mov	r0, r1
 800d086:	602b      	str	r3, [r5, #0]
 800d088:	f7f4 fecf 	bl	8001e2a <_isatty>
 800d08c:	1c43      	adds	r3, r0, #1
 800d08e:	d102      	bne.n	800d096 <_isatty_r+0x1a>
 800d090:	682b      	ldr	r3, [r5, #0]
 800d092:	b103      	cbz	r3, 800d096 <_isatty_r+0x1a>
 800d094:	6023      	str	r3, [r4, #0]
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	20000f84 	.word	0x20000f84

0800d09c <_sbrk_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	4d06      	ldr	r5, [pc, #24]	@ (800d0b8 <_sbrk_r+0x1c>)
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	4608      	mov	r0, r1
 800d0a6:	602b      	str	r3, [r5, #0]
 800d0a8:	f7f4 fed8 	bl	8001e5c <_sbrk>
 800d0ac:	1c43      	adds	r3, r0, #1
 800d0ae:	d102      	bne.n	800d0b6 <_sbrk_r+0x1a>
 800d0b0:	682b      	ldr	r3, [r5, #0]
 800d0b2:	b103      	cbz	r3, 800d0b6 <_sbrk_r+0x1a>
 800d0b4:	6023      	str	r3, [r4, #0]
 800d0b6:	bd38      	pop	{r3, r4, r5, pc}
 800d0b8:	20000f84 	.word	0x20000f84

0800d0bc <_init>:
 800d0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0be:	bf00      	nop
 800d0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c2:	bc08      	pop	{r3}
 800d0c4:	469e      	mov	lr, r3
 800d0c6:	4770      	bx	lr

0800d0c8 <_fini>:
 800d0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ca:	bf00      	nop
 800d0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ce:	bc08      	pop	{r3}
 800d0d0:	469e      	mov	lr, r3
 800d0d2:	4770      	bx	lr
