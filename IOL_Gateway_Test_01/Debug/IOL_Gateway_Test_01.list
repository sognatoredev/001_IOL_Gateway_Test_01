
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d41c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800d5fc  0800d5fc  0000e5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d91c  0800d91c  0000f388  2**0
                  CONTENTS
  4 .ARM          00000008  0800d91c  0800d91c  0000e91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d924  0800d924  0000f388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d924  0800d924  0000e924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d928  0800d928  0000e928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000388  20000000  0800d92c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026ec  20000388  0800dcb4  0000f388  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a74  0800dcb4  0000fa74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d03  00000000  00000000  0000f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005608  00000000  00000000  000320bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  000376c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000152c  00000000  00000000  00039288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247e7  00000000  00000000  0003a7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002546d  00000000  00000000  0005ef9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceee2  00000000  00000000  00084408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001532ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007968  00000000  00000000  00153330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015ac98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000388 	.word	0x20000388
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d5e4 	.word	0x0800d5e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000038c 	.word	0x2000038c
 800021c:	0800d5e4 	.word	0x0800d5e4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Decode_MC_ReadWrite>:
extern uint8_t ProcessDataIn_cnt;
extern uint8_t IOL_OP_ISDU_OD_Res_cnt;


static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	09db      	lsrs	r3, r3, #7
 80005c6:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <Decode_MC_ReadWrite+0x24>
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d002      	beq.n	80005d8 <Decode_MC_ReadWrite+0x28>
 80005d2:	e003      	b.n	80005dc <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e002      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 80005dc:	2358      	movs	r3, #88	@ 0x58
    }
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <Decode_MC_CommunicationChannel>:

static uint8_t Decode_MC_CommunicationChannel (uint8_t Data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d813      	bhi.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
 8000610:	a201      	add	r2, pc, #4	@ (adr r2, 8000618 <Decode_MC_CommunicationChannel+0x2c>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000629 	.word	0x08000629
 800061c:	0800062d 	.word	0x0800062d
 8000620:	08000631 	.word	0x08000631
 8000624:	08000635 	.word	0x08000635
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8000628:	2300      	movs	r3, #0
 800062a:	e005      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 800062c:	2301      	movs	r3, #1
 800062e:	e003      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8000630:	2302      	movs	r3, #2
 8000632:	e001      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8000634:	2303      	movs	r3, #3
 8000636:	e7ff      	b.n	8000638 <Decode_MC_CommunicationChannel+0x4c>
    }
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <Decode_MC_Address>:

static uint8_t Decode_MC_Address (uint8_t Data)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	73fb      	strb	r3, [r7, #15]
    
    return MCdata & 0x1F;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2db      	uxtb	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Decode_CKT_Type>:

static uint8_t Decode_CKT_Type (uint8_t Data)
{
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]
    
    MCdata = Data;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 6) & 0x03;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	099b      	lsrs	r3, r3, #6
 8000680:	b2db      	uxtb	r3, r3
}
 8000682:	4618      	mov	r0, r3
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <Decode_CKT_Checksum>:

static uint8_t Decode_CKT_Checksum (uint8_t Data)
{
 800068e:	b480      	push	{r7}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <Decode_CKS_GetChecksum>:

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80006c0:	2352      	movs	r3, #82	@ 0x52
 80006c2:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	757b      	strb	r3, [r7, #21]

    for (uint8_t i = 0; i < checksumsize; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	75bb      	strb	r3, [r7, #22]
 80006d0:	e009      	b.n	80006e6 <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	4053      	eors	r3, r2
 80006de:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 80006e0:	7dbb      	ldrb	r3, [r7, #22]
 80006e2:	3301      	adds	r3, #1
 80006e4:	75bb      	strb	r3, [r7, #22]
 80006e6:	7dba      	ldrb	r2, [r7, #22]
 80006e8:	7d7b      	ldrb	r3, [r7, #21]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d3f1      	bcc.n	80006d2 <Decode_CKS_GetChecksum+0x1e>
    }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	09db      	lsrs	r3, r3, #7
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4053      	eors	r3, r2
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4053      	eors	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	085b      	lsrs	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4053      	eors	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	099b      	lsrs	r3, r3, #6
 800071c:	b2da      	uxtb	r2, r3
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4053      	eors	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4053      	eors	r3, r2
 8000730:	b2da      	uxtb	r2, r3
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	4053      	eors	r3, r2
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	09db      	lsrs	r3, r3, #7
 8000742:	b2da      	uxtb	r2, r3
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	099b      	lsrs	r3, r3, #6
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4053      	eors	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	095b      	lsrs	r3, r3, #5
 8000758:	b2da      	uxtb	r2, r3
 800075a:	7dfb      	ldrb	r3, [r7, #23]
 800075c:	091b      	lsrs	r3, r3, #4
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4053      	eors	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	089b      	lsrs	r3, r3, #2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4053      	eors	r3, r2
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	085b      	lsrs	r3, r3, #1
 8000784:	b2da      	uxtb	r2, r3
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	4053      	eors	r3, r2
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 8000792:	7d3b      	ldrb	r3, [r7, #20]
 8000794:	015b      	lsls	r3, r3, #5
 8000796:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 8000798:	7cfb      	ldrb	r3, [r7, #19]
 800079a:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 800079c:	b25b      	sxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 80007a2:	7cbb      	ldrb	r3, [r7, #18]
 80007a4:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 80007ac:	7c7b      	ldrb	r3, [r7, #17]
 80007ae:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80007b6:	7c3b      	ldrb	r3, [r7, #16]
 80007b8:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80007c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80007c8:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <OP_CKS_GetChecksum>:

//OP 모드 Event 비트 포함 CKS 생성
uint8_t OP_CKS_GetChecksum (const uint8_t * pData, uint8_t length, uint8_t eventflag)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
 80007e4:	4613      	mov	r3, r2
 80007e6:	70bb      	strb	r3, [r7, #2]
    uint8_t ck8 = 0x52;
 80007e8:	2352      	movs	r3, #82	@ 0x52
 80007ea:	77fb      	strb	r3, [r7, #31]
    uint8_t checksumsize = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	773b      	strb	r3, [r7, #28]
    uint8_t eventbitset = 0x80;
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	76fb      	strb	r3, [r7, #27]

    checksumsize = length;
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	773b      	strb	r3, [r7, #28]

    if (eventflag == 0)
 80007f8:	78bb      	ldrb	r3, [r7, #2]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 8081 	bne.w	8000902 <OP_CKS_GetChecksum+0x12a>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 8000800:	2300      	movs	r3, #0
 8000802:	77bb      	strb	r3, [r7, #30]
 8000804:	e009      	b.n	800081a <OP_CKS_GetChecksum+0x42>
        {
            ck8 ^= *pData++;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	7ffb      	ldrb	r3, [r7, #31]
 8000810:	4053      	eors	r3, r2
 8000812:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 8000814:	7fbb      	ldrb	r3, [r7, #30]
 8000816:	3301      	adds	r3, #1
 8000818:	77bb      	strb	r3, [r7, #30]
 800081a:	7fba      	ldrb	r2, [r7, #30]
 800081c:	7f3b      	ldrb	r3, [r7, #28]
 800081e:	429a      	cmp	r2, r3
 8000820:	d3f1      	bcc.n	8000806 <OP_CKS_GetChecksum+0x2e>
        }
        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8000822:	7ffb      	ldrb	r3, [r7, #31]
 8000824:	09db      	lsrs	r3, r3, #7
 8000826:	b2da      	uxtb	r2, r3
 8000828:	7ffb      	ldrb	r3, [r7, #31]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4053      	eors	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	7ffb      	ldrb	r3, [r7, #31]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4053      	eors	r3, r2
 800083a:	b2da      	uxtb	r2, r3
 800083c:	7ffb      	ldrb	r3, [r7, #31]
 800083e:	085b      	lsrs	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4053      	eors	r3, r2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	74fb      	strb	r3, [r7, #19]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800084c:	7ffb      	ldrb	r3, [r7, #31]
 800084e:	099b      	lsrs	r3, r3, #6
 8000850:	b2da      	uxtb	r2, r3
 8000852:	7ffb      	ldrb	r3, [r7, #31]
 8000854:	091b      	lsrs	r3, r3, #4
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4053      	eors	r3, r2
 800085a:	b2da      	uxtb	r2, r3
 800085c:	7ffb      	ldrb	r3, [r7, #31]
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4053      	eors	r3, r2
 8000864:	b2da      	uxtb	r2, r3
 8000866:	7ffb      	ldrb	r3, [r7, #31]
 8000868:	4053      	eors	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	74bb      	strb	r3, [r7, #18]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8000872:	7ffb      	ldrb	r3, [r7, #31]
 8000874:	09db      	lsrs	r3, r3, #7
 8000876:	b2da      	uxtb	r2, r3
 8000878:	7ffb      	ldrb	r3, [r7, #31]
 800087a:	099b      	lsrs	r3, r3, #6
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4053      	eors	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	747b      	strb	r3, [r7, #17]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8000888:	7ffb      	ldrb	r3, [r7, #31]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	b2da      	uxtb	r2, r3
 800088e:	7ffb      	ldrb	r3, [r7, #31]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4053      	eors	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	743b      	strb	r3, [r7, #16]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800089e:	7ffb      	ldrb	r3, [r7, #31]
 80008a0:	08db      	lsrs	r3, r3, #3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	7ffb      	ldrb	r3, [r7, #31]
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
 80008bc:	4053      	eors	r3, r2
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	73bb      	strb	r3, [r7, #14]
        uint8_t ck6 =   bit5 << 5 |
 80008c6:	7cfb      	ldrb	r3, [r7, #19]
 80008c8:	015b      	lsls	r3, r3, #5
 80008ca:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80008cc:	7cbb      	ldrb	r3, [r7, #18]
 80008ce:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80008d6:	7c7b      	ldrb	r3, [r7, #17]
 80008d8:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80008e0:	7c3b      	ldrb	r3, [r7, #16]
 80008e2:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80008f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 80008fc:	737b      	strb	r3, [r7, #13]
                        bit0;
        
        return ck6;
 80008fe:	7b7b      	ldrb	r3, [r7, #13]
 8000900:	e08b      	b.n	8000a1a <OP_CKS_GetChecksum+0x242>
    }
    else if (eventflag == 1)
 8000902:	78bb      	ldrb	r3, [r7, #2]
 8000904:	2b01      	cmp	r3, #1
 8000906:	f040 8088 	bne.w	8000a1a <OP_CKS_GetChecksum+0x242>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	777b      	strb	r3, [r7, #29]
 800090e:	e009      	b.n	8000924 <OP_CKS_GetChecksum+0x14c>
        {
            ck8 ^= *pData++;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	7ffb      	ldrb	r3, [r7, #31]
 800091a:	4053      	eors	r3, r2
 800091c:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 800091e:	7f7b      	ldrb	r3, [r7, #29]
 8000920:	3301      	adds	r3, #1
 8000922:	777b      	strb	r3, [r7, #29]
 8000924:	7f7a      	ldrb	r2, [r7, #29]
 8000926:	7f3b      	ldrb	r3, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	d3f1      	bcc.n	8000910 <OP_CKS_GetChecksum+0x138>
        }

        ck8 ^= eventbitset;
 800092c:	7ffa      	ldrb	r2, [r7, #31]
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	4053      	eors	r3, r2
 8000932:	77fb      	strb	r3, [r7, #31]

        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8000934:	7ffb      	ldrb	r3, [r7, #31]
 8000936:	09db      	lsrs	r3, r3, #7
 8000938:	b2da      	uxtb	r2, r3
 800093a:	7ffb      	ldrb	r3, [r7, #31]
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4053      	eors	r3, r2
 8000942:	b2da      	uxtb	r2, r3
 8000944:	7ffb      	ldrb	r3, [r7, #31]
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4053      	eors	r3, r2
 800094c:	b2da      	uxtb	r2, r3
 800094e:	7ffb      	ldrb	r3, [r7, #31]
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4053      	eors	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	76bb      	strb	r3, [r7, #26]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800095e:	7ffb      	ldrb	r3, [r7, #31]
 8000960:	099b      	lsrs	r3, r3, #6
 8000962:	b2da      	uxtb	r2, r3
 8000964:	7ffb      	ldrb	r3, [r7, #31]
 8000966:	091b      	lsrs	r3, r3, #4
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4053      	eors	r3, r2
 800096c:	b2da      	uxtb	r2, r3
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4053      	eors	r3, r2
 8000976:	b2da      	uxtb	r2, r3
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	4053      	eors	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	767b      	strb	r3, [r7, #25]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	09db      	lsrs	r3, r3, #7
 8000988:	b2da      	uxtb	r2, r3
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	099b      	lsrs	r3, r3, #6
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4053      	eors	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	763b      	strb	r3, [r7, #24]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 800099a:	7ffb      	ldrb	r3, [r7, #31]
 800099c:	095b      	lsrs	r3, r3, #5
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	7ffb      	ldrb	r3, [r7, #31]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4053      	eors	r3, r2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	75fb      	strb	r3, [r7, #23]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	7ffb      	ldrb	r3, [r7, #31]
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4053      	eors	r3, r2
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	75bb      	strb	r3, [r7, #22]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	4053      	eors	r3, r2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	757b      	strb	r3, [r7, #21]
        uint8_t ck6 =   bit5 << 5 |
 80009d8:	7ebb      	ldrb	r3, [r7, #26]
 80009da:	015b      	lsls	r3, r3, #5
 80009dc:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80009de:	7e7b      	ldrb	r3, [r7, #25]
 80009e0:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80009e8:	7e3b      	ldrb	r3, [r7, #24]
 80009ea:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80009fc:	7dbb      	ldrb	r3, [r7, #22]
 80009fe:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8000a06:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 8000a0e:	753b      	strb	r3, [r7, #20]
                        bit0;
        
        return eventbitset | ck6;
 8000a10:	7efa      	ldrb	r2, [r7, #27]
 8000a12:	7d3b      	ldrb	r3, [r7, #20]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	e7ff      	b.n	8000a1a <OP_CKS_GetChecksum+0x242>
    }
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <IOL_StartUp_Read_MakePacket>:

static uint8_t* IOL_StartUp_Read_MakePacket (uint8_t * pData)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
    
    pData[0] = IOL_Page1_SeqValue[Page1_seq++];
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <IOL_StartUp_Read_MakePacket+0x3c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	b2d1      	uxtb	r1, r2
 8000a3c:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <IOL_StartUp_Read_MakePacket+0x3c>)
 8000a3e:	7011      	strb	r1, [r2, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <IOL_StartUp_Read_MakePacket+0x40>)
 8000a44:	5c9a      	ldrb	r2, [r3, r2]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	701a      	strb	r2, [r3, #0]
    pData[1] = Decode_CKS_GetChecksum(&pData[0], 1);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1c5c      	adds	r4, r3, #1
 8000a4e:	2101      	movs	r1, #1
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fe2f 	bl	80006b4 <Decode_CKS_GetChecksum>
 8000a56:	4603      	mov	r3, r0
 8000a58:	7023      	strb	r3, [r4, #0]
    
    return pData;
 8000a5a:	687b      	ldr	r3, [r7, #4]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	200003a4 	.word	0x200003a4
 8000a68:	20000004 	.word	0x20000004

08000a6c <IOL_StartUp_Write_MakePacket>:

static uint8_t* IOL_StartUp_Write_MakePacket (uint8_t * pData)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
    
    pData[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <IOL_StartUp_Write_MakePacket+0x28>)
 8000a7c:	f7ff fe1a 	bl	80006b4 <Decode_CKS_GetChecksum>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	701a      	strb	r2, [r3, #0]
    
    return pData;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000000 	.word	0x20000000

08000a98 <IOL_State_StartUp>:

static uint8_t IOL_State_StartUp (void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
    uint8_t Page_ChecksumValue = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
    uint8_t Length = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t * pData;

    switch (IOL_M2D_rxpacket.rw)
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <IOL_State_StartUp+0x74>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d008      	beq.n	8000ac0 <IOL_State_StartUp+0x28>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10d      	bne.n	8000ace <IOL_State_StartUp+0x36>
    {
        case IOL_RW_Read :
            //to do
            Length = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	73fb      	strb	r3, [r7, #15]
            pData = IOL_StartUp_Read_MakePacket(uart1_rx_IDLE_buf);
 8000ab6:	4816      	ldr	r0, [pc, #88]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000ab8:	f7ff ffb6 	bl	8000a28 <IOL_StartUp_Read_MakePacket>
 8000abc:	60b8      	str	r0, [r7, #8]
            break;
 8000abe:	e006      	b.n	8000ace <IOL_State_StartUp+0x36>
        case IOL_RW_Write :
            // to do
            Length = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
            pData = IOL_StartUp_Write_MakePacket(uart1_rx_IDLE_buf);
 8000ac4:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000ac6:	f7ff ffd1 	bl	8000a6c <IOL_StartUp_Write_MakePacket>
 8000aca:	60b8      	str	r0, [r7, #8]
            break;
 8000acc:	bf00      	nop
    }

    IOL_ENABLE;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f002 fcf1 	bl	80034bc <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) pData, Length) != HAL_OK)
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <IOL_State_StartUp+0x7c>)
 8000ae4:	f005 ffd6 	bl	8006a94 <HAL_UART_Transmit_IT>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <IOL_State_StartUp+0x5a>
    {
        Error_Handler();
 8000aee:	f000 ff28 	bl	8001942 <Error_Handler>
    }

    //Master Command to PreOP.
    if (uart1_rx_IDLE_buf[2] == 0x9A)
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <IOL_State_StartUp+0x78>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	2b9a      	cmp	r3, #154	@ 0x9a
 8000af8:	d102      	bne.n	8000b00 <IOL_State_StartUp+0x68>
    {
        stateIOLseq = IOL_PreOP;
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <IOL_State_StartUp+0x80>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
    }

    return ;
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000f9c 	.word	0x20000f9c
 8000b10:	20000bc8 	.word	0x20000bc8
 8000b14:	200010a4 	.word	0x200010a4
 8000b18:	20001148 	.word	0x20001148

08000b1c <IOL_State_PreOP_Read_Channel>:

//  OP 모드 Read 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_PreOP_Read_Channel (void)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71bb      	strb	r3, [r7, #6]
    uint8_t IOL_Commchannel_value = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	717b      	strb	r3, [r7, #5]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 

    for (i=0; i < PREOP_DATA_LENGTH; i++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e00e      	b.n	8000b4e <IOL_State_PreOP_Read_Channel+0x32>
    {
        preop_data_arr[i]= IOL_PreOP_Packet[PreOP_seq_cnt][i];
 8000b30:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	79fa      	ldrb	r2, [r7, #7]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4833      	ldr	r0, [pc, #204]	@ (8000c08 <IOL_State_PreOP_Read_Channel+0xec>)
 8000b3c:	00c9      	lsls	r1, r1, #3
 8000b3e:	4401      	add	r1, r0
 8000b40:	440a      	add	r2, r1
 8000b42:	7811      	ldrb	r1, [r2, #0]
 8000b44:	4a31      	ldr	r2, [pc, #196]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b46:	54d1      	strb	r1, [r2, r3]
    for (i=0; i < PREOP_DATA_LENGTH; i++)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b07      	cmp	r3, #7
 8000b52:	d9ed      	bls.n	8000b30 <IOL_State_PreOP_Read_Channel+0x14>
    }

    switch (IOL_M2D_rxpacket.commchannel)
 8000b54:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <IOL_State_PreOP_Read_Channel+0xf4>)
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d837      	bhi.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>
 8000b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b64 <IOL_State_PreOP_Read_Channel+0x48>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000b8b 	.word	0x08000b8b
 8000b6c:	08000ba1 	.word	0x08000ba1
 8000b70:	08000bb7 	.word	0x08000bb7
    {
        case IOL_Channel_Process :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000b74:	79fc      	ldrb	r4, [r7, #7]
 8000b76:	2200      	movs	r2, #0
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4824      	ldr	r0, [pc, #144]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b7c:	f7ff fe2c 	bl	80007d8 <OP_CKS_GetChecksum>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b86:	551a      	strb	r2, [r3, r4]
            break;
 8000b88:	e020      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_Page :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000b8a:	79fc      	ldrb	r4, [r7, #7]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2108      	movs	r1, #8
 8000b90:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b92:	f7ff fe21 	bl	80007d8 <OP_CKS_GetChecksum>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000b9c:	551a      	strb	r2, [r3, r4]
            break;
 8000b9e:	e015      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_Diagnosis :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 1);
 8000ba0:	79fc      	ldrb	r4, [r7, #7]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4819      	ldr	r0, [pc, #100]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000ba8:	f7ff fe16 	bl	80007d8 <OP_CKS_GetChecksum>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bb2:	551a      	strb	r2, [r3, r4]
            break;
 8000bb4:	e00a      	b.n	8000bcc <IOL_State_PreOP_Read_Channel+0xb0>

        case IOL_Channel_ISDU :
            preop_data_arr[i] = OP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 8000bb6:	79fc      	ldrb	r4, [r7, #7]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bbe:	f7ff fe0b 	bl	80007d8 <OP_CKS_GetChecksum>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000bc8:	551a      	strb	r2, [r3, r4]
            break;
 8000bca:	bf00      	nop
    }

    PreOP_seq_cnt++;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <IOL_State_PreOP_Read_Channel+0xe8>)
 8000bd6:	701a      	strb	r2, [r3, #0]

    IOL_ENABLE;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be0:	f002 fc6c 	bl	80034bc <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, preop_data_arr, 9) != HAL_OK)
 8000be4:	2209      	movs	r2, #9
 8000be6:	4909      	ldr	r1, [pc, #36]	@ (8000c0c <IOL_State_PreOP_Read_Channel+0xf0>)
 8000be8:	480a      	ldr	r0, [pc, #40]	@ (8000c14 <IOL_State_PreOP_Read_Channel+0xf8>)
 8000bea:	f005 ff53 	bl	8006a94 <HAL_UART_Transmit_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <IOL_State_PreOP_Read_Channel+0xdc>
    {
        Error_Handler();
 8000bf4:	f000 fea5 	bl	8001942 <Error_Handler>
    }

    return ;
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	200003a5 	.word	0x200003a5
 8000c08:	20000014 	.word	0x20000014
 8000c0c:	200003a8 	.word	0x200003a8
 8000c10:	20000f9c 	.word	0x20000f9c
 8000c14:	200010a4 	.word	0x200010a4

08000c18 <IOL_State_PreOP_Write_Channel>:

//  OP 모드 Write 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_PreOP_Write_Channel (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
    uint8_t IOL_Commchannel_value = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71bb      	strb	r3, [r7, #6]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 

    switch (IOL_M2D_rxpacket.commchannel)
 8000c26:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <IOL_State_PreOP_Write_Channel+0xb8>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d832      	bhi.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>
 8000c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <IOL_State_PreOP_Write_Channel+0x1c>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000c45 	.word	0x08000c45
 8000c38:	08000c59 	.word	0x08000c59
 8000c3c:	08000c6d 	.word	0x08000c6d
 8000c40:	08000c81 	.word	0x08000c81
    {
        case IOL_Channel_Process :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	4822      	ldr	r0, [pc, #136]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c4a:	f7ff fdc5 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c54:	701a      	strb	r2, [r3, #0]
            break;
 8000c56:	e01d      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_Page :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	481d      	ldr	r0, [pc, #116]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c5e:	f7ff fdbb 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c68:	701a      	strb	r2, [r3, #0]
            break;
 8000c6a:	e013      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_Diagnosis :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4818      	ldr	r0, [pc, #96]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c72:	f7ff fdb1 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c7c:	701a      	strb	r2, [r3, #0]
            break;
 8000c7e:	e009      	b.n	8000c94 <IOL_State_PreOP_Write_Channel+0x7c>

        case IOL_Channel_ISDU :
            preop_data_arr[0] = OP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2100      	movs	r1, #0
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c86:	f7ff fda7 	bl	80007d8 <OP_CKS_GetChecksum>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000c90:	701a      	strb	r2, [r3, #0]
            break;
 8000c92:	bf00      	nop
    }

    //Master Command to OP.
    if(uart1_rx_IDLE_buf[2] == 0x99)
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <IOL_State_PreOP_Write_Channel+0xc0>)
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	2b99      	cmp	r3, #153	@ 0x99
 8000c9a:	d102      	bne.n	8000ca2 <IOL_State_PreOP_Write_Channel+0x8a>
    {
        stateIOLseq = IOL_OP;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <IOL_State_PreOP_Write_Channel+0xc4>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	701a      	strb	r2, [r3, #0]
    }
    
    IOL_ENABLE;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	@ 0x40
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000caa:	f002 fc07 	bl	80034bc <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <IOL_State_PreOP_Write_Channel+0xbc>)
 8000cb2:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <IOL_State_PreOP_Write_Channel+0xc8>)
 8000cb4:	f005 feee 	bl	8006a94 <HAL_UART_Transmit_IT>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <IOL_State_PreOP_Write_Channel+0xaa>
    {
        Error_Handler();
 8000cbe:	f000 fe40 	bl	8001942 <Error_Handler>
    }
    return ;
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000f9c 	.word	0x20000f9c
 8000cd4:	200003b4 	.word	0x200003b4
 8000cd8:	20000bc8 	.word	0x20000bc8
 8000cdc:	20001148 	.word	0x20001148
 8000ce0:	200010a4 	.word	0x200010a4

08000ce4 <IOL_State_PreOP_Process>:

static uint8_t IOL_State_PreOP_Process (void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

    switch ( IOL_M2D_rxpacket.rw)
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <IOL_State_PreOP_Process+0x24>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d004      	beq.n	8000cfa <IOL_State_PreOP_Process+0x16>
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d105      	bne.n	8000d00 <IOL_State_PreOP_Process+0x1c>
    {
        case IOL_RW_Read :
            IOL_State_PreOP_Read_Channel();
 8000cf4:	f7ff ff12 	bl	8000b1c <IOL_State_PreOP_Read_Channel>
            break;
 8000cf8:	e002      	b.n	8000d00 <IOL_State_PreOP_Process+0x1c>
        case IOL_RW_Write :
            IOL_State_PreOP_Write_Channel();
 8000cfa:	f7ff ff8d 	bl	8000c18 <IOL_State_PreOP_Write_Channel>
            break;
 8000cfe:	bf00      	nop
    }

    return ;
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000f9c 	.word	0x20000f9c

08000d0c <IOL_State_OP_Read_Channel>:


//  OP 모드 Read 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_OP_Read_Channel (void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    switch (IOL_M2D_rxpacket.commchannel)
 8000d10:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <IOL_State_OP_Read_Channel+0xd0>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d85c      	bhi.n	8000dd2 <IOL_State_OP_Read_Channel+0xc6>
 8000d18:	a201      	add	r2, pc, #4	@ (adr r2, 8000d20 <IOL_State_OP_Read_Channel+0x14>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000dcd 	.word	0x08000dcd
 8000d24:	08000d31 	.word	0x08000d31
 8000d28:	08000d37 	.word	0x08000d37
 8000d2c:	08000dc7 	.word	0x08000dc7
        case IOL_Channel_Process :
            
            break;

        case IOL_Channel_Page :
            IOL_State_OP_Page_ReadProcess();
 8000d30:	f000 fc46 	bl	80015c0 <IOL_State_OP_Page_ReadProcess>

            break;
 8000d34:	e04d      	b.n	8000dd2 <IOL_State_OP_Read_Channel+0xc6>

        case IOL_Channel_Diagnosis :
            #if 1 // 이벤트 테스트 중

            if ((ProcessDataIn_cnt >= 40) && (ProcessDataIn_cnt <= 59))
 8000d36:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <IOL_State_OP_Read_Channel+0xd4>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b27      	cmp	r3, #39	@ 0x27
 8000d3c:	d911      	bls.n	8000d62 <IOL_State_OP_Read_Channel+0x56>
 8000d3e:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <IOL_State_OP_Read_Channel+0xd4>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d44:	d80d      	bhi.n	8000d62 <IOL_State_OP_Read_Channel+0x56>
            {
                device_ProcessDataIn_Arr[0] = IOL_OP_EventTest2[IOL_OP_ISDU_OD_Res_cnt];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 8000d46:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <IOL_State_OP_Read_Channel+0xdc>)
 8000d4e:	5c9a      	ldrb	r2, [r3, r2]
 8000d50:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <IOL_State_OP_Read_Channel+0xe0>)
 8000d52:	701a      	strb	r2, [r3, #0]
                // device_ProcessDataIn_Arr[1] = IOL_OP_EventTest[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
                IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 8000d54:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e010      	b.n	8000d84 <IOL_State_OP_Read_Channel+0x78>
            }
            else if (ProcessDataIn_cnt >= 60)
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <IOL_State_OP_Read_Channel+0xd4>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d68:	d90c      	bls.n	8000d84 <IOL_State_OP_Read_Channel+0x78>
            {
                device_ProcessDataIn_Arr[0] = IOL_OP_EventTest3[IOL_OP_ISDU_OD_Res_cnt];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <IOL_State_OP_Read_Channel+0xe4>)
 8000d72:	5c9a      	ldrb	r2, [r3, r2]
 8000d74:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <IOL_State_OP_Read_Channel+0xe0>)
 8000d76:	701a      	strb	r2, [r3, #0]
                // device_ProcessDataIn_Arr[1] = IOL_OP_EventTest[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
                IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d82:	701a      	strb	r2, [r3, #0]
            }

            // if (IOL_OP_ISDU_OD_Res_cnt >= 10)
            if (IOL_OP_ISDU_OD_Res_cnt >= 4)
 8000d84:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d902      	bls.n	8000d92 <IOL_State_OP_Read_Channel+0x86>
            {
                // isdudata.isdu_od_writereq_flag = 0;
                IOL_OP_ISDU_OD_Res_cnt = 0;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <IOL_State_OP_Read_Channel+0xd8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
            }

            device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2106      	movs	r1, #6
 8000d96:	4815      	ldr	r0, [pc, #84]	@ (8000dec <IOL_State_OP_Read_Channel+0xe0>)
 8000d98:	f7ff fd1e 	bl	80007d8 <OP_CKS_GetChecksum>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <IOL_State_OP_Read_Channel+0xe0>)
 8000da2:	719a      	strb	r2, [r3, #6]
            IOL_ENABLE;
 8000da4:	2201      	movs	r2, #1
 8000da6:	2140      	movs	r1, #64	@ 0x40
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dac:	f002 fb86 	bl	80034bc <HAL_GPIO_WritePin>
    
            if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataIn_Arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 8000db0:	2207      	movs	r2, #7
 8000db2:	490e      	ldr	r1, [pc, #56]	@ (8000dec <IOL_State_OP_Read_Channel+0xe0>)
 8000db4:	480f      	ldr	r0, [pc, #60]	@ (8000df4 <IOL_State_OP_Read_Channel+0xe8>)
 8000db6:	f005 fe6d 	bl	8006a94 <HAL_UART_Transmit_IT>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d007      	beq.n	8000dd0 <IOL_State_OP_Read_Channel+0xc4>
            {
                Error_Handler();
 8000dc0:	f000 fdbf 	bl	8001942 <Error_Handler>
            {
                Error_Handler();
            }
            #endif

            break;
 8000dc4:	e004      	b.n	8000dd0 <IOL_State_OP_Read_Channel+0xc4>

        case IOL_Channel_ISDU :
            IOL_State_OP_ISDU_ReadProcess();
 8000dc6:	f000 faaf 	bl	8001328 <IOL_State_OP_ISDU_ReadProcess>

            break;
 8000dca:	e002      	b.n	8000dd2 <IOL_State_OP_Read_Channel+0xc6>
            break;
 8000dcc:	bf00      	nop
 8000dce:	e000      	b.n	8000dd2 <IOL_State_OP_Read_Channel+0xc6>
            break;
 8000dd0:	bf00      	nop
    }

    return ;
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000f9c 	.word	0x20000f9c
 8000de0:	200003ee 	.word	0x200003ee
 8000de4:	200003be 	.word	0x200003be
 8000de8:	20000054 	.word	0x20000054
 8000dec:	20000fac 	.word	0x20000fac
 8000df0:	20000058 	.word	0x20000058
 8000df4:	200010a4 	.word	0x200010a4

08000df8 <IOL_State_OP_Write_Channel>:

//  OP 모드 Write 인 경우 Channel 별로 프로세스 처리
static uint8_t IOL_State_OP_Write_Channel (void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
    switch (IOL_M2D_rxpacket.commchannel)
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <IOL_State_OP_Write_Channel+0x7c>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d833      	bhi.n	8000e6c <IOL_State_OP_Write_Channel+0x74>
 8000e04:	a201      	add	r2, pc, #4	@ (adr r2, 8000e0c <IOL_State_OP_Write_Channel+0x14>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e6b 	.word	0x08000e6b
 8000e10:	08000e1d 	.word	0x08000e1d
 8000e14:	08000e23 	.word	0x08000e23
 8000e18:	08000e5f 	.word	0x08000e5f
        case IOL_Channel_Process :
            
            break;

        case IOL_Channel_Page :
            IOL_State_OP_Page_WriteProcess();
 8000e1c:	f000 fc1a 	bl	8001654 <IOL_State_OP_Page_WriteProcess>

            break;
 8000e20:	e024      	b.n	8000e6c <IOL_State_OP_Write_Channel+0x74>

        case IOL_Channel_Diagnosis :
            #if 1 // event 테스트 중
            device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_Arr[0], (IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1), 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2104      	movs	r1, #4
 8000e26:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <IOL_State_OP_Write_Channel+0x80>)
 8000e28:	f7ff fcd6 	bl	80007d8 <OP_CKS_GetChecksum>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <IOL_State_OP_Write_Channel+0x80>)
 8000e32:	711a      	strb	r2, [r3, #4]
            IOL_ENABLE;
 8000e34:	2201      	movs	r2, #1
 8000e36:	2140      	movs	r1, #64	@ 0x40
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3c:	f002 fb3e 	bl	80034bc <HAL_GPIO_WritePin>
    
            if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_Arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 8000e40:	2205      	movs	r2, #5
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <IOL_State_OP_Write_Channel+0x80>)
 8000e44:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <IOL_State_OP_Write_Channel+0x84>)
 8000e46:	f005 fe25 	bl	8006a94 <HAL_UART_Transmit_IT>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <IOL_State_OP_Write_Channel+0x5c>
            {
                Error_Handler();
 8000e50:	f000 fd77 	bl	8001942 <Error_Handler>
            }
            DEBUG_GPIO_TOGGLE;
 8000e54:	2101      	movs	r1, #1
 8000e56:	480a      	ldr	r0, [pc, #40]	@ (8000e80 <IOL_State_OP_Write_Channel+0x88>)
 8000e58:	f002 fb48 	bl	80034ec <HAL_GPIO_TogglePin>
            #endif
            break;
 8000e5c:	e006      	b.n	8000e6c <IOL_State_OP_Write_Channel+0x74>

        case IOL_Channel_ISDU :
            IOL_Get_ISDU_WR_ODArr(uart1_rx_IDLE_buf);
 8000e5e:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <IOL_State_OP_Write_Channel+0x8c>)
 8000e60:	f000 f988 	bl	8001174 <IOL_Get_ISDU_WR_ODArr>
            IOL_State_OP_ISDU_WriteProcess();
 8000e64:	f000 fb46 	bl	80014f4 <IOL_State_OP_ISDU_WriteProcess>

            break;
 8000e68:	e000      	b.n	8000e6c <IOL_State_OP_Write_Channel+0x74>
            break;
 8000e6a:	bf00      	nop
    }

    return ;
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000f9c 	.word	0x20000f9c
 8000e78:	20000fa4 	.word	0x20000fa4
 8000e7c:	200010a4 	.word	0x200010a4
 8000e80:	48000400 	.word	0x48000400
 8000e84:	20000bc8 	.word	0x20000bc8

08000e88 <IOL_State_OP_Process>:

static uint8_t IOL_State_OP_Process (void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
    switch ( IOL_M2D_rxpacket.rw)
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <IOL_State_OP_Process+0x24>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <IOL_State_OP_Process+0x16>
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <IOL_State_OP_Process+0x1c>
    {
        case IOL_RW_Read :
            IOL_State_OP_Read_Channel();
 8000e98:	f7ff ff38 	bl	8000d0c <IOL_State_OP_Read_Channel>
            break;
 8000e9c:	e002      	b.n	8000ea4 <IOL_State_OP_Process+0x1c>
        case IOL_RW_Write :
            IOL_State_OP_Write_Channel();
 8000e9e:	f7ff ffab 	bl	8000df8 <IOL_State_OP_Write_Channel>
            break;
 8000ea2:	bf00      	nop
    }

    return ;
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000f9c 	.word	0x20000f9c

08000eb0 <IOL_Reboot_Check>:


uint8_t IOL_Reboot_Check (void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
        Check_State = stateIOLseq;
    }

    return Check_State;
    #else
    if (stateIOLseq == IOL_OP)
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <IOL_Reboot_Check+0x78>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d131      	bne.n	8000f20 <IOL_Reboot_Check+0x70>
    {
        if (RxIdle_Flag)
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <IOL_Reboot_Check+0x7c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <IOL_Reboot_Check+0x1c>
        {
            RxIdle_Flag = 0;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <IOL_Reboot_Check+0x7c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
        }
    }
    
    // UART1_RxEnable();
    
    return ;
 8000eca:	e029      	b.n	8000f20 <IOL_Reboot_Check+0x70>
            stateIOLseq = IOL_StartUp;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <IOL_Reboot_Check+0x78>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
            HAL_UART_DeInit(&huart1);
 8000ed2:	4817      	ldr	r0, [pc, #92]	@ (8000f30 <IOL_Reboot_Check+0x80>)
 8000ed4:	f005 fd9e 	bl	8006a14 <HAL_UART_DeInit>
            uart_rx_IDLE_TotalCnt = 0;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <IOL_Reboot_Check+0x84>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
            Page1_seq = 0;
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <IOL_Reboot_Check+0x88>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
            PreOP_seq_cnt = 0;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <IOL_Reboot_Check+0x8c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
            IOL_OP_OD_Page_Res_cnt = 0;
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <IOL_Reboot_Check+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
            MX_USART1_UART_Init();
 8000ef0:	f001 f8ea 	bl	80020c8 <MX_USART1_UART_Init>
            HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000ef4:	2264      	movs	r2, #100	@ 0x64
 8000ef6:	4913      	ldr	r1, [pc, #76]	@ (8000f44 <IOL_Reboot_Check+0x94>)
 8000ef8:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <IOL_Reboot_Check+0x80>)
 8000efa:	f007 fb39 	bl	8008570 <HAL_UARTEx_ReceiveToIdle_DMA>
            __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <IOL_Reboot_Check+0x98>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <IOL_Reboot_Check+0x98>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0204 	bic.w	r2, r2, #4
 8000f0c:	601a      	str	r2, [r3, #0]
            IOL_Rx_IDLEFlag = 1;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <IOL_Reboot_Check+0x9c>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
            printf("IO-Link Master Disconnected.\r\n");
 8000f14:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <IOL_Reboot_Check+0xa0>)
 8000f16:	f00b fcf3 	bl	800c900 <puts>
            printf("OP to StartUp.\r\n");
 8000f1a:	480e      	ldr	r0, [pc, #56]	@ (8000f54 <IOL_Reboot_Check+0xa4>)
 8000f1c:	f00b fcf0 	bl	800c900 <puts>
    return ;
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
    #endif
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20001148 	.word	0x20001148
 8000f2c:	200003ec 	.word	0x200003ec
 8000f30:	200010a4 	.word	0x200010a4
 8000f34:	20000bc4 	.word	0x20000bc4
 8000f38:	200003a4 	.word	0x200003a4
 8000f3c:	200003a5 	.word	0x200003a5
 8000f40:	200003ef 	.word	0x200003ef
 8000f44:	20000bc8 	.word	0x20000bc8
 8000f48:	20001044 	.word	0x20001044
 8000f4c:	200003ed 	.word	0x200003ed
 8000f50:	0800d5fc 	.word	0x0800d5fc
 8000f54:	0800d61c 	.word	0x0800d61c

08000f58 <IOL_StateM_Process>:

uint8_t IOL_StateM_Process (void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    switch (stateIOLseq)
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <IOL_StateM_Process+0x44>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d00c      	beq.n	8000f7e <IOL_StateM_Process+0x26>
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	dc0d      	bgt.n	8000f84 <IOL_StateM_Process+0x2c>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <IOL_StateM_Process+0x1a>
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d003      	beq.n	8000f78 <IOL_StateM_Process+0x20>
 8000f70:	e008      	b.n	8000f84 <IOL_StateM_Process+0x2c>
    {
        case IOL_StartUp :
            IOL_State_StartUp();
 8000f72:	f7ff fd91 	bl	8000a98 <IOL_State_StartUp>
            break;
 8000f76:	e005      	b.n	8000f84 <IOL_StateM_Process+0x2c>
        case IOL_PreOP :
            IOL_State_PreOP_Process();
 8000f78:	f7ff feb4 	bl	8000ce4 <IOL_State_PreOP_Process>
            break;
 8000f7c:	e002      	b.n	8000f84 <IOL_StateM_Process+0x2c>
        case IOL_OP :
            // IOL_Get_ISDU_WR_ODArr(uart1_rx_IDLE_buf);
            // stateIOLseq = IOL_Reboot_Check(uart1_rx_IDLE_buf);
            IOL_State_OP_Process();
 8000f7e:	f7ff ff83 	bl	8000e88 <IOL_State_OP_Process>
            break;
 8000f82:	bf00      	nop
    }
    #if 1 // debug Test 
    
    Test_M2D_TempValue = uart1_rx_IDLE_buf[3];
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <IOL_StateM_Process+0x48>)
 8000f86:	78da      	ldrb	r2, [r3, #3]
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <IOL_StateM_Process+0x4c>)
 8000f8a:	701a      	strb	r2, [r3, #0]
    DEBUG_GPIO_TOGGLE;
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <IOL_StateM_Process+0x50>)
 8000f90:	f002 faac 	bl	80034ec <HAL_GPIO_TogglePin>
    #endif
    return ;
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20001148 	.word	0x20001148
 8000fa0:	20000bc8 	.word	0x20000bc8
 8000fa4:	20000c2c 	.word	0x20000c2c
 8000fa8:	48000400 	.word	0x48000400

08000fac <IOL_Parse_Rx_data>:

// 마스터로부터 받은 데이터를 분석하기 위해 파싱하여 해당 구조체멤버에 넣어줌
uint8_t IOL_Parse_Rx_data (uint8_t * pData)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    IOL_M2D_rxpacket.rw = Decode_MC_ReadWrite(*pData);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff faf9 	bl	80005b0 <Decode_MC_ReadWrite>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <IOL_Parse_Rx_data+0x74>)
 8000fc4:	701a      	strb	r2, [r3, #0]
    IOL_M2D_rxpacket.commchannel = Decode_MC_CommunicationChannel(*pData);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fb0e 	bl	80005ec <Decode_MC_CommunicationChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <IOL_Parse_Rx_data+0x74>)
 8000fd6:	705a      	strb	r2, [r3, #1]
    IOL_M2D_rxpacket.addr = Decode_MC_Address(*pData);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fb31 	bl	8000644 <Decode_MC_Address>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <IOL_Parse_Rx_data+0x74>)
 8000fe8:	709a      	strb	r2, [r3, #2]

    IOL_M2D_rxpacket.mseqtype = Decode_CKT_Type(*(++pData));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3301      	adds	r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fb38 	bl	800066a <Decode_CKT_Type>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <IOL_Parse_Rx_data+0x74>)
 8001000:	70da      	strb	r2, [r3, #3]
    IOL_M2D_rxpacket.ckt = Decode_CKT_Checksum(*pData);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fb41 	bl	800068e <Decode_CKT_Checksum>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <IOL_Parse_Rx_data+0x74>)
 8001012:	711a      	strb	r2, [r3, #4]

    return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000f9c 	.word	0x20000f9c

08001024 <IOL_Print_ParsingM2Ddata>:

void IOL_Print_ParsingM2Ddata (void)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b083      	sub	sp, #12
 8001028:	af02      	add	r7, sp, #8
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <IOL_Print_ParsingM2Ddata+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
                                                                    , IOL_M2D_rxpacket.commchannel
 8001030:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <IOL_Print_ParsingM2Ddata+0x44>)
 8001032:	785b      	ldrb	r3, [r3, #1]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8001034:	4618      	mov	r0, r3
                                                                    , IOL_M2D_rxpacket.addr
 8001036:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <IOL_Print_ParsingM2Ddata+0x44>)
 8001038:	789b      	ldrb	r3, [r3, #2]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 800103a:	461c      	mov	r4, r3
                                                                    , IOL_M2D_rxpacket.mseqtype
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <IOL_Print_ParsingM2Ddata+0x44>)
 800103e:	78db      	ldrb	r3, [r3, #3]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8001040:	461a      	mov	r2, r3
                                                                    , IOL_M2D_rxpacket.ckt);
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <IOL_Print_ParsingM2Ddata+0x44>)
 8001044:	791b      	ldrb	r3, [r3, #4]
    printf("M2D Rx Data Parsing :  %02X, %02X, %02X, %02X, %02X\r\n", IOL_M2D_rxpacket.rw
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	9200      	str	r2, [sp, #0]
 800104a:	4623      	mov	r3, r4
 800104c:	4602      	mov	r2, r0
 800104e:	4807      	ldr	r0, [pc, #28]	@ (800106c <IOL_Print_ParsingM2Ddata+0x48>)
 8001050:	f00b fbee 	bl	800c830 <iprintf>

    printf("Device State : %d\r\n", stateIOLseq);
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <IOL_Print_ParsingM2Ddata+0x4c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	@ (8001074 <IOL_Print_ParsingM2Ddata+0x50>)
 800105c:	f00b fbe8 	bl	800c830 <iprintf>
}
 8001060:	bf00      	nop
 8001062:	3704      	adds	r7, #4
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	20000f9c 	.word	0x20000f9c
 800106c:	0800d62c 	.word	0x0800d62c
 8001070:	20001148 	.word	0x20001148
 8001074:	0800d664 	.word	0x0800d664

08001078 <IOL_Get_ISDU_Iservice>:
    {0xbd, 0x00},
};

//IO-Link ISDU 의 Iservice
static uint8_t IOL_Get_ISDU_Iservice (uint8_t * pData)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    uint8_t first_od = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
    // IOL_ISDUPacket_t isdudata;

    first_od = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	799b      	ldrb	r3, [r3, #6]
 8001088:	73fb      	strb	r3, [r7, #15]
    first_od = (first_od >> 4 ) & 0x0F;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	73fb      	strb	r3, [r7, #15]

    isdudata.iservice = first_od;
 8001090:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <IOL_Get_ISDU_Iservice+0x30>)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	7013      	strb	r3, [r2, #0]
  
    return isdudata.iservice;
 8001096:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <IOL_Get_ISDU_Iservice+0x30>)
 8001098:	781b      	ldrb	r3, [r3, #0]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000fb4 	.word	0x20000fb4

080010ac <IOL_Get_ISDU_ExtLength>:

// IO-lInk ISDU 의 extLength 
static uint8_t IOL_Get_ISDU_ExtLength (uint8_t * pData)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    uint8_t od_extlength = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]

    od_extlength = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH];
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	79db      	ldrb	r3, [r3, #7]
 80010bc:	73fb      	strb	r3, [r7, #15]
    
    return od_extlength;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <IOL_Get_ISDU_Length>:

// IO-Link ISDU 의 Length
static uint8_t IOL_Get_ISDU_Length (uint8_t * pData)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    uint8_t first_od = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
    uint8_t extlength = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	73bb      	strb	r3, [r7, #14]
    // IOL_ISDUPacket_t isdudata;

    first_od = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	799b      	ldrb	r3, [r3, #6]
 80010e0:	73fb      	strb	r3, [r7, #15]
    extlength = first_od & 0x0F;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	73bb      	strb	r3, [r7, #14]

    // extlength 있는 경우
    if (extlength == 1)
 80010ea:	7bbb      	ldrb	r3, [r7, #14]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d10b      	bne.n	8001108 <IOL_Get_ISDU_Length+0x3c>
    {
        extlength_flag = 1;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <IOL_Get_ISDU_Length+0x50>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
        extlength = IOL_Get_ISDU_ExtLength(pData);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffd8 	bl	80010ac <IOL_Get_ISDU_ExtLength>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73bb      	strb	r3, [r7, #14]
        isdudata.length = extlength;
 8001100:	4a07      	ldr	r2, [pc, #28]	@ (8001120 <IOL_Get_ISDU_Length+0x54>)
 8001102:	7bbb      	ldrb	r3, [r7, #14]
 8001104:	7053      	strb	r3, [r2, #1]
 8001106:	e002      	b.n	800110e <IOL_Get_ISDU_Length+0x42>
    }
    else // extlegnth 없는 경우
    {
        isdudata.length = extlength;
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <IOL_Get_ISDU_Length+0x54>)
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	7053      	strb	r3, [r2, #1]
    }

    return isdudata.length;
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <IOL_Get_ISDU_Length+0x54>)
 8001110:	785b      	ldrb	r3, [r3, #1]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200003bd 	.word	0x200003bd
 8001120:	20000fb4 	.word	0x20000fb4

08001124 <IOL_Get_ISDU_Index>:

static uint8_t IOL_Get_ISDU_Index (uint8_t * pData)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    //extlegnth 있는 경우
    if (extlength_flag == 1)
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <IOL_Get_ISDU_Index+0x48>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d107      	bne.n	8001144 <IOL_Get_ISDU_Index+0x20>
    {
        isdudata.index = isdudata.isdu_od[2];
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <IOL_Get_ISDU_Index+0x4c>)
 8001136:	7b9a      	ldrb	r2, [r3, #14]
 8001138:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <IOL_Get_ISDU_Index+0x4c>)
 800113a:	709a      	strb	r2, [r3, #2]
        extlength_flag = 0;
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <IOL_Get_ISDU_Index+0x48>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e003      	b.n	800114c <IOL_Get_ISDU_Index+0x28>
    }
    else // extlength 없는 경우
    {
        isdudata.index = isdudata.isdu_od[1];
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <IOL_Get_ISDU_Index+0x4c>)
 8001146:	7b5a      	ldrb	r2, [r3, #13]
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <IOL_Get_ISDU_Index+0x4c>)
 800114a:	709a      	strb	r2, [r3, #2]
    }

    // 마스터에서 8bit index 쓰기 요청이 있는 경우
    if(isdudata.iservice == 0x01)
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <IOL_Get_ISDU_Index+0x4c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d103      	bne.n	800115c <IOL_Get_ISDU_Index+0x38>
    {
        // 8bit 쓰기 요청 플래그 셋
        isdudata.isdu_od_writeReq8bit_flag = 1;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <IOL_Get_ISDU_Index+0x4c>)
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }

    return isdudata.index;
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <IOL_Get_ISDU_Index+0x4c>)
 800115e:	789b      	ldrb	r3, [r3, #2]
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	200003bd 	.word	0x200003bd
 8001170:	20000fb4 	.word	0x20000fb4

08001174 <IOL_Get_ISDU_WR_ODArr>:

// ISDU Write OD 데이터 수신 처리
uint8_t IOL_Get_ISDU_WR_ODArr (uint8_t * pData)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
    
    isdudata.isdu_od[isdudata.isdu_od_cnt++] = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1];
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800117e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	b2d1      	uxtb	r1, r2
 8001186:	4a1e      	ldr	r2, [pc, #120]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001188:	f882 103e 	strb.w	r1, [r2, #62]	@ 0x3e
 800118c:	4619      	mov	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	799a      	ldrb	r2, [r3, #6]
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 8001194:	440b      	add	r3, r1
 8001196:	731a      	strb	r2, [r3, #12]
    isdudata.isdu_od[isdudata.isdu_od_cnt++] = pData[IOL_OP_ISDU_IN_PROCESSDATALENGTH];
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 800119a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	b2d1      	uxtb	r1, r2
 80011a2:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80011a4:	f882 103e 	strb.w	r1, [r2, #62]	@ 0x3e
 80011a8:	4619      	mov	r1, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	79da      	ldrb	r2, [r3, #7]
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80011b0:	440b      	add	r3, r1
 80011b2:	731a      	strb	r2, [r3, #12]
    
    // 첫 OD 데이터 수신시 Iservice값과 ISDU의 데이터 길이를 구하기 위함.
    if (isdudata.isdu_od_cnt == 2)
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80011b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d105      	bne.n	80011ca <IOL_Get_ISDU_WR_ODArr+0x56>
    {
        IOL_Get_ISDU_Iservice(pData);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff5a 	bl	8001078 <IOL_Get_ISDU_Iservice>
        IOL_Get_ISDU_Length(pData);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff81 	bl	80010cc <IOL_Get_ISDU_Length>
    }

    // OD 데이터의 길이까지 데이터 쌓은 경우.
    if (isdudata.isdu_od_cnt >= isdudata.length)
 80011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80011cc:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d30d      	bcc.n	80011f4 <IOL_Get_ISDU_WR_ODArr+0x80>
    {
        IOL_Get_ISDU_Index(pData);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffa3 	bl	8001124 <IOL_Get_ISDU_Index>

        isdudata.length = 0;
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	705a      	strb	r2, [r3, #1]
        isdudata.isdu_od_cnt = 0; // od length clear
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        isdudata.isdu_od_rxcplt = 1;
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <IOL_Get_ISDU_WR_ODArr+0x8c>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    }

    return ;
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000fb4 	.word	0x20000fb4

08001204 <IOL_Clear_PDBuffer>:
    return ;
}

// IO-Link 송/수신 데이터를 업데이트 및 갱신하기 전 송신완료시 버퍼를 클리어해 준다
void IOL_Clear_PDBuffer (void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    memset(device_ProcessDataIn_Arr, 0, sizeof(device_ProcessDataIn_Arr));
 8001208:	2207      	movs	r2, #7
 800120a:	2100      	movs	r1, #0
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <IOL_Clear_PDBuffer+0x1c>)
 800120e:	f00b fc57 	bl	800cac0 <memset>
    memset(device_ProcessDataOut_Arr, 0, sizeof(device_ProcessDataOut_Arr));
 8001212:	2205      	movs	r2, #5
 8001214:	2100      	movs	r1, #0
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <IOL_Clear_PDBuffer+0x20>)
 8001218:	f00b fc52 	bl	800cac0 <memset>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000fac 	.word	0x20000fac
 8001224:	20000fa4 	.word	0x20000fa4

08001228 <IOL_Make_Resp_PDOD>:
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
}

// 각 index 응답 송신하는 부분을 모듈화하기 위한 함수
static void IOL_Make_Resp_PDOD (uint8_t * respArray, uint8_t size)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
    uint8_t (* Resp_IndexArray)[IOL_OP_ISDU_OD_LENGTH];
    uint8_t od_size = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]

    Resp_IndexArray = respArray;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60bb      	str	r3, [r7, #8]
    od_size = size;
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	73fb      	strb	r3, [r7, #15]

    device_ProcessDataIn_Arr[0] = Resp_IndexArray[IOL_OP_ISDU_OD_Res_cnt][0];   // OD 데이터를  Index에 대한 응답 ISDU 구조의 사이즈에 맞게 나눠서 보내기 위함  
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <IOL_Make_Resp_PDOD+0x78>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	4413      	add	r3, r2
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <IOL_Make_Resp_PDOD+0x7c>)
 800124e:	701a      	strb	r2, [r3, #0]
    device_ProcessDataIn_Arr[1] = Resp_IndexArray[IOL_OP_ISDU_OD_Res_cnt][1];   // 현재 씬그립 디바이스의 IODD는 2 octet.
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <IOL_Make_Resp_PDOD+0x78>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	4413      	add	r3, r2
 800125a:	785a      	ldrb	r2, [r3, #1]
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <IOL_Make_Resp_PDOD+0x7c>)
 800125e:	705a      	strb	r2, [r3, #1]
    IOL_OP_ISDU_OD_Res_cnt++;        // ISDU 요청에 대한 Index 응답의 사이즈에 맞게 나눠서 보내기 위한 카운트값.
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <IOL_Make_Resp_PDOD+0x78>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <IOL_Make_Resp_PDOD+0x78>)
 800126a:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_ISDU_OD_Res_cnt >= od_size)
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <IOL_Make_Resp_PDOD+0x78>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	429a      	cmp	r2, r3
 8001274:	d806      	bhi.n	8001284 <IOL_Make_Resp_PDOD+0x5c>
    {
        isdudata.isdu_od_writereq_flag = 0;
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <IOL_Make_Resp_PDOD+0x80>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        IOL_OP_ISDU_OD_Res_cnt = 0;
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <IOL_Make_Resp_PDOD+0x78>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    }

    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2106      	movs	r1, #6
 8001288:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <IOL_Make_Resp_PDOD+0x7c>)
 800128a:	f7ff faa5 	bl	80007d8 <OP_CKS_GetChecksum>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <IOL_Make_Resp_PDOD+0x7c>)
 8001294:	719a      	strb	r2, [r3, #6]
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200003be 	.word	0x200003be
 80012a4:	20000fac 	.word	0x20000fac
 80012a8:	20000fb4 	.word	0x20000fb4

080012ac <IOL_Make_Resp_default>:
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
}
#else
static void IOL_Make_Resp_default (void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    // device_ProcessDataIn_arr[OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt++; // Test cnt Value 
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <IOL_Make_Resp_default+0x74>)
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <IOL_Make_Resp_default+0x78>)
 80012b6:	715a      	strb	r2, [r3, #5]

    if (ProcessDataIn_cnt == 40)
 80012b8:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <IOL_Make_Resp_default+0x74>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b28      	cmp	r3, #40	@ 0x28
 80012be:	d10f      	bne.n	80012e0 <IOL_Make_Resp_default+0x34>
    {
        ProcessDataIn_cnt++;
 80012c0:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <IOL_Make_Resp_default+0x74>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <IOL_Make_Resp_default+0x74>)
 80012ca:	701a      	strb	r2, [r3, #0]
        device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 1); 
 80012cc:	2201      	movs	r2, #1
 80012ce:	2106      	movs	r1, #6
 80012d0:	4814      	ldr	r0, [pc, #80]	@ (8001324 <IOL_Make_Resp_default+0x78>)
 80012d2:	f7ff fa81 	bl	80007d8 <OP_CKS_GetChecksum>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <IOL_Make_Resp_default+0x78>)
 80012dc:	719a      	strb	r2, [r3, #6]
    else
    {
        device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
    }
    
}
 80012de:	e01c      	b.n	800131a <IOL_Make_Resp_default+0x6e>
    else if (ProcessDataIn_cnt == 60)
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <IOL_Make_Resp_default+0x74>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b3c      	cmp	r3, #60	@ 0x3c
 80012e6:	d10f      	bne.n	8001308 <IOL_Make_Resp_default+0x5c>
        ProcessDataIn_cnt++;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <IOL_Make_Resp_default+0x74>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <IOL_Make_Resp_default+0x74>)
 80012f2:	701a      	strb	r2, [r3, #0]
        device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 1); 
 80012f4:	2201      	movs	r2, #1
 80012f6:	2106      	movs	r1, #6
 80012f8:	480a      	ldr	r0, [pc, #40]	@ (8001324 <IOL_Make_Resp_default+0x78>)
 80012fa:	f7ff fa6d 	bl	80007d8 <OP_CKS_GetChecksum>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <IOL_Make_Resp_default+0x78>)
 8001304:	719a      	strb	r2, [r3, #6]
}
 8001306:	e008      	b.n	800131a <IOL_Make_Resp_default+0x6e>
        device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2106      	movs	r1, #6
 800130c:	4805      	ldr	r0, [pc, #20]	@ (8001324 <IOL_Make_Resp_default+0x78>)
 800130e:	f7ff fa63 	bl	80007d8 <OP_CKS_GetChecksum>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <IOL_Make_Resp_default+0x78>)
 8001318:	719a      	strb	r2, [r3, #6]
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200003ee 	.word	0x200003ee
 8001324:	20000fac 	.word	0x20000fac

08001328 <IOL_State_OP_ISDU_ReadProcess>:
    device_ProcessDataIn_Arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataIn_Arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
}

// ISDU OD Read Process
uint8_t IOL_State_OP_ISDU_ReadProcess (void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
            //     break;
        }
        // device_ProcessDataOut_arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
    }
    #else
    if (isdudata.isdu_od_writereq_flag == 1)
 800132c:	4b63      	ldr	r3, [pc, #396]	@ (80014bc <IOL_State_OP_ISDU_ReadProcess+0x194>)
 800132e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001332:	2b01      	cmp	r3, #1
 8001334:	f040 80ac 	bne.w	8001490 <IOL_State_OP_ISDU_ReadProcess+0x168>
    {
        // isdudata.isdudata.isdu_od_writereq_flag = 0;

        switch (isdudata.index)
 8001338:	4b60      	ldr	r3, [pc, #384]	@ (80014bc <IOL_State_OP_ISDU_ReadProcess+0x194>)
 800133a:	789b      	ldrb	r3, [r3, #2]
 800133c:	3b10      	subs	r3, #16
 800133e:	2b30      	cmp	r3, #48	@ 0x30
 8001340:	f200 80a8 	bhi.w	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>
 8001344:	a201      	add	r2, pc, #4	@ (adr r2, 800134c <IOL_State_OP_ISDU_ReadProcess+0x24>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	08001473 	.word	0x08001473
 8001350:	08001495 	.word	0x08001495
 8001354:	08001411 	.word	0x08001411
 8001358:	0800142d 	.word	0x0800142d
 800135c:	08001495 	.word	0x08001495
 8001360:	0800141b 	.word	0x0800141b
 8001364:	0800147d 	.word	0x0800147d
 8001368:	08001487 	.word	0x08001487
 800136c:	08001437 	.word	0x08001437
 8001370:	08001441 	.word	0x08001441
 8001374:	0800144b 	.word	0x0800144b
 8001378:	08001495 	.word	0x08001495
 800137c:	08001495 	.word	0x08001495
 8001380:	08001495 	.word	0x08001495
 8001384:	08001495 	.word	0x08001495
 8001388:	08001495 	.word	0x08001495
 800138c:	08001495 	.word	0x08001495
 8001390:	08001495 	.word	0x08001495
 8001394:	08001495 	.word	0x08001495
 8001398:	08001495 	.word	0x08001495
 800139c:	0800145f 	.word	0x0800145f
 80013a0:	08001469 	.word	0x08001469
 80013a4:	08001495 	.word	0x08001495
 80013a8:	08001495 	.word	0x08001495
 80013ac:	08001495 	.word	0x08001495
 80013b0:	08001495 	.word	0x08001495
 80013b4:	08001495 	.word	0x08001495
 80013b8:	08001495 	.word	0x08001495
 80013bc:	08001495 	.word	0x08001495
 80013c0:	08001495 	.word	0x08001495
 80013c4:	08001495 	.word	0x08001495
 80013c8:	08001495 	.word	0x08001495
 80013cc:	08001495 	.word	0x08001495
 80013d0:	08001495 	.word	0x08001495
 80013d4:	08001495 	.word	0x08001495
 80013d8:	08001495 	.word	0x08001495
 80013dc:	08001495 	.word	0x08001495
 80013e0:	08001495 	.word	0x08001495
 80013e4:	08001495 	.word	0x08001495
 80013e8:	08001495 	.word	0x08001495
 80013ec:	08001495 	.word	0x08001495
 80013f0:	08001495 	.word	0x08001495
 80013f4:	08001495 	.word	0x08001495
 80013f8:	08001495 	.word	0x08001495
 80013fc:	08001495 	.word	0x08001495
 8001400:	08001495 	.word	0x08001495
 8001404:	08001495 	.word	0x08001495
 8001408:	08001495 	.word	0x08001495
 800140c:	08001455 	.word	0x08001455
        {
            case IOL_Index_ProductName :
                // IOL_Make_Resp_ProductName();
                IOL_Make_Resp_PDOD(IOL_OP_ProductName, IOL_OP_ISDU_PRODUCTNAME_LENGTH);
 8001410:	210d      	movs	r1, #13
 8001412:	482b      	ldr	r0, [pc, #172]	@ (80014c0 <IOL_State_OP_ISDU_ReadProcess+0x198>)
 8001414:	f7ff ff08 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 8001418:	e03c      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_SerialNumber :
                DEBUG_GPIO_TOGGLE;
 800141a:	2101      	movs	r1, #1
 800141c:	4829      	ldr	r0, [pc, #164]	@ (80014c4 <IOL_State_OP_ISDU_ReadProcess+0x19c>)
 800141e:	f002 f865 	bl	80034ec <HAL_GPIO_TogglePin>
                // IOL_Make_Resp_SerialNumber();
                IOL_Make_Resp_PDOD(IOL_OP_SerialNumber, IOL_OP_ISDU_SERIALNUMBER_LENGTH);
 8001422:	2105      	movs	r1, #5
 8001424:	4828      	ldr	r0, [pc, #160]	@ (80014c8 <IOL_State_OP_ISDU_ReadProcess+0x1a0>)
 8001426:	f7ff feff 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 800142a:	e033      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>
            //     break;
            // case IOL_Index_ProductText :
            //     break;
            case IOL_Index_ProductID :
                // IOL_Make_Resp_ProductID();
                IOL_Make_Resp_PDOD(IOL_OP_ProductID, IOL_OP_ISDU_PRODUCTID_LENGTH);
 800142c:	2106      	movs	r1, #6
 800142e:	4827      	ldr	r0, [pc, #156]	@ (80014cc <IOL_State_OP_ISDU_ReadProcess+0x1a4>)
 8001430:	f7ff fefa 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 8001434:	e02e      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_ApplicationSpecificTag :
                // IOL_Make_Resp_ApplicationSpecificTag();
                IOL_Make_Resp_PDOD(IOL_OP_ApplicationSpecificTag, IOL_OP_ISDU_APPLICATIONSPECIFICTAG_LENGTH);
 8001436:	2112      	movs	r1, #18
 8001438:	4825      	ldr	r0, [pc, #148]	@ (80014d0 <IOL_State_OP_ISDU_ReadProcess+0x1a8>)
 800143a:	f7ff fef5 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 800143e:	e029      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_FunctionTag :
                // IOL_Make_Resp_ApplicationSpecificTag();
                IOL_Make_Resp_PDOD(IOL_OP_ApplicationSpecificTag, IOL_OP_ISDU_APPLICATIONSPECIFICTAG_LENGTH);
 8001440:	2112      	movs	r1, #18
 8001442:	4823      	ldr	r0, [pc, #140]	@ (80014d0 <IOL_State_OP_ISDU_ReadProcess+0x1a8>)
 8001444:	f7ff fef0 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 8001448:	e024      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>
                
            case IOL_Index_LocationTag :
                // IOL_Make_Resp_ApplicationSpecificTag();
                IOL_Make_Resp_PDOD(IOL_OP_ApplicationSpecificTag, IOL_OP_ISDU_APPLICATIONSPECIFICTAG_LENGTH);
 800144a:	2112      	movs	r1, #18
 800144c:	4820      	ldr	r0, [pc, #128]	@ (80014d0 <IOL_State_OP_ISDU_ReadProcess+0x1a8>)
 800144e:	f7ff feeb 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 8001452:	e01f      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_PreferredIndex :
                // DEBUG_GPIO_TOGGLE;
                // IOL_Make_Resp_ExampleParameter();
                IOL_Make_Resp_PDOD(IOL_OP_ExampleParameter, IOL_OP_ISDU_EXAMPLEPARAMETER_LENGTH);
 8001454:	2102      	movs	r1, #2
 8001456:	481f      	ldr	r0, [pc, #124]	@ (80014d4 <IOL_State_OP_ISDU_ReadProcess+0x1ac>)
 8001458:	f7ff fee6 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 800145c:	e01a      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_DeviceStatus :
                // IOL_Make_Resp_DeviceStatus();
                IOL_Make_Resp_PDOD(IOL_OP_DeviceStatus, IOL_OP_ISDU_DEVICESTATUS_LENGTH);
 800145e:	2102      	movs	r1, #2
 8001460:	481d      	ldr	r0, [pc, #116]	@ (80014d8 <IOL_State_OP_ISDU_ReadProcess+0x1b0>)
 8001462:	f7ff fee1 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 8001466:	e015      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_DetailedDeviceStatus :
                // IOL_Make_Resp_DetailedDeviceStatus();
                IOL_Make_Resp_PDOD(IOL_OP_DetailedDeviceStatus, IOL_OP_ISDU_DETAILEDDEVICESTATUS_LENGTH);
 8001468:	2103      	movs	r1, #3
 800146a:	481c      	ldr	r0, [pc, #112]	@ (80014dc <IOL_State_OP_ISDU_ReadProcess+0x1b4>)
 800146c:	f7ff fedc 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 8001470:	e010      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>
            
            case IOL_Index_VendorName :
                // IOL_Make_Resp_VendorName();
                IOL_Make_Resp_PDOD(IOL_OP_VendorName, IOL_OP_ISDU_VENDORNAME_LENGTH);
 8001472:	2122      	movs	r1, #34	@ 0x22
 8001474:	481a      	ldr	r0, [pc, #104]	@ (80014e0 <IOL_State_OP_ISDU_ReadProcess+0x1b8>)
 8001476:	f7ff fed7 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 800147a:	e00b      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>

            case IOL_Index_HardwareRevision :
                // IOL_Make_Resp_HWRevision();
                IOL_Make_Resp_PDOD(IOL_OP_HWRevision, IOL_OP_ISDU_HWREVISION_LENGTH);
 800147c:	2122      	movs	r1, #34	@ 0x22
 800147e:	4819      	ldr	r0, [pc, #100]	@ (80014e4 <IOL_State_OP_ISDU_ReadProcess+0x1bc>)
 8001480:	f7ff fed2 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 8001484:	e006      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>
            
            case IOL_Index_FirmwareRevision :
                // IOL_Make_Resp_FWRevision();
                IOL_Make_Resp_PDOD(IOL_OP_FWRevision, IOL_OP_ISDU_FWREVISION_LENGTH);
 8001486:	2122      	movs	r1, #34	@ 0x22
 8001488:	4817      	ldr	r0, [pc, #92]	@ (80014e8 <IOL_State_OP_ISDU_ReadProcess+0x1c0>)
 800148a:	f7ff fecd 	bl	8001228 <IOL_Make_Resp_PDOD>
                break;
 800148e:	e001      	b.n	8001494 <IOL_State_OP_ISDU_ReadProcess+0x16c>
        // device_ProcessDataOut_arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
    }
    #endif
    else
    {
        IOL_Make_Resp_default();
 8001490:	f7ff ff0c 	bl	80012ac <IOL_Make_Resp_default>
    }

    IOL_ENABLE;
 8001494:	2201      	movs	r2, #1
 8001496:	2140      	movs	r1, #64	@ 0x40
 8001498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149c:	f002 f80e 	bl	80034bc <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataIn_Arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 80014a0:	2207      	movs	r2, #7
 80014a2:	4912      	ldr	r1, [pc, #72]	@ (80014ec <IOL_State_OP_ISDU_ReadProcess+0x1c4>)
 80014a4:	4812      	ldr	r0, [pc, #72]	@ (80014f0 <IOL_State_OP_ISDU_ReadProcess+0x1c8>)
 80014a6:	f005 faf5 	bl	8006a94 <HAL_UART_Transmit_IT>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <IOL_State_OP_ISDU_ReadProcess+0x18c>
    {
        Error_Handler();
 80014b0:	f000 fa47 	bl	8001942 <Error_Handler>
    }

    return ;
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000fb4 	.word	0x20000fb4
 80014c0:	2000005c 	.word	0x2000005c
 80014c4:	48000400 	.word	0x48000400
 80014c8:	20000078 	.word	0x20000078
 80014cc:	200000a8 	.word	0x200000a8
 80014d0:	20000084 	.word	0x20000084
 80014d4:	200000b4 	.word	0x200000b4
 80014d8:	200000c0 	.word	0x200000c0
 80014dc:	200000c4 	.word	0x200000c4
 80014e0:	200000cc 	.word	0x200000cc
 80014e4:	20000110 	.word	0x20000110
 80014e8:	20000154 	.word	0x20000154
 80014ec:	20000fac 	.word	0x20000fac
 80014f0:	200010a4 	.word	0x200010a4

080014f4 <IOL_State_OP_ISDU_WriteProcess>:

// ISDU OD Process
uint8_t IOL_State_OP_ISDU_WriteProcess (void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    if (isdudata.isdu_od_rxcplt == 1)
 80014f8:	4b14      	ldr	r3, [pc, #80]	@ (800154c <IOL_State_OP_ISDU_WriteProcess+0x58>)
 80014fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <IOL_State_OP_ISDU_WriteProcess+0x1e>
    {
        isdudata.isdu_od_rxcplt = 0;
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <IOL_State_OP_ISDU_WriteProcess+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

        isdudata.isdu_od_writereq_flag = 1;
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <IOL_State_OP_ISDU_WriteProcess+0x58>)
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_Arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0); // CKS 생성
 8001512:	2200      	movs	r2, #0
 8001514:	2104      	movs	r1, #4
 8001516:	480e      	ldr	r0, [pc, #56]	@ (8001550 <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 8001518:	f7ff f95e 	bl	80007d8 <OP_CKS_GetChecksum>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 8001522:	711a      	strb	r2, [r3, #4]

    IOL_ENABLE;
 8001524:	2201      	movs	r2, #1
 8001526:	2140      	movs	r1, #64	@ 0x40
 8001528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152c:	f001 ffc6 	bl	80034bc <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_Arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 8001530:	2205      	movs	r2, #5
 8001532:	4907      	ldr	r1, [pc, #28]	@ (8001550 <IOL_State_OP_ISDU_WriteProcess+0x5c>)
 8001534:	4807      	ldr	r0, [pc, #28]	@ (8001554 <IOL_State_OP_ISDU_WriteProcess+0x60>)
 8001536:	f005 faad 	bl	8006a94 <HAL_UART_Transmit_IT>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <IOL_State_OP_ISDU_WriteProcess+0x50>
    {
        Error_Handler();
 8001540:	f000 f9ff 	bl	8001942 <Error_Handler>
    }

    return ;
 8001544:	bf00      	nop
 8001546:	bf00      	nop
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000fb4 	.word	0x20000fb4
 8001550:	20000fa4 	.word	0x20000fa4
 8001554:	200010a4 	.word	0x200010a4

08001558 <IOL_ConnectToIFM_Read>:
extern uint8_t device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH];
extern uint8_t ProcessDataIn_cnt;

// for 문 수정이 필요. j 카운트 부분이 쓸모없이 중복 실행.
void IOL_ConnectToIFM_Read (void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	71bb      	strb	r3, [r7, #6]
    uint8_t setpage1first[2] = {0x00, 0x22};
 8001562:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001566:	80bb      	strh	r3, [r7, #4]
    // uint8_t Pagevalue[16] = { 0 };

    for (i = 2; i < 16; i++)
 8001568:	2302      	movs	r3, #2
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	e01a      	b.n	80015a4 <IOL_ConnectToIFM_Read+0x4c>
    {
        for(j = 0; j < 2; j++)
 800156e:	2300      	movs	r3, #0
 8001570:	71bb      	strb	r3, [r7, #6]
 8001572:	e00a      	b.n	800158a <IOL_ConnectToIFM_Read+0x32>
        {
            IOL_ISDUPage_value[j] = setpage1first[j];
 8001574:	79ba      	ldrb	r2, [r7, #6]
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	3208      	adds	r2, #8
 800157a:	443a      	add	r2, r7
 800157c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001580:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <IOL_ConnectToIFM_Read+0x60>)
 8001582:	54d1      	strb	r1, [r2, r3]
        for(j = 0; j < 2; j++)
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	3301      	adds	r3, #1
 8001588:	71bb      	strb	r3, [r7, #6]
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d9f1      	bls.n	8001574 <IOL_ConnectToIFM_Read+0x1c>
        }
        IOL_ISDUPage_value[i] = IOL_Page1_SeqValue[i - 1];
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	1e5a      	subs	r2, r3, #1
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4909      	ldr	r1, [pc, #36]	@ (80015bc <IOL_ConnectToIFM_Read+0x64>)
 8001598:	5c89      	ldrb	r1, [r1, r2]
 800159a:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <IOL_ConnectToIFM_Read+0x60>)
 800159c:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < 16; i++)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	3301      	adds	r3, #1
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	d9e1      	bls.n	800156e <IOL_ConnectToIFM_Read+0x16>
    }
}
 80015aa:	bf00      	nop
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	200003c0 	.word	0x200003c0
 80015bc:	20000198 	.word	0x20000198

080015c0 <IOL_State_OP_Page_ReadProcess>:

uint8_t IOL_State_OP_Page_ReadProcess (void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
    IOL_ConnectToIFM_Read();
 80015c4:	f7ff ffc8 	bl	8001558 <IOL_ConnectToIFM_Read>

    device_Page_OD_arr[0] = IOL_ISDUPage_value[IOL_OP_OD_Page_Res_cnt];
 80015c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <IOL_State_OP_Page_ReadProcess+0x80>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <IOL_State_OP_Page_ReadProcess+0x84>)
 80015d0:	5c9a      	ldrb	r2, [r3, r2]
 80015d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <IOL_State_OP_Page_ReadProcess+0x88>)
 80015d4:	701a      	strb	r2, [r3, #0]
    device_Page_OD_arr[1] = IOL_ISDUPage_value[IOL_OP_OD_Page_Res_cnt + 1];
 80015d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <IOL_State_OP_Page_ReadProcess+0x80>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a19      	ldr	r2, [pc, #100]	@ (8001644 <IOL_State_OP_Page_ReadProcess+0x84>)
 80015de:	5cd2      	ldrb	r2, [r2, r3]
 80015e0:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <IOL_State_OP_Page_ReadProcess+0x88>)
 80015e2:	705a      	strb	r2, [r3, #1]
    IOL_OP_OD_Page_Res_cnt++;
 80015e4:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <IOL_State_OP_Page_ReadProcess+0x80>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <IOL_State_OP_Page_ReadProcess+0x80>)
 80015ee:	701a      	strb	r2, [r3, #0]

    if (IOL_OP_OD_Page_Res_cnt >= 16)
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <IOL_State_OP_Page_ReadProcess+0x80>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d906      	bls.n	8001606 <IOL_State_OP_Page_ReadProcess+0x46>
    {
        DEBUG_GPIO_TOGGLE; // 디버깅 트리거
 80015f8:	2101      	movs	r1, #1
 80015fa:	4814      	ldr	r0, [pc, #80]	@ (800164c <IOL_State_OP_Page_ReadProcess+0x8c>)
 80015fc:	f001 ff76 	bl	80034ec <HAL_GPIO_TogglePin>
        IOL_OP_OD_Page_Res_cnt = 0;
 8001600:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <IOL_State_OP_Page_ReadProcess+0x80>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    }

    device_Page_OD_arr[IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_Page_OD_arr[0], (IOL_OP_ISDU_IN_PROCESSDATALENGTH - 1), 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2106      	movs	r1, #6
 800160a:	480f      	ldr	r0, [pc, #60]	@ (8001648 <IOL_State_OP_Page_ReadProcess+0x88>)
 800160c:	f7ff f8e4 	bl	80007d8 <OP_CKS_GetChecksum>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <IOL_State_OP_Page_ReadProcess+0x88>)
 8001616:	719a      	strb	r2, [r3, #6]

    IOL_ENABLE;
 8001618:	2201      	movs	r2, #1
 800161a:	2140      	movs	r1, #64	@ 0x40
 800161c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001620:	f001 ff4c 	bl	80034bc <HAL_GPIO_WritePin>
    
    if (HAL_UART_Transmit_IT(&huart1, device_Page_OD_arr, IOL_OP_ISDU_IN_PROCESSDATALENGTH) != HAL_OK)
 8001624:	2207      	movs	r2, #7
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <IOL_State_OP_Page_ReadProcess+0x88>)
 8001628:	4809      	ldr	r0, [pc, #36]	@ (8001650 <IOL_State_OP_Page_ReadProcess+0x90>)
 800162a:	f005 fa33 	bl	8006a94 <HAL_UART_Transmit_IT>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <IOL_State_OP_Page_ReadProcess+0x78>
    {
        Error_Handler();
 8001634:	f000 f985 	bl	8001942 <Error_Handler>
    }
}
 8001638:	bf00      	nop
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200003ef 	.word	0x200003ef
 8001644:	200003c0 	.word	0x200003c0
 8001648:	200003d4 	.word	0x200003d4
 800164c:	48000400 	.word	0x48000400
 8001650:	200010a4 	.word	0x200010a4

08001654 <IOL_State_OP_Page_WriteProcess>:

uint8_t IOL_State_OP_Page_WriteProcess (void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 2] = ProcessDataIn_cnt; // Test cnt Value 
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <IOL_State_OP_Page_WriteProcess+0x44>)
 800165a:	781a      	ldrb	r2, [r3, #0]
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <IOL_State_OP_Page_WriteProcess+0x48>)
 800165e:	70da      	strb	r2, [r3, #3]
    device_ProcessDataOut_Arr[IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1] = OP_CKS_GetChecksum(&device_ProcessDataOut_Arr[0], IOL_OP_ISDU_OUT_PROCESSDATALENGTH - 1, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2104      	movs	r1, #4
 8001664:	480d      	ldr	r0, [pc, #52]	@ (800169c <IOL_State_OP_Page_WriteProcess+0x48>)
 8001666:	f7ff f8b7 	bl	80007d8 <OP_CKS_GetChecksum>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <IOL_State_OP_Page_WriteProcess+0x48>)
 8001670:	711a      	strb	r2, [r3, #4]

    IOL_ENABLE;
 8001672:	2201      	movs	r2, #1
 8001674:	2140      	movs	r1, #64	@ 0x40
 8001676:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167a:	f001 ff1f 	bl	80034bc <HAL_GPIO_WritePin>
    if (HAL_UART_Transmit_IT(&huart1, device_ProcessDataOut_Arr, IOL_OP_ISDU_OUT_PROCESSDATALENGTH) != HAL_OK)
 800167e:	2205      	movs	r2, #5
 8001680:	4906      	ldr	r1, [pc, #24]	@ (800169c <IOL_State_OP_Page_WriteProcess+0x48>)
 8001682:	4807      	ldr	r0, [pc, #28]	@ (80016a0 <IOL_State_OP_Page_WriteProcess+0x4c>)
 8001684:	f005 fa06 	bl	8006a94 <HAL_UART_Transmit_IT>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <IOL_State_OP_Page_WriteProcess+0x3e>
    {
        Error_Handler();
 800168e:	f000 f958 	bl	8001942 <Error_Handler>
    }
}
 8001692:	bf00      	nop
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200003ee 	.word	0x200003ee
 800169c:	20000fa4 	.word	0x20000fa4
 80016a0:	200010a4 	.word	0x200010a4

080016a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016aa:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <MX_DMA_Init+0x50>)
 80016ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ae:	4a11      	ldr	r2, [pc, #68]	@ (80016f4 <MX_DMA_Init+0x50>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80016b6:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <MX_DMA_Init+0x50>)
 80016b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c2:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_DMA_Init+0x50>)
 80016c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c6:	4a0b      	ldr	r2, [pc, #44]	@ (80016f4 <MX_DMA_Init+0x50>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_DMA_Init+0x50>)
 80016d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	200b      	movs	r0, #11
 80016e0:	f001 f87d 	bl	80027de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e4:	200b      	movs	r0, #11
 80016e6:	f001 f894 	bl	8002812 <HAL_NVIC_EnableIRQ>

}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b43      	ldr	r3, [pc, #268]	@ (800181c <MX_GPIO_Init+0x124>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	4a42      	ldr	r2, [pc, #264]	@ (800181c <MX_GPIO_Init+0x124>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171a:	4b40      	ldr	r3, [pc, #256]	@ (800181c <MX_GPIO_Init+0x124>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	4b3d      	ldr	r3, [pc, #244]	@ (800181c <MX_GPIO_Init+0x124>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	4a3c      	ldr	r2, [pc, #240]	@ (800181c <MX_GPIO_Init+0x124>)
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001732:	4b3a      	ldr	r3, [pc, #232]	@ (800181c <MX_GPIO_Init+0x124>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <MX_GPIO_Init+0x124>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	4a36      	ldr	r2, [pc, #216]	@ (800181c <MX_GPIO_Init+0x124>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174a:	4b34      	ldr	r3, [pc, #208]	@ (800181c <MX_GPIO_Init+0x124>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	4b31      	ldr	r3, [pc, #196]	@ (800181c <MX_GPIO_Init+0x124>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	4a30      	ldr	r2, [pc, #192]	@ (800181c <MX_GPIO_Init+0x124>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001762:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <MX_GPIO_Init+0x124>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001774:	482a      	ldr	r0, [pc, #168]	@ (8001820 <MX_GPIO_Init+0x128>)
 8001776:	f001 fea1 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2140      	movs	r1, #64	@ 0x40
 800177e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001782:	f001 fe9b 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2101      	movs	r1, #1
 800178a:	4826      	ldr	r0, [pc, #152]	@ (8001824 <MX_GPIO_Init+0x12c>)
 800178c:	f001 fe96 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001790:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	481d      	ldr	r0, [pc, #116]	@ (8001820 <MX_GPIO_Init+0x128>)
 80017aa:	f001 fc23 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017ae:	23a0      	movs	r3, #160	@ 0xa0
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c6:	f001 fc15 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ca:	2340      	movs	r3, #64	@ 0x40
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e4:	f001 fc06 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017e8:	2301      	movs	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	4809      	ldr	r0, [pc, #36]	@ (8001824 <MX_GPIO_Init+0x12c>)
 8001800:	f001 fbf8 	bl	8002ff4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2017      	movs	r0, #23
 800180a:	f000 ffe8 	bl	80027de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800180e:	2017      	movs	r0, #23
 8001810:	f000 ffff 	bl	8002812 <HAL_NVIC_EnableIRQ>

}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	@ 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000
 8001820:	48000800 	.word	0x48000800
 8001824:	48000400 	.word	0x48000400

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182c:	f000 fe45 	bl	80024ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001830:	f000 f83c 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001834:	f7ff ff60 	bl	80016f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001838:	f7ff ff34 	bl	80016a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800183c:	f000 fc44 	bl	80020c8 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8001840:	f00a fa12 	bl	800bc68 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8001844:	f000 fbc6 	bl	8001fd4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8001848:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800184c:	4911      	ldr	r1, [pc, #68]	@ (8001894 <main+0x6c>)
 800184e:	4812      	ldr	r0, [pc, #72]	@ (8001898 <main+0x70>)
 8001850:	f000 f87d 	bl	800194e <Q_Init>

  HAL_Delay(3000);
 8001854:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001858:	f000 fea0 	bl	800259c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800185c:	480f      	ldr	r0, [pc, #60]	@ (800189c <main+0x74>)
 800185e:	f004 fbad 	bl	8005fbc <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 8001862:	f000 fdbf 	bl	80023e4 <GetClockSourcePrint>
  BootMessagePrint();
 8001866:	f000 fd8d 	bl	8002384 <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 800186a:	2264      	movs	r2, #100	@ 0x64
 800186c:	490c      	ldr	r1, [pc, #48]	@ (80018a0 <main+0x78>)
 800186e:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <main+0x7c>)
 8001870:	f006 fe7e 	bl	8008570 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <main+0x80>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <main+0x80>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0204 	bic.w	r2, r2, #4
 8001882:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 8001884:	f000 fd36 	bl	80022f4 <User_Toggle_Led>
    ProcessDataIn_IncreaseCntValue();
 8001888:	f000 fd4a 	bl	8002320 <ProcessDataIn_IncreaseCntValue>
    General_IOL_Process();
 800188c:	f000 fd6a 	bl	8002364 <General_IOL_Process>
    User_Toggle_Led();
 8001890:	bf00      	nop
 8001892:	e7f7      	b.n	8001884 <main+0x5c>
 8001894:	200007dc 	.word	0x200007dc
 8001898:	20001138 	.word	0x20001138
 800189c:	20000ff8 	.word	0x20000ff8
 80018a0:	20000bc8 	.word	0x20000bc8
 80018a4:	200010a4 	.word	0x200010a4
 80018a8:	20001044 	.word	0x20001044

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b094      	sub	sp, #80	@ 0x50
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	2238      	movs	r2, #56	@ 0x38
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00b f900 	bl	800cac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f003 fb4a 	bl	8004f68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80018d4:	2321      	movs	r3, #33	@ 0x21
 80018d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80018dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018de:	2301      	movs	r3, #1
 80018e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e2:	2302      	movs	r3, #2
 80018e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e6:	2303      	movs	r3, #3
 80018e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80018ea:	2306      	movs	r3, #6
 80018ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80018ee:	2355      	movs	r3, #85	@ 0x55
 80018f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80018f6:	2304      	movs	r3, #4
 80018f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fbe4 	bl	80050d0 <HAL_RCC_OscConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800190e:	f000 f818 	bl	8001942 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001912:	230f      	movs	r3, #15
 8001914:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2303      	movs	r3, #3
 8001918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2104      	movs	r1, #4
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fee2 	bl	80056f4 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001936:	f000 f804 	bl	8001942 <Error_Handler>
  }
}
 800193a:	bf00      	nop
 800193c:	3750      	adds	r7, #80	@ 0x50
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001946:	b672      	cpsid	i
}
 8001948:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194a:	bf00      	nop
 800194c:	e7fd      	b.n	800194a <Error_Handler+0x8>

0800194e <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	4613      	mov	r3, r2
 800195a:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	88fa      	ldrh	r2, [r7, #6]
 8001978:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	60da      	str	r2, [r3, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	4613      	mov	r3, r2
 8001998:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 800199a:	2300      	movs	r3, #0
 800199c:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f8ea 	bl	8001b78 <Q_NumEmptyBytes>
 80019a4:	4603      	mov	r3, r0
 80019a6:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	db44      	blt.n	8001a3a <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	4413      	add	r3, r2
 80019bc:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	8afa      	ldrh	r2, [r7, #22]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d20b      	bcs.n	80019e0 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80019d2:	4413      	add	r3, r2
 80019d4:	88fa      	ldrh	r2, [r7, #6]
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	4618      	mov	r0, r3
 80019da:	f00b f8ec 	bl	800cbb6 <memcpy>
 80019de:	e01d      	b.n	8001a1c <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80019fa:	4413      	add	r3, r2
 80019fc:	8aba      	ldrh	r2, [r7, #20]
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00b f8d8 	bl	800cbb6 <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	68d8      	ldr	r0, [r3, #12]
 8001a0a:	8abb      	ldrh	r3, [r7, #20]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	18d1      	adds	r1, r2, r3
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	8abb      	ldrh	r3, [r7, #20]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	f00b f8cd 	bl	800cbb6 <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	881a      	ldrh	r2, [r3, #0]
 8001a20:	8afb      	ldrh	r3, [r7, #22]
 8001a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a26:	fb01 f202 	mul.w	r2, r1, r2
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8001a34:	2301      	movs	r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]
 8001a38:	e00e      	b.n	8001a58 <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	88db      	ldrh	r3, [r3, #6]
 8001a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d004      	beq.n	8001a50 <Q_Write+0xc4>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	88db      	ldrh	r3, [r3, #6]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	e001      	b.n	8001a54 <Q_Write+0xc8>
 8001a50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	80da      	strh	r2, [r3, #6]
    return ret;    
 8001a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f864 	bl	8001b3e <Q_NumContents>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d848      	bhi.n	8001b12 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	8aba      	ldrh	r2, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d20b      	bcs.n	8001ab0 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	68b8      	ldr	r0, [r7, #8]
 8001aaa:	f00b f884 	bl	800cbb6 <memcpy>
 8001aae:	e01d      	b.n	8001aec <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	881a      	ldrh	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	8a7a      	ldrh	r2, [r7, #18]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	68b8      	ldr	r0, [r7, #8]
 8001ad2:	f00b f870 	bl	800cbb6 <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8001ad6:	8a7b      	ldrh	r3, [r7, #18]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	18d0      	adds	r0, r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	68d9      	ldr	r1, [r3, #12]
 8001ae0:	88fa      	ldrh	r2, [r7, #6]
 8001ae2:	8a7b      	ldrh	r3, [r7, #18]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f00b f865 	bl	800cbb6 <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001af2:	461a      	mov	r2, r3
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	4413      	add	r3, r2
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	8812      	ldrh	r2, [r2, #0]
 8001afc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b00:	fb01 f202 	mul.w	r2, r1, r2
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	809a      	strh	r2, [r3, #4]
        ret = true;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	75fb      	strb	r3, [r7, #23]
 8001b10:	e010      	b.n	8001b34 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	891b      	ldrh	r3, [r3, #8]
 8001b16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d004      	beq.n	8001b28 <Q_Read+0xc6>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	891b      	ldrh	r3, [r3, #8]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	e001      	b.n	8001b2c <Q_Read+0xca>
 8001b28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	811a      	strh	r2, [r3, #8]
        ret = false;
 8001b30:	2300      	movs	r3, #0
 8001b32:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b52:	4413      	add	r3, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	8812      	ldrh	r2, [r2, #0]
 8001b60:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b64:	fb01 f202 	mul.w	r2, r1, r2
 8001b68:	1a9b      	subs	r3, r3, r2
 8001b6a:	b29b      	uxth	r3, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	881c      	ldrh	r4, [r3, #0]
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ffda 	bl	8001b3e <Q_NumContents>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	1ae3      	subs	r3, r4, r3
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29b      	uxth	r3, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd90      	pop	{r4, r7, pc}

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <HAL_MspInit+0x44>)
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8001be0 <HAL_MspInit+0x44>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bae:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_MspInit+0x44>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_MspInit+0x44>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbe:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <HAL_MspInit+0x44>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_MspInit+0x44>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bd2:	f003 fa6d 	bl	80050b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <NMI_Handler+0x4>

08001bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3a:	f000 fc91 	bl	8002560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <DMA1_Channel1_IRQHandler+0x10>)
 8001c4a:	f001 f884 	bl	8002d56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20001044 	.word	0x20001044

08001c58 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <USB_LP_IRQHandler+0x10>)
 8001c5e:	f001 fd72 	bl	8003746 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20002798 	.word	0x20002798

08001c6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c70:	2020      	movs	r0, #32
 8001c72:	f001 fc55 	bl	8003520 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001c76:	2080      	movs	r0, #128	@ 0x80
 8001c78:	f001 fc52 	bl	8003520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c86:	f004 fa03 	bl	8006090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000ff8 	.word	0x20000ff8

08001c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8001c98:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <USART1_IRQHandler+0x3c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d006      	beq.n	8001cb4 <USART1_IRQHandler+0x20>
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <USART1_IRQHandler+0x3c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d107      	bne.n	8001cc4 <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <USART1_IRQHandler+0x3c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2208      	movs	r2, #8
 8001cba:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8001cbc:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <USART1_IRQHandler+0x3c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <USART1_IRQHandler+0x3c>)
 8001cc6:	f004 ff79 	bl	8006bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200010a4 	.word	0x200010a4

08001cd4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8001ce0:	481b      	ldr	r0, [pc, #108]	@ (8001d50 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001ce2:	f7ff ff2c 	bl	8001b3e <Q_NumContents>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	81fb      	strh	r3, [r7, #14]
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d016      	beq.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8001cf0:	f00a f8b0 	bl	800be54 <CDC_Transmit_Is_Busy>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d011      	beq.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cfc:	881a      	ldrh	r2, [r3, #0]
 8001cfe:	89fb      	ldrh	r3, [r7, #14]
 8001d00:	4413      	add	r3, r2
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001d06:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8001d08:	89fb      	ldrh	r3, [r7, #14]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4912      	ldr	r1, [pc, #72]	@ (8001d58 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001d0e:	4810      	ldr	r0, [pc, #64]	@ (8001d50 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001d10:	f7ff fea7 	bl	8001a62 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8001d14:	89fb      	ldrh	r3, [r7, #14]
 8001d16:	4619      	mov	r1, r3
 8001d18:	480f      	ldr	r0, [pc, #60]	@ (8001d58 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001d1a:	f00a f863 	bl	800bde4 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a0e      	ldr	r2, [pc, #56]	@ (8001d5c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d10e      	bne.n	8001d46 <HAL_TIM_PeriodElapsedCallback+0x72>
  {
    TIM1_CNT_1++;
 8001d28:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d60 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001d30:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8001d32:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d3a:	6013      	str	r3, [r2, #0]
    TIM1_CNT_3++;
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	4a09      	ldr	r2, [pc, #36]	@ (8001d68 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001d44:	6013      	str	r3, [r2, #0]
  }
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20001138 	.word	0x20001138
 8001d54:	200003f0 	.word	0x200003f0
 8001d58:	200003f4 	.word	0x200003f4
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	200003e0 	.word	0x200003e0
 8001d64:	200003e4 	.word	0x200003e4
 8001d68:	200003e8 	.word	0x200003e8

08001d6c <UART1_RxEnable>:



void UART1_RxEnable (void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <UART1_RxEnable+0x88>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <UART1_RxEnable+0x88>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <UART1_RxEnable+0x88>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2264      	movs	r2, #100	@ 0x64
 8001d88:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <UART1_RxEnable+0x88>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <UART1_RxEnable+0x88>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 8001d9a:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <UART1_RxEnable+0x8c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart1.Instance->CR1, USART_CR1_IDLEIE);
 8001da0:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <UART1_RxEnable+0x8c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	e853 3f00 	ldrex	r3, [r3]
 8001dac:	603b      	str	r3, [r7, #0]
   return(result);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <UART1_RxEnable+0x8c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	60fa      	str	r2, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	e841 2300 	strex	r3, r2, [r1]
 8001dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1e6      	bne.n	8001da0 <UART1_RxEnable+0x34>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001dd2:	2264      	movs	r2, #100	@ 0x64
 8001dd4:	4909      	ldr	r1, [pc, #36]	@ (8001dfc <UART1_RxEnable+0x90>)
 8001dd6:	4808      	ldr	r0, [pc, #32]	@ (8001df8 <UART1_RxEnable+0x8c>)
 8001dd8:	f006 fbca 	bl	8008570 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001ddc:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <UART1_RxEnable+0x88>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <UART1_RxEnable+0x88>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0204 	bic.w	r2, r2, #4
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	bf00      	nop
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20001044 	.word	0x20001044
 8001df8:	200010a4 	.word	0x200010a4
 8001dfc:	20000bc8 	.word	0x20000bc8

08001e00 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8001e0c:	887a      	ldrh	r2, [r7, #2]
 8001e0e:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <HAL_UARTEx_RxEventCallback+0x5c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a11      	ldr	r2, [pc, #68]	@ (8001e5c <HAL_UARTEx_RxEventCallback+0x5c>)
 8001e16:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a10      	ldr	r2, [pc, #64]	@ (8001e60 <HAL_UARTEx_RxEventCallback+0x60>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d118      	bne.n	8001e54 <HAL_UARTEx_RxEventCallback+0x54>
  {
    RxIdle_Flag = 1;
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <HAL_UARTEx_RxEventCallback+0x64>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
    
    if (uart_rx_IDLE_TotalCnt >= 3)
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <HAL_UARTEx_RxEventCallback+0x5c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d90f      	bls.n	8001e50 <HAL_UARTEx_RxEventCallback+0x50>
    {
      
      // DEBUG_GPIO_TOGGLE;
      if (IOL_Rx_IDLEFlag == 1)
 8001e30:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_UARTEx_RxEventCallback+0x68>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d103      	bne.n	8001e40 <HAL_UARTEx_RxEventCallback+0x40>
      {
        IOL_Rx_IDLEFlag = 0;
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_UARTEx_RxEventCallback+0x68>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e007      	b.n	8001e50 <HAL_UARTEx_RxEventCallback+0x50>
      }
      else
      {
        // DEBUG_GPIO_TOGGLE;
        IOL_Rx_IDLEFlag = 1;
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_UARTEx_RxEventCallback+0x68>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_Parse_Rx_data(uart1_rx_IDLE_buf);
 8001e46:	4809      	ldr	r0, [pc, #36]	@ (8001e6c <HAL_UARTEx_RxEventCallback+0x6c>)
 8001e48:	f7ff f8b0 	bl	8000fac <IOL_Parse_Rx_data>
        // IOL_Parse_Rx_data();
        IOL_StateM_Process();
 8001e4c:	f7ff f884 	bl	8000f58 <IOL_StateM_Process>
        
      }

    }
    
    UART1_RxEnable();
 8001e50:	f7ff ff8c 	bl	8001d6c <UART1_RxEnable>

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000bc4 	.word	0x20000bc4
 8001e60:	40013800 	.word	0x40013800
 8001e64:	200003ec 	.word	0x200003ec
 8001e68:	200003ed 	.word	0x200003ed
 8001e6c:	20000bc8 	.word	0x20000bc8

08001e70 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <HAL_UART_TxCpltCallback+0x2c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d107      	bne.n	8001e92 <HAL_UART_TxCpltCallback+0x22>
  {
    IOL_DISABLE;
 8001e82:	2200      	movs	r2, #0
 8001e84:	2140      	movs	r1, #64	@ 0x40
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8a:	f001 fb17 	bl	80034bc <HAL_GPIO_WritePin>
    
    IOL_Clear_PDBuffer();
 8001e8e:	f7ff f9b9 	bl	8001204 <IOL_Clear_PDBuffer>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40013800 	.word	0x40013800

08001ea0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e00a      	b.n	8001ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb2:	f3af 8000 	nop.w
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	60ba      	str	r2, [r7, #8]
 8001ebe:	b2ca      	uxtb	r2, r1
 8001ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbf0      	blt.n	8001eb2 <_read+0x12>
  }

  return len;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_close>:
  }
  return len;
}

int _close(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f02:	605a      	str	r2, [r3, #4]
  return 0;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_isatty>:

int _isatty(int file)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f00a fdf2 	bl	800cb5c <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20008000 	.word	0x20008000
 8001fa4:	00000400 	.word	0x00000400
 8001fa8:	200003dc 	.word	0x200003dc
 8001fac:	20002a78 	.word	0x20002a78

08001fb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <SystemInit+0x20>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	@ (8001fd0 <SystemInit+0x20>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	f107 0310 	add.w	r3, r7, #16
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ff2:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <MX_TIM1_Init+0xa0>)
 8001ff4:	4a20      	ldr	r2, [pc, #128]	@ (8002078 <MX_TIM1_Init+0xa4>)
 8001ff6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <MX_TIM1_Init+0xa0>)
 8001ffa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ffe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002000:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <MX_TIM1_Init+0xa0>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8002006:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <MX_TIM1_Init+0xa0>)
 8002008:	22a9      	movs	r2, #169	@ 0xa9
 800200a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200c:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <MX_TIM1_Init+0xa0>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <MX_TIM1_Init+0xa0>)
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <MX_TIM1_Init+0xa0>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800201e:	4815      	ldr	r0, [pc, #84]	@ (8002074 <MX_TIM1_Init+0xa0>)
 8002020:	f003 ff74 	bl	8005f0c <HAL_TIM_Base_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800202a:	f7ff fc8a 	bl	8001942 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002032:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	4619      	mov	r1, r3
 800203a:	480e      	ldr	r0, [pc, #56]	@ (8002074 <MX_TIM1_Init+0xa0>)
 800203c:	f004 f978 	bl	8006330 <HAL_TIM_ConfigClockSource>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002046:	f7ff fc7c 	bl	8001942 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	4619      	mov	r1, r3
 800205a:	4806      	ldr	r0, [pc, #24]	@ (8002074 <MX_TIM1_Init+0xa0>)
 800205c:	f004 fbc2 	bl	80067e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002066:	f7ff fc6c 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000ff8 	.word	0x20000ff8
 8002078:	40012c00 	.word	0x40012c00

0800207c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <HAL_TIM_Base_MspInit+0x44>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d113      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208e:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <HAL_TIM_Base_MspInit+0x48>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	4a0c      	ldr	r2, [pc, #48]	@ (80020c4 <HAL_TIM_Base_MspInit+0x48>)
 8002094:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002098:	6613      	str	r3, [r2, #96]	@ 0x60
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_TIM_Base_MspInit+0x48>)
 800209c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2019      	movs	r0, #25
 80020ac:	f000 fb97 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80020b0:	2019      	movs	r0, #25
 80020b2:	f000 fbae 	bl	8002812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40021000 	.word	0x40021000

080020c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020cc:	4b23      	ldr	r3, [pc, #140]	@ (800215c <MX_USART1_UART_Init+0x94>)
 80020ce:	4a24      	ldr	r2, [pc, #144]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 80020d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80020d2:	4b22      	ldr	r3, [pc, #136]	@ (800215c <MX_USART1_UART_Init+0x94>)
 80020d4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80020d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80020da:	4b20      	ldr	r3, [pc, #128]	@ (800215c <MX_USART1_UART_Init+0x94>)
 80020dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020e0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	@ (800215c <MX_USART1_UART_Init+0x94>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80020e8:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_USART1_UART_Init+0x94>)
 80020ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_USART1_UART_Init+0x94>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	@ (800215c <MX_USART1_UART_Init+0x94>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b17      	ldr	r3, [pc, #92]	@ (800215c <MX_USART1_UART_Init+0x94>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <MX_USART1_UART_Init+0x94>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <MX_USART1_UART_Init+0x94>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <MX_USART1_UART_Init+0x94>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002114:	4811      	ldr	r0, [pc, #68]	@ (800215c <MX_USART1_UART_Init+0x94>)
 8002116:	f004 fc2d 	bl	8006974 <HAL_UART_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002120:	f7ff fc0f 	bl	8001942 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002124:	2100      	movs	r1, #0
 8002126:	480d      	ldr	r0, [pc, #52]	@ (800215c <MX_USART1_UART_Init+0x94>)
 8002128:	f006 f9a6 	bl	8008478 <HAL_UARTEx_SetTxFifoThreshold>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8002132:	f7ff fc06 	bl	8001942 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002136:	2100      	movs	r1, #0
 8002138:	4808      	ldr	r0, [pc, #32]	@ (800215c <MX_USART1_UART_Init+0x94>)
 800213a:	f006 f9db 	bl	80084f4 <HAL_UARTEx_SetRxFifoThreshold>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002144:	f7ff fbfd 	bl	8001942 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002148:	4804      	ldr	r0, [pc, #16]	@ (800215c <MX_USART1_UART_Init+0x94>)
 800214a:	f006 f95c 	bl	8008406 <HAL_UARTEx_DisableFifoMode>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002154:	f7ff fbf5 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200010a4 	.word	0x200010a4
 8002160:	40013800 	.word	0x40013800

08002164 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b09a      	sub	sp, #104	@ 0x68
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	2244      	movs	r2, #68	@ 0x44
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f00a fc9b 	bl	800cac0 <memset>
  if(uartHandle->Instance==USART1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a38      	ldr	r2, [pc, #224]	@ (8002270 <HAL_UART_MspInit+0x10c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d169      	bne.n	8002268 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002194:	2301      	movs	r3, #1
 8002196:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 fcc3 	bl	8005b2c <HAL_RCCEx_PeriphCLKConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021ac:	f7ff fbc9 	bl	8001942 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b0:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <HAL_UART_MspInit+0x110>)
 80021b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002274 <HAL_UART_MspInit+0x110>)
 80021b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80021bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HAL_UART_MspInit+0x110>)
 80021be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002274 <HAL_UART_MspInit+0x110>)
 80021ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021cc:	4a29      	ldr	r2, [pc, #164]	@ (8002274 <HAL_UART_MspInit+0x110>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d4:	4b27      	ldr	r3, [pc, #156]	@ (8002274 <HAL_UART_MspInit+0x110>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021e0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021e4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f2:	2307      	movs	r3, #7
 80021f4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021fa:	4619      	mov	r1, r3
 80021fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002200:	f000 fef8 	bl	8002ff4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002204:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <HAL_UART_MspInit+0x114>)
 8002206:	4a1d      	ldr	r2, [pc, #116]	@ (800227c <HAL_UART_MspInit+0x118>)
 8002208:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800220a:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <HAL_UART_MspInit+0x114>)
 800220c:	2218      	movs	r2, #24
 800220e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002210:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <HAL_UART_MspInit+0x114>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002216:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <HAL_UART_MspInit+0x114>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800221c:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <HAL_UART_MspInit+0x114>)
 800221e:	2280      	movs	r2, #128	@ 0x80
 8002220:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <HAL_UART_MspInit+0x114>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002228:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <HAL_UART_MspInit+0x114>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800222e:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_UART_MspInit+0x114>)
 8002230:	2200      	movs	r2, #0
 8002232:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002234:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <HAL_UART_MspInit+0x114>)
 8002236:	2200      	movs	r2, #0
 8002238:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800223a:	480f      	ldr	r0, [pc, #60]	@ (8002278 <HAL_UART_MspInit+0x114>)
 800223c:	f000 fb12 	bl	8002864 <HAL_DMA_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002246:	f7ff fb7c 	bl	8001942 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <HAL_UART_MspInit+0x114>)
 800224e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <HAL_UART_MspInit+0x114>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	2025      	movs	r0, #37	@ 0x25
 800225e:	f000 fabe 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002262:	2025      	movs	r0, #37	@ 0x25
 8002264:	f000 fad5 	bl	8002812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002268:	bf00      	nop
 800226a:	3768      	adds	r7, #104	@ 0x68
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40013800 	.word	0x40013800
 8002274:	40021000 	.word	0x40021000
 8002278:	20001044 	.word	0x20001044
 800227c:	40020008 	.word	0x40020008

08002280 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0d      	ldr	r2, [pc, #52]	@ (80022c4 <HAL_UART_MspDeInit+0x44>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d114      	bne.n	80022bc <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002292:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <HAL_UART_MspDeInit+0x48>)
 8002294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002296:	4a0c      	ldr	r2, [pc, #48]	@ (80022c8 <HAL_UART_MspDeInit+0x48>)
 8002298:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800229c:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800229e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a6:	f001 f827 	bl	80032f8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fb7f 	bl	80029b4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80022b6:	2025      	movs	r0, #37	@ 0x25
 80022b8:	f000 fab9 	bl	800282e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40021000 	.word	0x40021000

080022cc <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	4803      	ldr	r0, [pc, #12]	@ (80022f0 <_write+0x24>)
 80022e2:	f7ff fb53 	bl	800198c <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 80022e6:	687b      	ldr	r3, [r7, #4]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20001138 	.word	0x20001138

080022f4 <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <User_Toggle_Led+0x24>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002300:	d307      	bcc.n	8002312 <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 8002302:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <User_Toggle_Led+0x24>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 8002308:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800230c:	4803      	ldr	r0, [pc, #12]	@ (800231c <User_Toggle_Led+0x28>)
 800230e:	f001 f8ed 	bl	80034ec <HAL_GPIO_TogglePin>
    }
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200003e0 	.word	0x200003e0
 800231c:	48000800 	.word	0x48000800

08002320 <ProcessDataIn_IncreaseCntValue>:

void ProcessDataIn_IncreaseCntValue (void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
    if ( TIM1_CNT_2 >= 1000)
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <ProcessDataIn_IncreaseCntValue+0x34>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800232c:	d310      	bcc.n	8002350 <ProcessDataIn_IncreaseCntValue+0x30>
    {
        TIM1_CNT_2 = 0;
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <ProcessDataIn_IncreaseCntValue+0x34>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
        ProcessDataIn_cnt++;
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <ProcessDataIn_IncreaseCntValue+0x38>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <ProcessDataIn_IncreaseCntValue+0x38>)
 800233e:	701a      	strb	r2, [r3, #0]

        printf("Master to Device Temp Value :   %d\r\n", Test_M2D_TempValue);
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <ProcessDataIn_IncreaseCntValue+0x3c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	4806      	ldr	r0, [pc, #24]	@ (8002360 <ProcessDataIn_IncreaseCntValue+0x40>)
 8002348:	f00a fa72 	bl	800c830 <iprintf>
        IOL_Print_ParsingM2Ddata();
 800234c:	f7fe fe6a 	bl	8001024 <IOL_Print_ParsingM2Ddata>
    }
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200003e4 	.word	0x200003e4
 8002358:	200003ee 	.word	0x200003ee
 800235c:	20000c2c 	.word	0x20000c2c
 8002360:	0800d678 	.word	0x0800d678

08002364 <General_IOL_Process>:

void General_IOL_Process (void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
    if ( TIM1_CNT_3 >= 1000)
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <General_IOL_Process+0x1c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002370:	d304      	bcc.n	800237c <General_IOL_Process+0x18>
    {
        TIM1_CNT_3 = 0;
 8002372:	4b03      	ldr	r3, [pc, #12]	@ (8002380 <General_IOL_Process+0x1c>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        IOL_Reboot_Check();
 8002378:	f7fe fd9a 	bl	8000eb0 <IOL_Reboot_Check>
    }
    
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200003e8 	.word	0x200003e8

08002384 <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8002388:	480c      	ldr	r0, [pc, #48]	@ (80023bc <BootMessagePrint+0x38>)
 800238a:	f00a fab9 	bl	800c900 <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 800238e:	490c      	ldr	r1, [pc, #48]	@ (80023c0 <BootMessagePrint+0x3c>)
 8002390:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <BootMessagePrint+0x40>)
 8002392:	f00a fa4d 	bl	800c830 <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 8002396:	490c      	ldr	r1, [pc, #48]	@ (80023c8 <BootMessagePrint+0x44>)
 8002398:	480c      	ldr	r0, [pc, #48]	@ (80023cc <BootMessagePrint+0x48>)
 800239a:	f00a fa49 	bl	800c830 <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 800239e:	490c      	ldr	r1, [pc, #48]	@ (80023d0 <BootMessagePrint+0x4c>)
 80023a0:	480c      	ldr	r0, [pc, #48]	@ (80023d4 <BootMessagePrint+0x50>)
 80023a2:	f00a fa45 	bl	800c830 <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80023a6:	4a0c      	ldr	r2, [pc, #48]	@ (80023d8 <BootMessagePrint+0x54>)
 80023a8:	490c      	ldr	r1, [pc, #48]	@ (80023dc <BootMessagePrint+0x58>)
 80023aa:	480d      	ldr	r0, [pc, #52]	@ (80023e0 <BootMessagePrint+0x5c>)
 80023ac:	f00a fa40 	bl	800c830 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 80023b0:	4802      	ldr	r0, [pc, #8]	@ (80023bc <BootMessagePrint+0x38>)
 80023b2:	f00a faa5 	bl	800c900 <puts>
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	0800d6a0 	.word	0x0800d6a0
 80023c0:	0800d6e8 	.word	0x0800d6e8
 80023c4:	0800d6f8 	.word	0x0800d6f8
 80023c8:	0800d714 	.word	0x0800d714
 80023cc:	0800d71c 	.word	0x0800d71c
 80023d0:	0800d738 	.word	0x0800d738
 80023d4:	0800d74c 	.word	0x0800d74c
 80023d8:	0800d768 	.word	0x0800d768
 80023dc:	0800d774 	.word	0x0800d774
 80023e0:	0800d780 	.word	0x0800d780

080023e4 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 80023e8:	4819      	ldr	r0, [pc, #100]	@ (8002450 <GetClockSourcePrint+0x6c>)
 80023ea:	f00a fa89 	bl	800c900 <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 80023ee:	f003 fabd 	bl	800596c <HAL_RCC_GetSysClockFreq>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <GetClockSourcePrint+0x70>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0c9b      	lsrs	r3, r3, #18
 80023fc:	4619      	mov	r1, r3
 80023fe:	4816      	ldr	r0, [pc, #88]	@ (8002458 <GetClockSourcePrint+0x74>)
 8002400:	f00a fa16 	bl	800c830 <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8002404:	f003 fb14 	bl	8005a30 <HAL_RCC_GetHCLKFreq>
 8002408:	4603      	mov	r3, r0
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <GetClockSourcePrint+0x70>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	0c9b      	lsrs	r3, r3, #18
 8002412:	4619      	mov	r1, r3
 8002414:	4811      	ldr	r0, [pc, #68]	@ (800245c <GetClockSourcePrint+0x78>)
 8002416:	f00a fa0b 	bl	800c830 <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 800241a:	f003 fb15 	bl	8005a48 <HAL_RCC_GetPCLK1Freq>
 800241e:	4603      	mov	r3, r0
 8002420:	4a0c      	ldr	r2, [pc, #48]	@ (8002454 <GetClockSourcePrint+0x70>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0c9b      	lsrs	r3, r3, #18
 8002428:	4619      	mov	r1, r3
 800242a:	480d      	ldr	r0, [pc, #52]	@ (8002460 <GetClockSourcePrint+0x7c>)
 800242c:	f00a fa00 	bl	800c830 <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 8002430:	f003 fb20 	bl	8005a74 <HAL_RCC_GetPCLK2Freq>
 8002434:	4603      	mov	r3, r0
 8002436:	4a07      	ldr	r2, [pc, #28]	@ (8002454 <GetClockSourcePrint+0x70>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	0c9b      	lsrs	r3, r3, #18
 800243e:	4619      	mov	r1, r3
 8002440:	4808      	ldr	r0, [pc, #32]	@ (8002464 <GetClockSourcePrint+0x80>)
 8002442:	f00a f9f5 	bl	800c830 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8002446:	4802      	ldr	r0, [pc, #8]	@ (8002450 <GetClockSourcePrint+0x6c>)
 8002448:	f00a fa5a 	bl	800c900 <puts>
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	0800d6a0 	.word	0x0800d6a0
 8002454:	431bde83 	.word	0x431bde83
 8002458:	0800d7a0 	.word	0x0800d7a0
 800245c:	0800d7d0 	.word	0x0800d7d0
 8002460:	0800d800 	.word	0x0800d800
 8002464:	0800d830 	.word	0x0800d830

08002468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002468:	480d      	ldr	r0, [pc, #52]	@ (80024a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800246a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800246c:	f7ff fda0 	bl	8001fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002470:	480c      	ldr	r0, [pc, #48]	@ (80024a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002472:	490d      	ldr	r1, [pc, #52]	@ (80024a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002474:	4a0d      	ldr	r2, [pc, #52]	@ (80024ac <LoopForever+0xe>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002478:	e002      	b.n	8002480 <LoopCopyDataInit>

0800247a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800247c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247e:	3304      	adds	r3, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002484:	d3f9      	bcc.n	800247a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002486:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002488:	4c0a      	ldr	r4, [pc, #40]	@ (80024b4 <LoopForever+0x16>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800248c:	e001      	b.n	8002492 <LoopFillZerobss>

0800248e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002490:	3204      	adds	r2, #4

08002492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002494:	d3fb      	bcc.n	800248e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002496:	f00a fb67 	bl	800cb68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800249a:	f7ff f9c5 	bl	8001828 <main>

0800249e <LoopForever>:

LoopForever:
    b LoopForever
 800249e:	e7fe      	b.n	800249e <LoopForever>
  ldr   r0, =_estack
 80024a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a8:	20000388 	.word	0x20000388
  ldr r2, =_sidata
 80024ac:	0800d92c 	.word	0x0800d92c
  ldr r2, =_sbss
 80024b0:	20000388 	.word	0x20000388
  ldr r4, =_ebss
 80024b4:	20002a74 	.word	0x20002a74

080024b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC1_2_IRQHandler>

080024ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c4:	2003      	movs	r0, #3
 80024c6:	f000 f97f 	bl	80027c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ca:	200f      	movs	r0, #15
 80024cc:	f000 f80e 	bl	80024ec <HAL_InitTick>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	71fb      	strb	r3, [r7, #7]
 80024da:	e001      	b.n	80024e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024dc:	f7ff fb5e 	bl	8001b9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024e0:	79fb      	ldrb	r3, [r7, #7]

}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024f8:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <HAL_InitTick+0x68>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d022      	beq.n	8002546 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002500:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <HAL_InitTick+0x6c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <HAL_InitTick+0x68>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800250c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f998 	bl	800284a <HAL_SYSTICK_Config>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10f      	bne.n	8002540 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	d809      	bhi.n	800253a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002526:	2200      	movs	r2, #0
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	f04f 30ff 	mov.w	r0, #4294967295
 800252e:	f000 f956 	bl	80027de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002532:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <HAL_InitTick+0x70>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e007      	b.n	800254a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e004      	b.n	800254a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	e001      	b.n	800254a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200001b0 	.word	0x200001b0
 8002558:	200001a8 	.word	0x200001a8
 800255c:	200001ac 	.word	0x200001ac

08002560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_IncTick+0x1c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <HAL_IncTick+0x20>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4413      	add	r3, r2
 800256e:	4a03      	ldr	r2, [pc, #12]	@ (800257c <HAL_IncTick+0x1c>)
 8002570:	6013      	str	r3, [r2, #0]
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	20001ac4 	.word	0x20001ac4
 8002580:	200001b0 	.word	0x200001b0

08002584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <HAL_GetTick+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20001ac4 	.word	0x20001ac4

0800259c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff ffee 	bl	8002584 <HAL_GetTick>
 80025a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d004      	beq.n	80025c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b6:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <HAL_Delay+0x40>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4413      	add	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025c0:	bf00      	nop
 80025c2:	f7ff ffdf 	bl	8002584 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d8f7      	bhi.n	80025c2 <HAL_Delay+0x26>
  {
  }
}
 80025d2:	bf00      	nop
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	200001b0 	.word	0x200001b0

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	@ (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db12      	blt.n	80026b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	490a      	ldr	r1, [pc, #40]	@ (80026c4 <__NVIC_DisableIRQ+0x44>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	3320      	adds	r3, #32
 80026a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80026ac:	f3bf 8f4f 	dsb	sy
}
 80026b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026b2:	f3bf 8f6f 	isb	sy
}
 80026b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100

080026c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	db0a      	blt.n	80026f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	490c      	ldr	r1, [pc, #48]	@ (8002714 <__NVIC_SetPriority+0x4c>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	0112      	lsls	r2, r2, #4
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	440b      	add	r3, r1
 80026ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f0:	e00a      	b.n	8002708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4908      	ldr	r1, [pc, #32]	@ (8002718 <__NVIC_SetPriority+0x50>)
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	3b04      	subs	r3, #4
 8002700:	0112      	lsls	r2, r2, #4
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	440b      	add	r3, r1
 8002706:	761a      	strb	r2, [r3, #24]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000e100 	.word	0xe000e100
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f1c3 0307 	rsb	r3, r3, #7
 8002736:	2b04      	cmp	r3, #4
 8002738:	bf28      	it	cs
 800273a:	2304      	movcs	r3, #4
 800273c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3304      	adds	r3, #4
 8002742:	2b06      	cmp	r3, #6
 8002744:	d902      	bls.n	800274c <NVIC_EncodePriority+0x30>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3b03      	subs	r3, #3
 800274a:	e000      	b.n	800274e <NVIC_EncodePriority+0x32>
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	f04f 32ff 	mov.w	r2, #4294967295
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	401a      	ands	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002764:	f04f 31ff 	mov.w	r1, #4294967295
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43d9      	mvns	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	4313      	orrs	r3, r2
         );
}
 8002776:	4618      	mov	r0, r3
 8002778:	3724      	adds	r7, #36	@ 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002794:	d301      	bcc.n	800279a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002796:	2301      	movs	r3, #1
 8002798:	e00f      	b.n	80027ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279a:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <SysTick_Config+0x40>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a2:	210f      	movs	r1, #15
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f7ff ff8e 	bl	80026c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <SysTick_Config+0x40>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b2:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <SysTick_Config+0x40>)
 80027b4:	2207      	movs	r2, #7
 80027b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	e000e010 	.word	0xe000e010

080027c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff05 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027ec:	f7ff ff1c 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	6978      	ldr	r0, [r7, #20]
 80027f8:	f7ff ff90 	bl	800271c <NVIC_EncodePriority>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff5f 	bl	80026c8 <__NVIC_SetPriority>
}
 800280a:	bf00      	nop
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff0f 	bl	8002644 <__NVIC_EnableIRQ>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff1f 	bl	8002680 <__NVIC_DisableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ff96 	bl	8002784 <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e08d      	b.n	8002992 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	4b47      	ldr	r3, [pc, #284]	@ (800299c <HAL_DMA_Init+0x138>)
 800287e:	429a      	cmp	r2, r3
 8002880:	d80f      	bhi.n	80028a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	4b45      	ldr	r3, [pc, #276]	@ (80029a0 <HAL_DMA_Init+0x13c>)
 800288a:	4413      	add	r3, r2
 800288c:	4a45      	ldr	r2, [pc, #276]	@ (80029a4 <HAL_DMA_Init+0x140>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a42      	ldr	r2, [pc, #264]	@ (80029a8 <HAL_DMA_Init+0x144>)
 800289e:	641a      	str	r2, [r3, #64]	@ 0x40
 80028a0:	e00e      	b.n	80028c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b40      	ldr	r3, [pc, #256]	@ (80029ac <HAL_DMA_Init+0x148>)
 80028aa:	4413      	add	r3, r2
 80028ac:	4a3d      	ldr	r2, [pc, #244]	@ (80029a4 <HAL_DMA_Init+0x140>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a3c      	ldr	r2, [pc, #240]	@ (80029b0 <HAL_DMA_Init+0x14c>)
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80028d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fb0c 	bl	8002f30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002920:	d102      	bne.n	8002928 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800293c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d010      	beq.n	8002968 <HAL_DMA_Init+0x104>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b04      	cmp	r3, #4
 800294c:	d80c      	bhi.n	8002968 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fb2c 	bl	8002fac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	e008      	b.n	800297a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40020407 	.word	0x40020407
 80029a0:	bffdfff8 	.word	0xbffdfff8
 80029a4:	cccccccd 	.word	0xcccccccd
 80029a8:	40020000 	.word	0x40020000
 80029ac:	bffdfbf8 	.word	0xbffdfbf8
 80029b0:	40020400 	.word	0x40020400

080029b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07b      	b.n	8002abe <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac8 <HAL_DMA_DeInit+0x114>)
 80029de:	429a      	cmp	r2, r3
 80029e0:	d80f      	bhi.n	8002a02 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b38      	ldr	r3, [pc, #224]	@ (8002acc <HAL_DMA_DeInit+0x118>)
 80029ea:	4413      	add	r3, r2
 80029ec:	4a38      	ldr	r2, [pc, #224]	@ (8002ad0 <HAL_DMA_DeInit+0x11c>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a35      	ldr	r2, [pc, #212]	@ (8002ad4 <HAL_DMA_DeInit+0x120>)
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a00:	e00e      	b.n	8002a20 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b33      	ldr	r3, [pc, #204]	@ (8002ad8 <HAL_DMA_DeInit+0x124>)
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a30      	ldr	r2, [pc, #192]	@ (8002ad0 <HAL_DMA_DeInit+0x11c>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	009a      	lsls	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8002adc <HAL_DMA_DeInit+0x128>)
 8002a1e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fa77 	bl	8002f30 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a52:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00f      	beq.n	8002a7c <HAL_DMA_DeInit+0xc8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d80b      	bhi.n	8002a7c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 faa1 	bl	8002fac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a7a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40020407 	.word	0x40020407
 8002acc:	bffdfff8 	.word	0xbffdfff8
 8002ad0:	cccccccd 	.word	0xcccccccd
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	bffdfbf8 	.word	0xbffdfbf8
 8002adc:	40020400 	.word	0x40020400

08002ae0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_DMA_Start_IT+0x20>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e066      	b.n	8002bce <HAL_DMA_Start_IT+0xee>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d155      	bne.n	8002bc0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f9bb 	bl	8002eb4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 020e 	orr.w	r2, r2, #14
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e00f      	b.n	8002b78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0204 	bic.w	r2, r2, #4
 8002b66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 020a 	orr.w	r2, r2, #10
 8002b76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e005      	b.n	8002bcc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d005      	beq.n	8002bfa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e037      	b.n	8002c6a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 020e 	bic.w	r2, r2, #14
 8002c08:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c18:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f003 021f 	and.w	r2, r3, #31
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c46:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c5e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c68:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d00d      	beq.n	8002cbc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	e047      	b.n	8002d4c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 020e 	bic.w	r2, r2, #14
 8002cca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d08:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00c      	beq.n	8002d2c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d2a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
    }
  }
  return status;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2204      	movs	r2, #4
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d026      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x7a>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d021      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0204 	bic.w	r2, r2, #4
 8002da8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	f003 021f 	and.w	r2, r3, #31
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	2104      	movs	r1, #4
 8002db8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d071      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002dce:	e06c      	b.n	8002eaa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2202      	movs	r2, #2
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d02e      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d029      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 020a 	bic.w	r2, r2, #10
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	2102      	movs	r1, #2
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d038      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e40:	e033      	b.n	8002eaa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d02a      	beq.n	8002eac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d025      	beq.n	8002eac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e74:	f003 021f 	and.w	r2, r3, #31
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
}
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002eca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002edc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	f003 021f 	and.w	r2, r3, #31
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d108      	bne.n	8002f14 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f12:	e007      	b.n	8002f24 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b16      	ldr	r3, [pc, #88]	@ (8002f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d802      	bhi.n	8002f4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002f44:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e001      	b.n	8002f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002f4c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	3b08      	subs	r3, #8
 8002f5a:	4a12      	ldr	r2, [pc, #72]	@ (8002fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	009a      	lsls	r2, r3, #2
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a0b      	ldr	r2, [pc, #44]	@ (8002fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002f7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2201      	movs	r2, #1
 8002f84:	409a      	lsls	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40020407 	.word	0x40020407
 8002f9c:	40020800 	.word	0x40020800
 8002fa0:	40020820 	.word	0x40020820
 8002fa4:	cccccccd 	.word	0xcccccccd
 8002fa8:	40020880 	.word	0x40020880

08002fac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a08      	ldr	r2, [pc, #32]	@ (8002ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002fce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2201      	movs	r2, #1
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	1000823f 	.word	0x1000823f
 8002ff0:	40020940 	.word	0x40020940

08002ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003002:	e15a      	b.n	80032ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	4013      	ands	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 814c 	beq.w	80032b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d005      	beq.n	8003034 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003030:	2b02      	cmp	r3, #2
 8003032:	d130      	bne.n	8003096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800306a:	2201      	movs	r2, #1
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 0201 	and.w	r2, r3, #1
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d017      	beq.n	80030d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	2203      	movs	r2, #3
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d123      	bne.n	8003126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	220f      	movs	r2, #15
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	08da      	lsrs	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3208      	adds	r2, #8
 8003120:	6939      	ldr	r1, [r7, #16]
 8003122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	2203      	movs	r2, #3
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0203 	and.w	r2, r3, #3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80a6 	beq.w	80032b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003168:	4b5b      	ldr	r3, [pc, #364]	@ (80032d8 <HAL_GPIO_Init+0x2e4>)
 800316a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316c:	4a5a      	ldr	r2, [pc, #360]	@ (80032d8 <HAL_GPIO_Init+0x2e4>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6613      	str	r3, [r2, #96]	@ 0x60
 8003174:	4b58      	ldr	r3, [pc, #352]	@ (80032d8 <HAL_GPIO_Init+0x2e4>)
 8003176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003180:	4a56      	ldr	r2, [pc, #344]	@ (80032dc <HAL_GPIO_Init+0x2e8>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	3302      	adds	r3, #2
 8003188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	220f      	movs	r2, #15
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031aa:	d01f      	beq.n	80031ec <HAL_GPIO_Init+0x1f8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a4c      	ldr	r2, [pc, #304]	@ (80032e0 <HAL_GPIO_Init+0x2ec>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d019      	beq.n	80031e8 <HAL_GPIO_Init+0x1f4>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a4b      	ldr	r2, [pc, #300]	@ (80032e4 <HAL_GPIO_Init+0x2f0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d013      	beq.n	80031e4 <HAL_GPIO_Init+0x1f0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a4a      	ldr	r2, [pc, #296]	@ (80032e8 <HAL_GPIO_Init+0x2f4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00d      	beq.n	80031e0 <HAL_GPIO_Init+0x1ec>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a49      	ldr	r2, [pc, #292]	@ (80032ec <HAL_GPIO_Init+0x2f8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d007      	beq.n	80031dc <HAL_GPIO_Init+0x1e8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a48      	ldr	r2, [pc, #288]	@ (80032f0 <HAL_GPIO_Init+0x2fc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_GPIO_Init+0x1e4>
 80031d4:	2305      	movs	r3, #5
 80031d6:	e00a      	b.n	80031ee <HAL_GPIO_Init+0x1fa>
 80031d8:	2306      	movs	r3, #6
 80031da:	e008      	b.n	80031ee <HAL_GPIO_Init+0x1fa>
 80031dc:	2304      	movs	r3, #4
 80031de:	e006      	b.n	80031ee <HAL_GPIO_Init+0x1fa>
 80031e0:	2303      	movs	r3, #3
 80031e2:	e004      	b.n	80031ee <HAL_GPIO_Init+0x1fa>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e002      	b.n	80031ee <HAL_GPIO_Init+0x1fa>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <HAL_GPIO_Init+0x1fa>
 80031ec:	2300      	movs	r3, #0
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	f002 0203 	and.w	r2, r2, #3
 80031f4:	0092      	lsls	r2, r2, #2
 80031f6:	4093      	lsls	r3, r2
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031fe:	4937      	ldr	r1, [pc, #220]	@ (80032dc <HAL_GPIO_Init+0x2e8>)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	3302      	adds	r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800320c:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43db      	mvns	r3, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003230:	4a30      	ldr	r2, [pc, #192]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003236:	4b2f      	ldr	r3, [pc, #188]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800325a:	4a26      	ldr	r2, [pc, #152]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003260:	4b24      	ldr	r3, [pc, #144]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003284:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800328a:	4b1a      	ldr	r3, [pc, #104]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ae:	4a11      	ldr	r2, [pc, #68]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f47f ae9d 	bne.w	8003004 <HAL_GPIO_Init+0x10>
  }
}
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40010000 	.word	0x40010000
 80032e0:	48000400 	.word	0x48000400
 80032e4:	48000800 	.word	0x48000800
 80032e8:	48000c00 	.word	0x48000c00
 80032ec:	48001000 	.word	0x48001000
 80032f0:	48001400 	.word	0x48001400
 80032f4:	40010400 	.word	0x40010400

080032f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003306:	e0bd      	b.n	8003484 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003308:	2201      	movs	r2, #1
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80b0 	beq.w	800347e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800331e:	4a60      	ldr	r2, [pc, #384]	@ (80034a0 <HAL_GPIO_DeInit+0x1a8>)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3302      	adds	r3, #2
 8003326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	220f      	movs	r2, #15
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4013      	ands	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003346:	d01f      	beq.n	8003388 <HAL_GPIO_DeInit+0x90>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a56      	ldr	r2, [pc, #344]	@ (80034a4 <HAL_GPIO_DeInit+0x1ac>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d019      	beq.n	8003384 <HAL_GPIO_DeInit+0x8c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a55      	ldr	r2, [pc, #340]	@ (80034a8 <HAL_GPIO_DeInit+0x1b0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <HAL_GPIO_DeInit+0x88>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a54      	ldr	r2, [pc, #336]	@ (80034ac <HAL_GPIO_DeInit+0x1b4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00d      	beq.n	800337c <HAL_GPIO_DeInit+0x84>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a53      	ldr	r2, [pc, #332]	@ (80034b0 <HAL_GPIO_DeInit+0x1b8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <HAL_GPIO_DeInit+0x80>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a52      	ldr	r2, [pc, #328]	@ (80034b4 <HAL_GPIO_DeInit+0x1bc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_GPIO_DeInit+0x7c>
 8003370:	2305      	movs	r3, #5
 8003372:	e00a      	b.n	800338a <HAL_GPIO_DeInit+0x92>
 8003374:	2306      	movs	r3, #6
 8003376:	e008      	b.n	800338a <HAL_GPIO_DeInit+0x92>
 8003378:	2304      	movs	r3, #4
 800337a:	e006      	b.n	800338a <HAL_GPIO_DeInit+0x92>
 800337c:	2303      	movs	r3, #3
 800337e:	e004      	b.n	800338a <HAL_GPIO_DeInit+0x92>
 8003380:	2302      	movs	r3, #2
 8003382:	e002      	b.n	800338a <HAL_GPIO_DeInit+0x92>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_GPIO_DeInit+0x92>
 8003388:	2300      	movs	r3, #0
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	f002 0203 	and.w	r2, r2, #3
 8003390:	0092      	lsls	r2, r2, #2
 8003392:	4093      	lsls	r3, r2
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	429a      	cmp	r2, r3
 8003398:	d132      	bne.n	8003400 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800339a:	4b47      	ldr	r3, [pc, #284]	@ (80034b8 <HAL_GPIO_DeInit+0x1c0>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	4945      	ldr	r1, [pc, #276]	@ (80034b8 <HAL_GPIO_DeInit+0x1c0>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80033a8:	4b43      	ldr	r3, [pc, #268]	@ (80034b8 <HAL_GPIO_DeInit+0x1c0>)
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	4941      	ldr	r1, [pc, #260]	@ (80034b8 <HAL_GPIO_DeInit+0x1c0>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80033b6:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <HAL_GPIO_DeInit+0x1c0>)
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	43db      	mvns	r3, r3
 80033be:	493e      	ldr	r1, [pc, #248]	@ (80034b8 <HAL_GPIO_DeInit+0x1c0>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80033c4:	4b3c      	ldr	r3, [pc, #240]	@ (80034b8 <HAL_GPIO_DeInit+0x1c0>)
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	493a      	ldr	r1, [pc, #232]	@ (80034b8 <HAL_GPIO_DeInit+0x1c0>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	220f      	movs	r2, #15
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80033e2:	4a2f      	ldr	r2, [pc, #188]	@ (80034a0 <HAL_GPIO_DeInit+0x1a8>)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	3302      	adds	r3, #2
 80033ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	482b      	ldr	r0, [pc, #172]	@ (80034a0 <HAL_GPIO_DeInit+0x1a8>)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	400a      	ands	r2, r1
 80033fa:	3302      	adds	r3, #2
 80033fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	2103      	movs	r1, #3
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	08da      	lsrs	r2, r3, #3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3208      	adds	r2, #8
 800341c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	08d2      	lsrs	r2, r2, #3
 8003434:	4019      	ands	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3208      	adds	r2, #8
 800343a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2103      	movs	r1, #3
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	401a      	ands	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	2101      	movs	r1, #1
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	401a      	ands	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2103      	movs	r1, #3
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	401a      	ands	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3301      	adds	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	f47f af3b 	bne.w	8003308 <HAL_GPIO_DeInit+0x10>
  }
}
 8003492:	bf00      	nop
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40010000 	.word	0x40010000
 80034a4:	48000400 	.word	0x48000400
 80034a8:	48000800 	.word	0x48000800
 80034ac:	48000c00 	.word	0x48000c00
 80034b0:	48001000 	.word	0x48001000
 80034b4:	48001400 	.word	0x48001400
 80034b8:	40010400 	.word	0x40010400

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d8:	e002      	b.n	80034e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4013      	ands	r3, r2
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43d9      	mvns	r1, r3
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	400b      	ands	r3, r1
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d006      	beq.n	8003544 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003536:	4a05      	ldr	r2, [pc, #20]	@ (800354c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f806 	bl	8003550 <HAL_GPIO_EXTI_Callback>
  }
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40010400 	.word	0x40010400

08003550 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0c0      	b.n	80036fa <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f008 fd89 	bl	800c0a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2203      	movs	r2, #3
 8003596:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f005 f89f 	bl	80086e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e03e      	b.n	8003628 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	3311      	adds	r3, #17
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	440b      	add	r3, r1
 80035cc:	3310      	adds	r3, #16
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	440b      	add	r3, r1
 80035e0:	3313      	adds	r3, #19
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	3320      	adds	r3, #32
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	440b      	add	r3, r1
 8003608:	3324      	adds	r3, #36	@ 0x24
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	3301      	adds	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	791b      	ldrb	r3, [r3, #4]
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	429a      	cmp	r2, r3
 8003630:	d3bb      	bcc.n	80035aa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
 8003636:	e044      	b.n	80036c2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	440b      	add	r3, r1
 8003646:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	440b      	add	r3, r1
 8003688:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	3301      	adds	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	791b      	ldrb	r3, [r3, #4]
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3b5      	bcc.n	8003638 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036d8:	f005 f81e 	bl	8008718 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7a9b      	ldrb	r3, [r3, #10]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d102      	bne.n	80036f8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f001 fc0e 	bl	8004f14 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_PCD_Start+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e012      	b.n	800373e <HAL_PCD_Start+0x3c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f004 ffc5 	bl	80086b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f006 fda2 	bl	800a278 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f006 fda7 	bl	800a2a6 <USB_ReadInterrupts>
 8003758:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fb06 	bl	8003d76 <PCD_EP_ISR_Handler>

    return;
 800376a:	e110      	b.n	800398e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003772:	2b00      	cmp	r3, #0
 8003774:	d013      	beq.n	800379e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003788:	b292      	uxth	r2, r2
 800378a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f008 fd19 	bl	800c1c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003794:	2100      	movs	r1, #0
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f8fc 	bl	8003994 <HAL_PCD_SetAddress>

    return;
 800379c:	e0f7      	b.n	800398e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00c      	beq.n	80037c2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037ba:	b292      	uxth	r2, r2
 80037bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037c0:	e0e5      	b.n	800398e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00c      	beq.n	80037e6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037de:	b292      	uxth	r2, r2
 80037e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037e4:	e0d3      	b.n	800398e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d034      	beq.n	800385a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0204 	bic.w	r2, r2, #4
 8003802:	b292      	uxth	r2, r2
 8003804:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003810:	b29a      	uxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0208 	bic.w	r2, r2, #8
 800381a:	b292      	uxth	r2, r2
 800381c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003832:	2100      	movs	r1, #0
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f008 feb9 	bl	800c5ac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f008 fcfc 	bl	800c238 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003852:	b292      	uxth	r2, r2
 8003854:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003858:	e099      	b.n	800398e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003860:	2b00      	cmp	r3, #0
 8003862:	d027      	beq.n	80038b4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800386c:	b29a      	uxth	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0208 	orr.w	r2, r2, #8
 8003876:	b292      	uxth	r2, r2
 8003878:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800388e:	b292      	uxth	r2, r2
 8003890:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0204 	orr.w	r2, r2, #4
 80038a6:	b292      	uxth	r2, r2
 80038a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f008 fca9 	bl	800c204 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038b2:	e06c      	b.n	800398e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d040      	beq.n	8003940 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038d0:	b292      	uxth	r2, r2
 80038d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d12b      	bne.n	8003938 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0204 	orr.w	r2, r2, #4
 80038f2:	b292      	uxth	r2, r2
 80038f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0208 	orr.w	r2, r2, #8
 800390a:	b292      	uxth	r2, r2
 800390c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003920:	b29b      	uxth	r3, r3
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800392e:	2101      	movs	r1, #1
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f008 fe3b 	bl	800c5ac <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003936:	e02a      	b.n	800398e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f008 fc63 	bl	800c204 <HAL_PCD_SuspendCallback>
    return;
 800393e:	e026      	b.n	800398e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00f      	beq.n	800396a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003952:	b29a      	uxth	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800395c:	b292      	uxth	r2, r2
 800395e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f008 fc21 	bl	800c1aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003968:	e011      	b.n	800398e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00c      	beq.n	800398e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800397c:	b29a      	uxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003986:	b292      	uxth	r2, r2
 8003988:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800398c:	bf00      	nop
  }
}
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_PCD_SetAddress+0x1a>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e012      	b.n	80039d4 <HAL_PCD_SetAddress+0x40>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f006 fc43 	bl	800a250 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	4608      	mov	r0, r1
 80039e6:	4611      	mov	r1, r2
 80039e8:	461a      	mov	r2, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	70fb      	strb	r3, [r7, #3]
 80039ee:	460b      	mov	r3, r1
 80039f0:	803b      	strh	r3, [r7, #0]
 80039f2:	4613      	mov	r3, r2
 80039f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da0e      	bge.n	8003a20 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 0207 	and.w	r2, r3, #7
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	3310      	adds	r3, #16
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	705a      	strb	r2, [r3, #1]
 8003a1e:	e00e      	b.n	8003a3e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	f003 0207 	and.w	r2, r3, #7
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003a4a:	883b      	ldrh	r3, [r7, #0]
 8003a4c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	78ba      	ldrb	r2, [r7, #2]
 8003a58:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a5a:	78bb      	ldrb	r3, [r7, #2]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d102      	bne.n	8003a66 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_PCD_EP_Open+0x98>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e00e      	b.n	8003a92 <HAL_PCD_EP_Open+0xb6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68f9      	ldr	r1, [r7, #12]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f004 fe66 	bl	8008754 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003a90:	7afb      	ldrb	r3, [r7, #11]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	da0e      	bge.n	8003acc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 0207 	and.w	r2, r3, #7
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	3310      	adds	r3, #16
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	705a      	strb	r2, [r3, #1]
 8003aca:	e00e      	b.n	8003aea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	f003 0207 	and.w	r2, r3, #7
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_PCD_EP_Close+0x6a>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e00e      	b.n	8003b22 <HAL_PCD_EP_Close+0x88>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68f9      	ldr	r1, [r7, #12]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f005 fb06 	bl	8009124 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	460b      	mov	r3, r1
 8003b38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b3a:	7afb      	ldrb	r3, [r7, #11]
 8003b3c:	f003 0207 	and.w	r2, r3, #7
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2200      	movs	r2, #0
 8003b62:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2200      	movs	r2, #0
 8003b68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6a:	7afb      	ldrb	r3, [r7, #11]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6979      	ldr	r1, [r7, #20]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f005 fcbe 	bl	80094fe <USB_EPStartXfer>

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	f003 0207 	and.w	r2, r3, #7
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	440b      	add	r3, r1
 8003baa:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
 8003bce:	f003 0207 	and.w	r2, r3, #7
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	3310      	adds	r3, #16
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2201      	movs	r2, #1
 8003c06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c08:	7afb      	ldrb	r3, [r7, #11]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6979      	ldr	r1, [r7, #20]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f005 fc6f 	bl	80094fe <USB_EPStartXfer>

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	7912      	ldrb	r2, [r2, #4]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e03e      	b.n	8003cc6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	da0e      	bge.n	8003c6e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	f003 0207 	and.w	r2, r3, #7
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	3310      	adds	r3, #16
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	705a      	strb	r2, [r3, #1]
 8003c6c:	e00c      	b.n	8003c88 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	4413      	add	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_PCD_EP_SetStall+0x7e>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e00e      	b.n	8003cc6 <HAL_PCD_EP_SetStall+0x9c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68f9      	ldr	r1, [r7, #12]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f006 f9d0 	bl	800a05c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	7912      	ldrb	r2, [r2, #4]
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e040      	b.n	8003d6e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	da0e      	bge.n	8003d12 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	f003 0207 	and.w	r2, r3, #7
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	3310      	adds	r3, #16
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	705a      	strb	r2, [r3, #1]
 8003d10:	e00e      	b.n	8003d30 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	f003 0207 	and.w	r2, r3, #7
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	4413      	add	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_PCD_EP_ClrStall+0x82>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e00e      	b.n	8003d6e <HAL_PCD_EP_ClrStall+0xa0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f006 f9cd 	bl	800a0fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b092      	sub	sp, #72	@ 0x48
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d7e:	e333      	b.n	80043e8 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d88:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003d96:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f040 8108 	bne.w	8003fb0 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003da0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d14c      	bne.n	8003e44 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dba:	813b      	strh	r3, [r7, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	893b      	ldrh	r3, [r7, #8]
 8003dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3310      	adds	r3, #16
 8003dd2:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	4413      	add	r3, r2
 8003dee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dfa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	441a      	add	r2, r3
 8003e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e08:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f008 f9b2 	bl	800c176 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	7b1b      	ldrb	r3, [r3, #12]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 82e5 	beq.w	80043e8 <PCD_EP_ISR_Handler+0x672>
 8003e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 82e0 	bne.w	80043e8 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	7b1b      	ldrb	r3, [r3, #12]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	731a      	strb	r2, [r3, #12]
 8003e42:	e2d1      	b.n	80043e8 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e4a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d032      	beq.n	8003ec4 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	4413      	add	r3, r2
 8003e78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e84:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e92:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e96:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f006 fa56 	bl	800a34a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003eaa:	4013      	ands	r3, r2
 8003eac:	817b      	strh	r3, [r7, #10]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	897a      	ldrh	r2, [r7, #10]
 8003eb4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eb8:	b292      	uxth	r2, r2
 8003eba:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f008 f92d 	bl	800c11c <HAL_PCD_SetupStageCallback>
 8003ec2:	e291      	b.n	80043e8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ec4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f280 828d 	bge.w	80043e8 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003eda:	4013      	ands	r3, r2
 8003edc:	81fb      	strh	r3, [r7, #14]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	89fa      	ldrh	r2, [r7, #14]
 8003ee4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ee8:	b292      	uxth	r2, r2
 8003eea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	4413      	add	r3, r2
 8003f06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f12:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d019      	beq.n	8003f50 <PCD_EP_ISR_Handler+0x1da>
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f2a:	6959      	ldr	r1, [r3, #20]
 8003f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f2e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f32:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f006 fa08 	bl	800a34a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	441a      	add	r2, r3
 8003f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f46:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f48:	2100      	movs	r1, #0
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f008 f8f8 	bl	800c140 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003f58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003f5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f040 8242 	bne.w	80043e8 <PCD_EP_ISR_Handler+0x672>
 8003f64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003f66:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f6e:	f000 823b 	beq.w	80043e8 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f82:	81bb      	strh	r3, [r7, #12]
 8003f84:	89bb      	ldrh	r3, [r7, #12]
 8003f86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003f8a:	81bb      	strh	r3, [r7, #12]
 8003f8c:	89bb      	ldrh	r3, [r7, #12]
 8003f8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f92:	81bb      	strh	r3, [r7, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	89bb      	ldrh	r3, [r7, #12]
 8003f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	8013      	strh	r3, [r2, #0]
 8003fae:	e21b      	b.n	80043e8 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fc2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f280 80f1 	bge.w	80041ae <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ff6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ffa:	b292      	uxth	r2, r2
 8003ffc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ffe:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004016:	7b1b      	ldrb	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d123      	bne.n	8004064 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004024:	b29b      	uxth	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	4413      	add	r3, r2
 8004036:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004040:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8004044:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 808b 	beq.w	8004164 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004054:	6959      	ldr	r1, [r3, #20]
 8004056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004058:	88da      	ldrh	r2, [r3, #6]
 800405a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800405e:	f006 f974 	bl	800a34a <USB_ReadPMA>
 8004062:	e07f      	b.n	8004164 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004066:	78db      	ldrb	r3, [r3, #3]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d109      	bne.n	8004080 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800406c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800406e:	461a      	mov	r2, r3
 8004070:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f9c6 	bl	8004404 <HAL_PCD_EP_DB_Receive>
 8004078:	4603      	mov	r3, r0
 800407a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800407e:	e071      	b.n	8004164 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80040ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040bc:	b29b      	uxth	r3, r3
 80040be:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d022      	beq.n	8004120 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	4413      	add	r3, r2
 80040f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004102:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004106:	2b00      	cmp	r3, #0
 8004108:	d02c      	beq.n	8004164 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004110:	6959      	ldr	r1, [r3, #20]
 8004112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004114:	891a      	ldrh	r2, [r3, #8]
 8004116:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800411a:	f006 f916 	bl	800a34a <USB_ReadPMA>
 800411e:	e021      	b.n	8004164 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	4413      	add	r3, r2
 800413a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004144:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004148:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004156:	6959      	ldr	r1, [r3, #20]
 8004158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800415a:	895a      	ldrh	r2, [r3, #10]
 800415c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004160:	f006 f8f3 	bl	800a34a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800416c:	441a      	add	r2, r3
 800416e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004170:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800417a:	441a      	add	r2, r3
 800417c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800417e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <PCD_EP_ISR_Handler+0x41e>
 8004188:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800418c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	429a      	cmp	r2, r3
 8004192:	d206      	bcs.n	80041a2 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f007 ffd0 	bl	800c140 <HAL_PCD_DataOutStageCallback>
 80041a0:	e005      	b.n	80041ae <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041a8:	4618      	mov	r0, r3
 80041aa:	f005 f9a8 	bl	80094fe <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8117 	beq.w	80043e8 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80041ba:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	3310      	adds	r3, #16
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80041fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	2b01      	cmp	r3, #1
 800420c:	f040 80a1 	bne.w	8004352 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004212:	2200      	movs	r2, #0
 8004214:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004218:	7b1b      	ldrb	r3, [r3, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8092 	beq.w	8004344 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004220:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d046      	beq.n	80042b8 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800422a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800422c:	785b      	ldrb	r3, [r3, #1]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d126      	bne.n	8004280 <PCD_EP_ISR_Handler+0x50a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004240:	b29b      	uxth	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4413      	add	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	00da      	lsls	r2, r3, #3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4413      	add	r3, r2
 8004254:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004264:	b29a      	uxth	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	801a      	strh	r2, [r3, #0]
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004278:	b29a      	uxth	r2, r3
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	e061      	b.n	8004344 <PCD_EP_ISR_Handler+0x5ce>
 8004280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d15d      	bne.n	8004344 <PCD_EP_ISR_Handler+0x5ce>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004296:	b29b      	uxth	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	00da      	lsls	r2, r3, #3
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2200      	movs	r2, #0
 80042b4:	801a      	strh	r2, [r3, #0]
 80042b6:	e045      	b.n	8004344 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042c0:	785b      	ldrb	r3, [r3, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d126      	bne.n	8004314 <PCD_EP_ISR_Handler+0x59e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	4413      	add	r3, r2
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	00da      	lsls	r2, r3, #3
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	4413      	add	r3, r2
 80042e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430c:	b29a      	uxth	r2, r3
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e017      	b.n	8004344 <PCD_EP_ISR_Handler+0x5ce>
 8004314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d113      	bne.n	8004344 <PCD_EP_ISR_Handler+0x5ce>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004324:	b29b      	uxth	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432a:	4413      	add	r3, r2
 800432c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800432e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	00da      	lsls	r2, r3, #3
 8004334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004336:	4413      	add	r3, r2
 8004338:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800433c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	2200      	movs	r2, #0
 8004342:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f007 ff13 	bl	800c176 <HAL_PCD_DataInStageCallback>
 8004350:	e04a      	b.n	80043e8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004352:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d13f      	bne.n	80043dc <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004364:	b29b      	uxth	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	4413      	add	r3, r2
 8004376:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004380:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8004382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004388:	429a      	cmp	r2, r3
 800438a:	d906      	bls.n	800439a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800438c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004396:	619a      	str	r2, [r3, #24]
 8004398:	e002      	b.n	80043a0 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800439a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800439c:	2200      	movs	r2, #0
 800439e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80043a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f007 fee1 	bl	800c176 <HAL_PCD_DataInStageCallback>
 80043b4:	e018      	b.n	80043e8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80043b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80043bc:	441a      	add	r2, r3
 80043be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043c0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80043c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80043c8:	441a      	add	r2, r3
 80043ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043cc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043d4:	4618      	mov	r0, r3
 80043d6:	f005 f892 	bl	80094fe <USB_EPStartXfer>
 80043da:	e005      	b.n	80043e8 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80043dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80043de:	461a      	mov	r2, r3
 80043e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f917 	bl	8004616 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	b21b      	sxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f6ff acc3 	blt.w	8003d80 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3748      	adds	r7, #72	@ 0x48
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d07c      	beq.n	8004516 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004424:	b29b      	uxth	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4413      	add	r3, r2
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	4413      	add	r3, r2
 8004436:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004440:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	8b7b      	ldrh	r3, [r7, #26]
 8004448:	429a      	cmp	r2, r3
 800444a:	d306      	bcc.n	800445a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	8b7b      	ldrh	r3, [r7, #26]
 8004452:	1ad2      	subs	r2, r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	619a      	str	r2, [r3, #24]
 8004458:	e002      	b.n	8004460 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2200      	movs	r2, #0
 800445e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d123      	bne.n	80044b0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800447e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004482:	833b      	strh	r3, [r7, #24]
 8004484:	8b3b      	ldrh	r3, [r7, #24]
 8004486:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800448a:	833b      	strh	r3, [r7, #24]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	441a      	add	r2, r3
 800449a:	8b3b      	ldrh	r3, [r7, #24]
 800449c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01f      	beq.n	80044fa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d4:	82fb      	strh	r3, [r7, #22]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	441a      	add	r2, r3
 80044e4:	8afb      	ldrh	r3, [r7, #22]
 80044e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044fa:	8b7b      	ldrh	r3, [r7, #26]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8085 	beq.w	800460c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6959      	ldr	r1, [r3, #20]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	891a      	ldrh	r2, [r3, #8]
 800450e:	8b7b      	ldrh	r3, [r7, #26]
 8004510:	f005 ff1b 	bl	800a34a <USB_ReadPMA>
 8004514:	e07a      	b.n	800460c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	4413      	add	r3, r2
 8004530:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800453a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	699a      	ldr	r2, [r3, #24]
 8004540:	8b7b      	ldrh	r3, [r7, #26]
 8004542:	429a      	cmp	r2, r3
 8004544:	d306      	bcc.n	8004554 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	8b7b      	ldrh	r3, [r7, #26]
 800454c:	1ad2      	subs	r2, r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	619a      	str	r2, [r3, #24]
 8004552:	e002      	b.n	800455a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2200      	movs	r2, #0
 8004558:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d123      	bne.n	80045aa <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457c:	83fb      	strh	r3, [r7, #30]
 800457e:	8bfb      	ldrh	r3, [r7, #30]
 8004580:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004584:	83fb      	strh	r3, [r7, #30]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	441a      	add	r2, r3
 8004594:	8bfb      	ldrh	r3, [r7, #30]
 8004596:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800459a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800459e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11f      	bne.n	80045f4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ce:	83bb      	strh	r3, [r7, #28]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	8bbb      	ldrh	r3, [r7, #28]
 80045e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80045f4:	8b7b      	ldrh	r3, [r7, #26]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d008      	beq.n	800460c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6959      	ldr	r1, [r3, #20]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	895a      	ldrh	r2, [r3, #10]
 8004606:	8b7b      	ldrh	r3, [r7, #26]
 8004608:	f005 fe9f 	bl	800a34a <USB_ReadPMA>
    }
  }

  return count;
 800460c:	8b7b      	ldrh	r3, [r7, #26]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3720      	adds	r7, #32
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b0a6      	sub	sp, #152	@ 0x98
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	4613      	mov	r3, r2
 8004622:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 81f7 	beq.w	8004a1e <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004638:	b29b      	uxth	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	4413      	add	r3, r2
 800464a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004654:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004660:	429a      	cmp	r2, r3
 8004662:	d907      	bls.n	8004674 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	699a      	ldr	r2, [r3, #24]
 8004668:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800466c:	1ad2      	subs	r2, r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	619a      	str	r2, [r3, #24]
 8004672:	e002      	b.n	800467a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2200      	movs	r2, #0
 8004678:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f040 80e1 	bne.w	8004846 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	785b      	ldrb	r3, [r3, #1]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d126      	bne.n	80046da <HAL_PCD_EP_DB_Transmit+0xc4>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	633b      	str	r3, [r7, #48]	@ 0x30
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800469a:	b29b      	uxth	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a0:	4413      	add	r3, r2
 80046a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	00da      	lsls	r2, r3, #3
 80046aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ac:	4413      	add	r3, r2
 80046ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046be:	b29a      	uxth	r2, r3
 80046c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c2:	801a      	strh	r2, [r3, #0]
 80046c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	801a      	strh	r2, [r3, #0]
 80046d8:	e01a      	b.n	8004710 <HAL_PCD_EP_DB_Transmit+0xfa>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	785b      	ldrb	r3, [r3, #1]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d116      	bne.n	8004710 <HAL_PCD_EP_DB_Transmit+0xfa>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f6:	4413      	add	r3, r2
 80046f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	00da      	lsls	r2, r3, #3
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	4413      	add	r3, r2
 8004704:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004708:	637b      	str	r3, [r7, #52]	@ 0x34
 800470a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470c:	2200      	movs	r2, #0
 800470e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	785b      	ldrb	r3, [r3, #1]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d126      	bne.n	800476c <HAL_PCD_EP_DB_Transmit+0x156>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	623b      	str	r3, [r7, #32]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800472c:	b29b      	uxth	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	4413      	add	r3, r2
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	00da      	lsls	r2, r3, #3
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	4413      	add	r3, r2
 8004740:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004750:	b29a      	uxth	r2, r3
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	801a      	strh	r2, [r3, #0]
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004764:	b29a      	uxth	r2, r3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	e017      	b.n	800479c <HAL_PCD_EP_DB_Transmit+0x186>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d113      	bne.n	800479c <HAL_PCD_EP_DB_Transmit+0x186>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800477c:	b29b      	uxth	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	4413      	add	r3, r2
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	00da      	lsls	r2, r3, #3
 800478c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478e:	4413      	add	r3, r2
 8004790:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	2200      	movs	r2, #0
 800479a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	78db      	ldrb	r3, [r3, #3]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d123      	bne.n	80047ec <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047be:	837b      	strh	r3, [r7, #26]
 80047c0:	8b7b      	ldrh	r3, [r7, #26]
 80047c2:	f083 0320 	eor.w	r3, r3, #32
 80047c6:	837b      	strh	r3, [r7, #26]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	441a      	add	r2, r3
 80047d6:	8b7b      	ldrh	r3, [r7, #26]
 80047d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	4619      	mov	r1, r3
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f007 fcbf 	bl	800c176 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01f      	beq.n	8004842 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481c:	833b      	strh	r3, [r7, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	441a      	add	r2, r3
 800482c:	8b3b      	ldrh	r3, [r7, #24]
 800482e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800483a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800483e:	b29b      	uxth	r3, r3
 8004840:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	e31f      	b.n	8004e86 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d021      	beq.n	8004894 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	441a      	add	r2, r3
 800487c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800488c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004890:	b29b      	uxth	r3, r3
 8004892:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800489a:	2b01      	cmp	r3, #1
 800489c:	f040 82ca 	bne.w	8004e34 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80048a8:	441a      	add	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80048b6:	441a      	add	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d309      	bcc.n	80048dc <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048d4:	1ad2      	subs	r2, r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	621a      	str	r2, [r3, #32]
 80048da:	e015      	b.n	8004908 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d107      	bne.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80048e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80048e8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80048f2:	e009      	b.n	8004908 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2200      	movs	r2, #0
 8004906:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d15f      	bne.n	80049d0 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	643b      	str	r3, [r7, #64]	@ 0x40
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800491e:	b29b      	uxth	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004924:	4413      	add	r3, r2
 8004926:	643b      	str	r3, [r7, #64]	@ 0x40
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	00da      	lsls	r2, r3, #3
 800492e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004930:	4413      	add	r3, r2
 8004932:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004942:	b29a      	uxth	r2, r3
 8004944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <HAL_PCD_EP_DB_Transmit+0x34e>
 800494e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495c:	b29a      	uxth	r2, r3
 800495e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	e051      	b.n	8004a08 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004964:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004966:	2b3e      	cmp	r3, #62	@ 0x3e
 8004968:	d816      	bhi.n	8004998 <HAL_PCD_EP_DB_Transmit+0x382>
 800496a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004970:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_PCD_EP_DB_Transmit+0x36a>
 800497a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800497c:	3301      	adds	r3, #1
 800497e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29a      	uxth	r2, r3
 8004986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004988:	b29b      	uxth	r3, r3
 800498a:	029b      	lsls	r3, r3, #10
 800498c:	b29b      	uxth	r3, r3
 800498e:	4313      	orrs	r3, r2
 8004990:	b29a      	uxth	r2, r3
 8004992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004994:	801a      	strh	r2, [r3, #0]
 8004996:	e037      	b.n	8004a08 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004998:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	653b      	str	r3, [r7, #80]	@ 0x50
 800499e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <HAL_PCD_EP_DB_Transmit+0x398>
 80049a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049aa:	3b01      	subs	r3, #1
 80049ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80049ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	029b      	lsls	r3, r3, #10
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4313      	orrs	r3, r2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	e01b      	b.n	8004a08 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d117      	bne.n	8004a08 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	461a      	mov	r2, r3
 80049ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ec:	4413      	add	r3, r2
 80049ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	00da      	lsls	r2, r3, #3
 80049f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049f8:	4413      	add	r3, r2
 80049fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a06:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6959      	ldr	r1, [r3, #20]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	891a      	ldrh	r2, [r3, #8]
 8004a14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f005 fc55 	bl	800a2c6 <USB_WritePMA>
 8004a1c:	e20a      	b.n	8004e34 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4413      	add	r3, r2
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	4413      	add	r3, r2
 8004a38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a42:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d307      	bcc.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a5a:	1ad2      	subs	r2, r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	619a      	str	r2, [r3, #24]
 8004a60:	e002      	b.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2200      	movs	r2, #0
 8004a66:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f040 80f6 	bne.w	8004c5e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d126      	bne.n	8004ac8 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a8e:	4413      	add	r3, r2
 8004a90:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	00da      	lsls	r2, r3, #3
 8004a98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004aa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004aa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ac4:	801a      	strh	r2, [r3, #0]
 8004ac6:	e01a      	b.n	8004afe <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	785b      	ldrb	r3, [r3, #1]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d116      	bne.n	8004afe <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ae4:	4413      	add	r3, r2
 8004ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	00da      	lsls	r2, r3, #3
 8004aee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004af0:	4413      	add	r3, r2
 8004af2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004af6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004afa:	2200      	movs	r2, #0
 8004afc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	785b      	ldrb	r3, [r3, #1]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d12f      	bne.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x558>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b26:	4413      	add	r3, r2
 8004b28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	00da      	lsls	r2, r3, #3
 8004b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b36:	4413      	add	r3, r2
 8004b38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b52:	801a      	strh	r2, [r3, #0]
 8004b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b6a:	801a      	strh	r2, [r3, #0]
 8004b6c:	e01c      	b.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x592>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d118      	bne.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x592>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b86:	4413      	add	r3, r2
 8004b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	00da      	lsls	r2, r3, #3
 8004b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b96:	4413      	add	r3, r2
 8004b98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	78db      	ldrb	r3, [r3, #3]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d127      	bne.n	8004c00 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bca:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004bce:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004bd2:	f083 0320 	eor.w	r3, r3, #32
 8004bd6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	441a      	add	r2, r3
 8004be8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	4619      	mov	r1, r3
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f007 fab5 	bl	800c176 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d121      	bne.n	8004c5a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c30:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	441a      	add	r2, r3
 8004c42:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e113      	b.n	8004e86 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d121      	bne.n	8004cac <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c82:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	441a      	add	r2, r3
 8004c94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	f040 80be 	bne.w	8004e34 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004cc0:	441a      	add	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	69da      	ldr	r2, [r3, #28]
 8004cca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004cce:	441a      	add	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	6a1a      	ldr	r2, [r3, #32]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d309      	bcc.n	8004cf4 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cec:	1ad2      	subs	r2, r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	621a      	str	r2, [r3, #32]
 8004cf2:	e015      	b.n	8004d20 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d107      	bne.n	8004d0c <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004cfc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d00:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d0a:	e009      	b.n	8004d20 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2200      	movs	r2, #0
 8004d16:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	785b      	ldrb	r3, [r3, #1]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d15f      	bne.n	8004dee <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d42:	4413      	add	r3, r2
 8004d44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	00da      	lsls	r2, r3, #3
 8004d4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d4e:	4413      	add	r3, r2
 8004d50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d54:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d64:	801a      	strh	r2, [r3, #0]
 8004d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004d6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	e04e      	b.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d84:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d86:	d816      	bhi.n	8004db6 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004d88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_PCD_EP_DB_Transmit+0x788>
 8004d98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	029b      	lsls	r3, r3, #10
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	4313      	orrs	r3, r2
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db2:	801a      	strh	r2, [r3, #0]
 8004db4:	e034      	b.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004db6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004db8:	095b      	lsrs	r3, r3, #5
 8004dba:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	029b      	lsls	r3, r3, #10
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	e018      	b.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d114      	bne.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e04:	4413      	add	r3, r2
 8004e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	00da      	lsls	r2, r3, #3
 8004e0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e10:	4413      	add	r3, r2
 8004e12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e1e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6959      	ldr	r1, [r3, #20]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	895a      	ldrh	r2, [r3, #10]
 8004e2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f005 fa49 	bl	800a2c6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e4e:	82fb      	strh	r3, [r7, #22]
 8004e50:	8afb      	ldrh	r3, [r7, #22]
 8004e52:	f083 0310 	eor.w	r3, r3, #16
 8004e56:	82fb      	strh	r3, [r7, #22]
 8004e58:	8afb      	ldrh	r3, [r7, #22]
 8004e5a:	f083 0320 	eor.w	r3, r3, #32
 8004e5e:	82fb      	strh	r3, [r7, #22]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	8afb      	ldrh	r3, [r7, #22]
 8004e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3798      	adds	r7, #152	@ 0x98
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b087      	sub	sp, #28
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	817b      	strh	r3, [r7, #10]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ea0:	897b      	ldrh	r3, [r7, #10]
 8004ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00b      	beq.n	8004ec4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eac:	897b      	ldrh	r3, [r7, #10]
 8004eae:	f003 0207 	and.w	r2, r3, #7
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	3310      	adds	r3, #16
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	e009      	b.n	8004ed8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ec4:	897a      	ldrh	r2, [r7, #10]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ed8:	893b      	ldrh	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d107      	bne.n	8004eee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	80da      	strh	r2, [r3, #6]
 8004eec:	e00b      	b.n	8004f06 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	0c1b      	lsrs	r3, r3, #16
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f043 0302 	orr.w	r3, r3, #2
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d141      	bne.n	8004ffa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f76:	4b4b      	ldr	r3, [pc, #300]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f82:	d131      	bne.n	8004fe8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f84:	4b47      	ldr	r3, [pc, #284]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f8a:	4a46      	ldr	r2, [pc, #280]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f94:	4b43      	ldr	r3, [pc, #268]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f9c:	4a41      	ldr	r2, [pc, #260]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fa4:	4b40      	ldr	r3, [pc, #256]	@ (80050a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2232      	movs	r2, #50	@ 0x32
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	4a3f      	ldr	r2, [pc, #252]	@ (80050ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	0c9b      	lsrs	r3, r3, #18
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fba:	e002      	b.n	8004fc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fc2:	4b38      	ldr	r3, [pc, #224]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fce:	d102      	bne.n	8004fd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f2      	bne.n	8004fbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fd6:	4b33      	ldr	r3, [pc, #204]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe2:	d158      	bne.n	8005096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e057      	b.n	8005098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fee:	4a2d      	ldr	r2, [pc, #180]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ff4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ff8:	e04d      	b.n	8005096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005000:	d141      	bne.n	8005086 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005002:	4b28      	ldr	r3, [pc, #160]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500e:	d131      	bne.n	8005074 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005010:	4b24      	ldr	r3, [pc, #144]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005016:	4a23      	ldr	r2, [pc, #140]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800501c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005020:	4b20      	ldr	r3, [pc, #128]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005028:	4a1e      	ldr	r2, [pc, #120]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800502e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005030:	4b1d      	ldr	r3, [pc, #116]	@ (80050a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2232      	movs	r2, #50	@ 0x32
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	4a1c      	ldr	r2, [pc, #112]	@ (80050ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	0c9b      	lsrs	r3, r3, #18
 8005042:	3301      	adds	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005046:	e002      	b.n	800504e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3b01      	subs	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800504e:	4b15      	ldr	r3, [pc, #84]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800505a:	d102      	bne.n	8005062 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f2      	bne.n	8005048 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005062:	4b10      	ldr	r3, [pc, #64]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506e:	d112      	bne.n	8005096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e011      	b.n	8005098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005074:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800507a:	4a0a      	ldr	r2, [pc, #40]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005084:	e007      	b.n	8005096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005086:	4b07      	ldr	r3, [pc, #28]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800508e:	4a05      	ldr	r2, [pc, #20]	@ (80050a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005094:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40007000 	.word	0x40007000
 80050a8:	200001a8 	.word	0x200001a8
 80050ac:	431bde83 	.word	0x431bde83

080050b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80050b4:	4b05      	ldr	r3, [pc, #20]	@ (80050cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4a04      	ldr	r2, [pc, #16]	@ (80050cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050be:	6093      	str	r3, [r2, #8]
}
 80050c0:	bf00      	nop
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40007000 	.word	0x40007000

080050d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e2fe      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d075      	beq.n	80051da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ee:	4b97      	ldr	r3, [pc, #604]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f8:	4b94      	ldr	r3, [pc, #592]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0303 	and.w	r3, r3, #3
 8005100:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b0c      	cmp	r3, #12
 8005106:	d102      	bne.n	800510e <HAL_RCC_OscConfig+0x3e>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b03      	cmp	r3, #3
 800510c:	d002      	beq.n	8005114 <HAL_RCC_OscConfig+0x44>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d10b      	bne.n	800512c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005114:	4b8d      	ldr	r3, [pc, #564]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d05b      	beq.n	80051d8 <HAL_RCC_OscConfig+0x108>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d157      	bne.n	80051d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e2d9      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005134:	d106      	bne.n	8005144 <HAL_RCC_OscConfig+0x74>
 8005136:	4b85      	ldr	r3, [pc, #532]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a84      	ldr	r2, [pc, #528]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 800513c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e01d      	b.n	8005180 <HAL_RCC_OscConfig+0xb0>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800514c:	d10c      	bne.n	8005168 <HAL_RCC_OscConfig+0x98>
 800514e:	4b7f      	ldr	r3, [pc, #508]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a7e      	ldr	r2, [pc, #504]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	4b7c      	ldr	r3, [pc, #496]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a7b      	ldr	r2, [pc, #492]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e00b      	b.n	8005180 <HAL_RCC_OscConfig+0xb0>
 8005168:	4b78      	ldr	r3, [pc, #480]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a77      	ldr	r2, [pc, #476]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 800516e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	4b75      	ldr	r3, [pc, #468]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a74      	ldr	r2, [pc, #464]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 800517a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800517e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d013      	beq.n	80051b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fd f9fc 	bl	8002584 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005190:	f7fd f9f8 	bl	8002584 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	@ 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e29e      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051a2:	4b6a      	ldr	r3, [pc, #424]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0xc0>
 80051ae:	e014      	b.n	80051da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b0:	f7fd f9e8 	bl	8002584 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b8:	f7fd f9e4 	bl	8002584 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b64      	cmp	r3, #100	@ 0x64
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e28a      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051ca:	4b60      	ldr	r3, [pc, #384]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0xe8>
 80051d6:	e000      	b.n	80051da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d075      	beq.n	80052d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e6:	4b59      	ldr	r3, [pc, #356]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051f0:	4b56      	ldr	r3, [pc, #344]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	d102      	bne.n	8005206 <HAL_RCC_OscConfig+0x136>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d002      	beq.n	800520c <HAL_RCC_OscConfig+0x13c>
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b04      	cmp	r3, #4
 800520a:	d11f      	bne.n	800524c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800520c:	4b4f      	ldr	r3, [pc, #316]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_RCC_OscConfig+0x154>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e25d      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005224:	4b49      	ldr	r3, [pc, #292]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	4946      	ldr	r1, [pc, #280]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005238:	4b45      	ldr	r3, [pc, #276]	@ (8005350 <HAL_RCC_OscConfig+0x280>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7fd f955 	bl	80024ec <HAL_InitTick>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d043      	beq.n	80052d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e249      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d023      	beq.n	800529c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005254:	4b3d      	ldr	r3, [pc, #244]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a3c      	ldr	r2, [pc, #240]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 800525a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800525e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fd f990 	bl	8002584 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005268:	f7fd f98c 	bl	8002584 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e232      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800527a:	4b34      	ldr	r3, [pc, #208]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005286:	4b31      	ldr	r3, [pc, #196]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	061b      	lsls	r3, r3, #24
 8005294:	492d      	ldr	r1, [pc, #180]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005296:	4313      	orrs	r3, r2
 8005298:	604b      	str	r3, [r1, #4]
 800529a:	e01a      	b.n	80052d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800529c:	4b2b      	ldr	r3, [pc, #172]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a2a      	ldr	r2, [pc, #168]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 80052a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fd f96c 	bl	8002584 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b0:	f7fd f968 	bl	8002584 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e20e      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052c2:	4b22      	ldr	r3, [pc, #136]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x1e0>
 80052ce:	e000      	b.n	80052d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d041      	beq.n	8005362 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01c      	beq.n	8005320 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052e6:	4b19      	ldr	r3, [pc, #100]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 80052e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ec:	4a17      	ldr	r2, [pc, #92]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f6:	f7fd f945 	bl	8002584 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052fe:	f7fd f941 	bl	8002584 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e1e7      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005310:	4b0e      	ldr	r3, [pc, #56]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0ef      	beq.n	80052fe <HAL_RCC_OscConfig+0x22e>
 800531e:	e020      	b.n	8005362 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005320:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005326:	4a09      	ldr	r2, [pc, #36]	@ (800534c <HAL_RCC_OscConfig+0x27c>)
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005330:	f7fd f928 	bl	8002584 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005336:	e00d      	b.n	8005354 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005338:	f7fd f924 	bl	8002584 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d906      	bls.n	8005354 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e1ca      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
 800534a:	bf00      	nop
 800534c:	40021000 	.word	0x40021000
 8005350:	200001ac 	.word	0x200001ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005354:	4b8c      	ldr	r3, [pc, #560]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1ea      	bne.n	8005338 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80a6 	beq.w	80054bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005370:	2300      	movs	r3, #0
 8005372:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005374:	4b84      	ldr	r3, [pc, #528]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_OscConfig+0x2b4>
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x2b6>
 8005384:	2300      	movs	r3, #0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00d      	beq.n	80053a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800538a:	4b7f      	ldr	r3, [pc, #508]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538e:	4a7e      	ldr	r2, [pc, #504]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005394:	6593      	str	r3, [r2, #88]	@ 0x58
 8005396:	4b7c      	ldr	r3, [pc, #496]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053a2:	2301      	movs	r3, #1
 80053a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053a6:	4b79      	ldr	r3, [pc, #484]	@ (800558c <HAL_RCC_OscConfig+0x4bc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d118      	bne.n	80053e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053b2:	4b76      	ldr	r3, [pc, #472]	@ (800558c <HAL_RCC_OscConfig+0x4bc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a75      	ldr	r2, [pc, #468]	@ (800558c <HAL_RCC_OscConfig+0x4bc>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053be:	f7fd f8e1 	bl	8002584 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c6:	f7fd f8dd 	bl	8002584 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e183      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053d8:	4b6c      	ldr	r3, [pc, #432]	@ (800558c <HAL_RCC_OscConfig+0x4bc>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d108      	bne.n	80053fe <HAL_RCC_OscConfig+0x32e>
 80053ec:	4b66      	ldr	r3, [pc, #408]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f2:	4a65      	ldr	r2, [pc, #404]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053fc:	e024      	b.n	8005448 <HAL_RCC_OscConfig+0x378>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b05      	cmp	r3, #5
 8005404:	d110      	bne.n	8005428 <HAL_RCC_OscConfig+0x358>
 8005406:	4b60      	ldr	r3, [pc, #384]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540c:	4a5e      	ldr	r2, [pc, #376]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 800540e:	f043 0304 	orr.w	r3, r3, #4
 8005412:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005416:	4b5c      	ldr	r3, [pc, #368]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541c:	4a5a      	ldr	r2, [pc, #360]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005426:	e00f      	b.n	8005448 <HAL_RCC_OscConfig+0x378>
 8005428:	4b57      	ldr	r3, [pc, #348]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542e:	4a56      	ldr	r2, [pc, #344]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005438:	4b53      	ldr	r3, [pc, #332]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543e:	4a52      	ldr	r2, [pc, #328]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005440:	f023 0304 	bic.w	r3, r3, #4
 8005444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d016      	beq.n	800547e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005450:	f7fd f898 	bl	8002584 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005456:	e00a      	b.n	800546e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005458:	f7fd f894 	bl	8002584 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e138      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800546e:	4b46      	ldr	r3, [pc, #280]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ed      	beq.n	8005458 <HAL_RCC_OscConfig+0x388>
 800547c:	e015      	b.n	80054aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547e:	f7fd f881 	bl	8002584 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005484:	e00a      	b.n	800549c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005486:	f7fd f87d 	bl	8002584 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005494:	4293      	cmp	r3, r2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e121      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800549c:	4b3a      	ldr	r3, [pc, #232]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1ed      	bne.n	8005486 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054aa:	7ffb      	ldrb	r3, [r7, #31]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d105      	bne.n	80054bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054b0:	4b35      	ldr	r3, [pc, #212]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 80054b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b4:	4a34      	ldr	r2, [pc, #208]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 80054b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d03c      	beq.n	8005542 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01c      	beq.n	800550a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 80054d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e0:	f7fd f850 	bl	8002584 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e8:	f7fd f84c 	bl	8002584 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e0f2      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054fa:	4b23      	ldr	r3, [pc, #140]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 80054fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ef      	beq.n	80054e8 <HAL_RCC_OscConfig+0x418>
 8005508:	e01b      	b.n	8005542 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800550a:	4b1f      	ldr	r3, [pc, #124]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 800550c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005510:	4a1d      	ldr	r2, [pc, #116]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551a:	f7fd f833 	bl	8002584 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005522:	f7fd f82f 	bl	8002584 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e0d5      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005534:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005536:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ef      	bne.n	8005522 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80c9 	beq.w	80056de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800554c:	4b0e      	ldr	r3, [pc, #56]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 030c 	and.w	r3, r3, #12
 8005554:	2b0c      	cmp	r3, #12
 8005556:	f000 8083 	beq.w	8005660 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d15e      	bne.n	8005620 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005562:	4b09      	ldr	r3, [pc, #36]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a08      	ldr	r2, [pc, #32]	@ (8005588 <HAL_RCC_OscConfig+0x4b8>)
 8005568:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800556c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556e:	f7fd f809 	bl	8002584 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005574:	e00c      	b.n	8005590 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005576:	f7fd f805 	bl	8002584 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d905      	bls.n	8005590 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e0ab      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
 8005588:	40021000 	.word	0x40021000
 800558c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005590:	4b55      	ldr	r3, [pc, #340]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1ec      	bne.n	8005576 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800559c:	4b52      	ldr	r3, [pc, #328]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	4b52      	ldr	r3, [pc, #328]	@ (80056ec <HAL_RCC_OscConfig+0x61c>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6a11      	ldr	r1, [r2, #32]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0112      	lsls	r2, r2, #4
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80055b6:	0212      	lsls	r2, r2, #8
 80055b8:	4311      	orrs	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055be:	0852      	lsrs	r2, r2, #1
 80055c0:	3a01      	subs	r2, #1
 80055c2:	0552      	lsls	r2, r2, #21
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055ca:	0852      	lsrs	r2, r2, #1
 80055cc:	3a01      	subs	r2, #1
 80055ce:	0652      	lsls	r2, r2, #25
 80055d0:	4311      	orrs	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055d6:	06d2      	lsls	r2, r2, #27
 80055d8:	430a      	orrs	r2, r1
 80055da:	4943      	ldr	r1, [pc, #268]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e0:	4b41      	ldr	r3, [pc, #260]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a40      	ldr	r2, [pc, #256]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 80055e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055ec:	4b3e      	ldr	r3, [pc, #248]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4a3d      	ldr	r2, [pc, #244]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 80055f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fc ffc4 	bl	8002584 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005600:	f7fc ffc0 	bl	8002584 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e066      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005612:	4b35      	ldr	r3, [pc, #212]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x530>
 800561e:	e05e      	b.n	80056de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005620:	4b31      	ldr	r3, [pc, #196]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a30      	ldr	r2, [pc, #192]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 8005626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800562a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc ffaa 	bl	8002584 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005634:	f7fc ffa6 	bl	8002584 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e04c      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005646:	4b28      	ldr	r3, [pc, #160]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005652:	4b25      	ldr	r3, [pc, #148]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	4924      	ldr	r1, [pc, #144]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 8005658:	4b25      	ldr	r3, [pc, #148]	@ (80056f0 <HAL_RCC_OscConfig+0x620>)
 800565a:	4013      	ands	r3, r2
 800565c:	60cb      	str	r3, [r1, #12]
 800565e:	e03e      	b.n	80056de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e039      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800566c:	4b1e      	ldr	r3, [pc, #120]	@ (80056e8 <HAL_RCC_OscConfig+0x618>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f003 0203 	and.w	r2, r3, #3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	429a      	cmp	r2, r3
 800567e:	d12c      	bne.n	80056da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	3b01      	subs	r3, #1
 800568c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d123      	bne.n	80056da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d11b      	bne.n	80056da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d113      	bne.n	80056da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	3b01      	subs	r3, #1
 80056c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d109      	bne.n	80056da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	3b01      	subs	r3, #1
 80056d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d001      	beq.n	80056de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40021000 	.word	0x40021000
 80056ec:	019f800c 	.word	0x019f800c
 80056f0:	feeefffc 	.word	0xfeeefffc

080056f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e11e      	b.n	800594a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800570c:	4b91      	ldr	r3, [pc, #580]	@ (8005954 <HAL_RCC_ClockConfig+0x260>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d910      	bls.n	800573c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800571a:	4b8e      	ldr	r3, [pc, #568]	@ (8005954 <HAL_RCC_ClockConfig+0x260>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f023 020f 	bic.w	r2, r3, #15
 8005722:	498c      	ldr	r1, [pc, #560]	@ (8005954 <HAL_RCC_ClockConfig+0x260>)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	4313      	orrs	r3, r2
 8005728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800572a:	4b8a      	ldr	r3, [pc, #552]	@ (8005954 <HAL_RCC_ClockConfig+0x260>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e106      	b.n	800594a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d073      	beq.n	8005830 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d129      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005750:	4b81      	ldr	r3, [pc, #516]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0f4      	b.n	800594a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005760:	f000 f99e 	bl	8005aa0 <RCC_GetSysClockFreqFromPLLSource>
 8005764:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4a7c      	ldr	r2, [pc, #496]	@ (800595c <HAL_RCC_ClockConfig+0x268>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d93f      	bls.n	80057ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800576e:	4b7a      	ldr	r3, [pc, #488]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005782:	2b00      	cmp	r3, #0
 8005784:	d033      	beq.n	80057ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800578a:	2b00      	cmp	r3, #0
 800578c:	d12f      	bne.n	80057ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800578e:	4b72      	ldr	r3, [pc, #456]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005796:	4a70      	ldr	r2, [pc, #448]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 8005798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800579c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800579e:	2380      	movs	r3, #128	@ 0x80
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	e024      	b.n	80057ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d107      	bne.n	80057bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ac:	4b6a      	ldr	r3, [pc, #424]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d109      	bne.n	80057cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0c6      	b.n	800594a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057bc:	4b66      	ldr	r3, [pc, #408]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0be      	b.n	800594a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80057cc:	f000 f8ce 	bl	800596c <HAL_RCC_GetSysClockFreq>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4a61      	ldr	r2, [pc, #388]	@ (800595c <HAL_RCC_ClockConfig+0x268>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d909      	bls.n	80057ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057da:	4b5f      	ldr	r3, [pc, #380]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057e2:	4a5d      	ldr	r2, [pc, #372]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 80057e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80057ea:	2380      	movs	r3, #128	@ 0x80
 80057ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f023 0203 	bic.w	r2, r3, #3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	4957      	ldr	r1, [pc, #348]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005800:	f7fc fec0 	bl	8002584 <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005806:	e00a      	b.n	800581e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005808:	f7fc febc 	bl	8002584 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005816:	4293      	cmp	r3, r2
 8005818:	d901      	bls.n	800581e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e095      	b.n	800594a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581e:	4b4e      	ldr	r3, [pc, #312]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 020c 	and.w	r2, r3, #12
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	429a      	cmp	r2, r3
 800582e:	d1eb      	bne.n	8005808 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d023      	beq.n	8005884 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005848:	4b43      	ldr	r3, [pc, #268]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4a42      	ldr	r2, [pc, #264]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 800584e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005852:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005860:	4b3d      	ldr	r3, [pc, #244]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005868:	4a3b      	ldr	r2, [pc, #236]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 800586a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800586e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005870:	4b39      	ldr	r3, [pc, #228]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4936      	ldr	r1, [pc, #216]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 800587e:	4313      	orrs	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
 8005882:	e008      	b.n	8005896 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b80      	cmp	r3, #128	@ 0x80
 8005888:	d105      	bne.n	8005896 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800588a:	4b33      	ldr	r3, [pc, #204]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4a32      	ldr	r2, [pc, #200]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 8005890:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005894:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005896:	4b2f      	ldr	r3, [pc, #188]	@ (8005954 <HAL_RCC_ClockConfig+0x260>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d21d      	bcs.n	80058e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005954 <HAL_RCC_ClockConfig+0x260>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f023 020f 	bic.w	r2, r3, #15
 80058ac:	4929      	ldr	r1, [pc, #164]	@ (8005954 <HAL_RCC_ClockConfig+0x260>)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058b4:	f7fc fe66 	bl	8002584 <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058bc:	f7fc fe62 	bl	8002584 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e03b      	b.n	800594a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d2:	4b20      	ldr	r3, [pc, #128]	@ (8005954 <HAL_RCC_ClockConfig+0x260>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d1ed      	bne.n	80058bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	4917      	ldr	r1, [pc, #92]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800590a:	4b13      	ldr	r3, [pc, #76]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	490f      	ldr	r1, [pc, #60]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 800591a:	4313      	orrs	r3, r2
 800591c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800591e:	f000 f825 	bl	800596c <HAL_RCC_GetSysClockFreq>
 8005922:	4602      	mov	r2, r0
 8005924:	4b0c      	ldr	r3, [pc, #48]	@ (8005958 <HAL_RCC_ClockConfig+0x264>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	091b      	lsrs	r3, r3, #4
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	490c      	ldr	r1, [pc, #48]	@ (8005960 <HAL_RCC_ClockConfig+0x26c>)
 8005930:	5ccb      	ldrb	r3, [r1, r3]
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	fa22 f303 	lsr.w	r3, r2, r3
 800593a:	4a0a      	ldr	r2, [pc, #40]	@ (8005964 <HAL_RCC_ClockConfig+0x270>)
 800593c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800593e:	4b0a      	ldr	r3, [pc, #40]	@ (8005968 <HAL_RCC_ClockConfig+0x274>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f7fc fdd2 	bl	80024ec <HAL_InitTick>
 8005948:	4603      	mov	r3, r0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40022000 	.word	0x40022000
 8005958:	40021000 	.word	0x40021000
 800595c:	04c4b400 	.word	0x04c4b400
 8005960:	0800d8a8 	.word	0x0800d8a8
 8005964:	200001a8 	.word	0x200001a8
 8005968:	200001ac 	.word	0x200001ac

0800596c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005972:	4b2c      	ldr	r3, [pc, #176]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b04      	cmp	r3, #4
 800597c:	d102      	bne.n	8005984 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800597e:	4b2a      	ldr	r3, [pc, #168]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005980:	613b      	str	r3, [r7, #16]
 8005982:	e047      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005984:	4b27      	ldr	r3, [pc, #156]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 030c 	and.w	r3, r3, #12
 800598c:	2b08      	cmp	r3, #8
 800598e:	d102      	bne.n	8005996 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005990:	4b26      	ldr	r3, [pc, #152]	@ (8005a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e03e      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005996:	4b23      	ldr	r3, [pc, #140]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b0c      	cmp	r3, #12
 80059a0:	d136      	bne.n	8005a10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059a2:	4b20      	ldr	r3, [pc, #128]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	3301      	adds	r3, #1
 80059b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d10c      	bne.n	80059da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059c0:	4a1a      	ldr	r2, [pc, #104]	@ (8005a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c8:	4a16      	ldr	r2, [pc, #88]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ca:	68d2      	ldr	r2, [r2, #12]
 80059cc:	0a12      	lsrs	r2, r2, #8
 80059ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	617b      	str	r3, [r7, #20]
      break;
 80059d8:	e00c      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059da:	4a13      	ldr	r2, [pc, #76]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e2:	4a10      	ldr	r2, [pc, #64]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e4:	68d2      	ldr	r2, [r2, #12]
 80059e6:	0a12      	lsrs	r2, r2, #8
 80059e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059ec:	fb02 f303 	mul.w	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]
      break;
 80059f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	0e5b      	lsrs	r3, r3, #25
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	3301      	adds	r3, #1
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	e001      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a14:	693b      	ldr	r3, [r7, #16]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40021000 	.word	0x40021000
 8005a28:	00f42400 	.word	0x00f42400
 8005a2c:	016e3600 	.word	0x016e3600

08005a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a34:	4b03      	ldr	r3, [pc, #12]	@ (8005a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a36:	681b      	ldr	r3, [r3, #0]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	200001a8 	.word	0x200001a8

08005a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a4c:	f7ff fff0 	bl	8005a30 <HAL_RCC_GetHCLKFreq>
 8005a50:	4602      	mov	r2, r0
 8005a52:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	0a1b      	lsrs	r3, r3, #8
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	4904      	ldr	r1, [pc, #16]	@ (8005a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a5e:	5ccb      	ldrb	r3, [r1, r3]
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	0800d8b8 	.word	0x0800d8b8

08005a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a78:	f7ff ffda 	bl	8005a30 <HAL_RCC_GetHCLKFreq>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	0adb      	lsrs	r3, r3, #11
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	4904      	ldr	r1, [pc, #16]	@ (8005a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a8a:	5ccb      	ldrb	r3, [r1, r3]
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	0800d8b8 	.word	0x0800d8b8

08005aa0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8005b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	3301      	adds	r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d10c      	bne.n	8005ade <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ac4:	4a17      	ldr	r2, [pc, #92]	@ (8005b24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	4a14      	ldr	r2, [pc, #80]	@ (8005b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ace:	68d2      	ldr	r2, [r2, #12]
 8005ad0:	0a12      	lsrs	r2, r2, #8
 8005ad2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	617b      	str	r3, [r7, #20]
    break;
 8005adc:	e00c      	b.n	8005af8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ade:	4a12      	ldr	r2, [pc, #72]	@ (8005b28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8005b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	0a12      	lsrs	r2, r2, #8
 8005aec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]
    break;
 8005af6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005af8:	4b09      	ldr	r3, [pc, #36]	@ (8005b20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	0e5b      	lsrs	r3, r3, #25
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	3301      	adds	r3, #1
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b12:	687b      	ldr	r3, [r7, #4]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40021000 	.word	0x40021000
 8005b24:	016e3600 	.word	0x016e3600
 8005b28:	00f42400 	.word	0x00f42400

08005b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b34:	2300      	movs	r3, #0
 8005b36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b38:	2300      	movs	r3, #0
 8005b3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8098 	beq.w	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b4e:	4b43      	ldr	r3, [pc, #268]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10d      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b5a:	4b40      	ldr	r3, [pc, #256]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b66:	4b3d      	ldr	r3, [pc, #244]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b72:	2301      	movs	r3, #1
 8005b74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b76:	4b3a      	ldr	r3, [pc, #232]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a39      	ldr	r2, [pc, #228]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b82:	f7fc fcff 	bl	8002584 <HAL_GetTick>
 8005b86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b88:	e009      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8a:	f7fc fcfb 	bl	8002584 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d902      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	74fb      	strb	r3, [r7, #19]
        break;
 8005b9c:	e005      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b9e:	4b30      	ldr	r3, [pc, #192]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0ef      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d159      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01e      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d019      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bcc:	4b23      	ldr	r3, [pc, #140]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bd8:	4b20      	ldr	r3, [pc, #128]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bde:	4a1f      	ldr	r2, [pc, #124]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005be8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bee:	4a1b      	ldr	r2, [pc, #108]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bf8:	4a18      	ldr	r2, [pc, #96]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d016      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0a:	f7fc fcbb 	bl	8002584 <HAL_GetTick>
 8005c0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c10:	e00b      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c12:	f7fc fcb7 	bl	8002584 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d902      	bls.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	74fb      	strb	r3, [r7, #19]
            break;
 8005c28:	e006      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0ec      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c38:	7cfb      	ldrb	r3, [r7, #19]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c3e:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4c:	4903      	ldr	r1, [pc, #12]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c54:	e008      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c56:	7cfb      	ldrb	r3, [r7, #19]
 8005c58:	74bb      	strb	r3, [r7, #18]
 8005c5a:	e005      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	7cfb      	ldrb	r3, [r7, #19]
 8005c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c68:	7c7b      	ldrb	r3, [r7, #17]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d105      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6e:	4ba6      	ldr	r3, [pc, #664]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c72:	4aa5      	ldr	r2, [pc, #660]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c86:	4ba0      	ldr	r3, [pc, #640]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8c:	f023 0203 	bic.w	r2, r3, #3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	499c      	ldr	r1, [pc, #624]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ca8:	4b97      	ldr	r3, [pc, #604]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cae:	f023 020c 	bic.w	r2, r3, #12
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	4994      	ldr	r1, [pc, #592]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cca:	4b8f      	ldr	r3, [pc, #572]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	498b      	ldr	r1, [pc, #556]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cec:	4b86      	ldr	r3, [pc, #536]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	4983      	ldr	r1, [pc, #524]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d0e:	4b7e      	ldr	r3, [pc, #504]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d14:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	497a      	ldr	r1, [pc, #488]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d30:	4b75      	ldr	r3, [pc, #468]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	4972      	ldr	r1, [pc, #456]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d52:	4b6d      	ldr	r3, [pc, #436]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	4969      	ldr	r1, [pc, #420]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d74:	4b64      	ldr	r3, [pc, #400]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	4961      	ldr	r1, [pc, #388]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d96:	4b5c      	ldr	r3, [pc, #368]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	4958      	ldr	r1, [pc, #352]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d015      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005db8:	4b53      	ldr	r3, [pc, #332]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc6:	4950      	ldr	r1, [pc, #320]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dd6:	d105      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005de2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d015      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005df0:	4b45      	ldr	r3, [pc, #276]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfe:	4942      	ldr	r1, [pc, #264]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e0e:	d105      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e10:	4b3d      	ldr	r3, [pc, #244]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4a3c      	ldr	r2, [pc, #240]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e1a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d015      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e28:	4b37      	ldr	r3, [pc, #220]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e36:	4934      	ldr	r1, [pc, #208]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e46:	d105      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e48:	4b2f      	ldr	r3, [pc, #188]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d015      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e60:	4b29      	ldr	r3, [pc, #164]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6e:	4926      	ldr	r1, [pc, #152]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e7e:	d105      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e80:	4b21      	ldr	r3, [pc, #132]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4a20      	ldr	r2, [pc, #128]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d015      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e98:	4b1b      	ldr	r3, [pc, #108]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea6:	4918      	ldr	r1, [pc, #96]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eb6:	d105      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb8:	4b13      	ldr	r3, [pc, #76]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	4a12      	ldr	r2, [pc, #72]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ec2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d015      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ede:	490a      	ldr	r1, [pc, #40]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005eee:	d105      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ef0:	4b05      	ldr	r3, [pc, #20]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4a04      	ldr	r2, [pc, #16]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005efa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005efc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40021000 	.word	0x40021000

08005f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e049      	b.n	8005fb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fc f8a2 	bl	800207c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f000 fb12 	bl	8006574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d001      	beq.n	8005fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e04a      	b.n	800606a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a21      	ldr	r2, [pc, #132]	@ (8006078 <HAL_TIM_Base_Start_IT+0xbc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x6c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffe:	d013      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x6c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1d      	ldr	r2, [pc, #116]	@ (800607c <HAL_TIM_Base_Start_IT+0xc0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x6c>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1c      	ldr	r2, [pc, #112]	@ (8006080 <HAL_TIM_Base_Start_IT+0xc4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x6c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1a      	ldr	r2, [pc, #104]	@ (8006084 <HAL_TIM_Base_Start_IT+0xc8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x6c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a19      	ldr	r2, [pc, #100]	@ (8006088 <HAL_TIM_Base_Start_IT+0xcc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d115      	bne.n	8006054 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	4b17      	ldr	r3, [pc, #92]	@ (800608c <HAL_TIM_Base_Start_IT+0xd0>)
 8006030:	4013      	ands	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b06      	cmp	r3, #6
 8006038:	d015      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0xaa>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006040:	d011      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 0201 	orr.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006052:	e008      	b.n	8006066 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	e000      	b.n	8006068 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006066:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40012c00 	.word	0x40012c00
 800607c:	40000400 	.word	0x40000400
 8006080:	40000800 	.word	0x40000800
 8006084:	40013400 	.word	0x40013400
 8006088:	40014000 	.word	0x40014000
 800608c:	00010007 	.word	0x00010007

08006090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d020      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01b      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0202 	mvn.w	r2, #2
 80060c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fa2c 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
 80060e0:	e005      	b.n	80060ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa1e 	bl	8006524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fa2f 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d020      	beq.n	8006140 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01b      	beq.n	8006140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0204 	mvn.w	r2, #4
 8006110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fa06 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
 800612c:	e005      	b.n	800613a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9f8 	bl	8006524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fa09 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 0308 	and.w	r3, r3, #8
 8006146:	2b00      	cmp	r3, #0
 8006148:	d020      	beq.n	800618c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01b      	beq.n	800618c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0208 	mvn.w	r2, #8
 800615c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2204      	movs	r2, #4
 8006162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f9e0 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
 8006178:	e005      	b.n	8006186 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f9d2 	bl	8006524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f9e3 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 0310 	and.w	r3, r3, #16
 8006192:	2b00      	cmp	r3, #0
 8006194:	d020      	beq.n	80061d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01b      	beq.n	80061d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0210 	mvn.w	r2, #16
 80061a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2208      	movs	r2, #8
 80061ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f9ba 	bl	8006538 <HAL_TIM_IC_CaptureCallback>
 80061c4:	e005      	b.n	80061d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9ac 	bl	8006524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f9bd 	bl	800654c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00c      	beq.n	80061fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d007      	beq.n	80061fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0201 	mvn.w	r2, #1
 80061f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fb fd6c 	bl	8001cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006202:	2b00      	cmp	r3, #0
 8006204:	d104      	bne.n	8006210 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00c      	beq.n	800622a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fb69 	bl	80068fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00c      	beq.n	800624e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fb61 	bl	8006910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00c      	beq.n	8006272 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d007      	beq.n	8006272 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800626a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f977 	bl	8006560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00c      	beq.n	8006296 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f06f 0220 	mvn.w	r2, #32
 800628e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fb29 	bl	80068e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00c      	beq.n	80062ba <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80062b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fb35 	bl	8006924 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00c      	beq.n	80062de <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80062d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fb2d 	bl	8006938 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00c      	beq.n	8006302 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80062fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fb25 	bl	800694c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00c      	beq.n	8006326 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800631e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fb1d 	bl	8006960 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_TIM_ConfigClockSource+0x1c>
 8006348:	2302      	movs	r3, #2
 800634a:	e0de      	b.n	800650a <HAL_TIM_ConfigClockSource+0x1da>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800636a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800636e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a63      	ldr	r2, [pc, #396]	@ (8006514 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	f000 80a9 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1ae>
 800638c:	4a61      	ldr	r2, [pc, #388]	@ (8006514 <HAL_TIM_ConfigClockSource+0x1e4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	f200 80ae 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006394:	4a60      	ldr	r2, [pc, #384]	@ (8006518 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	f000 80a1 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1ae>
 800639c:	4a5e      	ldr	r2, [pc, #376]	@ (8006518 <HAL_TIM_ConfigClockSource+0x1e8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	f200 80a6 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80063a4:	4a5d      	ldr	r2, [pc, #372]	@ (800651c <HAL_TIM_ConfigClockSource+0x1ec>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f000 8099 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1ae>
 80063ac:	4a5b      	ldr	r2, [pc, #364]	@ (800651c <HAL_TIM_ConfigClockSource+0x1ec>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f200 809e 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80063b4:	4a5a      	ldr	r2, [pc, #360]	@ (8006520 <HAL_TIM_ConfigClockSource+0x1f0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	f000 8091 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1ae>
 80063bc:	4a58      	ldr	r2, [pc, #352]	@ (8006520 <HAL_TIM_ConfigClockSource+0x1f0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	f200 8096 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80063c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80063c8:	f000 8089 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1ae>
 80063cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80063d0:	f200 808e 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80063d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063d8:	d03e      	beq.n	8006458 <HAL_TIM_ConfigClockSource+0x128>
 80063da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063de:	f200 8087 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e6:	f000 8086 	beq.w	80064f6 <HAL_TIM_ConfigClockSource+0x1c6>
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ee:	d87f      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80063f0:	2b70      	cmp	r3, #112	@ 0x70
 80063f2:	d01a      	beq.n	800642a <HAL_TIM_ConfigClockSource+0xfa>
 80063f4:	2b70      	cmp	r3, #112	@ 0x70
 80063f6:	d87b      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80063f8:	2b60      	cmp	r3, #96	@ 0x60
 80063fa:	d050      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x16e>
 80063fc:	2b60      	cmp	r3, #96	@ 0x60
 80063fe:	d877      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006400:	2b50      	cmp	r3, #80	@ 0x50
 8006402:	d03c      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x14e>
 8006404:	2b50      	cmp	r3, #80	@ 0x50
 8006406:	d873      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006408:	2b40      	cmp	r3, #64	@ 0x40
 800640a:	d058      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x18e>
 800640c:	2b40      	cmp	r3, #64	@ 0x40
 800640e:	d86f      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006410:	2b30      	cmp	r3, #48	@ 0x30
 8006412:	d064      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1ae>
 8006414:	2b30      	cmp	r3, #48	@ 0x30
 8006416:	d86b      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006418:	2b20      	cmp	r3, #32
 800641a:	d060      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1ae>
 800641c:	2b20      	cmp	r3, #32
 800641e:	d867      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d05c      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1ae>
 8006424:	2b10      	cmp	r3, #16
 8006426:	d05a      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1ae>
 8006428:	e062      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800643a:	f000 f9b3 	bl	80067a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800644c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	609a      	str	r2, [r3, #8]
      break;
 8006456:	e04f      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006468:	f000 f99c 	bl	80067a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800647a:	609a      	str	r2, [r3, #8]
      break;
 800647c:	e03c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648a:	461a      	mov	r2, r3
 800648c:	f000 f90e 	bl	80066ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2150      	movs	r1, #80	@ 0x50
 8006496:	4618      	mov	r0, r3
 8006498:	f000 f967 	bl	800676a <TIM_ITRx_SetConfig>
      break;
 800649c:	e02c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 f92d 	bl	800670a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2160      	movs	r1, #96	@ 0x60
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 f957 	bl	800676a <TIM_ITRx_SetConfig>
      break;
 80064bc:	e01c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ca:	461a      	mov	r2, r3
 80064cc:	f000 f8ee 	bl	80066ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2140      	movs	r1, #64	@ 0x40
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f947 	bl	800676a <TIM_ITRx_SetConfig>
      break;
 80064dc:	e00c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4619      	mov	r1, r3
 80064e8:	4610      	mov	r0, r2
 80064ea:	f000 f93e 	bl	800676a <TIM_ITRx_SetConfig>
      break;
 80064ee:	e003      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	73fb      	strb	r3, [r7, #15]
      break;
 80064f4:	e000      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80064f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	00100070 	.word	0x00100070
 8006518:	00100040 	.word	0x00100040
 800651c:	00100030 	.word	0x00100030
 8006520:	00100020 	.word	0x00100020

08006524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a42      	ldr	r2, [pc, #264]	@ (8006690 <TIM_Base_SetConfig+0x11c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00f      	beq.n	80065ac <TIM_Base_SetConfig+0x38>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006592:	d00b      	beq.n	80065ac <TIM_Base_SetConfig+0x38>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a3f      	ldr	r2, [pc, #252]	@ (8006694 <TIM_Base_SetConfig+0x120>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d007      	beq.n	80065ac <TIM_Base_SetConfig+0x38>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a3e      	ldr	r2, [pc, #248]	@ (8006698 <TIM_Base_SetConfig+0x124>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_Base_SetConfig+0x38>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a3d      	ldr	r2, [pc, #244]	@ (800669c <TIM_Base_SetConfig+0x128>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d108      	bne.n	80065be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a33      	ldr	r2, [pc, #204]	@ (8006690 <TIM_Base_SetConfig+0x11c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01b      	beq.n	80065fe <TIM_Base_SetConfig+0x8a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065cc:	d017      	beq.n	80065fe <TIM_Base_SetConfig+0x8a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a30      	ldr	r2, [pc, #192]	@ (8006694 <TIM_Base_SetConfig+0x120>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <TIM_Base_SetConfig+0x8a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006698 <TIM_Base_SetConfig+0x124>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00f      	beq.n	80065fe <TIM_Base_SetConfig+0x8a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a2e      	ldr	r2, [pc, #184]	@ (800669c <TIM_Base_SetConfig+0x128>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00b      	beq.n	80065fe <TIM_Base_SetConfig+0x8a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a2d      	ldr	r2, [pc, #180]	@ (80066a0 <TIM_Base_SetConfig+0x12c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d007      	beq.n	80065fe <TIM_Base_SetConfig+0x8a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a2c      	ldr	r2, [pc, #176]	@ (80066a4 <TIM_Base_SetConfig+0x130>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d003      	beq.n	80065fe <TIM_Base_SetConfig+0x8a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a2b      	ldr	r2, [pc, #172]	@ (80066a8 <TIM_Base_SetConfig+0x134>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d108      	bne.n	8006610 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a16      	ldr	r2, [pc, #88]	@ (8006690 <TIM_Base_SetConfig+0x11c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00f      	beq.n	800665c <TIM_Base_SetConfig+0xe8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a17      	ldr	r2, [pc, #92]	@ (800669c <TIM_Base_SetConfig+0x128>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00b      	beq.n	800665c <TIM_Base_SetConfig+0xe8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a16      	ldr	r2, [pc, #88]	@ (80066a0 <TIM_Base_SetConfig+0x12c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d007      	beq.n	800665c <TIM_Base_SetConfig+0xe8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a15      	ldr	r2, [pc, #84]	@ (80066a4 <TIM_Base_SetConfig+0x130>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_Base_SetConfig+0xe8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a14      	ldr	r2, [pc, #80]	@ (80066a8 <TIM_Base_SetConfig+0x134>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d103      	bne.n	8006664 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b01      	cmp	r3, #1
 8006674:	d105      	bne.n	8006682 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f023 0201 	bic.w	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	611a      	str	r2, [r3, #16]
  }
}
 8006682:	bf00      	nop
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40000400 	.word	0x40000400
 8006698:	40000800 	.word	0x40000800
 800669c:	40013400 	.word	0x40013400
 80066a0:	40014000 	.word	0x40014000
 80066a4:	40014400 	.word	0x40014400
 80066a8:	40014800 	.word	0x40014800

080066ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f023 0201 	bic.w	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f023 030a 	bic.w	r3, r3, #10
 80066e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800670a:	b480      	push	{r7}
 800670c:	b087      	sub	sp, #28
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	f023 0210 	bic.w	r2, r3, #16
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	031b      	lsls	r3, r3, #12
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006746:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	4313      	orrs	r3, r2
 8006750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	f043 0307 	orr.w	r3, r3, #7
 8006790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	609a      	str	r2, [r3, #8]
}
 8006798:	bf00      	nop
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	021a      	lsls	r2, r3, #8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	431a      	orrs	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	609a      	str	r2, [r3, #8]
}
 80067d8:	bf00      	nop
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e065      	b.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a2c      	ldr	r2, [pc, #176]	@ (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a2b      	ldr	r2, [pc, #172]	@ (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d108      	bne.n	8006842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006848:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800684c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1b      	ldr	r2, [pc, #108]	@ (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d018      	beq.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006872:	d013      	beq.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a18      	ldr	r2, [pc, #96]	@ (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00e      	beq.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a17      	ldr	r2, [pc, #92]	@ (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d009      	beq.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a12      	ldr	r2, [pc, #72]	@ (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a13      	ldr	r2, [pc, #76]	@ (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d10c      	bne.n	80068b6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	40012c00 	.word	0x40012c00
 80068d8:	40013400 	.word	0x40013400
 80068dc:	40000400 	.word	0x40000400
 80068e0:	40000800 	.word	0x40000800
 80068e4:	40014000 	.word	0x40014000

080068e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e042      	b.n	8006a0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800698c:	2b00      	cmp	r3, #0
 800698e:	d106      	bne.n	800699e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fb fbe3 	bl	8002164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2224      	movs	r2, #36	@ 0x24
 80069a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0201 	bic.w	r2, r2, #1
 80069b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 ff28 	bl	8007814 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fc59 	bl	800727c <UART_SetConfig>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e01b      	b.n	8006a0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 ffa7 	bl	8007958 <UART_CheckIdleState>
 8006a0a:	4603      	mov	r3, r0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e031      	b.n	8006a8a <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2224      	movs	r2, #36	@ 0x24
 8006a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0201 	bic.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2200      	movs	r2, #0
 8006a54:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fb fc12 	bl	8002280 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b091      	sub	sp, #68	@ 0x44
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d178      	bne.n	8006b9e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_UART_Transmit_IT+0x24>
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e071      	b.n	8006ba0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	88fa      	ldrh	r2, [r7, #6]
 8006ac6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	88fa      	ldrh	r2, [r7, #6]
 8006ace:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2221      	movs	r2, #33	@ 0x21
 8006ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006af0:	d12a      	bne.n	8006b48 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afa:	d107      	bne.n	8006b0c <HAL_UART_Transmit_IT+0x78>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d103      	bne.n	8006b0c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a29      	ldr	r2, [pc, #164]	@ (8006bac <HAL_UART_Transmit_IT+0x118>)
 8006b08:	679a      	str	r2, [r3, #120]	@ 0x78
 8006b0a:	e002      	b.n	8006b12 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a28      	ldr	r2, [pc, #160]	@ (8006bb0 <HAL_UART_Transmit_IT+0x11c>)
 8006b10:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3308      	adds	r3, #8
 8006b18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006b28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b32:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b34:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <HAL_UART_Transmit_IT+0x7e>
 8006b46:	e028      	b.n	8006b9a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b50:	d107      	bne.n	8006b62 <HAL_UART_Transmit_IT+0xce>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4a15      	ldr	r2, [pc, #84]	@ (8006bb4 <HAL_UART_Transmit_IT+0x120>)
 8006b5e:	679a      	str	r2, [r3, #120]	@ 0x78
 8006b60:	e002      	b.n	8006b68 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4a14      	ldr	r2, [pc, #80]	@ (8006bb8 <HAL_UART_Transmit_IT+0x124>)
 8006b66:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	613b      	str	r3, [r7, #16]
   return(result);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b86:	623b      	str	r3, [r7, #32]
 8006b88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	69f9      	ldr	r1, [r7, #28]
 8006b8c:	6a3a      	ldr	r2, [r7, #32]
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e000      	b.n	8006ba0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006b9e:	2302      	movs	r3, #2
  }
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3744      	adds	r7, #68	@ 0x44
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	0800828b 	.word	0x0800828b
 8006bb0:	080081ab 	.word	0x080081ab
 8006bb4:	080080e9 	.word	0x080080e9
 8006bb8:	08008031 	.word	0x08008031

08006bbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b0ba      	sub	sp, #232	@ 0xe8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006be2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006be6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006bea:	4013      	ands	r3, r2
 8006bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006bf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11b      	bne.n	8006c30 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d015      	beq.n	8006c30 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c08:	f003 0320 	and.w	r3, r3, #32
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d009      	beq.n	8006c30 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8300 	beq.w	8007226 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
      }
      return;
 8006c2e:	e2fa      	b.n	8007226 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8123 	beq.w	8006e80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8006e74 <HAL_UART_IRQHandler+0x2b8>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8006e78 <HAL_UART_IRQHandler+0x2bc>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 8116 	beq.w	8006e80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d011      	beq.n	8006c84 <HAL_UART_IRQHandler+0xc8>
 8006c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2201      	movs	r2, #1
 8006c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c7a:	f043 0201 	orr.w	r2, r3, #1
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d011      	beq.n	8006cb4 <HAL_UART_IRQHandler+0xf8>
 8006c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006caa:	f043 0204 	orr.w	r2, r3, #4
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d011      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x128>
 8006cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cda:	f043 0202 	orr.w	r2, r3, #2
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d017      	beq.n	8006d20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d105      	bne.n	8006d08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006cfc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d00:	4b5c      	ldr	r3, [pc, #368]	@ (8006e74 <HAL_UART_IRQHandler+0x2b8>)
 8006d02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d16:	f043 0208 	orr.w	r2, r3, #8
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d012      	beq.n	8006d52 <HAL_UART_IRQHandler+0x196>
 8006d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00c      	beq.n	8006d52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d48:	f043 0220 	orr.w	r2, r3, #32
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 8266 	beq.w	800722a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d013      	beq.n	8006d92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d105      	bne.n	8006d82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da6:	2b40      	cmp	r3, #64	@ 0x40
 8006da8:	d005      	beq.n	8006db6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d054      	beq.n	8006e60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 ffcd 	bl	8007d56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc6:	2b40      	cmp	r3, #64	@ 0x40
 8006dc8:	d146      	bne.n	8006e58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3308      	adds	r3, #8
 8006df2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006df6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1d9      	bne.n	8006dca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d017      	beq.n	8006e50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e26:	4a15      	ldr	r2, [pc, #84]	@ (8006e7c <HAL_UART_IRQHandler+0x2c0>)
 8006e28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fb ff29 	bl	8002c88 <HAL_DMA_Abort_IT>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d019      	beq.n	8006e70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e4e:	e00f      	b.n	8006e70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fa09 	bl	8007268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e56:	e00b      	b.n	8006e70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fa05 	bl	8007268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5e:	e007      	b.n	8006e70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fa01 	bl	8007268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006e6e:	e1dc      	b.n	800722a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e70:	bf00      	nop
    return;
 8006e72:	e1da      	b.n	800722a <HAL_UART_IRQHandler+0x66e>
 8006e74:	10000001 	.word	0x10000001
 8006e78:	04000120 	.word	0x04000120
 8006e7c:	0800800d 	.word	0x0800800d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	f040 8170 	bne.w	800716a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8169 	beq.w	800716a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8162 	beq.w	800716a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2210      	movs	r2, #16
 8006eac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb8:	2b40      	cmp	r3, #64	@ 0x40
 8006eba:	f040 80d8 	bne.w	800706e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ecc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80af 	beq.w	8007034 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006edc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	f080 80a7 	bcs.w	8007034 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f040 8087 	bne.w	8007012 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f32:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1da      	bne.n	8006f04 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3308      	adds	r3, #8
 8006f54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f60:	f023 0301 	bic.w	r3, r3, #1
 8006f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e1      	bne.n	8006f4e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3308      	adds	r3, #8
 8006f90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006fae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006fb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e3      	bne.n	8006f8a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe0:	f023 0310 	bic.w	r3, r3, #16
 8006fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ff4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ff8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e4      	bne.n	8006fd0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800700c:	4618      	mov	r0, r3
 800700e:	f7fb fde2 	bl	8002bd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007024:	b29b      	uxth	r3, r3
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	b29b      	uxth	r3, r3
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fa fee7 	bl	8001e00 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007032:	e0fc      	b.n	800722e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800703a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800703e:	429a      	cmp	r2, r3
 8007040:	f040 80f5 	bne.w	800722e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b20      	cmp	r3, #32
 8007054:	f040 80eb 	bne.w	800722e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fa feca 	bl	8001e00 <HAL_UARTEx_RxEventCallback>
      return;
 800706c:	e0df      	b.n	800722e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800707a:	b29b      	uxth	r3, r3
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 80d1 	beq.w	8007232 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80cc 	beq.w	8007232 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80070bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80070be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e4      	bne.n	800709a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	623b      	str	r3, [r7, #32]
   return(result);
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3308      	adds	r3, #8
 80070f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80070f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80070fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007100:	e841 2300 	strex	r3, r2, [r1]
 8007104:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e1      	bne.n	80070d0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	60fb      	str	r3, [r7, #12]
   return(result);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f023 0310 	bic.w	r3, r3, #16
 8007134:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	69b9      	ldr	r1, [r7, #24]
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	617b      	str	r3, [r7, #20]
   return(result);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e4      	bne.n	8007120 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2202      	movs	r2, #2
 800715a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800715c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fa fe4c 	bl	8001e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007168:	e063      	b.n	8007232 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800716e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00e      	beq.n	8007194 <HAL_UART_IRQHandler+0x5d8>
 8007176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800717a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d008      	beq.n	8007194 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800718a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 f91c 	bl	80083ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007192:	e051      	b.n	8007238 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800719c:	2b00      	cmp	r3, #0
 800719e:	d014      	beq.n	80071ca <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d105      	bne.n	80071b8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d03a      	beq.n	8007236 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
    }
    return;
 80071c8:	e035      	b.n	8007236 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_UART_IRQHandler+0x62e>
 80071d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 f8c6 	bl	8008374 <UART_EndTransmit_IT>
    return;
 80071e8:	e026      	b.n	8007238 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <HAL_UART_IRQHandler+0x64e>
 80071f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 f8f5 	bl	80083f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007208:	e016      	b.n	8007238 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800720e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d010      	beq.n	8007238 <HAL_UART_IRQHandler+0x67c>
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800721a:	2b00      	cmp	r3, #0
 800721c:	da0c      	bge.n	8007238 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 f8dd 	bl	80083de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007224:	e008      	b.n	8007238 <HAL_UART_IRQHandler+0x67c>
      return;
 8007226:	bf00      	nop
 8007228:	e006      	b.n	8007238 <HAL_UART_IRQHandler+0x67c>
    return;
 800722a:	bf00      	nop
 800722c:	e004      	b.n	8007238 <HAL_UART_IRQHandler+0x67c>
      return;
 800722e:	bf00      	nop
 8007230:	e002      	b.n	8007238 <HAL_UART_IRQHandler+0x67c>
      return;
 8007232:	bf00      	nop
 8007234:	e000      	b.n	8007238 <HAL_UART_IRQHandler+0x67c>
    return;
 8007236:	bf00      	nop
  }
}
 8007238:	37e8      	adds	r7, #232	@ 0xe8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop

08007240 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800727c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007280:	b08c      	sub	sp, #48	@ 0x30
 8007282:	af00      	add	r7, sp, #0
 8007284:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	431a      	orrs	r2, r3
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	431a      	orrs	r2, r3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4bab      	ldr	r3, [pc, #684]	@ (8007558 <UART_SetConfig+0x2dc>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072b4:	430b      	orrs	r3, r1
 80072b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4aa0      	ldr	r2, [pc, #640]	@ (800755c <UART_SetConfig+0x2e0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d004      	beq.n	80072e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072e4:	4313      	orrs	r3, r2
 80072e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80072f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072fc:	430b      	orrs	r3, r1
 80072fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007306:	f023 010f 	bic.w	r1, r3, #15
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a91      	ldr	r2, [pc, #580]	@ (8007560 <UART_SetConfig+0x2e4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d125      	bne.n	800736c <UART_SetConfig+0xf0>
 8007320:	4b90      	ldr	r3, [pc, #576]	@ (8007564 <UART_SetConfig+0x2e8>)
 8007322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	2b03      	cmp	r3, #3
 800732c:	d81a      	bhi.n	8007364 <UART_SetConfig+0xe8>
 800732e:	a201      	add	r2, pc, #4	@ (adr r2, 8007334 <UART_SetConfig+0xb8>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	08007345 	.word	0x08007345
 8007338:	08007355 	.word	0x08007355
 800733c:	0800734d 	.word	0x0800734d
 8007340:	0800735d 	.word	0x0800735d
 8007344:	2301      	movs	r3, #1
 8007346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800734a:	e0d6      	b.n	80074fa <UART_SetConfig+0x27e>
 800734c:	2302      	movs	r3, #2
 800734e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007352:	e0d2      	b.n	80074fa <UART_SetConfig+0x27e>
 8007354:	2304      	movs	r3, #4
 8007356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800735a:	e0ce      	b.n	80074fa <UART_SetConfig+0x27e>
 800735c:	2308      	movs	r3, #8
 800735e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007362:	e0ca      	b.n	80074fa <UART_SetConfig+0x27e>
 8007364:	2310      	movs	r3, #16
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800736a:	e0c6      	b.n	80074fa <UART_SetConfig+0x27e>
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a7d      	ldr	r2, [pc, #500]	@ (8007568 <UART_SetConfig+0x2ec>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d138      	bne.n	80073e8 <UART_SetConfig+0x16c>
 8007376:	4b7b      	ldr	r3, [pc, #492]	@ (8007564 <UART_SetConfig+0x2e8>)
 8007378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800737c:	f003 030c 	and.w	r3, r3, #12
 8007380:	2b0c      	cmp	r3, #12
 8007382:	d82d      	bhi.n	80073e0 <UART_SetConfig+0x164>
 8007384:	a201      	add	r2, pc, #4	@ (adr r2, 800738c <UART_SetConfig+0x110>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	080073c1 	.word	0x080073c1
 8007390:	080073e1 	.word	0x080073e1
 8007394:	080073e1 	.word	0x080073e1
 8007398:	080073e1 	.word	0x080073e1
 800739c:	080073d1 	.word	0x080073d1
 80073a0:	080073e1 	.word	0x080073e1
 80073a4:	080073e1 	.word	0x080073e1
 80073a8:	080073e1 	.word	0x080073e1
 80073ac:	080073c9 	.word	0x080073c9
 80073b0:	080073e1 	.word	0x080073e1
 80073b4:	080073e1 	.word	0x080073e1
 80073b8:	080073e1 	.word	0x080073e1
 80073bc:	080073d9 	.word	0x080073d9
 80073c0:	2300      	movs	r3, #0
 80073c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c6:	e098      	b.n	80074fa <UART_SetConfig+0x27e>
 80073c8:	2302      	movs	r3, #2
 80073ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ce:	e094      	b.n	80074fa <UART_SetConfig+0x27e>
 80073d0:	2304      	movs	r3, #4
 80073d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d6:	e090      	b.n	80074fa <UART_SetConfig+0x27e>
 80073d8:	2308      	movs	r3, #8
 80073da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073de:	e08c      	b.n	80074fa <UART_SetConfig+0x27e>
 80073e0:	2310      	movs	r3, #16
 80073e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e6:	e088      	b.n	80074fa <UART_SetConfig+0x27e>
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a5f      	ldr	r2, [pc, #380]	@ (800756c <UART_SetConfig+0x2f0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d125      	bne.n	800743e <UART_SetConfig+0x1c2>
 80073f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007564 <UART_SetConfig+0x2e8>)
 80073f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073fc:	2b30      	cmp	r3, #48	@ 0x30
 80073fe:	d016      	beq.n	800742e <UART_SetConfig+0x1b2>
 8007400:	2b30      	cmp	r3, #48	@ 0x30
 8007402:	d818      	bhi.n	8007436 <UART_SetConfig+0x1ba>
 8007404:	2b20      	cmp	r3, #32
 8007406:	d00a      	beq.n	800741e <UART_SetConfig+0x1a2>
 8007408:	2b20      	cmp	r3, #32
 800740a:	d814      	bhi.n	8007436 <UART_SetConfig+0x1ba>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <UART_SetConfig+0x19a>
 8007410:	2b10      	cmp	r3, #16
 8007412:	d008      	beq.n	8007426 <UART_SetConfig+0x1aa>
 8007414:	e00f      	b.n	8007436 <UART_SetConfig+0x1ba>
 8007416:	2300      	movs	r3, #0
 8007418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741c:	e06d      	b.n	80074fa <UART_SetConfig+0x27e>
 800741e:	2302      	movs	r3, #2
 8007420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007424:	e069      	b.n	80074fa <UART_SetConfig+0x27e>
 8007426:	2304      	movs	r3, #4
 8007428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742c:	e065      	b.n	80074fa <UART_SetConfig+0x27e>
 800742e:	2308      	movs	r3, #8
 8007430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007434:	e061      	b.n	80074fa <UART_SetConfig+0x27e>
 8007436:	2310      	movs	r3, #16
 8007438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800743c:	e05d      	b.n	80074fa <UART_SetConfig+0x27e>
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a4b      	ldr	r2, [pc, #300]	@ (8007570 <UART_SetConfig+0x2f4>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d125      	bne.n	8007494 <UART_SetConfig+0x218>
 8007448:	4b46      	ldr	r3, [pc, #280]	@ (8007564 <UART_SetConfig+0x2e8>)
 800744a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800744e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007452:	2bc0      	cmp	r3, #192	@ 0xc0
 8007454:	d016      	beq.n	8007484 <UART_SetConfig+0x208>
 8007456:	2bc0      	cmp	r3, #192	@ 0xc0
 8007458:	d818      	bhi.n	800748c <UART_SetConfig+0x210>
 800745a:	2b80      	cmp	r3, #128	@ 0x80
 800745c:	d00a      	beq.n	8007474 <UART_SetConfig+0x1f8>
 800745e:	2b80      	cmp	r3, #128	@ 0x80
 8007460:	d814      	bhi.n	800748c <UART_SetConfig+0x210>
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <UART_SetConfig+0x1f0>
 8007466:	2b40      	cmp	r3, #64	@ 0x40
 8007468:	d008      	beq.n	800747c <UART_SetConfig+0x200>
 800746a:	e00f      	b.n	800748c <UART_SetConfig+0x210>
 800746c:	2300      	movs	r3, #0
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007472:	e042      	b.n	80074fa <UART_SetConfig+0x27e>
 8007474:	2302      	movs	r3, #2
 8007476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800747a:	e03e      	b.n	80074fa <UART_SetConfig+0x27e>
 800747c:	2304      	movs	r3, #4
 800747e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007482:	e03a      	b.n	80074fa <UART_SetConfig+0x27e>
 8007484:	2308      	movs	r3, #8
 8007486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800748a:	e036      	b.n	80074fa <UART_SetConfig+0x27e>
 800748c:	2310      	movs	r3, #16
 800748e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007492:	e032      	b.n	80074fa <UART_SetConfig+0x27e>
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a30      	ldr	r2, [pc, #192]	@ (800755c <UART_SetConfig+0x2e0>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d12a      	bne.n	80074f4 <UART_SetConfig+0x278>
 800749e:	4b31      	ldr	r3, [pc, #196]	@ (8007564 <UART_SetConfig+0x2e8>)
 80074a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074ac:	d01a      	beq.n	80074e4 <UART_SetConfig+0x268>
 80074ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074b2:	d81b      	bhi.n	80074ec <UART_SetConfig+0x270>
 80074b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b8:	d00c      	beq.n	80074d4 <UART_SetConfig+0x258>
 80074ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074be:	d815      	bhi.n	80074ec <UART_SetConfig+0x270>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <UART_SetConfig+0x250>
 80074c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c8:	d008      	beq.n	80074dc <UART_SetConfig+0x260>
 80074ca:	e00f      	b.n	80074ec <UART_SetConfig+0x270>
 80074cc:	2300      	movs	r3, #0
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d2:	e012      	b.n	80074fa <UART_SetConfig+0x27e>
 80074d4:	2302      	movs	r3, #2
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074da:	e00e      	b.n	80074fa <UART_SetConfig+0x27e>
 80074dc:	2304      	movs	r3, #4
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e2:	e00a      	b.n	80074fa <UART_SetConfig+0x27e>
 80074e4:	2308      	movs	r3, #8
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ea:	e006      	b.n	80074fa <UART_SetConfig+0x27e>
 80074ec:	2310      	movs	r3, #16
 80074ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f2:	e002      	b.n	80074fa <UART_SetConfig+0x27e>
 80074f4:	2310      	movs	r3, #16
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a17      	ldr	r2, [pc, #92]	@ (800755c <UART_SetConfig+0x2e0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	f040 80a8 	bne.w	8007656 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007506:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800750a:	2b08      	cmp	r3, #8
 800750c:	d834      	bhi.n	8007578 <UART_SetConfig+0x2fc>
 800750e:	a201      	add	r2, pc, #4	@ (adr r2, 8007514 <UART_SetConfig+0x298>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	08007539 	.word	0x08007539
 8007518:	08007579 	.word	0x08007579
 800751c:	08007541 	.word	0x08007541
 8007520:	08007579 	.word	0x08007579
 8007524:	08007547 	.word	0x08007547
 8007528:	08007579 	.word	0x08007579
 800752c:	08007579 	.word	0x08007579
 8007530:	08007579 	.word	0x08007579
 8007534:	0800754f 	.word	0x0800754f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007538:	f7fe fa86 	bl	8005a48 <HAL_RCC_GetPCLK1Freq>
 800753c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800753e:	e021      	b.n	8007584 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007540:	4b0c      	ldr	r3, [pc, #48]	@ (8007574 <UART_SetConfig+0x2f8>)
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007544:	e01e      	b.n	8007584 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007546:	f7fe fa11 	bl	800596c <HAL_RCC_GetSysClockFreq>
 800754a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800754c:	e01a      	b.n	8007584 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800754e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007554:	e016      	b.n	8007584 <UART_SetConfig+0x308>
 8007556:	bf00      	nop
 8007558:	cfff69f3 	.word	0xcfff69f3
 800755c:	40008000 	.word	0x40008000
 8007560:	40013800 	.word	0x40013800
 8007564:	40021000 	.word	0x40021000
 8007568:	40004400 	.word	0x40004400
 800756c:	40004800 	.word	0x40004800
 8007570:	40004c00 	.word	0x40004c00
 8007574:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007582:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 812a 	beq.w	80077e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007590:	4a9e      	ldr	r2, [pc, #632]	@ (800780c <UART_SetConfig+0x590>)
 8007592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007596:	461a      	mov	r2, r3
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	fbb3 f3f2 	udiv	r3, r3, r2
 800759e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	4613      	mov	r3, r2
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	4413      	add	r3, r2
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d305      	bcc.n	80075bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d903      	bls.n	80075c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075c2:	e10d      	b.n	80077e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	2200      	movs	r2, #0
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	60fa      	str	r2, [r7, #12]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d0:	4a8e      	ldr	r2, [pc, #568]	@ (800780c <UART_SetConfig+0x590>)
 80075d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2200      	movs	r2, #0
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075e6:	f7f8 fe6b 	bl	80002c0 <__aeabi_uldivmod>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4610      	mov	r0, r2
 80075f0:	4619      	mov	r1, r3
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	f04f 0300 	mov.w	r3, #0
 80075fa:	020b      	lsls	r3, r1, #8
 80075fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007600:	0202      	lsls	r2, r0, #8
 8007602:	6979      	ldr	r1, [r7, #20]
 8007604:	6849      	ldr	r1, [r1, #4]
 8007606:	0849      	lsrs	r1, r1, #1
 8007608:	2000      	movs	r0, #0
 800760a:	460c      	mov	r4, r1
 800760c:	4605      	mov	r5, r0
 800760e:	eb12 0804 	adds.w	r8, r2, r4
 8007612:	eb43 0905 	adc.w	r9, r3, r5
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	469a      	mov	sl, r3
 800761e:	4693      	mov	fp, r2
 8007620:	4652      	mov	r2, sl
 8007622:	465b      	mov	r3, fp
 8007624:	4640      	mov	r0, r8
 8007626:	4649      	mov	r1, r9
 8007628:	f7f8 fe4a 	bl	80002c0 <__aeabi_uldivmod>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4613      	mov	r3, r2
 8007632:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800763a:	d308      	bcc.n	800764e <UART_SetConfig+0x3d2>
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007642:	d204      	bcs.n	800764e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6a3a      	ldr	r2, [r7, #32]
 800764a:	60da      	str	r2, [r3, #12]
 800764c:	e0c8      	b.n	80077e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007654:	e0c4      	b.n	80077e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800765e:	d167      	bne.n	8007730 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007660:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007664:	2b08      	cmp	r3, #8
 8007666:	d828      	bhi.n	80076ba <UART_SetConfig+0x43e>
 8007668:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <UART_SetConfig+0x3f4>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	08007695 	.word	0x08007695
 8007674:	0800769d 	.word	0x0800769d
 8007678:	080076a5 	.word	0x080076a5
 800767c:	080076bb 	.word	0x080076bb
 8007680:	080076ab 	.word	0x080076ab
 8007684:	080076bb 	.word	0x080076bb
 8007688:	080076bb 	.word	0x080076bb
 800768c:	080076bb 	.word	0x080076bb
 8007690:	080076b3 	.word	0x080076b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007694:	f7fe f9d8 	bl	8005a48 <HAL_RCC_GetPCLK1Freq>
 8007698:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800769a:	e014      	b.n	80076c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800769c:	f7fe f9ea 	bl	8005a74 <HAL_RCC_GetPCLK2Freq>
 80076a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076a2:	e010      	b.n	80076c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a4:	4b5a      	ldr	r3, [pc, #360]	@ (8007810 <UART_SetConfig+0x594>)
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076a8:	e00d      	b.n	80076c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076aa:	f7fe f95f 	bl	800596c <HAL_RCC_GetSysClockFreq>
 80076ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076b0:	e009      	b.n	80076c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076b8:	e005      	b.n	80076c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8089 	beq.w	80077e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d2:	4a4e      	ldr	r2, [pc, #312]	@ (800780c <UART_SetConfig+0x590>)
 80076d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076d8:	461a      	mov	r2, r3
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80076e0:	005a      	lsls	r2, r3, #1
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	085b      	lsrs	r3, r3, #1
 80076e8:	441a      	add	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	2b0f      	cmp	r3, #15
 80076f8:	d916      	bls.n	8007728 <UART_SetConfig+0x4ac>
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007700:	d212      	bcs.n	8007728 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	b29b      	uxth	r3, r3
 8007706:	f023 030f 	bic.w	r3, r3, #15
 800770a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	085b      	lsrs	r3, r3, #1
 8007710:	b29b      	uxth	r3, r3
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	b29a      	uxth	r2, r3
 8007718:	8bfb      	ldrh	r3, [r7, #30]
 800771a:	4313      	orrs	r3, r2
 800771c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	8bfa      	ldrh	r2, [r7, #30]
 8007724:	60da      	str	r2, [r3, #12]
 8007726:	e05b      	b.n	80077e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800772e:	e057      	b.n	80077e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007730:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007734:	2b08      	cmp	r3, #8
 8007736:	d828      	bhi.n	800778a <UART_SetConfig+0x50e>
 8007738:	a201      	add	r2, pc, #4	@ (adr r2, 8007740 <UART_SetConfig+0x4c4>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007765 	.word	0x08007765
 8007744:	0800776d 	.word	0x0800776d
 8007748:	08007775 	.word	0x08007775
 800774c:	0800778b 	.word	0x0800778b
 8007750:	0800777b 	.word	0x0800777b
 8007754:	0800778b 	.word	0x0800778b
 8007758:	0800778b 	.word	0x0800778b
 800775c:	0800778b 	.word	0x0800778b
 8007760:	08007783 	.word	0x08007783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007764:	f7fe f970 	bl	8005a48 <HAL_RCC_GetPCLK1Freq>
 8007768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800776a:	e014      	b.n	8007796 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800776c:	f7fe f982 	bl	8005a74 <HAL_RCC_GetPCLK2Freq>
 8007770:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007772:	e010      	b.n	8007796 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007774:	4b26      	ldr	r3, [pc, #152]	@ (8007810 <UART_SetConfig+0x594>)
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007778:	e00d      	b.n	8007796 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777a:	f7fe f8f7 	bl	800596c <HAL_RCC_GetSysClockFreq>
 800777e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007780:	e009      	b.n	8007796 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007788:	e005      	b.n	8007796 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007794:	bf00      	nop
    }

    if (pclk != 0U)
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	2b00      	cmp	r3, #0
 800779a:	d021      	beq.n	80077e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	4a1a      	ldr	r2, [pc, #104]	@ (800780c <UART_SetConfig+0x590>)
 80077a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	441a      	add	r2, r3
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80077be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	2b0f      	cmp	r3, #15
 80077c4:	d909      	bls.n	80077da <UART_SetConfig+0x55e>
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077cc:	d205      	bcs.n	80077da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60da      	str	r2, [r3, #12]
 80077d8:	e002      	b.n	80077e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2200      	movs	r2, #0
 80077f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2200      	movs	r2, #0
 80077fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80077fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007800:	4618      	mov	r0, r3
 8007802:	3730      	adds	r7, #48	@ 0x30
 8007804:	46bd      	mov	sp, r7
 8007806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800780a:	bf00      	nop
 800780c:	0800d8c0 	.word	0x0800d8c0
 8007810:	00f42400 	.word	0x00f42400

08007814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a8:	f003 0310 	and.w	r3, r3, #16
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ca:	f003 0320 	and.w	r3, r3, #32
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01a      	beq.n	800792a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007912:	d10a      	bne.n	800792a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	605a      	str	r2, [r3, #4]
  }
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b098      	sub	sp, #96	@ 0x60
 800795c:	af02      	add	r7, sp, #8
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007968:	f7fa fe0c 	bl	8002584 <HAL_GetTick>
 800796c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0308 	and.w	r3, r3, #8
 8007978:	2b08      	cmp	r3, #8
 800797a:	d12f      	bne.n	80079dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800797c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007984:	2200      	movs	r2, #0
 8007986:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f88e 	bl	8007aac <UART_WaitOnFlagUntilTimeout>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d022      	beq.n	80079dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80079b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e6      	bne.n	8007996 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e063      	b.n	8007aa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d149      	bne.n	8007a7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079f2:	2200      	movs	r2, #0
 80079f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f857 	bl	8007aac <UART_WaitOnFlagUntilTimeout>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d03c      	beq.n	8007a7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	623b      	str	r3, [r7, #32]
   return(result);
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a22:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e6      	bne.n	8007a04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a56:	61fa      	str	r2, [r7, #28]
 8007a58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	69b9      	ldr	r1, [r7, #24]
 8007a5c:	69fa      	ldr	r2, [r7, #28]
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	617b      	str	r3, [r7, #20]
   return(result);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e5      	bne.n	8007a36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e012      	b.n	8007aa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3758      	adds	r7, #88	@ 0x58
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	603b      	str	r3, [r7, #0]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007abc:	e04f      	b.n	8007b5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d04b      	beq.n	8007b5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac6:	f7fa fd5d 	bl	8002584 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d302      	bcc.n	8007adc <UART_WaitOnFlagUntilTimeout+0x30>
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e04e      	b.n	8007b7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d037      	beq.n	8007b5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b80      	cmp	r3, #128	@ 0x80
 8007af2:	d034      	beq.n	8007b5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b40      	cmp	r3, #64	@ 0x40
 8007af8:	d031      	beq.n	8007b5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d110      	bne.n	8007b2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 f920 	bl	8007d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2208      	movs	r2, #8
 8007b1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e029      	b.n	8007b7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b38:	d111      	bne.n	8007b5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f906 	bl	8007d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e00f      	b.n	8007b7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69da      	ldr	r2, [r3, #28]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	4013      	ands	r3, r2
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	bf0c      	ite	eq
 8007b6e:	2301      	moveq	r3, #1
 8007b70:	2300      	movne	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d0a0      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b096      	sub	sp, #88	@ 0x58
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	88fa      	ldrh	r2, [r7, #6]
 8007ba0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2222      	movs	r2, #34	@ 0x22
 8007bb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d02d      	beq.n	8007c1a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc4:	4a40      	ldr	r2, [pc, #256]	@ (8007cc8 <UART_Start_Receive_DMA+0x140>)
 8007bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bce:	4a3f      	ldr	r2, [pc, #252]	@ (8007ccc <UART_Start_Receive_DMA+0x144>)
 8007bd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8007cd0 <UART_Start_Receive_DMA+0x148>)
 8007bda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be2:	2200      	movs	r2, #0
 8007be4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3324      	adds	r3, #36	@ 0x24
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	f7fa ff70 	bl	8002ae0 <HAL_DMA_Start_IT>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d009      	beq.n	8007c1a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2210      	movs	r2, #16
 8007c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e051      	b.n	8007cbe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d018      	beq.n	8007c54 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c36:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c42:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e6      	bne.n	8007c22 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3308      	adds	r3, #8
 8007c72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007c74:	637a      	str	r2, [r7, #52]	@ 0x34
 8007c76:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e5      	bne.n	8007c54 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	613b      	str	r3, [r7, #16]
   return(result);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ca8:	623a      	str	r2, [r7, #32]
 8007caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	69f9      	ldr	r1, [r7, #28]
 8007cae:	6a3a      	ldr	r2, [r7, #32]
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3758      	adds	r7, #88	@ 0x58
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	08007e23 	.word	0x08007e23
 8007ccc:	08007f4f 	.word	0x08007f4f
 8007cd0:	08007f8d 	.word	0x08007f8d

08007cd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b08f      	sub	sp, #60	@ 0x3c
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cfc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e6      	bne.n	8007cdc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d2e:	61ba      	str	r2, [r7, #24]
 8007d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6979      	ldr	r1, [r7, #20]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e5      	bne.n	8007d0e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007d4a:	bf00      	nop
 8007d4c:	373c      	adds	r7, #60	@ 0x3c
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b095      	sub	sp, #84	@ 0x54
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e6      	bne.n	8007d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3308      	adds	r3, #8
 8007db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e3      	bne.n	8007d90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d118      	bne.n	8007e02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f023 0310 	bic.w	r3, r3, #16
 8007de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dee:	61bb      	str	r3, [r7, #24]
 8007df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6979      	ldr	r1, [r7, #20]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e6      	bne.n	8007dd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e16:	bf00      	nop
 8007e18:	3754      	adds	r7, #84	@ 0x54
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b09c      	sub	sp, #112	@ 0x70
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d171      	bne.n	8007f22 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e4e:	e853 3f00 	ldrex	r3, [r3]
 8007e52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	461a      	mov	r2, r3
 8007e62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e6      	bne.n	8007e46 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8a:	f023 0301 	bic.w	r3, r3, #1
 8007e8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3308      	adds	r3, #8
 8007e96:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007e98:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e9a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e5      	bne.n	8007e78 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	623b      	str	r3, [r7, #32]
   return(result);
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ec2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ecc:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e5      	bne.n	8007eac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d118      	bne.n	8007f22 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f023 0310 	bic.w	r3, r3, #16
 8007f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f0e:	61fb      	str	r3, [r7, #28]
 8007f10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	69b9      	ldr	r1, [r7, #24]
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e6      	bne.n	8007ef0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f24:	2200      	movs	r2, #0
 8007f26:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d107      	bne.n	8007f40 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f36:	4619      	mov	r1, r3
 8007f38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f3a:	f7f9 ff61 	bl	8001e00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f3e:	e002      	b.n	8007f46 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007f40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f42:	f7ff f97d 	bl	8007240 <HAL_UART_RxCpltCallback>
}
 8007f46:	bf00      	nop
 8007f48:	3770      	adds	r7, #112	@ 0x70
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d109      	bne.n	8007f7e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f70:	085b      	lsrs	r3, r3, #1
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	4619      	mov	r1, r3
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7f9 ff42 	bl	8001e00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f7c:	e002      	b.n	8007f84 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f7ff f968 	bl	8007254 <HAL_UART_RxHalfCpltCallback>
}
 8007f84:	bf00      	nop
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fb4:	2b80      	cmp	r3, #128	@ 0x80
 8007fb6:	d109      	bne.n	8007fcc <UART_DMAError+0x40>
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	2b21      	cmp	r3, #33	@ 0x21
 8007fbc:	d106      	bne.n	8007fcc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007fc6:	6978      	ldr	r0, [r7, #20]
 8007fc8:	f7ff fe84 	bl	8007cd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd6:	2b40      	cmp	r3, #64	@ 0x40
 8007fd8:	d109      	bne.n	8007fee <UART_DMAError+0x62>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b22      	cmp	r3, #34	@ 0x22
 8007fde:	d106      	bne.n	8007fee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007fe8:	6978      	ldr	r0, [r7, #20]
 8007fea:	f7ff feb4 	bl	8007d56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff4:	f043 0210 	orr.w	r2, r3, #16
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ffe:	6978      	ldr	r0, [r7, #20]
 8008000:	f7ff f932 	bl	8007268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008004:	bf00      	nop
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008018:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff f920 	bl	8007268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008028:	bf00      	nop
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008030:	b480      	push	{r7}
 8008032:	b08f      	sub	sp, #60	@ 0x3c
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800803e:	2b21      	cmp	r3, #33	@ 0x21
 8008040:	d14c      	bne.n	80080dc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d132      	bne.n	80080b4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	61fb      	str	r3, [r7, #28]
   return(result);
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008062:	637b      	str	r3, [r7, #52]	@ 0x34
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800806c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800806e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e6      	bne.n	800804e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	60bb      	str	r3, [r7, #8]
   return(result);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008094:	633b      	str	r3, [r7, #48]	@ 0x30
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809e:	61bb      	str	r3, [r7, #24]
 80080a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	6979      	ldr	r1, [r7, #20]
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	613b      	str	r3, [r7, #16]
   return(result);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e6      	bne.n	8008080 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80080b2:	e013      	b.n	80080dc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80080dc:	bf00      	nop
 80080de:	373c      	adds	r7, #60	@ 0x3c
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b091      	sub	sp, #68	@ 0x44
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f6:	2b21      	cmp	r3, #33	@ 0x21
 80080f8:	d151      	bne.n	800819e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008100:	b29b      	uxth	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d132      	bne.n	800816c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	623b      	str	r3, [r7, #32]
   return(result);
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800811a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008124:	633b      	str	r3, [r7, #48]	@ 0x30
 8008126:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800812a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e6      	bne.n	8008106 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	60fb      	str	r3, [r7, #12]
   return(result);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800814c:	637b      	str	r3, [r7, #52]	@ 0x34
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	69b9      	ldr	r1, [r7, #24]
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	617b      	str	r3, [r7, #20]
   return(result);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e6      	bne.n	8008138 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800816a:	e018      	b.n	800819e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008170:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008180:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008186:	1c9a      	adds	r2, r3, #2
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008192:	b29b      	uxth	r3, r3
 8008194:	3b01      	subs	r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800819e:	bf00      	nop
 80081a0:	3744      	adds	r7, #68	@ 0x44
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b091      	sub	sp, #68	@ 0x44
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b8:	2b21      	cmp	r3, #33	@ 0x21
 80081ba:	d160      	bne.n	800827e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80081c4:	e057      	b.n	8008276 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d133      	bne.n	800823a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3308      	adds	r3, #8
 80081d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	623b      	str	r3, [r7, #32]
   return(result);
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80081e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3308      	adds	r3, #8
 80081f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80081f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e5      	bne.n	80081d2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	60fb      	str	r3, [r7, #12]
   return(result);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800821a:	637b      	str	r3, [r7, #52]	@ 0x34
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008224:	61fb      	str	r3, [r7, #28]
 8008226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	69b9      	ldr	r1, [r7, #24]
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	617b      	str	r3, [r7, #20]
   return(result);
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e6      	bne.n	8008206 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008238:	e021      	b.n	800827e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008244:	2b00      	cmp	r3, #0
 8008246:	d013      	beq.n	8008270 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800824c:	781a      	ldrb	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b01      	subs	r3, #1
 8008268:	b29a      	uxth	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008270:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008272:	3b01      	subs	r3, #1
 8008274:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008276:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1a4      	bne.n	80081c6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800827c:	e7ff      	b.n	800827e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800827e:	bf00      	nop
 8008280:	3744      	adds	r7, #68	@ 0x44
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800828a:	b480      	push	{r7}
 800828c:	b091      	sub	sp, #68	@ 0x44
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008298:	2b21      	cmp	r3, #33	@ 0x21
 800829a:	d165      	bne.n	8008368 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80082a4:	e05c      	b.n	8008360 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d133      	bne.n	800831a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3308      	adds	r3, #8
 80082b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80082c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3308      	adds	r3, #8
 80082d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e5      	bne.n	80082b2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008304:	61bb      	str	r3, [r7, #24]
 8008306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	6979      	ldr	r1, [r7, #20]
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	e841 2300 	strex	r3, r2, [r1]
 8008310:	613b      	str	r3, [r7, #16]
   return(result);
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e6      	bne.n	80082e6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008318:	e026      	b.n	8008368 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008324:	2b00      	cmp	r3, #0
 8008326:	d018      	beq.n	800835a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800832c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800832e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800833c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008342:	1c9a      	adds	r2, r3, #2
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800835a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800835c:	3b01      	subs	r3, #1
 800835e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008360:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008362:	2b00      	cmp	r3, #0
 8008364:	d19f      	bne.n	80082a6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008366:	e7ff      	b.n	8008368 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008368:	bf00      	nop
 800836a:	3744      	adds	r7, #68	@ 0x44
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	60bb      	str	r3, [r7, #8]
   return(result);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6979      	ldr	r1, [r7, #20]
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	613b      	str	r3, [r7, #16]
   return(result);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e6      	bne.n	800837c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7f9 fd57 	bl	8001e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083c2:	bf00      	nop
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80083de:	b480      	push	{r7}
 80083e0:	b083      	sub	sp, #12
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_UARTEx_DisableFifoMode+0x16>
 8008418:	2302      	movs	r3, #2
 800841a:	e027      	b.n	800846c <HAL_UARTEx_DisableFifoMode+0x66>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2224      	movs	r2, #36	@ 0x24
 8008428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0201 	bic.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800844a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008488:	2b01      	cmp	r3, #1
 800848a:	d101      	bne.n	8008490 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800848c:	2302      	movs	r3, #2
 800848e:	e02d      	b.n	80084ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2224      	movs	r2, #36	@ 0x24
 800849c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0201 	bic.w	r2, r2, #1
 80084b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f8a3 	bl	8008618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008504:	2b01      	cmp	r3, #1
 8008506:	d101      	bne.n	800850c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008508:	2302      	movs	r3, #2
 800850a:	e02d      	b.n	8008568 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2224      	movs	r2, #36	@ 0x24
 8008518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0201 	bic.w	r2, r2, #1
 8008532:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f865 	bl	8008618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b08c      	sub	sp, #48	@ 0x30
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	4613      	mov	r3, r2
 800857c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008584:	2b20      	cmp	r3, #32
 8008586:	d142      	bne.n	800860e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800858e:	88fb      	ldrh	r3, [r7, #6]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e03b      	b.n	8008610 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2201      	movs	r2, #1
 800859c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80085a4:	88fb      	ldrh	r3, [r7, #6]
 80085a6:	461a      	mov	r2, r3
 80085a8:	68b9      	ldr	r1, [r7, #8]
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f7ff faec 	bl	8007b88 <UART_Start_Receive_DMA>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80085b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d124      	bne.n	8008608 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d11d      	bne.n	8008602 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2210      	movs	r2, #16
 80085cc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	617b      	str	r3, [r7, #20]
   return(result);
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f043 0310 	orr.w	r3, r3, #16
 80085e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ee:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6a39      	ldr	r1, [r7, #32]
 80085f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e6      	bne.n	80085ce <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008600:	e002      	b.n	8008608 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008608:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800860c:	e000      	b.n	8008610 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800860e:	2302      	movs	r3, #2
  }
}
 8008610:	4618      	mov	r0, r3
 8008612:	3730      	adds	r7, #48	@ 0x30
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008624:	2b00      	cmp	r3, #0
 8008626:	d108      	bne.n	800863a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008638:	e031      	b.n	800869e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800863a:	2308      	movs	r3, #8
 800863c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800863e:	2308      	movs	r3, #8
 8008640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	0e5b      	lsrs	r3, r3, #25
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	0f5b      	lsrs	r3, r3, #29
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	7b3a      	ldrb	r2, [r7, #12]
 8008666:	4911      	ldr	r1, [pc, #68]	@ (80086ac <UARTEx_SetNbDataToProcess+0x94>)
 8008668:	5c8a      	ldrb	r2, [r1, r2]
 800866a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800866e:	7b3a      	ldrb	r2, [r7, #12]
 8008670:	490f      	ldr	r1, [pc, #60]	@ (80086b0 <UARTEx_SetNbDataToProcess+0x98>)
 8008672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008674:	fb93 f3f2 	sdiv	r3, r3, r2
 8008678:	b29a      	uxth	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	7b7a      	ldrb	r2, [r7, #13]
 8008684:	4909      	ldr	r1, [pc, #36]	@ (80086ac <UARTEx_SetNbDataToProcess+0x94>)
 8008686:	5c8a      	ldrb	r2, [r1, r2]
 8008688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800868c:	7b7a      	ldrb	r2, [r7, #13]
 800868e:	4908      	ldr	r1, [pc, #32]	@ (80086b0 <UARTEx_SetNbDataToProcess+0x98>)
 8008690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008692:	fb93 f3f2 	sdiv	r3, r3, r2
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800869e:	bf00      	nop
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	0800d8d8 	.word	0x0800d8d8
 80086b0:	0800d8e0 	.word	0x0800d8e0

080086b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086c4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80086c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086ea:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80086ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	43db      	mvns	r3, r3
 80086fe:	b29b      	uxth	r3, r3
 8008700:	4013      	ands	r3, r2
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	1d3b      	adds	r3, r7, #4
 8008722:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008754:	b480      	push	{r7}
 8008756:	b0a7      	sub	sp, #156	@ 0x9c
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	78db      	ldrb	r3, [r3, #3]
 8008782:	2b03      	cmp	r3, #3
 8008784:	d81f      	bhi.n	80087c6 <USB_ActivateEndpoint+0x72>
 8008786:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <USB_ActivateEndpoint+0x38>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	0800879d 	.word	0x0800879d
 8008790:	080087b9 	.word	0x080087b9
 8008794:	080087cf 	.word	0x080087cf
 8008798:	080087ab 	.word	0x080087ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800879c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80087a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80087a8:	e012      	b.n	80087d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80087aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80087ae:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80087b2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80087b6:	e00b      	b.n	80087d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80087b8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80087bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80087c0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80087c4:	e004      	b.n	80087d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80087cc:	e000      	b.n	80087d0 <USB_ActivateEndpoint+0x7c>
      break;
 80087ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	441a      	add	r2, r3
 80087da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80087de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	b21b      	sxth	r3, r3
 8008802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800880a:	b21a      	sxth	r2, r3
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b21b      	sxth	r3, r3
 8008812:	4313      	orrs	r3, r2
 8008814:	b21b      	sxth	r3, r3
 8008816:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	441a      	add	r2, r3
 8008824:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008828:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800882c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008830:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008838:	b29b      	uxth	r3, r3
 800883a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	7b1b      	ldrb	r3, [r3, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f040 8180 	bne.w	8008b46 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 8084 	beq.w	8008958 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	61bb      	str	r3, [r7, #24]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800885a:	b29b      	uxth	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	4413      	add	r3, r2
 8008862:	61bb      	str	r3, [r7, #24]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	00da      	lsls	r2, r3, #3
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008872:	617b      	str	r3, [r7, #20]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	88db      	ldrh	r3, [r3, #6]
 8008878:	085b      	lsrs	r3, r3, #1
 800887a:	b29b      	uxth	r3, r3
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	827b      	strh	r3, [r7, #18]
 8008892:	8a7b      	ldrh	r3, [r7, #18]
 8008894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01b      	beq.n	80088d4 <USB_ActivateEndpoint+0x180>
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b2:	823b      	strh	r3, [r7, #16]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	441a      	add	r2, r3
 80088be:	8a3b      	ldrh	r3, [r7, #16]
 80088c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	78db      	ldrb	r3, [r3, #3]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d020      	beq.n	800891e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088f2:	81bb      	strh	r3, [r7, #12]
 80088f4:	89bb      	ldrh	r3, [r7, #12]
 80088f6:	f083 0320 	eor.w	r3, r3, #32
 80088fa:	81bb      	strh	r3, [r7, #12]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	441a      	add	r2, r3
 8008906:	89bb      	ldrh	r3, [r7, #12]
 8008908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800890c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008918:	b29b      	uxth	r3, r3
 800891a:	8013      	strh	r3, [r2, #0]
 800891c:	e3f9      	b.n	8009112 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008934:	81fb      	strh	r3, [r7, #14]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	441a      	add	r2, r3
 8008940:	89fb      	ldrh	r3, [r7, #14]
 8008942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800894a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800894e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008952:	b29b      	uxth	r3, r3
 8008954:	8013      	strh	r3, [r2, #0]
 8008956:	e3dc      	b.n	8009112 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	633b      	str	r3, [r7, #48]	@ 0x30
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008962:	b29b      	uxth	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008968:	4413      	add	r3, r2
 800896a:	633b      	str	r3, [r7, #48]	@ 0x30
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	00da      	lsls	r2, r3, #3
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	4413      	add	r3, r2
 8008976:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800897a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	88db      	ldrh	r3, [r3, #6]
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	b29b      	uxth	r3, r3
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	b29a      	uxth	r2, r3
 8008988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008996:	b29b      	uxth	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899c:	4413      	add	r3, r2
 800899e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	00da      	lsls	r2, r3, #3
 80089a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a8:	4413      	add	r3, r2
 80089aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80089b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089be:	801a      	strh	r2, [r3, #0]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <USB_ActivateEndpoint+0x28a>
 80089c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089da:	801a      	strh	r2, [r3, #0]
 80089dc:	e041      	b.n	8008a62 <USB_ActivateEndpoint+0x30e>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80089e4:	d81c      	bhi.n	8008a20 <USB_ActivateEndpoint+0x2cc>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	085b      	lsrs	r3, r3, #1
 80089ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <USB_ActivateEndpoint+0x2b2>
 80089fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a00:	3301      	adds	r3, #1
 8008a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	029b      	lsls	r3, r3, #10
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	4313      	orrs	r3, r2
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	801a      	strh	r2, [r3, #0]
 8008a1e:	e020      	b.n	8008a62 <USB_ActivateEndpoint+0x30e>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	095b      	lsrs	r3, r3, #5
 8008a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 031f 	and.w	r3, r3, #31
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d104      	bne.n	8008a40 <USB_ActivateEndpoint+0x2ec>
 8008a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	029b      	lsls	r3, r3, #10
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	4313      	orrs	r3, r2
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008a70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d01b      	beq.n	8008ab2 <USB_ActivateEndpoint+0x35e>
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a90:	843b      	strh	r3, [r7, #32]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	441a      	add	r2, r3
 8008a9c:	8c3b      	ldrh	r3, [r7, #32]
 8008a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d124      	bne.n	8008b04 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad0:	83bb      	strh	r3, [r7, #28]
 8008ad2:	8bbb      	ldrh	r3, [r7, #28]
 8008ad4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ad8:	83bb      	strh	r3, [r7, #28]
 8008ada:	8bbb      	ldrh	r3, [r7, #28]
 8008adc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008ae0:	83bb      	strh	r3, [r7, #28]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	441a      	add	r2, r3
 8008aec:	8bbb      	ldrh	r3, [r7, #28]
 8008aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	8013      	strh	r3, [r2, #0]
 8008b02:	e306      	b.n	8009112 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b1a:	83fb      	strh	r3, [r7, #30]
 8008b1c:	8bfb      	ldrh	r3, [r7, #30]
 8008b1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b22:	83fb      	strh	r3, [r7, #30]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	441a      	add	r2, r3
 8008b2e:	8bfb      	ldrh	r3, [r7, #30]
 8008b30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	8013      	strh	r3, [r2, #0]
 8008b44:	e2e5      	b.n	8009112 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	78db      	ldrb	r3, [r3, #3]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d11e      	bne.n	8008b8c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b64:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	441a      	add	r2, r3
 8008b72:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b7e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	8013      	strh	r3, [r2, #0]
 8008b8a:	e01d      	b.n	8008bc8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	441a      	add	r2, r3
 8008bb0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008bd8:	4413      	add	r3, r2
 8008bda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	00da      	lsls	r2, r3, #3
 8008be2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	891b      	ldrh	r3, [r3, #8]
 8008bf0:	085b      	lsrs	r3, r3, #1
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bfa:	801a      	strh	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c0c:	4413      	add	r3, r2
 8008c0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	00da      	lsls	r2, r3, #3
 8008c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c18:	4413      	add	r3, r2
 8008c1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	895b      	ldrh	r3, [r3, #10]
 8008c24:	085b      	lsrs	r3, r3, #1
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f040 81af 	bne.w	8008f98 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8008c4a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8008c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d01d      	beq.n	8008c92 <USB_ActivateEndpoint+0x53e>
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c6c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	441a      	add	r2, r3
 8008c7a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008ca2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d01d      	beq.n	8008cea <USB_ActivateEndpoint+0x596>
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cc4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	441a      	add	r2, r3
 8008cd2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008cd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ce2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d16b      	bne.n	8008dca <USB_ActivateEndpoint+0x676>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	461a      	mov	r2, r3
 8008d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d02:	4413      	add	r3, r2
 8008d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	00da      	lsls	r2, r3, #3
 8008d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d0e:	4413      	add	r3, r2
 8008d10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d24:	801a      	strh	r2, [r3, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <USB_ActivateEndpoint+0x5f0>
 8008d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d40:	801a      	strh	r2, [r3, #0]
 8008d42:	e05d      	b.n	8008e00 <USB_ActivateEndpoint+0x6ac>
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d4a:	d81c      	bhi.n	8008d86 <USB_ActivateEndpoint+0x632>
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	085b      	lsrs	r3, r3, #1
 8008d52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d004      	beq.n	8008d6c <USB_ActivateEndpoint+0x618>
 8008d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d66:	3301      	adds	r3, #1
 8008d68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	029b      	lsls	r3, r3, #10
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d82:	801a      	strh	r2, [r3, #0]
 8008d84:	e03c      	b.n	8008e00 <USB_ActivateEndpoint+0x6ac>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	095b      	lsrs	r3, r3, #5
 8008d8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f003 031f 	and.w	r3, r3, #31
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d104      	bne.n	8008da6 <USB_ActivateEndpoint+0x652>
 8008d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008da0:	3b01      	subs	r3, #1
 8008da2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	029b      	lsls	r3, r3, #10
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	4313      	orrs	r3, r2
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dc6:	801a      	strh	r2, [r3, #0]
 8008dc8:	e01a      	b.n	8008e00 <USB_ActivateEndpoint+0x6ac>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	785b      	ldrb	r3, [r3, #1]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d116      	bne.n	8008e00 <USB_ActivateEndpoint+0x6ac>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008de2:	4413      	add	r3, r2
 8008de4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	00da      	lsls	r2, r3, #3
 8008dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dee:	4413      	add	r3, r2
 8008df0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008df4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dfe:	801a      	strh	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d16b      	bne.n	8008ee4 <USB_ActivateEndpoint+0x790>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e1c:	4413      	add	r3, r2
 8008e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	00da      	lsls	r2, r3, #3
 8008e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e28:	4413      	add	r3, r2
 8008e2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3e:	801a      	strh	r2, [r3, #0]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10a      	bne.n	8008e5e <USB_ActivateEndpoint+0x70a>
 8008e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	801a      	strh	r2, [r3, #0]
 8008e5c:	e05b      	b.n	8008f16 <USB_ActivateEndpoint+0x7c2>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e64:	d81c      	bhi.n	8008ea0 <USB_ActivateEndpoint+0x74c>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	085b      	lsrs	r3, r3, #1
 8008e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <USB_ActivateEndpoint+0x732>
 8008e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e80:	3301      	adds	r3, #1
 8008e82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	029b      	lsls	r3, r3, #10
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	4313      	orrs	r3, r2
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	e03a      	b.n	8008f16 <USB_ActivateEndpoint+0x7c2>
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	095b      	lsrs	r3, r3, #5
 8008ea6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	f003 031f 	and.w	r3, r3, #31
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d104      	bne.n	8008ec0 <USB_ActivateEndpoint+0x76c>
 8008eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	029b      	lsls	r3, r3, #10
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee0:	801a      	strh	r2, [r3, #0]
 8008ee2:	e018      	b.n	8008f16 <USB_ActivateEndpoint+0x7c2>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	785b      	ldrb	r3, [r3, #1]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d114      	bne.n	8008f16 <USB_ActivateEndpoint+0x7c2>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ef8:	4413      	add	r3, r2
 8008efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	00da      	lsls	r2, r3, #3
 8008f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f04:	4413      	add	r3, r2
 8008f06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f14:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008f2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008f30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f34:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008f36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008f38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	441a      	add	r2, r3
 8008f48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f74:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	441a      	add	r2, r3
 8008f80:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	8013      	strh	r3, [r2, #0]
 8008f96:	e0bc      	b.n	8009112 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8008fa8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d01d      	beq.n	8008ff0 <USB_ActivateEndpoint+0x89c>
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	441a      	add	r2, r3
 8008fd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008fdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fe4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009000:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01d      	beq.n	8009048 <USB_ActivateEndpoint+0x8f4>
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29b      	uxth	r3, r3
 800901a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800901e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009022:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	441a      	add	r2, r3
 8009030:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800903c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009040:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009044:	b29b      	uxth	r3, r3
 8009046:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	78db      	ldrb	r3, [r3, #3]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d024      	beq.n	800909a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	b29b      	uxth	r3, r3
 800905e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009066:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800906a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800906e:	f083 0320 	eor.w	r3, r3, #32
 8009072:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	441a      	add	r2, r3
 8009080:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800908c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009094:	b29b      	uxth	r3, r3
 8009096:	8013      	strh	r3, [r2, #0]
 8009098:	e01d      	b.n	80090d6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090b0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	441a      	add	r2, r3
 80090be:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80090c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ec:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	441a      	add	r2, r3
 80090fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80090fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800910a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800910e:	b29b      	uxth	r3, r3
 8009110:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009112:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8009116:	4618      	mov	r0, r3
 8009118:	379c      	adds	r7, #156	@ 0x9c
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop

08009124 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009124:	b480      	push	{r7}
 8009126:	b08d      	sub	sp, #52	@ 0x34
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	7b1b      	ldrb	r3, [r3, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	f040 808e 	bne.w	8009254 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	785b      	ldrb	r3, [r3, #1]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d044      	beq.n	80091ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	81bb      	strh	r3, [r7, #12]
 800914e:	89bb      	ldrh	r3, [r7, #12]
 8009150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01b      	beq.n	8009190 <USB_DeactivateEndpoint+0x6c>
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800916a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800916e:	817b      	strh	r3, [r7, #10]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	441a      	add	r2, r3
 800917a:	897b      	ldrh	r3, [r7, #10]
 800917c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009188:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800918c:	b29b      	uxth	r3, r3
 800918e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091a6:	813b      	strh	r3, [r7, #8]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	441a      	add	r2, r3
 80091b2:	893b      	ldrh	r3, [r7, #8]
 80091b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	8013      	strh	r3, [r2, #0]
 80091c8:	e192      	b.n	80094f0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	827b      	strh	r3, [r7, #18]
 80091d8:	8a7b      	ldrh	r3, [r7, #18]
 80091da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d01b      	beq.n	800921a <USB_DeactivateEndpoint+0xf6>
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091f8:	823b      	strh	r3, [r7, #16]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	441a      	add	r2, r3
 8009204:	8a3b      	ldrh	r3, [r7, #16]
 8009206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800920a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800920e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009216:	b29b      	uxth	r3, r3
 8009218:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800922c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009230:	81fb      	strh	r3, [r7, #14]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	441a      	add	r2, r3
 800923c:	89fb      	ldrh	r3, [r7, #14]
 800923e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009242:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800924a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800924e:	b29b      	uxth	r3, r3
 8009250:	8013      	strh	r3, [r2, #0]
 8009252:	e14d      	b.n	80094f0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	785b      	ldrb	r3, [r3, #1]
 8009258:	2b00      	cmp	r3, #0
 800925a:	f040 80a5 	bne.w	80093a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	843b      	strh	r3, [r7, #32]
 800926c:	8c3b      	ldrh	r3, [r7, #32]
 800926e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d01b      	beq.n	80092ae <USB_DeactivateEndpoint+0x18a>
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	b29b      	uxth	r3, r3
 8009284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800928c:	83fb      	strh	r3, [r7, #30]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	441a      	add	r2, r3
 8009298:	8bfb      	ldrh	r3, [r7, #30]
 800929a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800929e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	83bb      	strh	r3, [r7, #28]
 80092bc:	8bbb      	ldrh	r3, [r7, #28]
 80092be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d01b      	beq.n	80092fe <USB_DeactivateEndpoint+0x1da>
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092dc:	837b      	strh	r3, [r7, #26]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	441a      	add	r2, r3
 80092e8:	8b7b      	ldrh	r3, [r7, #26]
 80092ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	b29b      	uxth	r3, r3
 800930c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009314:	833b      	strh	r3, [r7, #24]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	441a      	add	r2, r3
 8009320:	8b3b      	ldrh	r3, [r7, #24]
 8009322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800932a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800932e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009332:	b29b      	uxth	r3, r3
 8009334:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800934c:	82fb      	strh	r3, [r7, #22]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	441a      	add	r2, r3
 8009358:	8afb      	ldrh	r3, [r7, #22]
 800935a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800935e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936a:	b29b      	uxth	r3, r3
 800936c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29b      	uxth	r3, r3
 800937c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009384:	82bb      	strh	r3, [r7, #20]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	441a      	add	r2, r3
 8009390:	8abb      	ldrh	r3, [r7, #20]
 8009392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800939a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800939e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	8013      	strh	r3, [r2, #0]
 80093a6:	e0a3      	b.n	80094f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80093b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80093b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d01b      	beq.n	80093f8 <USB_DeactivateEndpoint+0x2d4>
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	441a      	add	r2, r3
 80093e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80093e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009406:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800940c:	2b00      	cmp	r3, #0
 800940e:	d01b      	beq.n	8009448 <USB_DeactivateEndpoint+0x324>
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	b29b      	uxth	r3, r3
 800941e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009426:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	441a      	add	r2, r3
 8009432:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009434:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009438:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800943c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009440:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009444:	b29b      	uxth	r3, r3
 8009446:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800945a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800945e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	441a      	add	r2, r3
 800946a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800946c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009474:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800947c:	b29b      	uxth	r3, r3
 800947e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	b29b      	uxth	r3, r3
 800948e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009496:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	441a      	add	r2, r3
 80094a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	441a      	add	r2, r3
 80094da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80094dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3734      	adds	r7, #52	@ 0x34
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b0ac      	sub	sp, #176	@ 0xb0
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	785b      	ldrb	r3, [r3, #1]
 800950c:	2b01      	cmp	r3, #1
 800950e:	f040 84ca 	bne.w	8009ea6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	429a      	cmp	r2, r3
 800951c:	d904      	bls.n	8009528 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009526:	e003      	b.n	8009530 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	7b1b      	ldrb	r3, [r3, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d122      	bne.n	800957e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	6959      	ldr	r1, [r3, #20]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	88da      	ldrh	r2, [r3, #6]
 8009540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009544:	b29b      	uxth	r3, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 febd 	bl	800a2c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009556:	b29b      	uxth	r3, r3
 8009558:	461a      	mov	r2, r3
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	4413      	add	r3, r2
 800955e:	613b      	str	r3, [r7, #16]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	00da      	lsls	r2, r3, #3
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	4413      	add	r3, r2
 800956a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800956e:	60fb      	str	r3, [r7, #12]
 8009570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	801a      	strh	r2, [r3, #0]
 800957a:	f000 bc6f 	b.w	8009e5c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	78db      	ldrb	r3, [r3, #3]
 8009582:	2b02      	cmp	r3, #2
 8009584:	f040 831e 	bne.w	8009bc4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	6a1a      	ldr	r2, [r3, #32]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	429a      	cmp	r2, r3
 8009592:	f240 82cf 	bls.w	8009b34 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	441a      	add	r2, r3
 80095ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80095be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80095ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	6a1a      	ldr	r2, [r3, #32]
 80095d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095da:	1ad2      	subs	r2, r2, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 814f 	beq.w	8009896 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	785b      	ldrb	r3, [r3, #1]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d16b      	bne.n	80096dc <USB_EPStartXfer+0x1de>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800960e:	b29b      	uxth	r3, r3
 8009610:	461a      	mov	r2, r3
 8009612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009614:	4413      	add	r3, r2
 8009616:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	00da      	lsls	r2, r3, #3
 800961e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009620:	4413      	add	r3, r2
 8009622:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009626:	627b      	str	r3, [r7, #36]	@ 0x24
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	b29b      	uxth	r3, r3
 800962e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009632:	b29a      	uxth	r2, r3
 8009634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009636:	801a      	strh	r2, [r3, #0]
 8009638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <USB_EPStartXfer+0x158>
 8009640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	b29b      	uxth	r3, r3
 8009646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800964a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800964e:	b29a      	uxth	r2, r3
 8009650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009652:	801a      	strh	r2, [r3, #0]
 8009654:	e05b      	b.n	800970e <USB_EPStartXfer+0x210>
 8009656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800965a:	2b3e      	cmp	r3, #62	@ 0x3e
 800965c:	d81c      	bhi.n	8009698 <USB_EPStartXfer+0x19a>
 800965e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009662:	085b      	lsrs	r3, r3, #1
 8009664:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	d004      	beq.n	800967e <USB_EPStartXfer+0x180>
 8009674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009678:	3301      	adds	r3, #1
 800967a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	b29a      	uxth	r2, r3
 8009684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009688:	b29b      	uxth	r3, r3
 800968a:	029b      	lsls	r3, r3, #10
 800968c:	b29b      	uxth	r3, r3
 800968e:	4313      	orrs	r3, r2
 8009690:	b29a      	uxth	r2, r3
 8009692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009694:	801a      	strh	r2, [r3, #0]
 8009696:	e03a      	b.n	800970e <USB_EPStartXfer+0x210>
 8009698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800969c:	095b      	lsrs	r3, r3, #5
 800969e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096a6:	f003 031f 	and.w	r3, r3, #31
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <USB_EPStartXfer+0x1ba>
 80096ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096b2:	3b01      	subs	r3, #1
 80096b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b29a      	uxth	r2, r3
 80096be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	029b      	lsls	r3, r3, #10
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	4313      	orrs	r3, r2
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d8:	801a      	strh	r2, [r3, #0]
 80096da:	e018      	b.n	800970e <USB_EPStartXfer+0x210>
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	785b      	ldrb	r3, [r3, #1]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d114      	bne.n	800970e <USB_EPStartXfer+0x210>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	461a      	mov	r2, r3
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	4413      	add	r3, r2
 80096f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	00da      	lsls	r2, r3, #3
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	4413      	add	r3, r2
 80096fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009708:	b29a      	uxth	r2, r3
 800970a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	895b      	ldrh	r3, [r3, #10]
 8009712:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	6959      	ldr	r1, [r3, #20]
 800971a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800971e:	b29b      	uxth	r3, r3
 8009720:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fdce 	bl	800a2c6 <USB_WritePMA>
            ep->xfer_buff += len;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	695a      	ldr	r2, [r3, #20]
 800972e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009732:	441a      	add	r2, r3
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	6a1a      	ldr	r2, [r3, #32]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	429a      	cmp	r2, r3
 8009742:	d907      	bls.n	8009754 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	6a1a      	ldr	r2, [r3, #32]
 8009748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800974c:	1ad2      	subs	r2, r2, r3
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	621a      	str	r2, [r3, #32]
 8009752:	e006      	b.n	8009762 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2200      	movs	r2, #0
 8009760:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	785b      	ldrb	r3, [r3, #1]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d16b      	bne.n	8009842 <USB_EPStartXfer+0x344>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	61bb      	str	r3, [r7, #24]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009774:	b29b      	uxth	r3, r3
 8009776:	461a      	mov	r2, r3
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	4413      	add	r3, r2
 800977c:	61bb      	str	r3, [r7, #24]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	00da      	lsls	r2, r3, #3
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	4413      	add	r3, r2
 8009788:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009798:	b29a      	uxth	r2, r3
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	801a      	strh	r2, [r3, #0]
 800979e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10a      	bne.n	80097bc <USB_EPStartXfer+0x2be>
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	801a      	strh	r2, [r3, #0]
 80097ba:	e05d      	b.n	8009878 <USB_EPStartXfer+0x37a>
 80097bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80097c2:	d81c      	bhi.n	80097fe <USB_EPStartXfer+0x300>
 80097c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097c8:	085b      	lsrs	r3, r3, #1
 80097ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80097ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d004      	beq.n	80097e4 <USB_EPStartXfer+0x2e6>
 80097da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80097de:	3301      	adds	r3, #1
 80097e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	881b      	ldrh	r3, [r3, #0]
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	029b      	lsls	r3, r3, #10
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	4313      	orrs	r3, r2
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	801a      	strh	r2, [r3, #0]
 80097fc:	e03c      	b.n	8009878 <USB_EPStartXfer+0x37a>
 80097fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009802:	095b      	lsrs	r3, r3, #5
 8009804:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800980c:	f003 031f 	and.w	r3, r3, #31
 8009810:	2b00      	cmp	r3, #0
 8009812:	d104      	bne.n	800981e <USB_EPStartXfer+0x320>
 8009814:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009818:	3b01      	subs	r3, #1
 800981a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29a      	uxth	r2, r3
 8009824:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009828:	b29b      	uxth	r3, r3
 800982a:	029b      	lsls	r3, r3, #10
 800982c:	b29b      	uxth	r3, r3
 800982e:	4313      	orrs	r3, r2
 8009830:	b29b      	uxth	r3, r3
 8009832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800983a:	b29a      	uxth	r2, r3
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	801a      	strh	r2, [r3, #0]
 8009840:	e01a      	b.n	8009878 <USB_EPStartXfer+0x37a>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	785b      	ldrb	r3, [r3, #1]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d116      	bne.n	8009878 <USB_EPStartXfer+0x37a>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	623b      	str	r3, [r7, #32]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009854:	b29b      	uxth	r3, r3
 8009856:	461a      	mov	r2, r3
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	4413      	add	r3, r2
 800985c:	623b      	str	r3, [r7, #32]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	00da      	lsls	r2, r3, #3
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	4413      	add	r3, r2
 8009868:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800986c:	61fb      	str	r3, [r7, #28]
 800986e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009872:	b29a      	uxth	r2, r3
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	891b      	ldrh	r3, [r3, #8]
 800987c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	6959      	ldr	r1, [r3, #20]
 8009884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009888:	b29b      	uxth	r3, r3
 800988a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fd19 	bl	800a2c6 <USB_WritePMA>
 8009894:	e2e2      	b.n	8009e5c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	785b      	ldrb	r3, [r3, #1]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d16b      	bne.n	8009976 <USB_EPStartXfer+0x478>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098ae:	4413      	add	r3, r2
 80098b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	00da      	lsls	r2, r3, #3
 80098b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098ba:	4413      	add	r3, r2
 80098bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098d0:	801a      	strh	r2, [r3, #0]
 80098d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10a      	bne.n	80098f0 <USB_EPStartXfer+0x3f2>
 80098da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ec:	801a      	strh	r2, [r3, #0]
 80098ee:	e05d      	b.n	80099ac <USB_EPStartXfer+0x4ae>
 80098f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80098f6:	d81c      	bhi.n	8009932 <USB_EPStartXfer+0x434>
 80098f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098fc:	085b      	lsrs	r3, r3, #1
 80098fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <USB_EPStartXfer+0x41a>
 800990e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009912:	3301      	adds	r3, #1
 8009914:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	b29a      	uxth	r2, r3
 800991e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009922:	b29b      	uxth	r3, r3
 8009924:	029b      	lsls	r3, r3, #10
 8009926:	b29b      	uxth	r3, r3
 8009928:	4313      	orrs	r3, r2
 800992a:	b29a      	uxth	r2, r3
 800992c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800992e:	801a      	strh	r2, [r3, #0]
 8009930:	e03c      	b.n	80099ac <USB_EPStartXfer+0x4ae>
 8009932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800993c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009940:	f003 031f 	and.w	r3, r3, #31
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <USB_EPStartXfer+0x454>
 8009948:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800994c:	3b01      	subs	r3, #1
 800994e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	b29a      	uxth	r2, r3
 8009958:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800995c:	b29b      	uxth	r3, r3
 800995e:	029b      	lsls	r3, r3, #10
 8009960:	b29b      	uxth	r3, r3
 8009962:	4313      	orrs	r3, r2
 8009964:	b29b      	uxth	r3, r3
 8009966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800996a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800996e:	b29a      	uxth	r2, r3
 8009970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009972:	801a      	strh	r2, [r3, #0]
 8009974:	e01a      	b.n	80099ac <USB_EPStartXfer+0x4ae>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d116      	bne.n	80099ac <USB_EPStartXfer+0x4ae>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	653b      	str	r3, [r7, #80]	@ 0x50
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009988:	b29b      	uxth	r3, r3
 800998a:	461a      	mov	r2, r3
 800998c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800998e:	4413      	add	r3, r2
 8009990:	653b      	str	r3, [r7, #80]	@ 0x50
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	00da      	lsls	r2, r3, #3
 8009998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800999a:	4413      	add	r3, r2
 800999c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80099a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	891b      	ldrh	r3, [r3, #8]
 80099b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	6959      	ldr	r1, [r3, #20]
 80099b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099bc:	b29b      	uxth	r3, r3
 80099be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fc7f 	bl	800a2c6 <USB_WritePMA>
            ep->xfer_buff += len;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	695a      	ldr	r2, [r3, #20]
 80099cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099d0:	441a      	add	r2, r3
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	6a1a      	ldr	r2, [r3, #32]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d907      	bls.n	80099f2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	6a1a      	ldr	r2, [r3, #32]
 80099e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ea:	1ad2      	subs	r2, r2, r3
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	621a      	str	r2, [r3, #32]
 80099f0:	e006      	b.n	8009a00 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2200      	movs	r2, #0
 80099fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	785b      	ldrb	r3, [r3, #1]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d16b      	bne.n	8009ae4 <USB_EPStartXfer+0x5e6>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	461a      	mov	r2, r3
 8009a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1c:	4413      	add	r3, r2
 8009a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	00da      	lsls	r2, r3, #3
 8009a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a28:	4413      	add	r3, r2
 8009a2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3e:	801a      	strh	r2, [r3, #0]
 8009a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <USB_EPStartXfer+0x560>
 8009a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a5a:	801a      	strh	r2, [r3, #0]
 8009a5c:	e05b      	b.n	8009b16 <USB_EPStartXfer+0x618>
 8009a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a62:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a64:	d81c      	bhi.n	8009aa0 <USB_EPStartXfer+0x5a2>
 8009a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a6a:	085b      	lsrs	r3, r3, #1
 8009a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d004      	beq.n	8009a86 <USB_EPStartXfer+0x588>
 8009a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a80:	3301      	adds	r3, #1
 8009a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	029b      	lsls	r3, r3, #10
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	4313      	orrs	r3, r2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a9c:	801a      	strh	r2, [r3, #0]
 8009a9e:	e03a      	b.n	8009b16 <USB_EPStartXfer+0x618>
 8009aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aa4:	095b      	lsrs	r3, r3, #5
 8009aa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aae:	f003 031f 	and.w	r3, r3, #31
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <USB_EPStartXfer+0x5c2>
 8009ab6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009aba:	3b01      	subs	r3, #1
 8009abc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	029b      	lsls	r3, r3, #10
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae0:	801a      	strh	r2, [r3, #0]
 8009ae2:	e018      	b.n	8009b16 <USB_EPStartXfer+0x618>
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d114      	bne.n	8009b16 <USB_EPStartXfer+0x618>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	461a      	mov	r2, r3
 8009af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009af8:	4413      	add	r3, r2
 8009afa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	00da      	lsls	r2, r3, #3
 8009b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b04:	4413      	add	r3, r2
 8009b06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	895b      	ldrh	r3, [r3, #10]
 8009b1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	6959      	ldr	r1, [r3, #20]
 8009b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fbca 	bl	800a2c6 <USB_WritePMA>
 8009b32:	e193      	b.n	8009e5c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b52:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	441a      	add	r2, r3
 8009b60:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	461a      	mov	r2, r3
 8009b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b88:	4413      	add	r3, r2
 8009b8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	00da      	lsls	r2, r3, #3
 8009b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b94:	4413      	add	r3, r2
 8009b96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ba4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	891b      	ldrh	r3, [r3, #8]
 8009baa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	6959      	ldr	r1, [r3, #20]
 8009bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fb82 	bl	800a2c6 <USB_WritePMA>
 8009bc2:	e14b      	b.n	8009e5c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	6a1a      	ldr	r2, [r3, #32]
 8009bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bcc:	1ad2      	subs	r2, r2, r3
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 809a 	beq.w	8009d1e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	673b      	str	r3, [r7, #112]	@ 0x70
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	785b      	ldrb	r3, [r3, #1]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d16b      	bne.n	8009cce <USB_EPStartXfer+0x7d0>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	461a      	mov	r2, r3
 8009c04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c06:	4413      	add	r3, r2
 8009c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	00da      	lsls	r2, r3, #3
 8009c10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c12:	4413      	add	r3, r2
 8009c14:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c18:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c28:	801a      	strh	r2, [r3, #0]
 8009c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10a      	bne.n	8009c48 <USB_EPStartXfer+0x74a>
 8009c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c44:	801a      	strh	r2, [r3, #0]
 8009c46:	e05b      	b.n	8009d00 <USB_EPStartXfer+0x802>
 8009c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c4e:	d81c      	bhi.n	8009c8a <USB_EPStartXfer+0x78c>
 8009c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c54:	085b      	lsrs	r3, r3, #1
 8009c56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <USB_EPStartXfer+0x772>
 8009c66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	029b      	lsls	r3, r3, #10
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	4313      	orrs	r3, r2
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c86:	801a      	strh	r2, [r3, #0]
 8009c88:	e03a      	b.n	8009d00 <USB_EPStartXfer+0x802>
 8009c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c8e:	095b      	lsrs	r3, r3, #5
 8009c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c98:	f003 031f 	and.w	r3, r3, #31
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d104      	bne.n	8009caa <USB_EPStartXfer+0x7ac>
 8009ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009caa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	029b      	lsls	r3, r3, #10
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cca:	801a      	strh	r2, [r3, #0]
 8009ccc:	e018      	b.n	8009d00 <USB_EPStartXfer+0x802>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d114      	bne.n	8009d00 <USB_EPStartXfer+0x802>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	461a      	mov	r2, r3
 8009ce0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ce2:	4413      	add	r3, r2
 8009ce4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	00da      	lsls	r2, r3, #3
 8009cec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cee:	4413      	add	r3, r2
 8009cf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cfe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	895b      	ldrh	r3, [r3, #10]
 8009d04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	6959      	ldr	r1, [r3, #20]
 8009d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fad5 	bl	800a2c6 <USB_WritePMA>
 8009d1c:	e09e      	b.n	8009e5c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	785b      	ldrb	r3, [r3, #1]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d16b      	bne.n	8009dfe <USB_EPStartXfer+0x900>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	461a      	mov	r2, r3
 8009d34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d36:	4413      	add	r3, r2
 8009d38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	00da      	lsls	r2, r3, #3
 8009d40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d42:	4413      	add	r3, r2
 8009d44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d58:	801a      	strh	r2, [r3, #0]
 8009d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <USB_EPStartXfer+0x87a>
 8009d62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d74:	801a      	strh	r2, [r3, #0]
 8009d76:	e063      	b.n	8009e40 <USB_EPStartXfer+0x942>
 8009d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d7e:	d81c      	bhi.n	8009dba <USB_EPStartXfer+0x8bc>
 8009d80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d84:	085b      	lsrs	r3, r3, #1
 8009d86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <USB_EPStartXfer+0x8a2>
 8009d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	029b      	lsls	r3, r3, #10
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	4313      	orrs	r3, r2
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009db6:	801a      	strh	r2, [r3, #0]
 8009db8:	e042      	b.n	8009e40 <USB_EPStartXfer+0x942>
 8009dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dbe:	095b      	lsrs	r3, r3, #5
 8009dc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dc8:	f003 031f 	and.w	r3, r3, #31
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d104      	bne.n	8009dda <USB_EPStartXfer+0x8dc>
 8009dd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	029b      	lsls	r3, r3, #10
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	4313      	orrs	r3, r2
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dfa:	801a      	strh	r2, [r3, #0]
 8009dfc:	e020      	b.n	8009e40 <USB_EPStartXfer+0x942>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d11c      	bne.n	8009e40 <USB_EPStartXfer+0x942>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	461a      	mov	r2, r3
 8009e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	00da      	lsls	r2, r3, #3
 8009e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009e3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	891b      	ldrh	r3, [r3, #8]
 8009e44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	6959      	ldr	r1, [r3, #20]
 8009e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa35 	bl	800a2c6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e72:	817b      	strh	r3, [r7, #10]
 8009e74:	897b      	ldrh	r3, [r7, #10]
 8009e76:	f083 0310 	eor.w	r3, r3, #16
 8009e7a:	817b      	strh	r3, [r7, #10]
 8009e7c:	897b      	ldrh	r3, [r7, #10]
 8009e7e:	f083 0320 	eor.w	r3, r3, #32
 8009e82:	817b      	strh	r3, [r7, #10]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	441a      	add	r2, r3
 8009e8e:	897b      	ldrh	r3, [r7, #10]
 8009e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	8013      	strh	r3, [r2, #0]
 8009ea4:	e0d5      	b.n	800a052 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	7b1b      	ldrb	r3, [r3, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d156      	bne.n	8009f5c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d122      	bne.n	8009efc <USB_EPStartXfer+0x9fe>
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	78db      	ldrb	r3, [r3, #3]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d11e      	bne.n	8009efc <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ed4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	441a      	add	r2, r3
 8009ee2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009eee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	8013      	strh	r3, [r2, #0]
 8009efa:	e01d      	b.n	8009f38 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f12:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	441a      	add	r2, r3
 8009f20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	699a      	ldr	r2, [r3, #24]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d907      	bls.n	8009f54 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	699a      	ldr	r2, [r3, #24]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	1ad2      	subs	r2, r2, r3
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	619a      	str	r2, [r3, #24]
 8009f52:	e054      	b.n	8009ffe <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2200      	movs	r2, #0
 8009f58:	619a      	str	r2, [r3, #24]
 8009f5a:	e050      	b.n	8009ffe <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	78db      	ldrb	r3, [r3, #3]
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d142      	bne.n	8009fea <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d048      	beq.n	8009ffe <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009f7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d005      	beq.n	8009f94 <USB_EPStartXfer+0xa96>
 8009f88:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10b      	bne.n	8009fac <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009f94:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d12e      	bne.n	8009ffe <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fa0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d128      	bne.n	8009ffe <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fc2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	441a      	add	r2, r3
 8009fd0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fe0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	8013      	strh	r3, [r2, #0]
 8009fe8:	e009      	b.n	8009ffe <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	78db      	ldrb	r3, [r3, #3]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d103      	bne.n	8009ffa <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	619a      	str	r2, [r3, #24]
 8009ff8:	e001      	b.n	8009ffe <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e02a      	b.n	800a054 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a014:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a018:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a01c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a020:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a024:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a028:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a02c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	441a      	add	r2, r3
 800a03a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a03e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a042:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a04e:	b29b      	uxth	r3, r3
 800a050:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	37b0      	adds	r7, #176	@ 0xb0
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	785b      	ldrb	r3, [r3, #1]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d020      	beq.n	800a0b0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	881b      	ldrh	r3, [r3, #0]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a084:	81bb      	strh	r3, [r7, #12]
 800a086:	89bb      	ldrh	r3, [r7, #12]
 800a088:	f083 0310 	eor.w	r3, r3, #16
 800a08c:	81bb      	strh	r3, [r7, #12]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	441a      	add	r2, r3
 800a098:	89bb      	ldrh	r3, [r7, #12]
 800a09a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a09e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	8013      	strh	r3, [r2, #0]
 800a0ae:	e01f      	b.n	800a0f0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	4413      	add	r3, r2
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0c6:	81fb      	strh	r3, [r7, #14]
 800a0c8:	89fb      	ldrh	r3, [r7, #14]
 800a0ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a0ce:	81fb      	strh	r3, [r7, #14]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	441a      	add	r2, r3
 800a0da:	89fb      	ldrh	r3, [r7, #14]
 800a0dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b087      	sub	sp, #28
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	785b      	ldrb	r3, [r3, #1]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d04c      	beq.n	800a1aa <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	823b      	strh	r3, [r7, #16]
 800a11e:	8a3b      	ldrh	r3, [r7, #16]
 800a120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a124:	2b00      	cmp	r3, #0
 800a126:	d01b      	beq.n	800a160 <USB_EPClearStall+0x62>
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a13a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a13e:	81fb      	strh	r3, [r7, #14]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	441a      	add	r2, r3
 800a14a:	89fb      	ldrh	r3, [r7, #14]
 800a14c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a150:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a158:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	78db      	ldrb	r3, [r3, #3]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d06c      	beq.n	800a242 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	b29b      	uxth	r3, r3
 800a176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a17a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a17e:	81bb      	strh	r3, [r7, #12]
 800a180:	89bb      	ldrh	r3, [r7, #12]
 800a182:	f083 0320 	eor.w	r3, r3, #32
 800a186:	81bb      	strh	r3, [r7, #12]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	441a      	add	r2, r3
 800a192:	89bb      	ldrh	r3, [r7, #12]
 800a194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a19c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	8013      	strh	r3, [r2, #0]
 800a1a8:	e04b      	b.n	800a242 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	82fb      	strh	r3, [r7, #22]
 800a1b8:	8afb      	ldrh	r3, [r7, #22]
 800a1ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01b      	beq.n	800a1fa <USB_EPClearStall+0xfc>
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1d8:	82bb      	strh	r3, [r7, #20]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	441a      	add	r2, r3
 800a1e4:	8abb      	ldrh	r3, [r7, #20]
 800a1e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	b29b      	uxth	r3, r3
 800a208:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a20c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a210:	827b      	strh	r3, [r7, #18]
 800a212:	8a7b      	ldrh	r3, [r7, #18]
 800a214:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a218:	827b      	strh	r3, [r7, #18]
 800a21a:	8a7b      	ldrh	r3, [r7, #18]
 800a21c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a220:	827b      	strh	r3, [r7, #18]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	441a      	add	r2, r3
 800a22c:	8a7b      	ldrh	r3, [r7, #18]
 800a22e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a23e:	b29b      	uxth	r3, r3
 800a240:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	371c      	adds	r7, #28
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a25c:	78fb      	ldrb	r3, [r7, #3]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d103      	bne.n	800a26a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2280      	movs	r2, #128	@ 0x80
 800a266:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a286:	b29b      	uxth	r3, r3
 800a288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a28c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a290:	b29a      	uxth	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b08b      	sub	sp, #44	@ 0x2c
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	80fb      	strh	r3, [r7, #6]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a2dc:	88bb      	ldrh	r3, [r7, #4]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	085b      	lsrs	r3, r3, #1
 800a2e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a2ec:	88fa      	ldrh	r2, [r7, #6]
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2f6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2fc:	e01b      	b.n	800a336 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	3301      	adds	r3, #1
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	b21a      	sxth	r2, r3
 800a30e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a312:	4313      	orrs	r3, r2
 800a314:	b21b      	sxth	r3, r3
 800a316:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	8a7a      	ldrh	r2, [r7, #18]
 800a31c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	3302      	adds	r3, #2
 800a322:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	3301      	adds	r3, #1
 800a328:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	3301      	adds	r3, #1
 800a32e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a332:	3b01      	subs	r3, #1
 800a334:	627b      	str	r3, [r7, #36]	@ 0x24
 800a336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e0      	bne.n	800a2fe <USB_WritePMA+0x38>
  }
}
 800a33c:	bf00      	nop
 800a33e:	bf00      	nop
 800a340:	372c      	adds	r7, #44	@ 0x2c
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b08b      	sub	sp, #44	@ 0x2c
 800a34e:	af00      	add	r7, sp, #0
 800a350:	60f8      	str	r0, [r7, #12]
 800a352:	60b9      	str	r1, [r7, #8]
 800a354:	4611      	mov	r1, r2
 800a356:	461a      	mov	r2, r3
 800a358:	460b      	mov	r3, r1
 800a35a:	80fb      	strh	r3, [r7, #6]
 800a35c:	4613      	mov	r3, r2
 800a35e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a360:	88bb      	ldrh	r3, [r7, #4]
 800a362:	085b      	lsrs	r3, r3, #1
 800a364:	b29b      	uxth	r3, r3
 800a366:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a370:	88fa      	ldrh	r2, [r7, #6]
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a37a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a380:	e018      	b.n	800a3b4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29b      	uxth	r3, r3
 800a388:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	3302      	adds	r3, #2
 800a38e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	b2da      	uxtb	r2, r3
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	3301      	adds	r3, #1
 800a39c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	0a1b      	lsrs	r3, r3, #8
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e3      	bne.n	800a382 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a3ba:	88bb      	ldrh	r3, [r7, #4]
 800a3bc:	f003 0301 	and.w	r3, r3, #1
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d007      	beq.n	800a3d6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	701a      	strb	r2, [r3, #0]
  }
}
 800a3d6:	bf00      	nop
 800a3d8:	372c      	adds	r7, #44	@ 0x2c
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a3ee:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a3f2:	f002 f911 	bl	800c618 <USBD_static_malloc>
 800a3f6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d105      	bne.n	800a40a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a406:	2302      	movs	r3, #2
 800a408:	e066      	b.n	800a4d8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	7c1b      	ldrb	r3, [r3, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d119      	bne.n	800a44e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a41a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a41e:	2202      	movs	r2, #2
 800a420:	2181      	movs	r1, #129	@ 0x81
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 ff9f 	bl	800c366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a42e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a432:	2202      	movs	r2, #2
 800a434:	2101      	movs	r1, #1
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 ff95 	bl	800c366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2210      	movs	r2, #16
 800a448:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a44c:	e016      	b.n	800a47c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a44e:	2340      	movs	r3, #64	@ 0x40
 800a450:	2202      	movs	r2, #2
 800a452:	2181      	movs	r1, #129	@ 0x81
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 ff86 	bl	800c366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a460:	2340      	movs	r3, #64	@ 0x40
 800a462:	2202      	movs	r2, #2
 800a464:	2101      	movs	r1, #1
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 ff7d 	bl	800c366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2210      	movs	r2, #16
 800a478:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a47c:	2308      	movs	r3, #8
 800a47e:	2203      	movs	r2, #3
 800a480:	2182      	movs	r1, #130	@ 0x82
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 ff6f 	bl	800c366 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	7c1b      	ldrb	r3, [r3, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4bc:	2101      	movs	r1, #1
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f002 f840 	bl	800c544 <USBD_LL_PrepareReceive>
 800a4c4:	e007      	b.n	800a4d6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4cc:	2340      	movs	r3, #64	@ 0x40
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f002 f837 	bl	800c544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a4ec:	2181      	movs	r1, #129	@ 0x81
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 ff5f 	bl	800c3b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f001 ff58 	bl	800c3b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a50a:	2182      	movs	r1, #130	@ 0x82
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 ff50 	bl	800c3b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00e      	beq.n	800a54a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a53c:	4618      	mov	r0, r3
 800a53e:	f002 f879 	bl	800c634 <USBD_static_free>
    pdev->pClassData = NULL;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a564:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a566:	2300      	movs	r3, #0
 800a568:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	e0af      	b.n	800a6dc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a584:	2b00      	cmp	r3, #0
 800a586:	d03f      	beq.n	800a608 <USBD_CDC_Setup+0xb4>
 800a588:	2b20      	cmp	r3, #32
 800a58a:	f040 809f 	bne.w	800a6cc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	88db      	ldrh	r3, [r3, #6]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d02e      	beq.n	800a5f4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	b25b      	sxtb	r3, r3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	da16      	bge.n	800a5ce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a5ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	88d2      	ldrh	r2, [r2, #6]
 800a5b2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	88db      	ldrh	r3, [r3, #6]
 800a5b8:	2b07      	cmp	r3, #7
 800a5ba:	bf28      	it	cs
 800a5bc:	2307      	movcs	r3, #7
 800a5be:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	89fa      	ldrh	r2, [r7, #14]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f001 facd 	bl	800bb66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a5cc:	e085      	b.n	800a6da <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	785a      	ldrb	r2, [r3, #1]
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	88db      	ldrh	r3, [r3, #6]
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a5e4:	6939      	ldr	r1, [r7, #16]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	88db      	ldrh	r3, [r3, #6]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f001 fae6 	bl	800bbbe <USBD_CtlPrepareRx>
      break;
 800a5f2:	e072      	b.n	800a6da <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	7850      	ldrb	r0, [r2, #1]
 800a600:	2200      	movs	r2, #0
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	4798      	blx	r3
      break;
 800a606:	e068      	b.n	800a6da <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	785b      	ldrb	r3, [r3, #1]
 800a60c:	2b0b      	cmp	r3, #11
 800a60e:	d852      	bhi.n	800a6b6 <USBD_CDC_Setup+0x162>
 800a610:	a201      	add	r2, pc, #4	@ (adr r2, 800a618 <USBD_CDC_Setup+0xc4>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a649 	.word	0x0800a649
 800a61c:	0800a6c5 	.word	0x0800a6c5
 800a620:	0800a6b7 	.word	0x0800a6b7
 800a624:	0800a6b7 	.word	0x0800a6b7
 800a628:	0800a6b7 	.word	0x0800a6b7
 800a62c:	0800a6b7 	.word	0x0800a6b7
 800a630:	0800a6b7 	.word	0x0800a6b7
 800a634:	0800a6b7 	.word	0x0800a6b7
 800a638:	0800a6b7 	.word	0x0800a6b7
 800a63c:	0800a6b7 	.word	0x0800a6b7
 800a640:	0800a673 	.word	0x0800a673
 800a644:	0800a69d 	.word	0x0800a69d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b03      	cmp	r3, #3
 800a652:	d107      	bne.n	800a664 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a654:	f107 030a 	add.w	r3, r7, #10
 800a658:	2202      	movs	r2, #2
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f001 fa82 	bl	800bb66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a662:	e032      	b.n	800a6ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f001 fa0c 	bl	800ba84 <USBD_CtlError>
            ret = USBD_FAIL;
 800a66c:	2303      	movs	r3, #3
 800a66e:	75fb      	strb	r3, [r7, #23]
          break;
 800a670:	e02b      	b.n	800a6ca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d107      	bne.n	800a68e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a67e:	f107 030d 	add.w	r3, r7, #13
 800a682:	2201      	movs	r2, #1
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f001 fa6d 	bl	800bb66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a68c:	e01d      	b.n	800a6ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f001 f9f7 	bl	800ba84 <USBD_CtlError>
            ret = USBD_FAIL;
 800a696:	2303      	movs	r3, #3
 800a698:	75fb      	strb	r3, [r7, #23]
          break;
 800a69a:	e016      	b.n	800a6ca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d00f      	beq.n	800a6c8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f001 f9ea 	bl	800ba84 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a6b4:	e008      	b.n	800a6c8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 f9e3 	bl	800ba84 <USBD_CtlError>
          ret = USBD_FAIL;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a6c2:	e002      	b.n	800a6ca <USBD_CDC_Setup+0x176>
          break;
 800a6c4:	bf00      	nop
 800a6c6:	e008      	b.n	800a6da <USBD_CDC_Setup+0x186>
          break;
 800a6c8:	bf00      	nop
      }
      break;
 800a6ca:	e006      	b.n	800a6da <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f001 f9d8 	bl	800ba84 <USBD_CtlError>
      ret = USBD_FAIL;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6d8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a6f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a702:	2303      	movs	r3, #3
 800a704:	e04f      	b.n	800a7a6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a70c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a70e:	78fa      	ldrb	r2, [r7, #3]
 800a710:	6879      	ldr	r1, [r7, #4]
 800a712:	4613      	mov	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	440b      	add	r3, r1
 800a71c:	3318      	adds	r3, #24
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d029      	beq.n	800a778 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a724:	78fa      	ldrb	r2, [r7, #3]
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	440b      	add	r3, r1
 800a732:	3318      	adds	r3, #24
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	78f9      	ldrb	r1, [r7, #3]
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	460b      	mov	r3, r1
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
 800a740:	00db      	lsls	r3, r3, #3
 800a742:	4403      	add	r3, r0
 800a744:	3320      	adds	r3, #32
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	fbb2 f1f3 	udiv	r1, r2, r3
 800a74c:	fb01 f303 	mul.w	r3, r1, r3
 800a750:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a752:	2b00      	cmp	r3, #0
 800a754:	d110      	bne.n	800a778 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a756:	78fa      	ldrb	r2, [r7, #3]
 800a758:	6879      	ldr	r1, [r7, #4]
 800a75a:	4613      	mov	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4413      	add	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	440b      	add	r3, r1
 800a764:	3318      	adds	r3, #24
 800a766:	2200      	movs	r2, #0
 800a768:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a76a:	78f9      	ldrb	r1, [r7, #3]
 800a76c:	2300      	movs	r3, #0
 800a76e:	2200      	movs	r2, #0
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f001 fec6 	bl	800c502 <USBD_LL_Transmit>
 800a776:	e015      	b.n	800a7a4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00b      	beq.n	800a7a4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a7a0:	78fa      	ldrb	r2, [r7, #3]
 800a7a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e015      	b.n	800a7fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a7d0:	78fb      	ldrb	r3, [r7, #3]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f001 fed6 	bl	800c586 <USBD_LL_GetRxDataSize>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a812:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e01a      	b.n	800a854 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d014      	beq.n	800a852 <USBD_CDC_EP0_RxReady+0x4e>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a82e:	2bff      	cmp	r3, #255	@ 0xff
 800a830:	d00f      	beq.n	800a852 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a840:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a848:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	22ff      	movs	r2, #255	@ 0xff
 800a84e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2243      	movs	r2, #67	@ 0x43
 800a868:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a86a:	4b03      	ldr	r3, [pc, #12]	@ (800a878 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	2000023c 	.word	0x2000023c

0800a87c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2243      	movs	r2, #67	@ 0x43
 800a888:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a88a:	4b03      	ldr	r3, [pc, #12]	@ (800a898 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	200001f8 	.word	0x200001f8

0800a89c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2243      	movs	r2, #67	@ 0x43
 800a8a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a8aa:	4b03      	ldr	r3, [pc, #12]	@ (800a8b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	20000280 	.word	0x20000280

0800a8bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	220a      	movs	r2, #10
 800a8c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a8ca:	4b03      	ldr	r3, [pc, #12]	@ (800a8d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	200001b4 	.word	0x200001b4

0800a8dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e004      	b.n	800a8fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a906:	b480      	push	{r7}
 800a908:	b087      	sub	sp, #28
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a918:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a920:	2303      	movs	r3, #3
 800a922:	e008      	b.n	800a936 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	371c      	adds	r7, #28
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a942:	b480      	push	{r7}
 800a944:	b085      	sub	sp, #20
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a952:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e004      	b.n	800a968 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a982:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a984:	2301      	movs	r3, #1
 800a986:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a992:	2303      	movs	r3, #3
 800a994:	e01a      	b.n	800a9cc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d114      	bne.n	800a9ca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a9be:	2181      	movs	r1, #129	@ 0x81
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 fd9e 	bl	800c502 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e016      	b.n	800aa20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	7c1b      	ldrb	r3, [r3, #16]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d109      	bne.n	800aa0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa04:	2101      	movs	r1, #1
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 fd9c 	bl	800c544 <USBD_LL_PrepareReceive>
 800aa0c:	e007      	b.n	800aa1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa14:	2340      	movs	r3, #64	@ 0x40
 800aa16:	2101      	movs	r1, #1
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 fd93 	bl	800c544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	4613      	mov	r3, r2
 800aa34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e01f      	b.n	800aa80 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	79fa      	ldrb	r2, [r7, #7]
 800aa72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f001 fbfb 	bl	800c270 <USBD_LL_Init>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa92:	2300      	movs	r3, #0
 800aa94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	e016      	b.n	800aace <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00b      	beq.n	800aacc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aabc:	f107 020e 	add.w	r2, r7, #14
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	4602      	mov	r2, r0
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 fc26 	bl	800c330 <USBD_LL_Start>
 800aae4:	4603      	mov	r3, r0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b083      	sub	sp, #12
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab10:	2303      	movs	r3, #3
 800ab12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d009      	beq.n	800ab32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	78fa      	ldrb	r2, [r7, #3]
 800ab28:	4611      	mov	r1, r2
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	4798      	blx	r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d007      	beq.n	800ab62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	78fa      	ldrb	r2, [r7, #3]
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	4798      	blx	r3
  }

  return USBD_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 ff46 	bl	800ba10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ab92:	461a      	mov	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aba0:	f003 031f 	and.w	r3, r3, #31
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d01a      	beq.n	800abde <USBD_LL_SetupStage+0x72>
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d822      	bhi.n	800abf2 <USBD_LL_SetupStage+0x86>
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <USBD_LL_SetupStage+0x4a>
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d00a      	beq.n	800abca <USBD_LL_SetupStage+0x5e>
 800abb4:	e01d      	b.n	800abf2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f9ee 	bl	800afa0 <USBD_StdDevReq>
 800abc4:	4603      	mov	r3, r0
 800abc6:	73fb      	strb	r3, [r7, #15]
      break;
 800abc8:	e020      	b.n	800ac0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abd0:	4619      	mov	r1, r3
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fa52 	bl	800b07c <USBD_StdItfReq>
 800abd8:	4603      	mov	r3, r0
 800abda:	73fb      	strb	r3, [r7, #15]
      break;
 800abdc:	e016      	b.n	800ac0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abe4:	4619      	mov	r1, r3
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fa91 	bl	800b10e <USBD_StdEPReq>
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]
      break;
 800abf0:	e00c      	b.n	800ac0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800abf8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f001 fbf5 	bl	800c3f0 <USBD_LL_StallEP>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]
      break;
 800ac0a:	bf00      	nop
  }

  return ret;
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b086      	sub	sp, #24
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	607a      	str	r2, [r7, #4]
 800ac22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac24:	7afb      	ldrb	r3, [r7, #11]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d138      	bne.n	800ac9c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ac30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d14a      	bne.n	800acd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	689a      	ldr	r2, [r3, #8]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d913      	bls.n	800ac70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	689a      	ldr	r2, [r3, #8]
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	1ad2      	subs	r2, r2, r3
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	68da      	ldr	r2, [r3, #12]
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	bf28      	it	cs
 800ac62:	4613      	movcs	r3, r2
 800ac64:	461a      	mov	r2, r3
 800ac66:	6879      	ldr	r1, [r7, #4]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 ffc5 	bl	800bbf8 <USBD_CtlContinueRx>
 800ac6e:	e030      	b.n	800acd2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d10b      	bne.n	800ac94 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d005      	beq.n	800ac94 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f000 ffc0 	bl	800bc1a <USBD_CtlSendStatus>
 800ac9a:	e01a      	b.n	800acd2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d114      	bne.n	800acd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00e      	beq.n	800acd2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	7afa      	ldrb	r2, [r7, #11]
 800acbe:	4611      	mov	r1, r2
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	4798      	blx	r3
 800acc4:	4603      	mov	r3, r0
 800acc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800acc8:	7dfb      	ldrb	r3, [r7, #23]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800acce:	7dfb      	ldrb	r3, [r7, #23]
 800acd0:	e000      	b.n	800acd4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	460b      	mov	r3, r1
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800acea:	7afb      	ldrb	r3, [r7, #11]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d16b      	bne.n	800adc8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	3314      	adds	r3, #20
 800acf4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d156      	bne.n	800adae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	689a      	ldr	r2, [r3, #8]
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d914      	bls.n	800ad36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	1ad2      	subs	r2, r2, r3
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6879      	ldr	r1, [r7, #4]
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 ff3a 	bl	800bb9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f001 fc08 	bl	800c544 <USBD_LL_PrepareReceive>
 800ad34:	e03b      	b.n	800adae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	68da      	ldr	r2, [r3, #12]
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d11c      	bne.n	800ad7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d316      	bcc.n	800ad7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d20f      	bcs.n	800ad7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2100      	movs	r1, #0
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f000 ff1b 	bl	800bb9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad6e:	2300      	movs	r3, #0
 800ad70:	2200      	movs	r2, #0
 800ad72:	2100      	movs	r1, #0
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f001 fbe5 	bl	800c544 <USBD_LL_PrepareReceive>
 800ad7a:	e018      	b.n	800adae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b03      	cmp	r3, #3
 800ad86:	d10b      	bne.n	800ada0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d005      	beq.n	800ada0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ada0:	2180      	movs	r1, #128	@ 0x80
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f001 fb24 	bl	800c3f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 ff49 	bl	800bc40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d122      	bne.n	800adfe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f7ff fe98 	bl	800aaee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800adc6:	e01a      	b.n	800adfe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b03      	cmp	r3, #3
 800add2:	d114      	bne.n	800adfe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00e      	beq.n	800adfe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	7afa      	ldrb	r2, [r7, #11]
 800adea:	4611      	mov	r1, r2
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	4798      	blx	r3
 800adf0:	4603      	mov	r3, r0
 800adf2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800adf4:	7dfb      	ldrb	r3, [r7, #23]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	e000      	b.n	800ae00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d101      	bne.n	800ae3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ae38:	2303      	movs	r3, #3
 800ae3a:	e02f      	b.n	800ae9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00f      	beq.n	800ae66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d009      	beq.n	800ae66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	6852      	ldr	r2, [r2, #4]
 800ae5e:	b2d2      	uxtb	r2, r2
 800ae60:	4611      	mov	r1, r2
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae66:	2340      	movs	r3, #64	@ 0x40
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f001 fa7a 	bl	800c366 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2240      	movs	r2, #64	@ 0x40
 800ae7e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae82:	2340      	movs	r3, #64	@ 0x40
 800ae84:	2200      	movs	r2, #0
 800ae86:	2180      	movs	r1, #128	@ 0x80
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 fa6c 	bl	800c366 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2240      	movs	r2, #64	@ 0x40
 800ae98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	78fa      	ldrb	r2, [r7, #3]
 800aeb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2204      	movs	r2, #4
 800aede:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b04      	cmp	r3, #4
 800af02:	d106      	bne.n	800af12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800af32:	2303      	movs	r3, #3
 800af34:	e012      	b.n	800af5c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d10b      	bne.n	800af5a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af48:	69db      	ldr	r3, [r3, #28]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d005      	beq.n	800af5a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	3301      	adds	r3, #1
 800af7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af82:	8a3b      	ldrh	r3, [r7, #16]
 800af84:	021b      	lsls	r3, r3, #8
 800af86:	b21a      	sxth	r2, r3
 800af88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	b21b      	sxth	r3, r3
 800af90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af92:	89fb      	ldrh	r3, [r7, #14]
}
 800af94:	4618      	mov	r0, r3
 800af96:	371c      	adds	r7, #28
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800afb6:	2b40      	cmp	r3, #64	@ 0x40
 800afb8:	d005      	beq.n	800afc6 <USBD_StdDevReq+0x26>
 800afba:	2b40      	cmp	r3, #64	@ 0x40
 800afbc:	d853      	bhi.n	800b066 <USBD_StdDevReq+0xc6>
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00b      	beq.n	800afda <USBD_StdDevReq+0x3a>
 800afc2:	2b20      	cmp	r3, #32
 800afc4:	d14f      	bne.n	800b066 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	4798      	blx	r3
 800afd4:	4603      	mov	r3, r0
 800afd6:	73fb      	strb	r3, [r7, #15]
      break;
 800afd8:	e04a      	b.n	800b070 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	785b      	ldrb	r3, [r3, #1]
 800afde:	2b09      	cmp	r3, #9
 800afe0:	d83b      	bhi.n	800b05a <USBD_StdDevReq+0xba>
 800afe2:	a201      	add	r2, pc, #4	@ (adr r2, 800afe8 <USBD_StdDevReq+0x48>)
 800afe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe8:	0800b03d 	.word	0x0800b03d
 800afec:	0800b051 	.word	0x0800b051
 800aff0:	0800b05b 	.word	0x0800b05b
 800aff4:	0800b047 	.word	0x0800b047
 800aff8:	0800b05b 	.word	0x0800b05b
 800affc:	0800b01b 	.word	0x0800b01b
 800b000:	0800b011 	.word	0x0800b011
 800b004:	0800b05b 	.word	0x0800b05b
 800b008:	0800b033 	.word	0x0800b033
 800b00c:	0800b025 	.word	0x0800b025
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f9de 	bl	800b3d4 <USBD_GetDescriptor>
          break;
 800b018:	e024      	b.n	800b064 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fb6d 	bl	800b6fc <USBD_SetAddress>
          break;
 800b022:	e01f      	b.n	800b064 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fbac 	bl	800b784 <USBD_SetConfig>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]
          break;
 800b030:	e018      	b.n	800b064 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fc4b 	bl	800b8d0 <USBD_GetConfig>
          break;
 800b03a:	e013      	b.n	800b064 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fc7c 	bl	800b93c <USBD_GetStatus>
          break;
 800b044:	e00e      	b.n	800b064 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fcab 	bl	800b9a4 <USBD_SetFeature>
          break;
 800b04e:	e009      	b.n	800b064 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fcba 	bl	800b9cc <USBD_ClrFeature>
          break;
 800b058:	e004      	b.n	800b064 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fd11 	bl	800ba84 <USBD_CtlError>
          break;
 800b062:	bf00      	nop
      }
      break;
 800b064:	e004      	b.n	800b070 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fd0b 	bl	800ba84 <USBD_CtlError>
      break;
 800b06e:	bf00      	nop
  }

  return ret;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop

0800b07c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b092:	2b40      	cmp	r3, #64	@ 0x40
 800b094:	d005      	beq.n	800b0a2 <USBD_StdItfReq+0x26>
 800b096:	2b40      	cmp	r3, #64	@ 0x40
 800b098:	d82f      	bhi.n	800b0fa <USBD_StdItfReq+0x7e>
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <USBD_StdItfReq+0x26>
 800b09e:	2b20      	cmp	r3, #32
 800b0a0:	d12b      	bne.n	800b0fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d81d      	bhi.n	800b0ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	889b      	ldrh	r3, [r3, #4]
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d813      	bhi.n	800b0e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	6839      	ldr	r1, [r7, #0]
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	4798      	blx	r3
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	88db      	ldrh	r3, [r3, #6]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d110      	bne.n	800b0f6 <USBD_StdItfReq+0x7a>
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10d      	bne.n	800b0f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fd9d 	bl	800bc1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0e0:	e009      	b.n	800b0f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fccd 	bl	800ba84 <USBD_CtlError>
          break;
 800b0ea:	e004      	b.n	800b0f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fcc8 	bl	800ba84 <USBD_CtlError>
          break;
 800b0f4:	e000      	b.n	800b0f8 <USBD_StdItfReq+0x7c>
          break;
 800b0f6:	bf00      	nop
      }
      break;
 800b0f8:	e004      	b.n	800b104 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fcc1 	bl	800ba84 <USBD_CtlError>
      break;
 800b102:	bf00      	nop
  }

  return ret;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	889b      	ldrh	r3, [r3, #4]
 800b120:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b12a:	2b40      	cmp	r3, #64	@ 0x40
 800b12c:	d007      	beq.n	800b13e <USBD_StdEPReq+0x30>
 800b12e:	2b40      	cmp	r3, #64	@ 0x40
 800b130:	f200 8145 	bhi.w	800b3be <USBD_StdEPReq+0x2b0>
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00c      	beq.n	800b152 <USBD_StdEPReq+0x44>
 800b138:	2b20      	cmp	r3, #32
 800b13a:	f040 8140 	bne.w	800b3be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	4798      	blx	r3
 800b14c:	4603      	mov	r3, r0
 800b14e:	73fb      	strb	r3, [r7, #15]
      break;
 800b150:	e13a      	b.n	800b3c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	785b      	ldrb	r3, [r3, #1]
 800b156:	2b03      	cmp	r3, #3
 800b158:	d007      	beq.n	800b16a <USBD_StdEPReq+0x5c>
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	f300 8129 	bgt.w	800b3b2 <USBD_StdEPReq+0x2a4>
 800b160:	2b00      	cmp	r3, #0
 800b162:	d07f      	beq.n	800b264 <USBD_StdEPReq+0x156>
 800b164:	2b01      	cmp	r3, #1
 800b166:	d03c      	beq.n	800b1e2 <USBD_StdEPReq+0xd4>
 800b168:	e123      	b.n	800b3b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b02      	cmp	r3, #2
 800b174:	d002      	beq.n	800b17c <USBD_StdEPReq+0x6e>
 800b176:	2b03      	cmp	r3, #3
 800b178:	d016      	beq.n	800b1a8 <USBD_StdEPReq+0x9a>
 800b17a:	e02c      	b.n	800b1d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b17c:	7bbb      	ldrb	r3, [r7, #14]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00d      	beq.n	800b19e <USBD_StdEPReq+0x90>
 800b182:	7bbb      	ldrb	r3, [r7, #14]
 800b184:	2b80      	cmp	r3, #128	@ 0x80
 800b186:	d00a      	beq.n	800b19e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f001 f92f 	bl	800c3f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b192:	2180      	movs	r1, #128	@ 0x80
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 f92b 	bl	800c3f0 <USBD_LL_StallEP>
 800b19a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b19c:	e020      	b.n	800b1e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fc6f 	bl	800ba84 <USBD_CtlError>
              break;
 800b1a6:	e01b      	b.n	800b1e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	885b      	ldrh	r3, [r3, #2]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10e      	bne.n	800b1ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1b0:	7bbb      	ldrb	r3, [r7, #14]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00b      	beq.n	800b1ce <USBD_StdEPReq+0xc0>
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	2b80      	cmp	r3, #128	@ 0x80
 800b1ba:	d008      	beq.n	800b1ce <USBD_StdEPReq+0xc0>
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	88db      	ldrh	r3, [r3, #6]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d104      	bne.n	800b1ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1c4:	7bbb      	ldrb	r3, [r7, #14]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 f911 	bl	800c3f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fd23 	bl	800bc1a <USBD_CtlSendStatus>

              break;
 800b1d4:	e004      	b.n	800b1e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fc53 	bl	800ba84 <USBD_CtlError>
              break;
 800b1de:	bf00      	nop
          }
          break;
 800b1e0:	e0ec      	b.n	800b3bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d002      	beq.n	800b1f4 <USBD_StdEPReq+0xe6>
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d016      	beq.n	800b220 <USBD_StdEPReq+0x112>
 800b1f2:	e030      	b.n	800b256 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00d      	beq.n	800b216 <USBD_StdEPReq+0x108>
 800b1fa:	7bbb      	ldrb	r3, [r7, #14]
 800b1fc:	2b80      	cmp	r3, #128	@ 0x80
 800b1fe:	d00a      	beq.n	800b216 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b200:	7bbb      	ldrb	r3, [r7, #14]
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f001 f8f3 	bl	800c3f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b20a:	2180      	movs	r1, #128	@ 0x80
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f001 f8ef 	bl	800c3f0 <USBD_LL_StallEP>
 800b212:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b214:	e025      	b.n	800b262 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fc33 	bl	800ba84 <USBD_CtlError>
              break;
 800b21e:	e020      	b.n	800b262 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	885b      	ldrh	r3, [r3, #2]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d11b      	bne.n	800b260 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b228:	7bbb      	ldrb	r3, [r7, #14]
 800b22a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d004      	beq.n	800b23c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b232:	7bbb      	ldrb	r3, [r7, #14]
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 f8f9 	bl	800c42e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fcec 	bl	800bc1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	6839      	ldr	r1, [r7, #0]
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	4798      	blx	r3
 800b250:	4603      	mov	r3, r0
 800b252:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b254:	e004      	b.n	800b260 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fc13 	bl	800ba84 <USBD_CtlError>
              break;
 800b25e:	e000      	b.n	800b262 <USBD_StdEPReq+0x154>
              break;
 800b260:	bf00      	nop
          }
          break;
 800b262:	e0ab      	b.n	800b3bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d002      	beq.n	800b276 <USBD_StdEPReq+0x168>
 800b270:	2b03      	cmp	r3, #3
 800b272:	d032      	beq.n	800b2da <USBD_StdEPReq+0x1cc>
 800b274:	e097      	b.n	800b3a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b276:	7bbb      	ldrb	r3, [r7, #14]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d007      	beq.n	800b28c <USBD_StdEPReq+0x17e>
 800b27c:	7bbb      	ldrb	r3, [r7, #14]
 800b27e:	2b80      	cmp	r3, #128	@ 0x80
 800b280:	d004      	beq.n	800b28c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fbfd 	bl	800ba84 <USBD_CtlError>
                break;
 800b28a:	e091      	b.n	800b3b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b28c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b290:	2b00      	cmp	r3, #0
 800b292:	da0b      	bge.n	800b2ac <USBD_StdEPReq+0x19e>
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b29a:	4613      	mov	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	3310      	adds	r3, #16
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	e00b      	b.n	800b2c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2ac:	7bbb      	ldrb	r3, [r7, #14]
 800b2ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fc47 	bl	800bb66 <USBD_CtlSendData>
              break;
 800b2d8:	e06a      	b.n	800b3b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b2da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	da11      	bge.n	800b306 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	f003 020f 	and.w	r2, r3, #15
 800b2e8:	6879      	ldr	r1, [r7, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	440b      	add	r3, r1
 800b2f4:	3324      	adds	r3, #36	@ 0x24
 800b2f6:	881b      	ldrh	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d117      	bne.n	800b32c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fbc0 	bl	800ba84 <USBD_CtlError>
                  break;
 800b304:	e054      	b.n	800b3b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b306:	7bbb      	ldrb	r3, [r7, #14]
 800b308:	f003 020f 	and.w	r2, r3, #15
 800b30c:	6879      	ldr	r1, [r7, #4]
 800b30e:	4613      	mov	r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	4413      	add	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	440b      	add	r3, r1
 800b318:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b31c:	881b      	ldrh	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d104      	bne.n	800b32c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 fbad 	bl	800ba84 <USBD_CtlError>
                  break;
 800b32a:	e041      	b.n	800b3b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b32c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b330:	2b00      	cmp	r3, #0
 800b332:	da0b      	bge.n	800b34c <USBD_StdEPReq+0x23e>
 800b334:	7bbb      	ldrb	r3, [r7, #14]
 800b336:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b33a:	4613      	mov	r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4413      	add	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	3310      	adds	r3, #16
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	4413      	add	r3, r2
 800b348:	3304      	adds	r3, #4
 800b34a:	e00b      	b.n	800b364 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b34c:	7bbb      	ldrb	r3, [r7, #14]
 800b34e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	4413      	add	r3, r2
 800b362:	3304      	adds	r3, #4
 800b364:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b366:	7bbb      	ldrb	r3, [r7, #14]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <USBD_StdEPReq+0x264>
 800b36c:	7bbb      	ldrb	r3, [r7, #14]
 800b36e:	2b80      	cmp	r3, #128	@ 0x80
 800b370:	d103      	bne.n	800b37a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	2200      	movs	r2, #0
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	e00e      	b.n	800b398 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b37a:	7bbb      	ldrb	r3, [r7, #14]
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f001 f874 	bl	800c46c <USBD_LL_IsStallEP>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2201      	movs	r2, #1
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	e002      	b.n	800b398 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2200      	movs	r2, #0
 800b396:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2202      	movs	r2, #2
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fbe1 	bl	800bb66 <USBD_CtlSendData>
              break;
 800b3a4:	e004      	b.n	800b3b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b3a6:	6839      	ldr	r1, [r7, #0]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fb6b 	bl	800ba84 <USBD_CtlError>
              break;
 800b3ae:	bf00      	nop
          }
          break;
 800b3b0:	e004      	b.n	800b3bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 fb65 	bl	800ba84 <USBD_CtlError>
          break;
 800b3ba:	bf00      	nop
      }
      break;
 800b3bc:	e004      	b.n	800b3c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fb5f 	bl	800ba84 <USBD_CtlError>
      break;
 800b3c6:	bf00      	nop
  }

  return ret;
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
	...

0800b3d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	885b      	ldrh	r3, [r3, #2]
 800b3ee:	0a1b      	lsrs	r3, r3, #8
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	2b0e      	cmp	r3, #14
 800b3f6:	f200 8152 	bhi.w	800b69e <USBD_GetDescriptor+0x2ca>
 800b3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b400 <USBD_GetDescriptor+0x2c>)
 800b3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b400:	0800b471 	.word	0x0800b471
 800b404:	0800b489 	.word	0x0800b489
 800b408:	0800b4c9 	.word	0x0800b4c9
 800b40c:	0800b69f 	.word	0x0800b69f
 800b410:	0800b69f 	.word	0x0800b69f
 800b414:	0800b63f 	.word	0x0800b63f
 800b418:	0800b66b 	.word	0x0800b66b
 800b41c:	0800b69f 	.word	0x0800b69f
 800b420:	0800b69f 	.word	0x0800b69f
 800b424:	0800b69f 	.word	0x0800b69f
 800b428:	0800b69f 	.word	0x0800b69f
 800b42c:	0800b69f 	.word	0x0800b69f
 800b430:	0800b69f 	.word	0x0800b69f
 800b434:	0800b69f 	.word	0x0800b69f
 800b438:	0800b43d 	.word	0x0800b43d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b442:	69db      	ldr	r3, [r3, #28]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00b      	beq.n	800b460 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b44e:	69db      	ldr	r3, [r3, #28]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	7c12      	ldrb	r2, [r2, #16]
 800b454:	f107 0108 	add.w	r1, r7, #8
 800b458:	4610      	mov	r0, r2
 800b45a:	4798      	blx	r3
 800b45c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b45e:	e126      	b.n	800b6ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fb0e 	bl	800ba84 <USBD_CtlError>
        err++;
 800b468:	7afb      	ldrb	r3, [r7, #11]
 800b46a:	3301      	adds	r3, #1
 800b46c:	72fb      	strb	r3, [r7, #11]
      break;
 800b46e:	e11e      	b.n	800b6ae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	7c12      	ldrb	r2, [r2, #16]
 800b47c:	f107 0108 	add.w	r1, r7, #8
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3
 800b484:	60f8      	str	r0, [r7, #12]
      break;
 800b486:	e112      	b.n	800b6ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	7c1b      	ldrb	r3, [r3, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10d      	bne.n	800b4ac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b498:	f107 0208 	add.w	r2, r7, #8
 800b49c:	4610      	mov	r0, r2
 800b49e:	4798      	blx	r3
 800b4a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4aa:	e100      	b.n	800b6ae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b4:	f107 0208 	add.w	r2, r7, #8
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4798      	blx	r3
 800b4bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	701a      	strb	r2, [r3, #0]
      break;
 800b4c6:	e0f2      	b.n	800b6ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	885b      	ldrh	r3, [r3, #2]
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b05      	cmp	r3, #5
 800b4d0:	f200 80ac 	bhi.w	800b62c <USBD_GetDescriptor+0x258>
 800b4d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b4dc <USBD_GetDescriptor+0x108>)
 800b4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4da:	bf00      	nop
 800b4dc:	0800b4f5 	.word	0x0800b4f5
 800b4e0:	0800b529 	.word	0x0800b529
 800b4e4:	0800b55d 	.word	0x0800b55d
 800b4e8:	0800b591 	.word	0x0800b591
 800b4ec:	0800b5c5 	.word	0x0800b5c5
 800b4f0:	0800b5f9 	.word	0x0800b5f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00b      	beq.n	800b518 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	7c12      	ldrb	r2, [r2, #16]
 800b50c:	f107 0108 	add.w	r1, r7, #8
 800b510:	4610      	mov	r0, r2
 800b512:	4798      	blx	r3
 800b514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b516:	e091      	b.n	800b63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 fab2 	bl	800ba84 <USBD_CtlError>
            err++;
 800b520:	7afb      	ldrb	r3, [r7, #11]
 800b522:	3301      	adds	r3, #1
 800b524:	72fb      	strb	r3, [r7, #11]
          break;
 800b526:	e089      	b.n	800b63c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00b      	beq.n	800b54c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	7c12      	ldrb	r2, [r2, #16]
 800b540:	f107 0108 	add.w	r1, r7, #8
 800b544:	4610      	mov	r0, r2
 800b546:	4798      	blx	r3
 800b548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b54a:	e077      	b.n	800b63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 fa98 	bl	800ba84 <USBD_CtlError>
            err++;
 800b554:	7afb      	ldrb	r3, [r7, #11]
 800b556:	3301      	adds	r3, #1
 800b558:	72fb      	strb	r3, [r7, #11]
          break;
 800b55a:	e06f      	b.n	800b63c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00b      	beq.n	800b580 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	7c12      	ldrb	r2, [r2, #16]
 800b574:	f107 0108 	add.w	r1, r7, #8
 800b578:	4610      	mov	r0, r2
 800b57a:	4798      	blx	r3
 800b57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b57e:	e05d      	b.n	800b63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fa7e 	bl	800ba84 <USBD_CtlError>
            err++;
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	3301      	adds	r3, #1
 800b58c:	72fb      	strb	r3, [r7, #11]
          break;
 800b58e:	e055      	b.n	800b63c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00b      	beq.n	800b5b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	7c12      	ldrb	r2, [r2, #16]
 800b5a8:	f107 0108 	add.w	r1, r7, #8
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	4798      	blx	r3
 800b5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5b2:	e043      	b.n	800b63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fa64 	bl	800ba84 <USBD_CtlError>
            err++;
 800b5bc:	7afb      	ldrb	r3, [r7, #11]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5c2:	e03b      	b.n	800b63c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00b      	beq.n	800b5e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	7c12      	ldrb	r2, [r2, #16]
 800b5dc:	f107 0108 	add.w	r1, r7, #8
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	4798      	blx	r3
 800b5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5e6:	e029      	b.n	800b63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fa4a 	bl	800ba84 <USBD_CtlError>
            err++;
 800b5f0:	7afb      	ldrb	r3, [r7, #11]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5f6:	e021      	b.n	800b63c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00b      	beq.n	800b61c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	7c12      	ldrb	r2, [r2, #16]
 800b610:	f107 0108 	add.w	r1, r7, #8
 800b614:	4610      	mov	r0, r2
 800b616:	4798      	blx	r3
 800b618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b61a:	e00f      	b.n	800b63c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fa30 	bl	800ba84 <USBD_CtlError>
            err++;
 800b624:	7afb      	ldrb	r3, [r7, #11]
 800b626:	3301      	adds	r3, #1
 800b628:	72fb      	strb	r3, [r7, #11]
          break;
 800b62a:	e007      	b.n	800b63c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fa28 	bl	800ba84 <USBD_CtlError>
          err++;
 800b634:	7afb      	ldrb	r3, [r7, #11]
 800b636:	3301      	adds	r3, #1
 800b638:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b63a:	bf00      	nop
      }
      break;
 800b63c:	e037      	b.n	800b6ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	7c1b      	ldrb	r3, [r3, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d109      	bne.n	800b65a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b64e:	f107 0208 	add.w	r2, r7, #8
 800b652:	4610      	mov	r0, r2
 800b654:	4798      	blx	r3
 800b656:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b658:	e029      	b.n	800b6ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fa11 	bl	800ba84 <USBD_CtlError>
        err++;
 800b662:	7afb      	ldrb	r3, [r7, #11]
 800b664:	3301      	adds	r3, #1
 800b666:	72fb      	strb	r3, [r7, #11]
      break;
 800b668:	e021      	b.n	800b6ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	7c1b      	ldrb	r3, [r3, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10d      	bne.n	800b68e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b67a:	f107 0208 	add.w	r2, r7, #8
 800b67e:	4610      	mov	r0, r2
 800b680:	4798      	blx	r3
 800b682:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	3301      	adds	r3, #1
 800b688:	2207      	movs	r2, #7
 800b68a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b68c:	e00f      	b.n	800b6ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f9f7 	bl	800ba84 <USBD_CtlError>
        err++;
 800b696:	7afb      	ldrb	r3, [r7, #11]
 800b698:	3301      	adds	r3, #1
 800b69a:	72fb      	strb	r3, [r7, #11]
      break;
 800b69c:	e007      	b.n	800b6ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f9ef 	bl	800ba84 <USBD_CtlError>
      err++;
 800b6a6:	7afb      	ldrb	r3, [r7, #11]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	72fb      	strb	r3, [r7, #11]
      break;
 800b6ac:	bf00      	nop
  }

  if (err != 0U)
 800b6ae:	7afb      	ldrb	r3, [r7, #11]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d11e      	bne.n	800b6f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	88db      	ldrh	r3, [r3, #6]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d016      	beq.n	800b6ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b6bc:	893b      	ldrh	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00e      	beq.n	800b6e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	88da      	ldrh	r2, [r3, #6]
 800b6c6:	893b      	ldrh	r3, [r7, #8]
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	bf28      	it	cs
 800b6cc:	4613      	movcs	r3, r2
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6d2:	893b      	ldrh	r3, [r7, #8]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	68f9      	ldr	r1, [r7, #12]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fa44 	bl	800bb66 <USBD_CtlSendData>
 800b6de:	e009      	b.n	800b6f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f9ce 	bl	800ba84 <USBD_CtlError>
 800b6e8:	e004      	b.n	800b6f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fa95 	bl	800bc1a <USBD_CtlSendStatus>
 800b6f0:	e000      	b.n	800b6f4 <USBD_GetDescriptor+0x320>
    return;
 800b6f2:	bf00      	nop
  }
}
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop

0800b6fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	889b      	ldrh	r3, [r3, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d131      	bne.n	800b772 <USBD_SetAddress+0x76>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	88db      	ldrh	r3, [r3, #6]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d12d      	bne.n	800b772 <USBD_SetAddress+0x76>
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	885b      	ldrh	r3, [r3, #2]
 800b71a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b71c:	d829      	bhi.n	800b772 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	885b      	ldrh	r3, [r3, #2]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b728:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b730:	b2db      	uxtb	r3, r3
 800b732:	2b03      	cmp	r3, #3
 800b734:	d104      	bne.n	800b740 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f9a3 	bl	800ba84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b73e:	e01d      	b.n	800b77c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	7bfa      	ldrb	r2, [r7, #15]
 800b744:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 feb9 	bl	800c4c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fa61 	bl	800bc1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b758:	7bfb      	ldrb	r3, [r7, #15]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d004      	beq.n	800b768 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2202      	movs	r2, #2
 800b762:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b766:	e009      	b.n	800b77c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b770:	e004      	b.n	800b77c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f985 	bl	800ba84 <USBD_CtlError>
  }
}
 800b77a:	bf00      	nop
 800b77c:	bf00      	nop
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	885b      	ldrh	r3, [r3, #2]
 800b796:	b2da      	uxtb	r2, r3
 800b798:	4b4c      	ldr	r3, [pc, #304]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b79a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b79c:	4b4b      	ldr	r3, [pc, #300]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d905      	bls.n	800b7b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f96c 	bl	800ba84 <USBD_CtlError>
    return USBD_FAIL;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e088      	b.n	800b8c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d002      	beq.n	800b7c2 <USBD_SetConfig+0x3e>
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d025      	beq.n	800b80c <USBD_SetConfig+0x88>
 800b7c0:	e071      	b.n	800b8a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7c2:	4b42      	ldr	r3, [pc, #264]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d01c      	beq.n	800b804 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b7ca:	4b40      	ldr	r3, [pc, #256]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7d4:	4b3d      	ldr	r3, [pc, #244]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff f992 	bl	800ab04 <USBD_SetClassConfig>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d004      	beq.n	800b7f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f949 	bl	800ba84 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7f2:	e065      	b.n	800b8c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fa10 	bl	800bc1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b802:	e05d      	b.n	800b8c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fa08 	bl	800bc1a <USBD_CtlSendStatus>
      break;
 800b80a:	e059      	b.n	800b8c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b80c:	4b2f      	ldr	r3, [pc, #188]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d112      	bne.n	800b83a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b81c:	4b2b      	ldr	r3, [pc, #172]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	461a      	mov	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b826:	4b29      	ldr	r3, [pc, #164]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7ff f985 	bl	800ab3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f9f1 	bl	800bc1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b838:	e042      	b.n	800b8c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b83a:	4b24      	ldr	r3, [pc, #144]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	461a      	mov	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	429a      	cmp	r2, r3
 800b846:	d02a      	beq.n	800b89e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7ff f973 	bl	800ab3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b856:	4b1d      	ldr	r3, [pc, #116]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b860:	4b1a      	ldr	r3, [pc, #104]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff f94c 	bl	800ab04 <USBD_SetClassConfig>
 800b86c:	4603      	mov	r3, r0
 800b86e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b870:	7bfb      	ldrb	r3, [r7, #15]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00f      	beq.n	800b896 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f903 	bl	800ba84 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	b2db      	uxtb	r3, r3
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff f958 	bl	800ab3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2202      	movs	r2, #2
 800b890:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b894:	e014      	b.n	800b8c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 f9bf 	bl	800bc1a <USBD_CtlSendStatus>
      break;
 800b89c:	e010      	b.n	800b8c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f9bb 	bl	800bc1a <USBD_CtlSendStatus>
      break;
 800b8a4:	e00c      	b.n	800b8c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b8a6:	6839      	ldr	r1, [r7, #0]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f8eb 	bl	800ba84 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8ae:	4b07      	ldr	r3, [pc, #28]	@ (800b8cc <USBD_SetConfig+0x148>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff f941 	bl	800ab3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b8be:	bf00      	nop
  }

  return ret;
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20000c2d 	.word	0x20000c2d

0800b8d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	88db      	ldrh	r3, [r3, #6]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d004      	beq.n	800b8ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f8cd 	bl	800ba84 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b8ea:	e023      	b.n	800b934 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	dc02      	bgt.n	800b8fe <USBD_GetConfig+0x2e>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	dc03      	bgt.n	800b904 <USBD_GetConfig+0x34>
 800b8fc:	e015      	b.n	800b92a <USBD_GetConfig+0x5a>
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d00b      	beq.n	800b91a <USBD_GetConfig+0x4a>
 800b902:	e012      	b.n	800b92a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	3308      	adds	r3, #8
 800b90e:	2201      	movs	r2, #1
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f927 	bl	800bb66 <USBD_CtlSendData>
        break;
 800b918:	e00c      	b.n	800b934 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	3304      	adds	r3, #4
 800b91e:	2201      	movs	r2, #1
 800b920:	4619      	mov	r1, r3
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f91f 	bl	800bb66 <USBD_CtlSendData>
        break;
 800b928:	e004      	b.n	800b934 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 f8a9 	bl	800ba84 <USBD_CtlError>
        break;
 800b932:	bf00      	nop
}
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	3b01      	subs	r3, #1
 800b950:	2b02      	cmp	r3, #2
 800b952:	d81e      	bhi.n	800b992 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	88db      	ldrh	r3, [r3, #6]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d004      	beq.n	800b966 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f890 	bl	800ba84 <USBD_CtlError>
        break;
 800b964:	e01a      	b.n	800b99c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b972:	2b00      	cmp	r3, #0
 800b974:	d005      	beq.n	800b982 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	f043 0202 	orr.w	r2, r3, #2
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	330c      	adds	r3, #12
 800b986:	2202      	movs	r2, #2
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f8eb 	bl	800bb66 <USBD_CtlSendData>
      break;
 800b990:	e004      	b.n	800b99c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f875 	bl	800ba84 <USBD_CtlError>
      break;
 800b99a:	bf00      	nop
  }
}
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	885b      	ldrh	r3, [r3, #2]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d106      	bne.n	800b9c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f92b 	bl	800bc1a <USBD_CtlSendStatus>
  }
}
 800b9c4:	bf00      	nop
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d80b      	bhi.n	800b9fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	885b      	ldrh	r3, [r3, #2]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d10c      	bne.n	800ba06 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f910 	bl	800bc1a <USBD_CtlSendStatus>
      }
      break;
 800b9fa:	e004      	b.n	800ba06 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f840 	bl	800ba84 <USBD_CtlError>
      break;
 800ba04:	e000      	b.n	800ba08 <USBD_ClrFeature+0x3c>
      break;
 800ba06:	bf00      	nop
  }
}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	781a      	ldrb	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	781a      	ldrb	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	3301      	adds	r3, #1
 800ba38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f7ff fa92 	bl	800af64 <SWAPBYTE>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3301      	adds	r3, #1
 800ba52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f7ff fa85 	bl	800af64 <SWAPBYTE>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3301      	adds	r3, #1
 800ba66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f7ff fa78 	bl	800af64 <SWAPBYTE>
 800ba74:	4603      	mov	r3, r0
 800ba76:	461a      	mov	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	80da      	strh	r2, [r3, #6]
}
 800ba7c:	bf00      	nop
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba8e:	2180      	movs	r1, #128	@ 0x80
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fcad 	bl	800c3f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba96:	2100      	movs	r1, #0
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fca9 	bl	800c3f0 <USBD_LL_StallEP>
}
 800ba9e:	bf00      	nop
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b086      	sub	sp, #24
 800baaa:	af00      	add	r7, sp, #0
 800baac:	60f8      	str	r0, [r7, #12]
 800baae:	60b9      	str	r1, [r7, #8]
 800bab0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bab2:	2300      	movs	r3, #0
 800bab4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d036      	beq.n	800bb2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bac0:	6938      	ldr	r0, [r7, #16]
 800bac2:	f000 f836 	bl	800bb32 <USBD_GetLen>
 800bac6:	4603      	mov	r3, r0
 800bac8:	3301      	adds	r3, #1
 800baca:	b29b      	uxth	r3, r3
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	b29a      	uxth	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bad4:	7dfb      	ldrb	r3, [r7, #23]
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	4413      	add	r3, r2
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	7812      	ldrb	r2, [r2, #0]
 800bade:	701a      	strb	r2, [r3, #0]
  idx++;
 800bae0:	7dfb      	ldrb	r3, [r7, #23]
 800bae2:	3301      	adds	r3, #1
 800bae4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	4413      	add	r3, r2
 800baec:	2203      	movs	r2, #3
 800baee:	701a      	strb	r2, [r3, #0]
  idx++;
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
 800baf2:	3301      	adds	r3, #1
 800baf4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800baf6:	e013      	b.n	800bb20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	4413      	add	r3, r2
 800bafe:	693a      	ldr	r2, [r7, #16]
 800bb00:	7812      	ldrb	r2, [r2, #0]
 800bb02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	3301      	adds	r3, #1
 800bb08:	613b      	str	r3, [r7, #16]
    idx++;
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	4413      	add	r3, r2
 800bb16:	2200      	movs	r2, #0
 800bb18:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1e7      	bne.n	800baf8 <USBD_GetString+0x52>
 800bb28:	e000      	b.n	800bb2c <USBD_GetString+0x86>
    return;
 800bb2a:	bf00      	nop
  }
}
 800bb2c:	3718      	adds	r7, #24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b085      	sub	sp, #20
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb42:	e005      	b.n	800bb50 <USBD_GetLen+0x1e>
  {
    len++;
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	3301      	adds	r3, #1
 800bb48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1f5      	bne.n	800bb44 <USBD_GetLen+0x12>
  }

  return len;
 800bb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	60f8      	str	r0, [r7, #12]
 800bb6e:	60b9      	str	r1, [r7, #8]
 800bb70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2202      	movs	r2, #2
 800bb76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 fcb8 	bl	800c502 <USBD_LL_Transmit>

  return USBD_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	2100      	movs	r1, #0
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f000 fca7 	bl	800c502 <USBD_LL_Transmit>

  return USBD_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b084      	sub	sp, #16
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	60f8      	str	r0, [r7, #12]
 800bbc6:	60b9      	str	r1, [r7, #8]
 800bbc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2203      	movs	r2, #3
 800bbce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 fcab 	bl	800c544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	2100      	movs	r1, #0
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 fc9a 	bl	800c544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b082      	sub	sp, #8
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2204      	movs	r2, #4
 800bc26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2100      	movs	r1, #0
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fc66 	bl	800c502 <USBD_LL_Transmit>

  return USBD_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2205      	movs	r2, #5
 800bc4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc50:	2300      	movs	r3, #0
 800bc52:	2200      	movs	r2, #0
 800bc54:	2100      	movs	r1, #0
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fc74 	bl	800c544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3708      	adds	r7, #8
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
	...

0800bc68 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	4912      	ldr	r1, [pc, #72]	@ (800bcb8 <MX_USB_Device_Init+0x50>)
 800bc70:	4812      	ldr	r0, [pc, #72]	@ (800bcbc <MX_USB_Device_Init+0x54>)
 800bc72:	f7fe fed9 	bl	800aa28 <USBD_Init>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bc7c:	f7f5 fe61 	bl	8001942 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800bc80:	490f      	ldr	r1, [pc, #60]	@ (800bcc0 <MX_USB_Device_Init+0x58>)
 800bc82:	480e      	ldr	r0, [pc, #56]	@ (800bcbc <MX_USB_Device_Init+0x54>)
 800bc84:	f7fe ff00 	bl	800aa88 <USBD_RegisterClass>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bc8e:	f7f5 fe58 	bl	8001942 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800bc92:	490c      	ldr	r1, [pc, #48]	@ (800bcc4 <MX_USB_Device_Init+0x5c>)
 800bc94:	4809      	ldr	r0, [pc, #36]	@ (800bcbc <MX_USB_Device_Init+0x54>)
 800bc96:	f7fe fe21 	bl	800a8dc <USBD_CDC_RegisterInterface>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d001      	beq.n	800bca4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800bca0:	f7f5 fe4f 	bl	8001942 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bca4:	4805      	ldr	r0, [pc, #20]	@ (800bcbc <MX_USB_Device_Init+0x54>)
 800bca6:	f7fe ff16 	bl	800aad6 <USBD_Start>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800bcb0:	f7f5 fe47 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800bcb4:	bf00      	nop
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	200002d8 	.word	0x200002d8
 800bcbc:	20001ac8 	.word	0x20001ac8
 800bcc0:	200001c0 	.word	0x200001c0
 800bcc4:	200002c4 	.word	0x200002c4

0800bcc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bccc:	2200      	movs	r2, #0
 800bcce:	4905      	ldr	r1, [pc, #20]	@ (800bce4 <CDC_Init_FS+0x1c>)
 800bcd0:	4805      	ldr	r0, [pc, #20]	@ (800bce8 <CDC_Init_FS+0x20>)
 800bcd2:	f7fe fe18 	bl	800a906 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bcd6:	4905      	ldr	r1, [pc, #20]	@ (800bcec <CDC_Init_FS+0x24>)
 800bcd8:	4803      	ldr	r0, [pc, #12]	@ (800bce8 <CDC_Init_FS+0x20>)
 800bcda:	f7fe fe32 	bl	800a942 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bcde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	20002198 	.word	0x20002198
 800bce8:	20001ac8 	.word	0x20001ac8
 800bcec:	20001d98 	.word	0x20001d98

0800bcf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bcf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	4603      	mov	r3, r0
 800bd08:	6039      	str	r1, [r7, #0]
 800bd0a:	71fb      	strb	r3, [r7, #7]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd10:	79fb      	ldrb	r3, [r7, #7]
 800bd12:	2b23      	cmp	r3, #35	@ 0x23
 800bd14:	d84a      	bhi.n	800bdac <CDC_Control_FS+0xac>
 800bd16:	a201      	add	r2, pc, #4	@ (adr r2, 800bd1c <CDC_Control_FS+0x1c>)
 800bd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1c:	0800bdad 	.word	0x0800bdad
 800bd20:	0800bdad 	.word	0x0800bdad
 800bd24:	0800bdad 	.word	0x0800bdad
 800bd28:	0800bdad 	.word	0x0800bdad
 800bd2c:	0800bdad 	.word	0x0800bdad
 800bd30:	0800bdad 	.word	0x0800bdad
 800bd34:	0800bdad 	.word	0x0800bdad
 800bd38:	0800bdad 	.word	0x0800bdad
 800bd3c:	0800bdad 	.word	0x0800bdad
 800bd40:	0800bdad 	.word	0x0800bdad
 800bd44:	0800bdad 	.word	0x0800bdad
 800bd48:	0800bdad 	.word	0x0800bdad
 800bd4c:	0800bdad 	.word	0x0800bdad
 800bd50:	0800bdad 	.word	0x0800bdad
 800bd54:	0800bdad 	.word	0x0800bdad
 800bd58:	0800bdad 	.word	0x0800bdad
 800bd5c:	0800bdad 	.word	0x0800bdad
 800bd60:	0800bdad 	.word	0x0800bdad
 800bd64:	0800bdad 	.word	0x0800bdad
 800bd68:	0800bdad 	.word	0x0800bdad
 800bd6c:	0800bdad 	.word	0x0800bdad
 800bd70:	0800bdad 	.word	0x0800bdad
 800bd74:	0800bdad 	.word	0x0800bdad
 800bd78:	0800bdad 	.word	0x0800bdad
 800bd7c:	0800bdad 	.word	0x0800bdad
 800bd80:	0800bdad 	.word	0x0800bdad
 800bd84:	0800bdad 	.word	0x0800bdad
 800bd88:	0800bdad 	.word	0x0800bdad
 800bd8c:	0800bdad 	.word	0x0800bdad
 800bd90:	0800bdad 	.word	0x0800bdad
 800bd94:	0800bdad 	.word	0x0800bdad
 800bd98:	0800bdad 	.word	0x0800bdad
 800bd9c:	0800bdad 	.word	0x0800bdad
 800bda0:	0800bdad 	.word	0x0800bdad
 800bda4:	0800bdad 	.word	0x0800bdad
 800bda8:	0800bdad 	.word	0x0800bdad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bdac:	bf00      	nop
  }

  return (USBD_OK);
 800bdae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bdc6:	6879      	ldr	r1, [r7, #4]
 800bdc8:	4805      	ldr	r0, [pc, #20]	@ (800bde0 <CDC_Receive_FS+0x24>)
 800bdca:	f7fe fdba 	bl	800a942 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bdce:	4804      	ldr	r0, [pc, #16]	@ (800bde0 <CDC_Receive_FS+0x24>)
 800bdd0:	f7fe fe00 	bl	800a9d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bdd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20001ac8 	.word	0x20001ac8

0800bde4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	460b      	mov	r3, r1
 800bdee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bdf4:	4b0d      	ldr	r3, [pc, #52]	@ (800be2c <CDC_Transmit_FS+0x48>)
 800bdf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bdfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800be06:	2301      	movs	r3, #1
 800be08:	e00b      	b.n	800be22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800be0a:	887b      	ldrh	r3, [r7, #2]
 800be0c:	461a      	mov	r2, r3
 800be0e:	6879      	ldr	r1, [r7, #4]
 800be10:	4806      	ldr	r0, [pc, #24]	@ (800be2c <CDC_Transmit_FS+0x48>)
 800be12:	f7fe fd78 	bl	800a906 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800be16:	4805      	ldr	r0, [pc, #20]	@ (800be2c <CDC_Transmit_FS+0x48>)
 800be18:	f7fe fdac 	bl	800a974 <USBD_CDC_TransmitPacket>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800be20:	7bfb      	ldrb	r3, [r7, #15]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	20001ac8 	.word	0x20001ac8

0800be30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	4613      	mov	r3, r2
 800be3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800be42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be46:	4618      	mov	r0, r3
 800be48:	371c      	adds	r7, #28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
	...

0800be54 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800be5a:	4b09      	ldr	r3, [pc, #36]	@ (800be80 <CDC_Transmit_Is_Busy+0x2c>)
 800be5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800be60:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800be6c:	2301      	movs	r3, #1
 800be6e:	e000      	b.n	800be72 <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800be70:	2300      	movs	r3, #0
  }
}
 800be72:	4618      	mov	r0, r3
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	20001ac8 	.word	0x20001ac8

0800be84 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	4603      	mov	r3, r0
 800be8c:	6039      	str	r1, [r7, #0]
 800be8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	2212      	movs	r2, #18
 800be94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800be96:	4b03      	ldr	r3, [pc, #12]	@ (800bea4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800be98:	4618      	mov	r0, r3
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr
 800bea4:	200002f8 	.word	0x200002f8

0800bea8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	6039      	str	r1, [r7, #0]
 800beb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2204      	movs	r2, #4
 800beb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800beba:	4b03      	ldr	r3, [pc, #12]	@ (800bec8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	2000030c 	.word	0x2000030c

0800becc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	6039      	str	r1, [r7, #0]
 800bed6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d105      	bne.n	800beea <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	4907      	ldr	r1, [pc, #28]	@ (800bf00 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bee2:	4808      	ldr	r0, [pc, #32]	@ (800bf04 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bee4:	f7ff fddf 	bl	800baa6 <USBD_GetString>
 800bee8:	e004      	b.n	800bef4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4904      	ldr	r1, [pc, #16]	@ (800bf00 <USBD_CDC_ProductStrDescriptor+0x34>)
 800beee:	4805      	ldr	r0, [pc, #20]	@ (800bf04 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bef0:	f7ff fdd9 	bl	800baa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef4:	4b02      	ldr	r3, [pc, #8]	@ (800bf00 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	20002598 	.word	0x20002598
 800bf04:	0800d860 	.word	0x0800d860

0800bf08 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	6039      	str	r1, [r7, #0]
 800bf12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	4904      	ldr	r1, [pc, #16]	@ (800bf28 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bf18:	4804      	ldr	r0, [pc, #16]	@ (800bf2c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bf1a:	f7ff fdc4 	bl	800baa6 <USBD_GetString>
  return USBD_StrDesc;
 800bf1e:	4b02      	ldr	r3, [pc, #8]	@ (800bf28 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	20002598 	.word	0x20002598
 800bf2c:	0800d878 	.word	0x0800d878

0800bf30 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	4603      	mov	r3, r0
 800bf38:	6039      	str	r1, [r7, #0]
 800bf3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	221a      	movs	r2, #26
 800bf40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf42:	f000 f843 	bl	800bfcc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bf46:	4b02      	ldr	r3, [pc, #8]	@ (800bf50 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	20000310 	.word	0x20000310

0800bf54 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	6039      	str	r1, [r7, #0]
 800bf5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf60:	79fb      	ldrb	r3, [r7, #7]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d105      	bne.n	800bf72 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	4907      	ldr	r1, [pc, #28]	@ (800bf88 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bf6a:	4808      	ldr	r0, [pc, #32]	@ (800bf8c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bf6c:	f7ff fd9b 	bl	800baa6 <USBD_GetString>
 800bf70:	e004      	b.n	800bf7c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	4904      	ldr	r1, [pc, #16]	@ (800bf88 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bf76:	4805      	ldr	r0, [pc, #20]	@ (800bf8c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bf78:	f7ff fd95 	bl	800baa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf7c:	4b02      	ldr	r3, [pc, #8]	@ (800bf88 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20002598 	.word	0x20002598
 800bf8c:	0800d88c 	.word	0x0800d88c

0800bf90 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	4603      	mov	r3, r0
 800bf98:	6039      	str	r1, [r7, #0]
 800bf9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf9c:	79fb      	ldrb	r3, [r7, #7]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d105      	bne.n	800bfae <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	4907      	ldr	r1, [pc, #28]	@ (800bfc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bfa6:	4808      	ldr	r0, [pc, #32]	@ (800bfc8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bfa8:	f7ff fd7d 	bl	800baa6 <USBD_GetString>
 800bfac:	e004      	b.n	800bfb8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	4904      	ldr	r1, [pc, #16]	@ (800bfc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bfb2:	4805      	ldr	r0, [pc, #20]	@ (800bfc8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bfb4:	f7ff fd77 	bl	800baa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfb8:	4b02      	ldr	r3, [pc, #8]	@ (800bfc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3708      	adds	r7, #8
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20002598 	.word	0x20002598
 800bfc8:	0800d898 	.word	0x0800d898

0800bfcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfd2:	4b0f      	ldr	r3, [pc, #60]	@ (800c010 <Get_SerialNum+0x44>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfd8:	4b0e      	ldr	r3, [pc, #56]	@ (800c014 <Get_SerialNum+0x48>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfde:	4b0e      	ldr	r3, [pc, #56]	@ (800c018 <Get_SerialNum+0x4c>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4413      	add	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d009      	beq.n	800c006 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bff2:	2208      	movs	r2, #8
 800bff4:	4909      	ldr	r1, [pc, #36]	@ (800c01c <Get_SerialNum+0x50>)
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f000 f814 	bl	800c024 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bffc:	2204      	movs	r2, #4
 800bffe:	4908      	ldr	r1, [pc, #32]	@ (800c020 <Get_SerialNum+0x54>)
 800c000:	68b8      	ldr	r0, [r7, #8]
 800c002:	f000 f80f 	bl	800c024 <IntToUnicode>
  }
}
 800c006:	bf00      	nop
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	1fff7590 	.word	0x1fff7590
 800c014:	1fff7594 	.word	0x1fff7594
 800c018:	1fff7598 	.word	0x1fff7598
 800c01c:	20000312 	.word	0x20000312
 800c020:	20000322 	.word	0x20000322

0800c024 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c024:	b480      	push	{r7}
 800c026:	b087      	sub	sp, #28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	4613      	mov	r3, r2
 800c030:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c032:	2300      	movs	r3, #0
 800c034:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c036:	2300      	movs	r3, #0
 800c038:	75fb      	strb	r3, [r7, #23]
 800c03a:	e027      	b.n	800c08c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	0f1b      	lsrs	r3, r3, #28
 800c040:	2b09      	cmp	r3, #9
 800c042:	d80b      	bhi.n	800c05c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	0f1b      	lsrs	r3, r3, #28
 800c048:	b2da      	uxtb	r2, r3
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
 800c04c:	005b      	lsls	r3, r3, #1
 800c04e:	4619      	mov	r1, r3
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	440b      	add	r3, r1
 800c054:	3230      	adds	r2, #48	@ 0x30
 800c056:	b2d2      	uxtb	r2, r2
 800c058:	701a      	strb	r2, [r3, #0]
 800c05a:	e00a      	b.n	800c072 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	0f1b      	lsrs	r3, r3, #28
 800c060:	b2da      	uxtb	r2, r3
 800c062:	7dfb      	ldrb	r3, [r7, #23]
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	4619      	mov	r1, r3
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	440b      	add	r3, r1
 800c06c:	3237      	adds	r2, #55	@ 0x37
 800c06e:	b2d2      	uxtb	r2, r2
 800c070:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	011b      	lsls	r3, r3, #4
 800c076:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c078:	7dfb      	ldrb	r3, [r7, #23]
 800c07a:	005b      	lsls	r3, r3, #1
 800c07c:	3301      	adds	r3, #1
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	4413      	add	r3, r2
 800c082:	2200      	movs	r2, #0
 800c084:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c086:	7dfb      	ldrb	r3, [r7, #23]
 800c088:	3301      	adds	r3, #1
 800c08a:	75fb      	strb	r3, [r7, #23]
 800c08c:	7dfa      	ldrb	r2, [r7, #23]
 800c08e:	79fb      	ldrb	r3, [r7, #7]
 800c090:	429a      	cmp	r2, r3
 800c092:	d3d3      	bcc.n	800c03c <IntToUnicode+0x18>
  }
}
 800c094:	bf00      	nop
 800c096:	bf00      	nop
 800c098:	371c      	adds	r7, #28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
	...

0800c0a4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b094      	sub	sp, #80	@ 0x50
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c0ac:	f107 030c 	add.w	r3, r7, #12
 800c0b0:	2244      	movs	r2, #68	@ 0x44
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 fd03 	bl	800cac0 <memset>
  if(pcdHandle->Instance==USB)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a15      	ldr	r2, [pc, #84]	@ (800c114 <HAL_PCD_MspInit+0x70>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d122      	bne.n	800c10a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c0c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c0c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c0ce:	f107 030c 	add.w	r3, r7, #12
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7f9 fd2a 	bl	8005b2c <HAL_RCCEx_PeriphCLKConfig>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d001      	beq.n	800c0e2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c0de:	f7f5 fc30 	bl	8001942 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c0e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c118 <HAL_PCD_MspInit+0x74>)
 800c0e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0e6:	4a0c      	ldr	r2, [pc, #48]	@ (800c118 <HAL_PCD_MspInit+0x74>)
 800c0e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c0ec:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0ee:	4b0a      	ldr	r3, [pc, #40]	@ (800c118 <HAL_PCD_MspInit+0x74>)
 800c0f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0f6:	60bb      	str	r3, [r7, #8]
 800c0f8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	2014      	movs	r0, #20
 800c100:	f7f6 fb6d 	bl	80027de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c104:	2014      	movs	r0, #20
 800c106:	f7f6 fb84 	bl	8002812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c10a:	bf00      	nop
 800c10c:	3750      	adds	r7, #80	@ 0x50
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	40005c00 	.word	0x40005c00
 800c118:	40021000 	.word	0x40021000

0800c11c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c130:	4619      	mov	r1, r3
 800c132:	4610      	mov	r0, r2
 800c134:	f7fe fd1a 	bl	800ab6c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c152:	78fa      	ldrb	r2, [r7, #3]
 800c154:	6879      	ldr	r1, [r7, #4]
 800c156:	4613      	mov	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4413      	add	r3, r2
 800c15c:	00db      	lsls	r3, r3, #3
 800c15e:	440b      	add	r3, r1
 800c160:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	78fb      	ldrb	r3, [r7, #3]
 800c168:	4619      	mov	r1, r3
 800c16a:	f7fe fd54 	bl	800ac16 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c16e:	bf00      	nop
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	460b      	mov	r3, r1
 800c180:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c188:	78fa      	ldrb	r2, [r7, #3]
 800c18a:	6879      	ldr	r1, [r7, #4]
 800c18c:	4613      	mov	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	440b      	add	r3, r1
 800c196:	3324      	adds	r3, #36	@ 0x24
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	78fb      	ldrb	r3, [r7, #3]
 800c19c:	4619      	mov	r1, r3
 800c19e:	f7fe fd9d 	bl	800acdc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c1a2:	bf00      	nop
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b082      	sub	sp, #8
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fe feb1 	bl	800af20 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c1be:	bf00      	nop
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b084      	sub	sp, #16
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	795b      	ldrb	r3, [r3, #5]
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	d001      	beq.n	800c1de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c1da:	f7f5 fbb2 	bl	8001942 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c1e4:	7bfa      	ldrb	r2, [r7, #15]
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fe fe5b 	bl	800aea4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe fe07 	bl	800ae08 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c1fa:	bf00      	nop
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
	...

0800c204 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c212:	4618      	mov	r0, r3
 800c214:	f7fe fe56 	bl	800aec4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	7a5b      	ldrb	r3, [r3, #9]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d005      	beq.n	800c22c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c220:	4b04      	ldr	r3, [pc, #16]	@ (800c234 <HAL_PCD_SuspendCallback+0x30>)
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	4a03      	ldr	r2, [pc, #12]	@ (800c234 <HAL_PCD_SuspendCallback+0x30>)
 800c226:	f043 0306 	orr.w	r3, r3, #6
 800c22a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c22c:	bf00      	nop
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	e000ed00 	.word	0xe000ed00

0800c238 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	7a5b      	ldrb	r3, [r3, #9]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d007      	beq.n	800c258 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c248:	4b08      	ldr	r3, [pc, #32]	@ (800c26c <HAL_PCD_ResumeCallback+0x34>)
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	4a07      	ldr	r2, [pc, #28]	@ (800c26c <HAL_PCD_ResumeCallback+0x34>)
 800c24e:	f023 0306 	bic.w	r3, r3, #6
 800c252:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c254:	f000 f9f8 	bl	800c648 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fe46 	bl	800aef0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	e000ed00 	.word	0xe000ed00

0800c270 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c278:	4a2b      	ldr	r2, [pc, #172]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a29      	ldr	r2, [pc, #164]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c284:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c288:	4b27      	ldr	r3, [pc, #156]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c28a:	4a28      	ldr	r2, [pc, #160]	@ (800c32c <USBD_LL_Init+0xbc>)
 800c28c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c28e:	4b26      	ldr	r3, [pc, #152]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c290:	2208      	movs	r2, #8
 800c292:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c294:	4b24      	ldr	r3, [pc, #144]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c296:	2202      	movs	r2, #2
 800c298:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c29a:	4b23      	ldr	r3, [pc, #140]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c29c:	2202      	movs	r2, #2
 800c29e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c2a0:	4b21      	ldr	r3, [pc, #132]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c2a6:	4b20      	ldr	r3, [pc, #128]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c2ac:	4b1e      	ldr	r3, [pc, #120]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c2b2:	4b1d      	ldr	r3, [pc, #116]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c2b8:	481b      	ldr	r0, [pc, #108]	@ (800c328 <USBD_LL_Init+0xb8>)
 800c2ba:	f7f7 f954 	bl	8003566 <HAL_PCD_Init>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c2c4:	f7f5 fb3d 	bl	8001942 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c2ce:	2318      	movs	r3, #24
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	f7f8 fddb 	bl	8004e8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c2de:	2358      	movs	r3, #88	@ 0x58
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2180      	movs	r1, #128	@ 0x80
 800c2e4:	f7f8 fdd3 	bl	8004e8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c2ee:	23c0      	movs	r3, #192	@ 0xc0
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	2181      	movs	r1, #129	@ 0x81
 800c2f4:	f7f8 fdcb 	bl	8004e8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c2fe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c302:	2200      	movs	r2, #0
 800c304:	2101      	movs	r1, #1
 800c306:	f7f8 fdc2 	bl	8004e8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c314:	2200      	movs	r2, #0
 800c316:	2182      	movs	r1, #130	@ 0x82
 800c318:	f7f8 fdb9 	bl	8004e8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	20002798 	.word	0x20002798
 800c32c:	40005c00 	.word	0x40005c00

0800c330 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c346:	4618      	mov	r0, r3
 800c348:	f7f7 f9db 	bl	8003702 <HAL_PCD_Start>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 f97e 	bl	800c654 <USBD_Get_USB_Status>
 800c358:	4603      	mov	r3, r0
 800c35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
 800c36e:	4608      	mov	r0, r1
 800c370:	4611      	mov	r1, r2
 800c372:	461a      	mov	r2, r3
 800c374:	4603      	mov	r3, r0
 800c376:	70fb      	strb	r3, [r7, #3]
 800c378:	460b      	mov	r3, r1
 800c37a:	70bb      	strb	r3, [r7, #2]
 800c37c:	4613      	mov	r3, r2
 800c37e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c38e:	78bb      	ldrb	r3, [r7, #2]
 800c390:	883a      	ldrh	r2, [r7, #0]
 800c392:	78f9      	ldrb	r1, [r7, #3]
 800c394:	f7f7 fb22 	bl	80039dc <HAL_PCD_EP_Open>
 800c398:	4603      	mov	r3, r0
 800c39a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 f958 	bl	800c654 <USBD_Get_USB_Status>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b084      	sub	sp, #16
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c3cc:	78fa      	ldrb	r2, [r7, #3]
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7f7 fb62 	bl	8003a9a <HAL_PCD_EP_Close>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3da:	7bfb      	ldrb	r3, [r7, #15]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f000 f939 	bl	800c654 <USBD_Get_USB_Status>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c40a:	78fa      	ldrb	r2, [r7, #3]
 800c40c:	4611      	mov	r1, r2
 800c40e:	4618      	mov	r0, r3
 800c410:	f7f7 fc0b 	bl	8003c2a <HAL_PCD_EP_SetStall>
 800c414:	4603      	mov	r3, r0
 800c416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c418:	7bfb      	ldrb	r3, [r7, #15]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 f91a 	bl	800c654 <USBD_Get_USB_Status>
 800c420:	4603      	mov	r3, r0
 800c422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c424:	7bbb      	ldrb	r3, [r7, #14]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b084      	sub	sp, #16
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	460b      	mov	r3, r1
 800c438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c43e:	2300      	movs	r3, #0
 800c440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c448:	78fa      	ldrb	r2, [r7, #3]
 800c44a:	4611      	mov	r1, r2
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7f7 fc3e 	bl	8003cce <HAL_PCD_EP_ClrStall>
 800c452:	4603      	mov	r3, r0
 800c454:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c456:	7bfb      	ldrb	r3, [r7, #15]
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 f8fb 	bl	800c654 <USBD_Get_USB_Status>
 800c45e:	4603      	mov	r3, r0
 800c460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c462:	7bbb      	ldrb	r3, [r7, #14]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	460b      	mov	r3, r1
 800c476:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c47e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c484:	2b00      	cmp	r3, #0
 800c486:	da0b      	bge.n	800c4a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c488:	78fb      	ldrb	r3, [r7, #3]
 800c48a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c48e:	68f9      	ldr	r1, [r7, #12]
 800c490:	4613      	mov	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	4413      	add	r3, r2
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	440b      	add	r3, r1
 800c49a:	3312      	adds	r3, #18
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	e00b      	b.n	800c4b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c4a0:	78fb      	ldrb	r3, [r7, #3]
 800c4a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4a6:	68f9      	ldr	r1, [r7, #12]
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	00db      	lsls	r3, r3, #3
 800c4b0:	440b      	add	r3, r1
 800c4b2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c4b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c4de:	78fa      	ldrb	r2, [r7, #3]
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7f7 fa56 	bl	8003994 <HAL_PCD_SetAddress>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ec:	7bfb      	ldrb	r3, [r7, #15]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 f8b0 	bl	800c654 <USBD_Get_USB_Status>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b086      	sub	sp, #24
 800c506:	af00      	add	r7, sp, #0
 800c508:	60f8      	str	r0, [r7, #12]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
 800c50e:	460b      	mov	r3, r1
 800c510:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c512:	2300      	movs	r3, #0
 800c514:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c520:	7af9      	ldrb	r1, [r7, #11]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	f7f7 fb49 	bl	8003bbc <HAL_PCD_EP_Transmit>
 800c52a:	4603      	mov	r3, r0
 800c52c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
 800c530:	4618      	mov	r0, r3
 800c532:	f000 f88f 	bl	800c654 <USBD_Get_USB_Status>
 800c536:	4603      	mov	r3, r0
 800c538:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c53a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	607a      	str	r2, [r7, #4]
 800c54e:	603b      	str	r3, [r7, #0]
 800c550:	460b      	mov	r3, r1
 800c552:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c562:	7af9      	ldrb	r1, [r7, #11]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	f7f7 fadf 	bl	8003b2a <HAL_PCD_EP_Receive>
 800c56c:	4603      	mov	r3, r0
 800c56e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c570:	7dfb      	ldrb	r3, [r7, #23]
 800c572:	4618      	mov	r0, r3
 800c574:	f000 f86e 	bl	800c654 <USBD_Get_USB_Status>
 800c578:	4603      	mov	r3, r0
 800c57a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c57c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3718      	adds	r7, #24
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b082      	sub	sp, #8
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	460b      	mov	r3, r1
 800c590:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c598:	78fa      	ldrb	r2, [r7, #3]
 800c59a:	4611      	mov	r1, r2
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7f7 faf5 	bl	8003b8c <HAL_PCD_EP_GetRxCount>
 800c5a2:	4603      	mov	r3, r0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c5b8:	78fb      	ldrb	r3, [r7, #3]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d002      	beq.n	800c5c4 <HAL_PCDEx_LPM_Callback+0x18>
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d013      	beq.n	800c5ea <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c5c2:	e023      	b.n	800c60c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	7a5b      	ldrb	r3, [r3, #9]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d007      	beq.n	800c5dc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c5cc:	f000 f83c 	bl	800c648 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5d0:	4b10      	ldr	r3, [pc, #64]	@ (800c614 <HAL_PCDEx_LPM_Callback+0x68>)
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	4a0f      	ldr	r2, [pc, #60]	@ (800c614 <HAL_PCDEx_LPM_Callback+0x68>)
 800c5d6:	f023 0306 	bic.w	r3, r3, #6
 800c5da:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fc84 	bl	800aef0 <USBD_LL_Resume>
    break;
 800c5e8:	e010      	b.n	800c60c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fe fc67 	bl	800aec4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	7a5b      	ldrb	r3, [r3, #9]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d005      	beq.n	800c60a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5fe:	4b05      	ldr	r3, [pc, #20]	@ (800c614 <HAL_PCDEx_LPM_Callback+0x68>)
 800c600:	691b      	ldr	r3, [r3, #16]
 800c602:	4a04      	ldr	r2, [pc, #16]	@ (800c614 <HAL_PCDEx_LPM_Callback+0x68>)
 800c604:	f043 0306 	orr.w	r3, r3, #6
 800c608:	6113      	str	r3, [r2, #16]
    break;
 800c60a:	bf00      	nop
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	e000ed00 	.word	0xe000ed00

0800c618 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c620:	4b03      	ldr	r3, [pc, #12]	@ (800c630 <USBD_static_malloc+0x18>)
}
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	20000c30 	.word	0x20000c30

0800c634 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]

}
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c64c:	f7f5 f92e 	bl	80018ac <SystemClock_Config>
}
 800c650:	bf00      	nop
 800c652:	bd80      	pop	{r7, pc}

0800c654 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	4603      	mov	r3, r0
 800c65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	2b03      	cmp	r3, #3
 800c666:	d817      	bhi.n	800c698 <USBD_Get_USB_Status+0x44>
 800c668:	a201      	add	r2, pc, #4	@ (adr r2, 800c670 <USBD_Get_USB_Status+0x1c>)
 800c66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66e:	bf00      	nop
 800c670:	0800c681 	.word	0x0800c681
 800c674:	0800c687 	.word	0x0800c687
 800c678:	0800c68d 	.word	0x0800c68d
 800c67c:	0800c693 	.word	0x0800c693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c680:	2300      	movs	r3, #0
 800c682:	73fb      	strb	r3, [r7, #15]
    break;
 800c684:	e00b      	b.n	800c69e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c686:	2303      	movs	r3, #3
 800c688:	73fb      	strb	r3, [r7, #15]
    break;
 800c68a:	e008      	b.n	800c69e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c68c:	2301      	movs	r3, #1
 800c68e:	73fb      	strb	r3, [r7, #15]
    break;
 800c690:	e005      	b.n	800c69e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c692:	2303      	movs	r3, #3
 800c694:	73fb      	strb	r3, [r7, #15]
    break;
 800c696:	e002      	b.n	800c69e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c698:	2303      	movs	r3, #3
 800c69a:	73fb      	strb	r3, [r7, #15]
    break;
 800c69c:	bf00      	nop
  }
  return usb_status;
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <std>:
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	b510      	push	{r4, lr}
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	e9c0 3300 	strd	r3, r3, [r0]
 800c6b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6ba:	6083      	str	r3, [r0, #8]
 800c6bc:	8181      	strh	r1, [r0, #12]
 800c6be:	6643      	str	r3, [r0, #100]	@ 0x64
 800c6c0:	81c2      	strh	r2, [r0, #14]
 800c6c2:	6183      	str	r3, [r0, #24]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	2208      	movs	r2, #8
 800c6c8:	305c      	adds	r0, #92	@ 0x5c
 800c6ca:	f000 f9f9 	bl	800cac0 <memset>
 800c6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c704 <std+0x58>)
 800c6d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c6d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c708 <std+0x5c>)
 800c6d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c6d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c70c <std+0x60>)
 800c6d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c6da:	4b0d      	ldr	r3, [pc, #52]	@ (800c710 <std+0x64>)
 800c6dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c6de:	4b0d      	ldr	r3, [pc, #52]	@ (800c714 <std+0x68>)
 800c6e0:	6224      	str	r4, [r4, #32]
 800c6e2:	429c      	cmp	r4, r3
 800c6e4:	d006      	beq.n	800c6f4 <std+0x48>
 800c6e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c6ea:	4294      	cmp	r4, r2
 800c6ec:	d002      	beq.n	800c6f4 <std+0x48>
 800c6ee:	33d0      	adds	r3, #208	@ 0xd0
 800c6f0:	429c      	cmp	r4, r3
 800c6f2:	d105      	bne.n	800c700 <std+0x54>
 800c6f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6fc:	f000 ba58 	b.w	800cbb0 <__retarget_lock_init_recursive>
 800c700:	bd10      	pop	{r4, pc}
 800c702:	bf00      	nop
 800c704:	0800c911 	.word	0x0800c911
 800c708:	0800c933 	.word	0x0800c933
 800c70c:	0800c96b 	.word	0x0800c96b
 800c710:	0800c98f 	.word	0x0800c98f
 800c714:	20000e50 	.word	0x20000e50

0800c718 <stdio_exit_handler>:
 800c718:	4a02      	ldr	r2, [pc, #8]	@ (800c724 <stdio_exit_handler+0xc>)
 800c71a:	4903      	ldr	r1, [pc, #12]	@ (800c728 <stdio_exit_handler+0x10>)
 800c71c:	4803      	ldr	r0, [pc, #12]	@ (800c72c <stdio_exit_handler+0x14>)
 800c71e:	f000 b869 	b.w	800c7f4 <_fwalk_sglue>
 800c722:	bf00      	nop
 800c724:	2000032c 	.word	0x2000032c
 800c728:	0800d46d 	.word	0x0800d46d
 800c72c:	2000033c 	.word	0x2000033c

0800c730 <cleanup_stdio>:
 800c730:	6841      	ldr	r1, [r0, #4]
 800c732:	4b0c      	ldr	r3, [pc, #48]	@ (800c764 <cleanup_stdio+0x34>)
 800c734:	4299      	cmp	r1, r3
 800c736:	b510      	push	{r4, lr}
 800c738:	4604      	mov	r4, r0
 800c73a:	d001      	beq.n	800c740 <cleanup_stdio+0x10>
 800c73c:	f000 fe96 	bl	800d46c <_fflush_r>
 800c740:	68a1      	ldr	r1, [r4, #8]
 800c742:	4b09      	ldr	r3, [pc, #36]	@ (800c768 <cleanup_stdio+0x38>)
 800c744:	4299      	cmp	r1, r3
 800c746:	d002      	beq.n	800c74e <cleanup_stdio+0x1e>
 800c748:	4620      	mov	r0, r4
 800c74a:	f000 fe8f 	bl	800d46c <_fflush_r>
 800c74e:	68e1      	ldr	r1, [r4, #12]
 800c750:	4b06      	ldr	r3, [pc, #24]	@ (800c76c <cleanup_stdio+0x3c>)
 800c752:	4299      	cmp	r1, r3
 800c754:	d004      	beq.n	800c760 <cleanup_stdio+0x30>
 800c756:	4620      	mov	r0, r4
 800c758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c75c:	f000 be86 	b.w	800d46c <_fflush_r>
 800c760:	bd10      	pop	{r4, pc}
 800c762:	bf00      	nop
 800c764:	20000e50 	.word	0x20000e50
 800c768:	20000eb8 	.word	0x20000eb8
 800c76c:	20000f20 	.word	0x20000f20

0800c770 <global_stdio_init.part.0>:
 800c770:	b510      	push	{r4, lr}
 800c772:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a0 <global_stdio_init.part.0+0x30>)
 800c774:	4c0b      	ldr	r4, [pc, #44]	@ (800c7a4 <global_stdio_init.part.0+0x34>)
 800c776:	4a0c      	ldr	r2, [pc, #48]	@ (800c7a8 <global_stdio_init.part.0+0x38>)
 800c778:	601a      	str	r2, [r3, #0]
 800c77a:	4620      	mov	r0, r4
 800c77c:	2200      	movs	r2, #0
 800c77e:	2104      	movs	r1, #4
 800c780:	f7ff ff94 	bl	800c6ac <std>
 800c784:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c788:	2201      	movs	r2, #1
 800c78a:	2109      	movs	r1, #9
 800c78c:	f7ff ff8e 	bl	800c6ac <std>
 800c790:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c794:	2202      	movs	r2, #2
 800c796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c79a:	2112      	movs	r1, #18
 800c79c:	f7ff bf86 	b.w	800c6ac <std>
 800c7a0:	20000f88 	.word	0x20000f88
 800c7a4:	20000e50 	.word	0x20000e50
 800c7a8:	0800c719 	.word	0x0800c719

0800c7ac <__sfp_lock_acquire>:
 800c7ac:	4801      	ldr	r0, [pc, #4]	@ (800c7b4 <__sfp_lock_acquire+0x8>)
 800c7ae:	f000 ba00 	b.w	800cbb2 <__retarget_lock_acquire_recursive>
 800c7b2:	bf00      	nop
 800c7b4:	20000f91 	.word	0x20000f91

0800c7b8 <__sfp_lock_release>:
 800c7b8:	4801      	ldr	r0, [pc, #4]	@ (800c7c0 <__sfp_lock_release+0x8>)
 800c7ba:	f000 b9fb 	b.w	800cbb4 <__retarget_lock_release_recursive>
 800c7be:	bf00      	nop
 800c7c0:	20000f91 	.word	0x20000f91

0800c7c4 <__sinit>:
 800c7c4:	b510      	push	{r4, lr}
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	f7ff fff0 	bl	800c7ac <__sfp_lock_acquire>
 800c7cc:	6a23      	ldr	r3, [r4, #32]
 800c7ce:	b11b      	cbz	r3, 800c7d8 <__sinit+0x14>
 800c7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7d4:	f7ff bff0 	b.w	800c7b8 <__sfp_lock_release>
 800c7d8:	4b04      	ldr	r3, [pc, #16]	@ (800c7ec <__sinit+0x28>)
 800c7da:	6223      	str	r3, [r4, #32]
 800c7dc:	4b04      	ldr	r3, [pc, #16]	@ (800c7f0 <__sinit+0x2c>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1f5      	bne.n	800c7d0 <__sinit+0xc>
 800c7e4:	f7ff ffc4 	bl	800c770 <global_stdio_init.part.0>
 800c7e8:	e7f2      	b.n	800c7d0 <__sinit+0xc>
 800c7ea:	bf00      	nop
 800c7ec:	0800c731 	.word	0x0800c731
 800c7f0:	20000f88 	.word	0x20000f88

0800c7f4 <_fwalk_sglue>:
 800c7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f8:	4607      	mov	r7, r0
 800c7fa:	4688      	mov	r8, r1
 800c7fc:	4614      	mov	r4, r2
 800c7fe:	2600      	movs	r6, #0
 800c800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c804:	f1b9 0901 	subs.w	r9, r9, #1
 800c808:	d505      	bpl.n	800c816 <_fwalk_sglue+0x22>
 800c80a:	6824      	ldr	r4, [r4, #0]
 800c80c:	2c00      	cmp	r4, #0
 800c80e:	d1f7      	bne.n	800c800 <_fwalk_sglue+0xc>
 800c810:	4630      	mov	r0, r6
 800c812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c816:	89ab      	ldrh	r3, [r5, #12]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d907      	bls.n	800c82c <_fwalk_sglue+0x38>
 800c81c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c820:	3301      	adds	r3, #1
 800c822:	d003      	beq.n	800c82c <_fwalk_sglue+0x38>
 800c824:	4629      	mov	r1, r5
 800c826:	4638      	mov	r0, r7
 800c828:	47c0      	blx	r8
 800c82a:	4306      	orrs	r6, r0
 800c82c:	3568      	adds	r5, #104	@ 0x68
 800c82e:	e7e9      	b.n	800c804 <_fwalk_sglue+0x10>

0800c830 <iprintf>:
 800c830:	b40f      	push	{r0, r1, r2, r3}
 800c832:	b507      	push	{r0, r1, r2, lr}
 800c834:	4906      	ldr	r1, [pc, #24]	@ (800c850 <iprintf+0x20>)
 800c836:	ab04      	add	r3, sp, #16
 800c838:	6808      	ldr	r0, [r1, #0]
 800c83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c83e:	6881      	ldr	r1, [r0, #8]
 800c840:	9301      	str	r3, [sp, #4]
 800c842:	f000 fae9 	bl	800ce18 <_vfiprintf_r>
 800c846:	b003      	add	sp, #12
 800c848:	f85d eb04 	ldr.w	lr, [sp], #4
 800c84c:	b004      	add	sp, #16
 800c84e:	4770      	bx	lr
 800c850:	20000338 	.word	0x20000338

0800c854 <_puts_r>:
 800c854:	6a03      	ldr	r3, [r0, #32]
 800c856:	b570      	push	{r4, r5, r6, lr}
 800c858:	6884      	ldr	r4, [r0, #8]
 800c85a:	4605      	mov	r5, r0
 800c85c:	460e      	mov	r6, r1
 800c85e:	b90b      	cbnz	r3, 800c864 <_puts_r+0x10>
 800c860:	f7ff ffb0 	bl	800c7c4 <__sinit>
 800c864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c866:	07db      	lsls	r3, r3, #31
 800c868:	d405      	bmi.n	800c876 <_puts_r+0x22>
 800c86a:	89a3      	ldrh	r3, [r4, #12]
 800c86c:	0598      	lsls	r0, r3, #22
 800c86e:	d402      	bmi.n	800c876 <_puts_r+0x22>
 800c870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c872:	f000 f99e 	bl	800cbb2 <__retarget_lock_acquire_recursive>
 800c876:	89a3      	ldrh	r3, [r4, #12]
 800c878:	0719      	lsls	r1, r3, #28
 800c87a:	d502      	bpl.n	800c882 <_puts_r+0x2e>
 800c87c:	6923      	ldr	r3, [r4, #16]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d135      	bne.n	800c8ee <_puts_r+0x9a>
 800c882:	4621      	mov	r1, r4
 800c884:	4628      	mov	r0, r5
 800c886:	f000 f8c5 	bl	800ca14 <__swsetup_r>
 800c88a:	b380      	cbz	r0, 800c8ee <_puts_r+0x9a>
 800c88c:	f04f 35ff 	mov.w	r5, #4294967295
 800c890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c892:	07da      	lsls	r2, r3, #31
 800c894:	d405      	bmi.n	800c8a2 <_puts_r+0x4e>
 800c896:	89a3      	ldrh	r3, [r4, #12]
 800c898:	059b      	lsls	r3, r3, #22
 800c89a:	d402      	bmi.n	800c8a2 <_puts_r+0x4e>
 800c89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c89e:	f000 f989 	bl	800cbb4 <__retarget_lock_release_recursive>
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	bd70      	pop	{r4, r5, r6, pc}
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	da04      	bge.n	800c8b4 <_puts_r+0x60>
 800c8aa:	69a2      	ldr	r2, [r4, #24]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	dc17      	bgt.n	800c8e0 <_puts_r+0x8c>
 800c8b0:	290a      	cmp	r1, #10
 800c8b2:	d015      	beq.n	800c8e0 <_puts_r+0x8c>
 800c8b4:	6823      	ldr	r3, [r4, #0]
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	6022      	str	r2, [r4, #0]
 800c8ba:	7019      	strb	r1, [r3, #0]
 800c8bc:	68a3      	ldr	r3, [r4, #8]
 800c8be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	60a3      	str	r3, [r4, #8]
 800c8c6:	2900      	cmp	r1, #0
 800c8c8:	d1ed      	bne.n	800c8a6 <_puts_r+0x52>
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	da11      	bge.n	800c8f2 <_puts_r+0x9e>
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	210a      	movs	r1, #10
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f000 f85f 	bl	800c996 <__swbuf_r>
 800c8d8:	3001      	adds	r0, #1
 800c8da:	d0d7      	beq.n	800c88c <_puts_r+0x38>
 800c8dc:	250a      	movs	r5, #10
 800c8de:	e7d7      	b.n	800c890 <_puts_r+0x3c>
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f000 f857 	bl	800c996 <__swbuf_r>
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	d1e7      	bne.n	800c8bc <_puts_r+0x68>
 800c8ec:	e7ce      	b.n	800c88c <_puts_r+0x38>
 800c8ee:	3e01      	subs	r6, #1
 800c8f0:	e7e4      	b.n	800c8bc <_puts_r+0x68>
 800c8f2:	6823      	ldr	r3, [r4, #0]
 800c8f4:	1c5a      	adds	r2, r3, #1
 800c8f6:	6022      	str	r2, [r4, #0]
 800c8f8:	220a      	movs	r2, #10
 800c8fa:	701a      	strb	r2, [r3, #0]
 800c8fc:	e7ee      	b.n	800c8dc <_puts_r+0x88>
	...

0800c900 <puts>:
 800c900:	4b02      	ldr	r3, [pc, #8]	@ (800c90c <puts+0xc>)
 800c902:	4601      	mov	r1, r0
 800c904:	6818      	ldr	r0, [r3, #0]
 800c906:	f7ff bfa5 	b.w	800c854 <_puts_r>
 800c90a:	bf00      	nop
 800c90c:	20000338 	.word	0x20000338

0800c910 <__sread>:
 800c910:	b510      	push	{r4, lr}
 800c912:	460c      	mov	r4, r1
 800c914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c918:	f000 f8fc 	bl	800cb14 <_read_r>
 800c91c:	2800      	cmp	r0, #0
 800c91e:	bfab      	itete	ge
 800c920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c922:	89a3      	ldrhlt	r3, [r4, #12]
 800c924:	181b      	addge	r3, r3, r0
 800c926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c92a:	bfac      	ite	ge
 800c92c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c92e:	81a3      	strhlt	r3, [r4, #12]
 800c930:	bd10      	pop	{r4, pc}

0800c932 <__swrite>:
 800c932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c936:	461f      	mov	r7, r3
 800c938:	898b      	ldrh	r3, [r1, #12]
 800c93a:	05db      	lsls	r3, r3, #23
 800c93c:	4605      	mov	r5, r0
 800c93e:	460c      	mov	r4, r1
 800c940:	4616      	mov	r6, r2
 800c942:	d505      	bpl.n	800c950 <__swrite+0x1e>
 800c944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c948:	2302      	movs	r3, #2
 800c94a:	2200      	movs	r2, #0
 800c94c:	f000 f8d0 	bl	800caf0 <_lseek_r>
 800c950:	89a3      	ldrh	r3, [r4, #12]
 800c952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c956:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c95a:	81a3      	strh	r3, [r4, #12]
 800c95c:	4632      	mov	r2, r6
 800c95e:	463b      	mov	r3, r7
 800c960:	4628      	mov	r0, r5
 800c962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c966:	f000 b8e7 	b.w	800cb38 <_write_r>

0800c96a <__sseek>:
 800c96a:	b510      	push	{r4, lr}
 800c96c:	460c      	mov	r4, r1
 800c96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c972:	f000 f8bd 	bl	800caf0 <_lseek_r>
 800c976:	1c43      	adds	r3, r0, #1
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	bf15      	itete	ne
 800c97c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c97e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c986:	81a3      	strheq	r3, [r4, #12]
 800c988:	bf18      	it	ne
 800c98a:	81a3      	strhne	r3, [r4, #12]
 800c98c:	bd10      	pop	{r4, pc}

0800c98e <__sclose>:
 800c98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c992:	f000 b89d 	b.w	800cad0 <_close_r>

0800c996 <__swbuf_r>:
 800c996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c998:	460e      	mov	r6, r1
 800c99a:	4614      	mov	r4, r2
 800c99c:	4605      	mov	r5, r0
 800c99e:	b118      	cbz	r0, 800c9a8 <__swbuf_r+0x12>
 800c9a0:	6a03      	ldr	r3, [r0, #32]
 800c9a2:	b90b      	cbnz	r3, 800c9a8 <__swbuf_r+0x12>
 800c9a4:	f7ff ff0e 	bl	800c7c4 <__sinit>
 800c9a8:	69a3      	ldr	r3, [r4, #24]
 800c9aa:	60a3      	str	r3, [r4, #8]
 800c9ac:	89a3      	ldrh	r3, [r4, #12]
 800c9ae:	071a      	lsls	r2, r3, #28
 800c9b0:	d501      	bpl.n	800c9b6 <__swbuf_r+0x20>
 800c9b2:	6923      	ldr	r3, [r4, #16]
 800c9b4:	b943      	cbnz	r3, 800c9c8 <__swbuf_r+0x32>
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f000 f82b 	bl	800ca14 <__swsetup_r>
 800c9be:	b118      	cbz	r0, 800c9c8 <__swbuf_r+0x32>
 800c9c0:	f04f 37ff 	mov.w	r7, #4294967295
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9c8:	6823      	ldr	r3, [r4, #0]
 800c9ca:	6922      	ldr	r2, [r4, #16]
 800c9cc:	1a98      	subs	r0, r3, r2
 800c9ce:	6963      	ldr	r3, [r4, #20]
 800c9d0:	b2f6      	uxtb	r6, r6
 800c9d2:	4283      	cmp	r3, r0
 800c9d4:	4637      	mov	r7, r6
 800c9d6:	dc05      	bgt.n	800c9e4 <__swbuf_r+0x4e>
 800c9d8:	4621      	mov	r1, r4
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f000 fd46 	bl	800d46c <_fflush_r>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d1ed      	bne.n	800c9c0 <__swbuf_r+0x2a>
 800c9e4:	68a3      	ldr	r3, [r4, #8]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	60a3      	str	r3, [r4, #8]
 800c9ea:	6823      	ldr	r3, [r4, #0]
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	6022      	str	r2, [r4, #0]
 800c9f0:	701e      	strb	r6, [r3, #0]
 800c9f2:	6962      	ldr	r2, [r4, #20]
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d004      	beq.n	800ca04 <__swbuf_r+0x6e>
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	07db      	lsls	r3, r3, #31
 800c9fe:	d5e1      	bpl.n	800c9c4 <__swbuf_r+0x2e>
 800ca00:	2e0a      	cmp	r6, #10
 800ca02:	d1df      	bne.n	800c9c4 <__swbuf_r+0x2e>
 800ca04:	4621      	mov	r1, r4
 800ca06:	4628      	mov	r0, r5
 800ca08:	f000 fd30 	bl	800d46c <_fflush_r>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d0d9      	beq.n	800c9c4 <__swbuf_r+0x2e>
 800ca10:	e7d6      	b.n	800c9c0 <__swbuf_r+0x2a>
	...

0800ca14 <__swsetup_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4b29      	ldr	r3, [pc, #164]	@ (800cabc <__swsetup_r+0xa8>)
 800ca18:	4605      	mov	r5, r0
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	b118      	cbz	r0, 800ca28 <__swsetup_r+0x14>
 800ca20:	6a03      	ldr	r3, [r0, #32]
 800ca22:	b90b      	cbnz	r3, 800ca28 <__swsetup_r+0x14>
 800ca24:	f7ff fece 	bl	800c7c4 <__sinit>
 800ca28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca2c:	0719      	lsls	r1, r3, #28
 800ca2e:	d422      	bmi.n	800ca76 <__swsetup_r+0x62>
 800ca30:	06da      	lsls	r2, r3, #27
 800ca32:	d407      	bmi.n	800ca44 <__swsetup_r+0x30>
 800ca34:	2209      	movs	r2, #9
 800ca36:	602a      	str	r2, [r5, #0]
 800ca38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca3c:	81a3      	strh	r3, [r4, #12]
 800ca3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca42:	e033      	b.n	800caac <__swsetup_r+0x98>
 800ca44:	0758      	lsls	r0, r3, #29
 800ca46:	d512      	bpl.n	800ca6e <__swsetup_r+0x5a>
 800ca48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca4a:	b141      	cbz	r1, 800ca5e <__swsetup_r+0x4a>
 800ca4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca50:	4299      	cmp	r1, r3
 800ca52:	d002      	beq.n	800ca5a <__swsetup_r+0x46>
 800ca54:	4628      	mov	r0, r5
 800ca56:	f000 f8bd 	bl	800cbd4 <_free_r>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca5e:	89a3      	ldrh	r3, [r4, #12]
 800ca60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca64:	81a3      	strh	r3, [r4, #12]
 800ca66:	2300      	movs	r3, #0
 800ca68:	6063      	str	r3, [r4, #4]
 800ca6a:	6923      	ldr	r3, [r4, #16]
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	f043 0308 	orr.w	r3, r3, #8
 800ca74:	81a3      	strh	r3, [r4, #12]
 800ca76:	6923      	ldr	r3, [r4, #16]
 800ca78:	b94b      	cbnz	r3, 800ca8e <__swsetup_r+0x7a>
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca84:	d003      	beq.n	800ca8e <__swsetup_r+0x7a>
 800ca86:	4621      	mov	r1, r4
 800ca88:	4628      	mov	r0, r5
 800ca8a:	f000 fd3d 	bl	800d508 <__smakebuf_r>
 800ca8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca92:	f013 0201 	ands.w	r2, r3, #1
 800ca96:	d00a      	beq.n	800caae <__swsetup_r+0x9a>
 800ca98:	2200      	movs	r2, #0
 800ca9a:	60a2      	str	r2, [r4, #8]
 800ca9c:	6962      	ldr	r2, [r4, #20]
 800ca9e:	4252      	negs	r2, r2
 800caa0:	61a2      	str	r2, [r4, #24]
 800caa2:	6922      	ldr	r2, [r4, #16]
 800caa4:	b942      	cbnz	r2, 800cab8 <__swsetup_r+0xa4>
 800caa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800caaa:	d1c5      	bne.n	800ca38 <__swsetup_r+0x24>
 800caac:	bd38      	pop	{r3, r4, r5, pc}
 800caae:	0799      	lsls	r1, r3, #30
 800cab0:	bf58      	it	pl
 800cab2:	6962      	ldrpl	r2, [r4, #20]
 800cab4:	60a2      	str	r2, [r4, #8]
 800cab6:	e7f4      	b.n	800caa2 <__swsetup_r+0x8e>
 800cab8:	2000      	movs	r0, #0
 800caba:	e7f7      	b.n	800caac <__swsetup_r+0x98>
 800cabc:	20000338 	.word	0x20000338

0800cac0 <memset>:
 800cac0:	4402      	add	r2, r0
 800cac2:	4603      	mov	r3, r0
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d100      	bne.n	800caca <memset+0xa>
 800cac8:	4770      	bx	lr
 800caca:	f803 1b01 	strb.w	r1, [r3], #1
 800cace:	e7f9      	b.n	800cac4 <memset+0x4>

0800cad0 <_close_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	4d06      	ldr	r5, [pc, #24]	@ (800caec <_close_r+0x1c>)
 800cad4:	2300      	movs	r3, #0
 800cad6:	4604      	mov	r4, r0
 800cad8:	4608      	mov	r0, r1
 800cada:	602b      	str	r3, [r5, #0]
 800cadc:	f7f5 f9fd 	bl	8001eda <_close>
 800cae0:	1c43      	adds	r3, r0, #1
 800cae2:	d102      	bne.n	800caea <_close_r+0x1a>
 800cae4:	682b      	ldr	r3, [r5, #0]
 800cae6:	b103      	cbz	r3, 800caea <_close_r+0x1a>
 800cae8:	6023      	str	r3, [r4, #0]
 800caea:	bd38      	pop	{r3, r4, r5, pc}
 800caec:	20000f8c 	.word	0x20000f8c

0800caf0 <_lseek_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	4d07      	ldr	r5, [pc, #28]	@ (800cb10 <_lseek_r+0x20>)
 800caf4:	4604      	mov	r4, r0
 800caf6:	4608      	mov	r0, r1
 800caf8:	4611      	mov	r1, r2
 800cafa:	2200      	movs	r2, #0
 800cafc:	602a      	str	r2, [r5, #0]
 800cafe:	461a      	mov	r2, r3
 800cb00:	f7f5 fa12 	bl	8001f28 <_lseek>
 800cb04:	1c43      	adds	r3, r0, #1
 800cb06:	d102      	bne.n	800cb0e <_lseek_r+0x1e>
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	b103      	cbz	r3, 800cb0e <_lseek_r+0x1e>
 800cb0c:	6023      	str	r3, [r4, #0]
 800cb0e:	bd38      	pop	{r3, r4, r5, pc}
 800cb10:	20000f8c 	.word	0x20000f8c

0800cb14 <_read_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4d07      	ldr	r5, [pc, #28]	@ (800cb34 <_read_r+0x20>)
 800cb18:	4604      	mov	r4, r0
 800cb1a:	4608      	mov	r0, r1
 800cb1c:	4611      	mov	r1, r2
 800cb1e:	2200      	movs	r2, #0
 800cb20:	602a      	str	r2, [r5, #0]
 800cb22:	461a      	mov	r2, r3
 800cb24:	f7f5 f9bc 	bl	8001ea0 <_read>
 800cb28:	1c43      	adds	r3, r0, #1
 800cb2a:	d102      	bne.n	800cb32 <_read_r+0x1e>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b103      	cbz	r3, 800cb32 <_read_r+0x1e>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd38      	pop	{r3, r4, r5, pc}
 800cb34:	20000f8c 	.word	0x20000f8c

0800cb38 <_write_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	4d07      	ldr	r5, [pc, #28]	@ (800cb58 <_write_r+0x20>)
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	4608      	mov	r0, r1
 800cb40:	4611      	mov	r1, r2
 800cb42:	2200      	movs	r2, #0
 800cb44:	602a      	str	r2, [r5, #0]
 800cb46:	461a      	mov	r2, r3
 800cb48:	f7f5 fbc0 	bl	80022cc <_write>
 800cb4c:	1c43      	adds	r3, r0, #1
 800cb4e:	d102      	bne.n	800cb56 <_write_r+0x1e>
 800cb50:	682b      	ldr	r3, [r5, #0]
 800cb52:	b103      	cbz	r3, 800cb56 <_write_r+0x1e>
 800cb54:	6023      	str	r3, [r4, #0]
 800cb56:	bd38      	pop	{r3, r4, r5, pc}
 800cb58:	20000f8c 	.word	0x20000f8c

0800cb5c <__errno>:
 800cb5c:	4b01      	ldr	r3, [pc, #4]	@ (800cb64 <__errno+0x8>)
 800cb5e:	6818      	ldr	r0, [r3, #0]
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	20000338 	.word	0x20000338

0800cb68 <__libc_init_array>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	4d0d      	ldr	r5, [pc, #52]	@ (800cba0 <__libc_init_array+0x38>)
 800cb6c:	4c0d      	ldr	r4, [pc, #52]	@ (800cba4 <__libc_init_array+0x3c>)
 800cb6e:	1b64      	subs	r4, r4, r5
 800cb70:	10a4      	asrs	r4, r4, #2
 800cb72:	2600      	movs	r6, #0
 800cb74:	42a6      	cmp	r6, r4
 800cb76:	d109      	bne.n	800cb8c <__libc_init_array+0x24>
 800cb78:	4d0b      	ldr	r5, [pc, #44]	@ (800cba8 <__libc_init_array+0x40>)
 800cb7a:	4c0c      	ldr	r4, [pc, #48]	@ (800cbac <__libc_init_array+0x44>)
 800cb7c:	f000 fd32 	bl	800d5e4 <_init>
 800cb80:	1b64      	subs	r4, r4, r5
 800cb82:	10a4      	asrs	r4, r4, #2
 800cb84:	2600      	movs	r6, #0
 800cb86:	42a6      	cmp	r6, r4
 800cb88:	d105      	bne.n	800cb96 <__libc_init_array+0x2e>
 800cb8a:	bd70      	pop	{r4, r5, r6, pc}
 800cb8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb90:	4798      	blx	r3
 800cb92:	3601      	adds	r6, #1
 800cb94:	e7ee      	b.n	800cb74 <__libc_init_array+0xc>
 800cb96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb9a:	4798      	blx	r3
 800cb9c:	3601      	adds	r6, #1
 800cb9e:	e7f2      	b.n	800cb86 <__libc_init_array+0x1e>
 800cba0:	0800d924 	.word	0x0800d924
 800cba4:	0800d924 	.word	0x0800d924
 800cba8:	0800d924 	.word	0x0800d924
 800cbac:	0800d928 	.word	0x0800d928

0800cbb0 <__retarget_lock_init_recursive>:
 800cbb0:	4770      	bx	lr

0800cbb2 <__retarget_lock_acquire_recursive>:
 800cbb2:	4770      	bx	lr

0800cbb4 <__retarget_lock_release_recursive>:
 800cbb4:	4770      	bx	lr

0800cbb6 <memcpy>:
 800cbb6:	440a      	add	r2, r1
 800cbb8:	4291      	cmp	r1, r2
 800cbba:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbbe:	d100      	bne.n	800cbc2 <memcpy+0xc>
 800cbc0:	4770      	bx	lr
 800cbc2:	b510      	push	{r4, lr}
 800cbc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbcc:	4291      	cmp	r1, r2
 800cbce:	d1f9      	bne.n	800cbc4 <memcpy+0xe>
 800cbd0:	bd10      	pop	{r4, pc}
	...

0800cbd4 <_free_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4605      	mov	r5, r0
 800cbd8:	2900      	cmp	r1, #0
 800cbda:	d041      	beq.n	800cc60 <_free_r+0x8c>
 800cbdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbe0:	1f0c      	subs	r4, r1, #4
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	bfb8      	it	lt
 800cbe6:	18e4      	addlt	r4, r4, r3
 800cbe8:	f000 f8e0 	bl	800cdac <__malloc_lock>
 800cbec:	4a1d      	ldr	r2, [pc, #116]	@ (800cc64 <_free_r+0x90>)
 800cbee:	6813      	ldr	r3, [r2, #0]
 800cbf0:	b933      	cbnz	r3, 800cc00 <_free_r+0x2c>
 800cbf2:	6063      	str	r3, [r4, #4]
 800cbf4:	6014      	str	r4, [r2, #0]
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbfc:	f000 b8dc 	b.w	800cdb8 <__malloc_unlock>
 800cc00:	42a3      	cmp	r3, r4
 800cc02:	d908      	bls.n	800cc16 <_free_r+0x42>
 800cc04:	6820      	ldr	r0, [r4, #0]
 800cc06:	1821      	adds	r1, r4, r0
 800cc08:	428b      	cmp	r3, r1
 800cc0a:	bf01      	itttt	eq
 800cc0c:	6819      	ldreq	r1, [r3, #0]
 800cc0e:	685b      	ldreq	r3, [r3, #4]
 800cc10:	1809      	addeq	r1, r1, r0
 800cc12:	6021      	streq	r1, [r4, #0]
 800cc14:	e7ed      	b.n	800cbf2 <_free_r+0x1e>
 800cc16:	461a      	mov	r2, r3
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	b10b      	cbz	r3, 800cc20 <_free_r+0x4c>
 800cc1c:	42a3      	cmp	r3, r4
 800cc1e:	d9fa      	bls.n	800cc16 <_free_r+0x42>
 800cc20:	6811      	ldr	r1, [r2, #0]
 800cc22:	1850      	adds	r0, r2, r1
 800cc24:	42a0      	cmp	r0, r4
 800cc26:	d10b      	bne.n	800cc40 <_free_r+0x6c>
 800cc28:	6820      	ldr	r0, [r4, #0]
 800cc2a:	4401      	add	r1, r0
 800cc2c:	1850      	adds	r0, r2, r1
 800cc2e:	4283      	cmp	r3, r0
 800cc30:	6011      	str	r1, [r2, #0]
 800cc32:	d1e0      	bne.n	800cbf6 <_free_r+0x22>
 800cc34:	6818      	ldr	r0, [r3, #0]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	6053      	str	r3, [r2, #4]
 800cc3a:	4408      	add	r0, r1
 800cc3c:	6010      	str	r0, [r2, #0]
 800cc3e:	e7da      	b.n	800cbf6 <_free_r+0x22>
 800cc40:	d902      	bls.n	800cc48 <_free_r+0x74>
 800cc42:	230c      	movs	r3, #12
 800cc44:	602b      	str	r3, [r5, #0]
 800cc46:	e7d6      	b.n	800cbf6 <_free_r+0x22>
 800cc48:	6820      	ldr	r0, [r4, #0]
 800cc4a:	1821      	adds	r1, r4, r0
 800cc4c:	428b      	cmp	r3, r1
 800cc4e:	bf04      	itt	eq
 800cc50:	6819      	ldreq	r1, [r3, #0]
 800cc52:	685b      	ldreq	r3, [r3, #4]
 800cc54:	6063      	str	r3, [r4, #4]
 800cc56:	bf04      	itt	eq
 800cc58:	1809      	addeq	r1, r1, r0
 800cc5a:	6021      	streq	r1, [r4, #0]
 800cc5c:	6054      	str	r4, [r2, #4]
 800cc5e:	e7ca      	b.n	800cbf6 <_free_r+0x22>
 800cc60:	bd38      	pop	{r3, r4, r5, pc}
 800cc62:	bf00      	nop
 800cc64:	20000f98 	.word	0x20000f98

0800cc68 <sbrk_aligned>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	4e0f      	ldr	r6, [pc, #60]	@ (800cca8 <sbrk_aligned+0x40>)
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	6831      	ldr	r1, [r6, #0]
 800cc70:	4605      	mov	r5, r0
 800cc72:	b911      	cbnz	r1, 800cc7a <sbrk_aligned+0x12>
 800cc74:	f000 fca6 	bl	800d5c4 <_sbrk_r>
 800cc78:	6030      	str	r0, [r6, #0]
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f000 fca1 	bl	800d5c4 <_sbrk_r>
 800cc82:	1c43      	adds	r3, r0, #1
 800cc84:	d103      	bne.n	800cc8e <sbrk_aligned+0x26>
 800cc86:	f04f 34ff 	mov.w	r4, #4294967295
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	bd70      	pop	{r4, r5, r6, pc}
 800cc8e:	1cc4      	adds	r4, r0, #3
 800cc90:	f024 0403 	bic.w	r4, r4, #3
 800cc94:	42a0      	cmp	r0, r4
 800cc96:	d0f8      	beq.n	800cc8a <sbrk_aligned+0x22>
 800cc98:	1a21      	subs	r1, r4, r0
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	f000 fc92 	bl	800d5c4 <_sbrk_r>
 800cca0:	3001      	adds	r0, #1
 800cca2:	d1f2      	bne.n	800cc8a <sbrk_aligned+0x22>
 800cca4:	e7ef      	b.n	800cc86 <sbrk_aligned+0x1e>
 800cca6:	bf00      	nop
 800cca8:	20000f94 	.word	0x20000f94

0800ccac <_malloc_r>:
 800ccac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb0:	1ccd      	adds	r5, r1, #3
 800ccb2:	f025 0503 	bic.w	r5, r5, #3
 800ccb6:	3508      	adds	r5, #8
 800ccb8:	2d0c      	cmp	r5, #12
 800ccba:	bf38      	it	cc
 800ccbc:	250c      	movcc	r5, #12
 800ccbe:	2d00      	cmp	r5, #0
 800ccc0:	4606      	mov	r6, r0
 800ccc2:	db01      	blt.n	800ccc8 <_malloc_r+0x1c>
 800ccc4:	42a9      	cmp	r1, r5
 800ccc6:	d904      	bls.n	800ccd2 <_malloc_r+0x26>
 800ccc8:	230c      	movs	r3, #12
 800ccca:	6033      	str	r3, [r6, #0]
 800cccc:	2000      	movs	r0, #0
 800ccce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cda8 <_malloc_r+0xfc>
 800ccd6:	f000 f869 	bl	800cdac <__malloc_lock>
 800ccda:	f8d8 3000 	ldr.w	r3, [r8]
 800ccde:	461c      	mov	r4, r3
 800cce0:	bb44      	cbnz	r4, 800cd34 <_malloc_r+0x88>
 800cce2:	4629      	mov	r1, r5
 800cce4:	4630      	mov	r0, r6
 800cce6:	f7ff ffbf 	bl	800cc68 <sbrk_aligned>
 800ccea:	1c43      	adds	r3, r0, #1
 800ccec:	4604      	mov	r4, r0
 800ccee:	d158      	bne.n	800cda2 <_malloc_r+0xf6>
 800ccf0:	f8d8 4000 	ldr.w	r4, [r8]
 800ccf4:	4627      	mov	r7, r4
 800ccf6:	2f00      	cmp	r7, #0
 800ccf8:	d143      	bne.n	800cd82 <_malloc_r+0xd6>
 800ccfa:	2c00      	cmp	r4, #0
 800ccfc:	d04b      	beq.n	800cd96 <_malloc_r+0xea>
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	4639      	mov	r1, r7
 800cd02:	4630      	mov	r0, r6
 800cd04:	eb04 0903 	add.w	r9, r4, r3
 800cd08:	f000 fc5c 	bl	800d5c4 <_sbrk_r>
 800cd0c:	4581      	cmp	r9, r0
 800cd0e:	d142      	bne.n	800cd96 <_malloc_r+0xea>
 800cd10:	6821      	ldr	r1, [r4, #0]
 800cd12:	1a6d      	subs	r5, r5, r1
 800cd14:	4629      	mov	r1, r5
 800cd16:	4630      	mov	r0, r6
 800cd18:	f7ff ffa6 	bl	800cc68 <sbrk_aligned>
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d03a      	beq.n	800cd96 <_malloc_r+0xea>
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	442b      	add	r3, r5
 800cd24:	6023      	str	r3, [r4, #0]
 800cd26:	f8d8 3000 	ldr.w	r3, [r8]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	bb62      	cbnz	r2, 800cd88 <_malloc_r+0xdc>
 800cd2e:	f8c8 7000 	str.w	r7, [r8]
 800cd32:	e00f      	b.n	800cd54 <_malloc_r+0xa8>
 800cd34:	6822      	ldr	r2, [r4, #0]
 800cd36:	1b52      	subs	r2, r2, r5
 800cd38:	d420      	bmi.n	800cd7c <_malloc_r+0xd0>
 800cd3a:	2a0b      	cmp	r2, #11
 800cd3c:	d917      	bls.n	800cd6e <_malloc_r+0xc2>
 800cd3e:	1961      	adds	r1, r4, r5
 800cd40:	42a3      	cmp	r3, r4
 800cd42:	6025      	str	r5, [r4, #0]
 800cd44:	bf18      	it	ne
 800cd46:	6059      	strne	r1, [r3, #4]
 800cd48:	6863      	ldr	r3, [r4, #4]
 800cd4a:	bf08      	it	eq
 800cd4c:	f8c8 1000 	streq.w	r1, [r8]
 800cd50:	5162      	str	r2, [r4, r5]
 800cd52:	604b      	str	r3, [r1, #4]
 800cd54:	4630      	mov	r0, r6
 800cd56:	f000 f82f 	bl	800cdb8 <__malloc_unlock>
 800cd5a:	f104 000b 	add.w	r0, r4, #11
 800cd5e:	1d23      	adds	r3, r4, #4
 800cd60:	f020 0007 	bic.w	r0, r0, #7
 800cd64:	1ac2      	subs	r2, r0, r3
 800cd66:	bf1c      	itt	ne
 800cd68:	1a1b      	subne	r3, r3, r0
 800cd6a:	50a3      	strne	r3, [r4, r2]
 800cd6c:	e7af      	b.n	800ccce <_malloc_r+0x22>
 800cd6e:	6862      	ldr	r2, [r4, #4]
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	bf0c      	ite	eq
 800cd74:	f8c8 2000 	streq.w	r2, [r8]
 800cd78:	605a      	strne	r2, [r3, #4]
 800cd7a:	e7eb      	b.n	800cd54 <_malloc_r+0xa8>
 800cd7c:	4623      	mov	r3, r4
 800cd7e:	6864      	ldr	r4, [r4, #4]
 800cd80:	e7ae      	b.n	800cce0 <_malloc_r+0x34>
 800cd82:	463c      	mov	r4, r7
 800cd84:	687f      	ldr	r7, [r7, #4]
 800cd86:	e7b6      	b.n	800ccf6 <_malloc_r+0x4a>
 800cd88:	461a      	mov	r2, r3
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	42a3      	cmp	r3, r4
 800cd8e:	d1fb      	bne.n	800cd88 <_malloc_r+0xdc>
 800cd90:	2300      	movs	r3, #0
 800cd92:	6053      	str	r3, [r2, #4]
 800cd94:	e7de      	b.n	800cd54 <_malloc_r+0xa8>
 800cd96:	230c      	movs	r3, #12
 800cd98:	6033      	str	r3, [r6, #0]
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f000 f80c 	bl	800cdb8 <__malloc_unlock>
 800cda0:	e794      	b.n	800cccc <_malloc_r+0x20>
 800cda2:	6005      	str	r5, [r0, #0]
 800cda4:	e7d6      	b.n	800cd54 <_malloc_r+0xa8>
 800cda6:	bf00      	nop
 800cda8:	20000f98 	.word	0x20000f98

0800cdac <__malloc_lock>:
 800cdac:	4801      	ldr	r0, [pc, #4]	@ (800cdb4 <__malloc_lock+0x8>)
 800cdae:	f7ff bf00 	b.w	800cbb2 <__retarget_lock_acquire_recursive>
 800cdb2:	bf00      	nop
 800cdb4:	20000f90 	.word	0x20000f90

0800cdb8 <__malloc_unlock>:
 800cdb8:	4801      	ldr	r0, [pc, #4]	@ (800cdc0 <__malloc_unlock+0x8>)
 800cdba:	f7ff befb 	b.w	800cbb4 <__retarget_lock_release_recursive>
 800cdbe:	bf00      	nop
 800cdc0:	20000f90 	.word	0x20000f90

0800cdc4 <__sfputc_r>:
 800cdc4:	6893      	ldr	r3, [r2, #8]
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	b410      	push	{r4}
 800cdcc:	6093      	str	r3, [r2, #8]
 800cdce:	da08      	bge.n	800cde2 <__sfputc_r+0x1e>
 800cdd0:	6994      	ldr	r4, [r2, #24]
 800cdd2:	42a3      	cmp	r3, r4
 800cdd4:	db01      	blt.n	800cdda <__sfputc_r+0x16>
 800cdd6:	290a      	cmp	r1, #10
 800cdd8:	d103      	bne.n	800cde2 <__sfputc_r+0x1e>
 800cdda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdde:	f7ff bdda 	b.w	800c996 <__swbuf_r>
 800cde2:	6813      	ldr	r3, [r2, #0]
 800cde4:	1c58      	adds	r0, r3, #1
 800cde6:	6010      	str	r0, [r2, #0]
 800cde8:	7019      	strb	r1, [r3, #0]
 800cdea:	4608      	mov	r0, r1
 800cdec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <__sfputs_r>:
 800cdf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	460f      	mov	r7, r1
 800cdf8:	4614      	mov	r4, r2
 800cdfa:	18d5      	adds	r5, r2, r3
 800cdfc:	42ac      	cmp	r4, r5
 800cdfe:	d101      	bne.n	800ce04 <__sfputs_r+0x12>
 800ce00:	2000      	movs	r0, #0
 800ce02:	e007      	b.n	800ce14 <__sfputs_r+0x22>
 800ce04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce08:	463a      	mov	r2, r7
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	f7ff ffda 	bl	800cdc4 <__sfputc_r>
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	d1f3      	bne.n	800cdfc <__sfputs_r+0xa>
 800ce14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce18 <_vfiprintf_r>:
 800ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1c:	460d      	mov	r5, r1
 800ce1e:	b09d      	sub	sp, #116	@ 0x74
 800ce20:	4614      	mov	r4, r2
 800ce22:	4698      	mov	r8, r3
 800ce24:	4606      	mov	r6, r0
 800ce26:	b118      	cbz	r0, 800ce30 <_vfiprintf_r+0x18>
 800ce28:	6a03      	ldr	r3, [r0, #32]
 800ce2a:	b90b      	cbnz	r3, 800ce30 <_vfiprintf_r+0x18>
 800ce2c:	f7ff fcca 	bl	800c7c4 <__sinit>
 800ce30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce32:	07d9      	lsls	r1, r3, #31
 800ce34:	d405      	bmi.n	800ce42 <_vfiprintf_r+0x2a>
 800ce36:	89ab      	ldrh	r3, [r5, #12]
 800ce38:	059a      	lsls	r2, r3, #22
 800ce3a:	d402      	bmi.n	800ce42 <_vfiprintf_r+0x2a>
 800ce3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce3e:	f7ff feb8 	bl	800cbb2 <__retarget_lock_acquire_recursive>
 800ce42:	89ab      	ldrh	r3, [r5, #12]
 800ce44:	071b      	lsls	r3, r3, #28
 800ce46:	d501      	bpl.n	800ce4c <_vfiprintf_r+0x34>
 800ce48:	692b      	ldr	r3, [r5, #16]
 800ce4a:	b99b      	cbnz	r3, 800ce74 <_vfiprintf_r+0x5c>
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	4630      	mov	r0, r6
 800ce50:	f7ff fde0 	bl	800ca14 <__swsetup_r>
 800ce54:	b170      	cbz	r0, 800ce74 <_vfiprintf_r+0x5c>
 800ce56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce58:	07dc      	lsls	r4, r3, #31
 800ce5a:	d504      	bpl.n	800ce66 <_vfiprintf_r+0x4e>
 800ce5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce60:	b01d      	add	sp, #116	@ 0x74
 800ce62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce66:	89ab      	ldrh	r3, [r5, #12]
 800ce68:	0598      	lsls	r0, r3, #22
 800ce6a:	d4f7      	bmi.n	800ce5c <_vfiprintf_r+0x44>
 800ce6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce6e:	f7ff fea1 	bl	800cbb4 <__retarget_lock_release_recursive>
 800ce72:	e7f3      	b.n	800ce5c <_vfiprintf_r+0x44>
 800ce74:	2300      	movs	r3, #0
 800ce76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce78:	2320      	movs	r3, #32
 800ce7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce82:	2330      	movs	r3, #48	@ 0x30
 800ce84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d034 <_vfiprintf_r+0x21c>
 800ce88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce8c:	f04f 0901 	mov.w	r9, #1
 800ce90:	4623      	mov	r3, r4
 800ce92:	469a      	mov	sl, r3
 800ce94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce98:	b10a      	cbz	r2, 800ce9e <_vfiprintf_r+0x86>
 800ce9a:	2a25      	cmp	r2, #37	@ 0x25
 800ce9c:	d1f9      	bne.n	800ce92 <_vfiprintf_r+0x7a>
 800ce9e:	ebba 0b04 	subs.w	fp, sl, r4
 800cea2:	d00b      	beq.n	800cebc <_vfiprintf_r+0xa4>
 800cea4:	465b      	mov	r3, fp
 800cea6:	4622      	mov	r2, r4
 800cea8:	4629      	mov	r1, r5
 800ceaa:	4630      	mov	r0, r6
 800ceac:	f7ff ffa1 	bl	800cdf2 <__sfputs_r>
 800ceb0:	3001      	adds	r0, #1
 800ceb2:	f000 80a7 	beq.w	800d004 <_vfiprintf_r+0x1ec>
 800ceb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceb8:	445a      	add	r2, fp
 800ceba:	9209      	str	r2, [sp, #36]	@ 0x24
 800cebc:	f89a 3000 	ldrb.w	r3, [sl]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f000 809f 	beq.w	800d004 <_vfiprintf_r+0x1ec>
 800cec6:	2300      	movs	r3, #0
 800cec8:	f04f 32ff 	mov.w	r2, #4294967295
 800cecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ced0:	f10a 0a01 	add.w	sl, sl, #1
 800ced4:	9304      	str	r3, [sp, #16]
 800ced6:	9307      	str	r3, [sp, #28]
 800ced8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cedc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cede:	4654      	mov	r4, sl
 800cee0:	2205      	movs	r2, #5
 800cee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee6:	4853      	ldr	r0, [pc, #332]	@ (800d034 <_vfiprintf_r+0x21c>)
 800cee8:	f7f3 f99a 	bl	8000220 <memchr>
 800ceec:	9a04      	ldr	r2, [sp, #16]
 800ceee:	b9d8      	cbnz	r0, 800cf28 <_vfiprintf_r+0x110>
 800cef0:	06d1      	lsls	r1, r2, #27
 800cef2:	bf44      	itt	mi
 800cef4:	2320      	movmi	r3, #32
 800cef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cefa:	0713      	lsls	r3, r2, #28
 800cefc:	bf44      	itt	mi
 800cefe:	232b      	movmi	r3, #43	@ 0x2b
 800cf00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf04:	f89a 3000 	ldrb.w	r3, [sl]
 800cf08:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf0a:	d015      	beq.n	800cf38 <_vfiprintf_r+0x120>
 800cf0c:	9a07      	ldr	r2, [sp, #28]
 800cf0e:	4654      	mov	r4, sl
 800cf10:	2000      	movs	r0, #0
 800cf12:	f04f 0c0a 	mov.w	ip, #10
 800cf16:	4621      	mov	r1, r4
 800cf18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf1c:	3b30      	subs	r3, #48	@ 0x30
 800cf1e:	2b09      	cmp	r3, #9
 800cf20:	d94b      	bls.n	800cfba <_vfiprintf_r+0x1a2>
 800cf22:	b1b0      	cbz	r0, 800cf52 <_vfiprintf_r+0x13a>
 800cf24:	9207      	str	r2, [sp, #28]
 800cf26:	e014      	b.n	800cf52 <_vfiprintf_r+0x13a>
 800cf28:	eba0 0308 	sub.w	r3, r0, r8
 800cf2c:	fa09 f303 	lsl.w	r3, r9, r3
 800cf30:	4313      	orrs	r3, r2
 800cf32:	9304      	str	r3, [sp, #16]
 800cf34:	46a2      	mov	sl, r4
 800cf36:	e7d2      	b.n	800cede <_vfiprintf_r+0xc6>
 800cf38:	9b03      	ldr	r3, [sp, #12]
 800cf3a:	1d19      	adds	r1, r3, #4
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	9103      	str	r1, [sp, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	bfbb      	ittet	lt
 800cf44:	425b      	neglt	r3, r3
 800cf46:	f042 0202 	orrlt.w	r2, r2, #2
 800cf4a:	9307      	strge	r3, [sp, #28]
 800cf4c:	9307      	strlt	r3, [sp, #28]
 800cf4e:	bfb8      	it	lt
 800cf50:	9204      	strlt	r2, [sp, #16]
 800cf52:	7823      	ldrb	r3, [r4, #0]
 800cf54:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf56:	d10a      	bne.n	800cf6e <_vfiprintf_r+0x156>
 800cf58:	7863      	ldrb	r3, [r4, #1]
 800cf5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf5c:	d132      	bne.n	800cfc4 <_vfiprintf_r+0x1ac>
 800cf5e:	9b03      	ldr	r3, [sp, #12]
 800cf60:	1d1a      	adds	r2, r3, #4
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	9203      	str	r2, [sp, #12]
 800cf66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf6a:	3402      	adds	r4, #2
 800cf6c:	9305      	str	r3, [sp, #20]
 800cf6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d044 <_vfiprintf_r+0x22c>
 800cf72:	7821      	ldrb	r1, [r4, #0]
 800cf74:	2203      	movs	r2, #3
 800cf76:	4650      	mov	r0, sl
 800cf78:	f7f3 f952 	bl	8000220 <memchr>
 800cf7c:	b138      	cbz	r0, 800cf8e <_vfiprintf_r+0x176>
 800cf7e:	9b04      	ldr	r3, [sp, #16]
 800cf80:	eba0 000a 	sub.w	r0, r0, sl
 800cf84:	2240      	movs	r2, #64	@ 0x40
 800cf86:	4082      	lsls	r2, r0
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	3401      	adds	r4, #1
 800cf8c:	9304      	str	r3, [sp, #16]
 800cf8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf92:	4829      	ldr	r0, [pc, #164]	@ (800d038 <_vfiprintf_r+0x220>)
 800cf94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf98:	2206      	movs	r2, #6
 800cf9a:	f7f3 f941 	bl	8000220 <memchr>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d03f      	beq.n	800d022 <_vfiprintf_r+0x20a>
 800cfa2:	4b26      	ldr	r3, [pc, #152]	@ (800d03c <_vfiprintf_r+0x224>)
 800cfa4:	bb1b      	cbnz	r3, 800cfee <_vfiprintf_r+0x1d6>
 800cfa6:	9b03      	ldr	r3, [sp, #12]
 800cfa8:	3307      	adds	r3, #7
 800cfaa:	f023 0307 	bic.w	r3, r3, #7
 800cfae:	3308      	adds	r3, #8
 800cfb0:	9303      	str	r3, [sp, #12]
 800cfb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb4:	443b      	add	r3, r7
 800cfb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfb8:	e76a      	b.n	800ce90 <_vfiprintf_r+0x78>
 800cfba:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfbe:	460c      	mov	r4, r1
 800cfc0:	2001      	movs	r0, #1
 800cfc2:	e7a8      	b.n	800cf16 <_vfiprintf_r+0xfe>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	3401      	adds	r4, #1
 800cfc8:	9305      	str	r3, [sp, #20]
 800cfca:	4619      	mov	r1, r3
 800cfcc:	f04f 0c0a 	mov.w	ip, #10
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfd6:	3a30      	subs	r2, #48	@ 0x30
 800cfd8:	2a09      	cmp	r2, #9
 800cfda:	d903      	bls.n	800cfe4 <_vfiprintf_r+0x1cc>
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d0c6      	beq.n	800cf6e <_vfiprintf_r+0x156>
 800cfe0:	9105      	str	r1, [sp, #20]
 800cfe2:	e7c4      	b.n	800cf6e <_vfiprintf_r+0x156>
 800cfe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfe8:	4604      	mov	r4, r0
 800cfea:	2301      	movs	r3, #1
 800cfec:	e7f0      	b.n	800cfd0 <_vfiprintf_r+0x1b8>
 800cfee:	ab03      	add	r3, sp, #12
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	462a      	mov	r2, r5
 800cff4:	4b12      	ldr	r3, [pc, #72]	@ (800d040 <_vfiprintf_r+0x228>)
 800cff6:	a904      	add	r1, sp, #16
 800cff8:	4630      	mov	r0, r6
 800cffa:	f3af 8000 	nop.w
 800cffe:	4607      	mov	r7, r0
 800d000:	1c78      	adds	r0, r7, #1
 800d002:	d1d6      	bne.n	800cfb2 <_vfiprintf_r+0x19a>
 800d004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d006:	07d9      	lsls	r1, r3, #31
 800d008:	d405      	bmi.n	800d016 <_vfiprintf_r+0x1fe>
 800d00a:	89ab      	ldrh	r3, [r5, #12]
 800d00c:	059a      	lsls	r2, r3, #22
 800d00e:	d402      	bmi.n	800d016 <_vfiprintf_r+0x1fe>
 800d010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d012:	f7ff fdcf 	bl	800cbb4 <__retarget_lock_release_recursive>
 800d016:	89ab      	ldrh	r3, [r5, #12]
 800d018:	065b      	lsls	r3, r3, #25
 800d01a:	f53f af1f 	bmi.w	800ce5c <_vfiprintf_r+0x44>
 800d01e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d020:	e71e      	b.n	800ce60 <_vfiprintf_r+0x48>
 800d022:	ab03      	add	r3, sp, #12
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	462a      	mov	r2, r5
 800d028:	4b05      	ldr	r3, [pc, #20]	@ (800d040 <_vfiprintf_r+0x228>)
 800d02a:	a904      	add	r1, sp, #16
 800d02c:	4630      	mov	r0, r6
 800d02e:	f000 f879 	bl	800d124 <_printf_i>
 800d032:	e7e4      	b.n	800cffe <_vfiprintf_r+0x1e6>
 800d034:	0800d8e8 	.word	0x0800d8e8
 800d038:	0800d8f2 	.word	0x0800d8f2
 800d03c:	00000000 	.word	0x00000000
 800d040:	0800cdf3 	.word	0x0800cdf3
 800d044:	0800d8ee 	.word	0x0800d8ee

0800d048 <_printf_common>:
 800d048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d04c:	4616      	mov	r6, r2
 800d04e:	4698      	mov	r8, r3
 800d050:	688a      	ldr	r2, [r1, #8]
 800d052:	690b      	ldr	r3, [r1, #16]
 800d054:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d058:	4293      	cmp	r3, r2
 800d05a:	bfb8      	it	lt
 800d05c:	4613      	movlt	r3, r2
 800d05e:	6033      	str	r3, [r6, #0]
 800d060:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d064:	4607      	mov	r7, r0
 800d066:	460c      	mov	r4, r1
 800d068:	b10a      	cbz	r2, 800d06e <_printf_common+0x26>
 800d06a:	3301      	adds	r3, #1
 800d06c:	6033      	str	r3, [r6, #0]
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	0699      	lsls	r1, r3, #26
 800d072:	bf42      	ittt	mi
 800d074:	6833      	ldrmi	r3, [r6, #0]
 800d076:	3302      	addmi	r3, #2
 800d078:	6033      	strmi	r3, [r6, #0]
 800d07a:	6825      	ldr	r5, [r4, #0]
 800d07c:	f015 0506 	ands.w	r5, r5, #6
 800d080:	d106      	bne.n	800d090 <_printf_common+0x48>
 800d082:	f104 0a19 	add.w	sl, r4, #25
 800d086:	68e3      	ldr	r3, [r4, #12]
 800d088:	6832      	ldr	r2, [r6, #0]
 800d08a:	1a9b      	subs	r3, r3, r2
 800d08c:	42ab      	cmp	r3, r5
 800d08e:	dc26      	bgt.n	800d0de <_printf_common+0x96>
 800d090:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d094:	6822      	ldr	r2, [r4, #0]
 800d096:	3b00      	subs	r3, #0
 800d098:	bf18      	it	ne
 800d09a:	2301      	movne	r3, #1
 800d09c:	0692      	lsls	r2, r2, #26
 800d09e:	d42b      	bmi.n	800d0f8 <_printf_common+0xb0>
 800d0a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d0a4:	4641      	mov	r1, r8
 800d0a6:	4638      	mov	r0, r7
 800d0a8:	47c8      	blx	r9
 800d0aa:	3001      	adds	r0, #1
 800d0ac:	d01e      	beq.n	800d0ec <_printf_common+0xa4>
 800d0ae:	6823      	ldr	r3, [r4, #0]
 800d0b0:	6922      	ldr	r2, [r4, #16]
 800d0b2:	f003 0306 	and.w	r3, r3, #6
 800d0b6:	2b04      	cmp	r3, #4
 800d0b8:	bf02      	ittt	eq
 800d0ba:	68e5      	ldreq	r5, [r4, #12]
 800d0bc:	6833      	ldreq	r3, [r6, #0]
 800d0be:	1aed      	subeq	r5, r5, r3
 800d0c0:	68a3      	ldr	r3, [r4, #8]
 800d0c2:	bf0c      	ite	eq
 800d0c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0c8:	2500      	movne	r5, #0
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	bfc4      	itt	gt
 800d0ce:	1a9b      	subgt	r3, r3, r2
 800d0d0:	18ed      	addgt	r5, r5, r3
 800d0d2:	2600      	movs	r6, #0
 800d0d4:	341a      	adds	r4, #26
 800d0d6:	42b5      	cmp	r5, r6
 800d0d8:	d11a      	bne.n	800d110 <_printf_common+0xc8>
 800d0da:	2000      	movs	r0, #0
 800d0dc:	e008      	b.n	800d0f0 <_printf_common+0xa8>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	4641      	mov	r1, r8
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	47c8      	blx	r9
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d103      	bne.n	800d0f4 <_printf_common+0xac>
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0f4:	3501      	adds	r5, #1
 800d0f6:	e7c6      	b.n	800d086 <_printf_common+0x3e>
 800d0f8:	18e1      	adds	r1, r4, r3
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	2030      	movs	r0, #48	@ 0x30
 800d0fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d102:	4422      	add	r2, r4
 800d104:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d108:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d10c:	3302      	adds	r3, #2
 800d10e:	e7c7      	b.n	800d0a0 <_printf_common+0x58>
 800d110:	2301      	movs	r3, #1
 800d112:	4622      	mov	r2, r4
 800d114:	4641      	mov	r1, r8
 800d116:	4638      	mov	r0, r7
 800d118:	47c8      	blx	r9
 800d11a:	3001      	adds	r0, #1
 800d11c:	d0e6      	beq.n	800d0ec <_printf_common+0xa4>
 800d11e:	3601      	adds	r6, #1
 800d120:	e7d9      	b.n	800d0d6 <_printf_common+0x8e>
	...

0800d124 <_printf_i>:
 800d124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d128:	7e0f      	ldrb	r7, [r1, #24]
 800d12a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d12c:	2f78      	cmp	r7, #120	@ 0x78
 800d12e:	4691      	mov	r9, r2
 800d130:	4680      	mov	r8, r0
 800d132:	460c      	mov	r4, r1
 800d134:	469a      	mov	sl, r3
 800d136:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d13a:	d807      	bhi.n	800d14c <_printf_i+0x28>
 800d13c:	2f62      	cmp	r7, #98	@ 0x62
 800d13e:	d80a      	bhi.n	800d156 <_printf_i+0x32>
 800d140:	2f00      	cmp	r7, #0
 800d142:	f000 80d2 	beq.w	800d2ea <_printf_i+0x1c6>
 800d146:	2f58      	cmp	r7, #88	@ 0x58
 800d148:	f000 80b9 	beq.w	800d2be <_printf_i+0x19a>
 800d14c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d150:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d154:	e03a      	b.n	800d1cc <_printf_i+0xa8>
 800d156:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d15a:	2b15      	cmp	r3, #21
 800d15c:	d8f6      	bhi.n	800d14c <_printf_i+0x28>
 800d15e:	a101      	add	r1, pc, #4	@ (adr r1, 800d164 <_printf_i+0x40>)
 800d160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d164:	0800d1bd 	.word	0x0800d1bd
 800d168:	0800d1d1 	.word	0x0800d1d1
 800d16c:	0800d14d 	.word	0x0800d14d
 800d170:	0800d14d 	.word	0x0800d14d
 800d174:	0800d14d 	.word	0x0800d14d
 800d178:	0800d14d 	.word	0x0800d14d
 800d17c:	0800d1d1 	.word	0x0800d1d1
 800d180:	0800d14d 	.word	0x0800d14d
 800d184:	0800d14d 	.word	0x0800d14d
 800d188:	0800d14d 	.word	0x0800d14d
 800d18c:	0800d14d 	.word	0x0800d14d
 800d190:	0800d2d1 	.word	0x0800d2d1
 800d194:	0800d1fb 	.word	0x0800d1fb
 800d198:	0800d28b 	.word	0x0800d28b
 800d19c:	0800d14d 	.word	0x0800d14d
 800d1a0:	0800d14d 	.word	0x0800d14d
 800d1a4:	0800d2f3 	.word	0x0800d2f3
 800d1a8:	0800d14d 	.word	0x0800d14d
 800d1ac:	0800d1fb 	.word	0x0800d1fb
 800d1b0:	0800d14d 	.word	0x0800d14d
 800d1b4:	0800d14d 	.word	0x0800d14d
 800d1b8:	0800d293 	.word	0x0800d293
 800d1bc:	6833      	ldr	r3, [r6, #0]
 800d1be:	1d1a      	adds	r2, r3, #4
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6032      	str	r2, [r6, #0]
 800d1c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e09d      	b.n	800d30c <_printf_i+0x1e8>
 800d1d0:	6833      	ldr	r3, [r6, #0]
 800d1d2:	6820      	ldr	r0, [r4, #0]
 800d1d4:	1d19      	adds	r1, r3, #4
 800d1d6:	6031      	str	r1, [r6, #0]
 800d1d8:	0606      	lsls	r6, r0, #24
 800d1da:	d501      	bpl.n	800d1e0 <_printf_i+0xbc>
 800d1dc:	681d      	ldr	r5, [r3, #0]
 800d1de:	e003      	b.n	800d1e8 <_printf_i+0xc4>
 800d1e0:	0645      	lsls	r5, r0, #25
 800d1e2:	d5fb      	bpl.n	800d1dc <_printf_i+0xb8>
 800d1e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d1e8:	2d00      	cmp	r5, #0
 800d1ea:	da03      	bge.n	800d1f4 <_printf_i+0xd0>
 800d1ec:	232d      	movs	r3, #45	@ 0x2d
 800d1ee:	426d      	negs	r5, r5
 800d1f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1f4:	4859      	ldr	r0, [pc, #356]	@ (800d35c <_printf_i+0x238>)
 800d1f6:	230a      	movs	r3, #10
 800d1f8:	e011      	b.n	800d21e <_printf_i+0xfa>
 800d1fa:	6821      	ldr	r1, [r4, #0]
 800d1fc:	6833      	ldr	r3, [r6, #0]
 800d1fe:	0608      	lsls	r0, r1, #24
 800d200:	f853 5b04 	ldr.w	r5, [r3], #4
 800d204:	d402      	bmi.n	800d20c <_printf_i+0xe8>
 800d206:	0649      	lsls	r1, r1, #25
 800d208:	bf48      	it	mi
 800d20a:	b2ad      	uxthmi	r5, r5
 800d20c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d20e:	4853      	ldr	r0, [pc, #332]	@ (800d35c <_printf_i+0x238>)
 800d210:	6033      	str	r3, [r6, #0]
 800d212:	bf14      	ite	ne
 800d214:	230a      	movne	r3, #10
 800d216:	2308      	moveq	r3, #8
 800d218:	2100      	movs	r1, #0
 800d21a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d21e:	6866      	ldr	r6, [r4, #4]
 800d220:	60a6      	str	r6, [r4, #8]
 800d222:	2e00      	cmp	r6, #0
 800d224:	bfa2      	ittt	ge
 800d226:	6821      	ldrge	r1, [r4, #0]
 800d228:	f021 0104 	bicge.w	r1, r1, #4
 800d22c:	6021      	strge	r1, [r4, #0]
 800d22e:	b90d      	cbnz	r5, 800d234 <_printf_i+0x110>
 800d230:	2e00      	cmp	r6, #0
 800d232:	d04b      	beq.n	800d2cc <_printf_i+0x1a8>
 800d234:	4616      	mov	r6, r2
 800d236:	fbb5 f1f3 	udiv	r1, r5, r3
 800d23a:	fb03 5711 	mls	r7, r3, r1, r5
 800d23e:	5dc7      	ldrb	r7, [r0, r7]
 800d240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d244:	462f      	mov	r7, r5
 800d246:	42bb      	cmp	r3, r7
 800d248:	460d      	mov	r5, r1
 800d24a:	d9f4      	bls.n	800d236 <_printf_i+0x112>
 800d24c:	2b08      	cmp	r3, #8
 800d24e:	d10b      	bne.n	800d268 <_printf_i+0x144>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	07df      	lsls	r7, r3, #31
 800d254:	d508      	bpl.n	800d268 <_printf_i+0x144>
 800d256:	6923      	ldr	r3, [r4, #16]
 800d258:	6861      	ldr	r1, [r4, #4]
 800d25a:	4299      	cmp	r1, r3
 800d25c:	bfde      	ittt	le
 800d25e:	2330      	movle	r3, #48	@ 0x30
 800d260:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d264:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d268:	1b92      	subs	r2, r2, r6
 800d26a:	6122      	str	r2, [r4, #16]
 800d26c:	f8cd a000 	str.w	sl, [sp]
 800d270:	464b      	mov	r3, r9
 800d272:	aa03      	add	r2, sp, #12
 800d274:	4621      	mov	r1, r4
 800d276:	4640      	mov	r0, r8
 800d278:	f7ff fee6 	bl	800d048 <_printf_common>
 800d27c:	3001      	adds	r0, #1
 800d27e:	d14a      	bne.n	800d316 <_printf_i+0x1f2>
 800d280:	f04f 30ff 	mov.w	r0, #4294967295
 800d284:	b004      	add	sp, #16
 800d286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	f043 0320 	orr.w	r3, r3, #32
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	4833      	ldr	r0, [pc, #204]	@ (800d360 <_printf_i+0x23c>)
 800d294:	2778      	movs	r7, #120	@ 0x78
 800d296:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	6831      	ldr	r1, [r6, #0]
 800d29e:	061f      	lsls	r7, r3, #24
 800d2a0:	f851 5b04 	ldr.w	r5, [r1], #4
 800d2a4:	d402      	bmi.n	800d2ac <_printf_i+0x188>
 800d2a6:	065f      	lsls	r7, r3, #25
 800d2a8:	bf48      	it	mi
 800d2aa:	b2ad      	uxthmi	r5, r5
 800d2ac:	6031      	str	r1, [r6, #0]
 800d2ae:	07d9      	lsls	r1, r3, #31
 800d2b0:	bf44      	itt	mi
 800d2b2:	f043 0320 	orrmi.w	r3, r3, #32
 800d2b6:	6023      	strmi	r3, [r4, #0]
 800d2b8:	b11d      	cbz	r5, 800d2c2 <_printf_i+0x19e>
 800d2ba:	2310      	movs	r3, #16
 800d2bc:	e7ac      	b.n	800d218 <_printf_i+0xf4>
 800d2be:	4827      	ldr	r0, [pc, #156]	@ (800d35c <_printf_i+0x238>)
 800d2c0:	e7e9      	b.n	800d296 <_printf_i+0x172>
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	f023 0320 	bic.w	r3, r3, #32
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	e7f6      	b.n	800d2ba <_printf_i+0x196>
 800d2cc:	4616      	mov	r6, r2
 800d2ce:	e7bd      	b.n	800d24c <_printf_i+0x128>
 800d2d0:	6833      	ldr	r3, [r6, #0]
 800d2d2:	6825      	ldr	r5, [r4, #0]
 800d2d4:	6961      	ldr	r1, [r4, #20]
 800d2d6:	1d18      	adds	r0, r3, #4
 800d2d8:	6030      	str	r0, [r6, #0]
 800d2da:	062e      	lsls	r6, r5, #24
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	d501      	bpl.n	800d2e4 <_printf_i+0x1c0>
 800d2e0:	6019      	str	r1, [r3, #0]
 800d2e2:	e002      	b.n	800d2ea <_printf_i+0x1c6>
 800d2e4:	0668      	lsls	r0, r5, #25
 800d2e6:	d5fb      	bpl.n	800d2e0 <_printf_i+0x1bc>
 800d2e8:	8019      	strh	r1, [r3, #0]
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	6123      	str	r3, [r4, #16]
 800d2ee:	4616      	mov	r6, r2
 800d2f0:	e7bc      	b.n	800d26c <_printf_i+0x148>
 800d2f2:	6833      	ldr	r3, [r6, #0]
 800d2f4:	1d1a      	adds	r2, r3, #4
 800d2f6:	6032      	str	r2, [r6, #0]
 800d2f8:	681e      	ldr	r6, [r3, #0]
 800d2fa:	6862      	ldr	r2, [r4, #4]
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	4630      	mov	r0, r6
 800d300:	f7f2 ff8e 	bl	8000220 <memchr>
 800d304:	b108      	cbz	r0, 800d30a <_printf_i+0x1e6>
 800d306:	1b80      	subs	r0, r0, r6
 800d308:	6060      	str	r0, [r4, #4]
 800d30a:	6863      	ldr	r3, [r4, #4]
 800d30c:	6123      	str	r3, [r4, #16]
 800d30e:	2300      	movs	r3, #0
 800d310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d314:	e7aa      	b.n	800d26c <_printf_i+0x148>
 800d316:	6923      	ldr	r3, [r4, #16]
 800d318:	4632      	mov	r2, r6
 800d31a:	4649      	mov	r1, r9
 800d31c:	4640      	mov	r0, r8
 800d31e:	47d0      	blx	sl
 800d320:	3001      	adds	r0, #1
 800d322:	d0ad      	beq.n	800d280 <_printf_i+0x15c>
 800d324:	6823      	ldr	r3, [r4, #0]
 800d326:	079b      	lsls	r3, r3, #30
 800d328:	d413      	bmi.n	800d352 <_printf_i+0x22e>
 800d32a:	68e0      	ldr	r0, [r4, #12]
 800d32c:	9b03      	ldr	r3, [sp, #12]
 800d32e:	4298      	cmp	r0, r3
 800d330:	bfb8      	it	lt
 800d332:	4618      	movlt	r0, r3
 800d334:	e7a6      	b.n	800d284 <_printf_i+0x160>
 800d336:	2301      	movs	r3, #1
 800d338:	4632      	mov	r2, r6
 800d33a:	4649      	mov	r1, r9
 800d33c:	4640      	mov	r0, r8
 800d33e:	47d0      	blx	sl
 800d340:	3001      	adds	r0, #1
 800d342:	d09d      	beq.n	800d280 <_printf_i+0x15c>
 800d344:	3501      	adds	r5, #1
 800d346:	68e3      	ldr	r3, [r4, #12]
 800d348:	9903      	ldr	r1, [sp, #12]
 800d34a:	1a5b      	subs	r3, r3, r1
 800d34c:	42ab      	cmp	r3, r5
 800d34e:	dcf2      	bgt.n	800d336 <_printf_i+0x212>
 800d350:	e7eb      	b.n	800d32a <_printf_i+0x206>
 800d352:	2500      	movs	r5, #0
 800d354:	f104 0619 	add.w	r6, r4, #25
 800d358:	e7f5      	b.n	800d346 <_printf_i+0x222>
 800d35a:	bf00      	nop
 800d35c:	0800d8f9 	.word	0x0800d8f9
 800d360:	0800d90a 	.word	0x0800d90a

0800d364 <__sflush_r>:
 800d364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d36c:	0716      	lsls	r6, r2, #28
 800d36e:	4605      	mov	r5, r0
 800d370:	460c      	mov	r4, r1
 800d372:	d454      	bmi.n	800d41e <__sflush_r+0xba>
 800d374:	684b      	ldr	r3, [r1, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	dc02      	bgt.n	800d380 <__sflush_r+0x1c>
 800d37a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	dd48      	ble.n	800d412 <__sflush_r+0xae>
 800d380:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d382:	2e00      	cmp	r6, #0
 800d384:	d045      	beq.n	800d412 <__sflush_r+0xae>
 800d386:	2300      	movs	r3, #0
 800d388:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d38c:	682f      	ldr	r7, [r5, #0]
 800d38e:	6a21      	ldr	r1, [r4, #32]
 800d390:	602b      	str	r3, [r5, #0]
 800d392:	d030      	beq.n	800d3f6 <__sflush_r+0x92>
 800d394:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d396:	89a3      	ldrh	r3, [r4, #12]
 800d398:	0759      	lsls	r1, r3, #29
 800d39a:	d505      	bpl.n	800d3a8 <__sflush_r+0x44>
 800d39c:	6863      	ldr	r3, [r4, #4]
 800d39e:	1ad2      	subs	r2, r2, r3
 800d3a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d3a2:	b10b      	cbz	r3, 800d3a8 <__sflush_r+0x44>
 800d3a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d3a6:	1ad2      	subs	r2, r2, r3
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3ac:	6a21      	ldr	r1, [r4, #32]
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	47b0      	blx	r6
 800d3b2:	1c43      	adds	r3, r0, #1
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	d106      	bne.n	800d3c6 <__sflush_r+0x62>
 800d3b8:	6829      	ldr	r1, [r5, #0]
 800d3ba:	291d      	cmp	r1, #29
 800d3bc:	d82b      	bhi.n	800d416 <__sflush_r+0xb2>
 800d3be:	4a2a      	ldr	r2, [pc, #168]	@ (800d468 <__sflush_r+0x104>)
 800d3c0:	410a      	asrs	r2, r1
 800d3c2:	07d6      	lsls	r6, r2, #31
 800d3c4:	d427      	bmi.n	800d416 <__sflush_r+0xb2>
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	6062      	str	r2, [r4, #4]
 800d3ca:	04d9      	lsls	r1, r3, #19
 800d3cc:	6922      	ldr	r2, [r4, #16]
 800d3ce:	6022      	str	r2, [r4, #0]
 800d3d0:	d504      	bpl.n	800d3dc <__sflush_r+0x78>
 800d3d2:	1c42      	adds	r2, r0, #1
 800d3d4:	d101      	bne.n	800d3da <__sflush_r+0x76>
 800d3d6:	682b      	ldr	r3, [r5, #0]
 800d3d8:	b903      	cbnz	r3, 800d3dc <__sflush_r+0x78>
 800d3da:	6560      	str	r0, [r4, #84]	@ 0x54
 800d3dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3de:	602f      	str	r7, [r5, #0]
 800d3e0:	b1b9      	cbz	r1, 800d412 <__sflush_r+0xae>
 800d3e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3e6:	4299      	cmp	r1, r3
 800d3e8:	d002      	beq.n	800d3f0 <__sflush_r+0x8c>
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	f7ff fbf2 	bl	800cbd4 <_free_r>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3f4:	e00d      	b.n	800d412 <__sflush_r+0xae>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	47b0      	blx	r6
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	1c50      	adds	r0, r2, #1
 800d400:	d1c9      	bne.n	800d396 <__sflush_r+0x32>
 800d402:	682b      	ldr	r3, [r5, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d0c6      	beq.n	800d396 <__sflush_r+0x32>
 800d408:	2b1d      	cmp	r3, #29
 800d40a:	d001      	beq.n	800d410 <__sflush_r+0xac>
 800d40c:	2b16      	cmp	r3, #22
 800d40e:	d11e      	bne.n	800d44e <__sflush_r+0xea>
 800d410:	602f      	str	r7, [r5, #0]
 800d412:	2000      	movs	r0, #0
 800d414:	e022      	b.n	800d45c <__sflush_r+0xf8>
 800d416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d41a:	b21b      	sxth	r3, r3
 800d41c:	e01b      	b.n	800d456 <__sflush_r+0xf2>
 800d41e:	690f      	ldr	r7, [r1, #16]
 800d420:	2f00      	cmp	r7, #0
 800d422:	d0f6      	beq.n	800d412 <__sflush_r+0xae>
 800d424:	0793      	lsls	r3, r2, #30
 800d426:	680e      	ldr	r6, [r1, #0]
 800d428:	bf08      	it	eq
 800d42a:	694b      	ldreq	r3, [r1, #20]
 800d42c:	600f      	str	r7, [r1, #0]
 800d42e:	bf18      	it	ne
 800d430:	2300      	movne	r3, #0
 800d432:	eba6 0807 	sub.w	r8, r6, r7
 800d436:	608b      	str	r3, [r1, #8]
 800d438:	f1b8 0f00 	cmp.w	r8, #0
 800d43c:	dde9      	ble.n	800d412 <__sflush_r+0xae>
 800d43e:	6a21      	ldr	r1, [r4, #32]
 800d440:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d442:	4643      	mov	r3, r8
 800d444:	463a      	mov	r2, r7
 800d446:	4628      	mov	r0, r5
 800d448:	47b0      	blx	r6
 800d44a:	2800      	cmp	r0, #0
 800d44c:	dc08      	bgt.n	800d460 <__sflush_r+0xfc>
 800d44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d456:	81a3      	strh	r3, [r4, #12]
 800d458:	f04f 30ff 	mov.w	r0, #4294967295
 800d45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d460:	4407      	add	r7, r0
 800d462:	eba8 0800 	sub.w	r8, r8, r0
 800d466:	e7e7      	b.n	800d438 <__sflush_r+0xd4>
 800d468:	dfbffffe 	.word	0xdfbffffe

0800d46c <_fflush_r>:
 800d46c:	b538      	push	{r3, r4, r5, lr}
 800d46e:	690b      	ldr	r3, [r1, #16]
 800d470:	4605      	mov	r5, r0
 800d472:	460c      	mov	r4, r1
 800d474:	b913      	cbnz	r3, 800d47c <_fflush_r+0x10>
 800d476:	2500      	movs	r5, #0
 800d478:	4628      	mov	r0, r5
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
 800d47c:	b118      	cbz	r0, 800d486 <_fflush_r+0x1a>
 800d47e:	6a03      	ldr	r3, [r0, #32]
 800d480:	b90b      	cbnz	r3, 800d486 <_fflush_r+0x1a>
 800d482:	f7ff f99f 	bl	800c7c4 <__sinit>
 800d486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d0f3      	beq.n	800d476 <_fflush_r+0xa>
 800d48e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d490:	07d0      	lsls	r0, r2, #31
 800d492:	d404      	bmi.n	800d49e <_fflush_r+0x32>
 800d494:	0599      	lsls	r1, r3, #22
 800d496:	d402      	bmi.n	800d49e <_fflush_r+0x32>
 800d498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d49a:	f7ff fb8a 	bl	800cbb2 <__retarget_lock_acquire_recursive>
 800d49e:	4628      	mov	r0, r5
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	f7ff ff5f 	bl	800d364 <__sflush_r>
 800d4a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4a8:	07da      	lsls	r2, r3, #31
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	d4e4      	bmi.n	800d478 <_fflush_r+0xc>
 800d4ae:	89a3      	ldrh	r3, [r4, #12]
 800d4b0:	059b      	lsls	r3, r3, #22
 800d4b2:	d4e1      	bmi.n	800d478 <_fflush_r+0xc>
 800d4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4b6:	f7ff fb7d 	bl	800cbb4 <__retarget_lock_release_recursive>
 800d4ba:	e7dd      	b.n	800d478 <_fflush_r+0xc>

0800d4bc <__swhatbuf_r>:
 800d4bc:	b570      	push	{r4, r5, r6, lr}
 800d4be:	460c      	mov	r4, r1
 800d4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c4:	2900      	cmp	r1, #0
 800d4c6:	b096      	sub	sp, #88	@ 0x58
 800d4c8:	4615      	mov	r5, r2
 800d4ca:	461e      	mov	r6, r3
 800d4cc:	da0d      	bge.n	800d4ea <__swhatbuf_r+0x2e>
 800d4ce:	89a3      	ldrh	r3, [r4, #12]
 800d4d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d4d4:	f04f 0100 	mov.w	r1, #0
 800d4d8:	bf14      	ite	ne
 800d4da:	2340      	movne	r3, #64	@ 0x40
 800d4dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	6031      	str	r1, [r6, #0]
 800d4e4:	602b      	str	r3, [r5, #0]
 800d4e6:	b016      	add	sp, #88	@ 0x58
 800d4e8:	bd70      	pop	{r4, r5, r6, pc}
 800d4ea:	466a      	mov	r2, sp
 800d4ec:	f000 f848 	bl	800d580 <_fstat_r>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	dbec      	blt.n	800d4ce <__swhatbuf_r+0x12>
 800d4f4:	9901      	ldr	r1, [sp, #4]
 800d4f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d4fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d4fe:	4259      	negs	r1, r3
 800d500:	4159      	adcs	r1, r3
 800d502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d506:	e7eb      	b.n	800d4e0 <__swhatbuf_r+0x24>

0800d508 <__smakebuf_r>:
 800d508:	898b      	ldrh	r3, [r1, #12]
 800d50a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d50c:	079d      	lsls	r5, r3, #30
 800d50e:	4606      	mov	r6, r0
 800d510:	460c      	mov	r4, r1
 800d512:	d507      	bpl.n	800d524 <__smakebuf_r+0x1c>
 800d514:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d518:	6023      	str	r3, [r4, #0]
 800d51a:	6123      	str	r3, [r4, #16]
 800d51c:	2301      	movs	r3, #1
 800d51e:	6163      	str	r3, [r4, #20]
 800d520:	b003      	add	sp, #12
 800d522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d524:	ab01      	add	r3, sp, #4
 800d526:	466a      	mov	r2, sp
 800d528:	f7ff ffc8 	bl	800d4bc <__swhatbuf_r>
 800d52c:	9f00      	ldr	r7, [sp, #0]
 800d52e:	4605      	mov	r5, r0
 800d530:	4639      	mov	r1, r7
 800d532:	4630      	mov	r0, r6
 800d534:	f7ff fbba 	bl	800ccac <_malloc_r>
 800d538:	b948      	cbnz	r0, 800d54e <__smakebuf_r+0x46>
 800d53a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d53e:	059a      	lsls	r2, r3, #22
 800d540:	d4ee      	bmi.n	800d520 <__smakebuf_r+0x18>
 800d542:	f023 0303 	bic.w	r3, r3, #3
 800d546:	f043 0302 	orr.w	r3, r3, #2
 800d54a:	81a3      	strh	r3, [r4, #12]
 800d54c:	e7e2      	b.n	800d514 <__smakebuf_r+0xc>
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	6020      	str	r0, [r4, #0]
 800d552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d556:	81a3      	strh	r3, [r4, #12]
 800d558:	9b01      	ldr	r3, [sp, #4]
 800d55a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d55e:	b15b      	cbz	r3, 800d578 <__smakebuf_r+0x70>
 800d560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d564:	4630      	mov	r0, r6
 800d566:	f000 f81d 	bl	800d5a4 <_isatty_r>
 800d56a:	b128      	cbz	r0, 800d578 <__smakebuf_r+0x70>
 800d56c:	89a3      	ldrh	r3, [r4, #12]
 800d56e:	f023 0303 	bic.w	r3, r3, #3
 800d572:	f043 0301 	orr.w	r3, r3, #1
 800d576:	81a3      	strh	r3, [r4, #12]
 800d578:	89a3      	ldrh	r3, [r4, #12]
 800d57a:	431d      	orrs	r5, r3
 800d57c:	81a5      	strh	r5, [r4, #12]
 800d57e:	e7cf      	b.n	800d520 <__smakebuf_r+0x18>

0800d580 <_fstat_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4d07      	ldr	r5, [pc, #28]	@ (800d5a0 <_fstat_r+0x20>)
 800d584:	2300      	movs	r3, #0
 800d586:	4604      	mov	r4, r0
 800d588:	4608      	mov	r0, r1
 800d58a:	4611      	mov	r1, r2
 800d58c:	602b      	str	r3, [r5, #0]
 800d58e:	f7f4 fcb0 	bl	8001ef2 <_fstat>
 800d592:	1c43      	adds	r3, r0, #1
 800d594:	d102      	bne.n	800d59c <_fstat_r+0x1c>
 800d596:	682b      	ldr	r3, [r5, #0]
 800d598:	b103      	cbz	r3, 800d59c <_fstat_r+0x1c>
 800d59a:	6023      	str	r3, [r4, #0]
 800d59c:	bd38      	pop	{r3, r4, r5, pc}
 800d59e:	bf00      	nop
 800d5a0:	20000f8c 	.word	0x20000f8c

0800d5a4 <_isatty_r>:
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	4d06      	ldr	r5, [pc, #24]	@ (800d5c0 <_isatty_r+0x1c>)
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	4608      	mov	r0, r1
 800d5ae:	602b      	str	r3, [r5, #0]
 800d5b0:	f7f4 fcaf 	bl	8001f12 <_isatty>
 800d5b4:	1c43      	adds	r3, r0, #1
 800d5b6:	d102      	bne.n	800d5be <_isatty_r+0x1a>
 800d5b8:	682b      	ldr	r3, [r5, #0]
 800d5ba:	b103      	cbz	r3, 800d5be <_isatty_r+0x1a>
 800d5bc:	6023      	str	r3, [r4, #0]
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
 800d5c0:	20000f8c 	.word	0x20000f8c

0800d5c4 <_sbrk_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	4d06      	ldr	r5, [pc, #24]	@ (800d5e0 <_sbrk_r+0x1c>)
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	602b      	str	r3, [r5, #0]
 800d5d0:	f7f4 fcb8 	bl	8001f44 <_sbrk>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d102      	bne.n	800d5de <_sbrk_r+0x1a>
 800d5d8:	682b      	ldr	r3, [r5, #0]
 800d5da:	b103      	cbz	r3, 800d5de <_sbrk_r+0x1a>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	20000f8c 	.word	0x20000f8c

0800d5e4 <_init>:
 800d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e6:	bf00      	nop
 800d5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ea:	bc08      	pop	{r3}
 800d5ec:	469e      	mov	lr, r3
 800d5ee:	4770      	bx	lr

0800d5f0 <_fini>:
 800d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f2:	bf00      	nop
 800d5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5f6:	bc08      	pop	{r3}
 800d5f8:	469e      	mov	lr, r3
 800d5fa:	4770      	bx	lr
