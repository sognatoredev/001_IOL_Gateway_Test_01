
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c148  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800c328  0800c328  0000d328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5a4  0800c5a4  0000e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5a4  0800c5a4  0000d5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5ac  0800c5ac  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5ac  0800c5ac  0000d5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5b0  0800c5b0  0000d5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800c5b4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cdc  200001f0  0800c7a4  0000e1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ecc  0800c7a4  0000eecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fba6  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dbf  00000000  00000000  0002ddc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  00032b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013aa  00000000  00000000  00034548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006fd7  00000000  00000000  000358f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022704  00000000  00000000  0003c8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdbb2  00000000  00000000  0005efcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cb7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071ec  00000000  00000000  0012cbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00133db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c310 	.word	0x0800c310

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800c310 	.word	0x0800c310

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_DMA_Init+0x50>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <MX_DMA_Init+0x50>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_DMA_Init+0x50>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_DMA_Init+0x50>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f001 f953 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f001 f96a 	bl	80018ca <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b43      	ldr	r3, [pc, #268]	@ (8000728 <MX_GPIO_Init+0x124>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a42      	ldr	r2, [pc, #264]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b40      	ldr	r3, [pc, #256]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b3d      	ldr	r3, [pc, #244]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a3c      	ldr	r2, [pc, #240]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b3a      	ldr	r3, [pc, #232]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <MX_GPIO_Init+0x124>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a36      	ldr	r2, [pc, #216]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b34      	ldr	r3, [pc, #208]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	4a30      	ldr	r2, [pc, #192]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066e:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000680:	482a      	ldr	r0, [pc, #168]	@ (800072c <MX_GPIO_Init+0x128>)
 8000682:	f001 fdf1 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2140      	movs	r1, #64	@ 0x40
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f001 fdeb 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2101      	movs	r1, #1
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <MX_GPIO_Init+0x12c>)
 8000698:	f001 fde6 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800069c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	481d      	ldr	r0, [pc, #116]	@ (800072c <MX_GPIO_Init+0x128>)
 80006b6:	f001 fc55 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006ba:	23a0      	movs	r3, #160	@ 0xa0
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d2:	f001 fc47 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006d6:	2340      	movs	r3, #64	@ 0x40
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f001 fc38 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f4:	2301      	movs	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_GPIO_Init+0x12c>)
 800070c:	f001 fc2a 	bl	8001f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2017      	movs	r0, #23
 8000716:	f001 f8be 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800071a:	2017      	movs	r0, #23
 800071c:	f001 f8d5 	bl	80018ca <HAL_NVIC_EnableIRQ>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	48000800 	.word	0x48000800
 8000730:	48000400 	.word	0x48000400

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 ff3f 	bl	80015ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f838 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f7ff ff60 	bl	8000604 <MX_GPIO_Init>
  MX_DMA_Init();
 8000744:	f7ff ff34 	bl	80005b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000748:	f000 fc2c 	bl	8000fa4 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 800074c:	f00a f922 	bl	800a994 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000750:	f000 fbae 	bl	8000eb0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8000754:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000758:	490f      	ldr	r1, [pc, #60]	@ (8000798 <main+0x64>)
 800075a:	4810      	ldr	r0, [pc, #64]	@ (800079c <main+0x68>)
 800075c:	f000 f879 	bl	8000852 <Q_Init>

  HAL_Delay(3000);
 8000760:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000764:	f000 ff9a 	bl	800169c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <main+0x6c>)
 800076a:	f004 fafd 	bl	8004d68 <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 800076e:	f000 fd4f 	bl	8001210 <GetClockSourcePrint>
  BootMessagePrint();
 8000772:	f000 fd1d 	bl	80011b0 <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000776:	2264      	movs	r2, #100	@ 0x64
 8000778:	490a      	ldr	r1, [pc, #40]	@ (80007a4 <main+0x70>)
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <main+0x74>)
 800077c:	f006 fd8e 	bl	800729c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <main+0x78>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <main+0x78>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0204 	bic.w	r2, r2, #4
 800078e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 8000790:	f000 fcf8 	bl	8001184 <User_Toggle_Led>
 8000794:	e7fc      	b.n	8000790 <main+0x5c>
 8000796:	bf00      	nop
 8000798:	20000758 	.word	0x20000758
 800079c:	20000360 	.word	0x20000360
 80007a0:	20000214 	.word	0x20000214
 80007a4:	20000b44 	.word	0x20000b44
 80007a8:	20000260 	.word	0x20000260
 80007ac:	200002f4 	.word	0x200002f4

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	@ 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	2238      	movs	r2, #56	@ 0x38
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f00b f814 	bl	800b7ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f003 fa9e 	bl	8003d14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007d8:	2321      	movs	r3, #33	@ 0x21
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007ee:	2306      	movs	r3, #6
 80007f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007f2:	2355      	movs	r3, #85	@ 0x55
 80007f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fb38 	bl	8003e7c <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000812:	f000 f818 	bl	8000846 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2104      	movs	r1, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fe36 	bl	80044a0 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800083a:	f000 f804 	bl	8000846 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084a:	b672      	cpsid	i
}
 800084c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <Error_Handler+0x8>

08000852 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	4613      	mov	r3, r2
 800085e:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2200      	movs	r2, #0
 8000864:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2200      	movs	r2, #0
 800086a:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2200      	movs	r2, #0
 8000870:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2200      	movs	r2, #0
 8000876:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	60da      	str	r2, [r3, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	4613      	mov	r3, r2
 800089c:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 800089e:	2300      	movs	r3, #0
 80008a0:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f000 f8ea 	bl	8000a7c <Q_NumEmptyBytes>
 80008a8:	4603      	mov	r3, r0
 80008aa:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	db44      	blt.n	800093e <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	4413      	add	r3, r2
 80008c0:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	8afa      	ldrh	r2, [r7, #22]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d20b      	bcs.n	80008e4 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008d6:	4413      	add	r3, r2
 80008d8:	88fa      	ldrh	r2, [r7, #6]
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	4618      	mov	r0, r3
 80008de:	f00b f800 	bl	800b8e2 <memcpy>
 80008e2:	e01d      	b.n	8000920 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	881a      	ldrh	r2, [r3, #0]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008fe:	4413      	add	r3, r2
 8000900:	8aba      	ldrh	r2, [r7, #20]
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	4618      	mov	r0, r3
 8000906:	f00a ffec 	bl	800b8e2 <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	68d8      	ldr	r0, [r3, #12]
 800090e:	8abb      	ldrh	r3, [r7, #20]
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	18d1      	adds	r1, r2, r3
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	8abb      	ldrh	r3, [r7, #20]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	461a      	mov	r2, r3
 800091c:	f00a ffe1 	bl	800b8e2 <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	881a      	ldrh	r2, [r3, #0]
 8000924:	8afb      	ldrh	r3, [r7, #22]
 8000926:	fbb3 f1f2 	udiv	r1, r3, r2
 800092a:	fb01 f202 	mul.w	r2, r1, r2
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	b21a      	sxth	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8000938:	2301      	movs	r3, #1
 800093a:	77fb      	strb	r3, [r7, #31]
 800093c:	e00e      	b.n	800095c <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	88db      	ldrh	r3, [r3, #6]
 8000942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000946:	4293      	cmp	r3, r2
 8000948:	d004      	beq.n	8000954 <Q_Write+0xc4>
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	88db      	ldrh	r3, [r3, #6]
 800094e:	3301      	adds	r3, #1
 8000950:	b29a      	uxth	r2, r3
 8000952:	e001      	b.n	8000958 <Q_Write+0xc8>
 8000954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	80da      	strh	r2, [r3, #6]
    return ret;    
 800095c:	7ffb      	ldrb	r3, [r7, #31]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	4613      	mov	r3, r2
 8000972:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f864 	bl	8000a42 <Q_NumContents>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	4293      	cmp	r3, r2
 8000982:	d848      	bhi.n	8000a16 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800098a:	b29a      	uxth	r2, r3
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4413      	add	r3, r2
 8000990:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	8aba      	ldrh	r2, [r7, #20]
 8000998:	429a      	cmp	r2, r3
 800099a:	d20b      	bcs.n	80009b4 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	4619      	mov	r1, r3
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f00a ff98 	bl	800b8e2 <memcpy>
 80009b2:	e01d      	b.n	80009f0 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	881a      	ldrh	r2, [r3, #0]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	8a7a      	ldrh	r2, [r7, #18]
 80009d2:	4619      	mov	r1, r3
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f00a ff84 	bl	800b8e2 <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 80009da:	8a7b      	ldrh	r3, [r7, #18]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	18d0      	adds	r0, r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68d9      	ldr	r1, [r3, #12]
 80009e4:	88fa      	ldrh	r2, [r7, #6]
 80009e6:	8a7b      	ldrh	r3, [r7, #18]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	f00a ff79 	bl	800b8e2 <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009f6:	461a      	mov	r2, r3
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	4413      	add	r3, r2
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	8812      	ldrh	r2, [r2, #0]
 8000a00:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a04:	fb01 f202 	mul.w	r2, r1, r2
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000a10:	2301      	movs	r3, #1
 8000a12:	75fb      	strb	r3, [r7, #23]
 8000a14:	e010      	b.n	8000a38 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	891b      	ldrh	r3, [r3, #8]
 8000a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d004      	beq.n	8000a2c <Q_Read+0xc6>
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	891b      	ldrh	r3, [r3, #8]
 8000a26:	3301      	adds	r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	e001      	b.n	8000a30 <Q_Read+0xca>
 8000a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000a34:	2300      	movs	r3, #0
 8000a36:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a56:	4413      	add	r3, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a5e:	1a9b      	subs	r3, r3, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	8812      	ldrh	r2, [r2, #0]
 8000a64:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a68:	fb01 f202 	mul.w	r2, r1, r2
 8000a6c:	1a9b      	subs	r3, r3, r2
 8000a6e:	b29b      	uxth	r3, r3
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	881c      	ldrh	r4, [r3, #0]
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ffda 	bl	8000a42 <Q_NumContents>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	1ae3      	subs	r3, r4, r3
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b29b      	uxth	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ad6:	f003 f9c1 	bl	8003e5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f000 fd8f 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <DMA1_Channel1_IRQHandler+0x10>)
 8000b4e:	f001 f8ba 	bl	8001cc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200002f4 	.word	0x200002f4

08000b5c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <USB_LP_IRQHandler+0x10>)
 8000b62:	f001 fcc6 	bl	80024f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20001884 	.word	0x20001884

08000b70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b74:	2020      	movs	r0, #32
 8000b76:	f001 fba9 	bl	80022cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b7a:	2080      	movs	r0, #128	@ 0x80
 8000b7c:	f001 fba6 	bl	80022cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b8a:	f004 f957 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000214 	.word	0x20000214

08000b98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d006      	beq.n	8000bb8 <USART1_IRQHandler+0x20>
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d107      	bne.n	8000bc8 <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bca:	f004 fe8d 	bl	80058e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000260 	.word	0x20000260

08000bd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000be4:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000be6:	f7ff ff2c 	bl	8000a42 <Q_NumContents>
 8000bea:	4603      	mov	r3, r0
 8000bec:	81fb      	strh	r3, [r7, #14]
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d016      	beq.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000bf4:	f009 ffc4 	bl	800ab80 <CDC_Transmit_Is_Busy>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d011      	beq.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c00:	881a      	ldrh	r2, [r3, #0]
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	4413      	add	r3, r2
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c0a:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	490f      	ldr	r1, [pc, #60]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c12:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c14:	f7ff fea7 	bl	8000966 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c1e:	f009 ff77 	bl	800ab10 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d109      	bne.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c34:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c3e:	6013      	str	r3, [r2, #0]
  }
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000360 	.word	0x20000360
 8000c4c:	2000035c 	.word	0x2000035c
 8000c50:	20000370 	.word	0x20000370
 8000c54:	40012c00 	.word	0x40012c00
 8000c58:	20000354 	.word	0x20000354
 8000c5c:	20000358 	.word	0x20000358

08000c60 <HAL_UARTEx_RxEventCallback>:

uint8_t IOL_Rx_IDLEFlag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a2f      	ldr	r2, [pc, #188]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c76:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d153      	bne.n	8000d2a <HAL_UARTEx_RxEventCallback+0xca>
    // {
    //   IOL_RX_CONTINUE_FLAG = 0;
    //   return;
    // }

    if (uart_rx_IDLE_TotalCnt >= 3)
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d912      	bls.n	8000cb0 <HAL_UARTEx_RxEventCallback+0x50>
    {
      DEBUG_GPIO_TOGGLE;
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	482b      	ldr	r0, [pc, #172]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8000c8e:	f001 fb03 	bl	8002298 <HAL_GPIO_TogglePin>
      if (IOL_Rx_IDLEFlag == 1)
 8000c92:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d103      	bne.n	8000ca2 <HAL_UARTEx_RxEventCallback+0x42>
      {
        IOL_Rx_IDLEFlag = 0;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e006      	b.n	8000cb0 <HAL_UARTEx_RxEventCallback+0x50>
      }
      else
      {
        IOL_Rx_IDLEFlag = 1;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_StartUp_Seq_Page(Size);
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fbee 	bl	800148c <IOL_StartUp_Seq_Page>
      }

    }

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2264      	movs	r2, #100	@ 0x64
 8000cc6:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	e853 3f00 	ldrex	r3, [r3]
 8000cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d00:	6979      	ldr	r1, [r7, #20]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	e841 2300 	strex	r3, r2, [r1]
 8000d08:	613b      	str	r3, [r7, #16]
   return(result);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e6      	bne.n	8000cde <HAL_UARTEx_RxEventCallback+0x7e>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000d10:	2264      	movs	r2, #100	@ 0x64
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000d14:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <HAL_UARTEx_RxEventCallback+0xec>)
 8000d16:	f006 fac1 	bl	800729c <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0204 	bic.w	r2, r2, #4
 8000d28:	601a      	str	r2, [r3, #0]

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000b40 	.word	0x20000b40
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	2000020c 	.word	0x2000020c
 8000d44:	200002f4 	.word	0x200002f4
 8000d48:	20000b44 	.word	0x20000b44
 8000d4c:	20000260 	.word	0x20000260

08000d50 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <HAL_UART_TxCpltCallback+0x28>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d105      	bne.n	8000d6e <HAL_UART_TxCpltCallback+0x1e>
  {
    IOL_DISABLE;
 8000d62:	2200      	movs	r2, #0
 8000d64:	2140      	movs	r1, #64	@ 0x40
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f001 fa7d 	bl	8002268 <HAL_GPIO_WritePin>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40013800 	.word	0x40013800

08000d7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e00a      	b.n	8000da4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d8e:	f3af 8000 	nop.w
 8000d92:	4601      	mov	r1, r0
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	b2ca      	uxtb	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf0      	blt.n	8000d8e <_read+0x12>
  }

  return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dde:	605a      	str	r2, [r3, #4]
  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f00a fd1a 	bl	800b888 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20008000 	.word	0x20008000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	20000210 	.word	0x20000210
 8000e88:	20001ed0 	.word	0x20001ed0

08000e8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ed0:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <MX_TIM1_Init+0xa4>)
 8000ed2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ed6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ee4:	22a9      	movs	r2, #169	@ 0xa9
 8000ee6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000efa:	4815      	ldr	r0, [pc, #84]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000efc:	f003 fedc 	bl	8004cb8 <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f06:	f7ff fc9e 	bl	8000846 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000f18:	f004 f8e0 	bl	80050dc <HAL_TIM_ConfigClockSource>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f22:	f7ff fc90 	bl	8000846 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000f38:	f004 fb2a 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f42:	f7ff fc80 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000214 	.word	0x20000214
 8000f54:	40012c00 	.word	0x40012c00

08000f58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <HAL_TIM_Base_MspInit+0x44>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d113      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2019      	movs	r0, #25
 8000f88:	f000 fc85 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f8c:	2019      	movs	r0, #25
 8000f8e:	f000 fc9c 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000faa:	4a24      	ldr	r2, [pc, #144]	@ (800103c <MX_USART1_UART_Init+0x98>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000fae:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fb0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fbc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff0:	4811      	ldr	r0, [pc, #68]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000ff2:	f004 fb95 	bl	8005720 <HAL_UART_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f7ff fc23 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001000:	2100      	movs	r1, #0
 8001002:	480d      	ldr	r0, [pc, #52]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8001004:	f006 f8ce 	bl	80071a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800100e:	f7ff fc1a 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001012:	2100      	movs	r1, #0
 8001014:	4808      	ldr	r0, [pc, #32]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8001016:	f006 f903 	bl	8007220 <HAL_UARTEx_SetRxFifoThreshold>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001020:	f7ff fc11 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8001026:	f006 f884 	bl	8007132 <HAL_UARTEx_DisableFifoMode>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001030:	f7ff fc09 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000260 	.word	0x20000260
 800103c:	40013800 	.word	0x40013800

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b09a      	sub	sp, #104	@ 0x68
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2244      	movs	r2, #68	@ 0x44
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00a fbc3 	bl	800b7ec <memset>
  if(uartHandle->Instance==USART1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a38      	ldr	r2, [pc, #224]	@ (800114c <HAL_UART_MspInit+0x10c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d169      	bne.n	8001144 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fc2b 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff fbdd 	bl	8000846 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108c:	4b30      	ldr	r3, [pc, #192]	@ (8001150 <HAL_UART_MspInit+0x110>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001090:	4a2f      	ldr	r2, [pc, #188]	@ (8001150 <HAL_UART_MspInit+0x110>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001096:	6613      	str	r3, [r2, #96]	@ 0x60
 8001098:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <HAL_UART_MspInit+0x110>)
 800109a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <HAL_UART_MspInit+0x110>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a29      	ldr	r2, [pc, #164]	@ (8001150 <HAL_UART_MspInit+0x110>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <HAL_UART_MspInit+0x110>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ce:	2307      	movs	r3, #7
 80010d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f000 ff42 	bl	8001f64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001158 <HAL_UART_MspInit+0x118>)
 80010e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010e8:	2218      	movs	r2, #24
 80010ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_UART_MspInit+0x114>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001116:	480f      	ldr	r0, [pc, #60]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001118:	f000 fbf2 	bl	8001900 <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001122:	f7ff fb90 	bl	8000846 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <HAL_UART_MspInit+0x114>)
 800112a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800112e:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2025      	movs	r0, #37	@ 0x25
 800113a:	f000 fbac 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800113e:	2025      	movs	r0, #37	@ 0x25
 8001140:	f000 fbc3 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	3768      	adds	r7, #104	@ 0x68
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013800 	.word	0x40013800
 8001150:	40021000 	.word	0x40021000
 8001154:	200002f4 	.word	0x200002f4
 8001158:	40020008 	.word	0x40020008

0800115c <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	b29b      	uxth	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <_write+0x24>)
 8001172:	f7ff fb8d 	bl	8000890 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000360 	.word	0x20000360

08001184 <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <User_Toggle_Led+0x24>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001190:	d307      	bcc.n	80011a2 <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 8001192:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <User_Toggle_Led+0x24>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 8001198:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800119c:	4803      	ldr	r0, [pc, #12]	@ (80011ac <User_Toggle_Led+0x28>)
 800119e:	f001 f87b 	bl	8002298 <HAL_GPIO_TogglePin>
    }
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000354 	.word	0x20000354
 80011ac:	48000800 	.word	0x48000800

080011b0 <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <BootMessagePrint+0x38>)
 80011b6:	f00a fa39 	bl	800b62c <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 80011ba:	490c      	ldr	r1, [pc, #48]	@ (80011ec <BootMessagePrint+0x3c>)
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <BootMessagePrint+0x40>)
 80011be:	f00a f9cd 	bl	800b55c <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 80011c2:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <BootMessagePrint+0x44>)
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <BootMessagePrint+0x48>)
 80011c6:	f00a f9c9 	bl	800b55c <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 80011ca:	490c      	ldr	r1, [pc, #48]	@ (80011fc <BootMessagePrint+0x4c>)
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <BootMessagePrint+0x50>)
 80011ce:	f00a f9c5 	bl	800b55c <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80011d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001204 <BootMessagePrint+0x54>)
 80011d4:	490c      	ldr	r1, [pc, #48]	@ (8001208 <BootMessagePrint+0x58>)
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <BootMessagePrint+0x5c>)
 80011d8:	f00a f9c0 	bl	800b55c <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <BootMessagePrint+0x38>)
 80011de:	f00a fa25 	bl	800b62c <puts>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800c328 	.word	0x0800c328
 80011ec:	0800c370 	.word	0x0800c370
 80011f0:	0800c380 	.word	0x0800c380
 80011f4:	0800c39c 	.word	0x0800c39c
 80011f8:	0800c3a4 	.word	0x0800c3a4
 80011fc:	0800c3c0 	.word	0x0800c3c0
 8001200:	0800c3d4 	.word	0x0800c3d4
 8001204:	0800c3f0 	.word	0x0800c3f0
 8001208:	0800c3fc 	.word	0x0800c3fc
 800120c:	0800c408 	.word	0x0800c408

08001210 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8001214:	4819      	ldr	r0, [pc, #100]	@ (800127c <GetClockSourcePrint+0x6c>)
 8001216:	f00a fa09 	bl	800b62c <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 800121a:	f003 fa7d 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 800121e:	4603      	mov	r3, r0
 8001220:	4a17      	ldr	r2, [pc, #92]	@ (8001280 <GetClockSourcePrint+0x70>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	4619      	mov	r1, r3
 800122a:	4816      	ldr	r0, [pc, #88]	@ (8001284 <GetClockSourcePrint+0x74>)
 800122c:	f00a f996 	bl	800b55c <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8001230:	f003 fad4 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 8001234:	4603      	mov	r3, r0
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <GetClockSourcePrint+0x70>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	0c9b      	lsrs	r3, r3, #18
 800123e:	4619      	mov	r1, r3
 8001240:	4811      	ldr	r0, [pc, #68]	@ (8001288 <GetClockSourcePrint+0x78>)
 8001242:	f00a f98b 	bl	800b55c <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8001246:	f003 fad5 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 800124a:	4603      	mov	r3, r0
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <GetClockSourcePrint+0x70>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9b      	lsrs	r3, r3, #18
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	@ (800128c <GetClockSourcePrint+0x7c>)
 8001258:	f00a f980 	bl	800b55c <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 800125c:	f003 fae0 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 8001260:	4603      	mov	r3, r0
 8001262:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <GetClockSourcePrint+0x70>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	0c9b      	lsrs	r3, r3, #18
 800126a:	4619      	mov	r1, r3
 800126c:	4808      	ldr	r0, [pc, #32]	@ (8001290 <GetClockSourcePrint+0x80>)
 800126e:	f00a f975 	bl	800b55c <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8001272:	4802      	ldr	r0, [pc, #8]	@ (800127c <GetClockSourcePrint+0x6c>)
 8001274:	f00a f9da 	bl	800b62c <puts>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	0800c328 	.word	0x0800c328
 8001280:	431bde83 	.word	0x431bde83
 8001284:	0800c428 	.word	0x0800c428
 8001288:	0800c458 	.word	0x0800c458
 800128c:	0800c488 	.word	0x0800c488
 8001290:	0800c4b8 	.word	0x0800c4b8

08001294 <Decode_CKS_GetChecksum>:
    //     return 0;
    // }
}

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80012a0:	2352      	movs	r3, #82	@ 0x52
 80012a2:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	757b      	strb	r3, [r7, #21]

    // ck8 ^= *pData++; // MC Check 

    // ck8 ^= *pData++ & 0xC0; // CKT 6b clear. CKT Check
    // for (uint8_t i = 0; i < checksumsize; i++)
    for (uint8_t i = 0; i < checksumsize; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	75bb      	strb	r3, [r7, #22]
 80012b0:	e009      	b.n	80012c6 <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	4053      	eors	r3, r2
 80012be:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 80012c0:	7dbb      	ldrb	r3, [r7, #22]
 80012c2:	3301      	adds	r3, #1
 80012c4:	75bb      	strb	r3, [r7, #22]
 80012c6:	7dba      	ldrb	r2, [r7, #22]
 80012c8:	7d7b      	ldrb	r3, [r7, #21]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3f1      	bcc.n	80012b2 <Decode_CKS_GetChecksum+0x1e>
    }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	09db      	lsrs	r3, r3, #7
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4053      	eors	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4053      	eors	r3, r2
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4053      	eors	r3, r2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	099b      	lsrs	r3, r3, #6
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4053      	eors	r3, r2
 8001306:	b2da      	uxtb	r2, r3
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4053      	eors	r3, r2
 8001310:	b2da      	uxtb	r2, r3
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	4053      	eors	r3, r2
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	09db      	lsrs	r3, r3, #7
 8001322:	b2da      	uxtb	r2, r3
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	099b      	lsrs	r3, r3, #6
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4053      	eors	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	b2da      	uxtb	r2, r3
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4053      	eors	r3, r2
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	b2da      	uxtb	r2, r3
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4053      	eors	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	085b      	lsrs	r3, r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	4053      	eors	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 8001372:	7d3b      	ldrb	r3, [r7, #20]
 8001374:	015b      	lsls	r3, r3, #5
 8001376:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 8001378:	7cfb      	ldrb	r3, [r7, #19]
 800137a:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 800137c:	b25b      	sxtb	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 8001382:	7cbb      	ldrb	r3, [r7, #18]
 8001384:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 8001386:	b25b      	sxtb	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 800138c:	7c7b      	ldrb	r3, [r7, #17]
 800138e:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 8001390:	b25b      	sxtb	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 8001396:	7c3b      	ldrb	r3, [r7, #16]
 8001398:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80013a8:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <IOL_Decode_ReadWrite>:
    // printf(" Checksum Pass : %d\r\n", ChecksumTorF);
}

// start up page 1. IO-Link MC Read Write 판단 
static void IOL_Decode_ReadWrite (void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
    uint8_t Page_Write_ChecksumValue[1] = {0};
 80013be:	2300      	movs	r3, #0
 80013c0:	713b      	strb	r3, [r7, #4]

    // R/W   Read 체크
    if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 80013c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001470 <IOL_Decode_ReadWrite+0xb8>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f884 	bl	80014d4 <Decode_MC_ReadWrite>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d123      	bne.n	800141a <IOL_Decode_ReadWrite+0x62>
    {
        IOL_ENABLE;
 80013d2:	2201      	movs	r2, #1
 80013d4:	2140      	movs	r1, #64	@ 0x40
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013da:	f000 ff45 	bl	8002268 <HAL_GPIO_WritePin>

        IOL_Page1_Packet[0] = IOL_Page1_SeqValue[Page1_seq++];
 80013de:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <IOL_Decode_ReadWrite+0xbc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	b2d1      	uxtb	r1, r2
 80013e6:	4a23      	ldr	r2, [pc, #140]	@ (8001474 <IOL_Decode_ReadWrite+0xbc>)
 80013e8:	7011      	strb	r1, [r2, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <IOL_Decode_ReadWrite+0xc0>)
 80013ee:	5c9a      	ldrb	r2, [r3, r2]
 80013f0:	4b22      	ldr	r3, [pc, #136]	@ (800147c <IOL_Decode_ReadWrite+0xc4>)
 80013f2:	701a      	strb	r2, [r3, #0]
        IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(&IOL_Page1_Packet[0], 1);
 80013f4:	2101      	movs	r1, #1
 80013f6:	4821      	ldr	r0, [pc, #132]	@ (800147c <IOL_Decode_ReadWrite+0xc4>)
 80013f8:	f7ff ff4c 	bl	8001294 <Decode_CKS_GetChecksum>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <IOL_Decode_ReadWrite+0xc4>)
 8001402:	705a      	strb	r2, [r3, #1]

        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) IOL_Page1_Packet, 2) != HAL_OK)
 8001404:	2202      	movs	r2, #2
 8001406:	491d      	ldr	r1, [pc, #116]	@ (800147c <IOL_Decode_ReadWrite+0xc4>)
 8001408:	481d      	ldr	r0, [pc, #116]	@ (8001480 <IOL_Decode_ReadWrite+0xc8>)
 800140a:	f004 f9d9 	bl	80057c0 <HAL_UART_Transmit_IT>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d028      	beq.n	8001466 <IOL_Decode_ReadWrite+0xae>
        {
            Error_Handler();
 8001414:	f7ff fa17 	bl	8000846 <Error_Handler>
            stateIOLseq = IOL_PreOP;
        }
        // HAL_UART_Transmit(&huart1,(uint8_t *) Decode_CKS_GetChecksum(0x52, 0), 1, 10);
        // IOL_DISABLE;
    }
}
 8001418:	e025      	b.n	8001466 <IOL_Decode_ReadWrite+0xae>
    else if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Write)
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <IOL_Decode_ReadWrite+0xb8>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f858 	bl	80014d4 <Decode_MC_ReadWrite>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d11d      	bne.n	8001466 <IOL_Decode_ReadWrite+0xae>
        IOL_ENABLE;
 800142a:	2201      	movs	r2, #1
 800142c:	2140      	movs	r1, #64	@ 0x40
 800142e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001432:	f000 ff19 	bl	8002268 <HAL_GPIO_WritePin>
        Page_Write_ChecksumValue[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 8001436:	2100      	movs	r1, #0
 8001438:	4812      	ldr	r0, [pc, #72]	@ (8001484 <IOL_Decode_ReadWrite+0xcc>)
 800143a:	f7ff ff2b 	bl	8001294 <Decode_CKS_GetChecksum>
 800143e:	4603      	mov	r3, r0
 8001440:	713b      	strb	r3, [r7, #4]
        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) Page_Write_ChecksumValue, 1) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2201      	movs	r2, #1
 8001446:	4619      	mov	r1, r3
 8001448:	480d      	ldr	r0, [pc, #52]	@ (8001480 <IOL_Decode_ReadWrite+0xc8>)
 800144a:	f004 f9b9 	bl	80057c0 <HAL_UART_Transmit_IT>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <IOL_Decode_ReadWrite+0xa0>
            Error_Handler();
 8001454:	f7ff f9f7 	bl	8000846 <Error_Handler>
        if (uart1_rx_IDLE_buf[2] == 0x9A)
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <IOL_Decode_ReadWrite+0xb8>)
 800145a:	789b      	ldrb	r3, [r3, #2]
 800145c:	2b9a      	cmp	r3, #154	@ 0x9a
 800145e:	d102      	bne.n	8001466 <IOL_Decode_ReadWrite+0xae>
            stateIOLseq = IOL_PreOP;
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <IOL_Decode_ReadWrite+0xd0>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000b44 	.word	0x20000b44
 8001474:	20000baa 	.word	0x20000baa
 8001478:	20000004 	.word	0x20000004
 800147c:	20000ba8 	.word	0x20000ba8
 8001480:	20000260 	.word	0x20000260
 8001484:	20000011 	.word	0x20000011
 8001488:	20000bab 	.word	0x20000bab

0800148c <IOL_StartUp_Seq_Page>:
    // }
}

// IO-Link StartUp Seq Page 통신
void IOL_StartUp_Seq_Page (uint16_t size)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
    uint8_t rxdataSize = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
    uint8_t eventdebug = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	73bb      	strb	r3, [r7, #14]
    uint8_t Page_Write_ChecksumValue[1] = {0};
 800149e:	2300      	movs	r3, #0
 80014a0:	733b      	strb	r3, [r7, #12]

    rxdataSize = (uint8_t)size;
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	73fb      	strb	r3, [r7, #15]

    // State = StartUP ,   
    if (stateIOLseq == IOL_StartUp)
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <IOL_StartUp_Seq_Page+0x40>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <IOL_StartUp_Seq_Page+0x36>
    {
        // Channel = Page가 맞는지 구분
        if (Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]) == IOL_Channel_Page)
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <IOL_StartUp_Seq_Page+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f82c 	bl	8001510 <Print_MC_CommunicationChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <IOL_StartUp_Seq_Page+0x36>
        {
            IOL_Decode_ReadWrite();
 80014be:	f7ff ff7b 	bl	80013b8 <IOL_Decode_ReadWrite>
    }
    else if (stateIOLseq == IOL_PreOP)
    {
        // IOL_State_PreOP(size);
    }
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000bab 	.word	0x20000bab
 80014d0:	20000b44 	.word	0x20000b44

080014d4 <Decode_MC_ReadWrite>:
    #endif
  }
}

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	09db      	lsrs	r3, r3, #7
 80014ea:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <Decode_MC_ReadWrite+0x24>
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d002      	beq.n	80014fc <Decode_MC_ReadWrite+0x28>
 80014f6:	e003      	b.n	8001500 <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 80014f8:	2300      	movs	r3, #0
 80014fa:	e002      	b.n	8001502 <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 8001500:	2358      	movs	r3, #88	@ 0x58
    }
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <Print_MC_CommunicationChannel>:

//     return MCdata & 0x03;
// }

static uint8_t Print_MC_CommunicationChannel (uint8_t Data)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	095b      	lsrs	r3, r3, #5
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d813      	bhi.n	800155c <Print_MC_CommunicationChannel+0x4c>
 8001534:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <Print_MC_CommunicationChannel+0x2c>)
 8001536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153a:	bf00      	nop
 800153c:	0800154d 	.word	0x0800154d
 8001540:	08001551 	.word	0x08001551
 8001544:	08001555 	.word	0x08001555
 8001548:	08001559 	.word	0x08001559
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 800154c:	2300      	movs	r3, #0
 800154e:	e005      	b.n	800155c <Print_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 8001550:	2301      	movs	r3, #1
 8001552:	e003      	b.n	800155c <Print_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8001554:	2302      	movs	r3, #2
 8001556:	e001      	b.n	800155c <Print_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8001558:	2303      	movs	r3, #3
 800155a:	e7ff      	b.n	800155c <Print_MC_CommunicationChannel+0x4c>
    }
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001568:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800156a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800156c:	f7ff fc8e 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	@ (80015a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <LoopForever+0xe>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	@ (80015b4 <LoopForever+0x16>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f00a f97d 	bl	800b894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159a:	f7ff f8cb 	bl	8000734 <main>

0800159e <LoopForever>:

LoopForever:
    b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   r0, =_estack
 80015a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80015ac:	0800c5b4 	.word	0x0800c5b4
  ldr r2, =_sbss
 80015b0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80015b4:	20001ecc 	.word	0x20001ecc

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>

080015ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f95b 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ca:	200f      	movs	r0, #15
 80015cc:	f000 f80e 	bl	80015ec <HAL_InitTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	71fb      	strb	r3, [r7, #7]
 80015da:	e001      	b.n	80015e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015dc:	f7ff fa60 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015e0:	79fb      	ldrb	r3, [r7, #7]

}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015f8:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <HAL_InitTick+0x68>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d022      	beq.n	8001646 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_InitTick+0x6c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <HAL_InitTick+0x68>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800160c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001610:	fbb2 f3f3 	udiv	r3, r2, r3
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f966 	bl	80018e6 <HAL_SYSTICK_Config>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10f      	bne.n	8001640 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	d809      	bhi.n	800163a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001626:	2200      	movs	r2, #0
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	f04f 30ff 	mov.w	r0, #4294967295
 800162e:	f000 f932 	bl	8001896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001632:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <HAL_InitTick+0x70>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	e007      	b.n	800164a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	e004      	b.n	800164a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e001      	b.n	800164a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000018 	.word	0x20000018
 8001658:	20000000 	.word	0x20000000
 800165c:	20000014 	.word	0x20000014

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_IncTick+0x1c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_IncTick+0x20>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4413      	add	r3, r2
 800166e:	4a03      	ldr	r2, [pc, #12]	@ (800167c <HAL_IncTick+0x1c>)
 8001670:	6013      	str	r3, [r2, #0]
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	20000bac 	.word	0x20000bac
 8001680:	20000018 	.word	0x20000018

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	@ (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000bac 	.word	0x20000bac

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d004      	beq.n	80016c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <HAL_Delay+0x40>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c0:	bf00      	nop
 80016c2:	f7ff ffdf 	bl	8001684 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d8f7      	bhi.n	80016c2 <HAL_Delay+0x26>
  {
  }
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000018 	.word	0x20000018

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4907      	ldr	r1, [pc, #28]	@ (800177c <__NVIC_EnableIRQ+0x38>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	@ (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	@ 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff29 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff40 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff90 	bl	80017d4 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5f 	bl	8001780 <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff33 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa4 	bl	800183c <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e08d      	b.n	8001a2e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	4b47      	ldr	r3, [pc, #284]	@ (8001a38 <HAL_DMA_Init+0x138>)
 800191a:	429a      	cmp	r2, r3
 800191c:	d80f      	bhi.n	800193e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	4b45      	ldr	r3, [pc, #276]	@ (8001a3c <HAL_DMA_Init+0x13c>)
 8001926:	4413      	add	r3, r2
 8001928:	4a45      	ldr	r2, [pc, #276]	@ (8001a40 <HAL_DMA_Init+0x140>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	009a      	lsls	r2, r3, #2
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a42      	ldr	r2, [pc, #264]	@ (8001a44 <HAL_DMA_Init+0x144>)
 800193a:	641a      	str	r2, [r3, #64]	@ 0x40
 800193c:	e00e      	b.n	800195c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b40      	ldr	r3, [pc, #256]	@ (8001a48 <HAL_DMA_Init+0x148>)
 8001946:	4413      	add	r3, r2
 8001948:	4a3d      	ldr	r2, [pc, #244]	@ (8001a40 <HAL_DMA_Init+0x140>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	009a      	lsls	r2, r3, #2
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a3c      	ldr	r2, [pc, #240]	@ (8001a4c <HAL_DMA_Init+0x14c>)
 800195a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001976:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fa76 	bl	8001ea0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019bc:	d102      	bne.n	80019c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d010      	beq.n	8001a04 <HAL_DMA_Init+0x104>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d80c      	bhi.n	8001a04 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fa96 	bl	8001f1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	e008      	b.n	8001a16 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40020407 	.word	0x40020407
 8001a3c:	bffdfff8 	.word	0xbffdfff8
 8001a40:	cccccccd 	.word	0xcccccccd
 8001a44:	40020000 	.word	0x40020000
 8001a48:	bffdfbf8 	.word	0xbffdfbf8
 8001a4c:	40020400 	.word	0x40020400

08001a50 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_DMA_Start_IT+0x20>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e066      	b.n	8001b3e <HAL_DMA_Start_IT+0xee>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d155      	bne.n	8001b30 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0201 	bic.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f9bb 	bl	8001e24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 020e 	orr.w	r2, r2, #14
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e00f      	b.n	8001ae8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 020a 	orr.w	r2, r2, #10
 8001ae6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b04:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e005      	b.n	8001b3c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d005      	beq.n	8001b6a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2204      	movs	r2, #4
 8001b62:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e037      	b.n	8001bda <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 020e 	bic.w	r2, r2, #14
 8001b78:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b88:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0201 	bic.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f003 021f 	and.w	r2, r3, #31
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bb6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00c      	beq.n	8001bda <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bd8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d00d      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2204      	movs	r2, #4
 8001c14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e047      	b.n	8001cbc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 020e 	bic.w	r2, r2, #14
 8001c3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c78:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00c      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c9a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	4798      	blx	r3
    }
  }
  return status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d026      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x7a>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d021      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d107      	bne.n	8001d1a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0204 	bic.w	r2, r2, #4
 8001d18:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f003 021f 	and.w	r2, r3, #31
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	2104      	movs	r1, #4
 8001d28:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d071      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d3e:	e06c      	b.n	8001e1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2202      	movs	r2, #2
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d02e      	beq.n	8001db2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d029      	beq.n	8001db2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10b      	bne.n	8001d84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 020a 	bic.w	r2, r2, #10
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	2102      	movs	r1, #2
 8001d92:	fa01 f202 	lsl.w	r2, r1, r2
 8001d96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d038      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001db0:	e033      	b.n	8001e1a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2208      	movs	r2, #8
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d02a      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d025      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 020e 	bic.w	r2, r2, #14
 8001dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f202 	lsl.w	r2, r1, r2
 8001df2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
}
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e3a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d004      	beq.n	8001e4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e4c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	f003 021f 	and.w	r2, r3, #31
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d108      	bne.n	8001e84 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e82:	e007      	b.n	8001e94 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d802      	bhi.n	8001eba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001eb4:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e001      	b.n	8001ebe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ebc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3b08      	subs	r3, #8
 8001eca:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	009a      	lsls	r2, r3, #2
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001eea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001efa:	bf00      	nop
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40020407 	.word	0x40020407
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	40020820 	.word	0x40020820
 8001f14:	cccccccd 	.word	0xcccccccd
 8001f18:	40020880 	.word	0x40020880

08001f1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f3e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2201      	movs	r2, #1
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	1000823f 	.word	0x1000823f
 8001f60:	40020940 	.word	0x40020940

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f72:	e15a      	b.n	800222a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 814c 	beq.w	8002224 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d005      	beq.n	8001fa4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d130      	bne.n	8002006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fda:	2201      	movs	r2, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f003 0201 	and.w	r2, r3, #1
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b03      	cmp	r3, #3
 8002010:	d017      	beq.n	8002042 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d123      	bne.n	8002096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	6939      	ldr	r1, [r7, #16]
 8002092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0203 	and.w	r2, r3, #3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80a6 	beq.w	8002224 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002248 <HAL_GPIO_Init+0x2e4>)
 80020da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002248 <HAL_GPIO_Init+0x2e4>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80020e4:	4b58      	ldr	r3, [pc, #352]	@ (8002248 <HAL_GPIO_Init+0x2e4>)
 80020e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f0:	4a56      	ldr	r2, [pc, #344]	@ (800224c <HAL_GPIO_Init+0x2e8>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800211a:	d01f      	beq.n	800215c <HAL_GPIO_Init+0x1f8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a4c      	ldr	r2, [pc, #304]	@ (8002250 <HAL_GPIO_Init+0x2ec>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d019      	beq.n	8002158 <HAL_GPIO_Init+0x1f4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a4b      	ldr	r2, [pc, #300]	@ (8002254 <HAL_GPIO_Init+0x2f0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <HAL_GPIO_Init+0x1f0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a4a      	ldr	r2, [pc, #296]	@ (8002258 <HAL_GPIO_Init+0x2f4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00d      	beq.n	8002150 <HAL_GPIO_Init+0x1ec>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a49      	ldr	r2, [pc, #292]	@ (800225c <HAL_GPIO_Init+0x2f8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <HAL_GPIO_Init+0x1e8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a48      	ldr	r2, [pc, #288]	@ (8002260 <HAL_GPIO_Init+0x2fc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_GPIO_Init+0x1e4>
 8002144:	2305      	movs	r3, #5
 8002146:	e00a      	b.n	800215e <HAL_GPIO_Init+0x1fa>
 8002148:	2306      	movs	r3, #6
 800214a:	e008      	b.n	800215e <HAL_GPIO_Init+0x1fa>
 800214c:	2304      	movs	r3, #4
 800214e:	e006      	b.n	800215e <HAL_GPIO_Init+0x1fa>
 8002150:	2303      	movs	r3, #3
 8002152:	e004      	b.n	800215e <HAL_GPIO_Init+0x1fa>
 8002154:	2302      	movs	r3, #2
 8002156:	e002      	b.n	800215e <HAL_GPIO_Init+0x1fa>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_GPIO_Init+0x1fa>
 800215c:	2300      	movs	r3, #0
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	f002 0203 	and.w	r2, r2, #3
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	4093      	lsls	r3, r2
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800216e:	4937      	ldr	r1, [pc, #220]	@ (800224c <HAL_GPIO_Init+0x2e8>)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800217c:	4b39      	ldr	r3, [pc, #228]	@ (8002264 <HAL_GPIO_Init+0x300>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021a0:	4a30      	ldr	r2, [pc, #192]	@ (8002264 <HAL_GPIO_Init+0x300>)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002264 <HAL_GPIO_Init+0x300>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ca:	4a26      	ldr	r2, [pc, #152]	@ (8002264 <HAL_GPIO_Init+0x300>)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_GPIO_Init+0x300>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002264 <HAL_GPIO_Init+0x300>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <HAL_GPIO_Init+0x300>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800221e:	4a11      	ldr	r2, [pc, #68]	@ (8002264 <HAL_GPIO_Init+0x300>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	f47f ae9d 	bne.w	8001f74 <HAL_GPIO_Init+0x10>
  }
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40021000 	.word	0x40021000
 800224c:	40010000 	.word	0x40010000
 8002250:	48000400 	.word	0x48000400
 8002254:	48000800 	.word	0x48000800
 8002258:	48000c00 	.word	0x48000c00
 800225c:	48001000 	.word	0x48001000
 8002260:	48001400 	.word	0x48001400
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002284:	e002      	b.n	800228c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	041a      	lsls	r2, r3, #16
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	43d9      	mvns	r1, r3
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	400b      	ands	r3, r1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022d6:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022e2:	4a05      	ldr	r2, [pc, #20]	@ (80022f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f806 	bl	80022fc <HAL_GPIO_EXTI_Callback>
  }
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40010400 	.word	0x40010400

080022fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0c0      	b.n	80024a6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f008 fd49 	bl	800add0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f005 f85f 	bl	800740e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e03e      	b.n	80023d4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	440b      	add	r3, r1
 8002364:	3311      	adds	r3, #17
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	3310      	adds	r3, #16
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	3313      	adds	r3, #19
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	3320      	adds	r3, #32
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	3324      	adds	r3, #36	@ 0x24
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	3301      	adds	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	791b      	ldrb	r3, [r3, #4]
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d3bb      	bcc.n	8002356 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e044      	b.n	800246e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	440b      	add	r3, r1
 8002460:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	3301      	adds	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	791b      	ldrb	r3, [r3, #4]
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	429a      	cmp	r2, r3
 8002476:	d3b5      	bcc.n	80023e4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002484:	f004 ffde 	bl	8007444 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7a9b      	ldrb	r3, [r3, #10]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f001 fc0e 	bl	8003cc0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_PCD_Start+0x16>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e012      	b.n	80024ea <HAL_PCD_Start+0x3c>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 ff85 	bl	80073e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f006 fd62 	bl	8008fa4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f006 fd67 	bl	8008fd2 <USB_ReadInterrupts>
 8002504:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fb06 	bl	8002b22 <PCD_EP_ISR_Handler>

    return;
 8002516:	e110      	b.n	800273a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251e:	2b00      	cmp	r3, #0
 8002520:	d013      	beq.n	800254a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800252a:	b29a      	uxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002534:	b292      	uxth	r2, r2
 8002536:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f008 fcd9 	bl	800aef2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002540:	2100      	movs	r1, #0
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f8fc 	bl	8002740 <HAL_PCD_SetAddress>

    return;
 8002548:	e0f7      	b.n	800273a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00c      	beq.n	800256e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002566:	b292      	uxth	r2, r2
 8002568:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800256c:	e0e5      	b.n	800273a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00c      	beq.n	8002592 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800258a:	b292      	uxth	r2, r2
 800258c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002590:	e0d3      	b.n	800273a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d034      	beq.n	8002606 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0204 	bic.w	r2, r2, #4
 80025ae:	b292      	uxth	r2, r2
 80025b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025bc:	b29a      	uxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0208 	bic.w	r2, r2, #8
 80025c6:	b292      	uxth	r2, r2
 80025c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025de:	2100      	movs	r1, #0
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f008 fe79 	bl	800b2d8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f008 fcbc 	bl	800af64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025fe:	b292      	uxth	r2, r2
 8002600:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002604:	e099      	b.n	800273a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800260c:	2b00      	cmp	r3, #0
 800260e:	d027      	beq.n	8002660 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0208 	orr.w	r2, r2, #8
 8002622:	b292      	uxth	r2, r2
 8002624:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002630:	b29a      	uxth	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800263a:	b292      	uxth	r2, r2
 800263c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002648:	b29a      	uxth	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0204 	orr.w	r2, r2, #4
 8002652:	b292      	uxth	r2, r2
 8002654:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f008 fc69 	bl	800af30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800265e:	e06c      	b.n	800273a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002666:	2b00      	cmp	r3, #0
 8002668:	d040      	beq.n	80026ec <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002672:	b29a      	uxth	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800267c:	b292      	uxth	r2, r2
 800267e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d12b      	bne.n	80026e4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0204 	orr.w	r2, r2, #4
 800269e:	b292      	uxth	r2, r2
 80026a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0208 	orr.w	r2, r2, #8
 80026b6:	b292      	uxth	r2, r2
 80026b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026da:	2101      	movs	r1, #1
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f008 fdfb 	bl	800b2d8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80026e2:	e02a      	b.n	800273a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f008 fc23 	bl	800af30 <HAL_PCD_SuspendCallback>
    return;
 80026ea:	e026      	b.n	800273a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00f      	beq.n	8002716 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026fe:	b29a      	uxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002708:	b292      	uxth	r2, r2
 800270a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f008 fbe1 	bl	800aed6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002714:	e011      	b.n	800273a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002732:	b292      	uxth	r2, r2
 8002734:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002738:	bf00      	nop
  }
}
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_PCD_SetAddress+0x1a>
 8002756:	2302      	movs	r3, #2
 8002758:	e012      	b.n	8002780 <HAL_PCD_SetAddress+0x40>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f006 fc03 	bl	8008f7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	4608      	mov	r0, r1
 8002792:	4611      	mov	r1, r2
 8002794:	461a      	mov	r2, r3
 8002796:	4603      	mov	r3, r0
 8002798:	70fb      	strb	r3, [r7, #3]
 800279a:	460b      	mov	r3, r1
 800279c:	803b      	strh	r3, [r7, #0]
 800279e:	4613      	mov	r3, r2
 80027a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da0e      	bge.n	80027cc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 0207 	and.w	r2, r3, #7
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	3310      	adds	r3, #16
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	705a      	strb	r2, [r3, #1]
 80027ca:	e00e      	b.n	80027ea <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 0207 	and.w	r2, r3, #7
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80027f6:	883b      	ldrh	r3, [r7, #0]
 80027f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	78ba      	ldrb	r2, [r7, #2]
 8002804:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002806:	78bb      	ldrb	r3, [r7, #2]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d102      	bne.n	8002812 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_PCD_EP_Open+0x98>
 800281c:	2302      	movs	r3, #2
 800281e:	e00e      	b.n	800283e <HAL_PCD_EP_Open+0xb6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68f9      	ldr	r1, [r7, #12]
 800282e:	4618      	mov	r0, r3
 8002830:	f004 fe26 	bl	8007480 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800283c:	7afb      	ldrb	r3, [r7, #11]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002856:	2b00      	cmp	r3, #0
 8002858:	da0e      	bge.n	8002878 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	f003 0207 	and.w	r2, r3, #7
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	3310      	adds	r3, #16
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	705a      	strb	r2, [r3, #1]
 8002876:	e00e      	b.n	8002896 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	f003 0207 	and.w	r2, r3, #7
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	b2da      	uxtb	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_PCD_EP_Close+0x6a>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e00e      	b.n	80028ce <HAL_PCD_EP_Close+0x88>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	4618      	mov	r0, r3
 80028c0:	f005 fac6 	bl	8007e50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	460b      	mov	r3, r1
 80028e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	f003 0207 	and.w	r2, r3, #7
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2200      	movs	r2, #0
 8002914:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	b2da      	uxtb	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6979      	ldr	r1, [r7, #20]
 8002928:	4618      	mov	r0, r3
 800292a:	f005 fc7e 	bl	800822a <USB_EPStartXfer>

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	f003 0207 	and.w	r2, r3, #7
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	440b      	add	r3, r1
 8002956:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	460b      	mov	r3, r1
 8002976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002978:	7afb      	ldrb	r3, [r7, #11]
 800297a:	f003 0207 	and.w	r2, r3, #7
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	3310      	adds	r3, #16
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2201      	movs	r2, #1
 80029b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b4:	7afb      	ldrb	r3, [r7, #11]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6979      	ldr	r1, [r7, #20]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f005 fc2f 	bl	800822a <USB_EPStartXfer>

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	7912      	ldrb	r2, [r2, #4]
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e03e      	b.n	8002a72 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da0e      	bge.n	8002a1a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	f003 0207 	and.w	r2, r3, #7
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	3310      	adds	r3, #16
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	705a      	strb	r2, [r3, #1]
 8002a18:	e00c      	b.n	8002a34 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_PCD_EP_SetStall+0x7e>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e00e      	b.n	8002a72 <HAL_PCD_EP_SetStall+0x9c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68f9      	ldr	r1, [r7, #12]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f006 f990 	bl	8008d88 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	7912      	ldrb	r2, [r2, #4]
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e040      	b.n	8002b1a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	da0e      	bge.n	8002abe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	f003 0207 	and.w	r2, r3, #7
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	3310      	adds	r3, #16
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	705a      	strb	r2, [r3, #1]
 8002abc:	e00e      	b.n	8002adc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 0207 	and.w	r2, r3, #7
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_PCD_EP_ClrStall+0x82>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e00e      	b.n	8002b1a <HAL_PCD_EP_ClrStall+0xa0>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68f9      	ldr	r1, [r7, #12]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f006 f98d 	bl	8008e2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b092      	sub	sp, #72	@ 0x48
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b2a:	e333      	b.n	8003194 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b34:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b36:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002b42:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 8108 	bne.w	8002d5c <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d14c      	bne.n	8002bf0 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b66:	813b      	strh	r3, [r7, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	893b      	ldrh	r3, [r7, #8]
 8002b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3310      	adds	r3, #16
 8002b7e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	441a      	add	r2, r3
 8002bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bb4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f008 f972 	bl	800aea2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7b1b      	ldrb	r3, [r3, #12]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 82e5 	beq.w	8003194 <PCD_EP_ISR_Handler+0x672>
 8002bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 82e0 	bne.w	8003194 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7b1b      	ldrb	r3, [r3, #12]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	731a      	strb	r2, [r3, #12]
 8002bee:	e2d1      	b.n	8003194 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bf6:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002c02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d032      	beq.n	8002c70 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c30:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c3e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c42:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	f006 fa16 	bl	8009076 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c56:	4013      	ands	r3, r2
 8002c58:	817b      	strh	r3, [r7, #10]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	897a      	ldrh	r2, [r7, #10]
 8002c60:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c64:	b292      	uxth	r2, r2
 8002c66:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f008 f8ed 	bl	800ae48 <HAL_PCD_SetupStageCallback>
 8002c6e:	e291      	b.n	8003194 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c70:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f280 828d 	bge.w	8003194 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c86:	4013      	ands	r3, r2
 8002c88:	81fb      	strh	r3, [r7, #14]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	89fa      	ldrh	r2, [r7, #14]
 8002c90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c94:	b292      	uxth	r2, r2
 8002c96:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cbe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d019      	beq.n	8002cfc <PCD_EP_ISR_Handler+0x1da>
 8002cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cd6:	6959      	ldr	r1, [r3, #20]
 8002cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cda:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cde:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	f006 f9c8 	bl	8009076 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	441a      	add	r2, r3
 8002cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f008 f8b8 	bl	800ae6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 8242 	bne.w	8003194 <PCD_EP_ISR_Handler+0x672>
 8002d10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002d12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002d16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d1a:	f000 823b 	beq.w	8003194 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2e:	81bb      	strh	r3, [r7, #12]
 8002d30:	89bb      	ldrh	r3, [r7, #12]
 8002d32:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002d36:	81bb      	strh	r3, [r7, #12]
 8002d38:	89bb      	ldrh	r3, [r7, #12]
 8002d3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d3e:	81bb      	strh	r3, [r7, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	89bb      	ldrh	r3, [r7, #12]
 8002d46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8013      	strh	r3, [r2, #0]
 8002d5a:	e21b      	b.n	8003194 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d6e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f280 80f1 	bge.w	8002f5a <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d8e:	4013      	ands	r3, r2
 8002d90:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002da2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002da6:	b292      	uxth	r2, r2
 8002da8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002daa:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc2:	7b1b      	ldrb	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d123      	bne.n	8002e10 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8002df0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 808b 	beq.w	8002f10 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e00:	6959      	ldr	r1, [r3, #20]
 8002e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e04:	88da      	ldrh	r2, [r3, #6]
 8002e06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e0a:	f006 f934 	bl	8009076 <USB_ReadPMA>
 8002e0e:	e07f      	b.n	8002f10 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e12:	78db      	ldrb	r3, [r3, #3]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d109      	bne.n	8002e2c <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f9c6 	bl	80031b0 <HAL_PCD_EP_DB_Receive>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002e2a:	e071      	b.n	8002f10 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e46:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d022      	beq.n	8002ecc <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002eae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d02c      	beq.n	8002f10 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ebc:	6959      	ldr	r1, [r3, #20]
 8002ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec0:	891a      	ldrh	r2, [r3, #8]
 8002ec2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ec6:	f006 f8d6 	bl	8009076 <USB_ReadPMA>
 8002eca:	e021      	b.n	8002f10 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002ef4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f02:	6959      	ldr	r1, [r3, #20]
 8002f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f06:	895a      	ldrh	r2, [r3, #10]
 8002f08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f0c:	f006 f8b3 	bl	8009076 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f18:	441a      	add	r2, r3
 8002f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f26:	441a      	add	r2, r3
 8002f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f2a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <PCD_EP_ISR_Handler+0x41e>
 8002f34:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d206      	bcs.n	8002f4e <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f007 ff90 	bl	800ae6c <HAL_PCD_DataOutStageCallback>
 8002f4c:	e005      	b.n	8002f5a <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f54:	4618      	mov	r0, r3
 8002f56:	f005 f968 	bl	800822a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8117 	beq.w	8003194 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f66:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	3310      	adds	r3, #16
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f94:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	441a      	add	r2, r3
 8002fa4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb4:	78db      	ldrb	r3, [r3, #3]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	f040 80a1 	bne.w	80030fe <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8002fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc4:	7b1b      	ldrb	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8092 	beq.w	80030f0 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d046      	beq.n	8003064 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd8:	785b      	ldrb	r3, [r3, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d126      	bne.n	800302c <PCD_EP_ISR_Handler+0x50a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	00da      	lsls	r2, r3, #3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	4413      	add	r3, r2
 8003000:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003010:	b29a      	uxth	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	801a      	strh	r2, [r3, #0]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003024:	b29a      	uxth	r2, r3
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	e061      	b.n	80030f0 <PCD_EP_ISR_Handler+0x5ce>
 800302c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800302e:	785b      	ldrb	r3, [r3, #1]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d15d      	bne.n	80030f0 <PCD_EP_ISR_Handler+0x5ce>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003042:	b29b      	uxth	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	00da      	lsls	r2, r3, #3
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2200      	movs	r2, #0
 8003060:	801a      	strh	r2, [r3, #0]
 8003062:	e045      	b.n	80030f0 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800306a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800306c:	785b      	ldrb	r3, [r3, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d126      	bne.n	80030c0 <PCD_EP_ISR_Handler+0x59e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003080:	b29b      	uxth	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	4413      	add	r3, r2
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
 800308a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	00da      	lsls	r2, r3, #3
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	4413      	add	r3, r2
 8003094:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003098:	623b      	str	r3, [r7, #32]
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	801a      	strh	r2, [r3, #0]
 80030be:	e017      	b.n	80030f0 <PCD_EP_ISR_Handler+0x5ce>
 80030c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d113      	bne.n	80030f0 <PCD_EP_ISR_Handler+0x5ce>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d6:	4413      	add	r3, r2
 80030d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	00da      	lsls	r2, r3, #3
 80030e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e2:	4413      	add	r3, r2
 80030e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ec:	2200      	movs	r2, #0
 80030ee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f007 fed3 	bl	800aea2 <HAL_PCD_DataInStageCallback>
 80030fc:	e04a      	b.n	8003194 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80030fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d13f      	bne.n	8003188 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	4413      	add	r3, r2
 8003122:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800312c:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800312e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003134:	429a      	cmp	r2, r3
 8003136:	d906      	bls.n	8003146 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800313e:	1ad2      	subs	r2, r2, r3
 8003140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003142:	619a      	str	r2, [r3, #24]
 8003144:	e002      	b.n	800314c <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003148:	2200      	movs	r2, #0
 800314a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800314c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f007 fea1 	bl	800aea2 <HAL_PCD_DataInStageCallback>
 8003160:	e018      	b.n	8003194 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003168:	441a      	add	r2, r3
 800316a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800316c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800316e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003174:	441a      	add	r2, r3
 8003176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003178:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003180:	4618      	mov	r0, r3
 8003182:	f005 f852 	bl	800822a <USB_EPStartXfer>
 8003186:	e005      	b.n	8003194 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003188:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800318a:	461a      	mov	r2, r3
 800318c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f917 	bl	80033c2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800319c:	b29b      	uxth	r3, r3
 800319e:	b21b      	sxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f6ff acc3 	blt.w	8002b2c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3748      	adds	r7, #72	@ 0x48
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d07c      	beq.n	80032c2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	8b7b      	ldrh	r3, [r7, #26]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d306      	bcc.n	8003206 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	8b7b      	ldrh	r3, [r7, #26]
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	619a      	str	r2, [r3, #24]
 8003204:	e002      	b.n	800320c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d123      	bne.n	800325c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800322a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800322e:	833b      	strh	r3, [r7, #24]
 8003230:	8b3b      	ldrh	r3, [r7, #24]
 8003232:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003236:	833b      	strh	r3, [r7, #24]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	441a      	add	r2, r3
 8003246:	8b3b      	ldrh	r3, [r7, #24]
 8003248:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800324c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003258:	b29b      	uxth	r3, r3
 800325a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01f      	beq.n	80032a6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800327c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003280:	82fb      	strh	r3, [r7, #22]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	441a      	add	r2, r3
 8003290:	8afb      	ldrh	r3, [r7, #22]
 8003292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800329a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800329e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032a6:	8b7b      	ldrh	r3, [r7, #26]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8085 	beq.w	80033b8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6959      	ldr	r1, [r3, #20]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	891a      	ldrh	r2, [r3, #8]
 80032ba:	8b7b      	ldrh	r3, [r7, #26]
 80032bc:	f005 fedb 	bl	8009076 <USB_ReadPMA>
 80032c0:	e07a      	b.n	80033b8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	8b7b      	ldrh	r3, [r7, #26]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d306      	bcc.n	8003300 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	8b7b      	ldrh	r3, [r7, #26]
 80032f8:	1ad2      	subs	r2, r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	619a      	str	r2, [r3, #24]
 80032fe:	e002      	b.n	8003306 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d123      	bne.n	8003356 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003328:	83fb      	strh	r3, [r7, #30]
 800332a:	8bfb      	ldrh	r3, [r7, #30]
 800332c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003330:	83fb      	strh	r3, [r7, #30]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	441a      	add	r2, r3
 8003340:	8bfb      	ldrh	r3, [r7, #30]
 8003342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800334a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800334e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003352:	b29b      	uxth	r3, r3
 8003354:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11f      	bne.n	80033a0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337a:	83bb      	strh	r3, [r7, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	8bbb      	ldrh	r3, [r7, #28]
 800338c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003398:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800339c:	b29b      	uxth	r3, r3
 800339e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033a0:	8b7b      	ldrh	r3, [r7, #26]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	6959      	ldr	r1, [r3, #20]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	895a      	ldrh	r2, [r3, #10]
 80033b2:	8b7b      	ldrh	r3, [r7, #26]
 80033b4:	f005 fe5f 	bl	8009076 <USB_ReadPMA>
    }
  }

  return count;
 80033b8:	8b7b      	ldrh	r3, [r7, #26]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b0a6      	sub	sp, #152	@ 0x98
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 81f7 	beq.w	80037ca <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003400:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800340c:	429a      	cmp	r2, r3
 800340e:	d907      	bls.n	8003420 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	619a      	str	r2, [r3, #24]
 800341e:	e002      	b.n	8003426 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2200      	movs	r2, #0
 8003424:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 80e1 	bne.w	80035f2 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d126      	bne.n	8003486 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	633b      	str	r3, [r7, #48]	@ 0x30
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003446:	b29b      	uxth	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344c:	4413      	add	r3, r2
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	00da      	lsls	r2, r3, #3
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	4413      	add	r3, r2
 800345a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800345e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800346a:	b29a      	uxth	r2, r3
 800346c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346e:	801a      	strh	r2, [r3, #0]
 8003470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800347e:	b29a      	uxth	r2, r3
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003482:	801a      	strh	r2, [r3, #0]
 8003484:	e01a      	b.n	80034bc <HAL_PCD_EP_DB_Transmit+0xfa>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d116      	bne.n	80034bc <HAL_PCD_EP_DB_Transmit+0xfa>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a2:	4413      	add	r3, r2
 80034a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	00da      	lsls	r2, r3, #3
 80034ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ae:	4413      	add	r3, r2
 80034b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b8:	2200      	movs	r2, #0
 80034ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d126      	bne.n	8003518 <HAL_PCD_EP_DB_Transmit+0x156>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034d8:	b29b      	uxth	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	4413      	add	r3, r2
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	00da      	lsls	r2, r3, #3
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	4413      	add	r3, r2
 80034ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	801a      	strh	r2, [r3, #0]
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800350c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003510:	b29a      	uxth	r2, r3
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	801a      	strh	r2, [r3, #0]
 8003516:	e017      	b.n	8003548 <HAL_PCD_EP_DB_Transmit+0x186>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	785b      	ldrb	r3, [r3, #1]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d113      	bne.n	8003548 <HAL_PCD_EP_DB_Transmit+0x186>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	4413      	add	r3, r2
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	00da      	lsls	r2, r3, #3
 8003538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353a:	4413      	add	r3, r2
 800353c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	2200      	movs	r2, #0
 8003546:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	78db      	ldrb	r3, [r3, #3]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d123      	bne.n	8003598 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800356a:	837b      	strh	r3, [r7, #26]
 800356c:	8b7b      	ldrh	r3, [r7, #26]
 800356e:	f083 0320 	eor.w	r3, r3, #32
 8003572:	837b      	strh	r3, [r7, #26]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	8b7b      	ldrh	r3, [r7, #26]
 8003584:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003588:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800358c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003594:	b29b      	uxth	r3, r3
 8003596:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	4619      	mov	r1, r3
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f007 fc7f 	bl	800aea2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01f      	beq.n	80035ee <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c8:	833b      	strh	r3, [r7, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	441a      	add	r2, r3
 80035d8:	8b3b      	ldrh	r3, [r7, #24]
 80035da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e31f      	b.n	8003c32 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d021      	beq.n	8003640 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003616:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	441a      	add	r2, r3
 8003628:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800362c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363c:	b29b      	uxth	r3, r3
 800363e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003646:	2b01      	cmp	r3, #1
 8003648:	f040 82ca 	bne.w	8003be0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003654:	441a      	add	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003662:	441a      	add	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6a1a      	ldr	r2, [r3, #32]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d309      	bcc.n	8003688 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6a1a      	ldr	r2, [r3, #32]
 800367e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003680:	1ad2      	subs	r2, r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	621a      	str	r2, [r3, #32]
 8003686:	e015      	b.n	80036b4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003690:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003694:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800369e:	e009      	b.n	80036b4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2200      	movs	r2, #0
 80036b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	785b      	ldrb	r3, [r3, #1]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d15f      	bne.n	800377c <HAL_PCD_EP_DB_Transmit+0x3ba>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d0:	4413      	add	r3, r2
 80036d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	00da      	lsls	r2, r3, #3
 80036da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036dc:	4413      	add	r3, r2
 80036de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f2:	801a      	strh	r2, [r3, #0]
 80036f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <HAL_PCD_EP_DB_Transmit+0x34e>
 80036fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003708:	b29a      	uxth	r2, r3
 800370a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e051      	b.n	80037b4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003712:	2b3e      	cmp	r3, #62	@ 0x3e
 8003714:	d816      	bhi.n	8003744 <HAL_PCD_EP_DB_Transmit+0x382>
 8003716:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	653b      	str	r3, [r7, #80]	@ 0x50
 800371c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003728:	3301      	adds	r3, #1
 800372a:	653b      	str	r3, [r7, #80]	@ 0x50
 800372c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29a      	uxth	r2, r3
 8003732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003734:	b29b      	uxth	r3, r3
 8003736:	029b      	lsls	r3, r3, #10
 8003738:	b29b      	uxth	r3, r3
 800373a:	4313      	orrs	r3, r2
 800373c:	b29a      	uxth	r2, r3
 800373e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	e037      	b.n	80037b4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003744:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	653b      	str	r3, [r7, #80]	@ 0x50
 800374a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <HAL_PCD_EP_DB_Transmit+0x398>
 8003754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003756:	3b01      	subs	r3, #1
 8003758:	653b      	str	r3, [r7, #80]	@ 0x50
 800375a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29a      	uxth	r2, r3
 8003760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003762:	b29b      	uxth	r3, r3
 8003764:	029b      	lsls	r3, r3, #10
 8003766:	b29b      	uxth	r3, r3
 8003768:	4313      	orrs	r3, r2
 800376a:	b29b      	uxth	r3, r3
 800376c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003774:	b29a      	uxth	r2, r3
 8003776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003778:	801a      	strh	r2, [r3, #0]
 800377a:	e01b      	b.n	80037b4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	785b      	ldrb	r3, [r3, #1]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d117      	bne.n	80037b4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003792:	b29b      	uxth	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003798:	4413      	add	r3, r2
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	00da      	lsls	r2, r3, #3
 80037a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037a4:	4413      	add	r3, r2
 80037a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	6959      	ldr	r1, [r3, #20]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	891a      	ldrh	r2, [r3, #8]
 80037c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f005 fc15 	bl	8008ff2 <USB_WritePMA>
 80037c8:	e20a      	b.n	8003be0 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ee:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d307      	bcc.n	800380e <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003806:	1ad2      	subs	r2, r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	619a      	str	r2, [r3, #24]
 800380c:	e002      	b.n	8003814 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f040 80f6 	bne.w	8003a0a <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	785b      	ldrb	r3, [r3, #1]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d126      	bne.n	8003874 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	677b      	str	r3, [r7, #116]	@ 0x74
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003834:	b29b      	uxth	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800383a:	4413      	add	r3, r2
 800383c:	677b      	str	r3, [r7, #116]	@ 0x74
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	00da      	lsls	r2, r3, #3
 8003844:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003846:	4413      	add	r3, r2
 8003848:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800384c:	673b      	str	r3, [r7, #112]	@ 0x70
 800384e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003858:	b29a      	uxth	r2, r3
 800385a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800386c:	b29a      	uxth	r2, r3
 800386e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	e01a      	b.n	80038aa <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d116      	bne.n	80038aa <HAL_PCD_EP_DB_Transmit+0x4e8>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800388a:	b29b      	uxth	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003890:	4413      	add	r3, r2
 8003892:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	00da      	lsls	r2, r3, #3
 800389a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800389c:	4413      	add	r3, r2
 800389e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038a6:	2200      	movs	r2, #0
 80038a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	785b      	ldrb	r3, [r3, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d12f      	bne.n	800391a <HAL_PCD_EP_DB_Transmit+0x558>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038d2:	4413      	add	r3, r2
 80038d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	00da      	lsls	r2, r3, #3
 80038de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e2:	4413      	add	r3, r2
 80038e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800390c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003910:	b29a      	uxth	r2, r3
 8003912:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003916:	801a      	strh	r2, [r3, #0]
 8003918:	e01c      	b.n	8003954 <HAL_PCD_EP_DB_Transmit+0x592>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d118      	bne.n	8003954 <HAL_PCD_EP_DB_Transmit+0x592>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800392a:	b29b      	uxth	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003932:	4413      	add	r3, r2
 8003934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	00da      	lsls	r2, r3, #3
 800393e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003942:	4413      	add	r3, r2
 8003944:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003948:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800394c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003950:	2200      	movs	r2, #0
 8003952:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	78db      	ldrb	r3, [r3, #3]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d127      	bne.n	80039ac <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003976:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800397a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800397e:	f083 0320 	eor.w	r3, r3, #32
 8003982:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	441a      	add	r2, r3
 8003994:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800399c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	4619      	mov	r1, r3
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f007 fa75 	bl	800aea2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039dc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	441a      	add	r2, r3
 80039ee:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80039f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e113      	b.n	8003c32 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d121      	bne.n	8003a58 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	441a      	add	r2, r3
 8003a40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	f040 80be 	bne.w	8003be0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a6c:	441a      	add	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a7a:	441a      	add	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d309      	bcc.n	8003aa0 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6a1a      	ldr	r2, [r3, #32]
 8003a96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a98:	1ad2      	subs	r2, r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	621a      	str	r2, [r3, #32]
 8003a9e:	e015      	b.n	8003acc <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003aa8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003aac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ab6:	e009      	b.n	8003acc <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	785b      	ldrb	r3, [r3, #1]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d15f      	bne.n	8003b9a <HAL_PCD_EP_DB_Transmit+0x7d8>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aee:	4413      	add	r3, r2
 8003af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	00da      	lsls	r2, r3, #3
 8003af8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003afa:	4413      	add	r3, r2
 8003afc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b00:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b10:	801a      	strh	r2, [r3, #0]
 8003b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <HAL_PCD_EP_DB_Transmit+0x76c>
 8003b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b2a:	801a      	strh	r2, [r3, #0]
 8003b2c:	e04e      	b.n	8003bcc <HAL_PCD_EP_DB_Transmit+0x80a>
 8003b2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b30:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b32:	d816      	bhi.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003b34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_PCD_EP_DB_Transmit+0x788>
 8003b44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b46:	3301      	adds	r3, #1
 8003b48:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b5e:	801a      	strh	r2, [r3, #0]
 8003b60:	e034      	b.n	8003bcc <HAL_PCD_EP_DB_Transmit+0x80a>
 8003b62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003b72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b74:	3b01      	subs	r3, #1
 8003b76:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	029b      	lsls	r3, r3, #10
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	4313      	orrs	r3, r2
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b96:	801a      	strh	r2, [r3, #0]
 8003b98:	e018      	b.n	8003bcc <HAL_PCD_EP_DB_Transmit+0x80a>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	785b      	ldrb	r3, [r3, #1]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d114      	bne.n	8003bcc <HAL_PCD_EP_DB_Transmit+0x80a>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bb0:	4413      	add	r3, r2
 8003bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	00da      	lsls	r2, r3, #3
 8003bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	6959      	ldr	r1, [r3, #20]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	895a      	ldrh	r2, [r3, #10]
 8003bd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f005 fa09 	bl	8008ff2 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bfa:	82fb      	strh	r3, [r7, #22]
 8003bfc:	8afb      	ldrh	r3, [r7, #22]
 8003bfe:	f083 0310 	eor.w	r3, r3, #16
 8003c02:	82fb      	strh	r3, [r7, #22]
 8003c04:	8afb      	ldrh	r3, [r7, #22]
 8003c06:	f083 0320 	eor.w	r3, r3, #32
 8003c0a:	82fb      	strh	r3, [r7, #22]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	8afb      	ldrh	r3, [r7, #22]
 8003c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3798      	adds	r7, #152	@ 0x98
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b087      	sub	sp, #28
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	817b      	strh	r3, [r7, #10]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c4c:	897b      	ldrh	r3, [r7, #10]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00b      	beq.n	8003c70 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c58:	897b      	ldrh	r3, [r7, #10]
 8003c5a:	f003 0207 	and.w	r2, r3, #7
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	3310      	adds	r3, #16
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e009      	b.n	8003c84 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c70:	897a      	ldrh	r2, [r7, #10]
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c84:	893b      	ldrh	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d107      	bne.n	8003c9a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	80da      	strh	r2, [r3, #6]
 8003c98:	e00b      	b.n	8003cb2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f043 0302 	orr.w	r3, r3, #2
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d141      	bne.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d22:	4b4b      	ldr	r3, [pc, #300]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d2e:	d131      	bne.n	8003d94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d30:	4b47      	ldr	r3, [pc, #284]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d36:	4a46      	ldr	r2, [pc, #280]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d40:	4b43      	ldr	r3, [pc, #268]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d48:	4a41      	ldr	r2, [pc, #260]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d50:	4b40      	ldr	r3, [pc, #256]	@ (8003e54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2232      	movs	r2, #50	@ 0x32
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	0c9b      	lsrs	r3, r3, #18
 8003d62:	3301      	adds	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d66:	e002      	b.n	8003d6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6e:	4b38      	ldr	r3, [pc, #224]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7a:	d102      	bne.n	8003d82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f2      	bne.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d82:	4b33      	ldr	r3, [pc, #204]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d8e:	d158      	bne.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e057      	b.n	8003e44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d94:	4b2e      	ldr	r3, [pc, #184]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003da0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003da4:	e04d      	b.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dac:	d141      	bne.n	8003e32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dae:	4b28      	ldr	r3, [pc, #160]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dba:	d131      	bne.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dbc:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dc2:	4a23      	ldr	r2, [pc, #140]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dcc:	4b20      	ldr	r3, [pc, #128]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2232      	movs	r2, #50	@ 0x32
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	0c9b      	lsrs	r3, r3, #18
 8003dee:	3301      	adds	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df2:	e002      	b.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfa:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e06:	d102      	bne.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f2      	bne.n	8003df4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e0e:	4b10      	ldr	r3, [pc, #64]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1a:	d112      	bne.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e011      	b.n	8003e44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e20:	4b0b      	ldr	r3, [pc, #44]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e26:	4a0a      	ldr	r2, [pc, #40]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e30:	e007      	b.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e32:	4b07      	ldr	r3, [pc, #28]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e3a:	4a05      	ldr	r2, [pc, #20]	@ (8003e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40007000 	.word	0x40007000
 8003e54:	20000000 	.word	0x20000000
 8003e58:	431bde83 	.word	0x431bde83

08003e5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e60:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a04      	ldr	r2, [pc, #16]	@ (8003e78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e6a:	6093      	str	r3, [r2, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40007000 	.word	0x40007000

08003e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e2fe      	b.n	800448c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d075      	beq.n	8003f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9a:	4b97      	ldr	r3, [pc, #604]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea4:	4b94      	ldr	r3, [pc, #592]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b0c      	cmp	r3, #12
 8003eb2:	d102      	bne.n	8003eba <HAL_RCC_OscConfig+0x3e>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d002      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x44>
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	4b8d      	ldr	r3, [pc, #564]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d05b      	beq.n	8003f84 <HAL_RCC_OscConfig+0x108>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d157      	bne.n	8003f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e2d9      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee0:	d106      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x74>
 8003ee2:	4b85      	ldr	r3, [pc, #532]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a84      	ldr	r2, [pc, #528]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e01d      	b.n	8003f2c <HAL_RCC_OscConfig+0xb0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x98>
 8003efa:	4b7f      	ldr	r3, [pc, #508]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7e      	ldr	r2, [pc, #504]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b7c      	ldr	r3, [pc, #496]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a7b      	ldr	r2, [pc, #492]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e00b      	b.n	8003f2c <HAL_RCC_OscConfig+0xb0>
 8003f14:	4b78      	ldr	r3, [pc, #480]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a77      	ldr	r2, [pc, #476]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b75      	ldr	r3, [pc, #468]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a74      	ldr	r2, [pc, #464]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d013      	beq.n	8003f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fd fba6 	bl	8001684 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fd fba2 	bl	8001684 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	@ 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e29e      	b.n	800448c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0xc0>
 8003f5a:	e014      	b.n	8003f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fd fb92 	bl	8001684 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fd fb8e 	bl	8001684 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	@ 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e28a      	b.n	800448c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f76:	4b60      	ldr	r3, [pc, #384]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0xe8>
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d075      	beq.n	800407e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f92:	4b59      	ldr	r3, [pc, #356]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f9c:	4b56      	ldr	r3, [pc, #344]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b0c      	cmp	r3, #12
 8003faa:	d102      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x136>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x13c>
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d11f      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x154>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e25d      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd0:	4b49      	ldr	r3, [pc, #292]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	4946      	ldr	r1, [pc, #280]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fe4:	4b45      	ldr	r3, [pc, #276]	@ (80040fc <HAL_RCC_OscConfig+0x280>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fd faff 	bl	80015ec <HAL_InitTick>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d043      	beq.n	800407c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e249      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d023      	beq.n	8004048 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004000:	4b3d      	ldr	r3, [pc, #244]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a3c      	ldr	r2, [pc, #240]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8004006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800400a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fd fb3a 	bl	8001684 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004014:	f7fd fb36 	bl	8001684 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e232      	b.n	800448c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004026:	4b34      	ldr	r3, [pc, #208]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004032:	4b31      	ldr	r3, [pc, #196]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	492d      	ldr	r1, [pc, #180]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
 8004046:	e01a      	b.n	800407e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004048:	4b2b      	ldr	r3, [pc, #172]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2a      	ldr	r2, [pc, #168]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 800404e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fd fb16 	bl	8001684 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405c:	f7fd fb12 	bl	8001684 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e20e      	b.n	800448c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800406e:	4b22      	ldr	r3, [pc, #136]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x1e0>
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800407c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d041      	beq.n	800410e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01c      	beq.n	80040cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004092:	4b19      	ldr	r3, [pc, #100]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004098:	4a17      	ldr	r2, [pc, #92]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a2:	f7fd faef 	bl	8001684 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040aa:	f7fd faeb 	bl	8001684 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e1e7      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040bc:	4b0e      	ldr	r3, [pc, #56]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 80040be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0ef      	beq.n	80040aa <HAL_RCC_OscConfig+0x22e>
 80040ca:	e020      	b.n	800410e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040cc:	4b0a      	ldr	r3, [pc, #40]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d2:	4a09      	ldr	r2, [pc, #36]	@ (80040f8 <HAL_RCC_OscConfig+0x27c>)
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fd fad2 	bl	8001684 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e2:	e00d      	b.n	8004100 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e4:	f7fd face 	bl	8001684 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d906      	bls.n	8004100 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e1ca      	b.n	800448c <HAL_RCC_OscConfig+0x610>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004100:	4b8c      	ldr	r3, [pc, #560]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 8004102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1ea      	bne.n	80040e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80a6 	beq.w	8004268 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411c:	2300      	movs	r3, #0
 800411e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004120:	4b84      	ldr	r3, [pc, #528]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_OscConfig+0x2b4>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x2b6>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004136:	4b7f      	ldr	r3, [pc, #508]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	4a7e      	ldr	r2, [pc, #504]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004140:	6593      	str	r3, [r2, #88]	@ 0x58
 8004142:	4b7c      	ldr	r3, [pc, #496]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800414e:	2301      	movs	r3, #1
 8004150:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004152:	4b79      	ldr	r3, [pc, #484]	@ (8004338 <HAL_RCC_OscConfig+0x4bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d118      	bne.n	8004190 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800415e:	4b76      	ldr	r3, [pc, #472]	@ (8004338 <HAL_RCC_OscConfig+0x4bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a75      	ldr	r2, [pc, #468]	@ (8004338 <HAL_RCC_OscConfig+0x4bc>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416a:	f7fd fa8b 	bl	8001684 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004172:	f7fd fa87 	bl	8001684 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e183      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004184:	4b6c      	ldr	r3, [pc, #432]	@ (8004338 <HAL_RCC_OscConfig+0x4bc>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d108      	bne.n	80041aa <HAL_RCC_OscConfig+0x32e>
 8004198:	4b66      	ldr	r3, [pc, #408]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	4a65      	ldr	r2, [pc, #404]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041a8:	e024      	b.n	80041f4 <HAL_RCC_OscConfig+0x378>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b05      	cmp	r3, #5
 80041b0:	d110      	bne.n	80041d4 <HAL_RCC_OscConfig+0x358>
 80041b2:	4b60      	ldr	r3, [pc, #384]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041d2:	e00f      	b.n	80041f4 <HAL_RCC_OscConfig+0x378>
 80041d4:	4b57      	ldr	r3, [pc, #348]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041da:	4a56      	ldr	r2, [pc, #344]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041e4:	4b53      	ldr	r3, [pc, #332]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ea:	4a52      	ldr	r2, [pc, #328]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80041ec:	f023 0304 	bic.w	r3, r3, #4
 80041f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d016      	beq.n	800422a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fd fa42 	bl	8001684 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fd fa3e 	bl	8001684 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e138      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421a:	4b46      	ldr	r3, [pc, #280]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0ed      	beq.n	8004204 <HAL_RCC_OscConfig+0x388>
 8004228:	e015      	b.n	8004256 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422a:	f7fd fa2b 	bl	8001684 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7fd fa27 	bl	8001684 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e121      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004248:	4b3a      	ldr	r3, [pc, #232]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1ed      	bne.n	8004232 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004256:	7ffb      	ldrb	r3, [r7, #31]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d105      	bne.n	8004268 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425c:	4b35      	ldr	r3, [pc, #212]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004260:	4a34      	ldr	r2, [pc, #208]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 8004262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004266:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d03c      	beq.n	80042ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01c      	beq.n	80042b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800427c:	4b2d      	ldr	r3, [pc, #180]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 800427e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004282:	4a2c      	ldr	r2, [pc, #176]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd f9fa 	bl	8001684 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004294:	f7fd f9f6 	bl	8001684 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e0f2      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042a6:	4b23      	ldr	r3, [pc, #140]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80042a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ef      	beq.n	8004294 <HAL_RCC_OscConfig+0x418>
 80042b4:	e01b      	b.n	80042ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80042b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fd f9dd 	bl	8001684 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ce:	f7fd f9d9 	bl	8001684 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0d5      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042e0:	4b14      	ldr	r3, [pc, #80]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80042e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1ef      	bne.n	80042ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80c9 	beq.w	800448a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 030c 	and.w	r3, r3, #12
 8004300:	2b0c      	cmp	r3, #12
 8004302:	f000 8083 	beq.w	800440c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d15e      	bne.n	80043cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a08      	ldr	r2, [pc, #32]	@ (8004334 <HAL_RCC_OscConfig+0x4b8>)
 8004314:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7fd f9b3 	bl	8001684 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004320:	e00c      	b.n	800433c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004322:	f7fd f9af 	bl	8001684 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d905      	bls.n	800433c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e0ab      	b.n	800448c <HAL_RCC_OscConfig+0x610>
 8004334:	40021000 	.word	0x40021000
 8004338:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800433c:	4b55      	ldr	r3, [pc, #340]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ec      	bne.n	8004322 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004348:	4b52      	ldr	r3, [pc, #328]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	4b52      	ldr	r3, [pc, #328]	@ (8004498 <HAL_RCC_OscConfig+0x61c>)
 800434e:	4013      	ands	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6a11      	ldr	r1, [r2, #32]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004358:	3a01      	subs	r2, #1
 800435a:	0112      	lsls	r2, r2, #4
 800435c:	4311      	orrs	r1, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004362:	0212      	lsls	r2, r2, #8
 8004364:	4311      	orrs	r1, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800436a:	0852      	lsrs	r2, r2, #1
 800436c:	3a01      	subs	r2, #1
 800436e:	0552      	lsls	r2, r2, #21
 8004370:	4311      	orrs	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004376:	0852      	lsrs	r2, r2, #1
 8004378:	3a01      	subs	r2, #1
 800437a:	0652      	lsls	r2, r2, #25
 800437c:	4311      	orrs	r1, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004382:	06d2      	lsls	r2, r2, #27
 8004384:	430a      	orrs	r2, r1
 8004386:	4943      	ldr	r1, [pc, #268]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 8004388:	4313      	orrs	r3, r2
 800438a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438c:	4b41      	ldr	r3, [pc, #260]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a40      	ldr	r2, [pc, #256]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004398:	4b3e      	ldr	r3, [pc, #248]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4a3d      	ldr	r2, [pc, #244]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 800439e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd f96e 	bl	8001684 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fd f96a 	bl	8001684 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e066      	b.n	800448c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043be:	4b35      	ldr	r3, [pc, #212]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x530>
 80043ca:	e05e      	b.n	800448a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043cc:	4b31      	ldr	r3, [pc, #196]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a30      	ldr	r2, [pc, #192]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 80043d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fd f954 	bl	8001684 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e0:	f7fd f950 	bl	8001684 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e04c      	b.n	800448c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f2:	4b28      	ldr	r3, [pc, #160]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043fe:	4b25      	ldr	r3, [pc, #148]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	4924      	ldr	r1, [pc, #144]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 8004404:	4b25      	ldr	r3, [pc, #148]	@ (800449c <HAL_RCC_OscConfig+0x620>)
 8004406:	4013      	ands	r3, r2
 8004408:	60cb      	str	r3, [r1, #12]
 800440a:	e03e      	b.n	800448a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e039      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004418:	4b1e      	ldr	r3, [pc, #120]	@ (8004494 <HAL_RCC_OscConfig+0x618>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f003 0203 	and.w	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	429a      	cmp	r2, r3
 800442a:	d12c      	bne.n	8004486 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004436:	3b01      	subs	r3, #1
 8004438:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d123      	bne.n	8004486 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800444a:	429a      	cmp	r2, r3
 800444c:	d11b      	bne.n	8004486 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d113      	bne.n	8004486 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	3b01      	subs	r3, #1
 800446c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d109      	bne.n	8004486 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	3b01      	subs	r3, #1
 8004480:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d001      	beq.n	800448a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000
 8004498:	019f800c 	.word	0x019f800c
 800449c:	feeefffc 	.word	0xfeeefffc

080044a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e11e      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b91      	ldr	r3, [pc, #580]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d910      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b8e      	ldr	r3, [pc, #568]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 020f 	bic.w	r2, r3, #15
 80044ce:	498c      	ldr	r1, [pc, #560]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b8a      	ldr	r3, [pc, #552]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e106      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d073      	beq.n	80045dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d129      	bne.n	8004550 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fc:	4b81      	ldr	r3, [pc, #516]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0f4      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800450c:	f000 f99e 	bl	800484c <RCC_GetSysClockFreqFromPLLSource>
 8004510:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4a7c      	ldr	r2, [pc, #496]	@ (8004708 <HAL_RCC_ClockConfig+0x268>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d93f      	bls.n	800459a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800451a:	4b7a      	ldr	r3, [pc, #488]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800452e:	2b00      	cmp	r3, #0
 8004530:	d033      	beq.n	800459a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004536:	2b00      	cmp	r3, #0
 8004538:	d12f      	bne.n	800459a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800453a:	4b72      	ldr	r3, [pc, #456]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004542:	4a70      	ldr	r2, [pc, #448]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004548:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800454a:	2380      	movs	r3, #128	@ 0x80
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e024      	b.n	800459a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d107      	bne.n	8004568 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004558:	4b6a      	ldr	r3, [pc, #424]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0c6      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004568:	4b66      	ldr	r3, [pc, #408]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0be      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004578:	f000 f8ce 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 800457c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4a61      	ldr	r2, [pc, #388]	@ (8004708 <HAL_RCC_ClockConfig+0x268>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d909      	bls.n	800459a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004586:	4b5f      	ldr	r3, [pc, #380]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800458e:	4a5d      	ldr	r2, [pc, #372]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004594:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004596:	2380      	movs	r3, #128	@ 0x80
 8004598:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800459a:	4b5a      	ldr	r3, [pc, #360]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f023 0203 	bic.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4957      	ldr	r1, [pc, #348]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ac:	f7fd f86a 	bl	8001684 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b4:	f7fd f866 	bl	8001684 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e095      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 020c 	and.w	r2, r3, #12
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	429a      	cmp	r2, r3
 80045da:	d1eb      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d023      	beq.n	8004630 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f4:	4b43      	ldr	r3, [pc, #268]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4a42      	ldr	r2, [pc, #264]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 80045fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800460c:	4b3d      	ldr	r3, [pc, #244]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004614:	4a3b      	ldr	r2, [pc, #236]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004616:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800461a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800461c:	4b39      	ldr	r3, [pc, #228]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	4936      	ldr	r1, [pc, #216]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
 800462e:	e008      	b.n	8004642 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b80      	cmp	r3, #128	@ 0x80
 8004634:	d105      	bne.n	8004642 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004636:	4b33      	ldr	r3, [pc, #204]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4a32      	ldr	r2, [pc, #200]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 800463c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004640:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004642:	4b2f      	ldr	r3, [pc, #188]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d21d      	bcs.n	800468c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004650:	4b2b      	ldr	r3, [pc, #172]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 020f 	bic.w	r2, r3, #15
 8004658:	4929      	ldr	r1, [pc, #164]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004660:	f7fd f810 	bl	8001684 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fd f80c 	bl	8001684 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e03b      	b.n	80046f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b20      	ldr	r3, [pc, #128]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d1ed      	bne.n	8004668 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004698:	4b1a      	ldr	r3, [pc, #104]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4917      	ldr	r1, [pc, #92]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b6:	4b13      	ldr	r3, [pc, #76]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	490f      	ldr	r1, [pc, #60]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ca:	f000 f825 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80046ce:	4602      	mov	r2, r0
 80046d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	490c      	ldr	r1, [pc, #48]	@ (800470c <HAL_RCC_ClockConfig+0x26c>)
 80046dc:	5ccb      	ldrb	r3, [r1, r3]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004710 <HAL_RCC_ClockConfig+0x270>)
 80046e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004714 <HAL_RCC_ClockConfig+0x274>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fc ff7c 	bl	80015ec <HAL_InitTick>
 80046f4:	4603      	mov	r3, r0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40022000 	.word	0x40022000
 8004704:	40021000 	.word	0x40021000
 8004708:	04c4b400 	.word	0x04c4b400
 800470c:	0800c530 	.word	0x0800c530
 8004710:	20000000 	.word	0x20000000
 8004714:	20000014 	.word	0x20000014

08004718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800471e:	4b2c      	ldr	r3, [pc, #176]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d102      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800472a:	4b2a      	ldr	r3, [pc, #168]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	e047      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004730:	4b27      	ldr	r3, [pc, #156]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b08      	cmp	r3, #8
 800473a:	d102      	bne.n	8004742 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800473c:	4b26      	ldr	r3, [pc, #152]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	e03e      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004742:	4b23      	ldr	r3, [pc, #140]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d136      	bne.n	80047bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800474e:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004758:	4b1d      	ldr	r3, [pc, #116]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	3301      	adds	r3, #1
 8004764:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d10c      	bne.n	8004786 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800476c:	4a1a      	ldr	r2, [pc, #104]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	4a16      	ldr	r2, [pc, #88]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004776:	68d2      	ldr	r2, [r2, #12]
 8004778:	0a12      	lsrs	r2, r2, #8
 800477a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	617b      	str	r3, [r7, #20]
      break;
 8004784:	e00c      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004786:	4a13      	ldr	r2, [pc, #76]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	4a10      	ldr	r2, [pc, #64]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004790:	68d2      	ldr	r2, [r2, #12]
 8004792:	0a12      	lsrs	r2, r2, #8
 8004794:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]
      break;
 800479e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047a0:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	0e5b      	lsrs	r3, r3, #25
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	3301      	adds	r3, #1
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	e001      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047c0:	693b      	ldr	r3, [r7, #16]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	00f42400 	.word	0x00f42400
 80047d8:	016e3600 	.word	0x016e3600

080047dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e0:	4b03      	ldr	r3, [pc, #12]	@ (80047f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000000 	.word	0x20000000

080047f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047f8:	f7ff fff0 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	4904      	ldr	r1, [pc, #16]	@ (800481c <HAL_RCC_GetPCLK1Freq+0x28>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	0800c540 	.word	0x0800c540

08004820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004824:	f7ff ffda 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0adb      	lsrs	r3, r3, #11
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4904      	ldr	r1, [pc, #16]	@ (8004848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40021000 	.word	0x40021000
 8004848:	0800c540 	.word	0x0800c540

0800484c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004852:	4b1e      	ldr	r3, [pc, #120]	@ (80048cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800485c:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d10c      	bne.n	800488a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004870:	4a17      	ldr	r2, [pc, #92]	@ (80048d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	4a14      	ldr	r2, [pc, #80]	@ (80048cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800487a:	68d2      	ldr	r2, [r2, #12]
 800487c:	0a12      	lsrs	r2, r2, #8
 800487e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	617b      	str	r3, [r7, #20]
    break;
 8004888:	e00c      	b.n	80048a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800488a:	4a12      	ldr	r2, [pc, #72]	@ (80048d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	4a0e      	ldr	r2, [pc, #56]	@ (80048cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004894:	68d2      	ldr	r2, [r2, #12]
 8004896:	0a12      	lsrs	r2, r2, #8
 8004898:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]
    break;
 80048a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048a4:	4b09      	ldr	r3, [pc, #36]	@ (80048cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	0e5b      	lsrs	r3, r3, #25
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	3301      	adds	r3, #1
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048be:	687b      	ldr	r3, [r7, #4]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	40021000 	.word	0x40021000
 80048d0:	016e3600 	.word	0x016e3600
 80048d4:	00f42400 	.word	0x00f42400

080048d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048e0:	2300      	movs	r3, #0
 80048e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048e4:	2300      	movs	r3, #0
 80048e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8098 	beq.w	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048fa:	4b43      	ldr	r3, [pc, #268]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10d      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004906:	4b40      	ldr	r3, [pc, #256]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004910:	6593      	str	r3, [r2, #88]	@ 0x58
 8004912:	4b3d      	ldr	r3, [pc, #244]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491e:	2301      	movs	r3, #1
 8004920:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004922:	4b3a      	ldr	r3, [pc, #232]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a39      	ldr	r2, [pc, #228]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800492c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800492e:	f7fc fea9 	bl	8001684 <HAL_GetTick>
 8004932:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004934:	e009      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004936:	f7fc fea5 	bl	8001684 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d902      	bls.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	74fb      	strb	r3, [r7, #19]
        break;
 8004948:	e005      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800494a:	4b30      	ldr	r3, [pc, #192]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0ef      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004956:	7cfb      	ldrb	r3, [r7, #19]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d159      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800495c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004966:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01e      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	429a      	cmp	r2, r3
 8004976:	d019      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004978:	4b23      	ldr	r3, [pc, #140]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004982:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004984:	4b20      	ldr	r3, [pc, #128]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004994:	4b1c      	ldr	r3, [pc, #112]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049a4:	4a18      	ldr	r2, [pc, #96]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7fc fe65 	bl	8001684 <HAL_GetTick>
 80049ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049bc:	e00b      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049be:	f7fc fe61 	bl	8001684 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d902      	bls.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	74fb      	strb	r3, [r7, #19]
            break;
 80049d4:	e006      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ec      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ea:	4b07      	ldr	r3, [pc, #28]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	4903      	ldr	r1, [pc, #12]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a00:	e008      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	74bb      	strb	r3, [r7, #18]
 8004a06:	e005      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a14:	7c7b      	ldrb	r3, [r7, #17]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d105      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a1a:	4ba6      	ldr	r3, [pc, #664]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1e:	4aa5      	ldr	r2, [pc, #660]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a32:	4ba0      	ldr	r3, [pc, #640]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	f023 0203 	bic.w	r2, r3, #3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	499c      	ldr	r1, [pc, #624]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a54:	4b97      	ldr	r3, [pc, #604]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5a:	f023 020c 	bic.w	r2, r3, #12
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	4994      	ldr	r1, [pc, #592]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a76:	4b8f      	ldr	r3, [pc, #572]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	498b      	ldr	r1, [pc, #556]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a98:	4b86      	ldr	r3, [pc, #536]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	4983      	ldr	r1, [pc, #524]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aba:	4b7e      	ldr	r3, [pc, #504]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	497a      	ldr	r1, [pc, #488]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004adc:	4b75      	ldr	r3, [pc, #468]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	4972      	ldr	r1, [pc, #456]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004afe:	4b6d      	ldr	r3, [pc, #436]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	4969      	ldr	r1, [pc, #420]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b20:	4b64      	ldr	r3, [pc, #400]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	4961      	ldr	r1, [pc, #388]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b42:	4b5c      	ldr	r3, [pc, #368]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	4958      	ldr	r1, [pc, #352]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d015      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b64:	4b53      	ldr	r3, [pc, #332]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b72:	4950      	ldr	r1, [pc, #320]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b82:	d105      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b84:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4a4a      	ldr	r2, [pc, #296]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b8e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d015      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b9c:	4b45      	ldr	r3, [pc, #276]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	4942      	ldr	r1, [pc, #264]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bbc:	4b3d      	ldr	r3, [pc, #244]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bd4:	4b37      	ldr	r3, [pc, #220]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	4934      	ldr	r1, [pc, #208]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bfe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d015      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c0c:	4b29      	ldr	r3, [pc, #164]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1a:	4926      	ldr	r1, [pc, #152]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c2a:	d105      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c2c:	4b21      	ldr	r3, [pc, #132]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a20      	ldr	r2, [pc, #128]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c52:	4918      	ldr	r1, [pc, #96]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c62:	d105      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c64:	4b13      	ldr	r3, [pc, #76]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4a12      	ldr	r2, [pc, #72]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d015      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8a:	490a      	ldr	r1, [pc, #40]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c9c:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a04      	ldr	r2, [pc, #16]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ca8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000

08004cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e049      	b.n	8004d5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fc f93a 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f000 fb12 	bl	8005320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e04a      	b.n	8004e16 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a21      	ldr	r2, [pc, #132]	@ (8004e24 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d018      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004daa:	d013      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e28 <HAL_TIM_Base_Start_IT+0xc0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00e      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1c      	ldr	r2, [pc, #112]	@ (8004e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d009      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x6c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a19      	ldr	r2, [pc, #100]	@ (8004e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d115      	bne.n	8004e00 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	4b17      	ldr	r3, [pc, #92]	@ (8004e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b06      	cmp	r3, #6
 8004de4:	d015      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0xaa>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dec:	d011      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfe:	e008      	b.n	8004e12 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e000      	b.n	8004e14 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40013400 	.word	0x40013400
 8004e34:	40014000 	.word	0x40014000
 8004e38:	00010007 	.word	0x00010007

08004e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d020      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0202 	mvn.w	r2, #2
 8004e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa2c 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa1e 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fa2f 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0204 	mvn.w	r2, #4
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa06 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f9f8 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fa09 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d020      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01b      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0208 	mvn.w	r2, #8
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9e0 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f9d2 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f9e3 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d020      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0210 	mvn.w	r2, #16
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2208      	movs	r2, #8
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9ba 	bl	80052e4 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f9ac 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f9bd 	bl	80052f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0201 	mvn.w	r2, #1
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fb fe18 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb69 	bl	80056a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fb61 	bl	80056bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00c      	beq.n	800501e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f977 	bl	800530c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00c      	beq.n	8005042 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f06f 0220 	mvn.w	r2, #32
 800503a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fb29 	bl	8005694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00c      	beq.n	8005066 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d007      	beq.n	8005066 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800505e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb35 	bl	80056d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00c      	beq.n	800508a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fb2d 	bl	80056e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00c      	beq.n	80050ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80050a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fb25 	bl	80056f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00c      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80050ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fb1d 	bl	800570c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_TIM_ConfigClockSource+0x1c>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e0de      	b.n	80052b6 <HAL_TIM_ConfigClockSource+0x1da>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005116:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800511a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a63      	ldr	r2, [pc, #396]	@ (80052c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	f000 80a9 	beq.w	800528a <HAL_TIM_ConfigClockSource+0x1ae>
 8005138:	4a61      	ldr	r2, [pc, #388]	@ (80052c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	f200 80ae 	bhi.w	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 8005140:	4a60      	ldr	r2, [pc, #384]	@ (80052c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	f000 80a1 	beq.w	800528a <HAL_TIM_ConfigClockSource+0x1ae>
 8005148:	4a5e      	ldr	r2, [pc, #376]	@ (80052c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	f200 80a6 	bhi.w	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 8005150:	4a5d      	ldr	r2, [pc, #372]	@ (80052c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005152:	4293      	cmp	r3, r2
 8005154:	f000 8099 	beq.w	800528a <HAL_TIM_ConfigClockSource+0x1ae>
 8005158:	4a5b      	ldr	r2, [pc, #364]	@ (80052c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	f200 809e 	bhi.w	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 8005160:	4a5a      	ldr	r2, [pc, #360]	@ (80052cc <HAL_TIM_ConfigClockSource+0x1f0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	f000 8091 	beq.w	800528a <HAL_TIM_ConfigClockSource+0x1ae>
 8005168:	4a58      	ldr	r2, [pc, #352]	@ (80052cc <HAL_TIM_ConfigClockSource+0x1f0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	f200 8096 	bhi.w	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 8005170:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005174:	f000 8089 	beq.w	800528a <HAL_TIM_ConfigClockSource+0x1ae>
 8005178:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800517c:	f200 808e 	bhi.w	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 8005180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005184:	d03e      	beq.n	8005204 <HAL_TIM_ConfigClockSource+0x128>
 8005186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800518a:	f200 8087 	bhi.w	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 800518e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005192:	f000 8086 	beq.w	80052a2 <HAL_TIM_ConfigClockSource+0x1c6>
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800519a:	d87f      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 800519c:	2b70      	cmp	r3, #112	@ 0x70
 800519e:	d01a      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0xfa>
 80051a0:	2b70      	cmp	r3, #112	@ 0x70
 80051a2:	d87b      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 80051a4:	2b60      	cmp	r3, #96	@ 0x60
 80051a6:	d050      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x16e>
 80051a8:	2b60      	cmp	r3, #96	@ 0x60
 80051aa:	d877      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 80051ac:	2b50      	cmp	r3, #80	@ 0x50
 80051ae:	d03c      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x14e>
 80051b0:	2b50      	cmp	r3, #80	@ 0x50
 80051b2:	d873      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 80051b4:	2b40      	cmp	r3, #64	@ 0x40
 80051b6:	d058      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x18e>
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d86f      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 80051bc:	2b30      	cmp	r3, #48	@ 0x30
 80051be:	d064      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x1ae>
 80051c0:	2b30      	cmp	r3, #48	@ 0x30
 80051c2:	d86b      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d060      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x1ae>
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d867      	bhi.n	800529c <HAL_TIM_ConfigClockSource+0x1c0>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d05c      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x1ae>
 80051d0:	2b10      	cmp	r3, #16
 80051d2:	d05a      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x1ae>
 80051d4:	e062      	b.n	800529c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051e6:	f000 f9b3 	bl	8005550 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	609a      	str	r2, [r3, #8]
      break;
 8005202:	e04f      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005214:	f000 f99c 	bl	8005550 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005226:	609a      	str	r2, [r3, #8]
      break;
 8005228:	e03c      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005236:	461a      	mov	r2, r3
 8005238:	f000 f90e 	bl	8005458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2150      	movs	r1, #80	@ 0x50
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f967 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 8005248:	e02c      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005256:	461a      	mov	r2, r3
 8005258:	f000 f92d 	bl	80054b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2160      	movs	r1, #96	@ 0x60
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f957 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 8005268:	e01c      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005276:	461a      	mov	r2, r3
 8005278:	f000 f8ee 	bl	8005458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2140      	movs	r1, #64	@ 0x40
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f947 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 8005288:	e00c      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f000 f93e 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 800529a:	e003      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      break;
 80052a0:	e000      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80052a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	00100070 	.word	0x00100070
 80052c4:	00100040 	.word	0x00100040
 80052c8:	00100030 	.word	0x00100030
 80052cc:	00100020 	.word	0x00100020

080052d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a42      	ldr	r2, [pc, #264]	@ (800543c <TIM_Base_SetConfig+0x11c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00f      	beq.n	8005358 <TIM_Base_SetConfig+0x38>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533e:	d00b      	beq.n	8005358 <TIM_Base_SetConfig+0x38>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a3f      	ldr	r2, [pc, #252]	@ (8005440 <TIM_Base_SetConfig+0x120>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d007      	beq.n	8005358 <TIM_Base_SetConfig+0x38>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a3e      	ldr	r2, [pc, #248]	@ (8005444 <TIM_Base_SetConfig+0x124>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_Base_SetConfig+0x38>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a3d      	ldr	r2, [pc, #244]	@ (8005448 <TIM_Base_SetConfig+0x128>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d108      	bne.n	800536a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a33      	ldr	r2, [pc, #204]	@ (800543c <TIM_Base_SetConfig+0x11c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01b      	beq.n	80053aa <TIM_Base_SetConfig+0x8a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005378:	d017      	beq.n	80053aa <TIM_Base_SetConfig+0x8a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a30      	ldr	r2, [pc, #192]	@ (8005440 <TIM_Base_SetConfig+0x120>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <TIM_Base_SetConfig+0x8a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2f      	ldr	r2, [pc, #188]	@ (8005444 <TIM_Base_SetConfig+0x124>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00f      	beq.n	80053aa <TIM_Base_SetConfig+0x8a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2e      	ldr	r2, [pc, #184]	@ (8005448 <TIM_Base_SetConfig+0x128>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00b      	beq.n	80053aa <TIM_Base_SetConfig+0x8a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2d      	ldr	r2, [pc, #180]	@ (800544c <TIM_Base_SetConfig+0x12c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d007      	beq.n	80053aa <TIM_Base_SetConfig+0x8a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2c      	ldr	r2, [pc, #176]	@ (8005450 <TIM_Base_SetConfig+0x130>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_Base_SetConfig+0x8a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005454 <TIM_Base_SetConfig+0x134>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d108      	bne.n	80053bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a16      	ldr	r2, [pc, #88]	@ (800543c <TIM_Base_SetConfig+0x11c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0xe8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <TIM_Base_SetConfig+0x128>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0xe8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a16      	ldr	r2, [pc, #88]	@ (800544c <TIM_Base_SetConfig+0x12c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0xe8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a15      	ldr	r2, [pc, #84]	@ (8005450 <TIM_Base_SetConfig+0x130>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0xe8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a14      	ldr	r2, [pc, #80]	@ (8005454 <TIM_Base_SetConfig+0x134>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d103      	bne.n	8005410 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]
  }
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40013400 	.word	0x40013400
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800

08005458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0201 	bic.w	r2, r3, #1
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 030a 	bic.w	r3, r3, #10
 8005494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b087      	sub	sp, #28
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f023 0210 	bic.w	r2, r3, #16
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	031b      	lsls	r3, r3, #12
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800552c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	f043 0307 	orr.w	r3, r3, #7
 800553c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	609a      	str	r2, [r3, #8]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800556a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	021a      	lsls	r2, r3, #8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	431a      	orrs	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4313      	orrs	r3, r2
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	609a      	str	r2, [r3, #8]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e065      	b.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d108      	bne.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80055e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80055f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1b      	ldr	r2, [pc, #108]	@ (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d018      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561e:	d013      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a18      	ldr	r2, [pc, #96]	@ (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00e      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a17      	ldr	r2, [pc, #92]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d009      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a12      	ldr	r2, [pc, #72]	@ (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a13      	ldr	r2, [pc, #76]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d10c      	bne.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800564e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	4313      	orrs	r3, r2
 8005658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40013400 	.word	0x40013400
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40014000 	.word	0x40014000

08005694 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e042      	b.n	80057b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005738:	2b00      	cmp	r3, #0
 800573a:	d106      	bne.n	800574a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fb fc7b 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2224      	movs	r2, #36	@ 0x24
 800574e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0201 	bic.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fee8 	bl	8006540 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fc19 	bl	8005fa8 <UART_SetConfig>
 8005776:	4603      	mov	r3, r0
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e01b      	b.n	80057b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800578e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800579e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 ff67 	bl	8006684 <UART_CheckIdleState>
 80057b6:	4603      	mov	r3, r0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b091      	sub	sp, #68	@ 0x44
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d178      	bne.n	80058ca <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_UART_Transmit_IT+0x24>
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e071      	b.n	80058cc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2221      	movs	r2, #33	@ 0x21
 8005810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800581c:	d12a      	bne.n	8005874 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005826:	d107      	bne.n	8005838 <HAL_UART_Transmit_IT+0x78>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d103      	bne.n	8005838 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a29      	ldr	r2, [pc, #164]	@ (80058d8 <HAL_UART_Transmit_IT+0x118>)
 8005834:	679a      	str	r2, [r3, #120]	@ 0x78
 8005836:	e002      	b.n	800583e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4a28      	ldr	r2, [pc, #160]	@ (80058dc <HAL_UART_Transmit_IT+0x11c>)
 800583c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3308      	adds	r3, #8
 8005844:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005854:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3308      	adds	r3, #8
 800585c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800585e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005860:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e5      	bne.n	800583e <HAL_UART_Transmit_IT+0x7e>
 8005872:	e028      	b.n	80058c6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587c:	d107      	bne.n	800588e <HAL_UART_Transmit_IT+0xce>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a15      	ldr	r2, [pc, #84]	@ (80058e0 <HAL_UART_Transmit_IT+0x120>)
 800588a:	679a      	str	r2, [r3, #120]	@ 0x78
 800588c:	e002      	b.n	8005894 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a14      	ldr	r2, [pc, #80]	@ (80058e4 <HAL_UART_Transmit_IT+0x124>)
 8005892:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	613b      	str	r3, [r7, #16]
   return(result);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b2:	623b      	str	r3, [r7, #32]
 80058b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	69f9      	ldr	r1, [r7, #28]
 80058b8:	6a3a      	ldr	r2, [r7, #32]
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e6      	bne.n	8005894 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e000      	b.n	80058cc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80058ca:	2302      	movs	r3, #2
  }
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3744      	adds	r7, #68	@ 0x44
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	08006fb7 	.word	0x08006fb7
 80058dc:	08006ed7 	.word	0x08006ed7
 80058e0:	08006e15 	.word	0x08006e15
 80058e4:	08006d5d 	.word	0x08006d5d

080058e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b0ba      	sub	sp, #232	@ 0xe8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800590e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005912:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005916:	4013      	ands	r3, r2
 8005918:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800591c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d11b      	bne.n	800595c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b00      	cmp	r3, #0
 800592e:	d015      	beq.n	800595c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d105      	bne.n	8005948 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800593c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8300 	beq.w	8005f52 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
      }
      return;
 800595a:	e2fa      	b.n	8005f52 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800595c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8123 	beq.w	8005bac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005966:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800596a:	4b8d      	ldr	r3, [pc, #564]	@ (8005ba0 <HAL_UART_IRQHandler+0x2b8>)
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005972:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005976:	4b8b      	ldr	r3, [pc, #556]	@ (8005ba4 <HAL_UART_IRQHandler+0x2bc>)
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8116 	beq.w	8005bac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d011      	beq.n	80059b0 <HAL_UART_IRQHandler+0xc8>
 800598c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2201      	movs	r2, #1
 800599e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a6:	f043 0201 	orr.w	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d011      	beq.n	80059e0 <HAL_UART_IRQHandler+0xf8>
 80059bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00b      	beq.n	80059e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2202      	movs	r2, #2
 80059ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d6:	f043 0204 	orr.w	r2, r3, #4
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d011      	beq.n	8005a10 <HAL_UART_IRQHandler+0x128>
 80059ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00b      	beq.n	8005a10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2204      	movs	r2, #4
 80059fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a06:	f043 0202 	orr.w	r2, r3, #2
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d017      	beq.n	8005a4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d105      	bne.n	8005a34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ba0 <HAL_UART_IRQHandler+0x2b8>)
 8005a2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a42:	f043 0208 	orr.w	r2, r3, #8
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d012      	beq.n	8005a7e <HAL_UART_IRQHandler+0x196>
 8005a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00c      	beq.n	8005a7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8266 	beq.w	8005f56 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d013      	beq.n	8005abe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d105      	bne.n	8005aae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad2:	2b40      	cmp	r3, #64	@ 0x40
 8005ad4:	d005      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ada:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d054      	beq.n	8005b8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 ffcd 	bl	8006a82 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af2:	2b40      	cmp	r3, #64	@ 0x40
 8005af4:	d146      	bne.n	8005b84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1d9      	bne.n	8005af6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d017      	beq.n	8005b7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b52:	4a15      	ldr	r2, [pc, #84]	@ (8005ba8 <HAL_UART_IRQHandler+0x2c0>)
 8005b54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fc f84b 	bl	8001bf8 <HAL_DMA_Abort_IT>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d019      	beq.n	8005b9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005b76:	4610      	mov	r0, r2
 8005b78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7a:	e00f      	b.n	8005b9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fa09 	bl	8005f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b82:	e00b      	b.n	8005b9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fa05 	bl	8005f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8a:	e007      	b.n	8005b9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fa01 	bl	8005f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005b9a:	e1dc      	b.n	8005f56 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	bf00      	nop
    return;
 8005b9e:	e1da      	b.n	8005f56 <HAL_UART_IRQHandler+0x66e>
 8005ba0:	10000001 	.word	0x10000001
 8005ba4:	04000120 	.word	0x04000120
 8005ba8:	08006d39 	.word	0x08006d39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	f040 8170 	bne.w	8005e96 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8169 	beq.w	8005e96 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8162 	beq.w	8005e96 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2210      	movs	r2, #16
 8005bd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be4:	2b40      	cmp	r3, #64	@ 0x40
 8005be6:	f040 80d8 	bne.w	8005d9a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 80af 	beq.w	8005d60 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	f080 80a7 	bcs.w	8005d60 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f040 8087 	bne.w	8005d3e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1da      	bne.n	8005c30 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e1      	bne.n	8005c7a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3308      	adds	r3, #8
 8005cbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005cda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ce0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e3      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d0c:	f023 0310 	bic.w	r3, r3, #16
 8005d10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e4      	bne.n	8005cfc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fb ff04 	bl	8001b46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fa ff81 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d5e:	e0fc      	b.n	8005f5a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	f040 80f5 	bne.w	8005f5a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	f040 80eb 	bne.w	8005f5a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fa ff64 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
      return;
 8005d98:	e0df      	b.n	8005f5a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 80d1 	beq.w	8005f5e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80cc 	beq.w	8005f5e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005df0:	e841 2300 	strex	r3, r2, [r1]
 8005df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e4      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3308      	adds	r3, #8
 8005e02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3308      	adds	r3, #8
 8005e20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e24:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e1      	bne.n	8005dfc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f023 0310 	bic.w	r3, r3, #16
 8005e60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	69b9      	ldr	r1, [r7, #24]
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e4      	bne.n	8005e4c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fa fee6 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e94:	e063      	b.n	8005f5e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00e      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x5d8>
 8005ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005eb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 f91c 	bl	80070f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ebe:	e051      	b.n	8005f64 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d014      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d105      	bne.n	8005ee4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005edc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d03a      	beq.n	8005f62 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
    }
    return;
 8005ef4:	e035      	b.n	8005f62 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <HAL_UART_IRQHandler+0x62e>
 8005f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 f8c6 	bl	80070a0 <UART_EndTransmit_IT>
    return;
 8005f14:	e026      	b.n	8005f64 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_UART_IRQHandler+0x64e>
 8005f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f001 f8f5 	bl	800711e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f34:	e016      	b.n	8005f64 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d010      	beq.n	8005f64 <HAL_UART_IRQHandler+0x67c>
 8005f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da0c      	bge.n	8005f64 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 f8dd 	bl	800710a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f50:	e008      	b.n	8005f64 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f52:	bf00      	nop
 8005f54:	e006      	b.n	8005f64 <HAL_UART_IRQHandler+0x67c>
    return;
 8005f56:	bf00      	nop
 8005f58:	e004      	b.n	8005f64 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f5a:	bf00      	nop
 8005f5c:	e002      	b.n	8005f64 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f5e:	bf00      	nop
 8005f60:	e000      	b.n	8005f64 <HAL_UART_IRQHandler+0x67c>
    return;
 8005f62:	bf00      	nop
  }
}
 8005f64:	37e8      	adds	r7, #232	@ 0xe8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop

08005f6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fac:	b08c      	sub	sp, #48	@ 0x30
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4bab      	ldr	r3, [pc, #684]	@ (8006284 <UART_SetConfig+0x2dc>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	6812      	ldr	r2, [r2, #0]
 8005fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4aa0      	ldr	r2, [pc, #640]	@ (8006288 <UART_SetConfig+0x2e0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006010:	4313      	orrs	r3, r2
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800601e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006028:	430b      	orrs	r3, r1
 800602a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006032:	f023 010f 	bic.w	r1, r3, #15
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a91      	ldr	r2, [pc, #580]	@ (800628c <UART_SetConfig+0x2e4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d125      	bne.n	8006098 <UART_SetConfig+0xf0>
 800604c:	4b90      	ldr	r3, [pc, #576]	@ (8006290 <UART_SetConfig+0x2e8>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	2b03      	cmp	r3, #3
 8006058:	d81a      	bhi.n	8006090 <UART_SetConfig+0xe8>
 800605a:	a201      	add	r2, pc, #4	@ (adr r2, 8006060 <UART_SetConfig+0xb8>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006071 	.word	0x08006071
 8006064:	08006081 	.word	0x08006081
 8006068:	08006079 	.word	0x08006079
 800606c:	08006089 	.word	0x08006089
 8006070:	2301      	movs	r3, #1
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006076:	e0d6      	b.n	8006226 <UART_SetConfig+0x27e>
 8006078:	2302      	movs	r3, #2
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800607e:	e0d2      	b.n	8006226 <UART_SetConfig+0x27e>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006086:	e0ce      	b.n	8006226 <UART_SetConfig+0x27e>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800608e:	e0ca      	b.n	8006226 <UART_SetConfig+0x27e>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006096:	e0c6      	b.n	8006226 <UART_SetConfig+0x27e>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a7d      	ldr	r2, [pc, #500]	@ (8006294 <UART_SetConfig+0x2ec>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d138      	bne.n	8006114 <UART_SetConfig+0x16c>
 80060a2:	4b7b      	ldr	r3, [pc, #492]	@ (8006290 <UART_SetConfig+0x2e8>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a8:	f003 030c 	and.w	r3, r3, #12
 80060ac:	2b0c      	cmp	r3, #12
 80060ae:	d82d      	bhi.n	800610c <UART_SetConfig+0x164>
 80060b0:	a201      	add	r2, pc, #4	@ (adr r2, 80060b8 <UART_SetConfig+0x110>)
 80060b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b6:	bf00      	nop
 80060b8:	080060ed 	.word	0x080060ed
 80060bc:	0800610d 	.word	0x0800610d
 80060c0:	0800610d 	.word	0x0800610d
 80060c4:	0800610d 	.word	0x0800610d
 80060c8:	080060fd 	.word	0x080060fd
 80060cc:	0800610d 	.word	0x0800610d
 80060d0:	0800610d 	.word	0x0800610d
 80060d4:	0800610d 	.word	0x0800610d
 80060d8:	080060f5 	.word	0x080060f5
 80060dc:	0800610d 	.word	0x0800610d
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	0800610d 	.word	0x0800610d
 80060e8:	08006105 	.word	0x08006105
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060f2:	e098      	b.n	8006226 <UART_SetConfig+0x27e>
 80060f4:	2302      	movs	r3, #2
 80060f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fa:	e094      	b.n	8006226 <UART_SetConfig+0x27e>
 80060fc:	2304      	movs	r3, #4
 80060fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006102:	e090      	b.n	8006226 <UART_SetConfig+0x27e>
 8006104:	2308      	movs	r3, #8
 8006106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800610a:	e08c      	b.n	8006226 <UART_SetConfig+0x27e>
 800610c:	2310      	movs	r3, #16
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006112:	e088      	b.n	8006226 <UART_SetConfig+0x27e>
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a5f      	ldr	r2, [pc, #380]	@ (8006298 <UART_SetConfig+0x2f0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d125      	bne.n	800616a <UART_SetConfig+0x1c2>
 800611e:	4b5c      	ldr	r3, [pc, #368]	@ (8006290 <UART_SetConfig+0x2e8>)
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006124:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006128:	2b30      	cmp	r3, #48	@ 0x30
 800612a:	d016      	beq.n	800615a <UART_SetConfig+0x1b2>
 800612c:	2b30      	cmp	r3, #48	@ 0x30
 800612e:	d818      	bhi.n	8006162 <UART_SetConfig+0x1ba>
 8006130:	2b20      	cmp	r3, #32
 8006132:	d00a      	beq.n	800614a <UART_SetConfig+0x1a2>
 8006134:	2b20      	cmp	r3, #32
 8006136:	d814      	bhi.n	8006162 <UART_SetConfig+0x1ba>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <UART_SetConfig+0x19a>
 800613c:	2b10      	cmp	r3, #16
 800613e:	d008      	beq.n	8006152 <UART_SetConfig+0x1aa>
 8006140:	e00f      	b.n	8006162 <UART_SetConfig+0x1ba>
 8006142:	2300      	movs	r3, #0
 8006144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006148:	e06d      	b.n	8006226 <UART_SetConfig+0x27e>
 800614a:	2302      	movs	r3, #2
 800614c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006150:	e069      	b.n	8006226 <UART_SetConfig+0x27e>
 8006152:	2304      	movs	r3, #4
 8006154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006158:	e065      	b.n	8006226 <UART_SetConfig+0x27e>
 800615a:	2308      	movs	r3, #8
 800615c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006160:	e061      	b.n	8006226 <UART_SetConfig+0x27e>
 8006162:	2310      	movs	r3, #16
 8006164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006168:	e05d      	b.n	8006226 <UART_SetConfig+0x27e>
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a4b      	ldr	r2, [pc, #300]	@ (800629c <UART_SetConfig+0x2f4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d125      	bne.n	80061c0 <UART_SetConfig+0x218>
 8006174:	4b46      	ldr	r3, [pc, #280]	@ (8006290 <UART_SetConfig+0x2e8>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800617a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800617e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006180:	d016      	beq.n	80061b0 <UART_SetConfig+0x208>
 8006182:	2bc0      	cmp	r3, #192	@ 0xc0
 8006184:	d818      	bhi.n	80061b8 <UART_SetConfig+0x210>
 8006186:	2b80      	cmp	r3, #128	@ 0x80
 8006188:	d00a      	beq.n	80061a0 <UART_SetConfig+0x1f8>
 800618a:	2b80      	cmp	r3, #128	@ 0x80
 800618c:	d814      	bhi.n	80061b8 <UART_SetConfig+0x210>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <UART_SetConfig+0x1f0>
 8006192:	2b40      	cmp	r3, #64	@ 0x40
 8006194:	d008      	beq.n	80061a8 <UART_SetConfig+0x200>
 8006196:	e00f      	b.n	80061b8 <UART_SetConfig+0x210>
 8006198:	2300      	movs	r3, #0
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800619e:	e042      	b.n	8006226 <UART_SetConfig+0x27e>
 80061a0:	2302      	movs	r3, #2
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a6:	e03e      	b.n	8006226 <UART_SetConfig+0x27e>
 80061a8:	2304      	movs	r3, #4
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ae:	e03a      	b.n	8006226 <UART_SetConfig+0x27e>
 80061b0:	2308      	movs	r3, #8
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b6:	e036      	b.n	8006226 <UART_SetConfig+0x27e>
 80061b8:	2310      	movs	r3, #16
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061be:	e032      	b.n	8006226 <UART_SetConfig+0x27e>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a30      	ldr	r2, [pc, #192]	@ (8006288 <UART_SetConfig+0x2e0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d12a      	bne.n	8006220 <UART_SetConfig+0x278>
 80061ca:	4b31      	ldr	r3, [pc, #196]	@ (8006290 <UART_SetConfig+0x2e8>)
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061d8:	d01a      	beq.n	8006210 <UART_SetConfig+0x268>
 80061da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061de:	d81b      	bhi.n	8006218 <UART_SetConfig+0x270>
 80061e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061e4:	d00c      	beq.n	8006200 <UART_SetConfig+0x258>
 80061e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ea:	d815      	bhi.n	8006218 <UART_SetConfig+0x270>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <UART_SetConfig+0x250>
 80061f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f4:	d008      	beq.n	8006208 <UART_SetConfig+0x260>
 80061f6:	e00f      	b.n	8006218 <UART_SetConfig+0x270>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fe:	e012      	b.n	8006226 <UART_SetConfig+0x27e>
 8006200:	2302      	movs	r3, #2
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006206:	e00e      	b.n	8006226 <UART_SetConfig+0x27e>
 8006208:	2304      	movs	r3, #4
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620e:	e00a      	b.n	8006226 <UART_SetConfig+0x27e>
 8006210:	2308      	movs	r3, #8
 8006212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006216:	e006      	b.n	8006226 <UART_SetConfig+0x27e>
 8006218:	2310      	movs	r3, #16
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621e:	e002      	b.n	8006226 <UART_SetConfig+0x27e>
 8006220:	2310      	movs	r3, #16
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a17      	ldr	r2, [pc, #92]	@ (8006288 <UART_SetConfig+0x2e0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	f040 80a8 	bne.w	8006382 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006232:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006236:	2b08      	cmp	r3, #8
 8006238:	d834      	bhi.n	80062a4 <UART_SetConfig+0x2fc>
 800623a:	a201      	add	r2, pc, #4	@ (adr r2, 8006240 <UART_SetConfig+0x298>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006265 	.word	0x08006265
 8006244:	080062a5 	.word	0x080062a5
 8006248:	0800626d 	.word	0x0800626d
 800624c:	080062a5 	.word	0x080062a5
 8006250:	08006273 	.word	0x08006273
 8006254:	080062a5 	.word	0x080062a5
 8006258:	080062a5 	.word	0x080062a5
 800625c:	080062a5 	.word	0x080062a5
 8006260:	0800627b 	.word	0x0800627b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006264:	f7fe fac6 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8006268:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800626a:	e021      	b.n	80062b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800626c:	4b0c      	ldr	r3, [pc, #48]	@ (80062a0 <UART_SetConfig+0x2f8>)
 800626e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006270:	e01e      	b.n	80062b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006272:	f7fe fa51 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 8006276:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006278:	e01a      	b.n	80062b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006280:	e016      	b.n	80062b0 <UART_SetConfig+0x308>
 8006282:	bf00      	nop
 8006284:	cfff69f3 	.word	0xcfff69f3
 8006288:	40008000 	.word	0x40008000
 800628c:	40013800 	.word	0x40013800
 8006290:	40021000 	.word	0x40021000
 8006294:	40004400 	.word	0x40004400
 8006298:	40004800 	.word	0x40004800
 800629c:	40004c00 	.word	0x40004c00
 80062a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 812a 	beq.w	800650c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062bc:	4a9e      	ldr	r2, [pc, #632]	@ (8006538 <UART_SetConfig+0x590>)
 80062be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d305      	bcc.n	80062e8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d903      	bls.n	80062f0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062ee:	e10d      	b.n	800650c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	2200      	movs	r2, #0
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	60fa      	str	r2, [r7, #12]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	4a8e      	ldr	r2, [pc, #568]	@ (8006538 <UART_SetConfig+0x590>)
 80062fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006302:	b29b      	uxth	r3, r3
 8006304:	2200      	movs	r2, #0
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006312:	f7f9 ffd5 	bl	80002c0 <__aeabi_uldivmod>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	020b      	lsls	r3, r1, #8
 8006328:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800632c:	0202      	lsls	r2, r0, #8
 800632e:	6979      	ldr	r1, [r7, #20]
 8006330:	6849      	ldr	r1, [r1, #4]
 8006332:	0849      	lsrs	r1, r1, #1
 8006334:	2000      	movs	r0, #0
 8006336:	460c      	mov	r4, r1
 8006338:	4605      	mov	r5, r0
 800633a:	eb12 0804 	adds.w	r8, r2, r4
 800633e:	eb43 0905 	adc.w	r9, r3, r5
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	469a      	mov	sl, r3
 800634a:	4693      	mov	fp, r2
 800634c:	4652      	mov	r2, sl
 800634e:	465b      	mov	r3, fp
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7f9 ffb4 	bl	80002c0 <__aeabi_uldivmod>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4613      	mov	r3, r2
 800635e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006366:	d308      	bcc.n	800637a <UART_SetConfig+0x3d2>
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800636e:	d204      	bcs.n	800637a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6a3a      	ldr	r2, [r7, #32]
 8006376:	60da      	str	r2, [r3, #12]
 8006378:	e0c8      	b.n	800650c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006380:	e0c4      	b.n	800650c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800638a:	d167      	bne.n	800645c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800638c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006390:	2b08      	cmp	r3, #8
 8006392:	d828      	bhi.n	80063e6 <UART_SetConfig+0x43e>
 8006394:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <UART_SetConfig+0x3f4>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063c9 	.word	0x080063c9
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	080063e7 	.word	0x080063e7
 80063ac:	080063d7 	.word	0x080063d7
 80063b0:	080063e7 	.word	0x080063e7
 80063b4:	080063e7 	.word	0x080063e7
 80063b8:	080063e7 	.word	0x080063e7
 80063bc:	080063df 	.word	0x080063df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c0:	f7fe fa18 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 80063c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063c6:	e014      	b.n	80063f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c8:	f7fe fa2a 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 80063cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063ce:	e010      	b.n	80063f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d0:	4b5a      	ldr	r3, [pc, #360]	@ (800653c <UART_SetConfig+0x594>)
 80063d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063d4:	e00d      	b.n	80063f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063d6:	f7fe f99f 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80063da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063dc:	e009      	b.n	80063f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063e4:	e005      	b.n	80063f2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8089 	beq.w	800650c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	4a4e      	ldr	r2, [pc, #312]	@ (8006538 <UART_SetConfig+0x590>)
 8006400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006404:	461a      	mov	r2, r3
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	fbb3 f3f2 	udiv	r3, r3, r2
 800640c:	005a      	lsls	r2, r3, #1
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	441a      	add	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	2b0f      	cmp	r3, #15
 8006424:	d916      	bls.n	8006454 <UART_SetConfig+0x4ac>
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800642c:	d212      	bcs.n	8006454 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	b29b      	uxth	r3, r3
 8006432:	f023 030f 	bic.w	r3, r3, #15
 8006436:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	b29b      	uxth	r3, r3
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	b29a      	uxth	r2, r3
 8006444:	8bfb      	ldrh	r3, [r7, #30]
 8006446:	4313      	orrs	r3, r2
 8006448:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	8bfa      	ldrh	r2, [r7, #30]
 8006450:	60da      	str	r2, [r3, #12]
 8006452:	e05b      	b.n	800650c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800645a:	e057      	b.n	800650c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800645c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006460:	2b08      	cmp	r3, #8
 8006462:	d828      	bhi.n	80064b6 <UART_SetConfig+0x50e>
 8006464:	a201      	add	r2, pc, #4	@ (adr r2, 800646c <UART_SetConfig+0x4c4>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	08006491 	.word	0x08006491
 8006470:	08006499 	.word	0x08006499
 8006474:	080064a1 	.word	0x080064a1
 8006478:	080064b7 	.word	0x080064b7
 800647c:	080064a7 	.word	0x080064a7
 8006480:	080064b7 	.word	0x080064b7
 8006484:	080064b7 	.word	0x080064b7
 8006488:	080064b7 	.word	0x080064b7
 800648c:	080064af 	.word	0x080064af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006490:	f7fe f9b0 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8006494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006496:	e014      	b.n	80064c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006498:	f7fe f9c2 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 800649c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800649e:	e010      	b.n	80064c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a0:	4b26      	ldr	r3, [pc, #152]	@ (800653c <UART_SetConfig+0x594>)
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064a4:	e00d      	b.n	80064c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a6:	f7fe f937 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80064aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064ac:	e009      	b.n	80064c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064b4:	e005      	b.n	80064c2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064c0:	bf00      	nop
    }

    if (pclk != 0U)
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d021      	beq.n	800650c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006538 <UART_SetConfig+0x590>)
 80064ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d2:	461a      	mov	r2, r3
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	441a      	add	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2b0f      	cmp	r3, #15
 80064f0:	d909      	bls.n	8006506 <UART_SetConfig+0x55e>
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064f8:	d205      	bcs.n	8006506 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	e002      	b.n	800650c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2201      	movs	r2, #1
 8006510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2201      	movs	r2, #1
 8006518:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2200      	movs	r2, #0
 8006526:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006528:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800652c:	4618      	mov	r0, r3
 800652e:	3730      	adds	r7, #48	@ 0x30
 8006530:	46bd      	mov	sp, r7
 8006532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006536:	bf00      	nop
 8006538:	0800c548 	.word	0x0800c548
 800653c:	00f42400 	.word	0x00f42400

08006540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d4:	f003 0310 	and.w	r3, r3, #16
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01a      	beq.n	8006656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800663e:	d10a      	bne.n	8006656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]
  }
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b098      	sub	sp, #96	@ 0x60
 8006688:	af02      	add	r7, sp, #8
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006694:	f7fa fff6 	bl	8001684 <HAL_GetTick>
 8006698:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0308 	and.w	r3, r3, #8
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d12f      	bne.n	8006708 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b0:	2200      	movs	r2, #0
 80066b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f88e 	bl	80067d8 <UART_WaitOnFlagUntilTimeout>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d022      	beq.n	8006708 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e6      	bne.n	80066c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e063      	b.n	80067d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b04      	cmp	r3, #4
 8006714:	d149      	bne.n	80067aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006716:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800671e:	2200      	movs	r2, #0
 8006720:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f857 	bl	80067d8 <UART_WaitOnFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d03c      	beq.n	80067aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	623b      	str	r3, [r7, #32]
   return(result);
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800674e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006750:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e6      	bne.n	8006730 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3308      	adds	r3, #8
 8006768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	60fb      	str	r3, [r7, #12]
   return(result);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006782:	61fa      	str	r2, [r7, #28]
 8006784:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	69b9      	ldr	r1, [r7, #24]
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	617b      	str	r3, [r7, #20]
   return(result);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e5      	bne.n	8006762 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e012      	b.n	80067d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3758      	adds	r7, #88	@ 0x58
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	4613      	mov	r3, r2
 80067e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e8:	e04f      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d04b      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f2:	f7fa ff47 	bl	8001684 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d302      	bcc.n	8006808 <UART_WaitOnFlagUntilTimeout+0x30>
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e04e      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	d037      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b80      	cmp	r3, #128	@ 0x80
 800681e:	d034      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b40      	cmp	r3, #64	@ 0x40
 8006824:	d031      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b08      	cmp	r3, #8
 8006832:	d110      	bne.n	8006856 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2208      	movs	r2, #8
 800683a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f920 	bl	8006a82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2208      	movs	r2, #8
 8006846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e029      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006864:	d111      	bne.n	800688a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800686e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f906 	bl	8006a82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e00f      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4013      	ands	r3, r2
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	bf0c      	ite	eq
 800689a:	2301      	moveq	r3, #1
 800689c:	2300      	movne	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d0a0      	beq.n	80067ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b096      	sub	sp, #88	@ 0x58
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	4613      	mov	r3, r2
 80068c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	88fa      	ldrh	r2, [r7, #6]
 80068cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2222      	movs	r2, #34	@ 0x22
 80068dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d02d      	beq.n	8006946 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f0:	4a40      	ldr	r2, [pc, #256]	@ (80069f4 <UART_Start_Receive_DMA+0x140>)
 80068f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fa:	4a3f      	ldr	r2, [pc, #252]	@ (80069f8 <UART_Start_Receive_DMA+0x144>)
 80068fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006904:	4a3d      	ldr	r2, [pc, #244]	@ (80069fc <UART_Start_Receive_DMA+0x148>)
 8006906:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800690e:	2200      	movs	r2, #0
 8006910:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3324      	adds	r3, #36	@ 0x24
 800691e:	4619      	mov	r1, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006924:	461a      	mov	r2, r3
 8006926:	88fb      	ldrh	r3, [r7, #6]
 8006928:	f7fb f892 	bl	8001a50 <HAL_DMA_Start_IT>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2210      	movs	r2, #16
 8006936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e051      	b.n	80069ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006962:	657b      	str	r3, [r7, #84]	@ 0x54
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800696c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800696e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800697a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e6      	bne.n	800694e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	653b      	str	r3, [r7, #80]	@ 0x50
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3308      	adds	r3, #8
 800699e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069a0:	637a      	str	r2, [r7, #52]	@ 0x34
 80069a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e5      	bne.n	8006980 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	613b      	str	r3, [r7, #16]
   return(result);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3308      	adds	r3, #8
 80069d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069d4:	623a      	str	r2, [r7, #32]
 80069d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	69f9      	ldr	r1, [r7, #28]
 80069da:	6a3a      	ldr	r2, [r7, #32]
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e5      	bne.n	80069b4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3758      	adds	r7, #88	@ 0x58
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	08006b4f 	.word	0x08006b4f
 80069f8:	08006c7b 	.word	0x08006c7b
 80069fc:	08006cb9 	.word	0x08006cb9

08006a00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b08f      	sub	sp, #60	@ 0x3c
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a28:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e6      	bne.n	8006a08 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a5a:	61ba      	str	r2, [r7, #24]
 8006a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6979      	ldr	r1, [r7, #20]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	613b      	str	r3, [r7, #16]
   return(result);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006a76:	bf00      	nop
 8006a78:	373c      	adds	r7, #60	@ 0x3c
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b095      	sub	sp, #84	@ 0x54
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aaa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e3      	bne.n	8006abc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d118      	bne.n	8006b2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f023 0310 	bic.w	r3, r3, #16
 8006b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6979      	ldr	r1, [r7, #20]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	613b      	str	r3, [r7, #16]
   return(result);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b42:	bf00      	nop
 8006b44:	3754      	adds	r7, #84	@ 0x54
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b09c      	sub	sp, #112	@ 0x70
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d171      	bne.n	8006c4e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e6      	bne.n	8006b72 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb6:	f023 0301 	bic.w	r3, r3, #1
 8006bba:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006bc4:	647a      	str	r2, [r7, #68]	@ 0x44
 8006bc6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e5      	bne.n	8006ba4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	623b      	str	r3, [r7, #32]
   return(result);
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bee:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006bf8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e5      	bne.n	8006bd8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d118      	bne.n	8006c4e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f023 0310 	bic.w	r3, r3, #16
 8006c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c3a:	61fb      	str	r3, [r7, #28]
 8006c3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	69b9      	ldr	r1, [r7, #24]
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	617b      	str	r3, [r7, #20]
   return(result);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e6      	bne.n	8006c1c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c50:	2200      	movs	r2, #0
 8006c52:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d107      	bne.n	8006c6c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c62:	4619      	mov	r1, r3
 8006c64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c66:	f7f9 fffb 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c6a:	e002      	b.n	8006c72 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006c6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c6e:	f7ff f97d 	bl	8005f6c <HAL_UART_RxCpltCallback>
}
 8006c72:	bf00      	nop
 8006c74:	3770      	adds	r7, #112	@ 0x70
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d109      	bne.n	8006caa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c9c:	085b      	lsrs	r3, r3, #1
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f7f9 ffdc 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ca8:	e002      	b.n	8006cb0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7ff f968 	bl	8005f80 <HAL_UART_RxHalfCpltCallback>
}
 8006cb0:	bf00      	nop
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ccc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce0:	2b80      	cmp	r3, #128	@ 0x80
 8006ce2:	d109      	bne.n	8006cf8 <UART_DMAError+0x40>
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b21      	cmp	r3, #33	@ 0x21
 8006ce8:	d106      	bne.n	8006cf8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006cf2:	6978      	ldr	r0, [r7, #20]
 8006cf4:	f7ff fe84 	bl	8006a00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d02:	2b40      	cmp	r3, #64	@ 0x40
 8006d04:	d109      	bne.n	8006d1a <UART_DMAError+0x62>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b22      	cmp	r3, #34	@ 0x22
 8006d0a:	d106      	bne.n	8006d1a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006d14:	6978      	ldr	r0, [r7, #20]
 8006d16:	f7ff feb4 	bl	8006a82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d20:	f043 0210 	orr.w	r2, r3, #16
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d2a:	6978      	ldr	r0, [r7, #20]
 8006d2c:	f7ff f932 	bl	8005f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d30:	bf00      	nop
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff f920 	bl	8005f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b08f      	sub	sp, #60	@ 0x3c
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d6a:	2b21      	cmp	r3, #33	@ 0x21
 8006d6c:	d14c      	bne.n	8006e08 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d132      	bne.n	8006de0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e6      	bne.n	8006d7a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6979      	ldr	r1, [r7, #20]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e6      	bne.n	8006dac <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006dde:	e013      	b.n	8006e08 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006e08:	bf00      	nop
 8006e0a:	373c      	adds	r7, #60	@ 0x3c
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b091      	sub	sp, #68	@ 0x44
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e22:	2b21      	cmp	r3, #33	@ 0x21
 8006e24:	d151      	bne.n	8006eca <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d132      	bne.n	8006e98 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e6      	bne.n	8006e32 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e82:	61fb      	str	r3, [r7, #28]
 8006e84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	69b9      	ldr	r1, [r7, #24]
 8006e88:	69fa      	ldr	r2, [r7, #28]
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e6      	bne.n	8006e64 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006e96:	e018      	b.n	8006eca <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb2:	1c9a      	adds	r2, r3, #2
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006eca:	bf00      	nop
 8006ecc:	3744      	adds	r7, #68	@ 0x44
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b091      	sub	sp, #68	@ 0x44
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee4:	2b21      	cmp	r3, #33	@ 0x21
 8006ee6:	d160      	bne.n	8006faa <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006eee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006ef0:	e057      	b.n	8006fa2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d133      	bne.n	8006f66 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3308      	adds	r3, #8
 8006f04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006f14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e5      	bne.n	8006efe <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f50:	61fb      	str	r3, [r7, #28]
 8006f52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e6      	bne.n	8006f32 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006f64:	e021      	b.n	8006faa <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d013      	beq.n	8006f9c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f78:	781a      	ldrb	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006fa2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1a4      	bne.n	8006ef2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006fa8:	e7ff      	b.n	8006faa <UART_TxISR_8BIT_FIFOEN+0xd4>
 8006faa:	bf00      	nop
 8006fac:	3744      	adds	r7, #68	@ 0x44
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b091      	sub	sp, #68	@ 0x44
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc4:	2b21      	cmp	r3, #33	@ 0x21
 8006fc6:	d165      	bne.n	8007094 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006fd0:	e05c      	b.n	800708c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d133      	bne.n	8007046 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e5      	bne.n	8006fde <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007026:	633b      	str	r3, [r7, #48]	@ 0x30
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	6979      	ldr	r1, [r7, #20]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	e841 2300 	strex	r3, r2, [r1]
 800703c:	613b      	str	r3, [r7, #16]
   return(result);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e6      	bne.n	8007012 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007044:	e026      	b.n	8007094 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007050:	2b00      	cmp	r3, #0
 8007052:	d018      	beq.n	8007086 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007058:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007068:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800706e:	1c9a      	adds	r2, r3, #2
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007086:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007088:	3b01      	subs	r3, #1
 800708a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800708c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800708e:	2b00      	cmp	r3, #0
 8007090:	d19f      	bne.n	8006fd2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007092:	e7ff      	b.n	8007094 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007094:	bf00      	nop
 8007096:	3744      	adds	r7, #68	@ 0x44
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6979      	ldr	r1, [r7, #20]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	613b      	str	r3, [r7, #16]
   return(result);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e6      	bne.n	80070a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7f9 fe31 	bl	8000d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ee:	bf00      	nop
 80070f0:	3720      	adds	r7, #32
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_UARTEx_DisableFifoMode+0x16>
 8007144:	2302      	movs	r3, #2
 8007146:	e027      	b.n	8007198 <HAL_UARTEx_DisableFifoMode+0x66>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2224      	movs	r2, #36	@ 0x24
 8007154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007176:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e02d      	b.n	8007218 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2224      	movs	r2, #36	@ 0x24
 80071c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f8a3 	bl	8007344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e02d      	b.n	8007294 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2224      	movs	r2, #36	@ 0x24
 8007244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0201 	bic.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f865 	bl	8007344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08c      	sub	sp, #48	@ 0x30
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d142      	bne.n	800733a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e03b      	b.n	800733c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	461a      	mov	r2, r3
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7ff faec 	bl	80068b4 <UART_Start_Receive_DMA>
 80072dc:	4603      	mov	r3, r0
 80072de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80072e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d124      	bne.n	8007334 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d11d      	bne.n	800732e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2210      	movs	r2, #16
 80072f8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	617b      	str	r3, [r7, #20]
   return(result);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f043 0310 	orr.w	r3, r3, #16
 800730e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
 800731a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6a39      	ldr	r1, [r7, #32]
 800731e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	61fb      	str	r3, [r7, #28]
   return(result);
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e6      	bne.n	80072fa <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800732c:	e002      	b.n	8007334 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007334:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007338:	e000      	b.n	800733c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800733a:	2302      	movs	r3, #2
  }
}
 800733c:	4618      	mov	r0, r3
 800733e:	3730      	adds	r7, #48	@ 0x30
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007350:	2b00      	cmp	r3, #0
 8007352:	d108      	bne.n	8007366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007364:	e031      	b.n	80073ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007366:	2308      	movs	r3, #8
 8007368:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800736a:	2308      	movs	r3, #8
 800736c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	0e5b      	lsrs	r3, r3, #25
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	0f5b      	lsrs	r3, r3, #29
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	7b3a      	ldrb	r2, [r7, #12]
 8007392:	4911      	ldr	r1, [pc, #68]	@ (80073d8 <UARTEx_SetNbDataToProcess+0x94>)
 8007394:	5c8a      	ldrb	r2, [r1, r2]
 8007396:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800739a:	7b3a      	ldrb	r2, [r7, #12]
 800739c:	490f      	ldr	r1, [pc, #60]	@ (80073dc <UARTEx_SetNbDataToProcess+0x98>)
 800739e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	7b7a      	ldrb	r2, [r7, #13]
 80073b0:	4909      	ldr	r1, [pc, #36]	@ (80073d8 <UARTEx_SetNbDataToProcess+0x94>)
 80073b2:	5c8a      	ldrb	r2, [r1, r2]
 80073b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073b8:	7b7a      	ldrb	r2, [r7, #13]
 80073ba:	4908      	ldr	r1, [pc, #32]	@ (80073dc <UARTEx_SetNbDataToProcess+0x98>)
 80073bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073be:	fb93 f3f2 	sdiv	r3, r3, r2
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	0800c560 	.word	0x0800c560
 80073dc:	0800c568 	.word	0x0800c568

080073e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073f0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80073f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007416:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800741a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007422:	b29a      	uxth	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	b29b      	uxth	r3, r3
 8007428:	43db      	mvns	r3, r3
 800742a:	b29b      	uxth	r3, r3
 800742c:	4013      	ands	r3, r2
 800742e:	b29a      	uxth	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	1d3b      	adds	r3, r7, #4
 800744e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007480:	b480      	push	{r7}
 8007482:	b0a7      	sub	sp, #156	@ 0x9c
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b29b      	uxth	r3, r3
 800749e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80074a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074a6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	78db      	ldrb	r3, [r3, #3]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d81f      	bhi.n	80074f2 <USB_ActivateEndpoint+0x72>
 80074b2:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <USB_ActivateEndpoint+0x38>)
 80074b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b8:	080074c9 	.word	0x080074c9
 80074bc:	080074e5 	.word	0x080074e5
 80074c0:	080074fb 	.word	0x080074fb
 80074c4:	080074d7 	.word	0x080074d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80074c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074d0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074d4:	e012      	b.n	80074fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80074d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074da:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80074de:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074e2:	e00b      	b.n	80074fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80074e4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074ec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074f0:	e004      	b.n	80074fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80074f8:	e000      	b.n	80074fc <USB_ActivateEndpoint+0x7c>
      break;
 80074fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	441a      	add	r2, r3
 8007506:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800750a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800750e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751a:	b29b      	uxth	r3, r3
 800751c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	b21b      	sxth	r3, r3
 800752e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007536:	b21a      	sxth	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	b21b      	sxth	r3, r3
 800753e:	4313      	orrs	r3, r2
 8007540:	b21b      	sxth	r3, r3
 8007542:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	441a      	add	r2, r3
 8007550:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800755c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007564:	b29b      	uxth	r3, r3
 8007566:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	7b1b      	ldrb	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f040 8180 	bne.w	8007872 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 8084 	beq.w	8007684 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007586:	b29b      	uxth	r3, r3
 8007588:	461a      	mov	r2, r3
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	4413      	add	r3, r2
 800758e:	61bb      	str	r3, [r7, #24]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	00da      	lsls	r2, r3, #3
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	88db      	ldrh	r3, [r3, #6]
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	827b      	strh	r3, [r7, #18]
 80075be:	8a7b      	ldrh	r3, [r7, #18]
 80075c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01b      	beq.n	8007600 <USB_ActivateEndpoint+0x180>
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075de:	823b      	strh	r3, [r7, #16]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	441a      	add	r2, r3
 80075ea:	8a3b      	ldrh	r3, [r7, #16]
 80075ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	78db      	ldrb	r3, [r3, #3]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d020      	beq.n	800764a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800761a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800761e:	81bb      	strh	r3, [r7, #12]
 8007620:	89bb      	ldrh	r3, [r7, #12]
 8007622:	f083 0320 	eor.w	r3, r3, #32
 8007626:	81bb      	strh	r3, [r7, #12]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	89bb      	ldrh	r3, [r7, #12]
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800763c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]
 8007648:	e3f9      	b.n	8007e3e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800765c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007660:	81fb      	strh	r3, [r7, #14]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	441a      	add	r2, r3
 800766c:	89fb      	ldrh	r3, [r7, #14]
 800766e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007672:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800767a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767e:	b29b      	uxth	r3, r3
 8007680:	8013      	strh	r3, [r2, #0]
 8007682:	e3dc      	b.n	8007e3e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	633b      	str	r3, [r7, #48]	@ 0x30
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800768e:	b29b      	uxth	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	4413      	add	r3, r2
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	00da      	lsls	r2, r3, #3
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	4413      	add	r3, r2
 80076a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	88db      	ldrh	r3, [r3, #6]
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c8:	4413      	add	r3, r2
 80076ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	00da      	lsls	r2, r3, #3
 80076d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d4:	4413      	add	r3, r2
 80076d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076da:	627b      	str	r3, [r7, #36]	@ 0x24
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <USB_ActivateEndpoint+0x28a>
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007702:	b29a      	uxth	r2, r3
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	e041      	b.n	800778e <USB_ActivateEndpoint+0x30e>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007710:	d81c      	bhi.n	800774c <USB_ActivateEndpoint+0x2cc>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	085b      	lsrs	r3, r3, #1
 8007718:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <USB_ActivateEndpoint+0x2b2>
 8007728:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800772c:	3301      	adds	r3, #1
 800772e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29a      	uxth	r2, r3
 8007738:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800773c:	b29b      	uxth	r3, r3
 800773e:	029b      	lsls	r3, r3, #10
 8007740:	b29b      	uxth	r3, r3
 8007742:	4313      	orrs	r3, r2
 8007744:	b29a      	uxth	r2, r3
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	801a      	strh	r2, [r3, #0]
 800774a:	e020      	b.n	800778e <USB_ActivateEndpoint+0x30e>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 031f 	and.w	r3, r3, #31
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <USB_ActivateEndpoint+0x2ec>
 8007762:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007766:	3b01      	subs	r3, #1
 8007768:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800776c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29a      	uxth	r2, r3
 8007772:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007776:	b29b      	uxth	r3, r3
 8007778:	029b      	lsls	r3, r3, #10
 800777a:	b29b      	uxth	r3, r3
 800777c:	4313      	orrs	r3, r2
 800777e:	b29b      	uxth	r3, r3
 8007780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007788:	b29a      	uxth	r2, r3
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800779c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800779e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d01b      	beq.n	80077de <USB_ActivateEndpoint+0x35e>
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077bc:	843b      	strh	r3, [r7, #32]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	441a      	add	r2, r3
 80077c8:	8c3b      	ldrh	r3, [r7, #32]
 80077ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077da:	b29b      	uxth	r3, r3
 80077dc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d124      	bne.n	8007830 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077fc:	83bb      	strh	r3, [r7, #28]
 80077fe:	8bbb      	ldrh	r3, [r7, #28]
 8007800:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007804:	83bb      	strh	r3, [r7, #28]
 8007806:	8bbb      	ldrh	r3, [r7, #28]
 8007808:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800780c:	83bb      	strh	r3, [r7, #28]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	441a      	add	r2, r3
 8007818:	8bbb      	ldrh	r3, [r7, #28]
 800781a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800781e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800782a:	b29b      	uxth	r3, r3
 800782c:	8013      	strh	r3, [r2, #0]
 800782e:	e306      	b.n	8007e3e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007846:	83fb      	strh	r3, [r7, #30]
 8007848:	8bfb      	ldrh	r3, [r7, #30]
 800784a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800784e:	83fb      	strh	r3, [r7, #30]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	441a      	add	r2, r3
 800785a:	8bfb      	ldrh	r3, [r7, #30]
 800785c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786c:	b29b      	uxth	r3, r3
 800786e:	8013      	strh	r3, [r2, #0]
 8007870:	e2e5      	b.n	8007e3e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	78db      	ldrb	r3, [r3, #3]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d11e      	bne.n	80078b8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800788c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007890:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	441a      	add	r2, r3
 800789e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80078a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80078ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	8013      	strh	r3, [r2, #0]
 80078b6:	e01d      	b.n	80078f4 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80078ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ce:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	441a      	add	r2, r3
 80078dc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80078e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007904:	4413      	add	r3, r2
 8007906:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	00da      	lsls	r2, r3, #3
 800790e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007910:	4413      	add	r3, r2
 8007912:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007916:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	891b      	ldrh	r3, [r3, #8]
 800791c:	085b      	lsrs	r3, r3, #1
 800791e:	b29b      	uxth	r3, r3
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	677b      	str	r3, [r7, #116]	@ 0x74
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007932:	b29b      	uxth	r3, r3
 8007934:	461a      	mov	r2, r3
 8007936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007938:	4413      	add	r3, r2
 800793a:	677b      	str	r3, [r7, #116]	@ 0x74
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	00da      	lsls	r2, r3, #3
 8007942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007944:	4413      	add	r3, r2
 8007946:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800794a:	673b      	str	r3, [r7, #112]	@ 0x70
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	895b      	ldrh	r3, [r3, #10]
 8007950:	085b      	lsrs	r3, r3, #1
 8007952:	b29b      	uxth	r3, r3
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800795a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	785b      	ldrb	r3, [r3, #1]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f040 81af 	bne.w	8007cc4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8007976:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800797a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d01d      	beq.n	80079be <USB_ActivateEndpoint+0x53e>
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	b29b      	uxth	r3, r3
 8007990:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007998:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	441a      	add	r2, r3
 80079a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80079aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80079b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80079ce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80079d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d01d      	beq.n	8007a16 <USB_ActivateEndpoint+0x596>
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	441a      	add	r2, r3
 80079fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	785b      	ldrb	r3, [r3, #1]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d16b      	bne.n	8007af6 <USB_ActivateEndpoint+0x676>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a2e:	4413      	add	r3, r2
 8007a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	00da      	lsls	r2, r3, #3
 8007a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <USB_ActivateEndpoint+0x5f0>
 8007a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a6c:	801a      	strh	r2, [r3, #0]
 8007a6e:	e05d      	b.n	8007b2c <USB_ActivateEndpoint+0x6ac>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a76:	d81c      	bhi.n	8007ab2 <USB_ActivateEndpoint+0x632>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	085b      	lsrs	r3, r3, #1
 8007a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d004      	beq.n	8007a98 <USB_ActivateEndpoint+0x618>
 8007a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a92:	3301      	adds	r3, #1
 8007a94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	029b      	lsls	r3, r3, #10
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aae:	801a      	strh	r2, [r3, #0]
 8007ab0:	e03c      	b.n	8007b2c <USB_ActivateEndpoint+0x6ac>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	095b      	lsrs	r3, r3, #5
 8007ab8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <USB_ActivateEndpoint+0x652>
 8007ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007acc:	3b01      	subs	r3, #1
 8007ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	029b      	lsls	r3, r3, #10
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	e01a      	b.n	8007b2c <USB_ActivateEndpoint+0x6ac>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d116      	bne.n	8007b2c <USB_ActivateEndpoint+0x6ac>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b0e:	4413      	add	r3, r2
 8007b10:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	00da      	lsls	r2, r3, #3
 8007b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b20:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b2a:	801a      	strh	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d16b      	bne.n	8007c10 <USB_ActivateEndpoint+0x790>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b48:	4413      	add	r3, r2
 8007b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	00da      	lsls	r2, r3, #3
 8007b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b54:	4413      	add	r3, r2
 8007b56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6a:	801a      	strh	r2, [r3, #0]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <USB_ActivateEndpoint+0x70a>
 8007b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b86:	801a      	strh	r2, [r3, #0]
 8007b88:	e05b      	b.n	8007c42 <USB_ActivateEndpoint+0x7c2>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b90:	d81c      	bhi.n	8007bcc <USB_ActivateEndpoint+0x74c>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	085b      	lsrs	r3, r3, #1
 8007b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <USB_ActivateEndpoint+0x732>
 8007ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bac:	3301      	adds	r3, #1
 8007bae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	029b      	lsls	r3, r3, #10
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc8:	801a      	strh	r2, [r3, #0]
 8007bca:	e03a      	b.n	8007c42 <USB_ActivateEndpoint+0x7c2>
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	095b      	lsrs	r3, r3, #5
 8007bd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 031f 	and.w	r3, r3, #31
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d104      	bne.n	8007bec <USB_ActivateEndpoint+0x76c>
 8007be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007be6:	3b01      	subs	r3, #1
 8007be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	029b      	lsls	r3, r3, #10
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0c:	801a      	strh	r2, [r3, #0]
 8007c0e:	e018      	b.n	8007c42 <USB_ActivateEndpoint+0x7c2>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d114      	bne.n	8007c42 <USB_ActivateEndpoint+0x7c2>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c24:	4413      	add	r3, r2
 8007c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	00da      	lsls	r2, r3, #3
 8007c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c30:	4413      	add	r3, r2
 8007c32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c36:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c40:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c58:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c5c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c60:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c68:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	441a      	add	r2, r3
 8007c74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ca0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	441a      	add	r2, r3
 8007cac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007cae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	8013      	strh	r3, [r2, #0]
 8007cc2:	e0bc      	b.n	8007e3e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007cd4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007cd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01d      	beq.n	8007d1c <USB_ActivateEndpoint+0x89c>
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cf6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	441a      	add	r2, r3
 8007d04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007d2c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01d      	beq.n	8007d74 <USB_ActivateEndpoint+0x8f4>
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	441a      	add	r2, r3
 8007d5c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	78db      	ldrb	r3, [r3, #3]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d024      	beq.n	8007dc6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d92:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007d96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007d9a:	f083 0320 	eor.w	r3, r3, #32
 8007d9e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	441a      	add	r2, r3
 8007dac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	8013      	strh	r3, [r2, #0]
 8007dc4:	e01d      	b.n	8007e02 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ddc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	441a      	add	r2, r3
 8007dea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007dee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007df2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007df6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e18:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	441a      	add	r2, r3
 8007e26:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e3e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	379c      	adds	r7, #156	@ 0x9c
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop

08007e50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b08d      	sub	sp, #52	@ 0x34
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	7b1b      	ldrb	r3, [r3, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f040 808e 	bne.w	8007f80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d044      	beq.n	8007ef6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	81bb      	strh	r3, [r7, #12]
 8007e7a:	89bb      	ldrh	r3, [r7, #12]
 8007e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01b      	beq.n	8007ebc <USB_DeactivateEndpoint+0x6c>
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e9a:	817b      	strh	r3, [r7, #10]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	441a      	add	r2, r3
 8007ea6:	897b      	ldrh	r3, [r7, #10]
 8007ea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ed2:	813b      	strh	r3, [r7, #8]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	441a      	add	r2, r3
 8007ede:	893b      	ldrh	r3, [r7, #8]
 8007ee0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ee4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ee8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	8013      	strh	r3, [r2, #0]
 8007ef4:	e192      	b.n	800821c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	827b      	strh	r3, [r7, #18]
 8007f04:	8a7b      	ldrh	r3, [r7, #18]
 8007f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01b      	beq.n	8007f46 <USB_DeactivateEndpoint+0xf6>
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f24:	823b      	strh	r3, [r7, #16]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	8a3b      	ldrh	r3, [r7, #16]
 8007f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f5c:	81fb      	strh	r3, [r7, #14]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	441a      	add	r2, r3
 8007f68:	89fb      	ldrh	r3, [r7, #14]
 8007f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	8013      	strh	r3, [r2, #0]
 8007f7e:	e14d      	b.n	800821c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	785b      	ldrb	r3, [r3, #1]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f040 80a5 	bne.w	80080d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	843b      	strh	r3, [r7, #32]
 8007f98:	8c3b      	ldrh	r3, [r7, #32]
 8007f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01b      	beq.n	8007fda <USB_DeactivateEndpoint+0x18a>
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb8:	83fb      	strh	r3, [r7, #30]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	441a      	add	r2, r3
 8007fc4:	8bfb      	ldrh	r3, [r7, #30]
 8007fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	83bb      	strh	r3, [r7, #28]
 8007fe8:	8bbb      	ldrh	r3, [r7, #28]
 8007fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d01b      	beq.n	800802a <USB_DeactivateEndpoint+0x1da>
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008008:	837b      	strh	r3, [r7, #26]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	441a      	add	r2, r3
 8008014:	8b7b      	ldrh	r3, [r7, #26]
 8008016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800801a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800801e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008022:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008026:	b29b      	uxth	r3, r3
 8008028:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800803c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008040:	833b      	strh	r3, [r7, #24]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	441a      	add	r2, r3
 800804c:	8b3b      	ldrh	r3, [r7, #24]
 800804e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800805a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800805e:	b29b      	uxth	r3, r3
 8008060:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008078:	82fb      	strh	r3, [r7, #22]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	441a      	add	r2, r3
 8008084:	8afb      	ldrh	r3, [r7, #22]
 8008086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800808a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800808e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008096:	b29b      	uxth	r3, r3
 8008098:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080b0:	82bb      	strh	r3, [r7, #20]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	441a      	add	r2, r3
 80080bc:	8abb      	ldrh	r3, [r7, #20]
 80080be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	8013      	strh	r3, [r2, #0]
 80080d2:	e0a3      	b.n	800821c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80080e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80080e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01b      	beq.n	8008124 <USB_DeactivateEndpoint+0x2d4>
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008102:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	441a      	add	r2, r3
 800810e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008110:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008114:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008118:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800811c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008120:	b29b      	uxth	r3, r3
 8008122:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008132:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d01b      	beq.n	8008174 <USB_DeactivateEndpoint+0x324>
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29b      	uxth	r3, r3
 800814a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800814e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008152:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	441a      	add	r2, r3
 800815e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800816c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008170:	b29b      	uxth	r3, r3
 8008172:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	881b      	ldrh	r3, [r3, #0]
 8008180:	b29b      	uxth	r3, r3
 8008182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800818a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	441a      	add	r2, r3
 8008196:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800819c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	441a      	add	r2, r3
 80081ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081fa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	441a      	add	r2, r3
 8008206:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800820c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008218:	b29b      	uxth	r3, r3
 800821a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3734      	adds	r7, #52	@ 0x34
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b0ac      	sub	sp, #176	@ 0xb0
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	2b01      	cmp	r3, #1
 800823a:	f040 84ca 	bne.w	8008bd2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	429a      	cmp	r2, r3
 8008248:	d904      	bls.n	8008254 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008252:	e003      	b.n	800825c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	7b1b      	ldrb	r3, [r3, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d122      	bne.n	80082aa <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	6959      	ldr	r1, [r3, #20]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	88da      	ldrh	r2, [r3, #6]
 800826c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008270:	b29b      	uxth	r3, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 febd 	bl	8008ff2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	613b      	str	r3, [r7, #16]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008282:	b29b      	uxth	r3, r3
 8008284:	461a      	mov	r2, r3
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	4413      	add	r3, r2
 800828a:	613b      	str	r3, [r7, #16]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	00da      	lsls	r2, r3, #3
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	4413      	add	r3, r2
 8008296:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	801a      	strh	r2, [r3, #0]
 80082a6:	f000 bc6f 	b.w	8008b88 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	78db      	ldrb	r3, [r3, #3]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	f040 831e 	bne.w	80088f0 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	6a1a      	ldr	r2, [r3, #32]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	429a      	cmp	r2, r3
 80082be:	f240 82cf 	bls.w	8008860 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	441a      	add	r2, r3
 80082e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80082ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80082f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	6a1a      	ldr	r2, [r3, #32]
 8008302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	b29b      	uxth	r3, r3
 800831a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 814f 	beq.w	80085c2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	633b      	str	r3, [r7, #48]	@ 0x30
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d16b      	bne.n	8008408 <USB_EPStartXfer+0x1de>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800833a:	b29b      	uxth	r3, r3
 800833c:	461a      	mov	r2, r3
 800833e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008340:	4413      	add	r3, r2
 8008342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	00da      	lsls	r2, r3, #3
 800834a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834c:	4413      	add	r3, r2
 800834e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008352:	627b      	str	r3, [r7, #36]	@ 0x24
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800835e:	b29a      	uxth	r2, r3
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	801a      	strh	r2, [r3, #0]
 8008364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <USB_EPStartXfer+0x158>
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837a:	b29a      	uxth	r2, r3
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	801a      	strh	r2, [r3, #0]
 8008380:	e05b      	b.n	800843a <USB_EPStartXfer+0x210>
 8008382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008386:	2b3e      	cmp	r3, #62	@ 0x3e
 8008388:	d81c      	bhi.n	80083c4 <USB_EPStartXfer+0x19a>
 800838a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <USB_EPStartXfer+0x180>
 80083a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083a4:	3301      	adds	r3, #1
 80083a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	029b      	lsls	r3, r3, #10
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	4313      	orrs	r3, r2
 80083bc:	b29a      	uxth	r2, r3
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	e03a      	b.n	800843a <USB_EPStartXfer+0x210>
 80083c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083c8:	095b      	lsrs	r3, r3, #5
 80083ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083d2:	f003 031f 	and.w	r3, r3, #31
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d104      	bne.n	80083e4 <USB_EPStartXfer+0x1ba>
 80083da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083de:	3b01      	subs	r3, #1
 80083e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	029b      	lsls	r3, r3, #10
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	4313      	orrs	r3, r2
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008400:	b29a      	uxth	r2, r3
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	801a      	strh	r2, [r3, #0]
 8008406:	e018      	b.n	800843a <USB_EPStartXfer+0x210>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	785b      	ldrb	r3, [r3, #1]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d114      	bne.n	800843a <USB_EPStartXfer+0x210>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008416:	b29b      	uxth	r3, r3
 8008418:	461a      	mov	r2, r3
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	4413      	add	r3, r2
 800841e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	00da      	lsls	r2, r3, #3
 8008426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008428:	4413      	add	r3, r2
 800842a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800842e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008434:	b29a      	uxth	r2, r3
 8008436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008438:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	895b      	ldrh	r3, [r3, #10]
 800843e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	6959      	ldr	r1, [r3, #20]
 8008446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800844a:	b29b      	uxth	r3, r3
 800844c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fdce 	bl	8008ff2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	695a      	ldr	r2, [r3, #20]
 800845a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800845e:	441a      	add	r2, r3
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	429a      	cmp	r2, r3
 800846e:	d907      	bls.n	8008480 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	6a1a      	ldr	r2, [r3, #32]
 8008474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008478:	1ad2      	subs	r2, r2, r3
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	621a      	str	r2, [r3, #32]
 800847e:	e006      	b.n	800848e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2200      	movs	r2, #0
 800848c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d16b      	bne.n	800856e <USB_EPStartXfer+0x344>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	461a      	mov	r2, r3
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	4413      	add	r3, r2
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	00da      	lsls	r2, r3, #3
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	4413      	add	r3, r2
 80084b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	801a      	strh	r2, [r3, #0]
 80084ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <USB_EPStartXfer+0x2be>
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	801a      	strh	r2, [r3, #0]
 80084e6:	e05d      	b.n	80085a4 <USB_EPStartXfer+0x37a>
 80084e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80084ee:	d81c      	bhi.n	800852a <USB_EPStartXfer+0x300>
 80084f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084f4:	085b      	lsrs	r3, r3, #1
 80084f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <USB_EPStartXfer+0x2e6>
 8008506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800850a:	3301      	adds	r3, #1
 800850c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b29a      	uxth	r2, r3
 8008516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800851a:	b29b      	uxth	r3, r3
 800851c:	029b      	lsls	r3, r3, #10
 800851e:	b29b      	uxth	r3, r3
 8008520:	4313      	orrs	r3, r2
 8008522:	b29a      	uxth	r2, r3
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	801a      	strh	r2, [r3, #0]
 8008528:	e03c      	b.n	80085a4 <USB_EPStartXfer+0x37a>
 800852a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800852e:	095b      	lsrs	r3, r3, #5
 8008530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008538:	f003 031f 	and.w	r3, r3, #31
 800853c:	2b00      	cmp	r3, #0
 800853e:	d104      	bne.n	800854a <USB_EPStartXfer+0x320>
 8008540:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008544:	3b01      	subs	r3, #1
 8008546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29a      	uxth	r2, r3
 8008550:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008554:	b29b      	uxth	r3, r3
 8008556:	029b      	lsls	r3, r3, #10
 8008558:	b29b      	uxth	r3, r3
 800855a:	4313      	orrs	r3, r2
 800855c:	b29b      	uxth	r3, r3
 800855e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008566:	b29a      	uxth	r2, r3
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	801a      	strh	r2, [r3, #0]
 800856c:	e01a      	b.n	80085a4 <USB_EPStartXfer+0x37a>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d116      	bne.n	80085a4 <USB_EPStartXfer+0x37a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	623b      	str	r3, [r7, #32]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008580:	b29b      	uxth	r3, r3
 8008582:	461a      	mov	r2, r3
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	4413      	add	r3, r2
 8008588:	623b      	str	r3, [r7, #32]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	00da      	lsls	r2, r3, #3
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	4413      	add	r3, r2
 8008594:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008598:	61fb      	str	r3, [r7, #28]
 800859a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800859e:	b29a      	uxth	r2, r3
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	891b      	ldrh	r3, [r3, #8]
 80085a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	6959      	ldr	r1, [r3, #20]
 80085b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fd19 	bl	8008ff2 <USB_WritePMA>
 80085c0:	e2e2      	b.n	8008b88 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d16b      	bne.n	80086a2 <USB_EPStartXfer+0x478>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	461a      	mov	r2, r3
 80085d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085da:	4413      	add	r3, r2
 80085dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	00da      	lsls	r2, r3, #3
 80085e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085e6:	4413      	add	r3, r2
 80085e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <USB_EPStartXfer+0x3f2>
 8008606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	b29b      	uxth	r3, r3
 800860c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008614:	b29a      	uxth	r2, r3
 8008616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008618:	801a      	strh	r2, [r3, #0]
 800861a:	e05d      	b.n	80086d8 <USB_EPStartXfer+0x4ae>
 800861c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008620:	2b3e      	cmp	r3, #62	@ 0x3e
 8008622:	d81c      	bhi.n	800865e <USB_EPStartXfer+0x434>
 8008624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008628:	085b      	lsrs	r3, r3, #1
 800862a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800862e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <USB_EPStartXfer+0x41a>
 800863a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800863e:	3301      	adds	r3, #1
 8008640:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	b29a      	uxth	r2, r3
 800864a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800864e:	b29b      	uxth	r3, r3
 8008650:	029b      	lsls	r3, r3, #10
 8008652:	b29b      	uxth	r3, r3
 8008654:	4313      	orrs	r3, r2
 8008656:	b29a      	uxth	r2, r3
 8008658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800865a:	801a      	strh	r2, [r3, #0]
 800865c:	e03c      	b.n	80086d8 <USB_EPStartXfer+0x4ae>
 800865e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800866c:	f003 031f 	and.w	r3, r3, #31
 8008670:	2b00      	cmp	r3, #0
 8008672:	d104      	bne.n	800867e <USB_EPStartXfer+0x454>
 8008674:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008678:	3b01      	subs	r3, #1
 800867a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800867e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	b29a      	uxth	r2, r3
 8008684:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008688:	b29b      	uxth	r3, r3
 800868a:	029b      	lsls	r3, r3, #10
 800868c:	b29b      	uxth	r3, r3
 800868e:	4313      	orrs	r3, r2
 8008690:	b29b      	uxth	r3, r3
 8008692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800869a:	b29a      	uxth	r2, r3
 800869c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	e01a      	b.n	80086d8 <USB_EPStartXfer+0x4ae>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d116      	bne.n	80086d8 <USB_EPStartXfer+0x4ae>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	461a      	mov	r2, r3
 80086b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086ba:	4413      	add	r3, r2
 80086bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	00da      	lsls	r2, r3, #3
 80086c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086c6:	4413      	add	r3, r2
 80086c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80086cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	891b      	ldrh	r3, [r3, #8]
 80086dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	6959      	ldr	r1, [r3, #20]
 80086e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fc7f 	bl	8008ff2 <USB_WritePMA>
            ep->xfer_buff += len;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	695a      	ldr	r2, [r3, #20]
 80086f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086fc:	441a      	add	r2, r3
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6a1a      	ldr	r2, [r3, #32]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	429a      	cmp	r2, r3
 800870c:	d907      	bls.n	800871e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6a1a      	ldr	r2, [r3, #32]
 8008712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008716:	1ad2      	subs	r2, r2, r3
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	621a      	str	r2, [r3, #32]
 800871c:	e006      	b.n	800872c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2200      	movs	r2, #0
 800872a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	785b      	ldrb	r3, [r3, #1]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d16b      	bne.n	8008810 <USB_EPStartXfer+0x5e6>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008742:	b29b      	uxth	r3, r3
 8008744:	461a      	mov	r2, r3
 8008746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008748:	4413      	add	r3, r2
 800874a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	00da      	lsls	r2, r3, #3
 8008752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008754:	4413      	add	r3, r2
 8008756:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800875a:	637b      	str	r3, [r7, #52]	@ 0x34
 800875c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b29b      	uxth	r3, r3
 8008762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008766:	b29a      	uxth	r2, r3
 8008768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800876a:	801a      	strh	r2, [r3, #0]
 800876c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <USB_EPStartXfer+0x560>
 8008774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	b29b      	uxth	r3, r3
 800877a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800877e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008782:	b29a      	uxth	r2, r3
 8008784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	e05b      	b.n	8008842 <USB_EPStartXfer+0x618>
 800878a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800878e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008790:	d81c      	bhi.n	80087cc <USB_EPStartXfer+0x5a2>
 8008792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800879c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <USB_EPStartXfer+0x588>
 80087a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087ac:	3301      	adds	r3, #1
 80087ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087bc:	b29b      	uxth	r3, r3
 80087be:	029b      	lsls	r3, r3, #10
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	4313      	orrs	r3, r2
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c8:	801a      	strh	r2, [r3, #0]
 80087ca:	e03a      	b.n	8008842 <USB_EPStartXfer+0x618>
 80087cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087d0:	095b      	lsrs	r3, r3, #5
 80087d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087da:	f003 031f 	and.w	r3, r3, #31
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d104      	bne.n	80087ec <USB_EPStartXfer+0x5c2>
 80087e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087e6:	3b01      	subs	r3, #1
 80087e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	029b      	lsls	r3, r3, #10
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	4313      	orrs	r3, r2
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008808:	b29a      	uxth	r2, r3
 800880a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880c:	801a      	strh	r2, [r3, #0]
 800880e:	e018      	b.n	8008842 <USB_EPStartXfer+0x618>
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	785b      	ldrb	r3, [r3, #1]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d114      	bne.n	8008842 <USB_EPStartXfer+0x618>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800881e:	b29b      	uxth	r3, r3
 8008820:	461a      	mov	r2, r3
 8008822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008824:	4413      	add	r3, r2
 8008826:	643b      	str	r3, [r7, #64]	@ 0x40
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	00da      	lsls	r2, r3, #3
 800882e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008830:	4413      	add	r3, r2
 8008832:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800883c:	b29a      	uxth	r2, r3
 800883e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008840:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	895b      	ldrh	r3, [r3, #10]
 8008846:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	6959      	ldr	r1, [r3, #20]
 800884e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008852:	b29b      	uxth	r3, r3
 8008854:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fbca 	bl	8008ff2 <USB_WritePMA>
 800885e:	e193      	b.n	8008b88 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29b      	uxth	r3, r3
 8008876:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800887a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800887e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	441a      	add	r2, r3
 800888c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008890:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008894:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800889c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	461a      	mov	r2, r3
 80088b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088b4:	4413      	add	r3, r2
 80088b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	00da      	lsls	r2, r3, #3
 80088be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088c0:	4413      	add	r3, r2
 80088c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	891b      	ldrh	r3, [r3, #8]
 80088d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	6959      	ldr	r1, [r3, #20]
 80088de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fb82 	bl	8008ff2 <USB_WritePMA>
 80088ee:	e14b      	b.n	8008b88 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	6a1a      	ldr	r2, [r3, #32]
 80088f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088f8:	1ad2      	subs	r2, r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	b29b      	uxth	r3, r3
 800890c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 809a 	beq.w	8008a4a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	673b      	str	r3, [r7, #112]	@ 0x70
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	785b      	ldrb	r3, [r3, #1]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d16b      	bne.n	80089fa <USB_EPStartXfer+0x7d0>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800892c:	b29b      	uxth	r3, r3
 800892e:	461a      	mov	r2, r3
 8008930:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008932:	4413      	add	r3, r2
 8008934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	00da      	lsls	r2, r3, #3
 800893c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800893e:	4413      	add	r3, r2
 8008940:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008944:	667b      	str	r3, [r7, #100]	@ 0x64
 8008946:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008950:	b29a      	uxth	r2, r3
 8008952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008954:	801a      	strh	r2, [r3, #0]
 8008956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <USB_EPStartXfer+0x74a>
 800895e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896c:	b29a      	uxth	r2, r3
 800896e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	e05b      	b.n	8008a2c <USB_EPStartXfer+0x802>
 8008974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008978:	2b3e      	cmp	r3, #62	@ 0x3e
 800897a:	d81c      	bhi.n	80089b6 <USB_EPStartXfer+0x78c>
 800897c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d004      	beq.n	800899c <USB_EPStartXfer+0x772>
 8008992:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008996:	3301      	adds	r3, #1
 8008998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800899c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	029b      	lsls	r3, r3, #10
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	4313      	orrs	r3, r2
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089b2:	801a      	strh	r2, [r3, #0]
 80089b4:	e03a      	b.n	8008a2c <USB_EPStartXfer+0x802>
 80089b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089ba:	095b      	lsrs	r3, r3, #5
 80089bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089c4:	f003 031f 	and.w	r3, r3, #31
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d104      	bne.n	80089d6 <USB_EPStartXfer+0x7ac>
 80089cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089d0:	3b01      	subs	r3, #1
 80089d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	b29a      	uxth	r2, r3
 80089dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	029b      	lsls	r3, r3, #10
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	4313      	orrs	r3, r2
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089f6:	801a      	strh	r2, [r3, #0]
 80089f8:	e018      	b.n	8008a2c <USB_EPStartXfer+0x802>
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	785b      	ldrb	r3, [r3, #1]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d114      	bne.n	8008a2c <USB_EPStartXfer+0x802>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a0e:	4413      	add	r3, r2
 8008a10:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	00da      	lsls	r2, r3, #3
 8008a18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	895b      	ldrh	r3, [r3, #10]
 8008a30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	6959      	ldr	r1, [r3, #20]
 8008a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fad5 	bl	8008ff2 <USB_WritePMA>
 8008a48:	e09e      	b.n	8008b88 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	785b      	ldrb	r3, [r3, #1]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d16b      	bne.n	8008b2a <USB_EPStartXfer+0x900>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	461a      	mov	r2, r3
 8008a60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a62:	4413      	add	r3, r2
 8008a64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	00da      	lsls	r2, r3, #3
 8008a6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a6e:	4413      	add	r3, r2
 8008a70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a84:	801a      	strh	r2, [r3, #0]
 8008a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10a      	bne.n	8008aa4 <USB_EPStartXfer+0x87a>
 8008a8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aa0:	801a      	strh	r2, [r3, #0]
 8008aa2:	e063      	b.n	8008b6c <USB_EPStartXfer+0x942>
 8008aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aa8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008aaa:	d81c      	bhi.n	8008ae6 <USB_EPStartXfer+0x8bc>
 8008aac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ab0:	085b      	lsrs	r3, r3, #1
 8008ab2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d004      	beq.n	8008acc <USB_EPStartXfer+0x8a2>
 8008ac2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	029b      	lsls	r3, r3, #10
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	4313      	orrs	r3, r2
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	e042      	b.n	8008b6c <USB_EPStartXfer+0x942>
 8008ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aea:	095b      	lsrs	r3, r3, #5
 8008aec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008af0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008af4:	f003 031f 	and.w	r3, r3, #31
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d104      	bne.n	8008b06 <USB_EPStartXfer+0x8dc>
 8008afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008b00:	3b01      	subs	r3, #1
 8008b02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	029b      	lsls	r3, r3, #10
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	4313      	orrs	r3, r2
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e020      	b.n	8008b6c <USB_EPStartXfer+0x942>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	785b      	ldrb	r3, [r3, #1]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d11c      	bne.n	8008b6c <USB_EPStartXfer+0x942>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	461a      	mov	r2, r3
 8008b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b46:	4413      	add	r3, r2
 8008b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	00da      	lsls	r2, r3, #3
 8008b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b56:	4413      	add	r3, r2
 8008b58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	891b      	ldrh	r3, [r3, #8]
 8008b70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	6959      	ldr	r1, [r3, #20]
 8008b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa35 	bl	8008ff2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b9e:	817b      	strh	r3, [r7, #10]
 8008ba0:	897b      	ldrh	r3, [r7, #10]
 8008ba2:	f083 0310 	eor.w	r3, r3, #16
 8008ba6:	817b      	strh	r3, [r7, #10]
 8008ba8:	897b      	ldrh	r3, [r7, #10]
 8008baa:	f083 0320 	eor.w	r3, r3, #32
 8008bae:	817b      	strh	r3, [r7, #10]
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	441a      	add	r2, r3
 8008bba:	897b      	ldrh	r3, [r7, #10]
 8008bbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	8013      	strh	r3, [r2, #0]
 8008bd0:	e0d5      	b.n	8008d7e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	7b1b      	ldrb	r3, [r3, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d156      	bne.n	8008c88 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d122      	bne.n	8008c28 <USB_EPStartXfer+0x9fe>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	78db      	ldrb	r3, [r3, #3]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d11e      	bne.n	8008c28 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c00:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	441a      	add	r2, r3
 8008c0e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c1a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	8013      	strh	r3, [r2, #0]
 8008c26:	e01d      	b.n	8008c64 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c3e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	441a      	add	r2, r3
 8008c4c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008c50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	699a      	ldr	r2, [r3, #24]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d907      	bls.n	8008c80 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	1ad2      	subs	r2, r2, r3
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	619a      	str	r2, [r3, #24]
 8008c7e:	e054      	b.n	8008d2a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2200      	movs	r2, #0
 8008c84:	619a      	str	r2, [r3, #24]
 8008c86:	e050      	b.n	8008d2a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	78db      	ldrb	r3, [r3, #3]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d142      	bne.n	8008d16 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d048      	beq.n	8008d2a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ca8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d005      	beq.n	8008cc0 <USB_EPStartXfer+0xa96>
 8008cb4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10b      	bne.n	8008cd8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008cc0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d12e      	bne.n	8008d2a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ccc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d128      	bne.n	8008d2a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cee:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	441a      	add	r2, r3
 8008cfc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	8013      	strh	r3, [r2, #0]
 8008d14:	e009      	b.n	8008d2a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	78db      	ldrb	r3, [r3, #3]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d103      	bne.n	8008d26 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2200      	movs	r2, #0
 8008d22:	619a      	str	r2, [r3, #24]
 8008d24:	e001      	b.n	8008d2a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e02a      	b.n	8008d80 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	441a      	add	r2, r3
 8008d66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	37b0      	adds	r7, #176	@ 0xb0
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	785b      	ldrb	r3, [r3, #1]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d020      	beq.n	8008ddc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db0:	81bb      	strh	r3, [r7, #12]
 8008db2:	89bb      	ldrh	r3, [r7, #12]
 8008db4:	f083 0310 	eor.w	r3, r3, #16
 8008db8:	81bb      	strh	r3, [r7, #12]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	441a      	add	r2, r3
 8008dc4:	89bb      	ldrh	r3, [r7, #12]
 8008dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	8013      	strh	r3, [r2, #0]
 8008dda:	e01f      	b.n	8008e1c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008df2:	81fb      	strh	r3, [r7, #14]
 8008df4:	89fb      	ldrh	r3, [r7, #14]
 8008df6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008dfa:	81fb      	strh	r3, [r7, #14]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	441a      	add	r2, r3
 8008e06:	89fb      	ldrh	r3, [r7, #14]
 8008e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b087      	sub	sp, #28
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	785b      	ldrb	r3, [r3, #1]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d04c      	beq.n	8008ed6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	823b      	strh	r3, [r7, #16]
 8008e4a:	8a3b      	ldrh	r3, [r7, #16]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d01b      	beq.n	8008e8c <USB_EPClearStall+0x62>
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	881b      	ldrh	r3, [r3, #0]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e6a:	81fb      	strh	r3, [r7, #14]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	441a      	add	r2, r3
 8008e76:	89fb      	ldrh	r3, [r7, #14]
 8008e78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	78db      	ldrb	r3, [r3, #3]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d06c      	beq.n	8008f6e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eaa:	81bb      	strh	r3, [r7, #12]
 8008eac:	89bb      	ldrh	r3, [r7, #12]
 8008eae:	f083 0320 	eor.w	r3, r3, #32
 8008eb2:	81bb      	strh	r3, [r7, #12]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	441a      	add	r2, r3
 8008ebe:	89bb      	ldrh	r3, [r7, #12]
 8008ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	8013      	strh	r3, [r2, #0]
 8008ed4:	e04b      	b.n	8008f6e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	82fb      	strh	r3, [r7, #22]
 8008ee4:	8afb      	ldrh	r3, [r7, #22]
 8008ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d01b      	beq.n	8008f26 <USB_EPClearStall+0xfc>
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f04:	82bb      	strh	r3, [r7, #20]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	441a      	add	r2, r3
 8008f10:	8abb      	ldrh	r3, [r7, #20]
 8008f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3c:	827b      	strh	r3, [r7, #18]
 8008f3e:	8a7b      	ldrh	r3, [r7, #18]
 8008f40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f44:	827b      	strh	r3, [r7, #18]
 8008f46:	8a7b      	ldrh	r3, [r7, #18]
 8008f48:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f4c:	827b      	strh	r3, [r7, #18]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	441a      	add	r2, r3
 8008f58:	8a7b      	ldrh	r3, [r7, #18]
 8008f5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d103      	bne.n	8008f96 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2280      	movs	r2, #128	@ 0x80
 8008f92:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b085      	sub	sp, #20
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b08b      	sub	sp, #44	@ 0x2c
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	461a      	mov	r2, r3
 8009000:	460b      	mov	r3, r1
 8009002:	80fb      	strh	r3, [r7, #6]
 8009004:	4613      	mov	r3, r2
 8009006:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009008:	88bb      	ldrh	r3, [r7, #4]
 800900a:	3301      	adds	r3, #1
 800900c:	085b      	lsrs	r3, r3, #1
 800900e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009018:	88fa      	ldrh	r2, [r7, #6]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009022:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	627b      	str	r3, [r7, #36]	@ 0x24
 8009028:	e01b      	b.n	8009062 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	3301      	adds	r3, #1
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	b21a      	sxth	r2, r3
 800903a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800903e:	4313      	orrs	r3, r2
 8009040:	b21b      	sxth	r3, r3
 8009042:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	8a7a      	ldrh	r2, [r7, #18]
 8009048:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	3302      	adds	r3, #2
 800904e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	3301      	adds	r3, #1
 8009054:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	3301      	adds	r3, #1
 800905a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	3b01      	subs	r3, #1
 8009060:	627b      	str	r3, [r7, #36]	@ 0x24
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e0      	bne.n	800902a <USB_WritePMA+0x38>
  }
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	372c      	adds	r7, #44	@ 0x2c
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009076:	b480      	push	{r7}
 8009078:	b08b      	sub	sp, #44	@ 0x2c
 800907a:	af00      	add	r7, sp, #0
 800907c:	60f8      	str	r0, [r7, #12]
 800907e:	60b9      	str	r1, [r7, #8]
 8009080:	4611      	mov	r1, r2
 8009082:	461a      	mov	r2, r3
 8009084:	460b      	mov	r3, r1
 8009086:	80fb      	strh	r3, [r7, #6]
 8009088:	4613      	mov	r3, r2
 800908a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800908c:	88bb      	ldrh	r3, [r7, #4]
 800908e:	085b      	lsrs	r3, r3, #1
 8009090:	b29b      	uxth	r3, r3
 8009092:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800909c:	88fa      	ldrh	r2, [r7, #6]
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80090a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80090ac:	e018      	b.n	80090e0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	881b      	ldrh	r3, [r3, #0]
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	3302      	adds	r3, #2
 80090ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	3301      	adds	r3, #1
 80090c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	0a1b      	lsrs	r3, r3, #8
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	3301      	adds	r3, #1
 80090d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80090da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090dc:	3b01      	subs	r3, #1
 80090de:	627b      	str	r3, [r7, #36]	@ 0x24
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e3      	bne.n	80090ae <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80090e6:	88bb      	ldrh	r3, [r7, #4]
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d007      	beq.n	8009102 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	701a      	strb	r2, [r3, #0]
  }
}
 8009102:	bf00      	nop
 8009104:	372c      	adds	r7, #44	@ 0x2c
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	460b      	mov	r3, r1
 8009118:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800911a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800911e:	f002 f911 	bl	800b344 <USBD_static_malloc>
 8009122:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d105      	bne.n	8009136 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009132:	2302      	movs	r3, #2
 8009134:	e066      	b.n	8009204 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7c1b      	ldrb	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d119      	bne.n	800917a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009146:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800914a:	2202      	movs	r2, #2
 800914c:	2181      	movs	r1, #129	@ 0x81
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 ff9f 	bl	800b092 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800915a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800915e:	2202      	movs	r2, #2
 8009160:	2101      	movs	r1, #1
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 ff95 	bl	800b092 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2210      	movs	r2, #16
 8009174:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009178:	e016      	b.n	80091a8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800917a:	2340      	movs	r3, #64	@ 0x40
 800917c:	2202      	movs	r2, #2
 800917e:	2181      	movs	r1, #129	@ 0x81
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 ff86 	bl	800b092 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800918c:	2340      	movs	r3, #64	@ 0x40
 800918e:	2202      	movs	r2, #2
 8009190:	2101      	movs	r1, #1
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 ff7d 	bl	800b092 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2210      	movs	r2, #16
 80091a4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091a8:	2308      	movs	r3, #8
 80091aa:	2203      	movs	r2, #3
 80091ac:	2182      	movs	r1, #130	@ 0x82
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 ff6f 	bl	800b092 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	7c1b      	ldrb	r3, [r3, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d109      	bne.n	80091f2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091e8:	2101      	movs	r1, #1
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f002 f840 	bl	800b270 <USBD_LL_PrepareReceive>
 80091f0:	e007      	b.n	8009202 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091f8:	2340      	movs	r3, #64	@ 0x40
 80091fa:	2101      	movs	r1, #1
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f002 f837 	bl	800b270 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009218:	2181      	movs	r1, #129	@ 0x81
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 ff5f 	bl	800b0de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009226:	2101      	movs	r1, #1
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 ff58 	bl	800b0de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009236:	2182      	movs	r1, #130	@ 0x82
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 ff50 	bl	800b0de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00e      	beq.n	8009276 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009268:	4618      	mov	r0, r3
 800926a:	f002 f879 	bl	800b360 <USBD_static_free>
    pdev->pClassData = NULL;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009290:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e0af      	b.n	8009408 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d03f      	beq.n	8009334 <USBD_CDC_Setup+0xb4>
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	f040 809f 	bne.w	80093f8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	88db      	ldrh	r3, [r3, #6]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d02e      	beq.n	8009320 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	b25b      	sxtb	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	da16      	bge.n	80092fa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80092d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	88d2      	ldrh	r2, [r2, #6]
 80092de:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	88db      	ldrh	r3, [r3, #6]
 80092e4:	2b07      	cmp	r3, #7
 80092e6:	bf28      	it	cs
 80092e8:	2307      	movcs	r3, #7
 80092ea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	89fa      	ldrh	r2, [r7, #14]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 facd 	bl	800a892 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80092f8:	e085      	b.n	8009406 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	785a      	ldrb	r2, [r3, #1]
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	88db      	ldrh	r3, [r3, #6]
 8009308:	b2da      	uxtb	r2, r3
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009310:	6939      	ldr	r1, [r7, #16]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	88db      	ldrh	r3, [r3, #6]
 8009316:	461a      	mov	r2, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 fae6 	bl	800a8ea <USBD_CtlPrepareRx>
      break;
 800931e:	e072      	b.n	8009406 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	7850      	ldrb	r0, [r2, #1]
 800932c:	2200      	movs	r2, #0
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	4798      	blx	r3
      break;
 8009332:	e068      	b.n	8009406 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	785b      	ldrb	r3, [r3, #1]
 8009338:	2b0b      	cmp	r3, #11
 800933a:	d852      	bhi.n	80093e2 <USBD_CDC_Setup+0x162>
 800933c:	a201      	add	r2, pc, #4	@ (adr r2, 8009344 <USBD_CDC_Setup+0xc4>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	08009375 	.word	0x08009375
 8009348:	080093f1 	.word	0x080093f1
 800934c:	080093e3 	.word	0x080093e3
 8009350:	080093e3 	.word	0x080093e3
 8009354:	080093e3 	.word	0x080093e3
 8009358:	080093e3 	.word	0x080093e3
 800935c:	080093e3 	.word	0x080093e3
 8009360:	080093e3 	.word	0x080093e3
 8009364:	080093e3 	.word	0x080093e3
 8009368:	080093e3 	.word	0x080093e3
 800936c:	0800939f 	.word	0x0800939f
 8009370:	080093c9 	.word	0x080093c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b03      	cmp	r3, #3
 800937e:	d107      	bne.n	8009390 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009380:	f107 030a 	add.w	r3, r7, #10
 8009384:	2202      	movs	r2, #2
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 fa82 	bl	800a892 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800938e:	e032      	b.n	80093f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 fa0c 	bl	800a7b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009398:	2303      	movs	r3, #3
 800939a:	75fb      	strb	r3, [r7, #23]
          break;
 800939c:	e02b      	b.n	80093f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d107      	bne.n	80093ba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80093aa:	f107 030d 	add.w	r3, r7, #13
 80093ae:	2201      	movs	r2, #1
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 fa6d 	bl	800a892 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093b8:	e01d      	b.n	80093f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 f9f7 	bl	800a7b0 <USBD_CtlError>
            ret = USBD_FAIL;
 80093c2:	2303      	movs	r3, #3
 80093c4:	75fb      	strb	r3, [r7, #23]
          break;
 80093c6:	e016      	b.n	80093f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d00f      	beq.n	80093f4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 f9ea 	bl	800a7b0 <USBD_CtlError>
            ret = USBD_FAIL;
 80093dc:	2303      	movs	r3, #3
 80093de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093e0:	e008      	b.n	80093f4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 f9e3 	bl	800a7b0 <USBD_CtlError>
          ret = USBD_FAIL;
 80093ea:	2303      	movs	r3, #3
 80093ec:	75fb      	strb	r3, [r7, #23]
          break;
 80093ee:	e002      	b.n	80093f6 <USBD_CDC_Setup+0x176>
          break;
 80093f0:	bf00      	nop
 80093f2:	e008      	b.n	8009406 <USBD_CDC_Setup+0x186>
          break;
 80093f4:	bf00      	nop
      }
      break;
 80093f6:	e006      	b.n	8009406 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 f9d8 	bl	800a7b0 <USBD_CtlError>
      ret = USBD_FAIL;
 8009400:	2303      	movs	r3, #3
 8009402:	75fb      	strb	r3, [r7, #23]
      break;
 8009404:	bf00      	nop
  }

  return (uint8_t)ret;
 8009406:	7dfb      	ldrb	r3, [r7, #23]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009422:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800942e:	2303      	movs	r3, #3
 8009430:	e04f      	b.n	80094d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009438:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800943a:	78fa      	ldrb	r2, [r7, #3]
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	3318      	adds	r3, #24
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d029      	beq.n	80094a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009450:	78fa      	ldrb	r2, [r7, #3]
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	440b      	add	r3, r1
 800945e:	3318      	adds	r3, #24
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	78f9      	ldrb	r1, [r7, #3]
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	460b      	mov	r3, r1
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	440b      	add	r3, r1
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	4403      	add	r3, r0
 8009470:	3320      	adds	r3, #32
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	fbb2 f1f3 	udiv	r1, r2, r3
 8009478:	fb01 f303 	mul.w	r3, r1, r3
 800947c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800947e:	2b00      	cmp	r3, #0
 8009480:	d110      	bne.n	80094a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009482:	78fa      	ldrb	r2, [r7, #3]
 8009484:	6879      	ldr	r1, [r7, #4]
 8009486:	4613      	mov	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	440b      	add	r3, r1
 8009490:	3318      	adds	r3, #24
 8009492:	2200      	movs	r2, #0
 8009494:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009496:	78f9      	ldrb	r1, [r7, #3]
 8009498:	2300      	movs	r3, #0
 800949a:	2200      	movs	r2, #0
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 fec6 	bl	800b22e <USBD_LL_Transmit>
 80094a2:	e015      	b.n	80094d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80094cc:	78fa      	ldrb	r2, [r7, #3]
 80094ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e015      	b.n	8009528 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094fc:	78fb      	ldrb	r3, [r7, #3]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 fed6 	bl	800b2b2 <USBD_LL_GetRxDataSize>
 8009506:	4602      	mov	r2, r0
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009522:	4611      	mov	r1, r2
 8009524:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800953e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009546:	2303      	movs	r3, #3
 8009548:	e01a      	b.n	8009580 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d014      	beq.n	800957e <USBD_CDC_EP0_RxReady+0x4e>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800955a:	2bff      	cmp	r3, #255	@ 0xff
 800955c:	d00f      	beq.n	800957e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800956c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009574:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	22ff      	movs	r2, #255	@ 0xff
 800957a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2243      	movs	r2, #67	@ 0x43
 8009594:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009596:	4b03      	ldr	r3, [pc, #12]	@ (80095a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	200000a4 	.word	0x200000a4

080095a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2243      	movs	r2, #67	@ 0x43
 80095b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80095b6:	4b03      	ldr	r3, [pc, #12]	@ (80095c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	20000060 	.word	0x20000060

080095c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2243      	movs	r2, #67	@ 0x43
 80095d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80095d6:	4b03      	ldr	r3, [pc, #12]	@ (80095e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	200000e8 	.word	0x200000e8

080095e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	220a      	movs	r2, #10
 80095f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80095f6:	4b03      	ldr	r3, [pc, #12]	@ (8009604 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	2000001c 	.word	0x2000001c

08009608 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009618:	2303      	movs	r3, #3
 800961a:	e004      	b.n	8009626 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009632:	b480      	push	{r7}
 8009634:	b087      	sub	sp, #28
 8009636:	af00      	add	r7, sp, #0
 8009638:	60f8      	str	r0, [r7, #12]
 800963a:	60b9      	str	r1, [r7, #8]
 800963c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009644:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800964c:	2303      	movs	r3, #3
 800964e:	e008      	b.n	8009662 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	371c      	adds	r7, #28
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800966e:	b480      	push	{r7}
 8009670:	b085      	sub	sp, #20
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800967e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009686:	2303      	movs	r3, #3
 8009688:	e004      	b.n	8009694 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80096b0:	2301      	movs	r3, #1
 80096b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096be:	2303      	movs	r3, #3
 80096c0:	e01a      	b.n	80096f8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d114      	bne.n	80096f6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80096ea:	2181      	movs	r1, #129	@ 0x81
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 fd9e 	bl	800b22e <USBD_LL_Transmit>

    ret = USBD_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800970e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800971a:	2303      	movs	r3, #3
 800971c:	e016      	b.n	800974c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	7c1b      	ldrb	r3, [r3, #16]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d109      	bne.n	800973a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800972c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009730:	2101      	movs	r1, #1
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f001 fd9c 	bl	800b270 <USBD_LL_PrepareReceive>
 8009738:	e007      	b.n	800974a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009740:	2340      	movs	r3, #64	@ 0x40
 8009742:	2101      	movs	r1, #1
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 fd93 	bl	800b270 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009768:	2303      	movs	r3, #3
 800976a:	e01f      	b.n	80097ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	79fa      	ldrb	r2, [r7, #7]
 800979e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f001 fbfb 	bl	800af9c <USBD_LL_Init>
 80097a6:	4603      	mov	r3, r0
 80097a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097be:	2300      	movs	r3, #0
 80097c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e016      	b.n	80097fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00b      	beq.n	80097f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e8:	f107 020e 	add.w	r2, r7, #14
 80097ec:	4610      	mov	r0, r2
 80097ee:	4798      	blx	r3
 80097f0:	4602      	mov	r2, r0
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f001 fc26 	bl	800b05c <USBD_LL_Start>
 8009810:	4603      	mov	r3, r0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800983c:	2303      	movs	r3, #3
 800983e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009846:	2b00      	cmp	r3, #0
 8009848:	d009      	beq.n	800985e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	78fa      	ldrb	r2, [r7, #3]
 8009854:	4611      	mov	r1, r2
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	4798      	blx	r3
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800987a:	2b00      	cmp	r3, #0
 800987c:	d007      	beq.n	800988e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	4611      	mov	r1, r2
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
  }

  return USBD_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 ff46 	bl	800a73c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80098be:	461a      	mov	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80098cc:	f003 031f 	and.w	r3, r3, #31
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d01a      	beq.n	800990a <USBD_LL_SetupStage+0x72>
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d822      	bhi.n	800991e <USBD_LL_SetupStage+0x86>
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <USBD_LL_SetupStage+0x4a>
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d00a      	beq.n	80098f6 <USBD_LL_SetupStage+0x5e>
 80098e0:	e01d      	b.n	800991e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f9ee 	bl	8009ccc <USBD_StdDevReq>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]
      break;
 80098f4:	e020      	b.n	8009938 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fa52 	bl	8009da8 <USBD_StdItfReq>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]
      break;
 8009908:	e016      	b.n	8009938 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fa91 	bl	8009e3a <USBD_StdEPReq>
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]
      break;
 800991c:	e00c      	b.n	8009938 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009924:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009928:	b2db      	uxtb	r3, r3
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f001 fbf5 	bl	800b11c <USBD_LL_StallEP>
 8009932:	4603      	mov	r3, r0
 8009934:	73fb      	strb	r3, [r7, #15]
      break;
 8009936:	bf00      	nop
  }

  return ret;
 8009938:	7bfb      	ldrb	r3, [r7, #15]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b086      	sub	sp, #24
 8009946:	af00      	add	r7, sp, #0
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	460b      	mov	r3, r1
 800994c:	607a      	str	r2, [r7, #4]
 800994e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009950:	7afb      	ldrb	r3, [r7, #11]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d138      	bne.n	80099c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800995c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009964:	2b03      	cmp	r3, #3
 8009966:	d14a      	bne.n	80099fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	429a      	cmp	r2, r3
 8009972:	d913      	bls.n	800999c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	689a      	ldr	r2, [r3, #8]
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	1ad2      	subs	r2, r2, r3
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	4293      	cmp	r3, r2
 800998c:	bf28      	it	cs
 800998e:	4613      	movcs	r3, r2
 8009990:	461a      	mov	r2, r3
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 ffc5 	bl	800a924 <USBD_CtlContinueRx>
 800999a:	e030      	b.n	80099fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d10b      	bne.n	80099c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 ffc0 	bl	800a946 <USBD_CtlSendStatus>
 80099c6:	e01a      	b.n	80099fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d114      	bne.n	80099fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00e      	beq.n	80099fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	7afa      	ldrb	r2, [r7, #11]
 80099ea:	4611      	mov	r1, r2
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	4798      	blx	r3
 80099f0:	4603      	mov	r3, r0
 80099f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	e000      	b.n	8009a00 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	460b      	mov	r3, r1
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a16:	7afb      	ldrb	r3, [r7, #11]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d16b      	bne.n	8009af4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3314      	adds	r3, #20
 8009a20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d156      	bne.n	8009ada <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d914      	bls.n	8009a62 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	1ad2      	subs	r2, r2, r3
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	6879      	ldr	r1, [r7, #4]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 ff3a 	bl	800a8c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a54:	2300      	movs	r3, #0
 8009a56:	2200      	movs	r2, #0
 8009a58:	2100      	movs	r1, #0
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f001 fc08 	bl	800b270 <USBD_LL_PrepareReceive>
 8009a60:	e03b      	b.n	8009ada <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d11c      	bne.n	8009aa8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d316      	bcc.n	8009aa8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d20f      	bcs.n	8009aa8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 ff1b 	bl	800a8c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f001 fbe5 	bl	800b270 <USBD_LL_PrepareReceive>
 8009aa6:	e018      	b.n	8009ada <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d10b      	bne.n	8009acc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009acc:	2180      	movs	r1, #128	@ 0x80
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f001 fb24 	bl	800b11c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 ff49 	bl	800a96c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d122      	bne.n	8009b2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff fe98 	bl	800981a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009af2:	e01a      	b.n	8009b2a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d114      	bne.n	8009b2a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b06:	695b      	ldr	r3, [r3, #20]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00e      	beq.n	8009b2a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	7afa      	ldrb	r2, [r7, #11]
 8009b16:	4611      	mov	r1, r2
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	4798      	blx	r3
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
 8009b28:	e000      	b.n	8009b2c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e02f      	b.n	8009bc8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00f      	beq.n	8009b92 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d009      	beq.n	8009b92 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	6852      	ldr	r2, [r2, #4]
 8009b8a:	b2d2      	uxtb	r2, r2
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b92:	2340      	movs	r3, #64	@ 0x40
 8009b94:	2200      	movs	r2, #0
 8009b96:	2100      	movs	r1, #0
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f001 fa7a 	bl	800b092 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2240      	movs	r2, #64	@ 0x40
 8009baa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bae:	2340      	movs	r3, #64	@ 0x40
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2180      	movs	r1, #128	@ 0x80
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f001 fa6c 	bl	800b092 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2240      	movs	r2, #64	@ 0x40
 8009bc4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	78fa      	ldrb	r2, [r7, #3]
 8009be0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2204      	movs	r2, #4
 8009c0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d106      	bne.n	8009c3e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e012      	b.n	8009c88 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d10b      	bne.n	8009c86 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d005      	beq.n	8009c86 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009cae:	8a3b      	ldrh	r3, [r7, #16]
 8009cb0:	021b      	lsls	r3, r3, #8
 8009cb2:	b21a      	sxth	r2, r3
 8009cb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	b21b      	sxth	r3, r3
 8009cbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009cbe:	89fb      	ldrh	r3, [r7, #14]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	371c      	adds	r7, #28
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ce2:	2b40      	cmp	r3, #64	@ 0x40
 8009ce4:	d005      	beq.n	8009cf2 <USBD_StdDevReq+0x26>
 8009ce6:	2b40      	cmp	r3, #64	@ 0x40
 8009ce8:	d853      	bhi.n	8009d92 <USBD_StdDevReq+0xc6>
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00b      	beq.n	8009d06 <USBD_StdDevReq+0x3a>
 8009cee:	2b20      	cmp	r3, #32
 8009cf0:	d14f      	bne.n	8009d92 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	4798      	blx	r3
 8009d00:	4603      	mov	r3, r0
 8009d02:	73fb      	strb	r3, [r7, #15]
      break;
 8009d04:	e04a      	b.n	8009d9c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	785b      	ldrb	r3, [r3, #1]
 8009d0a:	2b09      	cmp	r3, #9
 8009d0c:	d83b      	bhi.n	8009d86 <USBD_StdDevReq+0xba>
 8009d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d14 <USBD_StdDevReq+0x48>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d69 	.word	0x08009d69
 8009d18:	08009d7d 	.word	0x08009d7d
 8009d1c:	08009d87 	.word	0x08009d87
 8009d20:	08009d73 	.word	0x08009d73
 8009d24:	08009d87 	.word	0x08009d87
 8009d28:	08009d47 	.word	0x08009d47
 8009d2c:	08009d3d 	.word	0x08009d3d
 8009d30:	08009d87 	.word	0x08009d87
 8009d34:	08009d5f 	.word	0x08009d5f
 8009d38:	08009d51 	.word	0x08009d51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f9de 	bl	800a100 <USBD_GetDescriptor>
          break;
 8009d44:	e024      	b.n	8009d90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fb6d 	bl	800a428 <USBD_SetAddress>
          break;
 8009d4e:	e01f      	b.n	8009d90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fbac 	bl	800a4b0 <USBD_SetConfig>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]
          break;
 8009d5c:	e018      	b.n	8009d90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fc4b 	bl	800a5fc <USBD_GetConfig>
          break;
 8009d66:	e013      	b.n	8009d90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fc7c 	bl	800a668 <USBD_GetStatus>
          break;
 8009d70:	e00e      	b.n	8009d90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fcab 	bl	800a6d0 <USBD_SetFeature>
          break;
 8009d7a:	e009      	b.n	8009d90 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fcba 	bl	800a6f8 <USBD_ClrFeature>
          break;
 8009d84:	e004      	b.n	8009d90 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fd11 	bl	800a7b0 <USBD_CtlError>
          break;
 8009d8e:	bf00      	nop
      }
      break;
 8009d90:	e004      	b.n	8009d9c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fd0b 	bl	800a7b0 <USBD_CtlError>
      break;
 8009d9a:	bf00      	nop
  }

  return ret;
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop

08009da8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dbe:	2b40      	cmp	r3, #64	@ 0x40
 8009dc0:	d005      	beq.n	8009dce <USBD_StdItfReq+0x26>
 8009dc2:	2b40      	cmp	r3, #64	@ 0x40
 8009dc4:	d82f      	bhi.n	8009e26 <USBD_StdItfReq+0x7e>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d001      	beq.n	8009dce <USBD_StdItfReq+0x26>
 8009dca:	2b20      	cmp	r3, #32
 8009dcc:	d12b      	bne.n	8009e26 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d81d      	bhi.n	8009e18 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	889b      	ldrh	r3, [r3, #4]
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d813      	bhi.n	8009e0e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	4798      	blx	r3
 8009df4:	4603      	mov	r3, r0
 8009df6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	88db      	ldrh	r3, [r3, #6]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d110      	bne.n	8009e22 <USBD_StdItfReq+0x7a>
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10d      	bne.n	8009e22 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fd9d 	bl	800a946 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e0c:	e009      	b.n	8009e22 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fccd 	bl	800a7b0 <USBD_CtlError>
          break;
 8009e16:	e004      	b.n	8009e22 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fcc8 	bl	800a7b0 <USBD_CtlError>
          break;
 8009e20:	e000      	b.n	8009e24 <USBD_StdItfReq+0x7c>
          break;
 8009e22:	bf00      	nop
      }
      break;
 8009e24:	e004      	b.n	8009e30 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fcc1 	bl	800a7b0 <USBD_CtlError>
      break;
 8009e2e:	bf00      	nop
  }

  return ret;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	889b      	ldrh	r3, [r3, #4]
 8009e4c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e56:	2b40      	cmp	r3, #64	@ 0x40
 8009e58:	d007      	beq.n	8009e6a <USBD_StdEPReq+0x30>
 8009e5a:	2b40      	cmp	r3, #64	@ 0x40
 8009e5c:	f200 8145 	bhi.w	800a0ea <USBD_StdEPReq+0x2b0>
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00c      	beq.n	8009e7e <USBD_StdEPReq+0x44>
 8009e64:	2b20      	cmp	r3, #32
 8009e66:	f040 8140 	bne.w	800a0ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	4798      	blx	r3
 8009e78:	4603      	mov	r3, r0
 8009e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e7c:	e13a      	b.n	800a0f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	785b      	ldrb	r3, [r3, #1]
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d007      	beq.n	8009e96 <USBD_StdEPReq+0x5c>
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	f300 8129 	bgt.w	800a0de <USBD_StdEPReq+0x2a4>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d07f      	beq.n	8009f90 <USBD_StdEPReq+0x156>
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d03c      	beq.n	8009f0e <USBD_StdEPReq+0xd4>
 8009e94:	e123      	b.n	800a0de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d002      	beq.n	8009ea8 <USBD_StdEPReq+0x6e>
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d016      	beq.n	8009ed4 <USBD_StdEPReq+0x9a>
 8009ea6:	e02c      	b.n	8009f02 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ea8:	7bbb      	ldrb	r3, [r7, #14]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00d      	beq.n	8009eca <USBD_StdEPReq+0x90>
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	2b80      	cmp	r3, #128	@ 0x80
 8009eb2:	d00a      	beq.n	8009eca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f001 f92f 	bl	800b11c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ebe:	2180      	movs	r1, #128	@ 0x80
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f001 f92b 	bl	800b11c <USBD_LL_StallEP>
 8009ec6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ec8:	e020      	b.n	8009f0c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fc6f 	bl	800a7b0 <USBD_CtlError>
              break;
 8009ed2:	e01b      	b.n	8009f0c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	885b      	ldrh	r3, [r3, #2]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10e      	bne.n	8009efa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00b      	beq.n	8009efa <USBD_StdEPReq+0xc0>
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	2b80      	cmp	r3, #128	@ 0x80
 8009ee6:	d008      	beq.n	8009efa <USBD_StdEPReq+0xc0>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	88db      	ldrh	r3, [r3, #6]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d104      	bne.n	8009efa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 f911 	bl	800b11c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fd23 	bl	800a946 <USBD_CtlSendStatus>

              break;
 8009f00:	e004      	b.n	8009f0c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fc53 	bl	800a7b0 <USBD_CtlError>
              break;
 8009f0a:	bf00      	nop
          }
          break;
 8009f0c:	e0ec      	b.n	800a0e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d002      	beq.n	8009f20 <USBD_StdEPReq+0xe6>
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d016      	beq.n	8009f4c <USBD_StdEPReq+0x112>
 8009f1e:	e030      	b.n	8009f82 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00d      	beq.n	8009f42 <USBD_StdEPReq+0x108>
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	2b80      	cmp	r3, #128	@ 0x80
 8009f2a:	d00a      	beq.n	8009f42 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 f8f3 	bl	800b11c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f36:	2180      	movs	r1, #128	@ 0x80
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f001 f8ef 	bl	800b11c <USBD_LL_StallEP>
 8009f3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f40:	e025      	b.n	8009f8e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fc33 	bl	800a7b0 <USBD_CtlError>
              break;
 8009f4a:	e020      	b.n	8009f8e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	885b      	ldrh	r3, [r3, #2]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d11b      	bne.n	8009f8c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f54:	7bbb      	ldrb	r3, [r7, #14]
 8009f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d004      	beq.n	8009f68 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	4619      	mov	r1, r3
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f001 f8f9 	bl	800b15a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fcec 	bl	800a946 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	4798      	blx	r3
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009f80:	e004      	b.n	8009f8c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fc13 	bl	800a7b0 <USBD_CtlError>
              break;
 8009f8a:	e000      	b.n	8009f8e <USBD_StdEPReq+0x154>
              break;
 8009f8c:	bf00      	nop
          }
          break;
 8009f8e:	e0ab      	b.n	800a0e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d002      	beq.n	8009fa2 <USBD_StdEPReq+0x168>
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d032      	beq.n	800a006 <USBD_StdEPReq+0x1cc>
 8009fa0:	e097      	b.n	800a0d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d007      	beq.n	8009fb8 <USBD_StdEPReq+0x17e>
 8009fa8:	7bbb      	ldrb	r3, [r7, #14]
 8009faa:	2b80      	cmp	r3, #128	@ 0x80
 8009fac:	d004      	beq.n	8009fb8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fbfd 	bl	800a7b0 <USBD_CtlError>
                break;
 8009fb6:	e091      	b.n	800a0dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	da0b      	bge.n	8009fd8 <USBD_StdEPReq+0x19e>
 8009fc0:	7bbb      	ldrb	r3, [r7, #14]
 8009fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	3310      	adds	r3, #16
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	e00b      	b.n	8009ff0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
 8009fda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	4413      	add	r3, r2
 8009fee:	3304      	adds	r3, #4
 8009ff0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fc47 	bl	800a892 <USBD_CtlSendData>
              break;
 800a004:	e06a      	b.n	800a0dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	da11      	bge.n	800a032 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	f003 020f 	and.w	r2, r3, #15
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	4613      	mov	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	440b      	add	r3, r1
 800a020:	3324      	adds	r3, #36	@ 0x24
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d117      	bne.n	800a058 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fbc0 	bl	800a7b0 <USBD_CtlError>
                  break;
 800a030:	e054      	b.n	800a0dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a032:	7bbb      	ldrb	r3, [r7, #14]
 800a034:	f003 020f 	and.w	r2, r3, #15
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	4613      	mov	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	440b      	add	r3, r1
 800a044:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d104      	bne.n	800a058 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fbad 	bl	800a7b0 <USBD_CtlError>
                  break;
 800a056:	e041      	b.n	800a0dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	da0b      	bge.n	800a078 <USBD_StdEPReq+0x23e>
 800a060:	7bbb      	ldrb	r3, [r7, #14]
 800a062:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a066:	4613      	mov	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4413      	add	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	3310      	adds	r3, #16
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	4413      	add	r3, r2
 800a074:	3304      	adds	r3, #4
 800a076:	e00b      	b.n	800a090 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a078:	7bbb      	ldrb	r3, [r7, #14]
 800a07a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a07e:	4613      	mov	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	4413      	add	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	4413      	add	r3, r2
 800a08e:	3304      	adds	r3, #4
 800a090:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a092:	7bbb      	ldrb	r3, [r7, #14]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <USBD_StdEPReq+0x264>
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	2b80      	cmp	r3, #128	@ 0x80
 800a09c:	d103      	bne.n	800a0a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	e00e      	b.n	800a0c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a0a6:	7bbb      	ldrb	r3, [r7, #14]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f001 f874 	bl	800b198 <USBD_LL_IsStallEP>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	e002      	b.n	800a0c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fbe1 	bl	800a892 <USBD_CtlSendData>
              break;
 800a0d0:	e004      	b.n	800a0dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fb6b 	bl	800a7b0 <USBD_CtlError>
              break;
 800a0da:	bf00      	nop
          }
          break;
 800a0dc:	e004      	b.n	800a0e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fb65 	bl	800a7b0 <USBD_CtlError>
          break;
 800a0e6:	bf00      	nop
      }
      break;
 800a0e8:	e004      	b.n	800a0f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fb5f 	bl	800a7b0 <USBD_CtlError>
      break;
 800a0f2:	bf00      	nop
  }

  return ret;
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	885b      	ldrh	r3, [r3, #2]
 800a11a:	0a1b      	lsrs	r3, r3, #8
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	3b01      	subs	r3, #1
 800a120:	2b0e      	cmp	r3, #14
 800a122:	f200 8152 	bhi.w	800a3ca <USBD_GetDescriptor+0x2ca>
 800a126:	a201      	add	r2, pc, #4	@ (adr r2, 800a12c <USBD_GetDescriptor+0x2c>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a19d 	.word	0x0800a19d
 800a130:	0800a1b5 	.word	0x0800a1b5
 800a134:	0800a1f5 	.word	0x0800a1f5
 800a138:	0800a3cb 	.word	0x0800a3cb
 800a13c:	0800a3cb 	.word	0x0800a3cb
 800a140:	0800a36b 	.word	0x0800a36b
 800a144:	0800a397 	.word	0x0800a397
 800a148:	0800a3cb 	.word	0x0800a3cb
 800a14c:	0800a3cb 	.word	0x0800a3cb
 800a150:	0800a3cb 	.word	0x0800a3cb
 800a154:	0800a3cb 	.word	0x0800a3cb
 800a158:	0800a3cb 	.word	0x0800a3cb
 800a15c:	0800a3cb 	.word	0x0800a3cb
 800a160:	0800a3cb 	.word	0x0800a3cb
 800a164:	0800a169 	.word	0x0800a169
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	7c12      	ldrb	r2, [r2, #16]
 800a180:	f107 0108 	add.w	r1, r7, #8
 800a184:	4610      	mov	r0, r2
 800a186:	4798      	blx	r3
 800a188:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a18a:	e126      	b.n	800a3da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fb0e 	bl	800a7b0 <USBD_CtlError>
        err++;
 800a194:	7afb      	ldrb	r3, [r7, #11]
 800a196:	3301      	adds	r3, #1
 800a198:	72fb      	strb	r3, [r7, #11]
      break;
 800a19a:	e11e      	b.n	800a3da <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	7c12      	ldrb	r2, [r2, #16]
 800a1a8:	f107 0108 	add.w	r1, r7, #8
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4798      	blx	r3
 800a1b0:	60f8      	str	r0, [r7, #12]
      break;
 800a1b2:	e112      	b.n	800a3da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	7c1b      	ldrb	r3, [r3, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10d      	bne.n	800a1d8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c4:	f107 0208 	add.w	r2, r7, #8
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4798      	blx	r3
 800a1cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1d6:	e100      	b.n	800a3da <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e0:	f107 0208 	add.w	r2, r7, #8
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
 800a1e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	701a      	strb	r2, [r3, #0]
      break;
 800a1f2:	e0f2      	b.n	800a3da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	885b      	ldrh	r3, [r3, #2]
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	f200 80ac 	bhi.w	800a358 <USBD_GetDescriptor+0x258>
 800a200:	a201      	add	r2, pc, #4	@ (adr r2, 800a208 <USBD_GetDescriptor+0x108>)
 800a202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a206:	bf00      	nop
 800a208:	0800a221 	.word	0x0800a221
 800a20c:	0800a255 	.word	0x0800a255
 800a210:	0800a289 	.word	0x0800a289
 800a214:	0800a2bd 	.word	0x0800a2bd
 800a218:	0800a2f1 	.word	0x0800a2f1
 800a21c:	0800a325 	.word	0x0800a325
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	7c12      	ldrb	r2, [r2, #16]
 800a238:	f107 0108 	add.w	r1, r7, #8
 800a23c:	4610      	mov	r0, r2
 800a23e:	4798      	blx	r3
 800a240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a242:	e091      	b.n	800a368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fab2 	bl	800a7b0 <USBD_CtlError>
            err++;
 800a24c:	7afb      	ldrb	r3, [r7, #11]
 800a24e:	3301      	adds	r3, #1
 800a250:	72fb      	strb	r3, [r7, #11]
          break;
 800a252:	e089      	b.n	800a368 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00b      	beq.n	800a278 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	7c12      	ldrb	r2, [r2, #16]
 800a26c:	f107 0108 	add.w	r1, r7, #8
 800a270:	4610      	mov	r0, r2
 800a272:	4798      	blx	r3
 800a274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a276:	e077      	b.n	800a368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fa98 	bl	800a7b0 <USBD_CtlError>
            err++;
 800a280:	7afb      	ldrb	r3, [r7, #11]
 800a282:	3301      	adds	r3, #1
 800a284:	72fb      	strb	r3, [r7, #11]
          break;
 800a286:	e06f      	b.n	800a368 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00b      	beq.n	800a2ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	7c12      	ldrb	r2, [r2, #16]
 800a2a0:	f107 0108 	add.w	r1, r7, #8
 800a2a4:	4610      	mov	r0, r2
 800a2a6:	4798      	blx	r3
 800a2a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2aa:	e05d      	b.n	800a368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fa7e 	bl	800a7b0 <USBD_CtlError>
            err++;
 800a2b4:	7afb      	ldrb	r3, [r7, #11]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ba:	e055      	b.n	800a368 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00b      	beq.n	800a2e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	7c12      	ldrb	r2, [r2, #16]
 800a2d4:	f107 0108 	add.w	r1, r7, #8
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4798      	blx	r3
 800a2dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2de:	e043      	b.n	800a368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fa64 	bl	800a7b0 <USBD_CtlError>
            err++;
 800a2e8:	7afb      	ldrb	r3, [r7, #11]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ee:	e03b      	b.n	800a368 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2f6:	695b      	ldr	r3, [r3, #20]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00b      	beq.n	800a314 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	7c12      	ldrb	r2, [r2, #16]
 800a308:	f107 0108 	add.w	r1, r7, #8
 800a30c:	4610      	mov	r0, r2
 800a30e:	4798      	blx	r3
 800a310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a312:	e029      	b.n	800a368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fa4a 	bl	800a7b0 <USBD_CtlError>
            err++;
 800a31c:	7afb      	ldrb	r3, [r7, #11]
 800a31e:	3301      	adds	r3, #1
 800a320:	72fb      	strb	r3, [r7, #11]
          break;
 800a322:	e021      	b.n	800a368 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00b      	beq.n	800a348 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	7c12      	ldrb	r2, [r2, #16]
 800a33c:	f107 0108 	add.w	r1, r7, #8
 800a340:	4610      	mov	r0, r2
 800a342:	4798      	blx	r3
 800a344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a346:	e00f      	b.n	800a368 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fa30 	bl	800a7b0 <USBD_CtlError>
            err++;
 800a350:	7afb      	ldrb	r3, [r7, #11]
 800a352:	3301      	adds	r3, #1
 800a354:	72fb      	strb	r3, [r7, #11]
          break;
 800a356:	e007      	b.n	800a368 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fa28 	bl	800a7b0 <USBD_CtlError>
          err++;
 800a360:	7afb      	ldrb	r3, [r7, #11]
 800a362:	3301      	adds	r3, #1
 800a364:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a366:	bf00      	nop
      }
      break;
 800a368:	e037      	b.n	800a3da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	7c1b      	ldrb	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d109      	bne.n	800a386 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a37a:	f107 0208 	add.w	r2, r7, #8
 800a37e:	4610      	mov	r0, r2
 800a380:	4798      	blx	r3
 800a382:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a384:	e029      	b.n	800a3da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fa11 	bl	800a7b0 <USBD_CtlError>
        err++;
 800a38e:	7afb      	ldrb	r3, [r7, #11]
 800a390:	3301      	adds	r3, #1
 800a392:	72fb      	strb	r3, [r7, #11]
      break;
 800a394:	e021      	b.n	800a3da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	7c1b      	ldrb	r3, [r3, #16]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10d      	bne.n	800a3ba <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a6:	f107 0208 	add.w	r2, r7, #8
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	4798      	blx	r3
 800a3ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	2207      	movs	r2, #7
 800a3b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3b8:	e00f      	b.n	800a3da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f9f7 	bl	800a7b0 <USBD_CtlError>
        err++;
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	72fb      	strb	r3, [r7, #11]
      break;
 800a3c8:	e007      	b.n	800a3da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a3ca:	6839      	ldr	r1, [r7, #0]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f9ef 	bl	800a7b0 <USBD_CtlError>
      err++;
 800a3d2:	7afb      	ldrb	r3, [r7, #11]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	72fb      	strb	r3, [r7, #11]
      break;
 800a3d8:	bf00      	nop
  }

  if (err != 0U)
 800a3da:	7afb      	ldrb	r3, [r7, #11]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d11e      	bne.n	800a41e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	88db      	ldrh	r3, [r3, #6]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d016      	beq.n	800a416 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a3e8:	893b      	ldrh	r3, [r7, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00e      	beq.n	800a40c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	88da      	ldrh	r2, [r3, #6]
 800a3f2:	893b      	ldrh	r3, [r7, #8]
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	bf28      	it	cs
 800a3f8:	4613      	movcs	r3, r2
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3fe:	893b      	ldrh	r3, [r7, #8]
 800a400:	461a      	mov	r2, r3
 800a402:	68f9      	ldr	r1, [r7, #12]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fa44 	bl	800a892 <USBD_CtlSendData>
 800a40a:	e009      	b.n	800a420 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f9ce 	bl	800a7b0 <USBD_CtlError>
 800a414:	e004      	b.n	800a420 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fa95 	bl	800a946 <USBD_CtlSendStatus>
 800a41c:	e000      	b.n	800a420 <USBD_GetDescriptor+0x320>
    return;
 800a41e:	bf00      	nop
  }
}
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop

0800a428 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	889b      	ldrh	r3, [r3, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d131      	bne.n	800a49e <USBD_SetAddress+0x76>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	88db      	ldrh	r3, [r3, #6]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d12d      	bne.n	800a49e <USBD_SetAddress+0x76>
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	885b      	ldrh	r3, [r3, #2]
 800a446:	2b7f      	cmp	r3, #127	@ 0x7f
 800a448:	d829      	bhi.n	800a49e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	885b      	ldrh	r3, [r3, #2]
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a454:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d104      	bne.n	800a46c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f9a3 	bl	800a7b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46a:	e01d      	b.n	800a4a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	7bfa      	ldrb	r2, [r7, #15]
 800a470:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 feb9 	bl	800b1f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fa61 	bl	800a946 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a484:	7bfb      	ldrb	r3, [r7, #15]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d004      	beq.n	800a494 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2202      	movs	r2, #2
 800a48e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a492:	e009      	b.n	800a4a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a49c:	e004      	b.n	800a4a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f985 	bl	800a7b0 <USBD_CtlError>
  }
}
 800a4a6:	bf00      	nop
 800a4a8:	bf00      	nop
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	885b      	ldrh	r3, [r3, #2]
 800a4c2:	b2da      	uxtb	r2, r3
 800a4c4:	4b4c      	ldr	r3, [pc, #304]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a4c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4c8:	4b4b      	ldr	r3, [pc, #300]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d905      	bls.n	800a4dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f96c 	bl	800a7b0 <USBD_CtlError>
    return USBD_FAIL;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e088      	b.n	800a5ee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d002      	beq.n	800a4ee <USBD_SetConfig+0x3e>
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	d025      	beq.n	800a538 <USBD_SetConfig+0x88>
 800a4ec:	e071      	b.n	800a5d2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4ee:	4b42      	ldr	r3, [pc, #264]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d01c      	beq.n	800a530 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a4f6:	4b40      	ldr	r3, [pc, #256]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a500:	4b3d      	ldr	r3, [pc, #244]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff f992 	bl	8009830 <USBD_SetClassConfig>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d004      	beq.n	800a520 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f949 	bl	800a7b0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a51e:	e065      	b.n	800a5ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fa10 	bl	800a946 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2203      	movs	r2, #3
 800a52a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a52e:	e05d      	b.n	800a5ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fa08 	bl	800a946 <USBD_CtlSendStatus>
      break;
 800a536:	e059      	b.n	800a5ec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a538:	4b2f      	ldr	r3, [pc, #188]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d112      	bne.n	800a566 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a548:	4b2b      	ldr	r3, [pc, #172]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a552:	4b29      	ldr	r3, [pc, #164]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff f985 	bl	8009868 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f9f1 	bl	800a946 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a564:	e042      	b.n	800a5ec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a566:	4b24      	ldr	r3, [pc, #144]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	461a      	mov	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	429a      	cmp	r2, r3
 800a572:	d02a      	beq.n	800a5ca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7ff f973 	bl	8009868 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a582:	4b1d      	ldr	r3, [pc, #116]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a58c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	4619      	mov	r1, r3
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff f94c 	bl	8009830 <USBD_SetClassConfig>
 800a598:	4603      	mov	r3, r0
 800a59a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00f      	beq.n	800a5c2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f903 	bl	800a7b0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7ff f958 	bl	8009868 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a5c0:	e014      	b.n	800a5ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f9bf 	bl	800a946 <USBD_CtlSendStatus>
      break;
 800a5c8:	e010      	b.n	800a5ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f9bb 	bl	800a946 <USBD_CtlSendStatus>
      break;
 800a5d0:	e00c      	b.n	800a5ec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f8eb 	bl	800a7b0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5da:	4b07      	ldr	r3, [pc, #28]	@ (800a5f8 <USBD_SetConfig+0x148>)
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7ff f941 	bl	8009868 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ea:	bf00      	nop
  }

  return ret;
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20000bb0 	.word	0x20000bb0

0800a5fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	88db      	ldrh	r3, [r3, #6]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d004      	beq.n	800a618 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f8cd 	bl	800a7b0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a616:	e023      	b.n	800a660 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b02      	cmp	r3, #2
 800a622:	dc02      	bgt.n	800a62a <USBD_GetConfig+0x2e>
 800a624:	2b00      	cmp	r3, #0
 800a626:	dc03      	bgt.n	800a630 <USBD_GetConfig+0x34>
 800a628:	e015      	b.n	800a656 <USBD_GetConfig+0x5a>
 800a62a:	2b03      	cmp	r3, #3
 800a62c:	d00b      	beq.n	800a646 <USBD_GetConfig+0x4a>
 800a62e:	e012      	b.n	800a656 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	3308      	adds	r3, #8
 800a63a:	2201      	movs	r2, #1
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f927 	bl	800a892 <USBD_CtlSendData>
        break;
 800a644:	e00c      	b.n	800a660 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3304      	adds	r3, #4
 800a64a:	2201      	movs	r2, #1
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f91f 	bl	800a892 <USBD_CtlSendData>
        break;
 800a654:	e004      	b.n	800a660 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f8a9 	bl	800a7b0 <USBD_CtlError>
        break;
 800a65e:	bf00      	nop
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	3b01      	subs	r3, #1
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d81e      	bhi.n	800a6be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	88db      	ldrh	r3, [r3, #6]
 800a684:	2b02      	cmp	r3, #2
 800a686:	d004      	beq.n	800a692 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f890 	bl	800a7b0 <USBD_CtlError>
        break;
 800a690:	e01a      	b.n	800a6c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d005      	beq.n	800a6ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	f043 0202 	orr.w	r2, r3, #2
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	330c      	adds	r3, #12
 800a6b2:	2202      	movs	r2, #2
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f8eb 	bl	800a892 <USBD_CtlSendData>
      break;
 800a6bc:	e004      	b.n	800a6c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f875 	bl	800a7b0 <USBD_CtlError>
      break;
 800a6c6:	bf00      	nop
  }
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	885b      	ldrh	r3, [r3, #2]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d106      	bne.n	800a6f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f92b 	bl	800a946 <USBD_CtlSendStatus>
  }
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	3b01      	subs	r3, #1
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d80b      	bhi.n	800a728 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	885b      	ldrh	r3, [r3, #2]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d10c      	bne.n	800a732 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f910 	bl	800a946 <USBD_CtlSendStatus>
      }
      break;
 800a726:	e004      	b.n	800a732 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f840 	bl	800a7b0 <USBD_CtlError>
      break;
 800a730:	e000      	b.n	800a734 <USBD_ClrFeature+0x3c>
      break;
 800a732:	bf00      	nop
  }
}
 800a734:	bf00      	nop
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	781a      	ldrb	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3301      	adds	r3, #1
 800a756:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	781a      	ldrb	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f7ff fa92 	bl	8009c90 <SWAPBYTE>
 800a76c:	4603      	mov	r3, r0
 800a76e:	461a      	mov	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	3301      	adds	r3, #1
 800a778:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3301      	adds	r3, #1
 800a77e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f7ff fa85 	bl	8009c90 <SWAPBYTE>
 800a786:	4603      	mov	r3, r0
 800a788:	461a      	mov	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3301      	adds	r3, #1
 800a792:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	3301      	adds	r3, #1
 800a798:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f7ff fa78 	bl	8009c90 <SWAPBYTE>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	80da      	strh	r2, [r3, #6]
}
 800a7a8:	bf00      	nop
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ba:	2180      	movs	r1, #128	@ 0x80
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fcad 	bl	800b11c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fca9 	bl	800b11c <USBD_LL_StallEP>
}
 800a7ca:	bf00      	nop
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b086      	sub	sp, #24
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	60f8      	str	r0, [r7, #12]
 800a7da:	60b9      	str	r1, [r7, #8]
 800a7dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d036      	beq.n	800a856 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a7ec:	6938      	ldr	r0, [r7, #16]
 800a7ee:	f000 f836 	bl	800a85e <USBD_GetLen>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	4413      	add	r3, r2
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	7812      	ldrb	r2, [r2, #0]
 800a80a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	3301      	adds	r3, #1
 800a810:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a812:	7dfb      	ldrb	r3, [r7, #23]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	4413      	add	r3, r2
 800a818:	2203      	movs	r2, #3
 800a81a:	701a      	strb	r2, [r3, #0]
  idx++;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
 800a81e:	3301      	adds	r3, #1
 800a820:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a822:	e013      	b.n	800a84c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	4413      	add	r3, r2
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	7812      	ldrb	r2, [r2, #0]
 800a82e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	3301      	adds	r3, #1
 800a834:	613b      	str	r3, [r7, #16]
    idx++;
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	3301      	adds	r3, #1
 800a83a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a83c:	7dfb      	ldrb	r3, [r7, #23]
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	4413      	add	r3, r2
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]
    idx++;
 800a846:	7dfb      	ldrb	r3, [r7, #23]
 800a848:	3301      	adds	r3, #1
 800a84a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e7      	bne.n	800a824 <USBD_GetString+0x52>
 800a854:	e000      	b.n	800a858 <USBD_GetString+0x86>
    return;
 800a856:	bf00      	nop
  }
}
 800a858:	3718      	adds	r7, #24
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a85e:	b480      	push	{r7}
 800a860:	b085      	sub	sp, #20
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a86e:	e005      	b.n	800a87c <USBD_GetLen+0x1e>
  {
    len++;
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	3301      	adds	r3, #1
 800a874:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	3301      	adds	r3, #1
 800a87a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1f5      	bne.n	800a870 <USBD_GetLen+0x12>
  }

  return len;
 800a884:	7bfb      	ldrb	r3, [r7, #15]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	60f8      	str	r0, [r7, #12]
 800a89a:	60b9      	str	r1, [r7, #8]
 800a89c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 fcb8 	bl	800b22e <USBD_LL_Transmit>

  return USBD_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	2100      	movs	r1, #0
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 fca7 	bl	800b22e <USBD_LL_Transmit>

  return USBD_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	60f8      	str	r0, [r7, #12]
 800a8f2:	60b9      	str	r1, [r7, #8]
 800a8f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2203      	movs	r2, #3
 800a8fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	2100      	movs	r1, #0
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 fcab 	bl	800b270 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	2100      	movs	r1, #0
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 fc9a 	bl	800b270 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b082      	sub	sp, #8
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2204      	movs	r2, #4
 800a952:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a956:	2300      	movs	r3, #0
 800a958:	2200      	movs	r2, #0
 800a95a:	2100      	movs	r1, #0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fc66 	bl	800b22e <USBD_LL_Transmit>

  return USBD_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2205      	movs	r2, #5
 800a978:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a97c:	2300      	movs	r3, #0
 800a97e:	2200      	movs	r2, #0
 800a980:	2100      	movs	r1, #0
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fc74 	bl	800b270 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a998:	2200      	movs	r2, #0
 800a99a:	4912      	ldr	r1, [pc, #72]	@ (800a9e4 <MX_USB_Device_Init+0x50>)
 800a99c:	4812      	ldr	r0, [pc, #72]	@ (800a9e8 <MX_USB_Device_Init+0x54>)
 800a99e:	f7fe fed9 	bl	8009754 <USBD_Init>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a9a8:	f7f5 ff4d 	bl	8000846 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a9ac:	490f      	ldr	r1, [pc, #60]	@ (800a9ec <MX_USB_Device_Init+0x58>)
 800a9ae:	480e      	ldr	r0, [pc, #56]	@ (800a9e8 <MX_USB_Device_Init+0x54>)
 800a9b0:	f7fe ff00 	bl	80097b4 <USBD_RegisterClass>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a9ba:	f7f5 ff44 	bl	8000846 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a9be:	490c      	ldr	r1, [pc, #48]	@ (800a9f0 <MX_USB_Device_Init+0x5c>)
 800a9c0:	4809      	ldr	r0, [pc, #36]	@ (800a9e8 <MX_USB_Device_Init+0x54>)
 800a9c2:	f7fe fe21 	bl	8009608 <USBD_CDC_RegisterInterface>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a9cc:	f7f5 ff3b 	bl	8000846 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a9d0:	4805      	ldr	r0, [pc, #20]	@ (800a9e8 <MX_USB_Device_Init+0x54>)
 800a9d2:	f7fe ff16 	bl	8009802 <USBD_Start>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a9dc:	f7f5 ff33 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a9e0:	bf00      	nop
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20000140 	.word	0x20000140
 800a9e8:	20000bb4 	.word	0x20000bb4
 800a9ec:	20000028 	.word	0x20000028
 800a9f0:	2000012c 	.word	0x2000012c

0800a9f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4905      	ldr	r1, [pc, #20]	@ (800aa10 <CDC_Init_FS+0x1c>)
 800a9fc:	4805      	ldr	r0, [pc, #20]	@ (800aa14 <CDC_Init_FS+0x20>)
 800a9fe:	f7fe fe18 	bl	8009632 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa02:	4905      	ldr	r1, [pc, #20]	@ (800aa18 <CDC_Init_FS+0x24>)
 800aa04:	4803      	ldr	r0, [pc, #12]	@ (800aa14 <CDC_Init_FS+0x20>)
 800aa06:	f7fe fe32 	bl	800966e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20001284 	.word	0x20001284
 800aa14:	20000bb4 	.word	0x20000bb4
 800aa18:	20000e84 	.word	0x20000e84

0800aa1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	6039      	str	r1, [r7, #0]
 800aa36:	71fb      	strb	r3, [r7, #7]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	2b23      	cmp	r3, #35	@ 0x23
 800aa40:	d84a      	bhi.n	800aad8 <CDC_Control_FS+0xac>
 800aa42:	a201      	add	r2, pc, #4	@ (adr r2, 800aa48 <CDC_Control_FS+0x1c>)
 800aa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa48:	0800aad9 	.word	0x0800aad9
 800aa4c:	0800aad9 	.word	0x0800aad9
 800aa50:	0800aad9 	.word	0x0800aad9
 800aa54:	0800aad9 	.word	0x0800aad9
 800aa58:	0800aad9 	.word	0x0800aad9
 800aa5c:	0800aad9 	.word	0x0800aad9
 800aa60:	0800aad9 	.word	0x0800aad9
 800aa64:	0800aad9 	.word	0x0800aad9
 800aa68:	0800aad9 	.word	0x0800aad9
 800aa6c:	0800aad9 	.word	0x0800aad9
 800aa70:	0800aad9 	.word	0x0800aad9
 800aa74:	0800aad9 	.word	0x0800aad9
 800aa78:	0800aad9 	.word	0x0800aad9
 800aa7c:	0800aad9 	.word	0x0800aad9
 800aa80:	0800aad9 	.word	0x0800aad9
 800aa84:	0800aad9 	.word	0x0800aad9
 800aa88:	0800aad9 	.word	0x0800aad9
 800aa8c:	0800aad9 	.word	0x0800aad9
 800aa90:	0800aad9 	.word	0x0800aad9
 800aa94:	0800aad9 	.word	0x0800aad9
 800aa98:	0800aad9 	.word	0x0800aad9
 800aa9c:	0800aad9 	.word	0x0800aad9
 800aaa0:	0800aad9 	.word	0x0800aad9
 800aaa4:	0800aad9 	.word	0x0800aad9
 800aaa8:	0800aad9 	.word	0x0800aad9
 800aaac:	0800aad9 	.word	0x0800aad9
 800aab0:	0800aad9 	.word	0x0800aad9
 800aab4:	0800aad9 	.word	0x0800aad9
 800aab8:	0800aad9 	.word	0x0800aad9
 800aabc:	0800aad9 	.word	0x0800aad9
 800aac0:	0800aad9 	.word	0x0800aad9
 800aac4:	0800aad9 	.word	0x0800aad9
 800aac8:	0800aad9 	.word	0x0800aad9
 800aacc:	0800aad9 	.word	0x0800aad9
 800aad0:	0800aad9 	.word	0x0800aad9
 800aad4:	0800aad9 	.word	0x0800aad9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aad8:	bf00      	nop
  }

  return (USBD_OK);
 800aada:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aaf2:	6879      	ldr	r1, [r7, #4]
 800aaf4:	4805      	ldr	r0, [pc, #20]	@ (800ab0c <CDC_Receive_FS+0x24>)
 800aaf6:	f7fe fdba 	bl	800966e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aafa:	4804      	ldr	r0, [pc, #16]	@ (800ab0c <CDC_Receive_FS+0x24>)
 800aafc:	f7fe fe00 	bl	8009700 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000bb4 	.word	0x20000bb4

0800ab10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab20:	4b0d      	ldr	r3, [pc, #52]	@ (800ab58 <CDC_Transmit_FS+0x48>)
 800ab22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e00b      	b.n	800ab4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab36:	887b      	ldrh	r3, [r7, #2]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	4806      	ldr	r0, [pc, #24]	@ (800ab58 <CDC_Transmit_FS+0x48>)
 800ab3e:	f7fe fd78 	bl	8009632 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab42:	4805      	ldr	r0, [pc, #20]	@ (800ab58 <CDC_Transmit_FS+0x48>)
 800ab44:	f7fe fdac 	bl	80096a0 <USBD_CDC_TransmitPacket>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20000bb4 	.word	0x20000bb4

0800ab5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b087      	sub	sp, #28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	4613      	mov	r3, r2
 800ab68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	371c      	adds	r7, #28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
	...

0800ab80 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab86:	4b09      	ldr	r3, [pc, #36]	@ (800abac <CDC_Transmit_Is_Busy+0x2c>)
 800ab88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab8c:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e000      	b.n	800ab9e <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800ab9c:	2300      	movs	r3, #0
  }
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	20000bb4 	.word	0x20000bb4

0800abb0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	4603      	mov	r3, r0
 800abb8:	6039      	str	r1, [r7, #0]
 800abba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2212      	movs	r2, #18
 800abc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800abc2:	4b03      	ldr	r3, [pc, #12]	@ (800abd0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	20000160 	.word	0x20000160

0800abd4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	6039      	str	r1, [r7, #0]
 800abde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	2204      	movs	r2, #4
 800abe4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abe6:	4b03      	ldr	r3, [pc, #12]	@ (800abf4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800abe8:	4618      	mov	r0, r3
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	20000174 	.word	0x20000174

0800abf8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	4603      	mov	r3, r0
 800ac00:	6039      	str	r1, [r7, #0]
 800ac02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac04:	79fb      	ldrb	r3, [r7, #7]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d105      	bne.n	800ac16 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	4907      	ldr	r1, [pc, #28]	@ (800ac2c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac0e:	4808      	ldr	r0, [pc, #32]	@ (800ac30 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac10:	f7ff fddf 	bl	800a7d2 <USBD_GetString>
 800ac14:	e004      	b.n	800ac20 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	4904      	ldr	r1, [pc, #16]	@ (800ac2c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac1a:	4805      	ldr	r0, [pc, #20]	@ (800ac30 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac1c:	f7ff fdd9 	bl	800a7d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac20:	4b02      	ldr	r3, [pc, #8]	@ (800ac2c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20001684 	.word	0x20001684
 800ac30:	0800c4e8 	.word	0x0800c4e8

0800ac34 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	6039      	str	r1, [r7, #0]
 800ac3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	4904      	ldr	r1, [pc, #16]	@ (800ac54 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ac44:	4804      	ldr	r0, [pc, #16]	@ (800ac58 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ac46:	f7ff fdc4 	bl	800a7d2 <USBD_GetString>
  return USBD_StrDesc;
 800ac4a:	4b02      	ldr	r3, [pc, #8]	@ (800ac54 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20001684 	.word	0x20001684
 800ac58:	0800c500 	.word	0x0800c500

0800ac5c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	4603      	mov	r3, r0
 800ac64:	6039      	str	r1, [r7, #0]
 800ac66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	221a      	movs	r2, #26
 800ac6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac6e:	f000 f843 	bl	800acf8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac72:	4b02      	ldr	r3, [pc, #8]	@ (800ac7c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	20000178 	.word	0x20000178

0800ac80 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	4603      	mov	r3, r0
 800ac88:	6039      	str	r1, [r7, #0]
 800ac8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d105      	bne.n	800ac9e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	4907      	ldr	r1, [pc, #28]	@ (800acb4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac96:	4808      	ldr	r0, [pc, #32]	@ (800acb8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac98:	f7ff fd9b 	bl	800a7d2 <USBD_GetString>
 800ac9c:	e004      	b.n	800aca8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	4904      	ldr	r1, [pc, #16]	@ (800acb4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800aca2:	4805      	ldr	r0, [pc, #20]	@ (800acb8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800aca4:	f7ff fd95 	bl	800a7d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aca8:	4b02      	ldr	r3, [pc, #8]	@ (800acb4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	20001684 	.word	0x20001684
 800acb8:	0800c514 	.word	0x0800c514

0800acbc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	6039      	str	r1, [r7, #0]
 800acc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acc8:	79fb      	ldrb	r3, [r7, #7]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d105      	bne.n	800acda <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	4907      	ldr	r1, [pc, #28]	@ (800acf0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acd2:	4808      	ldr	r0, [pc, #32]	@ (800acf4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acd4:	f7ff fd7d 	bl	800a7d2 <USBD_GetString>
 800acd8:	e004      	b.n	800ace4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	4904      	ldr	r1, [pc, #16]	@ (800acf0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acde:	4805      	ldr	r0, [pc, #20]	@ (800acf4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ace0:	f7ff fd77 	bl	800a7d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ace4:	4b02      	ldr	r3, [pc, #8]	@ (800acf0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20001684 	.word	0x20001684
 800acf4:	0800c520 	.word	0x0800c520

0800acf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800acfe:	4b0f      	ldr	r3, [pc, #60]	@ (800ad3c <Get_SerialNum+0x44>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad04:	4b0e      	ldr	r3, [pc, #56]	@ (800ad40 <Get_SerialNum+0x48>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ad44 <Get_SerialNum+0x4c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4413      	add	r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d009      	beq.n	800ad32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad1e:	2208      	movs	r2, #8
 800ad20:	4909      	ldr	r1, [pc, #36]	@ (800ad48 <Get_SerialNum+0x50>)
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 f814 	bl	800ad50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad28:	2204      	movs	r2, #4
 800ad2a:	4908      	ldr	r1, [pc, #32]	@ (800ad4c <Get_SerialNum+0x54>)
 800ad2c:	68b8      	ldr	r0, [r7, #8]
 800ad2e:	f000 f80f 	bl	800ad50 <IntToUnicode>
  }
}
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	1fff7590 	.word	0x1fff7590
 800ad40:	1fff7594 	.word	0x1fff7594
 800ad44:	1fff7598 	.word	0x1fff7598
 800ad48:	2000017a 	.word	0x2000017a
 800ad4c:	2000018a 	.word	0x2000018a

0800ad50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b087      	sub	sp, #28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad62:	2300      	movs	r3, #0
 800ad64:	75fb      	strb	r3, [r7, #23]
 800ad66:	e027      	b.n	800adb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	0f1b      	lsrs	r3, r3, #28
 800ad6c:	2b09      	cmp	r3, #9
 800ad6e:	d80b      	bhi.n	800ad88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	0f1b      	lsrs	r3, r3, #28
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	005b      	lsls	r3, r3, #1
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	440b      	add	r3, r1
 800ad80:	3230      	adds	r2, #48	@ 0x30
 800ad82:	b2d2      	uxtb	r2, r2
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	e00a      	b.n	800ad9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	0f1b      	lsrs	r3, r3, #28
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	4619      	mov	r1, r3
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	440b      	add	r3, r1
 800ad98:	3237      	adds	r2, #55	@ 0x37
 800ad9a:	b2d2      	uxtb	r2, r2
 800ad9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	011b      	lsls	r3, r3, #4
 800ada2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	3301      	adds	r3, #1
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	4413      	add	r3, r2
 800adae:	2200      	movs	r2, #0
 800adb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
 800adb4:	3301      	adds	r3, #1
 800adb6:	75fb      	strb	r3, [r7, #23]
 800adb8:	7dfa      	ldrb	r2, [r7, #23]
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d3d3      	bcc.n	800ad68 <IntToUnicode+0x18>
  }
}
 800adc0:	bf00      	nop
 800adc2:	bf00      	nop
 800adc4:	371c      	adds	r7, #28
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
	...

0800add0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b094      	sub	sp, #80	@ 0x50
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800add8:	f107 030c 	add.w	r3, r7, #12
 800addc:	2244      	movs	r2, #68	@ 0x44
 800adde:	2100      	movs	r1, #0
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 fd03 	bl	800b7ec <memset>
  if(pcdHandle->Instance==USB)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a15      	ldr	r2, [pc, #84]	@ (800ae40 <HAL_PCD_MspInit+0x70>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d122      	bne.n	800ae36 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800adf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800adf4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800adf6:	2300      	movs	r3, #0
 800adf8:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800adfa:	f107 030c 	add.w	r3, r7, #12
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7f9 fd6a 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ae0a:	f7f5 fd1c 	bl	8000846 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae44 <HAL_PCD_MspInit+0x74>)
 800ae10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae12:	4a0c      	ldr	r2, [pc, #48]	@ (800ae44 <HAL_PCD_MspInit+0x74>)
 800ae14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ae18:	6593      	str	r3, [r2, #88]	@ 0x58
 800ae1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae44 <HAL_PCD_MspInit+0x74>)
 800ae1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae22:	60bb      	str	r3, [r7, #8]
 800ae24:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ae26:	2200      	movs	r2, #0
 800ae28:	2100      	movs	r1, #0
 800ae2a:	2014      	movs	r0, #20
 800ae2c:	f7f6 fd33 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae30:	2014      	movs	r0, #20
 800ae32:	f7f6 fd4a 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae36:	bf00      	nop
 800ae38:	3750      	adds	r7, #80	@ 0x50
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	40005c00 	.word	0x40005c00
 800ae44:	40021000 	.word	0x40021000

0800ae48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	4610      	mov	r0, r2
 800ae60:	f7fe fd1a 	bl	8009898 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae64:	bf00      	nop
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ae7e:	78fa      	ldrb	r2, [r7, #3]
 800ae80:	6879      	ldr	r1, [r7, #4]
 800ae82:	4613      	mov	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	00db      	lsls	r3, r3, #3
 800ae8a:	440b      	add	r3, r1
 800ae8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	78fb      	ldrb	r3, [r7, #3]
 800ae94:	4619      	mov	r1, r3
 800ae96:	f7fe fd54 	bl	8009942 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	460b      	mov	r3, r1
 800aeac:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800aeb4:	78fa      	ldrb	r2, [r7, #3]
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	440b      	add	r3, r1
 800aec2:	3324      	adds	r3, #36	@ 0x24
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	78fb      	ldrb	r3, [r7, #3]
 800aec8:	4619      	mov	r1, r3
 800aeca:	f7fe fd9d 	bl	8009a08 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aece:	bf00      	nop
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fe feb1 	bl	8009c4c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aefa:	2301      	movs	r3, #1
 800aefc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	795b      	ldrb	r3, [r3, #5]
 800af02:	2b02      	cmp	r3, #2
 800af04:	d001      	beq.n	800af0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af06:	f7f5 fc9e 	bl	8000846 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af10:	7bfa      	ldrb	r2, [r7, #15]
 800af12:	4611      	mov	r1, r2
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe fe5b 	bl	8009bd0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe fe07 	bl	8009b34 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800af26:	bf00      	nop
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe fe56 	bl	8009bf0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	7a5b      	ldrb	r3, [r3, #9]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d005      	beq.n	800af58 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af4c:	4b04      	ldr	r3, [pc, #16]	@ (800af60 <HAL_PCD_SuspendCallback+0x30>)
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	4a03      	ldr	r2, [pc, #12]	@ (800af60 <HAL_PCD_SuspendCallback+0x30>)
 800af52:	f043 0306 	orr.w	r3, r3, #6
 800af56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	e000ed00 	.word	0xe000ed00

0800af64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	7a5b      	ldrb	r3, [r3, #9]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d007      	beq.n	800af84 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af74:	4b08      	ldr	r3, [pc, #32]	@ (800af98 <HAL_PCD_ResumeCallback+0x34>)
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	4a07      	ldr	r2, [pc, #28]	@ (800af98 <HAL_PCD_ResumeCallback+0x34>)
 800af7a:	f023 0306 	bic.w	r3, r3, #6
 800af7e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af80:	f000 f9f8 	bl	800b374 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fe fe46 	bl	8009c1c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	e000ed00 	.word	0xe000ed00

0800af9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800afa4:	4a2b      	ldr	r2, [pc, #172]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a29      	ldr	r2, [pc, #164]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afb0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800afb4:	4b27      	ldr	r3, [pc, #156]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afb6:	4a28      	ldr	r2, [pc, #160]	@ (800b058 <USBD_LL_Init+0xbc>)
 800afb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afba:	4b26      	ldr	r3, [pc, #152]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afbc:	2208      	movs	r2, #8
 800afbe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afc0:	4b24      	ldr	r3, [pc, #144]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afc2:	2202      	movs	r2, #2
 800afc4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afc6:	4b23      	ldr	r3, [pc, #140]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afc8:	2202      	movs	r2, #2
 800afca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800afcc:	4b21      	ldr	r3, [pc, #132]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afce:	2200      	movs	r2, #0
 800afd0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afd2:	4b20      	ldr	r3, [pc, #128]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afd8:	4b1e      	ldr	r3, [pc, #120]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afda:	2200      	movs	r2, #0
 800afdc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afde:	4b1d      	ldr	r3, [pc, #116]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800afe4:	481b      	ldr	r0, [pc, #108]	@ (800b054 <USBD_LL_Init+0xb8>)
 800afe6:	f7f7 f994 	bl	8002312 <HAL_PCD_Init>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800aff0:	f7f5 fc29 	bl	8000846 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800affa:	2318      	movs	r3, #24
 800affc:	2200      	movs	r2, #0
 800affe:	2100      	movs	r1, #0
 800b000:	f7f8 fe1b 	bl	8003c3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b00a:	2358      	movs	r3, #88	@ 0x58
 800b00c:	2200      	movs	r2, #0
 800b00e:	2180      	movs	r1, #128	@ 0x80
 800b010:	f7f8 fe13 	bl	8003c3a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b01a:	23c0      	movs	r3, #192	@ 0xc0
 800b01c:	2200      	movs	r2, #0
 800b01e:	2181      	movs	r1, #129	@ 0x81
 800b020:	f7f8 fe0b 	bl	8003c3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b02a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b02e:	2200      	movs	r2, #0
 800b030:	2101      	movs	r1, #1
 800b032:	f7f8 fe02 	bl	8003c3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b03c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b040:	2200      	movs	r2, #0
 800b042:	2182      	movs	r1, #130	@ 0x82
 800b044:	f7f8 fdf9 	bl	8003c3a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20001884 	.word	0x20001884
 800b058:	40005c00 	.word	0x40005c00

0800b05c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b072:	4618      	mov	r0, r3
 800b074:	f7f7 fa1b 	bl	80024ae <HAL_PCD_Start>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 f97e 	bl	800b380 <USBD_Get_USB_Status>
 800b084:	4603      	mov	r3, r0
 800b086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b088:	7bbb      	ldrb	r3, [r7, #14]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	4608      	mov	r0, r1
 800b09c:	4611      	mov	r1, r2
 800b09e:	461a      	mov	r2, r3
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	70fb      	strb	r3, [r7, #3]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	70bb      	strb	r3, [r7, #2]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b0ba:	78bb      	ldrb	r3, [r7, #2]
 800b0bc:	883a      	ldrh	r2, [r7, #0]
 800b0be:	78f9      	ldrb	r1, [r7, #3]
 800b0c0:	f7f7 fb62 	bl	8002788 <HAL_PCD_EP_Open>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 f958 	bl	800b380 <USBD_Get_USB_Status>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b0f8:	78fa      	ldrb	r2, [r7, #3]
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7f7 fba2 	bl	8002846 <HAL_PCD_EP_Close>
 800b102:	4603      	mov	r3, r0
 800b104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b106:	7bfb      	ldrb	r3, [r7, #15]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 f939 	bl	800b380 <USBD_Get_USB_Status>
 800b10e:	4603      	mov	r3, r0
 800b110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b112:	7bbb      	ldrb	r3, [r7, #14]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b128:	2300      	movs	r3, #0
 800b12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	4611      	mov	r1, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7f7 fc4b 	bl	80029d6 <HAL_PCD_EP_SetStall>
 800b140:	4603      	mov	r3, r0
 800b142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	4618      	mov	r0, r3
 800b148:	f000 f91a 	bl	800b380 <USBD_Get_USB_Status>
 800b14c:	4603      	mov	r3, r0
 800b14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b150:	7bbb      	ldrb	r3, [r7, #14]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	460b      	mov	r3, r1
 800b164:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b174:	78fa      	ldrb	r2, [r7, #3]
 800b176:	4611      	mov	r1, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f7f7 fc7e 	bl	8002a7a <HAL_PCD_EP_ClrStall>
 800b17e:	4603      	mov	r3, r0
 800b180:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	4618      	mov	r0, r3
 800b186:	f000 f8fb 	bl	800b380 <USBD_Get_USB_Status>
 800b18a:	4603      	mov	r3, r0
 800b18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b1aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	da0b      	bge.n	800b1cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1b4:	78fb      	ldrb	r3, [r7, #3]
 800b1b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	00db      	lsls	r3, r3, #3
 800b1c4:	440b      	add	r3, r1
 800b1c6:	3312      	adds	r3, #18
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	e00b      	b.n	800b1e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1d2:	68f9      	ldr	r1, [r7, #12]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	440b      	add	r3, r1
 800b1de:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b1e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b20a:	78fa      	ldrb	r2, [r7, #3]
 800b20c:	4611      	mov	r1, r2
 800b20e:	4618      	mov	r0, r3
 800b210:	f7f7 fa96 	bl	8002740 <HAL_PCD_SetAddress>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 f8b0 	bl	800b380 <USBD_Get_USB_Status>
 800b220:	4603      	mov	r3, r0
 800b222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b224:	7bbb      	ldrb	r3, [r7, #14]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b086      	sub	sp, #24
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	607a      	str	r2, [r7, #4]
 800b238:	603b      	str	r3, [r7, #0]
 800b23a:	460b      	mov	r3, r1
 800b23c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b24c:	7af9      	ldrb	r1, [r7, #11]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	f7f7 fb89 	bl	8002968 <HAL_PCD_EP_Transmit>
 800b256:	4603      	mov	r3, r0
 800b258:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b25a:	7dfb      	ldrb	r3, [r7, #23]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 f88f 	bl	800b380 <USBD_Get_USB_Status>
 800b262:	4603      	mov	r3, r0
 800b264:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b266:	7dbb      	ldrb	r3, [r7, #22]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	607a      	str	r2, [r7, #4]
 800b27a:	603b      	str	r3, [r7, #0]
 800b27c:	460b      	mov	r3, r1
 800b27e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b28e:	7af9      	ldrb	r1, [r7, #11]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	f7f7 fb1f 	bl	80028d6 <HAL_PCD_EP_Receive>
 800b298:	4603      	mov	r3, r0
 800b29a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 f86e 	bl	800b380 <USBD_Get_USB_Status>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b2c4:	78fa      	ldrb	r2, [r7, #3]
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7f7 fb35 	bl	8002938 <HAL_PCD_EP_GetRxCount>
 800b2ce:	4603      	mov	r3, r0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b2e4:	78fb      	ldrb	r3, [r7, #3]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d002      	beq.n	800b2f0 <HAL_PCDEx_LPM_Callback+0x18>
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d013      	beq.n	800b316 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b2ee:	e023      	b.n	800b338 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	7a5b      	ldrb	r3, [r3, #9]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d007      	beq.n	800b308 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b2f8:	f000 f83c 	bl	800b374 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2fc:	4b10      	ldr	r3, [pc, #64]	@ (800b340 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	4a0f      	ldr	r2, [pc, #60]	@ (800b340 <HAL_PCDEx_LPM_Callback+0x68>)
 800b302:	f023 0306 	bic.w	r3, r3, #6
 800b306:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe fc84 	bl	8009c1c <USBD_LL_Resume>
    break;
 800b314:	e010      	b.n	800b338 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fe fc67 	bl	8009bf0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	7a5b      	ldrb	r3, [r3, #9]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d005      	beq.n	800b336 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b32a:	4b05      	ldr	r3, [pc, #20]	@ (800b340 <HAL_PCDEx_LPM_Callback+0x68>)
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	4a04      	ldr	r2, [pc, #16]	@ (800b340 <HAL_PCDEx_LPM_Callback+0x68>)
 800b330:	f043 0306 	orr.w	r3, r3, #6
 800b334:	6113      	str	r3, [r2, #16]
    break;
 800b336:	bf00      	nop
}
 800b338:	bf00      	nop
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	e000ed00 	.word	0xe000ed00

0800b344 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b34c:	4b03      	ldr	r3, [pc, #12]	@ (800b35c <USBD_static_malloc+0x18>)
}
 800b34e:	4618      	mov	r0, r3
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	20001b60 	.word	0x20001b60

0800b360 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]

}
 800b368:	bf00      	nop
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b378:	f7f5 fa1a 	bl	80007b0 <SystemClock_Config>
}
 800b37c:	bf00      	nop
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	2b03      	cmp	r3, #3
 800b392:	d817      	bhi.n	800b3c4 <USBD_Get_USB_Status+0x44>
 800b394:	a201      	add	r2, pc, #4	@ (adr r2, 800b39c <USBD_Get_USB_Status+0x1c>)
 800b396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39a:	bf00      	nop
 800b39c:	0800b3ad 	.word	0x0800b3ad
 800b3a0:	0800b3b3 	.word	0x0800b3b3
 800b3a4:	0800b3b9 	.word	0x0800b3b9
 800b3a8:	0800b3bf 	.word	0x0800b3bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b0:	e00b      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b6:	e008      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b3bc:	e005      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c2:	e002      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c8:	bf00      	nop
  }
  return usb_status;
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <std>:
 800b3d8:	2300      	movs	r3, #0
 800b3da:	b510      	push	{r4, lr}
 800b3dc:	4604      	mov	r4, r0
 800b3de:	e9c0 3300 	strd	r3, r3, [r0]
 800b3e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3e6:	6083      	str	r3, [r0, #8]
 800b3e8:	8181      	strh	r1, [r0, #12]
 800b3ea:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3ec:	81c2      	strh	r2, [r0, #14]
 800b3ee:	6183      	str	r3, [r0, #24]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	2208      	movs	r2, #8
 800b3f4:	305c      	adds	r0, #92	@ 0x5c
 800b3f6:	f000 f9f9 	bl	800b7ec <memset>
 800b3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b430 <std+0x58>)
 800b3fc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b434 <std+0x5c>)
 800b400:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b402:	4b0d      	ldr	r3, [pc, #52]	@ (800b438 <std+0x60>)
 800b404:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b406:	4b0d      	ldr	r3, [pc, #52]	@ (800b43c <std+0x64>)
 800b408:	6323      	str	r3, [r4, #48]	@ 0x30
 800b40a:	4b0d      	ldr	r3, [pc, #52]	@ (800b440 <std+0x68>)
 800b40c:	6224      	str	r4, [r4, #32]
 800b40e:	429c      	cmp	r4, r3
 800b410:	d006      	beq.n	800b420 <std+0x48>
 800b412:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b416:	4294      	cmp	r4, r2
 800b418:	d002      	beq.n	800b420 <std+0x48>
 800b41a:	33d0      	adds	r3, #208	@ 0xd0
 800b41c:	429c      	cmp	r4, r3
 800b41e:	d105      	bne.n	800b42c <std+0x54>
 800b420:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b428:	f000 ba58 	b.w	800b8dc <__retarget_lock_init_recursive>
 800b42c:	bd10      	pop	{r4, pc}
 800b42e:	bf00      	nop
 800b430:	0800b63d 	.word	0x0800b63d
 800b434:	0800b65f 	.word	0x0800b65f
 800b438:	0800b697 	.word	0x0800b697
 800b43c:	0800b6bb 	.word	0x0800b6bb
 800b440:	20001d80 	.word	0x20001d80

0800b444 <stdio_exit_handler>:
 800b444:	4a02      	ldr	r2, [pc, #8]	@ (800b450 <stdio_exit_handler+0xc>)
 800b446:	4903      	ldr	r1, [pc, #12]	@ (800b454 <stdio_exit_handler+0x10>)
 800b448:	4803      	ldr	r0, [pc, #12]	@ (800b458 <stdio_exit_handler+0x14>)
 800b44a:	f000 b869 	b.w	800b520 <_fwalk_sglue>
 800b44e:	bf00      	nop
 800b450:	20000194 	.word	0x20000194
 800b454:	0800c199 	.word	0x0800c199
 800b458:	200001a4 	.word	0x200001a4

0800b45c <cleanup_stdio>:
 800b45c:	6841      	ldr	r1, [r0, #4]
 800b45e:	4b0c      	ldr	r3, [pc, #48]	@ (800b490 <cleanup_stdio+0x34>)
 800b460:	4299      	cmp	r1, r3
 800b462:	b510      	push	{r4, lr}
 800b464:	4604      	mov	r4, r0
 800b466:	d001      	beq.n	800b46c <cleanup_stdio+0x10>
 800b468:	f000 fe96 	bl	800c198 <_fflush_r>
 800b46c:	68a1      	ldr	r1, [r4, #8]
 800b46e:	4b09      	ldr	r3, [pc, #36]	@ (800b494 <cleanup_stdio+0x38>)
 800b470:	4299      	cmp	r1, r3
 800b472:	d002      	beq.n	800b47a <cleanup_stdio+0x1e>
 800b474:	4620      	mov	r0, r4
 800b476:	f000 fe8f 	bl	800c198 <_fflush_r>
 800b47a:	68e1      	ldr	r1, [r4, #12]
 800b47c:	4b06      	ldr	r3, [pc, #24]	@ (800b498 <cleanup_stdio+0x3c>)
 800b47e:	4299      	cmp	r1, r3
 800b480:	d004      	beq.n	800b48c <cleanup_stdio+0x30>
 800b482:	4620      	mov	r0, r4
 800b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b488:	f000 be86 	b.w	800c198 <_fflush_r>
 800b48c:	bd10      	pop	{r4, pc}
 800b48e:	bf00      	nop
 800b490:	20001d80 	.word	0x20001d80
 800b494:	20001de8 	.word	0x20001de8
 800b498:	20001e50 	.word	0x20001e50

0800b49c <global_stdio_init.part.0>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	4b0b      	ldr	r3, [pc, #44]	@ (800b4cc <global_stdio_init.part.0+0x30>)
 800b4a0:	4c0b      	ldr	r4, [pc, #44]	@ (800b4d0 <global_stdio_init.part.0+0x34>)
 800b4a2:	4a0c      	ldr	r2, [pc, #48]	@ (800b4d4 <global_stdio_init.part.0+0x38>)
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	2104      	movs	r1, #4
 800b4ac:	f7ff ff94 	bl	800b3d8 <std>
 800b4b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	2109      	movs	r1, #9
 800b4b8:	f7ff ff8e 	bl	800b3d8 <std>
 800b4bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4c6:	2112      	movs	r1, #18
 800b4c8:	f7ff bf86 	b.w	800b3d8 <std>
 800b4cc:	20001eb8 	.word	0x20001eb8
 800b4d0:	20001d80 	.word	0x20001d80
 800b4d4:	0800b445 	.word	0x0800b445

0800b4d8 <__sfp_lock_acquire>:
 800b4d8:	4801      	ldr	r0, [pc, #4]	@ (800b4e0 <__sfp_lock_acquire+0x8>)
 800b4da:	f000 ba00 	b.w	800b8de <__retarget_lock_acquire_recursive>
 800b4de:	bf00      	nop
 800b4e0:	20001ec1 	.word	0x20001ec1

0800b4e4 <__sfp_lock_release>:
 800b4e4:	4801      	ldr	r0, [pc, #4]	@ (800b4ec <__sfp_lock_release+0x8>)
 800b4e6:	f000 b9fb 	b.w	800b8e0 <__retarget_lock_release_recursive>
 800b4ea:	bf00      	nop
 800b4ec:	20001ec1 	.word	0x20001ec1

0800b4f0 <__sinit>:
 800b4f0:	b510      	push	{r4, lr}
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	f7ff fff0 	bl	800b4d8 <__sfp_lock_acquire>
 800b4f8:	6a23      	ldr	r3, [r4, #32]
 800b4fa:	b11b      	cbz	r3, 800b504 <__sinit+0x14>
 800b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b500:	f7ff bff0 	b.w	800b4e4 <__sfp_lock_release>
 800b504:	4b04      	ldr	r3, [pc, #16]	@ (800b518 <__sinit+0x28>)
 800b506:	6223      	str	r3, [r4, #32]
 800b508:	4b04      	ldr	r3, [pc, #16]	@ (800b51c <__sinit+0x2c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1f5      	bne.n	800b4fc <__sinit+0xc>
 800b510:	f7ff ffc4 	bl	800b49c <global_stdio_init.part.0>
 800b514:	e7f2      	b.n	800b4fc <__sinit+0xc>
 800b516:	bf00      	nop
 800b518:	0800b45d 	.word	0x0800b45d
 800b51c:	20001eb8 	.word	0x20001eb8

0800b520 <_fwalk_sglue>:
 800b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b524:	4607      	mov	r7, r0
 800b526:	4688      	mov	r8, r1
 800b528:	4614      	mov	r4, r2
 800b52a:	2600      	movs	r6, #0
 800b52c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b530:	f1b9 0901 	subs.w	r9, r9, #1
 800b534:	d505      	bpl.n	800b542 <_fwalk_sglue+0x22>
 800b536:	6824      	ldr	r4, [r4, #0]
 800b538:	2c00      	cmp	r4, #0
 800b53a:	d1f7      	bne.n	800b52c <_fwalk_sglue+0xc>
 800b53c:	4630      	mov	r0, r6
 800b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b542:	89ab      	ldrh	r3, [r5, #12]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d907      	bls.n	800b558 <_fwalk_sglue+0x38>
 800b548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b54c:	3301      	adds	r3, #1
 800b54e:	d003      	beq.n	800b558 <_fwalk_sglue+0x38>
 800b550:	4629      	mov	r1, r5
 800b552:	4638      	mov	r0, r7
 800b554:	47c0      	blx	r8
 800b556:	4306      	orrs	r6, r0
 800b558:	3568      	adds	r5, #104	@ 0x68
 800b55a:	e7e9      	b.n	800b530 <_fwalk_sglue+0x10>

0800b55c <iprintf>:
 800b55c:	b40f      	push	{r0, r1, r2, r3}
 800b55e:	b507      	push	{r0, r1, r2, lr}
 800b560:	4906      	ldr	r1, [pc, #24]	@ (800b57c <iprintf+0x20>)
 800b562:	ab04      	add	r3, sp, #16
 800b564:	6808      	ldr	r0, [r1, #0]
 800b566:	f853 2b04 	ldr.w	r2, [r3], #4
 800b56a:	6881      	ldr	r1, [r0, #8]
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	f000 fae9 	bl	800bb44 <_vfiprintf_r>
 800b572:	b003      	add	sp, #12
 800b574:	f85d eb04 	ldr.w	lr, [sp], #4
 800b578:	b004      	add	sp, #16
 800b57a:	4770      	bx	lr
 800b57c:	200001a0 	.word	0x200001a0

0800b580 <_puts_r>:
 800b580:	6a03      	ldr	r3, [r0, #32]
 800b582:	b570      	push	{r4, r5, r6, lr}
 800b584:	6884      	ldr	r4, [r0, #8]
 800b586:	4605      	mov	r5, r0
 800b588:	460e      	mov	r6, r1
 800b58a:	b90b      	cbnz	r3, 800b590 <_puts_r+0x10>
 800b58c:	f7ff ffb0 	bl	800b4f0 <__sinit>
 800b590:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b592:	07db      	lsls	r3, r3, #31
 800b594:	d405      	bmi.n	800b5a2 <_puts_r+0x22>
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	0598      	lsls	r0, r3, #22
 800b59a:	d402      	bmi.n	800b5a2 <_puts_r+0x22>
 800b59c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b59e:	f000 f99e 	bl	800b8de <__retarget_lock_acquire_recursive>
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	0719      	lsls	r1, r3, #28
 800b5a6:	d502      	bpl.n	800b5ae <_puts_r+0x2e>
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d135      	bne.n	800b61a <_puts_r+0x9a>
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	f000 f8c5 	bl	800b740 <__swsetup_r>
 800b5b6:	b380      	cbz	r0, 800b61a <_puts_r+0x9a>
 800b5b8:	f04f 35ff 	mov.w	r5, #4294967295
 800b5bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5be:	07da      	lsls	r2, r3, #31
 800b5c0:	d405      	bmi.n	800b5ce <_puts_r+0x4e>
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	059b      	lsls	r3, r3, #22
 800b5c6:	d402      	bmi.n	800b5ce <_puts_r+0x4e>
 800b5c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5ca:	f000 f989 	bl	800b8e0 <__retarget_lock_release_recursive>
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	bd70      	pop	{r4, r5, r6, pc}
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	da04      	bge.n	800b5e0 <_puts_r+0x60>
 800b5d6:	69a2      	ldr	r2, [r4, #24]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	dc17      	bgt.n	800b60c <_puts_r+0x8c>
 800b5dc:	290a      	cmp	r1, #10
 800b5de:	d015      	beq.n	800b60c <_puts_r+0x8c>
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	6022      	str	r2, [r4, #0]
 800b5e6:	7019      	strb	r1, [r3, #0]
 800b5e8:	68a3      	ldr	r3, [r4, #8]
 800b5ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	60a3      	str	r3, [r4, #8]
 800b5f2:	2900      	cmp	r1, #0
 800b5f4:	d1ed      	bne.n	800b5d2 <_puts_r+0x52>
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	da11      	bge.n	800b61e <_puts_r+0x9e>
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	210a      	movs	r1, #10
 800b5fe:	4628      	mov	r0, r5
 800b600:	f000 f85f 	bl	800b6c2 <__swbuf_r>
 800b604:	3001      	adds	r0, #1
 800b606:	d0d7      	beq.n	800b5b8 <_puts_r+0x38>
 800b608:	250a      	movs	r5, #10
 800b60a:	e7d7      	b.n	800b5bc <_puts_r+0x3c>
 800b60c:	4622      	mov	r2, r4
 800b60e:	4628      	mov	r0, r5
 800b610:	f000 f857 	bl	800b6c2 <__swbuf_r>
 800b614:	3001      	adds	r0, #1
 800b616:	d1e7      	bne.n	800b5e8 <_puts_r+0x68>
 800b618:	e7ce      	b.n	800b5b8 <_puts_r+0x38>
 800b61a:	3e01      	subs	r6, #1
 800b61c:	e7e4      	b.n	800b5e8 <_puts_r+0x68>
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	6022      	str	r2, [r4, #0]
 800b624:	220a      	movs	r2, #10
 800b626:	701a      	strb	r2, [r3, #0]
 800b628:	e7ee      	b.n	800b608 <_puts_r+0x88>
	...

0800b62c <puts>:
 800b62c:	4b02      	ldr	r3, [pc, #8]	@ (800b638 <puts+0xc>)
 800b62e:	4601      	mov	r1, r0
 800b630:	6818      	ldr	r0, [r3, #0]
 800b632:	f7ff bfa5 	b.w	800b580 <_puts_r>
 800b636:	bf00      	nop
 800b638:	200001a0 	.word	0x200001a0

0800b63c <__sread>:
 800b63c:	b510      	push	{r4, lr}
 800b63e:	460c      	mov	r4, r1
 800b640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b644:	f000 f8fc 	bl	800b840 <_read_r>
 800b648:	2800      	cmp	r0, #0
 800b64a:	bfab      	itete	ge
 800b64c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b64e:	89a3      	ldrhlt	r3, [r4, #12]
 800b650:	181b      	addge	r3, r3, r0
 800b652:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b656:	bfac      	ite	ge
 800b658:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b65a:	81a3      	strhlt	r3, [r4, #12]
 800b65c:	bd10      	pop	{r4, pc}

0800b65e <__swrite>:
 800b65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b662:	461f      	mov	r7, r3
 800b664:	898b      	ldrh	r3, [r1, #12]
 800b666:	05db      	lsls	r3, r3, #23
 800b668:	4605      	mov	r5, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	4616      	mov	r6, r2
 800b66e:	d505      	bpl.n	800b67c <__swrite+0x1e>
 800b670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b674:	2302      	movs	r3, #2
 800b676:	2200      	movs	r2, #0
 800b678:	f000 f8d0 	bl	800b81c <_lseek_r>
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b682:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b686:	81a3      	strh	r3, [r4, #12]
 800b688:	4632      	mov	r2, r6
 800b68a:	463b      	mov	r3, r7
 800b68c:	4628      	mov	r0, r5
 800b68e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b692:	f000 b8e7 	b.w	800b864 <_write_r>

0800b696 <__sseek>:
 800b696:	b510      	push	{r4, lr}
 800b698:	460c      	mov	r4, r1
 800b69a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b69e:	f000 f8bd 	bl	800b81c <_lseek_r>
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	bf15      	itete	ne
 800b6a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b6aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b6ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b6b2:	81a3      	strheq	r3, [r4, #12]
 800b6b4:	bf18      	it	ne
 800b6b6:	81a3      	strhne	r3, [r4, #12]
 800b6b8:	bd10      	pop	{r4, pc}

0800b6ba <__sclose>:
 800b6ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6be:	f000 b89d 	b.w	800b7fc <_close_r>

0800b6c2 <__swbuf_r>:
 800b6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c4:	460e      	mov	r6, r1
 800b6c6:	4614      	mov	r4, r2
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	b118      	cbz	r0, 800b6d4 <__swbuf_r+0x12>
 800b6cc:	6a03      	ldr	r3, [r0, #32]
 800b6ce:	b90b      	cbnz	r3, 800b6d4 <__swbuf_r+0x12>
 800b6d0:	f7ff ff0e 	bl	800b4f0 <__sinit>
 800b6d4:	69a3      	ldr	r3, [r4, #24]
 800b6d6:	60a3      	str	r3, [r4, #8]
 800b6d8:	89a3      	ldrh	r3, [r4, #12]
 800b6da:	071a      	lsls	r2, r3, #28
 800b6dc:	d501      	bpl.n	800b6e2 <__swbuf_r+0x20>
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	b943      	cbnz	r3, 800b6f4 <__swbuf_r+0x32>
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f000 f82b 	bl	800b740 <__swsetup_r>
 800b6ea:	b118      	cbz	r0, 800b6f4 <__swbuf_r+0x32>
 800b6ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	6922      	ldr	r2, [r4, #16]
 800b6f8:	1a98      	subs	r0, r3, r2
 800b6fa:	6963      	ldr	r3, [r4, #20]
 800b6fc:	b2f6      	uxtb	r6, r6
 800b6fe:	4283      	cmp	r3, r0
 800b700:	4637      	mov	r7, r6
 800b702:	dc05      	bgt.n	800b710 <__swbuf_r+0x4e>
 800b704:	4621      	mov	r1, r4
 800b706:	4628      	mov	r0, r5
 800b708:	f000 fd46 	bl	800c198 <_fflush_r>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d1ed      	bne.n	800b6ec <__swbuf_r+0x2a>
 800b710:	68a3      	ldr	r3, [r4, #8]
 800b712:	3b01      	subs	r3, #1
 800b714:	60a3      	str	r3, [r4, #8]
 800b716:	6823      	ldr	r3, [r4, #0]
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	6022      	str	r2, [r4, #0]
 800b71c:	701e      	strb	r6, [r3, #0]
 800b71e:	6962      	ldr	r2, [r4, #20]
 800b720:	1c43      	adds	r3, r0, #1
 800b722:	429a      	cmp	r2, r3
 800b724:	d004      	beq.n	800b730 <__swbuf_r+0x6e>
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	07db      	lsls	r3, r3, #31
 800b72a:	d5e1      	bpl.n	800b6f0 <__swbuf_r+0x2e>
 800b72c:	2e0a      	cmp	r6, #10
 800b72e:	d1df      	bne.n	800b6f0 <__swbuf_r+0x2e>
 800b730:	4621      	mov	r1, r4
 800b732:	4628      	mov	r0, r5
 800b734:	f000 fd30 	bl	800c198 <_fflush_r>
 800b738:	2800      	cmp	r0, #0
 800b73a:	d0d9      	beq.n	800b6f0 <__swbuf_r+0x2e>
 800b73c:	e7d6      	b.n	800b6ec <__swbuf_r+0x2a>
	...

0800b740 <__swsetup_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4b29      	ldr	r3, [pc, #164]	@ (800b7e8 <__swsetup_r+0xa8>)
 800b744:	4605      	mov	r5, r0
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	460c      	mov	r4, r1
 800b74a:	b118      	cbz	r0, 800b754 <__swsetup_r+0x14>
 800b74c:	6a03      	ldr	r3, [r0, #32]
 800b74e:	b90b      	cbnz	r3, 800b754 <__swsetup_r+0x14>
 800b750:	f7ff fece 	bl	800b4f0 <__sinit>
 800b754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b758:	0719      	lsls	r1, r3, #28
 800b75a:	d422      	bmi.n	800b7a2 <__swsetup_r+0x62>
 800b75c:	06da      	lsls	r2, r3, #27
 800b75e:	d407      	bmi.n	800b770 <__swsetup_r+0x30>
 800b760:	2209      	movs	r2, #9
 800b762:	602a      	str	r2, [r5, #0]
 800b764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b768:	81a3      	strh	r3, [r4, #12]
 800b76a:	f04f 30ff 	mov.w	r0, #4294967295
 800b76e:	e033      	b.n	800b7d8 <__swsetup_r+0x98>
 800b770:	0758      	lsls	r0, r3, #29
 800b772:	d512      	bpl.n	800b79a <__swsetup_r+0x5a>
 800b774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b776:	b141      	cbz	r1, 800b78a <__swsetup_r+0x4a>
 800b778:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b77c:	4299      	cmp	r1, r3
 800b77e:	d002      	beq.n	800b786 <__swsetup_r+0x46>
 800b780:	4628      	mov	r0, r5
 800b782:	f000 f8bd 	bl	800b900 <_free_r>
 800b786:	2300      	movs	r3, #0
 800b788:	6363      	str	r3, [r4, #52]	@ 0x34
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b790:	81a3      	strh	r3, [r4, #12]
 800b792:	2300      	movs	r3, #0
 800b794:	6063      	str	r3, [r4, #4]
 800b796:	6923      	ldr	r3, [r4, #16]
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	f043 0308 	orr.w	r3, r3, #8
 800b7a0:	81a3      	strh	r3, [r4, #12]
 800b7a2:	6923      	ldr	r3, [r4, #16]
 800b7a4:	b94b      	cbnz	r3, 800b7ba <__swsetup_r+0x7a>
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7b0:	d003      	beq.n	800b7ba <__swsetup_r+0x7a>
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	f000 fd3d 	bl	800c234 <__smakebuf_r>
 800b7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7be:	f013 0201 	ands.w	r2, r3, #1
 800b7c2:	d00a      	beq.n	800b7da <__swsetup_r+0x9a>
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	60a2      	str	r2, [r4, #8]
 800b7c8:	6962      	ldr	r2, [r4, #20]
 800b7ca:	4252      	negs	r2, r2
 800b7cc:	61a2      	str	r2, [r4, #24]
 800b7ce:	6922      	ldr	r2, [r4, #16]
 800b7d0:	b942      	cbnz	r2, 800b7e4 <__swsetup_r+0xa4>
 800b7d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7d6:	d1c5      	bne.n	800b764 <__swsetup_r+0x24>
 800b7d8:	bd38      	pop	{r3, r4, r5, pc}
 800b7da:	0799      	lsls	r1, r3, #30
 800b7dc:	bf58      	it	pl
 800b7de:	6962      	ldrpl	r2, [r4, #20]
 800b7e0:	60a2      	str	r2, [r4, #8]
 800b7e2:	e7f4      	b.n	800b7ce <__swsetup_r+0x8e>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	e7f7      	b.n	800b7d8 <__swsetup_r+0x98>
 800b7e8:	200001a0 	.word	0x200001a0

0800b7ec <memset>:
 800b7ec:	4402      	add	r2, r0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d100      	bne.n	800b7f6 <memset+0xa>
 800b7f4:	4770      	bx	lr
 800b7f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b7fa:	e7f9      	b.n	800b7f0 <memset+0x4>

0800b7fc <_close_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4d06      	ldr	r5, [pc, #24]	@ (800b818 <_close_r+0x1c>)
 800b800:	2300      	movs	r3, #0
 800b802:	4604      	mov	r4, r0
 800b804:	4608      	mov	r0, r1
 800b806:	602b      	str	r3, [r5, #0]
 800b808:	f7f5 fad5 	bl	8000db6 <_close>
 800b80c:	1c43      	adds	r3, r0, #1
 800b80e:	d102      	bne.n	800b816 <_close_r+0x1a>
 800b810:	682b      	ldr	r3, [r5, #0]
 800b812:	b103      	cbz	r3, 800b816 <_close_r+0x1a>
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	20001ebc 	.word	0x20001ebc

0800b81c <_lseek_r>:
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	4d07      	ldr	r5, [pc, #28]	@ (800b83c <_lseek_r+0x20>)
 800b820:	4604      	mov	r4, r0
 800b822:	4608      	mov	r0, r1
 800b824:	4611      	mov	r1, r2
 800b826:	2200      	movs	r2, #0
 800b828:	602a      	str	r2, [r5, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	f7f5 faea 	bl	8000e04 <_lseek>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d102      	bne.n	800b83a <_lseek_r+0x1e>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b103      	cbz	r3, 800b83a <_lseek_r+0x1e>
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	20001ebc 	.word	0x20001ebc

0800b840 <_read_r>:
 800b840:	b538      	push	{r3, r4, r5, lr}
 800b842:	4d07      	ldr	r5, [pc, #28]	@ (800b860 <_read_r+0x20>)
 800b844:	4604      	mov	r4, r0
 800b846:	4608      	mov	r0, r1
 800b848:	4611      	mov	r1, r2
 800b84a:	2200      	movs	r2, #0
 800b84c:	602a      	str	r2, [r5, #0]
 800b84e:	461a      	mov	r2, r3
 800b850:	f7f5 fa94 	bl	8000d7c <_read>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	d102      	bne.n	800b85e <_read_r+0x1e>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	b103      	cbz	r3, 800b85e <_read_r+0x1e>
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	20001ebc 	.word	0x20001ebc

0800b864 <_write_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	4d07      	ldr	r5, [pc, #28]	@ (800b884 <_write_r+0x20>)
 800b868:	4604      	mov	r4, r0
 800b86a:	4608      	mov	r0, r1
 800b86c:	4611      	mov	r1, r2
 800b86e:	2200      	movs	r2, #0
 800b870:	602a      	str	r2, [r5, #0]
 800b872:	461a      	mov	r2, r3
 800b874:	f7f5 fc72 	bl	800115c <_write>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	d102      	bne.n	800b882 <_write_r+0x1e>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	b103      	cbz	r3, 800b882 <_write_r+0x1e>
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	bd38      	pop	{r3, r4, r5, pc}
 800b884:	20001ebc 	.word	0x20001ebc

0800b888 <__errno>:
 800b888:	4b01      	ldr	r3, [pc, #4]	@ (800b890 <__errno+0x8>)
 800b88a:	6818      	ldr	r0, [r3, #0]
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	200001a0 	.word	0x200001a0

0800b894 <__libc_init_array>:
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	4d0d      	ldr	r5, [pc, #52]	@ (800b8cc <__libc_init_array+0x38>)
 800b898:	4c0d      	ldr	r4, [pc, #52]	@ (800b8d0 <__libc_init_array+0x3c>)
 800b89a:	1b64      	subs	r4, r4, r5
 800b89c:	10a4      	asrs	r4, r4, #2
 800b89e:	2600      	movs	r6, #0
 800b8a0:	42a6      	cmp	r6, r4
 800b8a2:	d109      	bne.n	800b8b8 <__libc_init_array+0x24>
 800b8a4:	4d0b      	ldr	r5, [pc, #44]	@ (800b8d4 <__libc_init_array+0x40>)
 800b8a6:	4c0c      	ldr	r4, [pc, #48]	@ (800b8d8 <__libc_init_array+0x44>)
 800b8a8:	f000 fd32 	bl	800c310 <_init>
 800b8ac:	1b64      	subs	r4, r4, r5
 800b8ae:	10a4      	asrs	r4, r4, #2
 800b8b0:	2600      	movs	r6, #0
 800b8b2:	42a6      	cmp	r6, r4
 800b8b4:	d105      	bne.n	800b8c2 <__libc_init_array+0x2e>
 800b8b6:	bd70      	pop	{r4, r5, r6, pc}
 800b8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8bc:	4798      	blx	r3
 800b8be:	3601      	adds	r6, #1
 800b8c0:	e7ee      	b.n	800b8a0 <__libc_init_array+0xc>
 800b8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8c6:	4798      	blx	r3
 800b8c8:	3601      	adds	r6, #1
 800b8ca:	e7f2      	b.n	800b8b2 <__libc_init_array+0x1e>
 800b8cc:	0800c5ac 	.word	0x0800c5ac
 800b8d0:	0800c5ac 	.word	0x0800c5ac
 800b8d4:	0800c5ac 	.word	0x0800c5ac
 800b8d8:	0800c5b0 	.word	0x0800c5b0

0800b8dc <__retarget_lock_init_recursive>:
 800b8dc:	4770      	bx	lr

0800b8de <__retarget_lock_acquire_recursive>:
 800b8de:	4770      	bx	lr

0800b8e0 <__retarget_lock_release_recursive>:
 800b8e0:	4770      	bx	lr

0800b8e2 <memcpy>:
 800b8e2:	440a      	add	r2, r1
 800b8e4:	4291      	cmp	r1, r2
 800b8e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8ea:	d100      	bne.n	800b8ee <memcpy+0xc>
 800b8ec:	4770      	bx	lr
 800b8ee:	b510      	push	{r4, lr}
 800b8f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8f8:	4291      	cmp	r1, r2
 800b8fa:	d1f9      	bne.n	800b8f0 <memcpy+0xe>
 800b8fc:	bd10      	pop	{r4, pc}
	...

0800b900 <_free_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4605      	mov	r5, r0
 800b904:	2900      	cmp	r1, #0
 800b906:	d041      	beq.n	800b98c <_free_r+0x8c>
 800b908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b90c:	1f0c      	subs	r4, r1, #4
 800b90e:	2b00      	cmp	r3, #0
 800b910:	bfb8      	it	lt
 800b912:	18e4      	addlt	r4, r4, r3
 800b914:	f000 f8e0 	bl	800bad8 <__malloc_lock>
 800b918:	4a1d      	ldr	r2, [pc, #116]	@ (800b990 <_free_r+0x90>)
 800b91a:	6813      	ldr	r3, [r2, #0]
 800b91c:	b933      	cbnz	r3, 800b92c <_free_r+0x2c>
 800b91e:	6063      	str	r3, [r4, #4]
 800b920:	6014      	str	r4, [r2, #0]
 800b922:	4628      	mov	r0, r5
 800b924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b928:	f000 b8dc 	b.w	800bae4 <__malloc_unlock>
 800b92c:	42a3      	cmp	r3, r4
 800b92e:	d908      	bls.n	800b942 <_free_r+0x42>
 800b930:	6820      	ldr	r0, [r4, #0]
 800b932:	1821      	adds	r1, r4, r0
 800b934:	428b      	cmp	r3, r1
 800b936:	bf01      	itttt	eq
 800b938:	6819      	ldreq	r1, [r3, #0]
 800b93a:	685b      	ldreq	r3, [r3, #4]
 800b93c:	1809      	addeq	r1, r1, r0
 800b93e:	6021      	streq	r1, [r4, #0]
 800b940:	e7ed      	b.n	800b91e <_free_r+0x1e>
 800b942:	461a      	mov	r2, r3
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	b10b      	cbz	r3, 800b94c <_free_r+0x4c>
 800b948:	42a3      	cmp	r3, r4
 800b94a:	d9fa      	bls.n	800b942 <_free_r+0x42>
 800b94c:	6811      	ldr	r1, [r2, #0]
 800b94e:	1850      	adds	r0, r2, r1
 800b950:	42a0      	cmp	r0, r4
 800b952:	d10b      	bne.n	800b96c <_free_r+0x6c>
 800b954:	6820      	ldr	r0, [r4, #0]
 800b956:	4401      	add	r1, r0
 800b958:	1850      	adds	r0, r2, r1
 800b95a:	4283      	cmp	r3, r0
 800b95c:	6011      	str	r1, [r2, #0]
 800b95e:	d1e0      	bne.n	800b922 <_free_r+0x22>
 800b960:	6818      	ldr	r0, [r3, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	6053      	str	r3, [r2, #4]
 800b966:	4408      	add	r0, r1
 800b968:	6010      	str	r0, [r2, #0]
 800b96a:	e7da      	b.n	800b922 <_free_r+0x22>
 800b96c:	d902      	bls.n	800b974 <_free_r+0x74>
 800b96e:	230c      	movs	r3, #12
 800b970:	602b      	str	r3, [r5, #0]
 800b972:	e7d6      	b.n	800b922 <_free_r+0x22>
 800b974:	6820      	ldr	r0, [r4, #0]
 800b976:	1821      	adds	r1, r4, r0
 800b978:	428b      	cmp	r3, r1
 800b97a:	bf04      	itt	eq
 800b97c:	6819      	ldreq	r1, [r3, #0]
 800b97e:	685b      	ldreq	r3, [r3, #4]
 800b980:	6063      	str	r3, [r4, #4]
 800b982:	bf04      	itt	eq
 800b984:	1809      	addeq	r1, r1, r0
 800b986:	6021      	streq	r1, [r4, #0]
 800b988:	6054      	str	r4, [r2, #4]
 800b98a:	e7ca      	b.n	800b922 <_free_r+0x22>
 800b98c:	bd38      	pop	{r3, r4, r5, pc}
 800b98e:	bf00      	nop
 800b990:	20001ec8 	.word	0x20001ec8

0800b994 <sbrk_aligned>:
 800b994:	b570      	push	{r4, r5, r6, lr}
 800b996:	4e0f      	ldr	r6, [pc, #60]	@ (800b9d4 <sbrk_aligned+0x40>)
 800b998:	460c      	mov	r4, r1
 800b99a:	6831      	ldr	r1, [r6, #0]
 800b99c:	4605      	mov	r5, r0
 800b99e:	b911      	cbnz	r1, 800b9a6 <sbrk_aligned+0x12>
 800b9a0:	f000 fca6 	bl	800c2f0 <_sbrk_r>
 800b9a4:	6030      	str	r0, [r6, #0]
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	f000 fca1 	bl	800c2f0 <_sbrk_r>
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	d103      	bne.n	800b9ba <sbrk_aligned+0x26>
 800b9b2:	f04f 34ff 	mov.w	r4, #4294967295
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ba:	1cc4      	adds	r4, r0, #3
 800b9bc:	f024 0403 	bic.w	r4, r4, #3
 800b9c0:	42a0      	cmp	r0, r4
 800b9c2:	d0f8      	beq.n	800b9b6 <sbrk_aligned+0x22>
 800b9c4:	1a21      	subs	r1, r4, r0
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	f000 fc92 	bl	800c2f0 <_sbrk_r>
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	d1f2      	bne.n	800b9b6 <sbrk_aligned+0x22>
 800b9d0:	e7ef      	b.n	800b9b2 <sbrk_aligned+0x1e>
 800b9d2:	bf00      	nop
 800b9d4:	20001ec4 	.word	0x20001ec4

0800b9d8 <_malloc_r>:
 800b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	1ccd      	adds	r5, r1, #3
 800b9de:	f025 0503 	bic.w	r5, r5, #3
 800b9e2:	3508      	adds	r5, #8
 800b9e4:	2d0c      	cmp	r5, #12
 800b9e6:	bf38      	it	cc
 800b9e8:	250c      	movcc	r5, #12
 800b9ea:	2d00      	cmp	r5, #0
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	db01      	blt.n	800b9f4 <_malloc_r+0x1c>
 800b9f0:	42a9      	cmp	r1, r5
 800b9f2:	d904      	bls.n	800b9fe <_malloc_r+0x26>
 800b9f4:	230c      	movs	r3, #12
 800b9f6:	6033      	str	r3, [r6, #0]
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bad4 <_malloc_r+0xfc>
 800ba02:	f000 f869 	bl	800bad8 <__malloc_lock>
 800ba06:	f8d8 3000 	ldr.w	r3, [r8]
 800ba0a:	461c      	mov	r4, r3
 800ba0c:	bb44      	cbnz	r4, 800ba60 <_malloc_r+0x88>
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4630      	mov	r0, r6
 800ba12:	f7ff ffbf 	bl	800b994 <sbrk_aligned>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	4604      	mov	r4, r0
 800ba1a:	d158      	bne.n	800bace <_malloc_r+0xf6>
 800ba1c:	f8d8 4000 	ldr.w	r4, [r8]
 800ba20:	4627      	mov	r7, r4
 800ba22:	2f00      	cmp	r7, #0
 800ba24:	d143      	bne.n	800baae <_malloc_r+0xd6>
 800ba26:	2c00      	cmp	r4, #0
 800ba28:	d04b      	beq.n	800bac2 <_malloc_r+0xea>
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	4630      	mov	r0, r6
 800ba30:	eb04 0903 	add.w	r9, r4, r3
 800ba34:	f000 fc5c 	bl	800c2f0 <_sbrk_r>
 800ba38:	4581      	cmp	r9, r0
 800ba3a:	d142      	bne.n	800bac2 <_malloc_r+0xea>
 800ba3c:	6821      	ldr	r1, [r4, #0]
 800ba3e:	1a6d      	subs	r5, r5, r1
 800ba40:	4629      	mov	r1, r5
 800ba42:	4630      	mov	r0, r6
 800ba44:	f7ff ffa6 	bl	800b994 <sbrk_aligned>
 800ba48:	3001      	adds	r0, #1
 800ba4a:	d03a      	beq.n	800bac2 <_malloc_r+0xea>
 800ba4c:	6823      	ldr	r3, [r4, #0]
 800ba4e:	442b      	add	r3, r5
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	f8d8 3000 	ldr.w	r3, [r8]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	bb62      	cbnz	r2, 800bab4 <_malloc_r+0xdc>
 800ba5a:	f8c8 7000 	str.w	r7, [r8]
 800ba5e:	e00f      	b.n	800ba80 <_malloc_r+0xa8>
 800ba60:	6822      	ldr	r2, [r4, #0]
 800ba62:	1b52      	subs	r2, r2, r5
 800ba64:	d420      	bmi.n	800baa8 <_malloc_r+0xd0>
 800ba66:	2a0b      	cmp	r2, #11
 800ba68:	d917      	bls.n	800ba9a <_malloc_r+0xc2>
 800ba6a:	1961      	adds	r1, r4, r5
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	6025      	str	r5, [r4, #0]
 800ba70:	bf18      	it	ne
 800ba72:	6059      	strne	r1, [r3, #4]
 800ba74:	6863      	ldr	r3, [r4, #4]
 800ba76:	bf08      	it	eq
 800ba78:	f8c8 1000 	streq.w	r1, [r8]
 800ba7c:	5162      	str	r2, [r4, r5]
 800ba7e:	604b      	str	r3, [r1, #4]
 800ba80:	4630      	mov	r0, r6
 800ba82:	f000 f82f 	bl	800bae4 <__malloc_unlock>
 800ba86:	f104 000b 	add.w	r0, r4, #11
 800ba8a:	1d23      	adds	r3, r4, #4
 800ba8c:	f020 0007 	bic.w	r0, r0, #7
 800ba90:	1ac2      	subs	r2, r0, r3
 800ba92:	bf1c      	itt	ne
 800ba94:	1a1b      	subne	r3, r3, r0
 800ba96:	50a3      	strne	r3, [r4, r2]
 800ba98:	e7af      	b.n	800b9fa <_malloc_r+0x22>
 800ba9a:	6862      	ldr	r2, [r4, #4]
 800ba9c:	42a3      	cmp	r3, r4
 800ba9e:	bf0c      	ite	eq
 800baa0:	f8c8 2000 	streq.w	r2, [r8]
 800baa4:	605a      	strne	r2, [r3, #4]
 800baa6:	e7eb      	b.n	800ba80 <_malloc_r+0xa8>
 800baa8:	4623      	mov	r3, r4
 800baaa:	6864      	ldr	r4, [r4, #4]
 800baac:	e7ae      	b.n	800ba0c <_malloc_r+0x34>
 800baae:	463c      	mov	r4, r7
 800bab0:	687f      	ldr	r7, [r7, #4]
 800bab2:	e7b6      	b.n	800ba22 <_malloc_r+0x4a>
 800bab4:	461a      	mov	r2, r3
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	42a3      	cmp	r3, r4
 800baba:	d1fb      	bne.n	800bab4 <_malloc_r+0xdc>
 800babc:	2300      	movs	r3, #0
 800babe:	6053      	str	r3, [r2, #4]
 800bac0:	e7de      	b.n	800ba80 <_malloc_r+0xa8>
 800bac2:	230c      	movs	r3, #12
 800bac4:	6033      	str	r3, [r6, #0]
 800bac6:	4630      	mov	r0, r6
 800bac8:	f000 f80c 	bl	800bae4 <__malloc_unlock>
 800bacc:	e794      	b.n	800b9f8 <_malloc_r+0x20>
 800bace:	6005      	str	r5, [r0, #0]
 800bad0:	e7d6      	b.n	800ba80 <_malloc_r+0xa8>
 800bad2:	bf00      	nop
 800bad4:	20001ec8 	.word	0x20001ec8

0800bad8 <__malloc_lock>:
 800bad8:	4801      	ldr	r0, [pc, #4]	@ (800bae0 <__malloc_lock+0x8>)
 800bada:	f7ff bf00 	b.w	800b8de <__retarget_lock_acquire_recursive>
 800bade:	bf00      	nop
 800bae0:	20001ec0 	.word	0x20001ec0

0800bae4 <__malloc_unlock>:
 800bae4:	4801      	ldr	r0, [pc, #4]	@ (800baec <__malloc_unlock+0x8>)
 800bae6:	f7ff befb 	b.w	800b8e0 <__retarget_lock_release_recursive>
 800baea:	bf00      	nop
 800baec:	20001ec0 	.word	0x20001ec0

0800baf0 <__sfputc_r>:
 800baf0:	6893      	ldr	r3, [r2, #8]
 800baf2:	3b01      	subs	r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	b410      	push	{r4}
 800baf8:	6093      	str	r3, [r2, #8]
 800bafa:	da08      	bge.n	800bb0e <__sfputc_r+0x1e>
 800bafc:	6994      	ldr	r4, [r2, #24]
 800bafe:	42a3      	cmp	r3, r4
 800bb00:	db01      	blt.n	800bb06 <__sfputc_r+0x16>
 800bb02:	290a      	cmp	r1, #10
 800bb04:	d103      	bne.n	800bb0e <__sfputc_r+0x1e>
 800bb06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb0a:	f7ff bdda 	b.w	800b6c2 <__swbuf_r>
 800bb0e:	6813      	ldr	r3, [r2, #0]
 800bb10:	1c58      	adds	r0, r3, #1
 800bb12:	6010      	str	r0, [r2, #0]
 800bb14:	7019      	strb	r1, [r3, #0]
 800bb16:	4608      	mov	r0, r1
 800bb18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <__sfputs_r>:
 800bb1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb20:	4606      	mov	r6, r0
 800bb22:	460f      	mov	r7, r1
 800bb24:	4614      	mov	r4, r2
 800bb26:	18d5      	adds	r5, r2, r3
 800bb28:	42ac      	cmp	r4, r5
 800bb2a:	d101      	bne.n	800bb30 <__sfputs_r+0x12>
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	e007      	b.n	800bb40 <__sfputs_r+0x22>
 800bb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb34:	463a      	mov	r2, r7
 800bb36:	4630      	mov	r0, r6
 800bb38:	f7ff ffda 	bl	800baf0 <__sfputc_r>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d1f3      	bne.n	800bb28 <__sfputs_r+0xa>
 800bb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb44 <_vfiprintf_r>:
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	460d      	mov	r5, r1
 800bb4a:	b09d      	sub	sp, #116	@ 0x74
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	4698      	mov	r8, r3
 800bb50:	4606      	mov	r6, r0
 800bb52:	b118      	cbz	r0, 800bb5c <_vfiprintf_r+0x18>
 800bb54:	6a03      	ldr	r3, [r0, #32]
 800bb56:	b90b      	cbnz	r3, 800bb5c <_vfiprintf_r+0x18>
 800bb58:	f7ff fcca 	bl	800b4f0 <__sinit>
 800bb5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb5e:	07d9      	lsls	r1, r3, #31
 800bb60:	d405      	bmi.n	800bb6e <_vfiprintf_r+0x2a>
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	059a      	lsls	r2, r3, #22
 800bb66:	d402      	bmi.n	800bb6e <_vfiprintf_r+0x2a>
 800bb68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb6a:	f7ff feb8 	bl	800b8de <__retarget_lock_acquire_recursive>
 800bb6e:	89ab      	ldrh	r3, [r5, #12]
 800bb70:	071b      	lsls	r3, r3, #28
 800bb72:	d501      	bpl.n	800bb78 <_vfiprintf_r+0x34>
 800bb74:	692b      	ldr	r3, [r5, #16]
 800bb76:	b99b      	cbnz	r3, 800bba0 <_vfiprintf_r+0x5c>
 800bb78:	4629      	mov	r1, r5
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f7ff fde0 	bl	800b740 <__swsetup_r>
 800bb80:	b170      	cbz	r0, 800bba0 <_vfiprintf_r+0x5c>
 800bb82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb84:	07dc      	lsls	r4, r3, #31
 800bb86:	d504      	bpl.n	800bb92 <_vfiprintf_r+0x4e>
 800bb88:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8c:	b01d      	add	sp, #116	@ 0x74
 800bb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb92:	89ab      	ldrh	r3, [r5, #12]
 800bb94:	0598      	lsls	r0, r3, #22
 800bb96:	d4f7      	bmi.n	800bb88 <_vfiprintf_r+0x44>
 800bb98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb9a:	f7ff fea1 	bl	800b8e0 <__retarget_lock_release_recursive>
 800bb9e:	e7f3      	b.n	800bb88 <_vfiprintf_r+0x44>
 800bba0:	2300      	movs	r3, #0
 800bba2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bba4:	2320      	movs	r3, #32
 800bba6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbae:	2330      	movs	r3, #48	@ 0x30
 800bbb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd60 <_vfiprintf_r+0x21c>
 800bbb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbb8:	f04f 0901 	mov.w	r9, #1
 800bbbc:	4623      	mov	r3, r4
 800bbbe:	469a      	mov	sl, r3
 800bbc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbc4:	b10a      	cbz	r2, 800bbca <_vfiprintf_r+0x86>
 800bbc6:	2a25      	cmp	r2, #37	@ 0x25
 800bbc8:	d1f9      	bne.n	800bbbe <_vfiprintf_r+0x7a>
 800bbca:	ebba 0b04 	subs.w	fp, sl, r4
 800bbce:	d00b      	beq.n	800bbe8 <_vfiprintf_r+0xa4>
 800bbd0:	465b      	mov	r3, fp
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	f7ff ffa1 	bl	800bb1e <__sfputs_r>
 800bbdc:	3001      	adds	r0, #1
 800bbde:	f000 80a7 	beq.w	800bd30 <_vfiprintf_r+0x1ec>
 800bbe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbe4:	445a      	add	r2, fp
 800bbe6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbe8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f000 809f 	beq.w	800bd30 <_vfiprintf_r+0x1ec>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbfc:	f10a 0a01 	add.w	sl, sl, #1
 800bc00:	9304      	str	r3, [sp, #16]
 800bc02:	9307      	str	r3, [sp, #28]
 800bc04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc08:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc0a:	4654      	mov	r4, sl
 800bc0c:	2205      	movs	r2, #5
 800bc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc12:	4853      	ldr	r0, [pc, #332]	@ (800bd60 <_vfiprintf_r+0x21c>)
 800bc14:	f7f4 fb04 	bl	8000220 <memchr>
 800bc18:	9a04      	ldr	r2, [sp, #16]
 800bc1a:	b9d8      	cbnz	r0, 800bc54 <_vfiprintf_r+0x110>
 800bc1c:	06d1      	lsls	r1, r2, #27
 800bc1e:	bf44      	itt	mi
 800bc20:	2320      	movmi	r3, #32
 800bc22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc26:	0713      	lsls	r3, r2, #28
 800bc28:	bf44      	itt	mi
 800bc2a:	232b      	movmi	r3, #43	@ 0x2b
 800bc2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc30:	f89a 3000 	ldrb.w	r3, [sl]
 800bc34:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc36:	d015      	beq.n	800bc64 <_vfiprintf_r+0x120>
 800bc38:	9a07      	ldr	r2, [sp, #28]
 800bc3a:	4654      	mov	r4, sl
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	f04f 0c0a 	mov.w	ip, #10
 800bc42:	4621      	mov	r1, r4
 800bc44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc48:	3b30      	subs	r3, #48	@ 0x30
 800bc4a:	2b09      	cmp	r3, #9
 800bc4c:	d94b      	bls.n	800bce6 <_vfiprintf_r+0x1a2>
 800bc4e:	b1b0      	cbz	r0, 800bc7e <_vfiprintf_r+0x13a>
 800bc50:	9207      	str	r2, [sp, #28]
 800bc52:	e014      	b.n	800bc7e <_vfiprintf_r+0x13a>
 800bc54:	eba0 0308 	sub.w	r3, r0, r8
 800bc58:	fa09 f303 	lsl.w	r3, r9, r3
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	9304      	str	r3, [sp, #16]
 800bc60:	46a2      	mov	sl, r4
 800bc62:	e7d2      	b.n	800bc0a <_vfiprintf_r+0xc6>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	1d19      	adds	r1, r3, #4
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	9103      	str	r1, [sp, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	bfbb      	ittet	lt
 800bc70:	425b      	neglt	r3, r3
 800bc72:	f042 0202 	orrlt.w	r2, r2, #2
 800bc76:	9307      	strge	r3, [sp, #28]
 800bc78:	9307      	strlt	r3, [sp, #28]
 800bc7a:	bfb8      	it	lt
 800bc7c:	9204      	strlt	r2, [sp, #16]
 800bc7e:	7823      	ldrb	r3, [r4, #0]
 800bc80:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc82:	d10a      	bne.n	800bc9a <_vfiprintf_r+0x156>
 800bc84:	7863      	ldrb	r3, [r4, #1]
 800bc86:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc88:	d132      	bne.n	800bcf0 <_vfiprintf_r+0x1ac>
 800bc8a:	9b03      	ldr	r3, [sp, #12]
 800bc8c:	1d1a      	adds	r2, r3, #4
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	9203      	str	r2, [sp, #12]
 800bc92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc96:	3402      	adds	r4, #2
 800bc98:	9305      	str	r3, [sp, #20]
 800bc9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd70 <_vfiprintf_r+0x22c>
 800bc9e:	7821      	ldrb	r1, [r4, #0]
 800bca0:	2203      	movs	r2, #3
 800bca2:	4650      	mov	r0, sl
 800bca4:	f7f4 fabc 	bl	8000220 <memchr>
 800bca8:	b138      	cbz	r0, 800bcba <_vfiprintf_r+0x176>
 800bcaa:	9b04      	ldr	r3, [sp, #16]
 800bcac:	eba0 000a 	sub.w	r0, r0, sl
 800bcb0:	2240      	movs	r2, #64	@ 0x40
 800bcb2:	4082      	lsls	r2, r0
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	3401      	adds	r4, #1
 800bcb8:	9304      	str	r3, [sp, #16]
 800bcba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcbe:	4829      	ldr	r0, [pc, #164]	@ (800bd64 <_vfiprintf_r+0x220>)
 800bcc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcc4:	2206      	movs	r2, #6
 800bcc6:	f7f4 faab 	bl	8000220 <memchr>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d03f      	beq.n	800bd4e <_vfiprintf_r+0x20a>
 800bcce:	4b26      	ldr	r3, [pc, #152]	@ (800bd68 <_vfiprintf_r+0x224>)
 800bcd0:	bb1b      	cbnz	r3, 800bd1a <_vfiprintf_r+0x1d6>
 800bcd2:	9b03      	ldr	r3, [sp, #12]
 800bcd4:	3307      	adds	r3, #7
 800bcd6:	f023 0307 	bic.w	r3, r3, #7
 800bcda:	3308      	adds	r3, #8
 800bcdc:	9303      	str	r3, [sp, #12]
 800bcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce0:	443b      	add	r3, r7
 800bce2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bce4:	e76a      	b.n	800bbbc <_vfiprintf_r+0x78>
 800bce6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcea:	460c      	mov	r4, r1
 800bcec:	2001      	movs	r0, #1
 800bcee:	e7a8      	b.n	800bc42 <_vfiprintf_r+0xfe>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	3401      	adds	r4, #1
 800bcf4:	9305      	str	r3, [sp, #20]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	f04f 0c0a 	mov.w	ip, #10
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd02:	3a30      	subs	r2, #48	@ 0x30
 800bd04:	2a09      	cmp	r2, #9
 800bd06:	d903      	bls.n	800bd10 <_vfiprintf_r+0x1cc>
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d0c6      	beq.n	800bc9a <_vfiprintf_r+0x156>
 800bd0c:	9105      	str	r1, [sp, #20]
 800bd0e:	e7c4      	b.n	800bc9a <_vfiprintf_r+0x156>
 800bd10:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd14:	4604      	mov	r4, r0
 800bd16:	2301      	movs	r3, #1
 800bd18:	e7f0      	b.n	800bcfc <_vfiprintf_r+0x1b8>
 800bd1a:	ab03      	add	r3, sp, #12
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	462a      	mov	r2, r5
 800bd20:	4b12      	ldr	r3, [pc, #72]	@ (800bd6c <_vfiprintf_r+0x228>)
 800bd22:	a904      	add	r1, sp, #16
 800bd24:	4630      	mov	r0, r6
 800bd26:	f3af 8000 	nop.w
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	1c78      	adds	r0, r7, #1
 800bd2e:	d1d6      	bne.n	800bcde <_vfiprintf_r+0x19a>
 800bd30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd32:	07d9      	lsls	r1, r3, #31
 800bd34:	d405      	bmi.n	800bd42 <_vfiprintf_r+0x1fe>
 800bd36:	89ab      	ldrh	r3, [r5, #12]
 800bd38:	059a      	lsls	r2, r3, #22
 800bd3a:	d402      	bmi.n	800bd42 <_vfiprintf_r+0x1fe>
 800bd3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd3e:	f7ff fdcf 	bl	800b8e0 <__retarget_lock_release_recursive>
 800bd42:	89ab      	ldrh	r3, [r5, #12]
 800bd44:	065b      	lsls	r3, r3, #25
 800bd46:	f53f af1f 	bmi.w	800bb88 <_vfiprintf_r+0x44>
 800bd4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd4c:	e71e      	b.n	800bb8c <_vfiprintf_r+0x48>
 800bd4e:	ab03      	add	r3, sp, #12
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	462a      	mov	r2, r5
 800bd54:	4b05      	ldr	r3, [pc, #20]	@ (800bd6c <_vfiprintf_r+0x228>)
 800bd56:	a904      	add	r1, sp, #16
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f000 f879 	bl	800be50 <_printf_i>
 800bd5e:	e7e4      	b.n	800bd2a <_vfiprintf_r+0x1e6>
 800bd60:	0800c570 	.word	0x0800c570
 800bd64:	0800c57a 	.word	0x0800c57a
 800bd68:	00000000 	.word	0x00000000
 800bd6c:	0800bb1f 	.word	0x0800bb1f
 800bd70:	0800c576 	.word	0x0800c576

0800bd74 <_printf_common>:
 800bd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd78:	4616      	mov	r6, r2
 800bd7a:	4698      	mov	r8, r3
 800bd7c:	688a      	ldr	r2, [r1, #8]
 800bd7e:	690b      	ldr	r3, [r1, #16]
 800bd80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd84:	4293      	cmp	r3, r2
 800bd86:	bfb8      	it	lt
 800bd88:	4613      	movlt	r3, r2
 800bd8a:	6033      	str	r3, [r6, #0]
 800bd8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd90:	4607      	mov	r7, r0
 800bd92:	460c      	mov	r4, r1
 800bd94:	b10a      	cbz	r2, 800bd9a <_printf_common+0x26>
 800bd96:	3301      	adds	r3, #1
 800bd98:	6033      	str	r3, [r6, #0]
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	0699      	lsls	r1, r3, #26
 800bd9e:	bf42      	ittt	mi
 800bda0:	6833      	ldrmi	r3, [r6, #0]
 800bda2:	3302      	addmi	r3, #2
 800bda4:	6033      	strmi	r3, [r6, #0]
 800bda6:	6825      	ldr	r5, [r4, #0]
 800bda8:	f015 0506 	ands.w	r5, r5, #6
 800bdac:	d106      	bne.n	800bdbc <_printf_common+0x48>
 800bdae:	f104 0a19 	add.w	sl, r4, #25
 800bdb2:	68e3      	ldr	r3, [r4, #12]
 800bdb4:	6832      	ldr	r2, [r6, #0]
 800bdb6:	1a9b      	subs	r3, r3, r2
 800bdb8:	42ab      	cmp	r3, r5
 800bdba:	dc26      	bgt.n	800be0a <_printf_common+0x96>
 800bdbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bdc0:	6822      	ldr	r2, [r4, #0]
 800bdc2:	3b00      	subs	r3, #0
 800bdc4:	bf18      	it	ne
 800bdc6:	2301      	movne	r3, #1
 800bdc8:	0692      	lsls	r2, r2, #26
 800bdca:	d42b      	bmi.n	800be24 <_printf_common+0xb0>
 800bdcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bdd0:	4641      	mov	r1, r8
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	47c8      	blx	r9
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	d01e      	beq.n	800be18 <_printf_common+0xa4>
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	6922      	ldr	r2, [r4, #16]
 800bdde:	f003 0306 	and.w	r3, r3, #6
 800bde2:	2b04      	cmp	r3, #4
 800bde4:	bf02      	ittt	eq
 800bde6:	68e5      	ldreq	r5, [r4, #12]
 800bde8:	6833      	ldreq	r3, [r6, #0]
 800bdea:	1aed      	subeq	r5, r5, r3
 800bdec:	68a3      	ldr	r3, [r4, #8]
 800bdee:	bf0c      	ite	eq
 800bdf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdf4:	2500      	movne	r5, #0
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	bfc4      	itt	gt
 800bdfa:	1a9b      	subgt	r3, r3, r2
 800bdfc:	18ed      	addgt	r5, r5, r3
 800bdfe:	2600      	movs	r6, #0
 800be00:	341a      	adds	r4, #26
 800be02:	42b5      	cmp	r5, r6
 800be04:	d11a      	bne.n	800be3c <_printf_common+0xc8>
 800be06:	2000      	movs	r0, #0
 800be08:	e008      	b.n	800be1c <_printf_common+0xa8>
 800be0a:	2301      	movs	r3, #1
 800be0c:	4652      	mov	r2, sl
 800be0e:	4641      	mov	r1, r8
 800be10:	4638      	mov	r0, r7
 800be12:	47c8      	blx	r9
 800be14:	3001      	adds	r0, #1
 800be16:	d103      	bne.n	800be20 <_printf_common+0xac>
 800be18:	f04f 30ff 	mov.w	r0, #4294967295
 800be1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be20:	3501      	adds	r5, #1
 800be22:	e7c6      	b.n	800bdb2 <_printf_common+0x3e>
 800be24:	18e1      	adds	r1, r4, r3
 800be26:	1c5a      	adds	r2, r3, #1
 800be28:	2030      	movs	r0, #48	@ 0x30
 800be2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be2e:	4422      	add	r2, r4
 800be30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be38:	3302      	adds	r3, #2
 800be3a:	e7c7      	b.n	800bdcc <_printf_common+0x58>
 800be3c:	2301      	movs	r3, #1
 800be3e:	4622      	mov	r2, r4
 800be40:	4641      	mov	r1, r8
 800be42:	4638      	mov	r0, r7
 800be44:	47c8      	blx	r9
 800be46:	3001      	adds	r0, #1
 800be48:	d0e6      	beq.n	800be18 <_printf_common+0xa4>
 800be4a:	3601      	adds	r6, #1
 800be4c:	e7d9      	b.n	800be02 <_printf_common+0x8e>
	...

0800be50 <_printf_i>:
 800be50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be54:	7e0f      	ldrb	r7, [r1, #24]
 800be56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be58:	2f78      	cmp	r7, #120	@ 0x78
 800be5a:	4691      	mov	r9, r2
 800be5c:	4680      	mov	r8, r0
 800be5e:	460c      	mov	r4, r1
 800be60:	469a      	mov	sl, r3
 800be62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be66:	d807      	bhi.n	800be78 <_printf_i+0x28>
 800be68:	2f62      	cmp	r7, #98	@ 0x62
 800be6a:	d80a      	bhi.n	800be82 <_printf_i+0x32>
 800be6c:	2f00      	cmp	r7, #0
 800be6e:	f000 80d2 	beq.w	800c016 <_printf_i+0x1c6>
 800be72:	2f58      	cmp	r7, #88	@ 0x58
 800be74:	f000 80b9 	beq.w	800bfea <_printf_i+0x19a>
 800be78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be80:	e03a      	b.n	800bef8 <_printf_i+0xa8>
 800be82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be86:	2b15      	cmp	r3, #21
 800be88:	d8f6      	bhi.n	800be78 <_printf_i+0x28>
 800be8a:	a101      	add	r1, pc, #4	@ (adr r1, 800be90 <_printf_i+0x40>)
 800be8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be90:	0800bee9 	.word	0x0800bee9
 800be94:	0800befd 	.word	0x0800befd
 800be98:	0800be79 	.word	0x0800be79
 800be9c:	0800be79 	.word	0x0800be79
 800bea0:	0800be79 	.word	0x0800be79
 800bea4:	0800be79 	.word	0x0800be79
 800bea8:	0800befd 	.word	0x0800befd
 800beac:	0800be79 	.word	0x0800be79
 800beb0:	0800be79 	.word	0x0800be79
 800beb4:	0800be79 	.word	0x0800be79
 800beb8:	0800be79 	.word	0x0800be79
 800bebc:	0800bffd 	.word	0x0800bffd
 800bec0:	0800bf27 	.word	0x0800bf27
 800bec4:	0800bfb7 	.word	0x0800bfb7
 800bec8:	0800be79 	.word	0x0800be79
 800becc:	0800be79 	.word	0x0800be79
 800bed0:	0800c01f 	.word	0x0800c01f
 800bed4:	0800be79 	.word	0x0800be79
 800bed8:	0800bf27 	.word	0x0800bf27
 800bedc:	0800be79 	.word	0x0800be79
 800bee0:	0800be79 	.word	0x0800be79
 800bee4:	0800bfbf 	.word	0x0800bfbf
 800bee8:	6833      	ldr	r3, [r6, #0]
 800beea:	1d1a      	adds	r2, r3, #4
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6032      	str	r2, [r6, #0]
 800bef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bef8:	2301      	movs	r3, #1
 800befa:	e09d      	b.n	800c038 <_printf_i+0x1e8>
 800befc:	6833      	ldr	r3, [r6, #0]
 800befe:	6820      	ldr	r0, [r4, #0]
 800bf00:	1d19      	adds	r1, r3, #4
 800bf02:	6031      	str	r1, [r6, #0]
 800bf04:	0606      	lsls	r6, r0, #24
 800bf06:	d501      	bpl.n	800bf0c <_printf_i+0xbc>
 800bf08:	681d      	ldr	r5, [r3, #0]
 800bf0a:	e003      	b.n	800bf14 <_printf_i+0xc4>
 800bf0c:	0645      	lsls	r5, r0, #25
 800bf0e:	d5fb      	bpl.n	800bf08 <_printf_i+0xb8>
 800bf10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf14:	2d00      	cmp	r5, #0
 800bf16:	da03      	bge.n	800bf20 <_printf_i+0xd0>
 800bf18:	232d      	movs	r3, #45	@ 0x2d
 800bf1a:	426d      	negs	r5, r5
 800bf1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf20:	4859      	ldr	r0, [pc, #356]	@ (800c088 <_printf_i+0x238>)
 800bf22:	230a      	movs	r3, #10
 800bf24:	e011      	b.n	800bf4a <_printf_i+0xfa>
 800bf26:	6821      	ldr	r1, [r4, #0]
 800bf28:	6833      	ldr	r3, [r6, #0]
 800bf2a:	0608      	lsls	r0, r1, #24
 800bf2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf30:	d402      	bmi.n	800bf38 <_printf_i+0xe8>
 800bf32:	0649      	lsls	r1, r1, #25
 800bf34:	bf48      	it	mi
 800bf36:	b2ad      	uxthmi	r5, r5
 800bf38:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf3a:	4853      	ldr	r0, [pc, #332]	@ (800c088 <_printf_i+0x238>)
 800bf3c:	6033      	str	r3, [r6, #0]
 800bf3e:	bf14      	ite	ne
 800bf40:	230a      	movne	r3, #10
 800bf42:	2308      	moveq	r3, #8
 800bf44:	2100      	movs	r1, #0
 800bf46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf4a:	6866      	ldr	r6, [r4, #4]
 800bf4c:	60a6      	str	r6, [r4, #8]
 800bf4e:	2e00      	cmp	r6, #0
 800bf50:	bfa2      	ittt	ge
 800bf52:	6821      	ldrge	r1, [r4, #0]
 800bf54:	f021 0104 	bicge.w	r1, r1, #4
 800bf58:	6021      	strge	r1, [r4, #0]
 800bf5a:	b90d      	cbnz	r5, 800bf60 <_printf_i+0x110>
 800bf5c:	2e00      	cmp	r6, #0
 800bf5e:	d04b      	beq.n	800bff8 <_printf_i+0x1a8>
 800bf60:	4616      	mov	r6, r2
 800bf62:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf66:	fb03 5711 	mls	r7, r3, r1, r5
 800bf6a:	5dc7      	ldrb	r7, [r0, r7]
 800bf6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf70:	462f      	mov	r7, r5
 800bf72:	42bb      	cmp	r3, r7
 800bf74:	460d      	mov	r5, r1
 800bf76:	d9f4      	bls.n	800bf62 <_printf_i+0x112>
 800bf78:	2b08      	cmp	r3, #8
 800bf7a:	d10b      	bne.n	800bf94 <_printf_i+0x144>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	07df      	lsls	r7, r3, #31
 800bf80:	d508      	bpl.n	800bf94 <_printf_i+0x144>
 800bf82:	6923      	ldr	r3, [r4, #16]
 800bf84:	6861      	ldr	r1, [r4, #4]
 800bf86:	4299      	cmp	r1, r3
 800bf88:	bfde      	ittt	le
 800bf8a:	2330      	movle	r3, #48	@ 0x30
 800bf8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf90:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf94:	1b92      	subs	r2, r2, r6
 800bf96:	6122      	str	r2, [r4, #16]
 800bf98:	f8cd a000 	str.w	sl, [sp]
 800bf9c:	464b      	mov	r3, r9
 800bf9e:	aa03      	add	r2, sp, #12
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4640      	mov	r0, r8
 800bfa4:	f7ff fee6 	bl	800bd74 <_printf_common>
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	d14a      	bne.n	800c042 <_printf_i+0x1f2>
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	b004      	add	sp, #16
 800bfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	f043 0320 	orr.w	r3, r3, #32
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	4833      	ldr	r0, [pc, #204]	@ (800c08c <_printf_i+0x23c>)
 800bfc0:	2778      	movs	r7, #120	@ 0x78
 800bfc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	6831      	ldr	r1, [r6, #0]
 800bfca:	061f      	lsls	r7, r3, #24
 800bfcc:	f851 5b04 	ldr.w	r5, [r1], #4
 800bfd0:	d402      	bmi.n	800bfd8 <_printf_i+0x188>
 800bfd2:	065f      	lsls	r7, r3, #25
 800bfd4:	bf48      	it	mi
 800bfd6:	b2ad      	uxthmi	r5, r5
 800bfd8:	6031      	str	r1, [r6, #0]
 800bfda:	07d9      	lsls	r1, r3, #31
 800bfdc:	bf44      	itt	mi
 800bfde:	f043 0320 	orrmi.w	r3, r3, #32
 800bfe2:	6023      	strmi	r3, [r4, #0]
 800bfe4:	b11d      	cbz	r5, 800bfee <_printf_i+0x19e>
 800bfe6:	2310      	movs	r3, #16
 800bfe8:	e7ac      	b.n	800bf44 <_printf_i+0xf4>
 800bfea:	4827      	ldr	r0, [pc, #156]	@ (800c088 <_printf_i+0x238>)
 800bfec:	e7e9      	b.n	800bfc2 <_printf_i+0x172>
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	f023 0320 	bic.w	r3, r3, #32
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	e7f6      	b.n	800bfe6 <_printf_i+0x196>
 800bff8:	4616      	mov	r6, r2
 800bffa:	e7bd      	b.n	800bf78 <_printf_i+0x128>
 800bffc:	6833      	ldr	r3, [r6, #0]
 800bffe:	6825      	ldr	r5, [r4, #0]
 800c000:	6961      	ldr	r1, [r4, #20]
 800c002:	1d18      	adds	r0, r3, #4
 800c004:	6030      	str	r0, [r6, #0]
 800c006:	062e      	lsls	r6, r5, #24
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	d501      	bpl.n	800c010 <_printf_i+0x1c0>
 800c00c:	6019      	str	r1, [r3, #0]
 800c00e:	e002      	b.n	800c016 <_printf_i+0x1c6>
 800c010:	0668      	lsls	r0, r5, #25
 800c012:	d5fb      	bpl.n	800c00c <_printf_i+0x1bc>
 800c014:	8019      	strh	r1, [r3, #0]
 800c016:	2300      	movs	r3, #0
 800c018:	6123      	str	r3, [r4, #16]
 800c01a:	4616      	mov	r6, r2
 800c01c:	e7bc      	b.n	800bf98 <_printf_i+0x148>
 800c01e:	6833      	ldr	r3, [r6, #0]
 800c020:	1d1a      	adds	r2, r3, #4
 800c022:	6032      	str	r2, [r6, #0]
 800c024:	681e      	ldr	r6, [r3, #0]
 800c026:	6862      	ldr	r2, [r4, #4]
 800c028:	2100      	movs	r1, #0
 800c02a:	4630      	mov	r0, r6
 800c02c:	f7f4 f8f8 	bl	8000220 <memchr>
 800c030:	b108      	cbz	r0, 800c036 <_printf_i+0x1e6>
 800c032:	1b80      	subs	r0, r0, r6
 800c034:	6060      	str	r0, [r4, #4]
 800c036:	6863      	ldr	r3, [r4, #4]
 800c038:	6123      	str	r3, [r4, #16]
 800c03a:	2300      	movs	r3, #0
 800c03c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c040:	e7aa      	b.n	800bf98 <_printf_i+0x148>
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	4632      	mov	r2, r6
 800c046:	4649      	mov	r1, r9
 800c048:	4640      	mov	r0, r8
 800c04a:	47d0      	blx	sl
 800c04c:	3001      	adds	r0, #1
 800c04e:	d0ad      	beq.n	800bfac <_printf_i+0x15c>
 800c050:	6823      	ldr	r3, [r4, #0]
 800c052:	079b      	lsls	r3, r3, #30
 800c054:	d413      	bmi.n	800c07e <_printf_i+0x22e>
 800c056:	68e0      	ldr	r0, [r4, #12]
 800c058:	9b03      	ldr	r3, [sp, #12]
 800c05a:	4298      	cmp	r0, r3
 800c05c:	bfb8      	it	lt
 800c05e:	4618      	movlt	r0, r3
 800c060:	e7a6      	b.n	800bfb0 <_printf_i+0x160>
 800c062:	2301      	movs	r3, #1
 800c064:	4632      	mov	r2, r6
 800c066:	4649      	mov	r1, r9
 800c068:	4640      	mov	r0, r8
 800c06a:	47d0      	blx	sl
 800c06c:	3001      	adds	r0, #1
 800c06e:	d09d      	beq.n	800bfac <_printf_i+0x15c>
 800c070:	3501      	adds	r5, #1
 800c072:	68e3      	ldr	r3, [r4, #12]
 800c074:	9903      	ldr	r1, [sp, #12]
 800c076:	1a5b      	subs	r3, r3, r1
 800c078:	42ab      	cmp	r3, r5
 800c07a:	dcf2      	bgt.n	800c062 <_printf_i+0x212>
 800c07c:	e7eb      	b.n	800c056 <_printf_i+0x206>
 800c07e:	2500      	movs	r5, #0
 800c080:	f104 0619 	add.w	r6, r4, #25
 800c084:	e7f5      	b.n	800c072 <_printf_i+0x222>
 800c086:	bf00      	nop
 800c088:	0800c581 	.word	0x0800c581
 800c08c:	0800c592 	.word	0x0800c592

0800c090 <__sflush_r>:
 800c090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c098:	0716      	lsls	r6, r2, #28
 800c09a:	4605      	mov	r5, r0
 800c09c:	460c      	mov	r4, r1
 800c09e:	d454      	bmi.n	800c14a <__sflush_r+0xba>
 800c0a0:	684b      	ldr	r3, [r1, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dc02      	bgt.n	800c0ac <__sflush_r+0x1c>
 800c0a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	dd48      	ble.n	800c13e <__sflush_r+0xae>
 800c0ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0ae:	2e00      	cmp	r6, #0
 800c0b0:	d045      	beq.n	800c13e <__sflush_r+0xae>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0b8:	682f      	ldr	r7, [r5, #0]
 800c0ba:	6a21      	ldr	r1, [r4, #32]
 800c0bc:	602b      	str	r3, [r5, #0]
 800c0be:	d030      	beq.n	800c122 <__sflush_r+0x92>
 800c0c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	0759      	lsls	r1, r3, #29
 800c0c6:	d505      	bpl.n	800c0d4 <__sflush_r+0x44>
 800c0c8:	6863      	ldr	r3, [r4, #4]
 800c0ca:	1ad2      	subs	r2, r2, r3
 800c0cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0ce:	b10b      	cbz	r3, 800c0d4 <__sflush_r+0x44>
 800c0d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0d2:	1ad2      	subs	r2, r2, r3
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0d8:	6a21      	ldr	r1, [r4, #32]
 800c0da:	4628      	mov	r0, r5
 800c0dc:	47b0      	blx	r6
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	d106      	bne.n	800c0f2 <__sflush_r+0x62>
 800c0e4:	6829      	ldr	r1, [r5, #0]
 800c0e6:	291d      	cmp	r1, #29
 800c0e8:	d82b      	bhi.n	800c142 <__sflush_r+0xb2>
 800c0ea:	4a2a      	ldr	r2, [pc, #168]	@ (800c194 <__sflush_r+0x104>)
 800c0ec:	410a      	asrs	r2, r1
 800c0ee:	07d6      	lsls	r6, r2, #31
 800c0f0:	d427      	bmi.n	800c142 <__sflush_r+0xb2>
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	6062      	str	r2, [r4, #4]
 800c0f6:	04d9      	lsls	r1, r3, #19
 800c0f8:	6922      	ldr	r2, [r4, #16]
 800c0fa:	6022      	str	r2, [r4, #0]
 800c0fc:	d504      	bpl.n	800c108 <__sflush_r+0x78>
 800c0fe:	1c42      	adds	r2, r0, #1
 800c100:	d101      	bne.n	800c106 <__sflush_r+0x76>
 800c102:	682b      	ldr	r3, [r5, #0]
 800c104:	b903      	cbnz	r3, 800c108 <__sflush_r+0x78>
 800c106:	6560      	str	r0, [r4, #84]	@ 0x54
 800c108:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c10a:	602f      	str	r7, [r5, #0]
 800c10c:	b1b9      	cbz	r1, 800c13e <__sflush_r+0xae>
 800c10e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c112:	4299      	cmp	r1, r3
 800c114:	d002      	beq.n	800c11c <__sflush_r+0x8c>
 800c116:	4628      	mov	r0, r5
 800c118:	f7ff fbf2 	bl	800b900 <_free_r>
 800c11c:	2300      	movs	r3, #0
 800c11e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c120:	e00d      	b.n	800c13e <__sflush_r+0xae>
 800c122:	2301      	movs	r3, #1
 800c124:	4628      	mov	r0, r5
 800c126:	47b0      	blx	r6
 800c128:	4602      	mov	r2, r0
 800c12a:	1c50      	adds	r0, r2, #1
 800c12c:	d1c9      	bne.n	800c0c2 <__sflush_r+0x32>
 800c12e:	682b      	ldr	r3, [r5, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0c6      	beq.n	800c0c2 <__sflush_r+0x32>
 800c134:	2b1d      	cmp	r3, #29
 800c136:	d001      	beq.n	800c13c <__sflush_r+0xac>
 800c138:	2b16      	cmp	r3, #22
 800c13a:	d11e      	bne.n	800c17a <__sflush_r+0xea>
 800c13c:	602f      	str	r7, [r5, #0]
 800c13e:	2000      	movs	r0, #0
 800c140:	e022      	b.n	800c188 <__sflush_r+0xf8>
 800c142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c146:	b21b      	sxth	r3, r3
 800c148:	e01b      	b.n	800c182 <__sflush_r+0xf2>
 800c14a:	690f      	ldr	r7, [r1, #16]
 800c14c:	2f00      	cmp	r7, #0
 800c14e:	d0f6      	beq.n	800c13e <__sflush_r+0xae>
 800c150:	0793      	lsls	r3, r2, #30
 800c152:	680e      	ldr	r6, [r1, #0]
 800c154:	bf08      	it	eq
 800c156:	694b      	ldreq	r3, [r1, #20]
 800c158:	600f      	str	r7, [r1, #0]
 800c15a:	bf18      	it	ne
 800c15c:	2300      	movne	r3, #0
 800c15e:	eba6 0807 	sub.w	r8, r6, r7
 800c162:	608b      	str	r3, [r1, #8]
 800c164:	f1b8 0f00 	cmp.w	r8, #0
 800c168:	dde9      	ble.n	800c13e <__sflush_r+0xae>
 800c16a:	6a21      	ldr	r1, [r4, #32]
 800c16c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c16e:	4643      	mov	r3, r8
 800c170:	463a      	mov	r2, r7
 800c172:	4628      	mov	r0, r5
 800c174:	47b0      	blx	r6
 800c176:	2800      	cmp	r0, #0
 800c178:	dc08      	bgt.n	800c18c <__sflush_r+0xfc>
 800c17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c182:	81a3      	strh	r3, [r4, #12]
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c18c:	4407      	add	r7, r0
 800c18e:	eba8 0800 	sub.w	r8, r8, r0
 800c192:	e7e7      	b.n	800c164 <__sflush_r+0xd4>
 800c194:	dfbffffe 	.word	0xdfbffffe

0800c198 <_fflush_r>:
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	690b      	ldr	r3, [r1, #16]
 800c19c:	4605      	mov	r5, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	b913      	cbnz	r3, 800c1a8 <_fflush_r+0x10>
 800c1a2:	2500      	movs	r5, #0
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	b118      	cbz	r0, 800c1b2 <_fflush_r+0x1a>
 800c1aa:	6a03      	ldr	r3, [r0, #32]
 800c1ac:	b90b      	cbnz	r3, 800c1b2 <_fflush_r+0x1a>
 800c1ae:	f7ff f99f 	bl	800b4f0 <__sinit>
 800c1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d0f3      	beq.n	800c1a2 <_fflush_r+0xa>
 800c1ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1bc:	07d0      	lsls	r0, r2, #31
 800c1be:	d404      	bmi.n	800c1ca <_fflush_r+0x32>
 800c1c0:	0599      	lsls	r1, r3, #22
 800c1c2:	d402      	bmi.n	800c1ca <_fflush_r+0x32>
 800c1c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1c6:	f7ff fb8a 	bl	800b8de <__retarget_lock_acquire_recursive>
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	f7ff ff5f 	bl	800c090 <__sflush_r>
 800c1d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1d4:	07da      	lsls	r2, r3, #31
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	d4e4      	bmi.n	800c1a4 <_fflush_r+0xc>
 800c1da:	89a3      	ldrh	r3, [r4, #12]
 800c1dc:	059b      	lsls	r3, r3, #22
 800c1de:	d4e1      	bmi.n	800c1a4 <_fflush_r+0xc>
 800c1e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1e2:	f7ff fb7d 	bl	800b8e0 <__retarget_lock_release_recursive>
 800c1e6:	e7dd      	b.n	800c1a4 <_fflush_r+0xc>

0800c1e8 <__swhatbuf_r>:
 800c1e8:	b570      	push	{r4, r5, r6, lr}
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f0:	2900      	cmp	r1, #0
 800c1f2:	b096      	sub	sp, #88	@ 0x58
 800c1f4:	4615      	mov	r5, r2
 800c1f6:	461e      	mov	r6, r3
 800c1f8:	da0d      	bge.n	800c216 <__swhatbuf_r+0x2e>
 800c1fa:	89a3      	ldrh	r3, [r4, #12]
 800c1fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c200:	f04f 0100 	mov.w	r1, #0
 800c204:	bf14      	ite	ne
 800c206:	2340      	movne	r3, #64	@ 0x40
 800c208:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c20c:	2000      	movs	r0, #0
 800c20e:	6031      	str	r1, [r6, #0]
 800c210:	602b      	str	r3, [r5, #0]
 800c212:	b016      	add	sp, #88	@ 0x58
 800c214:	bd70      	pop	{r4, r5, r6, pc}
 800c216:	466a      	mov	r2, sp
 800c218:	f000 f848 	bl	800c2ac <_fstat_r>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	dbec      	blt.n	800c1fa <__swhatbuf_r+0x12>
 800c220:	9901      	ldr	r1, [sp, #4]
 800c222:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c226:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c22a:	4259      	negs	r1, r3
 800c22c:	4159      	adcs	r1, r3
 800c22e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c232:	e7eb      	b.n	800c20c <__swhatbuf_r+0x24>

0800c234 <__smakebuf_r>:
 800c234:	898b      	ldrh	r3, [r1, #12]
 800c236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c238:	079d      	lsls	r5, r3, #30
 800c23a:	4606      	mov	r6, r0
 800c23c:	460c      	mov	r4, r1
 800c23e:	d507      	bpl.n	800c250 <__smakebuf_r+0x1c>
 800c240:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	6123      	str	r3, [r4, #16]
 800c248:	2301      	movs	r3, #1
 800c24a:	6163      	str	r3, [r4, #20]
 800c24c:	b003      	add	sp, #12
 800c24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c250:	ab01      	add	r3, sp, #4
 800c252:	466a      	mov	r2, sp
 800c254:	f7ff ffc8 	bl	800c1e8 <__swhatbuf_r>
 800c258:	9f00      	ldr	r7, [sp, #0]
 800c25a:	4605      	mov	r5, r0
 800c25c:	4639      	mov	r1, r7
 800c25e:	4630      	mov	r0, r6
 800c260:	f7ff fbba 	bl	800b9d8 <_malloc_r>
 800c264:	b948      	cbnz	r0, 800c27a <__smakebuf_r+0x46>
 800c266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26a:	059a      	lsls	r2, r3, #22
 800c26c:	d4ee      	bmi.n	800c24c <__smakebuf_r+0x18>
 800c26e:	f023 0303 	bic.w	r3, r3, #3
 800c272:	f043 0302 	orr.w	r3, r3, #2
 800c276:	81a3      	strh	r3, [r4, #12]
 800c278:	e7e2      	b.n	800c240 <__smakebuf_r+0xc>
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	6020      	str	r0, [r4, #0]
 800c27e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c282:	81a3      	strh	r3, [r4, #12]
 800c284:	9b01      	ldr	r3, [sp, #4]
 800c286:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c28a:	b15b      	cbz	r3, 800c2a4 <__smakebuf_r+0x70>
 800c28c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c290:	4630      	mov	r0, r6
 800c292:	f000 f81d 	bl	800c2d0 <_isatty_r>
 800c296:	b128      	cbz	r0, 800c2a4 <__smakebuf_r+0x70>
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	f023 0303 	bic.w	r3, r3, #3
 800c29e:	f043 0301 	orr.w	r3, r3, #1
 800c2a2:	81a3      	strh	r3, [r4, #12]
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	431d      	orrs	r5, r3
 800c2a8:	81a5      	strh	r5, [r4, #12]
 800c2aa:	e7cf      	b.n	800c24c <__smakebuf_r+0x18>

0800c2ac <_fstat_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4d07      	ldr	r5, [pc, #28]	@ (800c2cc <_fstat_r+0x20>)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	602b      	str	r3, [r5, #0]
 800c2ba:	f7f4 fd88 	bl	8000dce <_fstat>
 800c2be:	1c43      	adds	r3, r0, #1
 800c2c0:	d102      	bne.n	800c2c8 <_fstat_r+0x1c>
 800c2c2:	682b      	ldr	r3, [r5, #0]
 800c2c4:	b103      	cbz	r3, 800c2c8 <_fstat_r+0x1c>
 800c2c6:	6023      	str	r3, [r4, #0]
 800c2c8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20001ebc 	.word	0x20001ebc

0800c2d0 <_isatty_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4d06      	ldr	r5, [pc, #24]	@ (800c2ec <_isatty_r+0x1c>)
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	602b      	str	r3, [r5, #0]
 800c2dc:	f7f4 fd87 	bl	8000dee <_isatty>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_isatty_r+0x1a>
 800c2e4:	682b      	ldr	r3, [r5, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_isatty_r+0x1a>
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	20001ebc 	.word	0x20001ebc

0800c2f0 <_sbrk_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d06      	ldr	r5, [pc, #24]	@ (800c30c <_sbrk_r+0x1c>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	602b      	str	r3, [r5, #0]
 800c2fc:	f7f4 fd90 	bl	8000e20 <_sbrk>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_sbrk_r+0x1a>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_sbrk_r+0x1a>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	20001ebc 	.word	0x20001ebc

0800c310 <_init>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	bf00      	nop
 800c314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c316:	bc08      	pop	{r3}
 800c318:	469e      	mov	lr, r3
 800c31a:	4770      	bx	lr

0800c31c <_fini>:
 800c31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31e:	bf00      	nop
 800c320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c322:	bc08      	pop	{r3}
 800c324:	469e      	mov	lr, r3
 800c326:	4770      	bx	lr
