
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c11c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800c2fc  0800c2fc  0000d2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c578  0800c578  0000e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c578  0800c578  0000d578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c580  0800c580  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c580  0800c580  0000d580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c584  0800c584  0000d584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800c588  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cdc  200001f0  0800c778  0000e1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ecc  0800c778  0000eecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f925  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d67  00000000  00000000  0002db45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  000328b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137e  00000000  00000000  00034238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006fd1  00000000  00000000  000355b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224cb  00000000  00000000  0003c587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cda94  00000000  00000000  0005ea52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c4e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070f0  00000000  00000000  0012c52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0013361c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c2e4 	.word	0x0800c2e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800c2e4 	.word	0x0800c2e4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_DMA_Init+0x50>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <MX_DMA_Init+0x50>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_DMA_Init+0x50>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_DMA_Init+0x50>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f001 f93d 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f001 f954 	bl	800189e <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b43      	ldr	r3, [pc, #268]	@ (8000728 <MX_GPIO_Init+0x124>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a42      	ldr	r2, [pc, #264]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b40      	ldr	r3, [pc, #256]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b3d      	ldr	r3, [pc, #244]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a3c      	ldr	r2, [pc, #240]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b3a      	ldr	r3, [pc, #232]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <MX_GPIO_Init+0x124>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a36      	ldr	r2, [pc, #216]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b34      	ldr	r3, [pc, #208]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	4a30      	ldr	r2, [pc, #192]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066e:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000680:	482a      	ldr	r0, [pc, #168]	@ (800072c <MX_GPIO_Init+0x128>)
 8000682:	f001 fddb 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2140      	movs	r1, #64	@ 0x40
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f001 fdd5 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2101      	movs	r1, #1
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <MX_GPIO_Init+0x12c>)
 8000698:	f001 fdd0 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800069c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	481d      	ldr	r0, [pc, #116]	@ (800072c <MX_GPIO_Init+0x128>)
 80006b6:	f001 fc3f 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006ba:	23a0      	movs	r3, #160	@ 0xa0
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d2:	f001 fc31 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006d6:	2340      	movs	r3, #64	@ 0x40
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f001 fc22 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f4:	2301      	movs	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_GPIO_Init+0x12c>)
 800070c:	f001 fc14 	bl	8001f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2017      	movs	r0, #23
 8000716:	f001 f8a8 	bl	800186a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800071a:	2017      	movs	r0, #23
 800071c:	f001 f8bf 	bl	800189e <HAL_NVIC_EnableIRQ>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	48000800 	.word	0x48000800
 8000730:	48000400 	.word	0x48000400

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 ff29 	bl	800158e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f838 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f7ff ff60 	bl	8000604 <MX_GPIO_Init>
  MX_DMA_Init();
 8000744:	f7ff ff34 	bl	80005b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000748:	f000 fc2c 	bl	8000fa4 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 800074c:	f00a f90c 	bl	800a968 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000750:	f000 fbae 	bl	8000eb0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8000754:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000758:	490f      	ldr	r1, [pc, #60]	@ (8000798 <main+0x64>)
 800075a:	4810      	ldr	r0, [pc, #64]	@ (800079c <main+0x68>)
 800075c:	f000 f879 	bl	8000852 <Q_Init>

  HAL_Delay(3000);
 8000760:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000764:	f000 ff84 	bl	8001670 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <main+0x6c>)
 800076a:	f004 fae7 	bl	8004d3c <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 800076e:	f000 fd4f 	bl	8001210 <GetClockSourcePrint>
  BootMessagePrint();
 8000772:	f000 fd1d 	bl	80011b0 <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000776:	2264      	movs	r2, #100	@ 0x64
 8000778:	490a      	ldr	r1, [pc, #40]	@ (80007a4 <main+0x70>)
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <main+0x74>)
 800077c:	f006 fd78 	bl	8007270 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <main+0x78>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <main+0x78>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0204 	bic.w	r2, r2, #4
 800078e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 8000790:	f000 fcf8 	bl	8001184 <User_Toggle_Led>
 8000794:	e7fc      	b.n	8000790 <main+0x5c>
 8000796:	bf00      	nop
 8000798:	20000758 	.word	0x20000758
 800079c:	20000360 	.word	0x20000360
 80007a0:	20000214 	.word	0x20000214
 80007a4:	20000b44 	.word	0x20000b44
 80007a8:	20000260 	.word	0x20000260
 80007ac:	200002f4 	.word	0x200002f4

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	@ 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	2238      	movs	r2, #56	@ 0x38
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f00a fffe 	bl	800b7c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f003 fa88 	bl	8003ce8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007d8:	2321      	movs	r3, #33	@ 0x21
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007ee:	2306      	movs	r3, #6
 80007f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007f2:	2355      	movs	r3, #85	@ 0x55
 80007f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fb22 	bl	8003e50 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000812:	f000 f818 	bl	8000846 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2104      	movs	r1, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fe20 	bl	8004474 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800083a:	f000 f804 	bl	8000846 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084a:	b672      	cpsid	i
}
 800084c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <Error_Handler+0x8>

08000852 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	4613      	mov	r3, r2
 800085e:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2200      	movs	r2, #0
 8000864:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2200      	movs	r2, #0
 800086a:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2200      	movs	r2, #0
 8000870:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2200      	movs	r2, #0
 8000876:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	60da      	str	r2, [r3, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	4613      	mov	r3, r2
 800089c:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 800089e:	2300      	movs	r3, #0
 80008a0:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f000 f8ea 	bl	8000a7c <Q_NumEmptyBytes>
 80008a8:	4603      	mov	r3, r0
 80008aa:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	db44      	blt.n	800093e <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	4413      	add	r3, r2
 80008c0:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	8afa      	ldrh	r2, [r7, #22]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d20b      	bcs.n	80008e4 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008d6:	4413      	add	r3, r2
 80008d8:	88fa      	ldrh	r2, [r7, #6]
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	4618      	mov	r0, r3
 80008de:	f00a ffea 	bl	800b8b6 <memcpy>
 80008e2:	e01d      	b.n	8000920 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	881a      	ldrh	r2, [r3, #0]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008fe:	4413      	add	r3, r2
 8000900:	8aba      	ldrh	r2, [r7, #20]
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	4618      	mov	r0, r3
 8000906:	f00a ffd6 	bl	800b8b6 <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	68d8      	ldr	r0, [r3, #12]
 800090e:	8abb      	ldrh	r3, [r7, #20]
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	18d1      	adds	r1, r2, r3
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	8abb      	ldrh	r3, [r7, #20]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	461a      	mov	r2, r3
 800091c:	f00a ffcb 	bl	800b8b6 <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	881a      	ldrh	r2, [r3, #0]
 8000924:	8afb      	ldrh	r3, [r7, #22]
 8000926:	fbb3 f1f2 	udiv	r1, r3, r2
 800092a:	fb01 f202 	mul.w	r2, r1, r2
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	b21a      	sxth	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8000938:	2301      	movs	r3, #1
 800093a:	77fb      	strb	r3, [r7, #31]
 800093c:	e00e      	b.n	800095c <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	88db      	ldrh	r3, [r3, #6]
 8000942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000946:	4293      	cmp	r3, r2
 8000948:	d004      	beq.n	8000954 <Q_Write+0xc4>
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	88db      	ldrh	r3, [r3, #6]
 800094e:	3301      	adds	r3, #1
 8000950:	b29a      	uxth	r2, r3
 8000952:	e001      	b.n	8000958 <Q_Write+0xc8>
 8000954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	80da      	strh	r2, [r3, #6]
    return ret;    
 800095c:	7ffb      	ldrb	r3, [r7, #31]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	4613      	mov	r3, r2
 8000972:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f864 	bl	8000a42 <Q_NumContents>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	4293      	cmp	r3, r2
 8000982:	d848      	bhi.n	8000a16 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800098a:	b29a      	uxth	r2, r3
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4413      	add	r3, r2
 8000990:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	8aba      	ldrh	r2, [r7, #20]
 8000998:	429a      	cmp	r2, r3
 800099a:	d20b      	bcs.n	80009b4 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	4619      	mov	r1, r3
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f00a ff82 	bl	800b8b6 <memcpy>
 80009b2:	e01d      	b.n	80009f0 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	881a      	ldrh	r2, [r3, #0]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	8a7a      	ldrh	r2, [r7, #18]
 80009d2:	4619      	mov	r1, r3
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f00a ff6e 	bl	800b8b6 <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 80009da:	8a7b      	ldrh	r3, [r7, #18]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	18d0      	adds	r0, r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68d9      	ldr	r1, [r3, #12]
 80009e4:	88fa      	ldrh	r2, [r7, #6]
 80009e6:	8a7b      	ldrh	r3, [r7, #18]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	f00a ff63 	bl	800b8b6 <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009f6:	461a      	mov	r2, r3
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	4413      	add	r3, r2
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	8812      	ldrh	r2, [r2, #0]
 8000a00:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a04:	fb01 f202 	mul.w	r2, r1, r2
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000a10:	2301      	movs	r3, #1
 8000a12:	75fb      	strb	r3, [r7, #23]
 8000a14:	e010      	b.n	8000a38 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	891b      	ldrh	r3, [r3, #8]
 8000a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d004      	beq.n	8000a2c <Q_Read+0xc6>
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	891b      	ldrh	r3, [r3, #8]
 8000a26:	3301      	adds	r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	e001      	b.n	8000a30 <Q_Read+0xca>
 8000a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000a34:	2300      	movs	r3, #0
 8000a36:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a56:	4413      	add	r3, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a5e:	1a9b      	subs	r3, r3, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	8812      	ldrh	r2, [r2, #0]
 8000a64:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a68:	fb01 f202 	mul.w	r2, r1, r2
 8000a6c:	1a9b      	subs	r3, r3, r2
 8000a6e:	b29b      	uxth	r3, r3
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	881c      	ldrh	r4, [r3, #0]
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ffda 	bl	8000a42 <Q_NumContents>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	1ae3      	subs	r3, r4, r3
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b29b      	uxth	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ad6:	f003 f9ab 	bl	8003e30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f000 fd79 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <DMA1_Channel1_IRQHandler+0x10>)
 8000b4e:	f001 f8a4 	bl	8001c9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200002f4 	.word	0x200002f4

08000b5c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <USB_LP_IRQHandler+0x10>)
 8000b62:	f001 fcb0 	bl	80024c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20001884 	.word	0x20001884

08000b70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b74:	2020      	movs	r0, #32
 8000b76:	f001 fb93 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b7a:	2080      	movs	r0, #128	@ 0x80
 8000b7c:	f001 fb90 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b8a:	f004 f941 	bl	8004e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000214 	.word	0x20000214

08000b98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d006      	beq.n	8000bb8 <USART1_IRQHandler+0x20>
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d107      	bne.n	8000bc8 <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bca:	f004 fe77 	bl	80058bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000260 	.word	0x20000260

08000bd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000be4:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000be6:	f7ff ff2c 	bl	8000a42 <Q_NumContents>
 8000bea:	4603      	mov	r3, r0
 8000bec:	81fb      	strh	r3, [r7, #14]
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d016      	beq.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000bf4:	f009 ffae 	bl	800ab54 <CDC_Transmit_Is_Busy>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d011      	beq.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c00:	881a      	ldrh	r2, [r3, #0]
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	4413      	add	r3, r2
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c0a:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	490f      	ldr	r1, [pc, #60]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c12:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c14:	f7ff fea7 	bl	8000966 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c1e:	f009 ff61 	bl	800aae4 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d109      	bne.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c34:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c3e:	6013      	str	r3, [r2, #0]
  }
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000360 	.word	0x20000360
 8000c4c:	2000035c 	.word	0x2000035c
 8000c50:	20000370 	.word	0x20000370
 8000c54:	40012c00 	.word	0x40012c00
 8000c58:	20000354 	.word	0x20000354
 8000c5c:	20000358 	.word	0x20000358

08000c60 <HAL_UARTEx_RxEventCallback>:

uint8_t IOL_Rx_IDLEFlag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a2f      	ldr	r2, [pc, #188]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c76:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d153      	bne.n	8000d2a <HAL_UARTEx_RxEventCallback+0xca>
    // {
    //   IOL_RX_CONTINUE_FLAG = 0;
    //   return;
    // }

    if (uart_rx_IDLE_TotalCnt >= 3)
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d912      	bls.n	8000cb0 <HAL_UARTEx_RxEventCallback+0x50>
    {
      DEBUG_GPIO_TOGGLE;
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	482b      	ldr	r0, [pc, #172]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8000c8e:	f001 faed 	bl	800226c <HAL_GPIO_TogglePin>
      if (IOL_Rx_IDLEFlag == 1)
 8000c92:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d103      	bne.n	8000ca2 <HAL_UARTEx_RxEventCallback+0x42>
      {
        IOL_Rx_IDLEFlag = 0;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e006      	b.n	8000cb0 <HAL_UARTEx_RxEventCallback+0x50>
      }
      else
      {
        IOL_Rx_IDLEFlag = 1;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_StartUp_Seq_Page(Size);
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fb84 	bl	80013b8 <IOL_StartUp_Seq_Page>
      }

    }

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2264      	movs	r2, #100	@ 0x64
 8000cc6:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	e853 3f00 	ldrex	r3, [r3]
 8000cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d00:	6979      	ldr	r1, [r7, #20]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	e841 2300 	strex	r3, r2, [r1]
 8000d08:	613b      	str	r3, [r7, #16]
   return(result);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e6      	bne.n	8000cde <HAL_UARTEx_RxEventCallback+0x7e>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000d10:	2264      	movs	r2, #100	@ 0x64
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000d14:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <HAL_UARTEx_RxEventCallback+0xec>)
 8000d16:	f006 faab 	bl	8007270 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0204 	bic.w	r2, r2, #4
 8000d28:	601a      	str	r2, [r3, #0]

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000b40 	.word	0x20000b40
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	2000020c 	.word	0x2000020c
 8000d44:	200002f4 	.word	0x200002f4
 8000d48:	20000b44 	.word	0x20000b44
 8000d4c:	20000260 	.word	0x20000260

08000d50 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <HAL_UART_TxCpltCallback+0x28>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d105      	bne.n	8000d6e <HAL_UART_TxCpltCallback+0x1e>
  {
    IOL_DISABLE;
 8000d62:	2200      	movs	r2, #0
 8000d64:	2140      	movs	r1, #64	@ 0x40
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f001 fa67 	bl	800223c <HAL_GPIO_WritePin>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40013800 	.word	0x40013800

08000d7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e00a      	b.n	8000da4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d8e:	f3af 8000 	nop.w
 8000d92:	4601      	mov	r1, r0
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	b2ca      	uxtb	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf0      	blt.n	8000d8e <_read+0x12>
  }

  return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dde:	605a      	str	r2, [r3, #4]
  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f00a fd04 	bl	800b85c <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20008000 	.word	0x20008000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	20000210 	.word	0x20000210
 8000e88:	20001ed0 	.word	0x20001ed0

08000e8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ed0:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <MX_TIM1_Init+0xa4>)
 8000ed2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ed6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ee4:	22a9      	movs	r2, #169	@ 0xa9
 8000ee6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000efa:	4815      	ldr	r0, [pc, #84]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000efc:	f003 fec6 	bl	8004c8c <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f06:	f7ff fc9e 	bl	8000846 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000f18:	f004 f8ca 	bl	80050b0 <HAL_TIM_ConfigClockSource>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f22:	f7ff fc90 	bl	8000846 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000f38:	f004 fb14 	bl	8005564 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f42:	f7ff fc80 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000214 	.word	0x20000214
 8000f54:	40012c00 	.word	0x40012c00

08000f58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <HAL_TIM_Base_MspInit+0x44>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d113      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2019      	movs	r0, #25
 8000f88:	f000 fc6f 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f8c:	2019      	movs	r0, #25
 8000f8e:	f000 fc86 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000faa:	4a24      	ldr	r2, [pc, #144]	@ (800103c <MX_USART1_UART_Init+0x98>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000fae:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fb0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fbc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff0:	4811      	ldr	r0, [pc, #68]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000ff2:	f004 fb7f 	bl	80056f4 <HAL_UART_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f7ff fc23 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001000:	2100      	movs	r1, #0
 8001002:	480d      	ldr	r0, [pc, #52]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8001004:	f006 f8b8 	bl	8007178 <HAL_UARTEx_SetTxFifoThreshold>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800100e:	f7ff fc1a 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001012:	2100      	movs	r1, #0
 8001014:	4808      	ldr	r0, [pc, #32]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8001016:	f006 f8ed 	bl	80071f4 <HAL_UARTEx_SetRxFifoThreshold>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001020:	f7ff fc11 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8001026:	f006 f86e 	bl	8007106 <HAL_UARTEx_DisableFifoMode>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001030:	f7ff fc09 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000260 	.word	0x20000260
 800103c:	40013800 	.word	0x40013800

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b09a      	sub	sp, #104	@ 0x68
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2244      	movs	r2, #68	@ 0x44
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00a fbad 	bl	800b7c0 <memset>
  if(uartHandle->Instance==USART1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a38      	ldr	r2, [pc, #224]	@ (800114c <HAL_UART_MspInit+0x10c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d169      	bne.n	8001144 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fc15 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff fbdd 	bl	8000846 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108c:	4b30      	ldr	r3, [pc, #192]	@ (8001150 <HAL_UART_MspInit+0x110>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001090:	4a2f      	ldr	r2, [pc, #188]	@ (8001150 <HAL_UART_MspInit+0x110>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001096:	6613      	str	r3, [r2, #96]	@ 0x60
 8001098:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <HAL_UART_MspInit+0x110>)
 800109a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <HAL_UART_MspInit+0x110>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a29      	ldr	r2, [pc, #164]	@ (8001150 <HAL_UART_MspInit+0x110>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <HAL_UART_MspInit+0x110>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ce:	2307      	movs	r3, #7
 80010d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f000 ff2c 	bl	8001f38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001158 <HAL_UART_MspInit+0x118>)
 80010e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010e8:	2218      	movs	r2, #24
 80010ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_UART_MspInit+0x114>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001116:	480f      	ldr	r0, [pc, #60]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001118:	f000 fbdc 	bl	80018d4 <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001122:	f7ff fb90 	bl	8000846 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <HAL_UART_MspInit+0x114>)
 800112a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800112e:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2025      	movs	r0, #37	@ 0x25
 800113a:	f000 fb96 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800113e:	2025      	movs	r0, #37	@ 0x25
 8001140:	f000 fbad 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	3768      	adds	r7, #104	@ 0x68
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013800 	.word	0x40013800
 8001150:	40021000 	.word	0x40021000
 8001154:	200002f4 	.word	0x200002f4
 8001158:	40020008 	.word	0x40020008

0800115c <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	b29b      	uxth	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <_write+0x24>)
 8001172:	f7ff fb8d 	bl	8000890 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000360 	.word	0x20000360

08001184 <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <User_Toggle_Led+0x24>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001190:	d307      	bcc.n	80011a2 <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 8001192:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <User_Toggle_Led+0x24>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 8001198:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800119c:	4803      	ldr	r0, [pc, #12]	@ (80011ac <User_Toggle_Led+0x28>)
 800119e:	f001 f865 	bl	800226c <HAL_GPIO_TogglePin>
    }
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000354 	.word	0x20000354
 80011ac:	48000800 	.word	0x48000800

080011b0 <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <BootMessagePrint+0x38>)
 80011b6:	f00a fa23 	bl	800b600 <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 80011ba:	490c      	ldr	r1, [pc, #48]	@ (80011ec <BootMessagePrint+0x3c>)
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <BootMessagePrint+0x40>)
 80011be:	f00a f9b7 	bl	800b530 <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 80011c2:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <BootMessagePrint+0x44>)
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <BootMessagePrint+0x48>)
 80011c6:	f00a f9b3 	bl	800b530 <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 80011ca:	490c      	ldr	r1, [pc, #48]	@ (80011fc <BootMessagePrint+0x4c>)
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <BootMessagePrint+0x50>)
 80011ce:	f00a f9af 	bl	800b530 <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80011d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001204 <BootMessagePrint+0x54>)
 80011d4:	490c      	ldr	r1, [pc, #48]	@ (8001208 <BootMessagePrint+0x58>)
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <BootMessagePrint+0x5c>)
 80011d8:	f00a f9aa 	bl	800b530 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <BootMessagePrint+0x38>)
 80011de:	f00a fa0f 	bl	800b600 <puts>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800c2fc 	.word	0x0800c2fc
 80011ec:	0800c344 	.word	0x0800c344
 80011f0:	0800c354 	.word	0x0800c354
 80011f4:	0800c370 	.word	0x0800c370
 80011f8:	0800c378 	.word	0x0800c378
 80011fc:	0800c394 	.word	0x0800c394
 8001200:	0800c3a8 	.word	0x0800c3a8
 8001204:	0800c3c4 	.word	0x0800c3c4
 8001208:	0800c3d0 	.word	0x0800c3d0
 800120c:	0800c3dc 	.word	0x0800c3dc

08001210 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8001214:	4819      	ldr	r0, [pc, #100]	@ (800127c <GetClockSourcePrint+0x6c>)
 8001216:	f00a f9f3 	bl	800b600 <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 800121a:	f003 fa67 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 800121e:	4603      	mov	r3, r0
 8001220:	4a17      	ldr	r2, [pc, #92]	@ (8001280 <GetClockSourcePrint+0x70>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	4619      	mov	r1, r3
 800122a:	4816      	ldr	r0, [pc, #88]	@ (8001284 <GetClockSourcePrint+0x74>)
 800122c:	f00a f980 	bl	800b530 <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8001230:	f003 fabe 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 8001234:	4603      	mov	r3, r0
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <GetClockSourcePrint+0x70>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	0c9b      	lsrs	r3, r3, #18
 800123e:	4619      	mov	r1, r3
 8001240:	4811      	ldr	r0, [pc, #68]	@ (8001288 <GetClockSourcePrint+0x78>)
 8001242:	f00a f975 	bl	800b530 <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8001246:	f003 fabf 	bl	80047c8 <HAL_RCC_GetPCLK1Freq>
 800124a:	4603      	mov	r3, r0
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <GetClockSourcePrint+0x70>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9b      	lsrs	r3, r3, #18
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	@ (800128c <GetClockSourcePrint+0x7c>)
 8001258:	f00a f96a 	bl	800b530 <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 800125c:	f003 faca 	bl	80047f4 <HAL_RCC_GetPCLK2Freq>
 8001260:	4603      	mov	r3, r0
 8001262:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <GetClockSourcePrint+0x70>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	0c9b      	lsrs	r3, r3, #18
 800126a:	4619      	mov	r1, r3
 800126c:	4808      	ldr	r0, [pc, #32]	@ (8001290 <GetClockSourcePrint+0x80>)
 800126e:	f00a f95f 	bl	800b530 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8001272:	4802      	ldr	r0, [pc, #8]	@ (800127c <GetClockSourcePrint+0x6c>)
 8001274:	f00a f9c4 	bl	800b600 <puts>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	0800c2fc 	.word	0x0800c2fc
 8001280:	431bde83 	.word	0x431bde83
 8001284:	0800c3fc 	.word	0x0800c3fc
 8001288:	0800c42c 	.word	0x0800c42c
 800128c:	0800c45c 	.word	0x0800c45c
 8001290:	0800c48c 	.word	0x0800c48c

08001294 <Decode_CKS_GetChecksum>:
    //     return 0;
    // }
}

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80012a0:	2352      	movs	r3, #82	@ 0x52
 80012a2:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	757b      	strb	r3, [r7, #21]

    // ck8 ^= *pData++; // MC Check 

    // ck8 ^= *pData++ & 0xC0; // CKT 6b clear. CKT Check
    // for (uint8_t i = 0; i < checksumsize; i++)
    for (uint8_t i = 0; i < checksumsize; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	75bb      	strb	r3, [r7, #22]
 80012b0:	e009      	b.n	80012c6 <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	4053      	eors	r3, r2
 80012be:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 80012c0:	7dbb      	ldrb	r3, [r7, #22]
 80012c2:	3301      	adds	r3, #1
 80012c4:	75bb      	strb	r3, [r7, #22]
 80012c6:	7dba      	ldrb	r2, [r7, #22]
 80012c8:	7d7b      	ldrb	r3, [r7, #21]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3f1      	bcc.n	80012b2 <Decode_CKS_GetChecksum+0x1e>
    // {
    //         ck8 ^= *pData++;
    // }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	09db      	lsrs	r3, r3, #7
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4053      	eors	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4053      	eors	r3, r2
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4053      	eors	r3, r2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	099b      	lsrs	r3, r3, #6
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4053      	eors	r3, r2
 8001306:	b2da      	uxtb	r2, r3
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4053      	eors	r3, r2
 8001310:	b2da      	uxtb	r2, r3
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	4053      	eors	r3, r2
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	09db      	lsrs	r3, r3, #7
 8001322:	b2da      	uxtb	r2, r3
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	099b      	lsrs	r3, r3, #6
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4053      	eors	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	b2da      	uxtb	r2, r3
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4053      	eors	r3, r2
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	b2da      	uxtb	r2, r3
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4053      	eors	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	085b      	lsrs	r3, r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	4053      	eors	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 8001372:	7d3b      	ldrb	r3, [r7, #20]
 8001374:	015b      	lsls	r3, r3, #5
 8001376:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 8001378:	7cfb      	ldrb	r3, [r7, #19]
 800137a:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 800137c:	b25b      	sxtb	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 8001382:	7cbb      	ldrb	r3, [r7, #18]
 8001384:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 8001386:	b25b      	sxtb	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 800138c:	7c7b      	ldrb	r3, [r7, #17]
 800138e:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 8001390:	b25b      	sxtb	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 8001396:	7c3b      	ldrb	r3, [r7, #16]
 8001398:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80013a8:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <IOL_StartUp_Seq_Page>:
    // printf(" Checksum calculated_checksum Value : 0x%02X\r\n", calculated_checksum);
    // printf(" Checksum Pass : %d\r\n", ChecksumTorF);
}

void IOL_StartUp_Seq_Page (uint16_t size)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]
    uint8_t rxdataSize = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
    uint8_t eventdebug = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73bb      	strb	r3, [r7, #14]
    uint8_t Page_Write_ChecksumValue[1] = {0};
 80013ca:	2300      	movs	r3, #0
 80013cc:	733b      	strb	r3, [r7, #12]

    rxdataSize = (uint8_t)size;
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	73fb      	strb	r3, [r7, #15]

    // State = StartUP ,   Channel = Page인지 구분
    if ((stateIOLseq == IOL_StartUp) && (Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]) == IOL_Channel_Page))
 80013d2:	4b2e      	ldr	r3, [pc, #184]	@ (800148c <IOL_StartUp_Seq_Page+0xd4>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d153      	bne.n	8001482 <IOL_StartUp_Seq_Page+0xca>
 80013da:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <IOL_StartUp_Seq_Page+0xd8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f880 	bl	80014e4 <Print_MC_CommunicationChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d14b      	bne.n	8001482 <IOL_StartUp_Seq_Page+0xca>
    {
        // R/W   Read 체크
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 80013ea:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <IOL_StartUp_Seq_Page+0xd8>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f85a 	bl	80014a8 <Decode_MC_ReadWrite>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d123      	bne.n	8001442 <IOL_StartUp_Seq_Page+0x8a>
        {
            IOL_ENABLE;
 80013fa:	2201      	movs	r2, #1
 80013fc:	2140      	movs	r1, #64	@ 0x40
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f000 ff1b 	bl	800223c <HAL_GPIO_WritePin>
            IOL_Page1_Packet[0] = IOL_Page1_SeqValue[Page1_seq++];
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <IOL_StartUp_Seq_Page+0xdc>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	b2d1      	uxtb	r1, r2
 800140e:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <IOL_StartUp_Seq_Page+0xdc>)
 8001410:	7011      	strb	r1, [r2, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <IOL_StartUp_Seq_Page+0xe0>)
 8001416:	5c9a      	ldrb	r2, [r3, r2]
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <IOL_StartUp_Seq_Page+0xe4>)
 800141a:	701a      	strb	r2, [r3, #0]

            // IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(IOL_Page1_Packet[0], 1);
            IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(&IOL_Page1_Packet[0], 1);
 800141c:	2101      	movs	r1, #1
 800141e:	481f      	ldr	r0, [pc, #124]	@ (800149c <IOL_StartUp_Seq_Page+0xe4>)
 8001420:	f7ff ff38 	bl	8001294 <Decode_CKS_GetChecksum>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <IOL_StartUp_Seq_Page+0xe4>)
 800142a:	705a      	strb	r2, [r3, #1]

            if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) IOL_Page1_Packet, 2) != HAL_OK)
 800142c:	2202      	movs	r2, #2
 800142e:	491b      	ldr	r1, [pc, #108]	@ (800149c <IOL_StartUp_Seq_Page+0xe4>)
 8001430:	481b      	ldr	r0, [pc, #108]	@ (80014a0 <IOL_StartUp_Seq_Page+0xe8>)
 8001432:	f004 f9af 	bl	8005794 <HAL_UART_Transmit_IT>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d022      	beq.n	8001482 <IOL_StartUp_Seq_Page+0xca>
            {
                Error_Handler();
 800143c:	f7ff fa03 	bl	8000846 <Error_Handler>
    //     HAL_UART_DMAStop(&huart1);
        
    //     HAL_NVIC_DisableIRQ(USART1_IRQn);
    // }
    // // mseq[mseq_cnt].Master_checksum = Decode_CKT_GetChecksum((uint8_t *) uart2_rx_IDLE_buf, (rxdataSize - mseq[mseq_cnt + cks_offset].Device_octet_cnt));
}
 8001440:	e01f      	b.n	8001482 <IOL_StartUp_Seq_Page+0xca>
        else if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Write)
 8001442:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <IOL_StartUp_Seq_Page+0xd8>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f82e 	bl	80014a8 <Decode_MC_ReadWrite>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d117      	bne.n	8001482 <IOL_StartUp_Seq_Page+0xca>
            IOL_ENABLE;
 8001452:	2201      	movs	r2, #1
 8001454:	2140      	movs	r1, #64	@ 0x40
 8001456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145a:	f000 feef 	bl	800223c <HAL_GPIO_WritePin>
            Page_Write_ChecksumValue[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 800145e:	2100      	movs	r1, #0
 8001460:	4810      	ldr	r0, [pc, #64]	@ (80014a4 <IOL_StartUp_Seq_Page+0xec>)
 8001462:	f7ff ff17 	bl	8001294 <Decode_CKS_GetChecksum>
 8001466:	4603      	mov	r3, r0
 8001468:	733b      	strb	r3, [r7, #12]
            if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) Page_Write_ChecksumValue, 1) != HAL_OK)
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2201      	movs	r2, #1
 8001470:	4619      	mov	r1, r3
 8001472:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <IOL_StartUp_Seq_Page+0xe8>)
 8001474:	f004 f98e 	bl	8005794 <HAL_UART_Transmit_IT>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <IOL_StartUp_Seq_Page+0xca>
                Error_Handler();
 800147e:	f7ff f9e2 	bl	8000846 <Error_Handler>
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000bab 	.word	0x20000bab
 8001490:	20000b44 	.word	0x20000b44
 8001494:	20000baa 	.word	0x20000baa
 8001498:	20000004 	.word	0x20000004
 800149c:	20000ba8 	.word	0x20000ba8
 80014a0:	20000260 	.word	0x20000260
 80014a4:	20000011 	.word	0x20000011

080014a8 <Decode_MC_ReadWrite>:
    #endif
  }
}

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	09db      	lsrs	r3, r3, #7
 80014be:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <Decode_MC_ReadWrite+0x24>
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d002      	beq.n	80014d0 <Decode_MC_ReadWrite+0x28>
 80014ca:	e003      	b.n	80014d4 <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e002      	b.n	80014d6 <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 80014d4:	2358      	movs	r3, #88	@ 0x58
    }
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <Print_MC_CommunicationChannel>:

//     return MCdata & 0x03;
// }

static uint8_t Print_MC_CommunicationChannel (uint8_t Data)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	095b      	lsrs	r3, r3, #5
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d813      	bhi.n	8001530 <Print_MC_CommunicationChannel+0x4c>
 8001508:	a201      	add	r2, pc, #4	@ (adr r2, 8001510 <Print_MC_CommunicationChannel+0x2c>)
 800150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150e:	bf00      	nop
 8001510:	08001521 	.word	0x08001521
 8001514:	08001525 	.word	0x08001525
 8001518:	08001529 	.word	0x08001529
 800151c:	0800152d 	.word	0x0800152d
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8001520:	2300      	movs	r3, #0
 8001522:	e005      	b.n	8001530 <Print_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 8001524:	2301      	movs	r3, #1
 8001526:	e003      	b.n	8001530 <Print_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 8001528:	2302      	movs	r3, #2
 800152a:	e001      	b.n	8001530 <Print_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 800152c:	2303      	movs	r3, #3
 800152e:	e7ff      	b.n	8001530 <Print_MC_CommunicationChannel+0x4c>
    }
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800153c:	480d      	ldr	r0, [pc, #52]	@ (8001574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800153e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001540:	f7ff fca4 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <LoopForever+0x6>)
  ldr r1, =_edata
 8001546:	490d      	ldr	r1, [pc, #52]	@ (800157c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001548:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <LoopForever+0xe>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800155c:	4c0a      	ldr	r4, [pc, #40]	@ (8001588 <LoopForever+0x16>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800156a:	f00a f97d 	bl	800b868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800156e:	f7ff f8e1 	bl	8000734 <main>

08001572 <LoopForever>:

LoopForever:
    b LoopForever
 8001572:	e7fe      	b.n	8001572 <LoopForever>
  ldr   r0, =_estack
 8001574:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001580:	0800c588 	.word	0x0800c588
  ldr r2, =_sbss
 8001584:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001588:	20001ecc 	.word	0x20001ecc

0800158c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC1_2_IRQHandler>

0800158e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f95b 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159e:	200f      	movs	r0, #15
 80015a0:	f000 f80e 	bl	80015c0 <HAL_InitTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	71fb      	strb	r3, [r7, #7]
 80015ae:	e001      	b.n	80015b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015b0:	f7ff fa76 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b4:	79fb      	ldrb	r3, [r7, #7]

}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_InitTick+0x68>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d022      	beq.n	800161a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015d4:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_InitTick+0x6c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_InitTick+0x68>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f966 	bl	80018ba <HAL_SYSTICK_Config>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10f      	bne.n	8001614 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	d809      	bhi.n	800160e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fa:	2200      	movs	r2, #0
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001602:	f000 f932 	bl	800186a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <HAL_InitTick+0x70>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e007      	b.n	800161e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e004      	b.n	800161e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e001      	b.n	800161e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000018 	.word	0x20000018
 800162c:	20000000 	.word	0x20000000
 8001630:	20000014 	.word	0x20000014

08001634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <HAL_IncTick+0x1c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_IncTick+0x20>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4413      	add	r3, r2
 8001642:	4a03      	ldr	r2, [pc, #12]	@ (8001650 <HAL_IncTick+0x1c>)
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000bac 	.word	0x20000bac
 8001654:	20000018 	.word	0x20000018

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000bac 	.word	0x20000bac

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d004      	beq.n	8001694 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <HAL_Delay+0x40>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001694:	bf00      	nop
 8001696:	f7ff ffdf 	bl	8001658 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d8f7      	bhi.n	8001696 <HAL_Delay+0x26>
  {
  }
}
 80016a6:	bf00      	nop
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000018 	.word	0x20000018

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	@ (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	@ 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f7ff ff8e 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff29 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff40 	bl	80016fc <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff90 	bl	80017a8 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5f 	bl	8001754 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff33 	bl	8001718 <__NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa4 	bl	8001810 <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e08d      	b.n	8001a02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b47      	ldr	r3, [pc, #284]	@ (8001a0c <HAL_DMA_Init+0x138>)
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d80f      	bhi.n	8001912 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b45      	ldr	r3, [pc, #276]	@ (8001a10 <HAL_DMA_Init+0x13c>)
 80018fa:	4413      	add	r3, r2
 80018fc:	4a45      	ldr	r2, [pc, #276]	@ (8001a14 <HAL_DMA_Init+0x140>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	009a      	lsls	r2, r3, #2
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a42      	ldr	r2, [pc, #264]	@ (8001a18 <HAL_DMA_Init+0x144>)
 800190e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001910:	e00e      	b.n	8001930 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	4b40      	ldr	r3, [pc, #256]	@ (8001a1c <HAL_DMA_Init+0x148>)
 800191a:	4413      	add	r3, r2
 800191c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a14 <HAL_DMA_Init+0x140>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	009a      	lsls	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a20 <HAL_DMA_Init+0x14c>)
 800192e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800194a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fa76 	bl	8001e74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001990:	d102      	bne.n	8001998 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d010      	beq.n	80019d8 <HAL_DMA_Init+0x104>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d80c      	bhi.n	80019d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fa96 	bl	8001ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	e008      	b.n	80019ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40020407 	.word	0x40020407
 8001a10:	bffdfff8 	.word	0xbffdfff8
 8001a14:	cccccccd 	.word	0xcccccccd
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	bffdfbf8 	.word	0xbffdfbf8
 8001a20:	40020400 	.word	0x40020400

08001a24 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_DMA_Start_IT+0x20>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e066      	b.n	8001b12 <HAL_DMA_Start_IT+0xee>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d155      	bne.n	8001b04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f9bb 	bl	8001df8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 020e 	orr.w	r2, r2, #14
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e00f      	b.n	8001abc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0204 	bic.w	r2, r2, #4
 8001aaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 020a 	orr.w	r2, r2, #10
 8001aba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ad8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001af0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0201 	orr.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e005      	b.n	8001b10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d005      	beq.n	8001b3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2204      	movs	r2, #4
 8001b36:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e037      	b.n	8001bae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 020e 	bic.w	r2, r2, #14
 8001b4c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b5c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f003 021f 	and.w	r2, r3, #31
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b8a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00c      	beq.n	8001bae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ba2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d00d      	beq.n	8001c00 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2204      	movs	r2, #4
 8001be8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e047      	b.n	8001c90 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 020e 	bic.w	r2, r2, #14
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c42:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00c      	beq.n	8001c70 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
    }
  }
  return status;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2204      	movs	r2, #4
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d026      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x7a>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d021      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d107      	bne.n	8001cee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0204 	bic.w	r2, r2, #4
 8001cec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	f003 021f 	and.w	r2, r3, #31
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d071      	beq.n	8001dee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d12:	e06c      	b.n	8001dee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d02e      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d029      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10b      	bne.n	8001d58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 020a 	bic.w	r2, r2, #10
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	2102      	movs	r1, #2
 8001d66:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d038      	beq.n	8001dee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d84:	e033      	b.n	8001dee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2208      	movs	r2, #8
 8001d90:	409a      	lsls	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d02a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d025      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 020e 	bic.w	r2, r2, #14
 8001db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d004      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
}
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f003 021f 	and.w	r2, r3, #31
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f202 	lsl.w	r2, r1, r2
 8001e34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d108      	bne.n	8001e58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e56:	e007      	b.n	8001e68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	60da      	str	r2, [r3, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d802      	bhi.n	8001e8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001e88:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e001      	b.n	8001e92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e90:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3b08      	subs	r3, #8
 8001e9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8001eec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ebe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40020407 	.word	0x40020407
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020820 	.word	0x40020820
 8001ee8:	cccccccd 	.word	0xcccccccd
 8001eec:	40020880 	.word	0x40020880

08001ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a08      	ldr	r2, [pc, #32]	@ (8001f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f12:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	1000823f 	.word	0x1000823f
 8001f34:	40020940 	.word	0x40020940

08001f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f46:	e15a      	b.n	80021fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 814c 	beq.w	80021f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d005      	beq.n	8001f78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d130      	bne.n	8001fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fae:	2201      	movs	r2, #1
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	f003 0201 	and.w	r2, r3, #1
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d017      	beq.n	8002016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d123      	bne.n	800206a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	6939      	ldr	r1, [r7, #16]
 8002066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0203 	and.w	r2, r3, #3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80a6 	beq.w	80021f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ac:	4b5b      	ldr	r3, [pc, #364]	@ (800221c <HAL_GPIO_Init+0x2e4>)
 80020ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b0:	4a5a      	ldr	r2, [pc, #360]	@ (800221c <HAL_GPIO_Init+0x2e4>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80020b8:	4b58      	ldr	r3, [pc, #352]	@ (800221c <HAL_GPIO_Init+0x2e4>)
 80020ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c4:	4a56      	ldr	r2, [pc, #344]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020ee:	d01f      	beq.n	8002130 <HAL_GPIO_Init+0x1f8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002224 <HAL_GPIO_Init+0x2ec>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d019      	beq.n	800212c <HAL_GPIO_Init+0x1f4>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a4b      	ldr	r2, [pc, #300]	@ (8002228 <HAL_GPIO_Init+0x2f0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d013      	beq.n	8002128 <HAL_GPIO_Init+0x1f0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a4a      	ldr	r2, [pc, #296]	@ (800222c <HAL_GPIO_Init+0x2f4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00d      	beq.n	8002124 <HAL_GPIO_Init+0x1ec>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a49      	ldr	r2, [pc, #292]	@ (8002230 <HAL_GPIO_Init+0x2f8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d007      	beq.n	8002120 <HAL_GPIO_Init+0x1e8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a48      	ldr	r2, [pc, #288]	@ (8002234 <HAL_GPIO_Init+0x2fc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_GPIO_Init+0x1e4>
 8002118:	2305      	movs	r3, #5
 800211a:	e00a      	b.n	8002132 <HAL_GPIO_Init+0x1fa>
 800211c:	2306      	movs	r3, #6
 800211e:	e008      	b.n	8002132 <HAL_GPIO_Init+0x1fa>
 8002120:	2304      	movs	r3, #4
 8002122:	e006      	b.n	8002132 <HAL_GPIO_Init+0x1fa>
 8002124:	2303      	movs	r3, #3
 8002126:	e004      	b.n	8002132 <HAL_GPIO_Init+0x1fa>
 8002128:	2302      	movs	r3, #2
 800212a:	e002      	b.n	8002132 <HAL_GPIO_Init+0x1fa>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_GPIO_Init+0x1fa>
 8002130:	2300      	movs	r3, #0
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	f002 0203 	and.w	r2, r2, #3
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	4093      	lsls	r3, r2
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002142:	4937      	ldr	r1, [pc, #220]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002150:	4b39      	ldr	r3, [pc, #228]	@ (8002238 <HAL_GPIO_Init+0x300>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002174:	4a30      	ldr	r2, [pc, #192]	@ (8002238 <HAL_GPIO_Init+0x300>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800217a:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_GPIO_Init+0x300>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800219e:	4a26      	ldr	r2, [pc, #152]	@ (8002238 <HAL_GPIO_Init+0x300>)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021a4:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_GPIO_Init+0x300>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002238 <HAL_GPIO_Init+0x300>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <HAL_GPIO_Init+0x300>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021f2:	4a11      	ldr	r2, [pc, #68]	@ (8002238 <HAL_GPIO_Init+0x300>)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3301      	adds	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	f47f ae9d 	bne.w	8001f48 <HAL_GPIO_Init+0x10>
  }
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000
 8002220:	40010000 	.word	0x40010000
 8002224:	48000400 	.word	0x48000400
 8002228:	48000800 	.word	0x48000800
 800222c:	48000c00 	.word	0x48000c00
 8002230:	48001000 	.word	0x48001000
 8002234:	48001400 	.word	0x48001400
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002258:	e002      	b.n	8002260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4013      	ands	r3, r2
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43d9      	mvns	r1, r3
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	400b      	ands	r3, r1
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022b6:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f806 	bl	80022d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0c0      	b.n	800247a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d106      	bne.n	8002312 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f008 fd49 	bl	800ada4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2203      	movs	r2, #3
 8002316:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f005 f85f 	bl	80073e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e03e      	b.n	80023a8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3311      	adds	r3, #17
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	3310      	adds	r3, #16
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	3313      	adds	r3, #19
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	3320      	adds	r3, #32
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	3324      	adds	r3, #36	@ 0x24
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	3301      	adds	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	791b      	ldrb	r3, [r3, #4]
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3bb      	bcc.n	800232a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e044      	b.n	8002442 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	3301      	adds	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	791b      	ldrb	r3, [r3, #4]
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	429a      	cmp	r2, r3
 800244a:	d3b5      	bcc.n	80023b8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002458:	f004 ffde 	bl	8007418 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7a9b      	ldrb	r3, [r3, #10]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f001 fc0e 	bl	8003c94 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_PCD_Start+0x16>
 8002494:	2302      	movs	r3, #2
 8002496:	e012      	b.n	80024be <HAL_PCD_Start+0x3c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f004 ff85 	bl	80073b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f006 fd62 	bl	8008f78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f006 fd67 	bl	8008fa6 <USB_ReadInterrupts>
 80024d8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fb06 	bl	8002af6 <PCD_EP_ISR_Handler>

    return;
 80024ea:	e110      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d013      	beq.n	800251e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002508:	b292      	uxth	r2, r2
 800250a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f008 fcd9 	bl	800aec6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002514:	2100      	movs	r1, #0
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8fc 	bl	8002714 <HAL_PCD_SetAddress>

    return;
 800251c:	e0f7      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00c      	beq.n	8002542 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002530:	b29a      	uxth	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800253a:	b292      	uxth	r2, r2
 800253c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002540:	e0e5      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00c      	beq.n	8002566 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800255e:	b292      	uxth	r2, r2
 8002560:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002564:	e0d3      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d034      	beq.n	80025da <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002578:	b29a      	uxth	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0204 	bic.w	r2, r2, #4
 8002582:	b292      	uxth	r2, r2
 8002584:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002590:	b29a      	uxth	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0208 	bic.w	r2, r2, #8
 800259a:	b292      	uxth	r2, r2
 800259c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025b2:	2100      	movs	r1, #0
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f008 fe79 	bl	800b2ac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f008 fcbc 	bl	800af38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025d2:	b292      	uxth	r2, r2
 80025d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025d8:	e099      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d027      	beq.n	8002634 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0208 	orr.w	r2, r2, #8
 80025f6:	b292      	uxth	r2, r2
 80025f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800260e:	b292      	uxth	r2, r2
 8002610:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0204 	orr.w	r2, r2, #4
 8002626:	b292      	uxth	r2, r2
 8002628:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f008 fc69 	bl	800af04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002632:	e06c      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263a:	2b00      	cmp	r3, #0
 800263c:	d040      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002650:	b292      	uxth	r2, r2
 8002652:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d12b      	bne.n	80026b8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0204 	orr.w	r2, r2, #4
 8002672:	b292      	uxth	r2, r2
 8002674:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0208 	orr.w	r2, r2, #8
 800268a:	b292      	uxth	r2, r2
 800268c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026ae:	2101      	movs	r1, #1
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f008 fdfb 	bl	800b2ac <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80026b6:	e02a      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f008 fc23 	bl	800af04 <HAL_PCD_SuspendCallback>
    return;
 80026be:	e026      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00f      	beq.n	80026ea <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026dc:	b292      	uxth	r2, r2
 80026de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f008 fbe1 	bl	800aeaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026e8:	e011      	b.n	800270e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002706:	b292      	uxth	r2, r2
 8002708:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800270c:	bf00      	nop
  }
}
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_PCD_SetAddress+0x1a>
 800272a:	2302      	movs	r3, #2
 800272c:	e012      	b.n	8002754 <HAL_PCD_SetAddress+0x40>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f006 fc03 	bl	8008f50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	461a      	mov	r2, r3
 800276a:	4603      	mov	r3, r0
 800276c:	70fb      	strb	r3, [r7, #3]
 800276e:	460b      	mov	r3, r1
 8002770:	803b      	strh	r3, [r7, #0]
 8002772:	4613      	mov	r3, r2
 8002774:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800277a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da0e      	bge.n	80027a0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 0207 	and.w	r2, r3, #7
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	3310      	adds	r3, #16
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	705a      	strb	r2, [r3, #1]
 800279e:	e00e      	b.n	80027be <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 0207 	and.w	r2, r3, #7
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80027ca:	883b      	ldrh	r3, [r7, #0]
 80027cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	78ba      	ldrb	r2, [r7, #2]
 80027d8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027da:	78bb      	ldrb	r3, [r7, #2]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d102      	bne.n	80027e6 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_PCD_EP_Open+0x98>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e00e      	b.n	8002812 <HAL_PCD_EP_Open+0xb6>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	4618      	mov	r0, r3
 8002804:	f004 fe26 	bl	8007454 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002810:	7afb      	ldrb	r3, [r7, #11]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282a:	2b00      	cmp	r3, #0
 800282c:	da0e      	bge.n	800284c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	f003 0207 	and.w	r2, r3, #7
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	3310      	adds	r3, #16
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	705a      	strb	r2, [r3, #1]
 800284a:	e00e      	b.n	800286a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	f003 0207 	and.w	r2, r3, #7
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_PCD_EP_Close+0x6a>
 8002880:	2302      	movs	r3, #2
 8002882:	e00e      	b.n	80028a2 <HAL_PCD_EP_Close+0x88>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68f9      	ldr	r1, [r7, #12]
 8002892:	4618      	mov	r0, r3
 8002894:	f005 fac6 	bl	8007e24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	460b      	mov	r3, r1
 80028b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ba:	7afb      	ldrb	r3, [r7, #11]
 80028bc:	f003 0207 	and.w	r2, r3, #7
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2200      	movs	r2, #0
 80028e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2200      	movs	r2, #0
 80028e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6979      	ldr	r1, [r7, #20]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f005 fc7e 	bl	80081fe <USB_EPStartXfer>

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	f003 0207 	and.w	r2, r3, #7
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	460b      	mov	r3, r1
 800294a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	f003 0207 	and.w	r2, r3, #7
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	3310      	adds	r3, #16
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2201      	movs	r2, #1
 8002986:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002988:	7afb      	ldrb	r3, [r7, #11]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	b2da      	uxtb	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6979      	ldr	r1, [r7, #20]
 800299a:	4618      	mov	r0, r3
 800299c:	f005 fc2f 	bl	80081fe <USB_EPStartXfer>

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	7912      	ldrb	r2, [r2, #4]
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d901      	bls.n	80029c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e03e      	b.n	8002a46 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	da0e      	bge.n	80029ee <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	f003 0207 	and.w	r2, r3, #7
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	3310      	adds	r3, #16
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	705a      	strb	r2, [r3, #1]
 80029ec:	e00c      	b.n	8002a08 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_PCD_EP_SetStall+0x7e>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e00e      	b.n	8002a46 <HAL_PCD_EP_SetStall+0x9c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68f9      	ldr	r1, [r7, #12]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f006 f990 	bl	8008d5c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	7912      	ldrb	r2, [r2, #4]
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e040      	b.n	8002aee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	da0e      	bge.n	8002a92 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	f003 0207 	and.w	r2, r3, #7
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	3310      	adds	r3, #16
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	705a      	strb	r2, [r3, #1]
 8002a90:	e00e      	b.n	8002ab0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	f003 0207 	and.w	r2, r3, #7
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_PCD_EP_ClrStall+0x82>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e00e      	b.n	8002aee <HAL_PCD_EP_ClrStall+0xa0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68f9      	ldr	r1, [r7, #12]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f006 f98d 	bl	8008dfe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b092      	sub	sp, #72	@ 0x48
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002afe:	e333      	b.n	8003168 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b08:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002b16:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 8108 	bne.w	8002d30 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b20:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d14c      	bne.n	8002bc4 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b3a:	813b      	strh	r3, [r7, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	893b      	ldrh	r3, [r7, #8]
 8002b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3310      	adds	r3, #16
 8002b52:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	441a      	add	r2, r3
 8002b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f008 f972 	bl	800ae76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7b1b      	ldrb	r3, [r3, #12]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 82e5 	beq.w	8003168 <PCD_EP_ISR_Handler+0x672>
 8002b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 82e0 	bne.w	8003168 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7b1b      	ldrb	r3, [r3, #12]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	731a      	strb	r2, [r3, #12]
 8002bc2:	e2d1      	b.n	8003168 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bca:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d032      	beq.n	8002c44 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c04:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c12:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c16:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f006 fa16 	bl	800904a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	817b      	strh	r3, [r7, #10]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	897a      	ldrh	r2, [r7, #10]
 8002c34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f008 f8ed 	bl	800ae1c <HAL_PCD_SetupStageCallback>
 8002c42:	e291      	b.n	8003168 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c44:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f280 828d 	bge.w	8003168 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	81fb      	strh	r3, [r7, #14]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	89fa      	ldrh	r2, [r7, #14]
 8002c64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	4413      	add	r3, r2
 8002c86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d019      	beq.n	8002cd0 <PCD_EP_ISR_Handler+0x1da>
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d015      	beq.n	8002cd0 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002caa:	6959      	ldr	r1, [r3, #20]
 8002cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f006 f9c8 	bl	800904a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	441a      	add	r2, r3
 8002cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f008 f8b8 	bl	800ae40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002cd8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 8242 	bne.w	8003168 <PCD_EP_ISR_Handler+0x672>
 8002ce4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002ce6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002cea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cee:	f000 823b 	beq.w	8003168 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d02:	81bb      	strh	r3, [r7, #12]
 8002d04:	89bb      	ldrh	r3, [r7, #12]
 8002d06:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002d0a:	81bb      	strh	r3, [r7, #12]
 8002d0c:	89bb      	ldrh	r3, [r7, #12]
 8002d0e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d12:	81bb      	strh	r3, [r7, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	89bb      	ldrh	r3, [r7, #12]
 8002d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	8013      	strh	r3, [r2, #0]
 8002d2e:	e21b      	b.n	8003168 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d42:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f280 80f1 	bge.w	8002f2e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d62:	4013      	ands	r3, r2
 8002d64:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002d76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d7a:	b292      	uxth	r2, r2
 8002d7c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d7e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d96:	7b1b      	ldrb	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d123      	bne.n	8002de4 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8002dc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 808b 	beq.w	8002ee4 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd4:	6959      	ldr	r1, [r3, #20]
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd8:	88da      	ldrh	r2, [r3, #6]
 8002dda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002dde:	f006 f934 	bl	800904a <USB_ReadPMA>
 8002de2:	e07f      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de6:	78db      	ldrb	r3, [r3, #3]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d109      	bne.n	8002e00 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002dec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002dee:	461a      	mov	r2, r3
 8002df0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f9c6 	bl	8003184 <HAL_PCD_EP_DB_Receive>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002dfe:	e071      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	441a      	add	r2, r3
 8002e2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d022      	beq.n	8002ea0 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002e82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d02c      	beq.n	8002ee4 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e90:	6959      	ldr	r1, [r3, #20]
 8002e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e94:	891a      	ldrh	r2, [r3, #8]
 8002e96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e9a:	f006 f8d6 	bl	800904a <USB_ReadPMA>
 8002e9e:	e021      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8002ec8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ed6:	6959      	ldr	r1, [r3, #20]
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eda:	895a      	ldrh	r2, [r3, #10]
 8002edc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ee0:	f006 f8b3 	bl	800904a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002eec:	441a      	add	r2, r3
 8002eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ef0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002efa:	441a      	add	r2, r3
 8002efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002efe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <PCD_EP_ISR_Handler+0x41e>
 8002f08:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d206      	bcs.n	8002f22 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f007 ff90 	bl	800ae40 <HAL_PCD_DataOutStageCallback>
 8002f20:	e005      	b.n	8002f2e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f005 f968 	bl	80081fe <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8117 	beq.w	8003168 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f3a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	3310      	adds	r3, #16
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f68:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f88:	78db      	ldrb	r3, [r3, #3]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	f040 80a1 	bne.w	80030d2 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8002f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f98:	7b1b      	ldrb	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8092 	beq.w	80030c4 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fa0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d046      	beq.n	8003038 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d126      	bne.n	8003000 <PCD_EP_ISR_Handler+0x50a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	00da      	lsls	r2, r3, #3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	801a      	strh	r2, [r3, #0]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	801a      	strh	r2, [r3, #0]
 8002ffe:	e061      	b.n	80030c4 <PCD_EP_ISR_Handler+0x5ce>
 8003000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003002:	785b      	ldrb	r3, [r3, #1]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d15d      	bne.n	80030c4 <PCD_EP_ISR_Handler+0x5ce>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	00da      	lsls	r2, r3, #3
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	4413      	add	r3, r2
 800302a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2200      	movs	r2, #0
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	e045      	b.n	80030c4 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800303e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003040:	785b      	ldrb	r3, [r3, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d126      	bne.n	8003094 <PCD_EP_ISR_Handler+0x59e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003054:	b29b      	uxth	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	4413      	add	r3, r2
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
 800305e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	00da      	lsls	r2, r3, #3
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	4413      	add	r3, r2
 8003068:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003078:	b29a      	uxth	r2, r3
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308c:	b29a      	uxth	r2, r3
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	e017      	b.n	80030c4 <PCD_EP_ISR_Handler+0x5ce>
 8003094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d113      	bne.n	80030c4 <PCD_EP_ISR_Handler+0x5ce>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030aa:	4413      	add	r3, r2
 80030ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	00da      	lsls	r2, r3, #3
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b6:	4413      	add	r3, r2
 80030b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c0:	2200      	movs	r2, #0
 80030c2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f007 fed3 	bl	800ae76 <HAL_PCD_DataInStageCallback>
 80030d0:	e04a      	b.n	8003168 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80030d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80030d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d13f      	bne.n	800315c <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003100:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003108:	429a      	cmp	r2, r3
 800310a:	d906      	bls.n	800311a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800310c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003112:	1ad2      	subs	r2, r2, r3
 8003114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003116:	619a      	str	r2, [r3, #24]
 8003118:	e002      	b.n	8003120 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800311a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f007 fea1 	bl	800ae76 <HAL_PCD_DataInStageCallback>
 8003134:	e018      	b.n	8003168 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800313c:	441a      	add	r2, r3
 800313e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003140:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003144:	69da      	ldr	r2, [r3, #28]
 8003146:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003148:	441a      	add	r2, r3
 800314a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800314c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003154:	4618      	mov	r0, r3
 8003156:	f005 f852 	bl	80081fe <USB_EPStartXfer>
 800315a:	e005      	b.n	8003168 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800315c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800315e:	461a      	mov	r2, r3
 8003160:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f917 	bl	8003396 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003170:	b29b      	uxth	r3, r3
 8003172:	b21b      	sxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	f6ff acc3 	blt.w	8002b00 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3748      	adds	r7, #72	@ 0x48
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	4613      	mov	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d07c      	beq.n	8003296 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	4413      	add	r3, r2
 80031b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	8b7b      	ldrh	r3, [r7, #26]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d306      	bcc.n	80031da <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	8b7b      	ldrh	r3, [r7, #26]
 80031d2:	1ad2      	subs	r2, r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	619a      	str	r2, [r3, #24]
 80031d8:	e002      	b.n	80031e0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d123      	bne.n	8003230 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003202:	833b      	strh	r3, [r7, #24]
 8003204:	8b3b      	ldrh	r3, [r7, #24]
 8003206:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800320a:	833b      	strh	r3, [r7, #24]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	8b3b      	ldrh	r3, [r7, #24]
 800321c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003220:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800322c:	b29b      	uxth	r3, r3
 800322e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01f      	beq.n	800327a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003254:	82fb      	strh	r3, [r7, #22]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	441a      	add	r2, r3
 8003264:	8afb      	ldrh	r3, [r7, #22]
 8003266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800326a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800326e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003272:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003276:	b29b      	uxth	r3, r3
 8003278:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800327a:	8b7b      	ldrh	r3, [r7, #26]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8085 	beq.w	800338c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	6959      	ldr	r1, [r3, #20]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	891a      	ldrh	r2, [r3, #8]
 800328e:	8b7b      	ldrh	r3, [r7, #26]
 8003290:	f005 fedb 	bl	800904a <USB_ReadPMA>
 8003294:	e07a      	b.n	800338c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800329e:	b29b      	uxth	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	8b7b      	ldrh	r3, [r7, #26]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d306      	bcc.n	80032d4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	8b7b      	ldrh	r3, [r7, #26]
 80032cc:	1ad2      	subs	r2, r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	619a      	str	r2, [r3, #24]
 80032d2:	e002      	b.n	80032da <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2200      	movs	r2, #0
 80032d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d123      	bne.n	800332a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032fc:	83fb      	strh	r3, [r7, #30]
 80032fe:	8bfb      	ldrh	r3, [r7, #30]
 8003300:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003304:	83fb      	strh	r3, [r7, #30]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	441a      	add	r2, r3
 8003314:	8bfb      	ldrh	r3, [r7, #30]
 8003316:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800331a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800331e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003326:	b29b      	uxth	r3, r3
 8003328:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d11f      	bne.n	8003374 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800334a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334e:	83bb      	strh	r3, [r7, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	441a      	add	r2, r3
 800335e:	8bbb      	ldrh	r3, [r7, #28]
 8003360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800336c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003370:	b29b      	uxth	r3, r3
 8003372:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003374:	8b7b      	ldrh	r3, [r7, #26]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6959      	ldr	r1, [r3, #20]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	895a      	ldrh	r2, [r3, #10]
 8003386:	8b7b      	ldrh	r3, [r7, #26]
 8003388:	f005 fe5f 	bl	800904a <USB_ReadPMA>
    }
  }

  return count;
 800338c:	8b7b      	ldrh	r3, [r7, #26]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b0a6      	sub	sp, #152	@ 0x98
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	4613      	mov	r3, r2
 80033a2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 81f7 	beq.w	800379e <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	4413      	add	r3, r2
 80033ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d907      	bls.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	699a      	ldr	r2, [r3, #24]
 80033e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80033ec:	1ad2      	subs	r2, r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	619a      	str	r2, [r3, #24]
 80033f2:	e002      	b.n	80033fa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2200      	movs	r2, #0
 80033f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 80e1 	bne.w	80035c6 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d126      	bne.n	800345a <HAL_PCD_EP_DB_Transmit+0xc4>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	633b      	str	r3, [r7, #48]	@ 0x30
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800341a:	b29b      	uxth	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	4413      	add	r3, r2
 8003422:	633b      	str	r3, [r7, #48]	@ 0x30
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	00da      	lsls	r2, r3, #3
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	4413      	add	r3, r2
 800342e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800343e:	b29a      	uxth	r2, r3
 8003440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003442:	801a      	strh	r2, [r3, #0]
 8003444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800344e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003452:	b29a      	uxth	r2, r3
 8003454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003456:	801a      	strh	r2, [r3, #0]
 8003458:	e01a      	b.n	8003490 <HAL_PCD_EP_DB_Transmit+0xfa>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	785b      	ldrb	r3, [r3, #1]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d116      	bne.n	8003490 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003470:	b29b      	uxth	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003476:	4413      	add	r3, r2
 8003478:	63bb      	str	r3, [r7, #56]	@ 0x38
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	00da      	lsls	r2, r3, #3
 8003480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003482:	4413      	add	r3, r2
 8003484:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003488:	637b      	str	r3, [r7, #52]	@ 0x34
 800348a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348c:	2200      	movs	r2, #0
 800348e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	785b      	ldrb	r3, [r3, #1]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d126      	bne.n	80034ec <HAL_PCD_EP_DB_Transmit+0x156>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	623b      	str	r3, [r7, #32]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	4413      	add	r3, r2
 80034b4:	623b      	str	r3, [r7, #32]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	00da      	lsls	r2, r3, #3
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	4413      	add	r3, r2
 80034c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	801a      	strh	r2, [r3, #0]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	e017      	b.n	800351c <HAL_PCD_EP_DB_Transmit+0x186>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d113      	bne.n	800351c <HAL_PCD_EP_DB_Transmit+0x186>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003502:	4413      	add	r3, r2
 8003504:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	00da      	lsls	r2, r3, #3
 800350c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350e:	4413      	add	r3, r2
 8003510:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	2200      	movs	r2, #0
 800351a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	78db      	ldrb	r3, [r3, #3]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d123      	bne.n	800356c <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800353a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800353e:	837b      	strh	r3, [r7, #26]
 8003540:	8b7b      	ldrh	r3, [r7, #26]
 8003542:	f083 0320 	eor.w	r3, r3, #32
 8003546:	837b      	strh	r3, [r7, #26]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	441a      	add	r2, r3
 8003556:	8b7b      	ldrh	r3, [r7, #26]
 8003558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800355c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003568:	b29b      	uxth	r3, r3
 800356a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4619      	mov	r1, r3
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f007 fc7f 	bl	800ae76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01f      	beq.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800359c:	833b      	strh	r3, [r7, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	441a      	add	r2, r3
 80035ac:	8b3b      	ldrh	r3, [r7, #24]
 80035ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035be:	b29b      	uxth	r3, r3
 80035c0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e31f      	b.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d021      	beq.n	8003614 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	441a      	add	r2, r3
 80035fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003608:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800360c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003610:	b29b      	uxth	r3, r3
 8003612:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800361a:	2b01      	cmp	r3, #1
 800361c:	f040 82ca 	bne.w	8003bb4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003628:	441a      	add	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003636:	441a      	add	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	429a      	cmp	r2, r3
 8003646:	d309      	bcc.n	800365c <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003654:	1ad2      	subs	r2, r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	621a      	str	r2, [r3, #32]
 800365a:	e015      	b.n	8003688 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003664:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003668:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003672:	e009      	b.n	8003688 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2200      	movs	r2, #0
 8003686:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d15f      	bne.n	8003750 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	643b      	str	r3, [r7, #64]	@ 0x40
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800369e:	b29b      	uxth	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a4:	4413      	add	r3, r2
 80036a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	00da      	lsls	r2, r3, #3
 80036ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b0:	4413      	add	r3, r2
 80036b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c6:	801a      	strh	r2, [r3, #0]
 80036c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_PCD_EP_DB_Transmit+0x34e>
 80036ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	e051      	b.n	8003788 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80036e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80036e8:	d816      	bhi.n	8003718 <HAL_PCD_EP_DB_Transmit+0x382>
 80036ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80036f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_PCD_EP_DB_Transmit+0x36a>
 80036fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036fc:	3301      	adds	r3, #1
 80036fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29a      	uxth	r2, r3
 8003706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003708:	b29b      	uxth	r3, r3
 800370a:	029b      	lsls	r3, r3, #10
 800370c:	b29b      	uxth	r3, r3
 800370e:	4313      	orrs	r3, r2
 8003710:	b29a      	uxth	r2, r3
 8003712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	e037      	b.n	8003788 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003718:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	653b      	str	r3, [r7, #80]	@ 0x50
 800371e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <HAL_PCD_EP_DB_Transmit+0x398>
 8003728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800372a:	3b01      	subs	r3, #1
 800372c:	653b      	str	r3, [r7, #80]	@ 0x50
 800372e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29a      	uxth	r2, r3
 8003734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003736:	b29b      	uxth	r3, r3
 8003738:	029b      	lsls	r3, r3, #10
 800373a:	b29b      	uxth	r3, r3
 800373c:	4313      	orrs	r3, r2
 800373e:	b29b      	uxth	r3, r3
 8003740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003748:	b29a      	uxth	r2, r3
 800374a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374c:	801a      	strh	r2, [r3, #0]
 800374e:	e01b      	b.n	8003788 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d117      	bne.n	8003788 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003766:	b29b      	uxth	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800376c:	4413      	add	r3, r2
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	00da      	lsls	r2, r3, #3
 8003776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003778:	4413      	add	r3, r2
 800377a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800377e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003780:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003782:	b29a      	uxth	r2, r3
 8003784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003786:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6959      	ldr	r1, [r3, #20]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	891a      	ldrh	r2, [r3, #8]
 8003794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003796:	b29b      	uxth	r3, r3
 8003798:	f005 fc15 	bl	8008fc6 <USB_WritePMA>
 800379c:	e20a      	b.n	8003bb4 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d307      	bcc.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	619a      	str	r2, [r3, #24]
 80037e0:	e002      	b.n	80037e8 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f040 80f6 	bne.w	80039de <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d126      	bne.n	8003848 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003808:	b29b      	uxth	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800380e:	4413      	add	r3, r2
 8003810:	677b      	str	r3, [r7, #116]	@ 0x74
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	00da      	lsls	r2, r3, #3
 8003818:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800381a:	4413      	add	r3, r2
 800381c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003820:	673b      	str	r3, [r7, #112]	@ 0x70
 8003822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800382c:	b29a      	uxth	r2, r3
 800382e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003840:	b29a      	uxth	r2, r3
 8003842:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003844:	801a      	strh	r2, [r3, #0]
 8003846:	e01a      	b.n	800387e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d116      	bne.n	800387e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800385e:	b29b      	uxth	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003864:	4413      	add	r3, r2
 8003866:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	00da      	lsls	r2, r3, #3
 800386e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003870:	4413      	add	r3, r2
 8003872:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003876:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003878:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800387a:	2200      	movs	r2, #0
 800387c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d12f      	bne.n	80038ee <HAL_PCD_EP_DB_Transmit+0x558>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038a6:	4413      	add	r3, r2
 80038a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	00da      	lsls	r2, r3, #3
 80038b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038b6:	4413      	add	r3, r2
 80038b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038d2:	801a      	strh	r2, [r3, #0]
 80038d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	e01c      	b.n	8003928 <HAL_PCD_EP_DB_Transmit+0x592>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d118      	bne.n	8003928 <HAL_PCD_EP_DB_Transmit+0x592>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003906:	4413      	add	r3, r2
 8003908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	00da      	lsls	r2, r3, #3
 8003912:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003916:	4413      	add	r3, r2
 8003918:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800391c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003920:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003924:	2200      	movs	r2, #0
 8003926:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	78db      	ldrb	r3, [r3, #3]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d127      	bne.n	8003980 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b29b      	uxth	r3, r3
 8003942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800394a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800394e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003952:	f083 0320 	eor.w	r3, r3, #32
 8003956:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800396c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397c:	b29b      	uxth	r3, r3
 800397e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	4619      	mov	r1, r3
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f007 fa75 	bl	800ae76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d121      	bne.n	80039da <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039b0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80039c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e113      	b.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d121      	bne.n	8003a2c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a02:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	f040 80be 	bne.w	8003bb4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a40:	441a      	add	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a4e:	441a      	add	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6a1a      	ldr	r2, [r3, #32]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d309      	bcc.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	6a1a      	ldr	r2, [r3, #32]
 8003a6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a6c:	1ad2      	subs	r2, r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	621a      	str	r2, [r3, #32]
 8003a72:	e015      	b.n	8003aa0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d107      	bne.n	8003a8c <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003a7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a80:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a8a:	e009      	b.n	8003aa0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d15f      	bne.n	8003b6e <HAL_PCD_EP_DB_Transmit+0x7d8>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ac2:	4413      	add	r3, r2
 8003ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00da      	lsls	r2, r3, #3
 8003acc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ace:	4413      	add	r3, r2
 8003ad0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ad4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x76c>
 8003aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	e04e      	b.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b04:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b06:	d816      	bhi.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003b08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x788>
 8003b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	029b      	lsls	r3, r3, #10
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b32:	801a      	strh	r2, [r3, #0]
 8003b34:	e034      	b.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003b36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	029b      	lsls	r3, r3, #10
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	e018      	b.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d114      	bne.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b84:	4413      	add	r3, r2
 8003b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	00da      	lsls	r2, r3, #3
 8003b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b9e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6959      	ldr	r1, [r3, #20]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	895a      	ldrh	r2, [r3, #10]
 8003bac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f005 fa09 	bl	8008fc6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bce:	82fb      	strh	r3, [r7, #22]
 8003bd0:	8afb      	ldrh	r3, [r7, #22]
 8003bd2:	f083 0310 	eor.w	r3, r3, #16
 8003bd6:	82fb      	strh	r3, [r7, #22]
 8003bd8:	8afb      	ldrh	r3, [r7, #22]
 8003bda:	f083 0320 	eor.w	r3, r3, #32
 8003bde:	82fb      	strh	r3, [r7, #22]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	8afb      	ldrh	r3, [r7, #22]
 8003bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3798      	adds	r7, #152	@ 0x98
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b087      	sub	sp, #28
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	817b      	strh	r3, [r7, #10]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c20:	897b      	ldrh	r3, [r7, #10]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00b      	beq.n	8003c44 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2c:	897b      	ldrh	r3, [r7, #10]
 8003c2e:	f003 0207 	and.w	r2, r3, #7
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	e009      	b.n	8003c58 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c44:	897a      	ldrh	r2, [r7, #10]
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4413      	add	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c58:	893b      	ldrh	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2200      	movs	r2, #0
 8003c62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	80da      	strh	r2, [r3, #6]
 8003c6c:	e00b      	b.n	8003c86 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2201      	movs	r2, #1
 8003c72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f043 0302 	orr.w	r3, r3, #2
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d141      	bne.n	8003d7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d02:	d131      	bne.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d04:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d0a:	4a46      	ldr	r2, [pc, #280]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d14:	4b43      	ldr	r3, [pc, #268]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d1c:	4a41      	ldr	r2, [pc, #260]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d24:	4b40      	ldr	r3, [pc, #256]	@ (8003e28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2232      	movs	r2, #50	@ 0x32
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	0c9b      	lsrs	r3, r3, #18
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d3a:	e002      	b.n	8003d42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d42:	4b38      	ldr	r3, [pc, #224]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d4e:	d102      	bne.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f2      	bne.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d56:	4b33      	ldr	r3, [pc, #204]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d62:	d158      	bne.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e057      	b.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d68:	4b2e      	ldr	r3, [pc, #184]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d78:	e04d      	b.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d80:	d141      	bne.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d82:	4b28      	ldr	r3, [pc, #160]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d8e:	d131      	bne.n	8003df4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d90:	4b24      	ldr	r3, [pc, #144]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d96:	4a23      	ldr	r2, [pc, #140]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da0:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003da8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003db0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2232      	movs	r2, #50	@ 0x32
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	4a1c      	ldr	r2, [pc, #112]	@ (8003e2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	0c9b      	lsrs	r3, r3, #18
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dc6:	e002      	b.n	8003dce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dce:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dda:	d102      	bne.n	8003de2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f2      	bne.n	8003dc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003de2:	4b10      	ldr	r3, [pc, #64]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dee:	d112      	bne.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e011      	b.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003df4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e04:	e007      	b.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e06:	4b07      	ldr	r3, [pc, #28]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e0e:	4a05      	ldr	r2, [pc, #20]	@ (8003e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40007000 	.word	0x40007000
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	431bde83 	.word	0x431bde83

08003e30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e34:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a04      	ldr	r2, [pc, #16]	@ (8003e4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e3e:	6093      	str	r3, [r2, #8]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40007000 	.word	0x40007000

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e2fe      	b.n	8004460 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d075      	beq.n	8003f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e6e:	4b97      	ldr	r3, [pc, #604]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e78:	4b94      	ldr	r3, [pc, #592]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b0c      	cmp	r3, #12
 8003e86:	d102      	bne.n	8003e8e <HAL_RCC_OscConfig+0x3e>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d002      	beq.n	8003e94 <HAL_RCC_OscConfig+0x44>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d10b      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	4b8d      	ldr	r3, [pc, #564]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05b      	beq.n	8003f58 <HAL_RCC_OscConfig+0x108>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d157      	bne.n	8003f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e2d9      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x74>
 8003eb6:	4b85      	ldr	r3, [pc, #532]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a84      	ldr	r2, [pc, #528]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x98>
 8003ece:	4b7f      	ldr	r3, [pc, #508]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b7c      	ldr	r3, [pc, #496]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7b      	ldr	r2, [pc, #492]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	4b78      	ldr	r3, [pc, #480]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a77      	ldr	r2, [pc, #476]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b75      	ldr	r3, [pc, #468]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a74      	ldr	r2, [pc, #464]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fba6 	bl	8001658 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd fba2 	bl	8001658 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	@ 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e29e      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f22:	4b6a      	ldr	r3, [pc, #424]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xc0>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd fb92 	bl	8001658 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd fb8e 	bl	8001658 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	@ 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e28a      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4a:	4b60      	ldr	r3, [pc, #384]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0xe8>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d075      	beq.n	8004052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f66:	4b59      	ldr	r3, [pc, #356]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f70:	4b56      	ldr	r3, [pc, #344]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b0c      	cmp	r3, #12
 8003f7e:	d102      	bne.n	8003f86 <HAL_RCC_OscConfig+0x136>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d002      	beq.n	8003f8c <HAL_RCC_OscConfig+0x13c>
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d11f      	bne.n	8003fcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f8c:	4b4f      	ldr	r3, [pc, #316]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x154>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e25d      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	4946      	ldr	r1, [pc, #280]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fb8:	4b45      	ldr	r3, [pc, #276]	@ (80040d0 <HAL_RCC_OscConfig+0x280>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fd faff 	bl	80015c0 <HAL_InitTick>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d043      	beq.n	8004050 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e249      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d023      	beq.n	800401c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fb3a 	bl	8001658 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe8:	f7fd fb36 	bl	8001658 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e232      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffa:	4b34      	ldr	r3, [pc, #208]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004006:	4b31      	ldr	r3, [pc, #196]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	492d      	ldr	r1, [pc, #180]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004016:	4313      	orrs	r3, r2
 8004018:	604b      	str	r3, [r1, #4]
 800401a:	e01a      	b.n	8004052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401c:	4b2b      	ldr	r3, [pc, #172]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2a      	ldr	r2, [pc, #168]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004022:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd fb16 	bl	8001658 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004030:	f7fd fb12 	bl	8001658 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e20e      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004042:	4b22      	ldr	r3, [pc, #136]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x1e0>
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004050:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d041      	beq.n	80040e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01c      	beq.n	80040a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004066:	4b19      	ldr	r3, [pc, #100]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406c:	4a17      	ldr	r2, [pc, #92]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fd faef 	bl	8001658 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407e:	f7fd faeb 	bl	8001658 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e1e7      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004090:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ef      	beq.n	800407e <HAL_RCC_OscConfig+0x22e>
 800409e:	e020      	b.n	80040e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a0:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 80040a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a6:	4a09      	ldr	r2, [pc, #36]	@ (80040cc <HAL_RCC_OscConfig+0x27c>)
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fd fad2 	bl	8001658 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b6:	e00d      	b.n	80040d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fd face 	bl	8001658 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d906      	bls.n	80040d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e1ca      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1ea      	bne.n	80040b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80a6 	beq.w	800423c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f0:	2300      	movs	r3, #0
 80040f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040f4:	4b84      	ldr	r3, [pc, #528]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_OscConfig+0x2b4>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x2b6>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410a:	4b7f      	ldr	r3, [pc, #508]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410e:	4a7e      	ldr	r2, [pc, #504]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004114:	6593      	str	r3, [r2, #88]	@ 0x58
 8004116:	4b7c      	ldr	r3, [pc, #496]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004122:	2301      	movs	r3, #1
 8004124:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004126:	4b79      	ldr	r3, [pc, #484]	@ (800430c <HAL_RCC_OscConfig+0x4bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d118      	bne.n	8004164 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004132:	4b76      	ldr	r3, [pc, #472]	@ (800430c <HAL_RCC_OscConfig+0x4bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a75      	ldr	r2, [pc, #468]	@ (800430c <HAL_RCC_OscConfig+0x4bc>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800413c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413e:	f7fd fa8b 	bl	8001658 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004146:	f7fd fa87 	bl	8001658 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e183      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004158:	4b6c      	ldr	r3, [pc, #432]	@ (800430c <HAL_RCC_OscConfig+0x4bc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d108      	bne.n	800417e <HAL_RCC_OscConfig+0x32e>
 800416c:	4b66      	ldr	r3, [pc, #408]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a65      	ldr	r2, [pc, #404]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800417c:	e024      	b.n	80041c8 <HAL_RCC_OscConfig+0x378>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b05      	cmp	r3, #5
 8004184:	d110      	bne.n	80041a8 <HAL_RCC_OscConfig+0x358>
 8004186:	4b60      	ldr	r3, [pc, #384]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418c:	4a5e      	ldr	r2, [pc, #376]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800418e:	f043 0304 	orr.w	r3, r3, #4
 8004192:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004196:	4b5c      	ldr	r3, [pc, #368]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419c:	4a5a      	ldr	r2, [pc, #360]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041a6:	e00f      	b.n	80041c8 <HAL_RCC_OscConfig+0x378>
 80041a8:	4b57      	ldr	r3, [pc, #348]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	4a56      	ldr	r2, [pc, #344]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041b8:	4b53      	ldr	r3, [pc, #332]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041be:	4a52      	ldr	r2, [pc, #328]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80041c0:	f023 0304 	bic.w	r3, r3, #4
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d016      	beq.n	80041fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fd fa42 	bl	8001658 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fd fa3e 	bl	8001658 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e138      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ee:	4b46      	ldr	r3, [pc, #280]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0ed      	beq.n	80041d8 <HAL_RCC_OscConfig+0x388>
 80041fc:	e015      	b.n	800422a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fe:	f7fd fa2b 	bl	8001658 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004204:	e00a      	b.n	800421c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fd fa27 	bl	8001658 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e121      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800421c:	4b3a      	ldr	r3, [pc, #232]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1ed      	bne.n	8004206 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004230:	4b35      	ldr	r3, [pc, #212]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004234:	4a34      	ldr	r2, [pc, #208]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d03c      	beq.n	80042c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01c      	beq.n	800428a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004250:	4b2d      	ldr	r3, [pc, #180]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004252:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004256:	4a2c      	ldr	r2, [pc, #176]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fd f9fa 	bl	8001658 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004268:	f7fd f9f6 	bl	8001658 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0f2      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800427a:	4b23      	ldr	r3, [pc, #140]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ef      	beq.n	8004268 <HAL_RCC_OscConfig+0x418>
 8004288:	e01b      	b.n	80042c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800428a:	4b1f      	ldr	r3, [pc, #124]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 800428c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004290:	4a1d      	ldr	r2, [pc, #116]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fd f9dd 	bl	8001658 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a2:	f7fd f9d9 	bl	8001658 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0d5      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b4:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80042b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ef      	bne.n	80042a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80c9 	beq.w	800445e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	f000 8083 	beq.w	80043e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d15e      	bne.n	80043a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <HAL_RCC_OscConfig+0x4b8>)
 80042e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fd f9b3 	bl	8001658 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f4:	e00c      	b.n	8004310 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd f9af 	bl	8001658 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d905      	bls.n	8004310 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e0ab      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004310:	4b55      	ldr	r3, [pc, #340]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ec      	bne.n	80042f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800431c:	4b52      	ldr	r3, [pc, #328]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	4b52      	ldr	r3, [pc, #328]	@ (800446c <HAL_RCC_OscConfig+0x61c>)
 8004322:	4013      	ands	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6a11      	ldr	r1, [r2, #32]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800432c:	3a01      	subs	r2, #1
 800432e:	0112      	lsls	r2, r2, #4
 8004330:	4311      	orrs	r1, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004336:	0212      	lsls	r2, r2, #8
 8004338:	4311      	orrs	r1, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800433e:	0852      	lsrs	r2, r2, #1
 8004340:	3a01      	subs	r2, #1
 8004342:	0552      	lsls	r2, r2, #21
 8004344:	4311      	orrs	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800434a:	0852      	lsrs	r2, r2, #1
 800434c:	3a01      	subs	r2, #1
 800434e:	0652      	lsls	r2, r2, #25
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004356:	06d2      	lsls	r2, r2, #27
 8004358:	430a      	orrs	r2, r1
 800435a:	4943      	ldr	r1, [pc, #268]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 800435c:	4313      	orrs	r3, r2
 800435e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004360:	4b41      	ldr	r3, [pc, #260]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a40      	ldr	r2, [pc, #256]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 8004366:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800436a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800436c:	4b3e      	ldr	r3, [pc, #248]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a3d      	ldr	r2, [pc, #244]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 8004372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004376:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd f96e 	bl	8001658 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004380:	f7fd f96a 	bl	8001658 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e066      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004392:	4b35      	ldr	r3, [pc, #212]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0x530>
 800439e:	e05e      	b.n	800445e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a0:	4b31      	ldr	r3, [pc, #196]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a30      	ldr	r2, [pc, #192]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 80043a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fd f954 	bl	8001658 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fd f950 	bl	8001658 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e04c      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c6:	4b28      	ldr	r3, [pc, #160]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043d2:	4b25      	ldr	r3, [pc, #148]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	4924      	ldr	r1, [pc, #144]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 80043d8:	4b25      	ldr	r3, [pc, #148]	@ (8004470 <HAL_RCC_OscConfig+0x620>)
 80043da:	4013      	ands	r3, r2
 80043dc:	60cb      	str	r3, [r1, #12]
 80043de:	e03e      	b.n	800445e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e039      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004468 <HAL_RCC_OscConfig+0x618>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f003 0203 	and.w	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d12c      	bne.n	800445a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	3b01      	subs	r3, #1
 800440c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d123      	bne.n	800445a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d11b      	bne.n	800445a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d113      	bne.n	800445a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	3b01      	subs	r3, #1
 8004440:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d109      	bne.n	800445a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	3b01      	subs	r3, #1
 8004454:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d001      	beq.n	800445e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3720      	adds	r7, #32
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	019f800c 	.word	0x019f800c
 8004470:	feeefffc 	.word	0xfeeefffc

08004474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e11e      	b.n	80046ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800448c:	4b91      	ldr	r3, [pc, #580]	@ (80046d4 <HAL_RCC_ClockConfig+0x260>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d910      	bls.n	80044bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449a:	4b8e      	ldr	r3, [pc, #568]	@ (80046d4 <HAL_RCC_ClockConfig+0x260>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 020f 	bic.w	r2, r3, #15
 80044a2:	498c      	ldr	r1, [pc, #560]	@ (80046d4 <HAL_RCC_ClockConfig+0x260>)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044aa:	4b8a      	ldr	r3, [pc, #552]	@ (80046d4 <HAL_RCC_ClockConfig+0x260>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e106      	b.n	80046ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d073      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d129      	bne.n	8004524 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d0:	4b81      	ldr	r3, [pc, #516]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0f4      	b.n	80046ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044e0:	f000 f99e 	bl	8004820 <RCC_GetSysClockFreqFromPLLSource>
 80044e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4a7c      	ldr	r2, [pc, #496]	@ (80046dc <HAL_RCC_ClockConfig+0x268>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d93f      	bls.n	800456e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044ee:	4b7a      	ldr	r3, [pc, #488]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004502:	2b00      	cmp	r3, #0
 8004504:	d033      	beq.n	800456e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800450a:	2b00      	cmp	r3, #0
 800450c:	d12f      	bne.n	800456e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800450e:	4b72      	ldr	r3, [pc, #456]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004516:	4a70      	ldr	r2, [pc, #448]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 8004518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800451e:	2380      	movs	r3, #128	@ 0x80
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e024      	b.n	800456e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d107      	bne.n	800453c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452c:	4b6a      	ldr	r3, [pc, #424]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0c6      	b.n	80046ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800453c:	4b66      	ldr	r3, [pc, #408]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0be      	b.n	80046ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800454c:	f000 f8ce 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 8004550:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4a61      	ldr	r2, [pc, #388]	@ (80046dc <HAL_RCC_ClockConfig+0x268>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d909      	bls.n	800456e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800455a:	4b5f      	ldr	r3, [pc, #380]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004562:	4a5d      	ldr	r2, [pc, #372]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 8004564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004568:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800456a:	2380      	movs	r3, #128	@ 0x80
 800456c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800456e:	4b5a      	ldr	r3, [pc, #360]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f023 0203 	bic.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4957      	ldr	r1, [pc, #348]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 800457c:	4313      	orrs	r3, r2
 800457e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004580:	f7fd f86a 	bl	8001658 <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004586:	e00a      	b.n	800459e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004588:	f7fd f866 	bl	8001658 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e095      	b.n	80046ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	4b4e      	ldr	r3, [pc, #312]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 020c 	and.w	r2, r3, #12
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d1eb      	bne.n	8004588 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d023      	beq.n	8004604 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c8:	4b43      	ldr	r3, [pc, #268]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a42      	ldr	r2, [pc, #264]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 80045ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045e0:	4b3d      	ldr	r3, [pc, #244]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045e8:	4a3b      	ldr	r2, [pc, #236]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 80045ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f0:	4b39      	ldr	r3, [pc, #228]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4936      	ldr	r1, [pc, #216]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
 8004602:	e008      	b.n	8004616 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b80      	cmp	r3, #128	@ 0x80
 8004608:	d105      	bne.n	8004616 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800460a:	4b33      	ldr	r3, [pc, #204]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	4a32      	ldr	r2, [pc, #200]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 8004610:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004614:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004616:	4b2f      	ldr	r3, [pc, #188]	@ (80046d4 <HAL_RCC_ClockConfig+0x260>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d21d      	bcs.n	8004660 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004624:	4b2b      	ldr	r3, [pc, #172]	@ (80046d4 <HAL_RCC_ClockConfig+0x260>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 020f 	bic.w	r2, r3, #15
 800462c:	4929      	ldr	r1, [pc, #164]	@ (80046d4 <HAL_RCC_ClockConfig+0x260>)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	4313      	orrs	r3, r2
 8004632:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004634:	f7fd f810 	bl	8001658 <HAL_GetTick>
 8004638:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	e00a      	b.n	8004652 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463c:	f7fd f80c 	bl	8001658 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e03b      	b.n	80046ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b20      	ldr	r3, [pc, #128]	@ (80046d4 <HAL_RCC_ClockConfig+0x260>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d1ed      	bne.n	800463c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800466c:	4b1a      	ldr	r3, [pc, #104]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4917      	ldr	r1, [pc, #92]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800468a:	4b13      	ldr	r3, [pc, #76]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	490f      	ldr	r1, [pc, #60]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800469e:	f000 f825 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 80046a2:	4602      	mov	r2, r0
 80046a4:	4b0c      	ldr	r3, [pc, #48]	@ (80046d8 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	490c      	ldr	r1, [pc, #48]	@ (80046e0 <HAL_RCC_ClockConfig+0x26c>)
 80046b0:	5ccb      	ldrb	r3, [r1, r3]
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ba:	4a0a      	ldr	r2, [pc, #40]	@ (80046e4 <HAL_RCC_ClockConfig+0x270>)
 80046bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046be:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <HAL_RCC_ClockConfig+0x274>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fc ff7c 	bl	80015c0 <HAL_InitTick>
 80046c8:	4603      	mov	r3, r0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40022000 	.word	0x40022000
 80046d8:	40021000 	.word	0x40021000
 80046dc:	04c4b400 	.word	0x04c4b400
 80046e0:	0800c504 	.word	0x0800c504
 80046e4:	20000000 	.word	0x20000000
 80046e8:	20000014 	.word	0x20000014

080046ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046f2:	4b2c      	ldr	r3, [pc, #176]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d102      	bne.n	8004704 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046fe:	4b2a      	ldr	r3, [pc, #168]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	e047      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004704:	4b27      	ldr	r3, [pc, #156]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 030c 	and.w	r3, r3, #12
 800470c:	2b08      	cmp	r3, #8
 800470e:	d102      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004710:	4b26      	ldr	r3, [pc, #152]	@ (80047ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	e03e      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004716:	4b23      	ldr	r3, [pc, #140]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d136      	bne.n	8004790 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004722:	4b20      	ldr	r3, [pc, #128]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800472c:	4b1d      	ldr	r3, [pc, #116]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	3301      	adds	r3, #1
 8004738:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b03      	cmp	r3, #3
 800473e:	d10c      	bne.n	800475a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004740:	4a1a      	ldr	r2, [pc, #104]	@ (80047ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800474a:	68d2      	ldr	r2, [r2, #12]
 800474c:	0a12      	lsrs	r2, r2, #8
 800474e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	617b      	str	r3, [r7, #20]
      break;
 8004758:	e00c      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800475a:	4a13      	ldr	r2, [pc, #76]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004762:	4a10      	ldr	r2, [pc, #64]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004764:	68d2      	ldr	r2, [r2, #12]
 8004766:	0a12      	lsrs	r2, r2, #8
 8004768:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800476c:	fb02 f303 	mul.w	r3, r2, r3
 8004770:	617b      	str	r3, [r7, #20]
      break;
 8004772:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004774:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	0e5b      	lsrs	r3, r3, #25
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	3301      	adds	r3, #1
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	e001      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004794:	693b      	ldr	r3, [r7, #16]
}
 8004796:	4618      	mov	r0, r3
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	00f42400 	.word	0x00f42400
 80047ac:	016e3600 	.word	0x016e3600

080047b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b4:	4b03      	ldr	r3, [pc, #12]	@ (80047c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047b6:	681b      	ldr	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000000 	.word	0x20000000

080047c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047cc:	f7ff fff0 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4904      	ldr	r1, [pc, #16]	@ (80047f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40021000 	.word	0x40021000
 80047f0:	0800c514 	.word	0x0800c514

080047f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047f8:	f7ff ffda 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	0adb      	lsrs	r3, r3, #11
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	4904      	ldr	r1, [pc, #16]	@ (800481c <HAL_RCC_GetPCLK2Freq+0x28>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	0800c514 	.word	0x0800c514

08004820 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004826:	4b1e      	ldr	r3, [pc, #120]	@ (80048a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004830:	4b1b      	ldr	r3, [pc, #108]	@ (80048a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	3301      	adds	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b03      	cmp	r3, #3
 8004842:	d10c      	bne.n	800485e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004844:	4a17      	ldr	r2, [pc, #92]	@ (80048a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	4a14      	ldr	r2, [pc, #80]	@ (80048a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800484e:	68d2      	ldr	r2, [r2, #12]
 8004850:	0a12      	lsrs	r2, r2, #8
 8004852:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	617b      	str	r3, [r7, #20]
    break;
 800485c:	e00c      	b.n	8004878 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800485e:	4a12      	ldr	r2, [pc, #72]	@ (80048a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	4a0e      	ldr	r2, [pc, #56]	@ (80048a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004868:	68d2      	ldr	r2, [r2, #12]
 800486a:	0a12      	lsrs	r2, r2, #8
 800486c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004870:	fb02 f303 	mul.w	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]
    break;
 8004876:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004878:	4b09      	ldr	r3, [pc, #36]	@ (80048a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	0e5b      	lsrs	r3, r3, #25
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	3301      	adds	r3, #1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004892:	687b      	ldr	r3, [r7, #4]
}
 8004894:	4618      	mov	r0, r3
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	40021000 	.word	0x40021000
 80048a4:	016e3600 	.word	0x016e3600
 80048a8:	00f42400 	.word	0x00f42400

080048ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048b4:	2300      	movs	r3, #0
 80048b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048b8:	2300      	movs	r3, #0
 80048ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8098 	beq.w	80049fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ca:	2300      	movs	r3, #0
 80048cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ce:	4b43      	ldr	r3, [pc, #268]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10d      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048da:	4b40      	ldr	r3, [pc, #256]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048de:	4a3f      	ldr	r2, [pc, #252]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80048e6:	4b3d      	ldr	r3, [pc, #244]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ee:	60bb      	str	r3, [r7, #8]
 80048f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f2:	2301      	movs	r3, #1
 80048f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048f6:	4b3a      	ldr	r3, [pc, #232]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a39      	ldr	r2, [pc, #228]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004900:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004902:	f7fc fea9 	bl	8001658 <HAL_GetTick>
 8004906:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004908:	e009      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490a:	f7fc fea5 	bl	8001658 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d902      	bls.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	74fb      	strb	r3, [r7, #19]
        break;
 800491c:	e005      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800491e:	4b30      	ldr	r3, [pc, #192]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0ef      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d159      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004930:	4b2a      	ldr	r3, [pc, #168]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01e      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	429a      	cmp	r2, r3
 800494a:	d019      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800494c:	4b23      	ldr	r3, [pc, #140]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004956:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004958:	4b20      	ldr	r3, [pc, #128]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495e:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004968:	4b1c      	ldr	r3, [pc, #112]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496e:	4a1b      	ldr	r2, [pc, #108]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004978:	4a18      	ldr	r2, [pc, #96]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d016      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498a:	f7fc fe65 	bl	8001658 <HAL_GetTick>
 800498e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004990:	e00b      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004992:	f7fc fe61 	bl	8001658 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d902      	bls.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	74fb      	strb	r3, [r7, #19]
            break;
 80049a8:	e006      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049aa:	4b0c      	ldr	r3, [pc, #48]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ec      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10b      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049be:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	4903      	ldr	r1, [pc, #12]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049d4:	e008      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049d6:	7cfb      	ldrb	r3, [r7, #19]
 80049d8:	74bb      	strb	r3, [r7, #18]
 80049da:	e005      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049e8:	7c7b      	ldrb	r3, [r7, #17]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d105      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ee:	4ba6      	ldr	r3, [pc, #664]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f2:	4aa5      	ldr	r2, [pc, #660]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a06:	4ba0      	ldr	r3, [pc, #640]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f023 0203 	bic.w	r2, r3, #3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	499c      	ldr	r1, [pc, #624]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a28:	4b97      	ldr	r3, [pc, #604]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f023 020c 	bic.w	r2, r3, #12
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4994      	ldr	r1, [pc, #592]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a4a:	4b8f      	ldr	r3, [pc, #572]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	498b      	ldr	r1, [pc, #556]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a6c:	4b86      	ldr	r3, [pc, #536]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	4983      	ldr	r1, [pc, #524]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a8e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	497a      	ldr	r1, [pc, #488]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ab0:	4b75      	ldr	r3, [pc, #468]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	4972      	ldr	r1, [pc, #456]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	4969      	ldr	r1, [pc, #420]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004af4:	4b64      	ldr	r3, [pc, #400]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	4961      	ldr	r1, [pc, #388]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b16:	4b5c      	ldr	r3, [pc, #368]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	4958      	ldr	r1, [pc, #352]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d015      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b38:	4b53      	ldr	r3, [pc, #332]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	4950      	ldr	r1, [pc, #320]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b4b      	ldr	r3, [pc, #300]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b70:	4b45      	ldr	r3, [pc, #276]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7e:	4942      	ldr	r1, [pc, #264]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b90:	4b3d      	ldr	r3, [pc, #244]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a3c      	ldr	r2, [pc, #240]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b9a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ba8:	4b37      	ldr	r3, [pc, #220]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	4934      	ldr	r1, [pc, #208]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004be0:	4b29      	ldr	r3, [pc, #164]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bee:	4926      	ldr	r1, [pc, #152]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b21      	ldr	r3, [pc, #132]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a20      	ldr	r2, [pc, #128]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d015      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c18:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	4918      	ldr	r1, [pc, #96]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c36:	d105      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c38:	4b13      	ldr	r3, [pc, #76]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a12      	ldr	r2, [pc, #72]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c50:	4b0d      	ldr	r3, [pc, #52]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	490a      	ldr	r1, [pc, #40]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c6e:	d105      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c70:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4a04      	ldr	r2, [pc, #16]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000

08004c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e049      	b.n	8004d32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fc f950 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f000 fb12 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04a      	b.n	8004dea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a21      	ldr	r2, [pc, #132]	@ (8004df8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d018      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0x6c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7e:	d013      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0x6c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1d      	ldr	r2, [pc, #116]	@ (8004dfc <HAL_TIM_Base_Start_IT+0xc0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00e      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0x6c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d009      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0x6c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1a      	ldr	r2, [pc, #104]	@ (8004e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0x6c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a19      	ldr	r2, [pc, #100]	@ (8004e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d115      	bne.n	8004dd4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	4b17      	ldr	r3, [pc, #92]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b06      	cmp	r3, #6
 8004db8:	d015      	beq.n	8004de6 <HAL_TIM_Base_Start_IT+0xaa>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc0:	d011      	beq.n	8004de6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd2:	e008      	b.n	8004de6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e000      	b.n	8004de8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40013400 	.word	0x40013400
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	00010007 	.word	0x00010007

08004e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d020      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01b      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0202 	mvn.w	r2, #2
 8004e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fa2c 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa1e 	bl	80052a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fa2f 	bl	80052cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0204 	mvn.w	r2, #4
 8004e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa06 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f9f8 	bl	80052a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fa09 	bl	80052cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d020      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01b      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0208 	mvn.w	r2, #8
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f9e0 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f9d2 	bl	80052a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f9e3 	bl	80052cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d020      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01b      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0210 	mvn.w	r2, #16
 8004f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f9ba 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f9ac 	bl	80052a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f9bd 	bl	80052cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00c      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0201 	mvn.w	r2, #1
 8004f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fb fe2e 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d104      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00c      	beq.n	8004faa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fb69 	bl	800567c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00c      	beq.n	8004fce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fb61 	bl	8005690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00c      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f977 	bl	80052e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00c      	beq.n	8005016 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f06f 0220 	mvn.w	r2, #32
 800500e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fb29 	bl	8005668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00c      	beq.n	800503a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fb35 	bl	80056a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00c      	beq.n	800505e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fb2d 	bl	80056b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00c      	beq.n	8005082 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800507a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fb25 	bl	80056cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00c      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d007      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800509e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fb1d 	bl	80056e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_TIM_ConfigClockSource+0x1c>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e0de      	b.n	800528a <HAL_TIM_ConfigClockSource+0x1da>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80050ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a63      	ldr	r2, [pc, #396]	@ (8005294 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	f000 80a9 	beq.w	800525e <HAL_TIM_ConfigClockSource+0x1ae>
 800510c:	4a61      	ldr	r2, [pc, #388]	@ (8005294 <HAL_TIM_ConfigClockSource+0x1e4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	f200 80ae 	bhi.w	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005114:	4a60      	ldr	r2, [pc, #384]	@ (8005298 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	f000 80a1 	beq.w	800525e <HAL_TIM_ConfigClockSource+0x1ae>
 800511c:	4a5e      	ldr	r2, [pc, #376]	@ (8005298 <HAL_TIM_ConfigClockSource+0x1e8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	f200 80a6 	bhi.w	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005124:	4a5d      	ldr	r2, [pc, #372]	@ (800529c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005126:	4293      	cmp	r3, r2
 8005128:	f000 8099 	beq.w	800525e <HAL_TIM_ConfigClockSource+0x1ae>
 800512c:	4a5b      	ldr	r2, [pc, #364]	@ (800529c <HAL_TIM_ConfigClockSource+0x1ec>)
 800512e:	4293      	cmp	r3, r2
 8005130:	f200 809e 	bhi.w	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005134:	4a5a      	ldr	r2, [pc, #360]	@ (80052a0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	f000 8091 	beq.w	800525e <HAL_TIM_ConfigClockSource+0x1ae>
 800513c:	4a58      	ldr	r2, [pc, #352]	@ (80052a0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	f200 8096 	bhi.w	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005144:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005148:	f000 8089 	beq.w	800525e <HAL_TIM_ConfigClockSource+0x1ae>
 800514c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005150:	f200 808e 	bhi.w	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005158:	d03e      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0x128>
 800515a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800515e:	f200 8087 	bhi.w	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005166:	f000 8086 	beq.w	8005276 <HAL_TIM_ConfigClockSource+0x1c6>
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516e:	d87f      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005170:	2b70      	cmp	r3, #112	@ 0x70
 8005172:	d01a      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0xfa>
 8005174:	2b70      	cmp	r3, #112	@ 0x70
 8005176:	d87b      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005178:	2b60      	cmp	r3, #96	@ 0x60
 800517a:	d050      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x16e>
 800517c:	2b60      	cmp	r3, #96	@ 0x60
 800517e:	d877      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005180:	2b50      	cmp	r3, #80	@ 0x50
 8005182:	d03c      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x14e>
 8005184:	2b50      	cmp	r3, #80	@ 0x50
 8005186:	d873      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005188:	2b40      	cmp	r3, #64	@ 0x40
 800518a:	d058      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x18e>
 800518c:	2b40      	cmp	r3, #64	@ 0x40
 800518e:	d86f      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005190:	2b30      	cmp	r3, #48	@ 0x30
 8005192:	d064      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x1ae>
 8005194:	2b30      	cmp	r3, #48	@ 0x30
 8005196:	d86b      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d060      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x1ae>
 800519c:	2b20      	cmp	r3, #32
 800519e:	d867      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d05c      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x1ae>
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d05a      	beq.n	800525e <HAL_TIM_ConfigClockSource+0x1ae>
 80051a8:	e062      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051ba:	f000 f9b3 	bl	8005524 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	609a      	str	r2, [r3, #8]
      break;
 80051d6:	e04f      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051e8:	f000 f99c 	bl	8005524 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051fa:	609a      	str	r2, [r3, #8]
      break;
 80051fc:	e03c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800520a:	461a      	mov	r2, r3
 800520c:	f000 f90e 	bl	800542c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2150      	movs	r1, #80	@ 0x50
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f967 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 800521c:	e02c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800522a:	461a      	mov	r2, r3
 800522c:	f000 f92d 	bl	800548a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2160      	movs	r1, #96	@ 0x60
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f957 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 800523c:	e01c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800524a:	461a      	mov	r2, r3
 800524c:	f000 f8ee 	bl	800542c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2140      	movs	r1, #64	@ 0x40
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f947 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 800525c:	e00c      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f000 f93e 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 800526e:	e003      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      break;
 8005274:	e000      	b.n	8005278 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005276:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	00100070 	.word	0x00100070
 8005298:	00100040 	.word	0x00100040
 800529c:	00100030 	.word	0x00100030
 80052a0:	00100020 	.word	0x00100020

080052a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a42      	ldr	r2, [pc, #264]	@ (8005410 <TIM_Base_SetConfig+0x11c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00f      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005312:	d00b      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a3f      	ldr	r2, [pc, #252]	@ (8005414 <TIM_Base_SetConfig+0x120>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3e      	ldr	r2, [pc, #248]	@ (8005418 <TIM_Base_SetConfig+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a3d      	ldr	r2, [pc, #244]	@ (800541c <TIM_Base_SetConfig+0x128>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d108      	bne.n	800533e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a33      	ldr	r2, [pc, #204]	@ (8005410 <TIM_Base_SetConfig+0x11c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01b      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800534c:	d017      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a30      	ldr	r2, [pc, #192]	@ (8005414 <TIM_Base_SetConfig+0x120>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2f      	ldr	r2, [pc, #188]	@ (8005418 <TIM_Base_SetConfig+0x124>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2e      	ldr	r2, [pc, #184]	@ (800541c <TIM_Base_SetConfig+0x128>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2d      	ldr	r2, [pc, #180]	@ (8005420 <TIM_Base_SetConfig+0x12c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2c      	ldr	r2, [pc, #176]	@ (8005424 <TIM_Base_SetConfig+0x130>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2b      	ldr	r2, [pc, #172]	@ (8005428 <TIM_Base_SetConfig+0x134>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d108      	bne.n	8005390 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a16      	ldr	r2, [pc, #88]	@ (8005410 <TIM_Base_SetConfig+0x11c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00f      	beq.n	80053dc <TIM_Base_SetConfig+0xe8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a17      	ldr	r2, [pc, #92]	@ (800541c <TIM_Base_SetConfig+0x128>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00b      	beq.n	80053dc <TIM_Base_SetConfig+0xe8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a16      	ldr	r2, [pc, #88]	@ (8005420 <TIM_Base_SetConfig+0x12c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d007      	beq.n	80053dc <TIM_Base_SetConfig+0xe8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a15      	ldr	r2, [pc, #84]	@ (8005424 <TIM_Base_SetConfig+0x130>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_Base_SetConfig+0xe8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a14      	ldr	r2, [pc, #80]	@ (8005428 <TIM_Base_SetConfig+0x134>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d103      	bne.n	80053e4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d105      	bne.n	8005402 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f023 0201 	bic.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	611a      	str	r2, [r3, #16]
  }
}
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40013400 	.word	0x40013400
 8005420:	40014000 	.word	0x40014000
 8005424:	40014400 	.word	0x40014400
 8005428:	40014800 	.word	0x40014800

0800542c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f023 0201 	bic.w	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 030a 	bic.w	r3, r3, #10
 8005468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800548a:	b480      	push	{r7}
 800548c:	b087      	sub	sp, #28
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f023 0210 	bic.w	r2, r3, #16
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	031b      	lsls	r3, r3, #12
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	f043 0307 	orr.w	r3, r3, #7
 8005510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800553e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	021a      	lsls	r2, r3, #8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	431a      	orrs	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4313      	orrs	r3, r2
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	bf00      	nop
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005578:	2302      	movs	r3, #2
 800557a:	e065      	b.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d108      	bne.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80055b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80055c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d018      	beq.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f2:	d013      	beq.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a18      	ldr	r2, [pc, #96]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00e      	beq.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a17      	ldr	r2, [pc, #92]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d009      	beq.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a12      	ldr	r2, [pc, #72]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a13      	ldr	r2, [pc, #76]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d10c      	bne.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005622:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	4313      	orrs	r3, r2
 800562c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40013400 	.word	0x40013400
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800
 8005664:	40014000 	.word	0x40014000

08005668 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e042      	b.n	800578c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7fb fc91 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2224      	movs	r2, #36	@ 0x24
 8005722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0201 	bic.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fee8 	bl	8006514 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fc19 	bl	8005f7c <UART_SetConfig>
 800574a:	4603      	mov	r3, r0
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e01b      	b.n	800578c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 ff67 	bl	8006658 <UART_CheckIdleState>
 800578a:	4603      	mov	r3, r0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005794:	b480      	push	{r7}
 8005796:	b091      	sub	sp, #68	@ 0x44
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	4613      	mov	r3, r2
 80057a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d178      	bne.n	800589e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_UART_Transmit_IT+0x24>
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e071      	b.n	80058a0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	88fa      	ldrh	r2, [r7, #6]
 80057ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2221      	movs	r2, #33	@ 0x21
 80057e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057f0:	d12a      	bne.n	8005848 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fa:	d107      	bne.n	800580c <HAL_UART_Transmit_IT+0x78>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a29      	ldr	r2, [pc, #164]	@ (80058ac <HAL_UART_Transmit_IT+0x118>)
 8005808:	679a      	str	r2, [r3, #120]	@ 0x78
 800580a:	e002      	b.n	8005812 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4a28      	ldr	r2, [pc, #160]	@ (80058b0 <HAL_UART_Transmit_IT+0x11c>)
 8005810:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005828:	63bb      	str	r3, [r7, #56]	@ 0x38
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005832:	637a      	str	r2, [r7, #52]	@ 0x34
 8005834:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005838:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <HAL_UART_Transmit_IT+0x7e>
 8005846:	e028      	b.n	800589a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005850:	d107      	bne.n	8005862 <HAL_UART_Transmit_IT+0xce>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4a15      	ldr	r2, [pc, #84]	@ (80058b4 <HAL_UART_Transmit_IT+0x120>)
 800585e:	679a      	str	r2, [r3, #120]	@ 0x78
 8005860:	e002      	b.n	8005868 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a14      	ldr	r2, [pc, #80]	@ (80058b8 <HAL_UART_Transmit_IT+0x124>)
 8005866:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	613b      	str	r3, [r7, #16]
   return(result);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	69f9      	ldr	r1, [r7, #28]
 800588c:	6a3a      	ldr	r2, [r7, #32]
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	61bb      	str	r3, [r7, #24]
   return(result);
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e6      	bne.n	8005868 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e000      	b.n	80058a0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800589e:	2302      	movs	r3, #2
  }
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3744      	adds	r7, #68	@ 0x44
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	08006f8b 	.word	0x08006f8b
 80058b0:	08006eab 	.word	0x08006eab
 80058b4:	08006de9 	.word	0x08006de9
 80058b8:	08006d31 	.word	0x08006d31

080058bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b0ba      	sub	sp, #232	@ 0xe8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80058e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80058ea:	4013      	ands	r3, r2
 80058ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80058f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11b      	bne.n	8005930 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	d015      	beq.n	8005930 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d105      	bne.n	800591c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8300 	beq.w	8005f26 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
      }
      return;
 800592e:	e2fa      	b.n	8005f26 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8123 	beq.w	8005b80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800593a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800593e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b74 <HAL_UART_IRQHandler+0x2b8>)
 8005940:	4013      	ands	r3, r2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005946:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800594a:	4b8b      	ldr	r3, [pc, #556]	@ (8005b78 <HAL_UART_IRQHandler+0x2bc>)
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8116 	beq.w	8005b80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d011      	beq.n	8005984 <HAL_UART_IRQHandler+0xc8>
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d011      	beq.n	80059b4 <HAL_UART_IRQHandler+0xf8>
 8005990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2202      	movs	r2, #2
 80059a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059aa:	f043 0204 	orr.w	r2, r3, #4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d011      	beq.n	80059e4 <HAL_UART_IRQHandler+0x128>
 80059c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2204      	movs	r2, #4
 80059d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059da:	f043 0202 	orr.w	r2, r3, #2
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d017      	beq.n	8005a20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80059fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005a00:	4b5c      	ldr	r3, [pc, #368]	@ (8005b74 <HAL_UART_IRQHandler+0x2b8>)
 8005a02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a16:	f043 0208 	orr.w	r2, r3, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <HAL_UART_IRQHandler+0x196>
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00c      	beq.n	8005a52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8266 	beq.w	8005f2a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d013      	beq.n	8005a92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d105      	bne.n	8005a82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa6:	2b40      	cmp	r3, #64	@ 0x40
 8005aa8:	d005      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d054      	beq.n	8005b60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 ffcd 	bl	8006a56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac6:	2b40      	cmp	r3, #64	@ 0x40
 8005ac8:	d146      	bne.n	8005b58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3308      	adds	r3, #8
 8005af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005af6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1d9      	bne.n	8005aca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d017      	beq.n	8005b50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b26:	4a15      	ldr	r2, [pc, #84]	@ (8005b7c <HAL_UART_IRQHandler+0x2c0>)
 8005b28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fc f84b 	bl	8001bcc <HAL_DMA_Abort_IT>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d019      	beq.n	8005b70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4e:	e00f      	b.n	8005b70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa09 	bl	8005f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b56:	e00b      	b.n	8005b70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fa05 	bl	8005f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5e:	e007      	b.n	8005b70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fa01 	bl	8005f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005b6e:	e1dc      	b.n	8005f2a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	bf00      	nop
    return;
 8005b72:	e1da      	b.n	8005f2a <HAL_UART_IRQHandler+0x66e>
 8005b74:	10000001 	.word	0x10000001
 8005b78:	04000120 	.word	0x04000120
 8005b7c:	08006d0d 	.word	0x08006d0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	f040 8170 	bne.w	8005e6a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 8169 	beq.w	8005e6a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8162 	beq.w	8005e6a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2210      	movs	r2, #16
 8005bac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb8:	2b40      	cmp	r3, #64	@ 0x40
 8005bba:	f040 80d8 	bne.w	8005d6e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80af 	beq.w	8005d34 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005be0:	429a      	cmp	r2, r3
 8005be2:	f080 80a7 	bcs.w	8005d34 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f040 8087 	bne.w	8005d12 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c32:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1da      	bne.n	8005c04 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3308      	adds	r3, #8
 8005c54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c60:	f023 0301 	bic.w	r3, r3, #1
 8005c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e1      	bne.n	8005c4e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005cae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e3      	bne.n	8005c8a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ce0:	f023 0310 	bic.w	r3, r3, #16
 8005ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cf4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e4      	bne.n	8005cd0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fb ff04 	bl	8001b1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7fa ff97 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d32:	e0fc      	b.n	8005f2e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	f040 80f5 	bne.w	8005f2e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	f040 80eb 	bne.w	8005f2e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fa ff7a 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
      return;
 8005d6c:	e0df      	b.n	8005f2e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 80d1 	beq.w	8005f32 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80cc 	beq.w	8005f32 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005daa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dbe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e4      	bne.n	8005d9a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	623b      	str	r3, [r7, #32]
   return(result);
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005df8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e1      	bne.n	8005dd0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f023 0310 	bic.w	r3, r3, #16
 8005e34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e4      	bne.n	8005e20 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fa fefc 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e68:	e063      	b.n	8005f32 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00e      	beq.n	8005e94 <HAL_UART_IRQHandler+0x5d8>
 8005e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005e8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 f91c 	bl	80070ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e92:	e051      	b.n	8005f38 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d014      	beq.n	8005eca <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d03a      	beq.n	8005f36 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	4798      	blx	r3
    }
    return;
 8005ec8:	e035      	b.n	8005f36 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_UART_IRQHandler+0x62e>
 8005ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 f8c6 	bl	8007074 <UART_EndTransmit_IT>
    return;
 8005ee8:	e026      	b.n	8005f38 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <HAL_UART_IRQHandler+0x64e>
 8005ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 f8f5 	bl	80070f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f08:	e016      	b.n	8005f38 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d010      	beq.n	8005f38 <HAL_UART_IRQHandler+0x67c>
 8005f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	da0c      	bge.n	8005f38 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 f8dd 	bl	80070de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f24:	e008      	b.n	8005f38 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f26:	bf00      	nop
 8005f28:	e006      	b.n	8005f38 <HAL_UART_IRQHandler+0x67c>
    return;
 8005f2a:	bf00      	nop
 8005f2c:	e004      	b.n	8005f38 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f2e:	bf00      	nop
 8005f30:	e002      	b.n	8005f38 <HAL_UART_IRQHandler+0x67c>
      return;
 8005f32:	bf00      	nop
 8005f34:	e000      	b.n	8005f38 <HAL_UART_IRQHandler+0x67c>
    return;
 8005f36:	bf00      	nop
  }
}
 8005f38:	37e8      	adds	r7, #232	@ 0xe8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop

08005f40 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f80:	b08c      	sub	sp, #48	@ 0x30
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4bab      	ldr	r3, [pc, #684]	@ (8006258 <UART_SetConfig+0x2dc>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4aa0      	ldr	r2, [pc, #640]	@ (800625c <UART_SetConfig+0x2e0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005ff2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006006:	f023 010f 	bic.w	r1, r3, #15
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a91      	ldr	r2, [pc, #580]	@ (8006260 <UART_SetConfig+0x2e4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d125      	bne.n	800606c <UART_SetConfig+0xf0>
 8006020:	4b90      	ldr	r3, [pc, #576]	@ (8006264 <UART_SetConfig+0x2e8>)
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b03      	cmp	r3, #3
 800602c:	d81a      	bhi.n	8006064 <UART_SetConfig+0xe8>
 800602e:	a201      	add	r2, pc, #4	@ (adr r2, 8006034 <UART_SetConfig+0xb8>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006045 	.word	0x08006045
 8006038:	08006055 	.word	0x08006055
 800603c:	0800604d 	.word	0x0800604d
 8006040:	0800605d 	.word	0x0800605d
 8006044:	2301      	movs	r3, #1
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800604a:	e0d6      	b.n	80061fa <UART_SetConfig+0x27e>
 800604c:	2302      	movs	r3, #2
 800604e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006052:	e0d2      	b.n	80061fa <UART_SetConfig+0x27e>
 8006054:	2304      	movs	r3, #4
 8006056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800605a:	e0ce      	b.n	80061fa <UART_SetConfig+0x27e>
 800605c:	2308      	movs	r3, #8
 800605e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006062:	e0ca      	b.n	80061fa <UART_SetConfig+0x27e>
 8006064:	2310      	movs	r3, #16
 8006066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800606a:	e0c6      	b.n	80061fa <UART_SetConfig+0x27e>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a7d      	ldr	r2, [pc, #500]	@ (8006268 <UART_SetConfig+0x2ec>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d138      	bne.n	80060e8 <UART_SetConfig+0x16c>
 8006076:	4b7b      	ldr	r3, [pc, #492]	@ (8006264 <UART_SetConfig+0x2e8>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607c:	f003 030c 	and.w	r3, r3, #12
 8006080:	2b0c      	cmp	r3, #12
 8006082:	d82d      	bhi.n	80060e0 <UART_SetConfig+0x164>
 8006084:	a201      	add	r2, pc, #4	@ (adr r2, 800608c <UART_SetConfig+0x110>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060e1 	.word	0x080060e1
 8006094:	080060e1 	.word	0x080060e1
 8006098:	080060e1 	.word	0x080060e1
 800609c:	080060d1 	.word	0x080060d1
 80060a0:	080060e1 	.word	0x080060e1
 80060a4:	080060e1 	.word	0x080060e1
 80060a8:	080060e1 	.word	0x080060e1
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	080060e1 	.word	0x080060e1
 80060b4:	080060e1 	.word	0x080060e1
 80060b8:	080060e1 	.word	0x080060e1
 80060bc:	080060d9 	.word	0x080060d9
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c6:	e098      	b.n	80061fa <UART_SetConfig+0x27e>
 80060c8:	2302      	movs	r3, #2
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ce:	e094      	b.n	80061fa <UART_SetConfig+0x27e>
 80060d0:	2304      	movs	r3, #4
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d6:	e090      	b.n	80061fa <UART_SetConfig+0x27e>
 80060d8:	2308      	movs	r3, #8
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060de:	e08c      	b.n	80061fa <UART_SetConfig+0x27e>
 80060e0:	2310      	movs	r3, #16
 80060e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060e6:	e088      	b.n	80061fa <UART_SetConfig+0x27e>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a5f      	ldr	r2, [pc, #380]	@ (800626c <UART_SetConfig+0x2f0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d125      	bne.n	800613e <UART_SetConfig+0x1c2>
 80060f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006264 <UART_SetConfig+0x2e8>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060fc:	2b30      	cmp	r3, #48	@ 0x30
 80060fe:	d016      	beq.n	800612e <UART_SetConfig+0x1b2>
 8006100:	2b30      	cmp	r3, #48	@ 0x30
 8006102:	d818      	bhi.n	8006136 <UART_SetConfig+0x1ba>
 8006104:	2b20      	cmp	r3, #32
 8006106:	d00a      	beq.n	800611e <UART_SetConfig+0x1a2>
 8006108:	2b20      	cmp	r3, #32
 800610a:	d814      	bhi.n	8006136 <UART_SetConfig+0x1ba>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <UART_SetConfig+0x19a>
 8006110:	2b10      	cmp	r3, #16
 8006112:	d008      	beq.n	8006126 <UART_SetConfig+0x1aa>
 8006114:	e00f      	b.n	8006136 <UART_SetConfig+0x1ba>
 8006116:	2300      	movs	r3, #0
 8006118:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611c:	e06d      	b.n	80061fa <UART_SetConfig+0x27e>
 800611e:	2302      	movs	r3, #2
 8006120:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006124:	e069      	b.n	80061fa <UART_SetConfig+0x27e>
 8006126:	2304      	movs	r3, #4
 8006128:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800612c:	e065      	b.n	80061fa <UART_SetConfig+0x27e>
 800612e:	2308      	movs	r3, #8
 8006130:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006134:	e061      	b.n	80061fa <UART_SetConfig+0x27e>
 8006136:	2310      	movs	r3, #16
 8006138:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613c:	e05d      	b.n	80061fa <UART_SetConfig+0x27e>
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a4b      	ldr	r2, [pc, #300]	@ (8006270 <UART_SetConfig+0x2f4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d125      	bne.n	8006194 <UART_SetConfig+0x218>
 8006148:	4b46      	ldr	r3, [pc, #280]	@ (8006264 <UART_SetConfig+0x2e8>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006152:	2bc0      	cmp	r3, #192	@ 0xc0
 8006154:	d016      	beq.n	8006184 <UART_SetConfig+0x208>
 8006156:	2bc0      	cmp	r3, #192	@ 0xc0
 8006158:	d818      	bhi.n	800618c <UART_SetConfig+0x210>
 800615a:	2b80      	cmp	r3, #128	@ 0x80
 800615c:	d00a      	beq.n	8006174 <UART_SetConfig+0x1f8>
 800615e:	2b80      	cmp	r3, #128	@ 0x80
 8006160:	d814      	bhi.n	800618c <UART_SetConfig+0x210>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <UART_SetConfig+0x1f0>
 8006166:	2b40      	cmp	r3, #64	@ 0x40
 8006168:	d008      	beq.n	800617c <UART_SetConfig+0x200>
 800616a:	e00f      	b.n	800618c <UART_SetConfig+0x210>
 800616c:	2300      	movs	r3, #0
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006172:	e042      	b.n	80061fa <UART_SetConfig+0x27e>
 8006174:	2302      	movs	r3, #2
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800617a:	e03e      	b.n	80061fa <UART_SetConfig+0x27e>
 800617c:	2304      	movs	r3, #4
 800617e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006182:	e03a      	b.n	80061fa <UART_SetConfig+0x27e>
 8006184:	2308      	movs	r3, #8
 8006186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800618a:	e036      	b.n	80061fa <UART_SetConfig+0x27e>
 800618c:	2310      	movs	r3, #16
 800618e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006192:	e032      	b.n	80061fa <UART_SetConfig+0x27e>
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a30      	ldr	r2, [pc, #192]	@ (800625c <UART_SetConfig+0x2e0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d12a      	bne.n	80061f4 <UART_SetConfig+0x278>
 800619e:	4b31      	ldr	r3, [pc, #196]	@ (8006264 <UART_SetConfig+0x2e8>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061ac:	d01a      	beq.n	80061e4 <UART_SetConfig+0x268>
 80061ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061b2:	d81b      	bhi.n	80061ec <UART_SetConfig+0x270>
 80061b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061b8:	d00c      	beq.n	80061d4 <UART_SetConfig+0x258>
 80061ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061be:	d815      	bhi.n	80061ec <UART_SetConfig+0x270>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <UART_SetConfig+0x250>
 80061c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c8:	d008      	beq.n	80061dc <UART_SetConfig+0x260>
 80061ca:	e00f      	b.n	80061ec <UART_SetConfig+0x270>
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d2:	e012      	b.n	80061fa <UART_SetConfig+0x27e>
 80061d4:	2302      	movs	r3, #2
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061da:	e00e      	b.n	80061fa <UART_SetConfig+0x27e>
 80061dc:	2304      	movs	r3, #4
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e2:	e00a      	b.n	80061fa <UART_SetConfig+0x27e>
 80061e4:	2308      	movs	r3, #8
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ea:	e006      	b.n	80061fa <UART_SetConfig+0x27e>
 80061ec:	2310      	movs	r3, #16
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f2:	e002      	b.n	80061fa <UART_SetConfig+0x27e>
 80061f4:	2310      	movs	r3, #16
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a17      	ldr	r2, [pc, #92]	@ (800625c <UART_SetConfig+0x2e0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	f040 80a8 	bne.w	8006356 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006206:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800620a:	2b08      	cmp	r3, #8
 800620c:	d834      	bhi.n	8006278 <UART_SetConfig+0x2fc>
 800620e:	a201      	add	r2, pc, #4	@ (adr r2, 8006214 <UART_SetConfig+0x298>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	08006239 	.word	0x08006239
 8006218:	08006279 	.word	0x08006279
 800621c:	08006241 	.word	0x08006241
 8006220:	08006279 	.word	0x08006279
 8006224:	08006247 	.word	0x08006247
 8006228:	08006279 	.word	0x08006279
 800622c:	08006279 	.word	0x08006279
 8006230:	08006279 	.word	0x08006279
 8006234:	0800624f 	.word	0x0800624f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006238:	f7fe fac6 	bl	80047c8 <HAL_RCC_GetPCLK1Freq>
 800623c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800623e:	e021      	b.n	8006284 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006240:	4b0c      	ldr	r3, [pc, #48]	@ (8006274 <UART_SetConfig+0x2f8>)
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006244:	e01e      	b.n	8006284 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006246:	f7fe fa51 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 800624a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800624c:	e01a      	b.n	8006284 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006254:	e016      	b.n	8006284 <UART_SetConfig+0x308>
 8006256:	bf00      	nop
 8006258:	cfff69f3 	.word	0xcfff69f3
 800625c:	40008000 	.word	0x40008000
 8006260:	40013800 	.word	0x40013800
 8006264:	40021000 	.word	0x40021000
 8006268:	40004400 	.word	0x40004400
 800626c:	40004800 	.word	0x40004800
 8006270:	40004c00 	.word	0x40004c00
 8006274:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006282:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 812a 	beq.w	80064e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	4a9e      	ldr	r2, [pc, #632]	@ (800650c <UART_SetConfig+0x590>)
 8006292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006296:	461a      	mov	r2, r3
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	fbb3 f3f2 	udiv	r3, r3, r2
 800629e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	4613      	mov	r3, r2
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	4413      	add	r3, r2
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d305      	bcc.n	80062bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d903      	bls.n	80062c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062c2:	e10d      	b.n	80064e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	2200      	movs	r2, #0
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	60fa      	str	r2, [r7, #12]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d0:	4a8e      	ldr	r2, [pc, #568]	@ (800650c <UART_SetConfig+0x590>)
 80062d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2200      	movs	r2, #0
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062e6:	f7f9 ffeb 	bl	80002c0 <__aeabi_uldivmod>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4610      	mov	r0, r2
 80062f0:	4619      	mov	r1, r3
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	020b      	lsls	r3, r1, #8
 80062fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006300:	0202      	lsls	r2, r0, #8
 8006302:	6979      	ldr	r1, [r7, #20]
 8006304:	6849      	ldr	r1, [r1, #4]
 8006306:	0849      	lsrs	r1, r1, #1
 8006308:	2000      	movs	r0, #0
 800630a:	460c      	mov	r4, r1
 800630c:	4605      	mov	r5, r0
 800630e:	eb12 0804 	adds.w	r8, r2, r4
 8006312:	eb43 0905 	adc.w	r9, r3, r5
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	469a      	mov	sl, r3
 800631e:	4693      	mov	fp, r2
 8006320:	4652      	mov	r2, sl
 8006322:	465b      	mov	r3, fp
 8006324:	4640      	mov	r0, r8
 8006326:	4649      	mov	r1, r9
 8006328:	f7f9 ffca 	bl	80002c0 <__aeabi_uldivmod>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4613      	mov	r3, r2
 8006332:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800633a:	d308      	bcc.n	800634e <UART_SetConfig+0x3d2>
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006342:	d204      	bcs.n	800634e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6a3a      	ldr	r2, [r7, #32]
 800634a:	60da      	str	r2, [r3, #12]
 800634c:	e0c8      	b.n	80064e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006354:	e0c4      	b.n	80064e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800635e:	d167      	bne.n	8006430 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006360:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006364:	2b08      	cmp	r3, #8
 8006366:	d828      	bhi.n	80063ba <UART_SetConfig+0x43e>
 8006368:	a201      	add	r2, pc, #4	@ (adr r2, 8006370 <UART_SetConfig+0x3f4>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006395 	.word	0x08006395
 8006374:	0800639d 	.word	0x0800639d
 8006378:	080063a5 	.word	0x080063a5
 800637c:	080063bb 	.word	0x080063bb
 8006380:	080063ab 	.word	0x080063ab
 8006384:	080063bb 	.word	0x080063bb
 8006388:	080063bb 	.word	0x080063bb
 800638c:	080063bb 	.word	0x080063bb
 8006390:	080063b3 	.word	0x080063b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006394:	f7fe fa18 	bl	80047c8 <HAL_RCC_GetPCLK1Freq>
 8006398:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800639a:	e014      	b.n	80063c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800639c:	f7fe fa2a 	bl	80047f4 <HAL_RCC_GetPCLK2Freq>
 80063a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063a2:	e010      	b.n	80063c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006510 <UART_SetConfig+0x594>)
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063a8:	e00d      	b.n	80063c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063aa:	f7fe f99f 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 80063ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063b0:	e009      	b.n	80063c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063b8:	e005      	b.n	80063c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8089 	beq.w	80064e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d2:	4a4e      	ldr	r2, [pc, #312]	@ (800650c <UART_SetConfig+0x590>)
 80063d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063d8:	461a      	mov	r2, r3
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80063e0:	005a      	lsls	r2, r3, #1
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	441a      	add	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d916      	bls.n	8006428 <UART_SetConfig+0x4ac>
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006400:	d212      	bcs.n	8006428 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f023 030f 	bic.w	r3, r3, #15
 800640a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	b29b      	uxth	r3, r3
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	b29a      	uxth	r2, r3
 8006418:	8bfb      	ldrh	r3, [r7, #30]
 800641a:	4313      	orrs	r3, r2
 800641c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	8bfa      	ldrh	r2, [r7, #30]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e05b      	b.n	80064e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800642e:	e057      	b.n	80064e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006430:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006434:	2b08      	cmp	r3, #8
 8006436:	d828      	bhi.n	800648a <UART_SetConfig+0x50e>
 8006438:	a201      	add	r2, pc, #4	@ (adr r2, 8006440 <UART_SetConfig+0x4c4>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006465 	.word	0x08006465
 8006444:	0800646d 	.word	0x0800646d
 8006448:	08006475 	.word	0x08006475
 800644c:	0800648b 	.word	0x0800648b
 8006450:	0800647b 	.word	0x0800647b
 8006454:	0800648b 	.word	0x0800648b
 8006458:	0800648b 	.word	0x0800648b
 800645c:	0800648b 	.word	0x0800648b
 8006460:	08006483 	.word	0x08006483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006464:	f7fe f9b0 	bl	80047c8 <HAL_RCC_GetPCLK1Freq>
 8006468:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800646a:	e014      	b.n	8006496 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646c:	f7fe f9c2 	bl	80047f4 <HAL_RCC_GetPCLK2Freq>
 8006470:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006472:	e010      	b.n	8006496 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006474:	4b26      	ldr	r3, [pc, #152]	@ (8006510 <UART_SetConfig+0x594>)
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006478:	e00d      	b.n	8006496 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647a:	f7fe f937 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 800647e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006480:	e009      	b.n	8006496 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006488:	e005      	b.n	8006496 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006494:	bf00      	nop
    }

    if (pclk != 0U)
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d021      	beq.n	80064e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	4a1a      	ldr	r2, [pc, #104]	@ (800650c <UART_SetConfig+0x590>)
 80064a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a6:	461a      	mov	r2, r3
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	441a      	add	r2, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	2b0f      	cmp	r3, #15
 80064c4:	d909      	bls.n	80064da <UART_SetConfig+0x55e>
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064cc:	d205      	bcs.n	80064da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60da      	str	r2, [r3, #12]
 80064d8:	e002      	b.n	80064e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2200      	movs	r2, #0
 80064f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2200      	movs	r2, #0
 80064fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80064fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006500:	4618      	mov	r0, r3
 8006502:	3730      	adds	r7, #48	@ 0x30
 8006504:	46bd      	mov	sp, r7
 8006506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800650a:	bf00      	nop
 800650c:	0800c51c 	.word	0x0800c51c
 8006510:	00f42400 	.word	0x00f42400

08006514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01a      	beq.n	800662a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006612:	d10a      	bne.n	800662a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]
  }
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b098      	sub	sp, #96	@ 0x60
 800665c:	af02      	add	r7, sp, #8
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006668:	f7fa fff6 	bl	8001658 <HAL_GetTick>
 800666c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b08      	cmp	r3, #8
 800667a:	d12f      	bne.n	80066dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800667c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006684:	2200      	movs	r2, #0
 8006686:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f88e 	bl	80067ac <UART_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d022      	beq.n	80066dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e6      	bne.n	8006696 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e063      	b.n	80067a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d149      	bne.n	800677e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f2:	2200      	movs	r2, #0
 80066f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f857 	bl	80067ac <UART_WaitOnFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d03c      	beq.n	800677e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	623b      	str	r3, [r7, #32]
   return(result);
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006722:	633b      	str	r3, [r7, #48]	@ 0x30
 8006724:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e6      	bne.n	8006704 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	60fb      	str	r3, [r7, #12]
   return(result);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006756:	61fa      	str	r2, [r7, #28]
 8006758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	69b9      	ldr	r1, [r7, #24]
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	617b      	str	r3, [r7, #20]
   return(result);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e5      	bne.n	8006736 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e012      	b.n	80067a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3758      	adds	r7, #88	@ 0x58
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067bc:	e04f      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	d04b      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c6:	f7fa ff47 	bl	8001658 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d302      	bcc.n	80067dc <UART_WaitOnFlagUntilTimeout+0x30>
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e04e      	b.n	800687e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d037      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b80      	cmp	r3, #128	@ 0x80
 80067f2:	d034      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b40      	cmp	r3, #64	@ 0x40
 80067f8:	d031      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b08      	cmp	r3, #8
 8006806:	d110      	bne.n	800682a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2208      	movs	r2, #8
 800680e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f920 	bl	8006a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2208      	movs	r2, #8
 800681a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e029      	b.n	800687e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006838:	d111      	bne.n	800685e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f906 	bl	8006a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2220      	movs	r2, #32
 800684e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e00f      	b.n	800687e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69da      	ldr	r2, [r3, #28]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4013      	ands	r3, r2
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	429a      	cmp	r2, r3
 800686c:	bf0c      	ite	eq
 800686e:	2301      	moveq	r3, #1
 8006870:	2300      	movne	r3, #0
 8006872:	b2db      	uxtb	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	429a      	cmp	r2, r3
 800687a:	d0a0      	beq.n	80067be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b096      	sub	sp, #88	@ 0x58
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	88fa      	ldrh	r2, [r7, #6]
 80068a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2222      	movs	r2, #34	@ 0x22
 80068b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d02d      	beq.n	800691a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c4:	4a40      	ldr	r2, [pc, #256]	@ (80069c8 <UART_Start_Receive_DMA+0x140>)
 80068c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ce:	4a3f      	ldr	r2, [pc, #252]	@ (80069cc <UART_Start_Receive_DMA+0x144>)
 80068d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068d8:	4a3d      	ldr	r2, [pc, #244]	@ (80069d0 <UART_Start_Receive_DMA+0x148>)
 80068da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e2:	2200      	movs	r2, #0
 80068e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3324      	adds	r3, #36	@ 0x24
 80068f2:	4619      	mov	r1, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f8:	461a      	mov	r2, r3
 80068fa:	88fb      	ldrh	r3, [r7, #6]
 80068fc:	f7fb f892 	bl	8001a24 <HAL_DMA_Start_IT>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d009      	beq.n	800691a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2210      	movs	r2, #16
 800690a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2220      	movs	r2, #32
 8006912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e051      	b.n	80069be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d018      	beq.n	8006954 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006936:	657b      	str	r3, [r7, #84]	@ 0x54
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006942:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800694e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e6      	bne.n	8006922 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3308      	adds	r3, #8
 800695a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	653b      	str	r3, [r7, #80]	@ 0x50
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006974:	637a      	str	r2, [r7, #52]	@ 0x34
 8006976:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800697a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e5      	bne.n	8006954 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3308      	adds	r3, #8
 800698e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	613b      	str	r3, [r7, #16]
   return(result);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800699e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3308      	adds	r3, #8
 80069a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069a8:	623a      	str	r2, [r7, #32]
 80069aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	69f9      	ldr	r1, [r7, #28]
 80069ae:	6a3a      	ldr	r2, [r7, #32]
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e5      	bne.n	8006988 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3758      	adds	r7, #88	@ 0x58
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	08006b23 	.word	0x08006b23
 80069cc:	08006c4f 	.word	0x08006c4f
 80069d0:	08006c8d 	.word	0x08006c8d

080069d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b08f      	sub	sp, #60	@ 0x3c
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80069f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e6      	bne.n	80069dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a24:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a2e:	61ba      	str	r2, [r7, #24]
 8006a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6979      	ldr	r1, [r7, #20]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006a4a:	bf00      	nop
 8006a4c:	373c      	adds	r7, #60	@ 0x3c
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b095      	sub	sp, #84	@ 0x54
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e6      	bne.n	8006a5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ab4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e3      	bne.n	8006a90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d118      	bne.n	8006b02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f023 0310 	bic.w	r3, r3, #16
 8006ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6979      	ldr	r1, [r7, #20]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	613b      	str	r3, [r7, #16]
   return(result);
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e6      	bne.n	8006ad0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b16:	bf00      	nop
 8006b18:	3754      	adds	r7, #84	@ 0x54
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b09c      	sub	sp, #112	@ 0x70
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d171      	bne.n	8006c22 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e6      	bne.n	8006b46 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b98:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b9a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e5      	bne.n	8006b78 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	623b      	str	r3, [r7, #32]
   return(result);
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3308      	adds	r3, #8
 8006bca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006bcc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e5      	bne.n	8006bac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006be2:	2220      	movs	r2, #32
 8006be4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d118      	bne.n	8006c22 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f023 0310 	bic.w	r3, r3, #16
 8006c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c0e:	61fb      	str	r3, [r7, #28]
 8006c10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	69b9      	ldr	r1, [r7, #24]
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e6      	bne.n	8006bf0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c24:	2200      	movs	r2, #0
 8006c26:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d107      	bne.n	8006c40 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c36:	4619      	mov	r1, r3
 8006c38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c3a:	f7fa f811 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c3e:	e002      	b.n	8006c46 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006c40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c42:	f7ff f97d 	bl	8005f40 <HAL_UART_RxCpltCallback>
}
 8006c46:	bf00      	nop
 8006c48:	3770      	adds	r7, #112	@ 0x70
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d109      	bne.n	8006c7e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	4619      	mov	r1, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f7f9 fff2 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c7c:	e002      	b.n	8006c84 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff f968 	bl	8005f54 <HAL_UART_RxHalfCpltCallback>
}
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb4:	2b80      	cmp	r3, #128	@ 0x80
 8006cb6:	d109      	bne.n	8006ccc <UART_DMAError+0x40>
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2b21      	cmp	r3, #33	@ 0x21
 8006cbc:	d106      	bne.n	8006ccc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006cc6:	6978      	ldr	r0, [r7, #20]
 8006cc8:	f7ff fe84 	bl	80069d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd6:	2b40      	cmp	r3, #64	@ 0x40
 8006cd8:	d109      	bne.n	8006cee <UART_DMAError+0x62>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b22      	cmp	r3, #34	@ 0x22
 8006cde:	d106      	bne.n	8006cee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006ce8:	6978      	ldr	r0, [r7, #20]
 8006cea:	f7ff feb4 	bl	8006a56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf4:	f043 0210 	orr.w	r2, r3, #16
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cfe:	6978      	ldr	r0, [r7, #20]
 8006d00:	f7ff f932 	bl	8005f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d04:	bf00      	nop
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff f920 	bl	8005f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b08f      	sub	sp, #60	@ 0x3c
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3e:	2b21      	cmp	r3, #33	@ 0x21
 8006d40:	d14c      	bne.n	8006ddc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d132      	bne.n	8006db4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d6e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e6      	bne.n	8006d4e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	61bb      	str	r3, [r7, #24]
 8006da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6979      	ldr	r1, [r7, #20]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	613b      	str	r3, [r7, #16]
   return(result);
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e6      	bne.n	8006d80 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006db2:	e013      	b.n	8006ddc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db8:	781a      	ldrb	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006ddc:	bf00      	nop
 8006dde:	373c      	adds	r7, #60	@ 0x3c
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b091      	sub	sp, #68	@ 0x44
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df6:	2b21      	cmp	r3, #33	@ 0x21
 8006df8:	d151      	bne.n	8006e9e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d132      	bne.n	8006e6c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	623b      	str	r3, [r7, #32]
   return(result);
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e6      	bne.n	8006e06 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	69b9      	ldr	r1, [r7, #24]
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	617b      	str	r3, [r7, #20]
   return(result);
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e6      	bne.n	8006e38 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006e6a:	e018      	b.n	8006e9e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e80:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e86:	1c9a      	adds	r2, r3, #2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8006e9e:	bf00      	nop
 8006ea0:	3744      	adds	r7, #68	@ 0x44
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b091      	sub	sp, #68	@ 0x44
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb8:	2b21      	cmp	r3, #33	@ 0x21
 8006eba:	d160      	bne.n	8006f7e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ec2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006ec4:	e057      	b.n	8006f76 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d133      	bne.n	8006f3a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ef2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e5      	bne.n	8006ed2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	461a      	mov	r2, r3
 8006f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f24:	61fb      	str	r3, [r7, #28]
 8006f26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	69b9      	ldr	r1, [r7, #24]
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	617b      	str	r3, [r7, #20]
   return(result);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e6      	bne.n	8006f06 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006f38:	e021      	b.n	8006f7e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d013      	beq.n	8006f70 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006f72:	3b01      	subs	r3, #1
 8006f74:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006f76:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1a4      	bne.n	8006ec6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006f7c:	e7ff      	b.n	8006f7e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8006f7e:	bf00      	nop
 8006f80:	3744      	adds	r7, #68	@ 0x44
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b091      	sub	sp, #68	@ 0x44
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f98:	2b21      	cmp	r3, #33	@ 0x21
 8006f9a:	d165      	bne.n	8007068 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fa2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006fa4:	e05c      	b.n	8007060 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d133      	bne.n	800701a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e5      	bne.n	8006fb2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ffa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6979      	ldr	r1, [r7, #20]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	613b      	str	r3, [r7, #16]
   return(result);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e6      	bne.n	8006fe6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007018:	e026      	b.n	8007068 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007024:	2b00      	cmp	r3, #0
 8007026:	d018      	beq.n	800705a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800702c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800702e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800703c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007042:	1c9a      	adds	r2, r3, #2
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800705a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800705c:	3b01      	subs	r3, #1
 800705e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007060:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007062:	2b00      	cmp	r3, #0
 8007064:	d19f      	bne.n	8006fa6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007066:	e7ff      	b.n	8007068 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007068:	bf00      	nop
 800706a:	3744      	adds	r7, #68	@ 0x44
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	60bb      	str	r3, [r7, #8]
   return(result);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6979      	ldr	r1, [r7, #20]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	613b      	str	r3, [r7, #16]
   return(result);
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e6      	bne.n	800707c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7f9 fe47 	bl	8000d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070c2:	bf00      	nop
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_UARTEx_DisableFifoMode+0x16>
 8007118:	2302      	movs	r3, #2
 800711a:	e027      	b.n	800716c <HAL_UARTEx_DisableFifoMode+0x66>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2224      	movs	r2, #36	@ 0x24
 8007128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0201 	bic.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800714a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2220      	movs	r2, #32
 800715e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800718c:	2302      	movs	r3, #2
 800718e:	e02d      	b.n	80071ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2224      	movs	r2, #36	@ 0x24
 800719c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0201 	bic.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f8a3 	bl	8007318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007208:	2302      	movs	r3, #2
 800720a:	e02d      	b.n	8007268 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2224      	movs	r2, #36	@ 0x24
 8007218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0201 	bic.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f865 	bl	8007318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08c      	sub	sp, #48	@ 0x30
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007284:	2b20      	cmp	r3, #32
 8007286:	d142      	bne.n	800730e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800728e:	88fb      	ldrh	r3, [r7, #6]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e03b      	b.n	8007310 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	461a      	mov	r2, r3
 80072a8:	68b9      	ldr	r1, [r7, #8]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7ff faec 	bl	8006888 <UART_Start_Receive_DMA>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80072b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d124      	bne.n	8007308 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d11d      	bne.n	8007302 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2210      	movs	r2, #16
 80072cc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	617b      	str	r3, [r7, #20]
   return(result);
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f043 0310 	orr.w	r3, r3, #16
 80072e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ee:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6a39      	ldr	r1, [r7, #32]
 80072f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e6      	bne.n	80072ce <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007300:	e002      	b.n	8007308 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007308:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800730c:	e000      	b.n	8007310 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800730e:	2302      	movs	r3, #2
  }
}
 8007310:	4618      	mov	r0, r3
 8007312:	3730      	adds	r7, #48	@ 0x30
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007324:	2b00      	cmp	r3, #0
 8007326:	d108      	bne.n	800733a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007338:	e031      	b.n	800739e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800733a:	2308      	movs	r3, #8
 800733c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800733e:	2308      	movs	r3, #8
 8007340:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	0e5b      	lsrs	r3, r3, #25
 800734a:	b2db      	uxtb	r3, r3
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	0f5b      	lsrs	r3, r3, #29
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	7b3a      	ldrb	r2, [r7, #12]
 8007366:	4911      	ldr	r1, [pc, #68]	@ (80073ac <UARTEx_SetNbDataToProcess+0x94>)
 8007368:	5c8a      	ldrb	r2, [r1, r2]
 800736a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800736e:	7b3a      	ldrb	r2, [r7, #12]
 8007370:	490f      	ldr	r1, [pc, #60]	@ (80073b0 <UARTEx_SetNbDataToProcess+0x98>)
 8007372:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007374:	fb93 f3f2 	sdiv	r3, r3, r2
 8007378:	b29a      	uxth	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	7b7a      	ldrb	r2, [r7, #13]
 8007384:	4909      	ldr	r1, [pc, #36]	@ (80073ac <UARTEx_SetNbDataToProcess+0x94>)
 8007386:	5c8a      	ldrb	r2, [r1, r2]
 8007388:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800738c:	7b7a      	ldrb	r2, [r7, #13]
 800738e:	4908      	ldr	r1, [pc, #32]	@ (80073b0 <UARTEx_SetNbDataToProcess+0x98>)
 8007390:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007392:	fb93 f3f2 	sdiv	r3, r3, r2
 8007396:	b29a      	uxth	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	0800c534 	.word	0x0800c534
 80073b0:	0800c53c 	.word	0x0800c53c

080073b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073c4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80073c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073ea:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80073ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	43db      	mvns	r3, r3
 80073fe:	b29b      	uxth	r3, r3
 8007400:	4013      	ands	r3, r2
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	1d3b      	adds	r3, r7, #4
 8007422:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007454:	b480      	push	{r7}
 8007456:	b0a7      	sub	sp, #156	@ 0x9c
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	78db      	ldrb	r3, [r3, #3]
 8007482:	2b03      	cmp	r3, #3
 8007484:	d81f      	bhi.n	80074c6 <USB_ActivateEndpoint+0x72>
 8007486:	a201      	add	r2, pc, #4	@ (adr r2, 800748c <USB_ActivateEndpoint+0x38>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	0800749d 	.word	0x0800749d
 8007490:	080074b9 	.word	0x080074b9
 8007494:	080074cf 	.word	0x080074cf
 8007498:	080074ab 	.word	0x080074ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800749c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074a8:	e012      	b.n	80074d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80074aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074ae:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80074b2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074b6:	e00b      	b.n	80074d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80074b8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074c0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80074c4:	e004      	b.n	80074d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80074cc:	e000      	b.n	80074d0 <USB_ActivateEndpoint+0x7c>
      break;
 80074ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	441a      	add	r2, r3
 80074da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	b21b      	sxth	r3, r3
 8007502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800750a:	b21a      	sxth	r2, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	b21b      	sxth	r3, r3
 8007512:	4313      	orrs	r3, r2
 8007514:	b21b      	sxth	r3, r3
 8007516:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	441a      	add	r2, r3
 8007524:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800752c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007538:	b29b      	uxth	r3, r3
 800753a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	7b1b      	ldrb	r3, [r3, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 8180 	bne.w	8007846 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	785b      	ldrb	r3, [r3, #1]
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8084 	beq.w	8007658 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	4413      	add	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	00da      	lsls	r2, r3, #3
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	88db      	ldrh	r3, [r3, #6]
 8007578:	085b      	lsrs	r3, r3, #1
 800757a:	b29b      	uxth	r3, r3
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	827b      	strh	r3, [r7, #18]
 8007592:	8a7b      	ldrh	r3, [r7, #18]
 8007594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d01b      	beq.n	80075d4 <USB_ActivateEndpoint+0x180>
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b2:	823b      	strh	r3, [r7, #16]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	441a      	add	r2, r3
 80075be:	8a3b      	ldrh	r3, [r7, #16]
 80075c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	78db      	ldrb	r3, [r3, #3]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d020      	beq.n	800761e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075f2:	81bb      	strh	r3, [r7, #12]
 80075f4:	89bb      	ldrh	r3, [r7, #12]
 80075f6:	f083 0320 	eor.w	r3, r3, #32
 80075fa:	81bb      	strh	r3, [r7, #12]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	441a      	add	r2, r3
 8007606:	89bb      	ldrh	r3, [r7, #12]
 8007608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800760c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007618:	b29b      	uxth	r3, r3
 800761a:	8013      	strh	r3, [r2, #0]
 800761c:	e3f9      	b.n	8007e12 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007634:	81fb      	strh	r3, [r7, #14]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	441a      	add	r2, r3
 8007640:	89fb      	ldrh	r3, [r7, #14]
 8007642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800764a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800764e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007652:	b29b      	uxth	r3, r3
 8007654:	8013      	strh	r3, [r2, #0]
 8007656:	e3dc      	b.n	8007e12 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	633b      	str	r3, [r7, #48]	@ 0x30
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007662:	b29b      	uxth	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	4413      	add	r3, r2
 800766a:	633b      	str	r3, [r7, #48]	@ 0x30
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	00da      	lsls	r2, r3, #3
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	4413      	add	r3, r2
 8007676:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800767a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	88db      	ldrh	r3, [r3, #6]
 8007680:	085b      	lsrs	r3, r3, #1
 8007682:	b29b      	uxth	r3, r3
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007696:	b29b      	uxth	r3, r3
 8007698:	461a      	mov	r2, r3
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	4413      	add	r3, r2
 800769e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	00da      	lsls	r2, r3, #3
 80076a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a8:	4413      	add	r3, r2
 80076aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80076b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <USB_ActivateEndpoint+0x28a>
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	801a      	strh	r2, [r3, #0]
 80076dc:	e041      	b.n	8007762 <USB_ActivateEndpoint+0x30e>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80076e4:	d81c      	bhi.n	8007720 <USB_ActivateEndpoint+0x2cc>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	085b      	lsrs	r3, r3, #1
 80076ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d004      	beq.n	8007706 <USB_ActivateEndpoint+0x2b2>
 80076fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007700:	3301      	adds	r3, #1
 8007702:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29a      	uxth	r2, r3
 800770c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007710:	b29b      	uxth	r3, r3
 8007712:	029b      	lsls	r3, r3, #10
 8007714:	b29b      	uxth	r3, r3
 8007716:	4313      	orrs	r3, r2
 8007718:	b29a      	uxth	r2, r3
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	801a      	strh	r2, [r3, #0]
 800771e:	e020      	b.n	8007762 <USB_ActivateEndpoint+0x30e>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	095b      	lsrs	r3, r3, #5
 8007726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 031f 	and.w	r3, r3, #31
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <USB_ActivateEndpoint+0x2ec>
 8007736:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800773a:	3b01      	subs	r3, #1
 800773c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29a      	uxth	r2, r3
 8007746:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800774a:	b29b      	uxth	r3, r3
 800774c:	029b      	lsls	r3, r3, #10
 800774e:	b29b      	uxth	r3, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	b29b      	uxth	r3, r3
 8007754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775c:	b29a      	uxth	r2, r3
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007770:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d01b      	beq.n	80077b2 <USB_ActivateEndpoint+0x35e>
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800778c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007790:	843b      	strh	r3, [r7, #32]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	441a      	add	r2, r3
 800779c:	8c3b      	ldrh	r3, [r7, #32]
 800779e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d124      	bne.n	8007804 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d0:	83bb      	strh	r3, [r7, #28]
 80077d2:	8bbb      	ldrh	r3, [r7, #28]
 80077d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80077d8:	83bb      	strh	r3, [r7, #28]
 80077da:	8bbb      	ldrh	r3, [r7, #28]
 80077dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077e0:	83bb      	strh	r3, [r7, #28]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	441a      	add	r2, r3
 80077ec:	8bbb      	ldrh	r3, [r7, #28]
 80077ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fe:	b29b      	uxth	r3, r3
 8007800:	8013      	strh	r3, [r2, #0]
 8007802:	e306      	b.n	8007e12 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781a:	83fb      	strh	r3, [r7, #30]
 800781c:	8bfb      	ldrh	r3, [r7, #30]
 800781e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007822:	83fb      	strh	r3, [r7, #30]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	441a      	add	r2, r3
 800782e:	8bfb      	ldrh	r3, [r7, #30]
 8007830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800783c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007840:	b29b      	uxth	r3, r3
 8007842:	8013      	strh	r3, [r2, #0]
 8007844:	e2e5      	b.n	8007e12 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	78db      	ldrb	r3, [r3, #3]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d11e      	bne.n	800788c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	b29b      	uxth	r3, r3
 800785c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007864:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	441a      	add	r2, r3
 8007872:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8007876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800787a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800787e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007886:	b29b      	uxth	r3, r3
 8007888:	8013      	strh	r3, [r2, #0]
 800788a:	e01d      	b.n	80078c8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800789e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	441a      	add	r2, r3
 80078b0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80078b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078d8:	4413      	add	r3, r2
 80078da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	00da      	lsls	r2, r3, #3
 80078e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	891b      	ldrh	r3, [r3, #8]
 80078f0:	085b      	lsrs	r3, r3, #1
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078fa:	801a      	strh	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007906:	b29b      	uxth	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800790c:	4413      	add	r3, r2
 800790e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	00da      	lsls	r2, r3, #3
 8007916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007918:	4413      	add	r3, r2
 800791a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800791e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	895b      	ldrh	r3, [r3, #10]
 8007924:	085b      	lsrs	r3, r3, #1
 8007926:	b29b      	uxth	r3, r3
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800792e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	2b00      	cmp	r3, #0
 8007936:	f040 81af 	bne.w	8007c98 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800794a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800794e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d01d      	beq.n	8007992 <USB_ActivateEndpoint+0x53e>
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800796c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	441a      	add	r2, r3
 800797a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800797e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007986:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800798a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800798e:	b29b      	uxth	r3, r3
 8007990:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80079a2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80079a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d01d      	beq.n	80079ea <USB_ActivateEndpoint+0x596>
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	441a      	add	r2, r3
 80079d2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80079d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d16b      	bne.n	8007aca <USB_ActivateEndpoint+0x676>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a02:	4413      	add	r3, r2
 8007a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	00da      	lsls	r2, r3, #3
 8007a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a0e:	4413      	add	r3, r2
 8007a10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <USB_ActivateEndpoint+0x5f0>
 8007a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a40:	801a      	strh	r2, [r3, #0]
 8007a42:	e05d      	b.n	8007b00 <USB_ActivateEndpoint+0x6ac>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a4a:	d81c      	bhi.n	8007a86 <USB_ActivateEndpoint+0x632>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <USB_ActivateEndpoint+0x618>
 8007a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a66:	3301      	adds	r3, #1
 8007a68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	029b      	lsls	r3, r3, #10
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	e03c      	b.n	8007b00 <USB_ActivateEndpoint+0x6ac>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	f003 031f 	and.w	r3, r3, #31
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <USB_ActivateEndpoint+0x652>
 8007a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	029b      	lsls	r3, r3, #10
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ac6:	801a      	strh	r2, [r3, #0]
 8007ac8:	e01a      	b.n	8007b00 <USB_ActivateEndpoint+0x6ac>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	785b      	ldrb	r3, [r3, #1]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d116      	bne.n	8007b00 <USB_ActivateEndpoint+0x6ac>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae2:	4413      	add	r3, r2
 8007ae4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	00da      	lsls	r2, r3, #3
 8007aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aee:	4413      	add	r3, r2
 8007af0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007af4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007afe:	801a      	strh	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d16b      	bne.n	8007be4 <USB_ActivateEndpoint+0x790>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b1c:	4413      	add	r3, r2
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	00da      	lsls	r2, r3, #3
 8007b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b28:	4413      	add	r3, r2
 8007b2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3e:	801a      	strh	r2, [r3, #0]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10a      	bne.n	8007b5e <USB_ActivateEndpoint+0x70a>
 8007b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	801a      	strh	r2, [r3, #0]
 8007b5c:	e05b      	b.n	8007c16 <USB_ActivateEndpoint+0x7c2>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b64:	d81c      	bhi.n	8007ba0 <USB_ActivateEndpoint+0x74c>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	085b      	lsrs	r3, r3, #1
 8007b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <USB_ActivateEndpoint+0x732>
 8007b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b80:	3301      	adds	r3, #1
 8007b82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	029b      	lsls	r3, r3, #10
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	4313      	orrs	r3, r2
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	e03a      	b.n	8007c16 <USB_ActivateEndpoint+0x7c2>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	095b      	lsrs	r3, r3, #5
 8007ba6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <USB_ActivateEndpoint+0x76c>
 8007bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	029b      	lsls	r3, r3, #10
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	e018      	b.n	8007c16 <USB_ActivateEndpoint+0x7c2>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d114      	bne.n	8007c16 <USB_ActivateEndpoint+0x7c2>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bf8:	4413      	add	r3, r2
 8007bfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	00da      	lsls	r2, r3, #3
 8007c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c04:	4413      	add	r3, r2
 8007c06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c14:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c34:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	441a      	add	r2, r3
 8007c48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c74:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	441a      	add	r2, r3
 8007c80:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]
 8007c96:	e0bc      	b.n	8007e12 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007ca8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01d      	beq.n	8007cf0 <USB_ActivateEndpoint+0x89c>
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	441a      	add	r2, r3
 8007cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007d00:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01d      	beq.n	8007d48 <USB_ActivateEndpoint+0x8f4>
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d22:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	441a      	add	r2, r3
 8007d30:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d40:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	78db      	ldrb	r3, [r3, #3]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d024      	beq.n	8007d9a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d66:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007d6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007d6e:	f083 0320 	eor.w	r3, r3, #32
 8007d72:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	441a      	add	r2, r3
 8007d80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	8013      	strh	r3, [r2, #0]
 8007d98:	e01d      	b.n	8007dd6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007db0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	441a      	add	r2, r3
 8007dbe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dec:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	441a      	add	r2, r3
 8007dfa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e12:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	379c      	adds	r7, #156	@ 0x9c
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop

08007e24 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b08d      	sub	sp, #52	@ 0x34
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	7b1b      	ldrb	r3, [r3, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f040 808e 	bne.w	8007f54 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d044      	beq.n	8007eca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	81bb      	strh	r3, [r7, #12]
 8007e4e:	89bb      	ldrh	r3, [r7, #12]
 8007e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01b      	beq.n	8007e90 <USB_DeactivateEndpoint+0x6c>
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6e:	817b      	strh	r3, [r7, #10]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	441a      	add	r2, r3
 8007e7a:	897b      	ldrh	r3, [r7, #10]
 8007e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ea6:	813b      	strh	r3, [r7, #8]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	441a      	add	r2, r3
 8007eb2:	893b      	ldrh	r3, [r7, #8]
 8007eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8013      	strh	r3, [r2, #0]
 8007ec8:	e192      	b.n	80081f0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	827b      	strh	r3, [r7, #18]
 8007ed8:	8a7b      	ldrh	r3, [r7, #18]
 8007eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01b      	beq.n	8007f1a <USB_DeactivateEndpoint+0xf6>
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ef8:	823b      	strh	r3, [r7, #16]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	441a      	add	r2, r3
 8007f04:	8a3b      	ldrh	r3, [r7, #16]
 8007f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f30:	81fb      	strh	r3, [r7, #14]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	441a      	add	r2, r3
 8007f3c:	89fb      	ldrh	r3, [r7, #14]
 8007f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	8013      	strh	r3, [r2, #0]
 8007f52:	e14d      	b.n	80081f0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f040 80a5 	bne.w	80080a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	843b      	strh	r3, [r7, #32]
 8007f6c:	8c3b      	ldrh	r3, [r7, #32]
 8007f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d01b      	beq.n	8007fae <USB_DeactivateEndpoint+0x18a>
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f8c:	83fb      	strh	r3, [r7, #30]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	441a      	add	r2, r3
 8007f98:	8bfb      	ldrh	r3, [r7, #30]
 8007f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	83bb      	strh	r3, [r7, #28]
 8007fbc:	8bbb      	ldrh	r3, [r7, #28]
 8007fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d01b      	beq.n	8007ffe <USB_DeactivateEndpoint+0x1da>
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fdc:	837b      	strh	r3, [r7, #26]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	441a      	add	r2, r3
 8007fe8:	8b7b      	ldrh	r3, [r7, #26]
 8007fea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ff6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008014:	833b      	strh	r3, [r7, #24]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	441a      	add	r2, r3
 8008020:	8b3b      	ldrh	r3, [r7, #24]
 8008022:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008026:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800802a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800802e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008032:	b29b      	uxth	r3, r3
 8008034:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800804c:	82fb      	strh	r3, [r7, #22]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	441a      	add	r2, r3
 8008058:	8afb      	ldrh	r3, [r7, #22]
 800805a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800805e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800806a:	b29b      	uxth	r3, r3
 800806c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008084:	82bb      	strh	r3, [r7, #20]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	441a      	add	r2, r3
 8008090:	8abb      	ldrh	r3, [r7, #20]
 8008092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800809a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800809e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	8013      	strh	r3, [r2, #0]
 80080a6:	e0a3      	b.n	80081f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80080b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80080b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01b      	beq.n	80080f8 <USB_DeactivateEndpoint+0x2d4>
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	441a      	add	r2, r3
 80080e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80080e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008106:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01b      	beq.n	8008148 <USB_DeactivateEndpoint+0x324>
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008126:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	441a      	add	r2, r3
 8008132:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008134:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008138:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800813c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008140:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008144:	b29b      	uxth	r3, r3
 8008146:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b29b      	uxth	r3, r3
 8008156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800815a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800815e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	441a      	add	r2, r3
 800816a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800816c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008170:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008174:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800817c:	b29b      	uxth	r3, r3
 800817e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008196:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	441a      	add	r2, r3
 80081a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	441a      	add	r2, r3
 80081da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3734      	adds	r7, #52	@ 0x34
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b0ac      	sub	sp, #176	@ 0xb0
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	2b01      	cmp	r3, #1
 800820e:	f040 84ca 	bne.w	8008ba6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	429a      	cmp	r2, r3
 800821c:	d904      	bls.n	8008228 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008226:	e003      	b.n	8008230 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	7b1b      	ldrb	r3, [r3, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d122      	bne.n	800827e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	6959      	ldr	r1, [r3, #20]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	88da      	ldrh	r2, [r3, #6]
 8008240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008244:	b29b      	uxth	r3, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 febd 	bl	8008fc6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008256:	b29b      	uxth	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	4413      	add	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	00da      	lsls	r2, r3, #3
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	4413      	add	r3, r2
 800826a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	801a      	strh	r2, [r3, #0]
 800827a:	f000 bc6f 	b.w	8008b5c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	2b02      	cmp	r3, #2
 8008284:	f040 831e 	bne.w	80088c4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	6a1a      	ldr	r2, [r3, #32]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	429a      	cmp	r2, r3
 8008292:	f240 82cf 	bls.w	8008834 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	441a      	add	r2, r3
 80082ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80082be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80082ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	6a1a      	ldr	r2, [r3, #32]
 80082d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082da:	1ad2      	subs	r2, r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 814f 	beq.w	8008596 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	785b      	ldrb	r3, [r3, #1]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d16b      	bne.n	80083dc <USB_EPStartXfer+0x1de>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800830e:	b29b      	uxth	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008314:	4413      	add	r3, r2
 8008316:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	00da      	lsls	r2, r3, #3
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	4413      	add	r3, r2
 8008322:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008326:	627b      	str	r3, [r7, #36]	@ 0x24
 8008328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008332:	b29a      	uxth	r2, r3
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	801a      	strh	r2, [r3, #0]
 8008338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <USB_EPStartXfer+0x158>
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	b29b      	uxth	r3, r3
 8008346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800834a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800834e:	b29a      	uxth	r2, r3
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	e05b      	b.n	800840e <USB_EPStartXfer+0x210>
 8008356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800835a:	2b3e      	cmp	r3, #62	@ 0x3e
 800835c:	d81c      	bhi.n	8008398 <USB_EPStartXfer+0x19a>
 800835e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d004      	beq.n	800837e <USB_EPStartXfer+0x180>
 8008374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008378:	3301      	adds	r3, #1
 800837a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800837e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	b29a      	uxth	r2, r3
 8008384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008388:	b29b      	uxth	r3, r3
 800838a:	029b      	lsls	r3, r3, #10
 800838c:	b29b      	uxth	r3, r3
 800838e:	4313      	orrs	r3, r2
 8008390:	b29a      	uxth	r2, r3
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	801a      	strh	r2, [r3, #0]
 8008396:	e03a      	b.n	800840e <USB_EPStartXfer+0x210>
 8008398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800839c:	095b      	lsrs	r3, r3, #5
 800839e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083a6:	f003 031f 	and.w	r3, r3, #31
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d104      	bne.n	80083b8 <USB_EPStartXfer+0x1ba>
 80083ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083b2:	3b01      	subs	r3, #1
 80083b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	029b      	lsls	r3, r3, #10
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	4313      	orrs	r3, r2
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	801a      	strh	r2, [r3, #0]
 80083da:	e018      	b.n	800840e <USB_EPStartXfer+0x210>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	785b      	ldrb	r3, [r3, #1]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d114      	bne.n	800840e <USB_EPStartXfer+0x210>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	461a      	mov	r2, r3
 80083ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f0:	4413      	add	r3, r2
 80083f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	00da      	lsls	r2, r3, #3
 80083fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fc:	4413      	add	r3, r2
 80083fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008408:	b29a      	uxth	r2, r3
 800840a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	895b      	ldrh	r3, [r3, #10]
 8008412:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	6959      	ldr	r1, [r3, #20]
 800841a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800841e:	b29b      	uxth	r3, r3
 8008420:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fdce 	bl	8008fc6 <USB_WritePMA>
            ep->xfer_buff += len;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	695a      	ldr	r2, [r3, #20]
 800842e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008432:	441a      	add	r2, r3
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	6a1a      	ldr	r2, [r3, #32]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	429a      	cmp	r2, r3
 8008442:	d907      	bls.n	8008454 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	6a1a      	ldr	r2, [r3, #32]
 8008448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800844c:	1ad2      	subs	r2, r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	621a      	str	r2, [r3, #32]
 8008452:	e006      	b.n	8008462 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2200      	movs	r2, #0
 8008460:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d16b      	bne.n	8008542 <USB_EPStartXfer+0x344>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008474:	b29b      	uxth	r3, r3
 8008476:	461a      	mov	r2, r3
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	4413      	add	r3, r2
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	00da      	lsls	r2, r3, #3
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	4413      	add	r3, r2
 8008488:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b29b      	uxth	r3, r3
 8008494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008498:	b29a      	uxth	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	801a      	strh	r2, [r3, #0]
 800849e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <USB_EPStartXfer+0x2be>
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	801a      	strh	r2, [r3, #0]
 80084ba:	e05d      	b.n	8008578 <USB_EPStartXfer+0x37a>
 80084bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80084c2:	d81c      	bhi.n	80084fe <USB_EPStartXfer+0x300>
 80084c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084c8:	085b      	lsrs	r3, r3, #1
 80084ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <USB_EPStartXfer+0x2e6>
 80084da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084de:	3301      	adds	r3, #1
 80084e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	029b      	lsls	r3, r3, #10
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	4313      	orrs	r3, r2
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	801a      	strh	r2, [r3, #0]
 80084fc:	e03c      	b.n	8008578 <USB_EPStartXfer+0x37a>
 80084fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800850c:	f003 031f 	and.w	r3, r3, #31
 8008510:	2b00      	cmp	r3, #0
 8008512:	d104      	bne.n	800851e <USB_EPStartXfer+0x320>
 8008514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008518:	3b01      	subs	r3, #1
 800851a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29a      	uxth	r2, r3
 8008524:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008528:	b29b      	uxth	r3, r3
 800852a:	029b      	lsls	r3, r3, #10
 800852c:	b29b      	uxth	r3, r3
 800852e:	4313      	orrs	r3, r2
 8008530:	b29b      	uxth	r3, r3
 8008532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800853a:	b29a      	uxth	r2, r3
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e01a      	b.n	8008578 <USB_EPStartXfer+0x37a>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d116      	bne.n	8008578 <USB_EPStartXfer+0x37a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	623b      	str	r3, [r7, #32]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008554:	b29b      	uxth	r3, r3
 8008556:	461a      	mov	r2, r3
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	4413      	add	r3, r2
 800855c:	623b      	str	r3, [r7, #32]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	00da      	lsls	r2, r3, #3
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	4413      	add	r3, r2
 8008568:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800856c:	61fb      	str	r3, [r7, #28]
 800856e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008572:	b29a      	uxth	r2, r3
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	891b      	ldrh	r3, [r3, #8]
 800857c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	6959      	ldr	r1, [r3, #20]
 8008584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008588:	b29b      	uxth	r3, r3
 800858a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fd19 	bl	8008fc6 <USB_WritePMA>
 8008594:	e2e2      	b.n	8008b5c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	785b      	ldrb	r3, [r3, #1]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d16b      	bne.n	8008676 <USB_EPStartXfer+0x478>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	461a      	mov	r2, r3
 80085ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085ae:	4413      	add	r3, r2
 80085b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	00da      	lsls	r2, r3, #3
 80085b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085ba:	4413      	add	r3, r2
 80085bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10a      	bne.n	80085f0 <USB_EPStartXfer+0x3f2>
 80085da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ec:	801a      	strh	r2, [r3, #0]
 80085ee:	e05d      	b.n	80086ac <USB_EPStartXfer+0x4ae>
 80085f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80085f6:	d81c      	bhi.n	8008632 <USB_EPStartXfer+0x434>
 80085f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d004      	beq.n	8008618 <USB_EPStartXfer+0x41a>
 800860e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008612:	3301      	adds	r3, #1
 8008614:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	b29a      	uxth	r2, r3
 800861e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008622:	b29b      	uxth	r3, r3
 8008624:	029b      	lsls	r3, r3, #10
 8008626:	b29b      	uxth	r3, r3
 8008628:	4313      	orrs	r3, r2
 800862a:	b29a      	uxth	r2, r3
 800862c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800862e:	801a      	strh	r2, [r3, #0]
 8008630:	e03c      	b.n	80086ac <USB_EPStartXfer+0x4ae>
 8008632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800863c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008640:	f003 031f 	and.w	r3, r3, #31
 8008644:	2b00      	cmp	r3, #0
 8008646:	d104      	bne.n	8008652 <USB_EPStartXfer+0x454>
 8008648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800864c:	3b01      	subs	r3, #1
 800864e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	b29a      	uxth	r2, r3
 8008658:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800865c:	b29b      	uxth	r3, r3
 800865e:	029b      	lsls	r3, r3, #10
 8008660:	b29b      	uxth	r3, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	b29b      	uxth	r3, r3
 8008666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800866a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800866e:	b29a      	uxth	r2, r3
 8008670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008672:	801a      	strh	r2, [r3, #0]
 8008674:	e01a      	b.n	80086ac <USB_EPStartXfer+0x4ae>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d116      	bne.n	80086ac <USB_EPStartXfer+0x4ae>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	653b      	str	r3, [r7, #80]	@ 0x50
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008688:	b29b      	uxth	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800868e:	4413      	add	r3, r2
 8008690:	653b      	str	r3, [r7, #80]	@ 0x50
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	00da      	lsls	r2, r3, #3
 8008698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800869a:	4413      	add	r3, r2
 800869c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80086a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	891b      	ldrh	r3, [r3, #8]
 80086b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	6959      	ldr	r1, [r3, #20]
 80086b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086bc:	b29b      	uxth	r3, r3
 80086be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fc7f 	bl	8008fc6 <USB_WritePMA>
            ep->xfer_buff += len;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	695a      	ldr	r2, [r3, #20]
 80086cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086d0:	441a      	add	r2, r3
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	6a1a      	ldr	r2, [r3, #32]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d907      	bls.n	80086f2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6a1a      	ldr	r2, [r3, #32]
 80086e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ea:	1ad2      	subs	r2, r2, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	621a      	str	r2, [r3, #32]
 80086f0:	e006      	b.n	8008700 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2200      	movs	r2, #0
 80086fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	643b      	str	r3, [r7, #64]	@ 0x40
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	785b      	ldrb	r3, [r3, #1]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d16b      	bne.n	80087e4 <USB_EPStartXfer+0x5e6>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008716:	b29b      	uxth	r3, r3
 8008718:	461a      	mov	r2, r3
 800871a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871c:	4413      	add	r3, r2
 800871e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	00da      	lsls	r2, r3, #3
 8008726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008728:	4413      	add	r3, r2
 800872a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800872e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	b29b      	uxth	r3, r3
 8008736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800873a:	b29a      	uxth	r2, r3
 800873c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873e:	801a      	strh	r2, [r3, #0]
 8008740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10a      	bne.n	800875e <USB_EPStartXfer+0x560>
 8008748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	b29b      	uxth	r3, r3
 800874e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008756:	b29a      	uxth	r2, r3
 8008758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	e05b      	b.n	8008816 <USB_EPStartXfer+0x618>
 800875e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008762:	2b3e      	cmp	r3, #62	@ 0x3e
 8008764:	d81c      	bhi.n	80087a0 <USB_EPStartXfer+0x5a2>
 8008766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800876a:	085b      	lsrs	r3, r3, #1
 800876c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <USB_EPStartXfer+0x588>
 800877c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008780:	3301      	adds	r3, #1
 8008782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29a      	uxth	r2, r3
 800878c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008790:	b29b      	uxth	r3, r3
 8008792:	029b      	lsls	r3, r3, #10
 8008794:	b29b      	uxth	r3, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	b29a      	uxth	r2, r3
 800879a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879c:	801a      	strh	r2, [r3, #0]
 800879e:	e03a      	b.n	8008816 <USB_EPStartXfer+0x618>
 80087a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087a4:	095b      	lsrs	r3, r3, #5
 80087a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087ae:	f003 031f 	and.w	r3, r3, #31
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d104      	bne.n	80087c0 <USB_EPStartXfer+0x5c2>
 80087b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087ba:	3b01      	subs	r3, #1
 80087bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	029b      	lsls	r3, r3, #10
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	4313      	orrs	r3, r2
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087dc:	b29a      	uxth	r2, r3
 80087de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e0:	801a      	strh	r2, [r3, #0]
 80087e2:	e018      	b.n	8008816 <USB_EPStartXfer+0x618>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	785b      	ldrb	r3, [r3, #1]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d114      	bne.n	8008816 <USB_EPStartXfer+0x618>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087f8:	4413      	add	r3, r2
 80087fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	00da      	lsls	r2, r3, #3
 8008802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008804:	4413      	add	r3, r2
 8008806:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800880c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008810:	b29a      	uxth	r2, r3
 8008812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008814:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	895b      	ldrh	r3, [r3, #10]
 800881a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	6959      	ldr	r1, [r3, #20]
 8008822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008826:	b29b      	uxth	r3, r3
 8008828:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fbca 	bl	8008fc6 <USB_WritePMA>
 8008832:	e193      	b.n	8008b5c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29b      	uxth	r3, r3
 800884a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800884e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008852:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	441a      	add	r2, r3
 8008860:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800886c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008874:	b29b      	uxth	r3, r3
 8008876:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008882:	b29b      	uxth	r3, r3
 8008884:	461a      	mov	r2, r3
 8008886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008888:	4413      	add	r3, r2
 800888a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	00da      	lsls	r2, r3, #3
 8008892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008894:	4413      	add	r3, r2
 8008896:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800889a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800889c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	891b      	ldrh	r3, [r3, #8]
 80088aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	6959      	ldr	r1, [r3, #20]
 80088b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fb82 	bl	8008fc6 <USB_WritePMA>
 80088c2:	e14b      	b.n	8008b5c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	6a1a      	ldr	r2, [r3, #32]
 80088c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088cc:	1ad2      	subs	r2, r2, r3
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 809a 	beq.w	8008a1e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	785b      	ldrb	r3, [r3, #1]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d16b      	bne.n	80089ce <USB_EPStartXfer+0x7d0>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008900:	b29b      	uxth	r3, r3
 8008902:	461a      	mov	r2, r3
 8008904:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008906:	4413      	add	r3, r2
 8008908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	00da      	lsls	r2, r3, #3
 8008910:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008912:	4413      	add	r3, r2
 8008914:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008918:	667b      	str	r3, [r7, #100]	@ 0x64
 800891a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008924:	b29a      	uxth	r2, r3
 8008926:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008928:	801a      	strh	r2, [r3, #0]
 800892a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <USB_EPStartXfer+0x74a>
 8008932:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008940:	b29a      	uxth	r2, r3
 8008942:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	e05b      	b.n	8008a00 <USB_EPStartXfer+0x802>
 8008948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800894c:	2b3e      	cmp	r3, #62	@ 0x3e
 800894e:	d81c      	bhi.n	800898a <USB_EPStartXfer+0x78c>
 8008950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800895a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <USB_EPStartXfer+0x772>
 8008966:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800896a:	3301      	adds	r3, #1
 800896c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29a      	uxth	r2, r3
 8008976:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800897a:	b29b      	uxth	r3, r3
 800897c:	029b      	lsls	r3, r3, #10
 800897e:	b29b      	uxth	r3, r3
 8008980:	4313      	orrs	r3, r2
 8008982:	b29a      	uxth	r2, r3
 8008984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008986:	801a      	strh	r2, [r3, #0]
 8008988:	e03a      	b.n	8008a00 <USB_EPStartXfer+0x802>
 800898a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800898e:	095b      	lsrs	r3, r3, #5
 8008990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008998:	f003 031f 	and.w	r3, r3, #31
 800899c:	2b00      	cmp	r3, #0
 800899e:	d104      	bne.n	80089aa <USB_EPStartXfer+0x7ac>
 80089a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089a4:	3b01      	subs	r3, #1
 80089a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	029b      	lsls	r3, r3, #10
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	4313      	orrs	r3, r2
 80089bc:	b29b      	uxth	r3, r3
 80089be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089ca:	801a      	strh	r2, [r3, #0]
 80089cc:	e018      	b.n	8008a00 <USB_EPStartXfer+0x802>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d114      	bne.n	8008a00 <USB_EPStartXfer+0x802>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089dc:	b29b      	uxth	r3, r3
 80089de:	461a      	mov	r2, r3
 80089e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089e2:	4413      	add	r3, r2
 80089e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	00da      	lsls	r2, r3, #3
 80089ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089ee:	4413      	add	r3, r2
 80089f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	895b      	ldrh	r3, [r3, #10]
 8008a04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	6959      	ldr	r1, [r3, #20]
 8008a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fad5 	bl	8008fc6 <USB_WritePMA>
 8008a1c:	e09e      	b.n	8008b5c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	785b      	ldrb	r3, [r3, #1]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d16b      	bne.n	8008afe <USB_EPStartXfer+0x900>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	461a      	mov	r2, r3
 8008a34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a36:	4413      	add	r3, r2
 8008a38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	00da      	lsls	r2, r3, #3
 8008a40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a42:	4413      	add	r3, r2
 8008a44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a58:	801a      	strh	r2, [r3, #0]
 8008a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <USB_EPStartXfer+0x87a>
 8008a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a74:	801a      	strh	r2, [r3, #0]
 8008a76:	e063      	b.n	8008b40 <USB_EPStartXfer+0x942>
 8008a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a7e:	d81c      	bhi.n	8008aba <USB_EPStartXfer+0x8bc>
 8008a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a84:	085b      	lsrs	r3, r3, #1
 8008a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d004      	beq.n	8008aa0 <USB_EPStartXfer+0x8a2>
 8008a96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	029b      	lsls	r3, r3, #10
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	e042      	b.n	8008b40 <USB_EPStartXfer+0x942>
 8008aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ac8:	f003 031f 	and.w	r3, r3, #31
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d104      	bne.n	8008ada <USB_EPStartXfer+0x8dc>
 8008ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	029b      	lsls	r3, r3, #10
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	4313      	orrs	r3, r2
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008afa:	801a      	strh	r2, [r3, #0]
 8008afc:	e020      	b.n	8008b40 <USB_EPStartXfer+0x942>
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	785b      	ldrb	r3, [r3, #1]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d11c      	bne.n	8008b40 <USB_EPStartXfer+0x942>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	461a      	mov	r2, r3
 8008b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	00da      	lsls	r2, r3, #3
 8008b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	891b      	ldrh	r3, [r3, #8]
 8008b44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	6959      	ldr	r1, [r3, #20]
 8008b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fa35 	bl	8008fc6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b72:	817b      	strh	r3, [r7, #10]
 8008b74:	897b      	ldrh	r3, [r7, #10]
 8008b76:	f083 0310 	eor.w	r3, r3, #16
 8008b7a:	817b      	strh	r3, [r7, #10]
 8008b7c:	897b      	ldrh	r3, [r7, #10]
 8008b7e:	f083 0320 	eor.w	r3, r3, #32
 8008b82:	817b      	strh	r3, [r7, #10]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	441a      	add	r2, r3
 8008b8e:	897b      	ldrh	r3, [r7, #10]
 8008b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	8013      	strh	r3, [r2, #0]
 8008ba4:	e0d5      	b.n	8008d52 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	7b1b      	ldrb	r3, [r3, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d156      	bne.n	8008c5c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d122      	bne.n	8008bfc <USB_EPStartXfer+0x9fe>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	78db      	ldrb	r3, [r3, #3]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d11e      	bne.n	8008bfc <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bd4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	441a      	add	r2, r3
 8008be2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	8013      	strh	r3, [r2, #0]
 8008bfa:	e01d      	b.n	8008c38 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c12:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	441a      	add	r2, r3
 8008c20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8008c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	699a      	ldr	r2, [r3, #24]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d907      	bls.n	8008c54 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	699a      	ldr	r2, [r3, #24]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	1ad2      	subs	r2, r2, r3
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	619a      	str	r2, [r3, #24]
 8008c52:	e054      	b.n	8008cfe <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2200      	movs	r2, #0
 8008c58:	619a      	str	r2, [r3, #24]
 8008c5a:	e050      	b.n	8008cfe <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	78db      	ldrb	r3, [r3, #3]
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d142      	bne.n	8008cea <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d048      	beq.n	8008cfe <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <USB_EPStartXfer+0xa96>
 8008c88:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10b      	bne.n	8008cac <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c94:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d12e      	bne.n	8008cfe <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ca0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d128      	bne.n	8008cfe <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cc2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	441a      	add	r2, r3
 8008cd0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008cd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ce0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	8013      	strh	r3, [r2, #0]
 8008ce8:	e009      	b.n	8008cfe <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	78db      	ldrb	r3, [r3, #3]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d103      	bne.n	8008cfa <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	619a      	str	r2, [r3, #24]
 8008cf8:	e001      	b.n	8008cfe <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e02a      	b.n	8008d54 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	441a      	add	r2, r3
 8008d3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	37b0      	adds	r7, #176	@ 0xb0
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	785b      	ldrb	r3, [r3, #1]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d020      	beq.n	8008db0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d84:	81bb      	strh	r3, [r7, #12]
 8008d86:	89bb      	ldrh	r3, [r7, #12]
 8008d88:	f083 0310 	eor.w	r3, r3, #16
 8008d8c:	81bb      	strh	r3, [r7, #12]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	441a      	add	r2, r3
 8008d98:	89bb      	ldrh	r3, [r7, #12]
 8008d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	8013      	strh	r3, [r2, #0]
 8008dae:	e01f      	b.n	8008df0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dc6:	81fb      	strh	r3, [r7, #14]
 8008dc8:	89fb      	ldrh	r3, [r7, #14]
 8008dca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008dce:	81fb      	strh	r3, [r7, #14]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	441a      	add	r2, r3
 8008dda:	89fb      	ldrh	r3, [r7, #14]
 8008ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b087      	sub	sp, #28
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	785b      	ldrb	r3, [r3, #1]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d04c      	beq.n	8008eaa <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	823b      	strh	r3, [r7, #16]
 8008e1e:	8a3b      	ldrh	r3, [r7, #16]
 8008e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01b      	beq.n	8008e60 <USB_EPClearStall+0x62>
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e3e:	81fb      	strh	r3, [r7, #14]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	441a      	add	r2, r3
 8008e4a:	89fb      	ldrh	r3, [r7, #14]
 8008e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	78db      	ldrb	r3, [r3, #3]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d06c      	beq.n	8008f42 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e7e:	81bb      	strh	r3, [r7, #12]
 8008e80:	89bb      	ldrh	r3, [r7, #12]
 8008e82:	f083 0320 	eor.w	r3, r3, #32
 8008e86:	81bb      	strh	r3, [r7, #12]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	441a      	add	r2, r3
 8008e92:	89bb      	ldrh	r3, [r7, #12]
 8008e94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	8013      	strh	r3, [r2, #0]
 8008ea8:	e04b      	b.n	8008f42 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	82fb      	strh	r3, [r7, #22]
 8008eb8:	8afb      	ldrh	r3, [r7, #22]
 8008eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d01b      	beq.n	8008efa <USB_EPClearStall+0xfc>
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed8:	82bb      	strh	r3, [r7, #20]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	441a      	add	r2, r3
 8008ee4:	8abb      	ldrh	r3, [r7, #20]
 8008ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f10:	827b      	strh	r3, [r7, #18]
 8008f12:	8a7b      	ldrh	r3, [r7, #18]
 8008f14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f18:	827b      	strh	r3, [r7, #18]
 8008f1a:	8a7b      	ldrh	r3, [r7, #18]
 8008f1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f20:	827b      	strh	r3, [r7, #18]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	441a      	add	r2, r3
 8008f2c:	8a7b      	ldrh	r3, [r7, #18]
 8008f2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	371c      	adds	r7, #28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d103      	bne.n	8008f6a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2280      	movs	r2, #128	@ 0x80
 8008f66:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b085      	sub	sp, #20
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b08b      	sub	sp, #44	@ 0x2c
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	80fb      	strh	r3, [r7, #6]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008fdc:	88bb      	ldrh	r3, [r7, #4]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	085b      	lsrs	r3, r3, #1
 8008fe2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fec:	88fa      	ldrh	r2, [r7, #6]
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ff6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ffc:	e01b      	b.n	8009036 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	3301      	adds	r3, #1
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	b21a      	sxth	r2, r3
 800900e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009012:	4313      	orrs	r3, r2
 8009014:	b21b      	sxth	r3, r3
 8009016:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	8a7a      	ldrh	r2, [r7, #18]
 800901c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	3302      	adds	r3, #2
 8009022:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	3301      	adds	r3, #1
 8009028:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	3301      	adds	r3, #1
 800902e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009032:	3b01      	subs	r3, #1
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e0      	bne.n	8008ffe <USB_WritePMA+0x38>
  }
}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	372c      	adds	r7, #44	@ 0x2c
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800904a:	b480      	push	{r7}
 800904c:	b08b      	sub	sp, #44	@ 0x2c
 800904e:	af00      	add	r7, sp, #0
 8009050:	60f8      	str	r0, [r7, #12]
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	4611      	mov	r1, r2
 8009056:	461a      	mov	r2, r3
 8009058:	460b      	mov	r3, r1
 800905a:	80fb      	strh	r3, [r7, #6]
 800905c:	4613      	mov	r3, r2
 800905e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009060:	88bb      	ldrh	r3, [r7, #4]
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	b29b      	uxth	r3, r3
 8009066:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009070:	88fa      	ldrh	r2, [r7, #6]
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800907a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009080:	e018      	b.n	80090b4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800908a:	6a3b      	ldr	r3, [r7, #32]
 800908c:	3302      	adds	r3, #2
 800908e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	b2da      	uxtb	r2, r3
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	3301      	adds	r3, #1
 800909c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	3301      	adds	r3, #1
 80090ac:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	3b01      	subs	r3, #1
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e3      	bne.n	8009082 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80090ba:	88bb      	ldrh	r3, [r7, #4]
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d007      	beq.n	80090d6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	701a      	strb	r2, [r3, #0]
  }
}
 80090d6:	bf00      	nop
 80090d8:	372c      	adds	r7, #44	@ 0x2c
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090ee:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80090f2:	f002 f911 	bl	800b318 <USBD_static_malloc>
 80090f6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d105      	bne.n	800910a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009106:	2302      	movs	r3, #2
 8009108:	e066      	b.n	80091d8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	7c1b      	ldrb	r3, [r3, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d119      	bne.n	800914e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800911a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800911e:	2202      	movs	r2, #2
 8009120:	2181      	movs	r1, #129	@ 0x81
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 ff9f 	bl	800b066 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800912e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009132:	2202      	movs	r2, #2
 8009134:	2101      	movs	r1, #1
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 ff95 	bl	800b066 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2210      	movs	r2, #16
 8009148:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800914c:	e016      	b.n	800917c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800914e:	2340      	movs	r3, #64	@ 0x40
 8009150:	2202      	movs	r2, #2
 8009152:	2181      	movs	r1, #129	@ 0x81
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 ff86 	bl	800b066 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009160:	2340      	movs	r3, #64	@ 0x40
 8009162:	2202      	movs	r2, #2
 8009164:	2101      	movs	r1, #1
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 ff7d 	bl	800b066 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2210      	movs	r2, #16
 8009178:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800917c:	2308      	movs	r3, #8
 800917e:	2203      	movs	r2, #3
 8009180:	2182      	movs	r1, #130	@ 0x82
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 ff6f 	bl	800b066 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7c1b      	ldrb	r3, [r3, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d109      	bne.n	80091c6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091bc:	2101      	movs	r1, #1
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f002 f840 	bl	800b244 <USBD_LL_PrepareReceive>
 80091c4:	e007      	b.n	80091d6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091cc:	2340      	movs	r3, #64	@ 0x40
 80091ce:	2101      	movs	r1, #1
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f002 f837 	bl	800b244 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80091ec:	2181      	movs	r1, #129	@ 0x81
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 ff5f 	bl	800b0b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80091fa:	2101      	movs	r1, #1
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f001 ff58 	bl	800b0b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800920a:	2182      	movs	r1, #130	@ 0x82
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f001 ff50 	bl	800b0b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00e      	beq.n	800924a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800923c:	4618      	mov	r0, r3
 800923e:	f002 f879 	bl	800b334 <USBD_static_free>
    pdev->pClassData = NULL;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009264:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009278:	2303      	movs	r3, #3
 800927a:	e0af      	b.n	80093dc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009284:	2b00      	cmp	r3, #0
 8009286:	d03f      	beq.n	8009308 <USBD_CDC_Setup+0xb4>
 8009288:	2b20      	cmp	r3, #32
 800928a:	f040 809f 	bne.w	80093cc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	88db      	ldrh	r3, [r3, #6]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d02e      	beq.n	80092f4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	b25b      	sxtb	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	da16      	bge.n	80092ce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80092ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	88d2      	ldrh	r2, [r2, #6]
 80092b2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	88db      	ldrh	r3, [r3, #6]
 80092b8:	2b07      	cmp	r3, #7
 80092ba:	bf28      	it	cs
 80092bc:	2307      	movcs	r3, #7
 80092be:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	89fa      	ldrh	r2, [r7, #14]
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 facd 	bl	800a866 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80092cc:	e085      	b.n	80093da <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	785a      	ldrb	r2, [r3, #1]
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	88db      	ldrh	r3, [r3, #6]
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80092e4:	6939      	ldr	r1, [r7, #16]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	88db      	ldrh	r3, [r3, #6]
 80092ea:	461a      	mov	r2, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 fae6 	bl	800a8be <USBD_CtlPrepareRx>
      break;
 80092f2:	e072      	b.n	80093da <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	7850      	ldrb	r0, [r2, #1]
 8009300:	2200      	movs	r2, #0
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	4798      	blx	r3
      break;
 8009306:	e068      	b.n	80093da <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	785b      	ldrb	r3, [r3, #1]
 800930c:	2b0b      	cmp	r3, #11
 800930e:	d852      	bhi.n	80093b6 <USBD_CDC_Setup+0x162>
 8009310:	a201      	add	r2, pc, #4	@ (adr r2, 8009318 <USBD_CDC_Setup+0xc4>)
 8009312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009316:	bf00      	nop
 8009318:	08009349 	.word	0x08009349
 800931c:	080093c5 	.word	0x080093c5
 8009320:	080093b7 	.word	0x080093b7
 8009324:	080093b7 	.word	0x080093b7
 8009328:	080093b7 	.word	0x080093b7
 800932c:	080093b7 	.word	0x080093b7
 8009330:	080093b7 	.word	0x080093b7
 8009334:	080093b7 	.word	0x080093b7
 8009338:	080093b7 	.word	0x080093b7
 800933c:	080093b7 	.word	0x080093b7
 8009340:	08009373 	.word	0x08009373
 8009344:	0800939d 	.word	0x0800939d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b03      	cmp	r3, #3
 8009352:	d107      	bne.n	8009364 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009354:	f107 030a 	add.w	r3, r7, #10
 8009358:	2202      	movs	r2, #2
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 fa82 	bl	800a866 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009362:	e032      	b.n	80093ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 fa0c 	bl	800a784 <USBD_CtlError>
            ret = USBD_FAIL;
 800936c:	2303      	movs	r3, #3
 800936e:	75fb      	strb	r3, [r7, #23]
          break;
 8009370:	e02b      	b.n	80093ca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b03      	cmp	r3, #3
 800937c:	d107      	bne.n	800938e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800937e:	f107 030d 	add.w	r3, r7, #13
 8009382:	2201      	movs	r2, #1
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 fa6d 	bl	800a866 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800938c:	e01d      	b.n	80093ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f001 f9f7 	bl	800a784 <USBD_CtlError>
            ret = USBD_FAIL;
 8009396:	2303      	movs	r3, #3
 8009398:	75fb      	strb	r3, [r7, #23]
          break;
 800939a:	e016      	b.n	80093ca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d00f      	beq.n	80093c8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f001 f9ea 	bl	800a784 <USBD_CtlError>
            ret = USBD_FAIL;
 80093b0:	2303      	movs	r3, #3
 80093b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093b4:	e008      	b.n	80093c8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 f9e3 	bl	800a784 <USBD_CtlError>
          ret = USBD_FAIL;
 80093be:	2303      	movs	r3, #3
 80093c0:	75fb      	strb	r3, [r7, #23]
          break;
 80093c2:	e002      	b.n	80093ca <USBD_CDC_Setup+0x176>
          break;
 80093c4:	bf00      	nop
 80093c6:	e008      	b.n	80093da <USBD_CDC_Setup+0x186>
          break;
 80093c8:	bf00      	nop
      }
      break;
 80093ca:	e006      	b.n	80093da <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f001 f9d8 	bl	800a784 <USBD_CtlError>
      ret = USBD_FAIL;
 80093d4:	2303      	movs	r3, #3
 80093d6:	75fb      	strb	r3, [r7, #23]
      break;
 80093d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80093da:	7dfb      	ldrb	r3, [r7, #23]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3718      	adds	r7, #24
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80093f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009402:	2303      	movs	r3, #3
 8009404:	e04f      	b.n	80094a6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800940c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4613      	mov	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	440b      	add	r3, r1
 800941c:	3318      	adds	r3, #24
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d029      	beq.n	8009478 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009424:	78fa      	ldrb	r2, [r7, #3]
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	4613      	mov	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	440b      	add	r3, r1
 8009432:	3318      	adds	r3, #24
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	78f9      	ldrb	r1, [r7, #3]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	460b      	mov	r3, r1
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	4403      	add	r3, r0
 8009444:	3320      	adds	r3, #32
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	fbb2 f1f3 	udiv	r1, r2, r3
 800944c:	fb01 f303 	mul.w	r3, r1, r3
 8009450:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009452:	2b00      	cmp	r3, #0
 8009454:	d110      	bne.n	8009478 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009456:	78fa      	ldrb	r2, [r7, #3]
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	440b      	add	r3, r1
 8009464:	3318      	adds	r3, #24
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800946a:	78f9      	ldrb	r1, [r7, #3]
 800946c:	2300      	movs	r3, #0
 800946e:	2200      	movs	r2, #0
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 fec6 	bl	800b202 <USBD_LL_Transmit>
 8009476:	e015      	b.n	80094a4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2200      	movs	r2, #0
 800947c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00b      	beq.n	80094a4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80094a0:	78fa      	ldrb	r2, [r7, #3]
 80094a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e015      	b.n	80094fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094d0:	78fb      	ldrb	r3, [r7, #3]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f001 fed6 	bl	800b286 <USBD_LL_GetRxDataSize>
 80094da:	4602      	mov	r2, r0
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80094f6:	4611      	mov	r1, r2
 80094f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009512:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d101      	bne.n	800951e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800951a:	2303      	movs	r3, #3
 800951c:	e01a      	b.n	8009554 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d014      	beq.n	8009552 <USBD_CDC_EP0_RxReady+0x4e>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800952e:	2bff      	cmp	r3, #255	@ 0xff
 8009530:	d00f      	beq.n	8009552 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009540:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009548:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	22ff      	movs	r2, #255	@ 0xff
 800954e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2243      	movs	r2, #67	@ 0x43
 8009568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800956a:	4b03      	ldr	r3, [pc, #12]	@ (8009578 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800956c:	4618      	mov	r0, r3
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	200000a4 	.word	0x200000a4

0800957c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2243      	movs	r2, #67	@ 0x43
 8009588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800958a:	4b03      	ldr	r3, [pc, #12]	@ (8009598 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800958c:	4618      	mov	r0, r3
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	20000060 	.word	0x20000060

0800959c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2243      	movs	r2, #67	@ 0x43
 80095a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80095aa:	4b03      	ldr	r3, [pc, #12]	@ (80095b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	200000e8 	.word	0x200000e8

080095bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	220a      	movs	r2, #10
 80095c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80095ca:	4b03      	ldr	r3, [pc, #12]	@ (80095d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	2000001c 	.word	0x2000001c

080095dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e004      	b.n	80095fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009606:	b480      	push	{r7}
 8009608:	b087      	sub	sp, #28
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009618:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009620:	2303      	movs	r3, #3
 8009622:	e008      	b.n	8009636 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	371c      	adds	r7, #28
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009642:	b480      	push	{r7}
 8009644:	b085      	sub	sp, #20
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009652:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800965a:	2303      	movs	r3, #3
 800965c:	e004      	b.n	8009668 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009682:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009684:	2301      	movs	r3, #1
 8009686:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009692:	2303      	movs	r3, #3
 8009694:	e01a      	b.n	80096cc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800969c:	2b00      	cmp	r3, #0
 800969e:	d114      	bne.n	80096ca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80096be:	2181      	movs	r1, #129	@ 0x81
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 fd9e 	bl	800b202 <USBD_LL_Transmit>

    ret = USBD_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e016      	b.n	8009720 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	7c1b      	ldrb	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d109      	bne.n	800970e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009704:	2101      	movs	r1, #1
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 fd9c 	bl	800b244 <USBD_LL_PrepareReceive>
 800970c:	e007      	b.n	800971e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009714:	2340      	movs	r3, #64	@ 0x40
 8009716:	2101      	movs	r1, #1
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 fd93 	bl	800b244 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	4613      	mov	r3, r2
 8009734:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800973c:	2303      	movs	r3, #3
 800973e:	e01f      	b.n	8009780 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	79fa      	ldrb	r2, [r7, #7]
 8009772:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f001 fbfb 	bl	800af70 <USBD_LL_Init>
 800977a:	4603      	mov	r3, r0
 800977c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800977e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009792:	2300      	movs	r3, #0
 8009794:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800979c:	2303      	movs	r3, #3
 800979e:	e016      	b.n	80097ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00b      	beq.n	80097cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097bc:	f107 020e 	add.w	r2, r7, #14
 80097c0:	4610      	mov	r0, r2
 80097c2:	4798      	blx	r3
 80097c4:	4602      	mov	r2, r0
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f001 fc26 	bl	800b030 <USBD_LL_Start>
 80097e4:	4603      	mov	r3, r0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009810:	2303      	movs	r3, #3
 8009812:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800981a:	2b00      	cmp	r3, #0
 800981c:	d009      	beq.n	8009832 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	78fa      	ldrb	r2, [r7, #3]
 8009828:	4611      	mov	r1, r2
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009832:	7bfb      	ldrb	r3, [r7, #15]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800984e:	2b00      	cmp	r3, #0
 8009850:	d007      	beq.n	8009862 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	78fa      	ldrb	r2, [r7, #3]
 800985c:	4611      	mov	r1, r2
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	4798      	blx	r3
  }

  return USBD_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f000 ff46 	bl	800a710 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009892:	461a      	mov	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80098a0:	f003 031f 	and.w	r3, r3, #31
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d01a      	beq.n	80098de <USBD_LL_SetupStage+0x72>
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d822      	bhi.n	80098f2 <USBD_LL_SetupStage+0x86>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <USBD_LL_SetupStage+0x4a>
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d00a      	beq.n	80098ca <USBD_LL_SetupStage+0x5e>
 80098b4:	e01d      	b.n	80098f2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f9ee 	bl	8009ca0 <USBD_StdDevReq>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]
      break;
 80098c8:	e020      	b.n	800990c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa52 	bl	8009d7c <USBD_StdItfReq>
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]
      break;
 80098dc:	e016      	b.n	800990c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa91 	bl	8009e0e <USBD_StdEPReq>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]
      break;
 80098f0:	e00c      	b.n	800990c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80098f8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 fbf5 	bl	800b0f0 <USBD_LL_StallEP>
 8009906:	4603      	mov	r3, r0
 8009908:	73fb      	strb	r3, [r7, #15]
      break;
 800990a:	bf00      	nop
  }

  return ret;
 800990c:	7bfb      	ldrb	r3, [r7, #15]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b086      	sub	sp, #24
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	460b      	mov	r3, r1
 8009920:	607a      	str	r2, [r7, #4]
 8009922:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009924:	7afb      	ldrb	r3, [r7, #11]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d138      	bne.n	800999c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009930:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009938:	2b03      	cmp	r3, #3
 800993a:	d14a      	bne.n	80099d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	429a      	cmp	r2, r3
 8009946:	d913      	bls.n	8009970 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	1ad2      	subs	r2, r2, r3
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	4293      	cmp	r3, r2
 8009960:	bf28      	it	cs
 8009962:	4613      	movcs	r3, r2
 8009964:	461a      	mov	r2, r3
 8009966:	6879      	ldr	r1, [r7, #4]
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 ffc5 	bl	800a8f8 <USBD_CtlContinueRx>
 800996e:	e030      	b.n	80099d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b03      	cmp	r3, #3
 800997a:	d10b      	bne.n	8009994 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d005      	beq.n	8009994 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 ffc0 	bl	800a91a <USBD_CtlSendStatus>
 800999a:	e01a      	b.n	80099d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d114      	bne.n	80099d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00e      	beq.n	80099d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	7afa      	ldrb	r2, [r7, #11]
 80099be:	4611      	mov	r1, r2
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	4798      	blx	r3
 80099c4:	4603      	mov	r3, r0
 80099c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	e000      	b.n	80099d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	460b      	mov	r3, r1
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d16b      	bne.n	8009ac8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3314      	adds	r3, #20
 80099f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d156      	bne.n	8009aae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d914      	bls.n	8009a36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	1ad2      	subs	r2, r2, r3
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f000 ff3a 	bl	800a89c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f001 fc08 	bl	800b244 <USBD_LL_PrepareReceive>
 8009a34:	e03b      	b.n	8009aae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	68da      	ldr	r2, [r3, #12]
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d11c      	bne.n	8009a7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d316      	bcc.n	8009a7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d20f      	bcs.n	8009a7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	2100      	movs	r1, #0
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 ff1b 	bl	800a89c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a6e:	2300      	movs	r3, #0
 8009a70:	2200      	movs	r2, #0
 8009a72:	2100      	movs	r1, #0
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f001 fbe5 	bl	800b244 <USBD_LL_PrepareReceive>
 8009a7a:	e018      	b.n	8009aae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d10b      	bne.n	8009aa0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d005      	beq.n	8009aa0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009aa0:	2180      	movs	r1, #128	@ 0x80
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f001 fb24 	bl	800b0f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f000 ff49 	bl	800a940 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d122      	bne.n	8009afe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff fe98 	bl	80097ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009ac6:	e01a      	b.n	8009afe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d114      	bne.n	8009afe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00e      	beq.n	8009afe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	7afa      	ldrb	r2, [r7, #11]
 8009aea:	4611      	mov	r1, r2
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	4798      	blx	r3
 8009af0:	4603      	mov	r3, r0
 8009af2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
 8009afc:	e000      	b.n	8009b00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d101      	bne.n	8009b3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e02f      	b.n	8009b9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00f      	beq.n	8009b66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d009      	beq.n	8009b66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6852      	ldr	r2, [r2, #4]
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	4611      	mov	r1, r2
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b66:	2340      	movs	r3, #64	@ 0x40
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f001 fa7a 	bl	800b066 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2240      	movs	r2, #64	@ 0x40
 8009b7e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b82:	2340      	movs	r3, #64	@ 0x40
 8009b84:	2200      	movs	r2, #0
 8009b86:	2180      	movs	r1, #128	@ 0x80
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 fa6c 	bl	800b066 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2240      	movs	r2, #64	@ 0x40
 8009b98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	78fa      	ldrb	r2, [r7, #3]
 8009bb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2204      	movs	r2, #4
 8009bde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b04      	cmp	r3, #4
 8009c02:	d106      	bne.n	8009c12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e012      	b.n	8009c5c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d10b      	bne.n	8009c5a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d005      	beq.n	8009c5a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c54:	69db      	ldr	r3, [r3, #28]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c82:	8a3b      	ldrh	r3, [r7, #16]
 8009c84:	021b      	lsls	r3, r3, #8
 8009c86:	b21a      	sxth	r2, r3
 8009c88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	b21b      	sxth	r3, r3
 8009c90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c92:	89fb      	ldrh	r3, [r7, #14]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	371c      	adds	r7, #28
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cb6:	2b40      	cmp	r3, #64	@ 0x40
 8009cb8:	d005      	beq.n	8009cc6 <USBD_StdDevReq+0x26>
 8009cba:	2b40      	cmp	r3, #64	@ 0x40
 8009cbc:	d853      	bhi.n	8009d66 <USBD_StdDevReq+0xc6>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00b      	beq.n	8009cda <USBD_StdDevReq+0x3a>
 8009cc2:	2b20      	cmp	r3, #32
 8009cc4:	d14f      	bne.n	8009d66 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	4798      	blx	r3
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd8:	e04a      	b.n	8009d70 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	2b09      	cmp	r3, #9
 8009ce0:	d83b      	bhi.n	8009d5a <USBD_StdDevReq+0xba>
 8009ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ce8 <USBD_StdDevReq+0x48>)
 8009ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce8:	08009d3d 	.word	0x08009d3d
 8009cec:	08009d51 	.word	0x08009d51
 8009cf0:	08009d5b 	.word	0x08009d5b
 8009cf4:	08009d47 	.word	0x08009d47
 8009cf8:	08009d5b 	.word	0x08009d5b
 8009cfc:	08009d1b 	.word	0x08009d1b
 8009d00:	08009d11 	.word	0x08009d11
 8009d04:	08009d5b 	.word	0x08009d5b
 8009d08:	08009d33 	.word	0x08009d33
 8009d0c:	08009d25 	.word	0x08009d25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f9de 	bl	800a0d4 <USBD_GetDescriptor>
          break;
 8009d18:	e024      	b.n	8009d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fb6d 	bl	800a3fc <USBD_SetAddress>
          break;
 8009d22:	e01f      	b.n	8009d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fbac 	bl	800a484 <USBD_SetConfig>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]
          break;
 8009d30:	e018      	b.n	8009d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fc4b 	bl	800a5d0 <USBD_GetConfig>
          break;
 8009d3a:	e013      	b.n	8009d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fc7c 	bl	800a63c <USBD_GetStatus>
          break;
 8009d44:	e00e      	b.n	8009d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fcab 	bl	800a6a4 <USBD_SetFeature>
          break;
 8009d4e:	e009      	b.n	8009d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fcba 	bl	800a6cc <USBD_ClrFeature>
          break;
 8009d58:	e004      	b.n	8009d64 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fd11 	bl	800a784 <USBD_CtlError>
          break;
 8009d62:	bf00      	nop
      }
      break;
 8009d64:	e004      	b.n	8009d70 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fd0b 	bl	800a784 <USBD_CtlError>
      break;
 8009d6e:	bf00      	nop
  }

  return ret;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop

08009d7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d92:	2b40      	cmp	r3, #64	@ 0x40
 8009d94:	d005      	beq.n	8009da2 <USBD_StdItfReq+0x26>
 8009d96:	2b40      	cmp	r3, #64	@ 0x40
 8009d98:	d82f      	bhi.n	8009dfa <USBD_StdItfReq+0x7e>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <USBD_StdItfReq+0x26>
 8009d9e:	2b20      	cmp	r3, #32
 8009da0:	d12b      	bne.n	8009dfa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	3b01      	subs	r3, #1
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d81d      	bhi.n	8009dec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	889b      	ldrh	r3, [r3, #4]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d813      	bhi.n	8009de2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	4798      	blx	r3
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	88db      	ldrh	r3, [r3, #6]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d110      	bne.n	8009df6 <USBD_StdItfReq+0x7a>
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10d      	bne.n	8009df6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fd9d 	bl	800a91a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009de0:	e009      	b.n	8009df6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fccd 	bl	800a784 <USBD_CtlError>
          break;
 8009dea:	e004      	b.n	8009df6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fcc8 	bl	800a784 <USBD_CtlError>
          break;
 8009df4:	e000      	b.n	8009df8 <USBD_StdItfReq+0x7c>
          break;
 8009df6:	bf00      	nop
      }
      break;
 8009df8:	e004      	b.n	8009e04 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fcc1 	bl	800a784 <USBD_CtlError>
      break;
 8009e02:	bf00      	nop
  }

  return ret;
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	889b      	ldrh	r3, [r3, #4]
 8009e20:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e2a:	2b40      	cmp	r3, #64	@ 0x40
 8009e2c:	d007      	beq.n	8009e3e <USBD_StdEPReq+0x30>
 8009e2e:	2b40      	cmp	r3, #64	@ 0x40
 8009e30:	f200 8145 	bhi.w	800a0be <USBD_StdEPReq+0x2b0>
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00c      	beq.n	8009e52 <USBD_StdEPReq+0x44>
 8009e38:	2b20      	cmp	r3, #32
 8009e3a:	f040 8140 	bne.w	800a0be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	4798      	blx	r3
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e50:	e13a      	b.n	800a0c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	785b      	ldrb	r3, [r3, #1]
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d007      	beq.n	8009e6a <USBD_StdEPReq+0x5c>
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	f300 8129 	bgt.w	800a0b2 <USBD_StdEPReq+0x2a4>
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d07f      	beq.n	8009f64 <USBD_StdEPReq+0x156>
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d03c      	beq.n	8009ee2 <USBD_StdEPReq+0xd4>
 8009e68:	e123      	b.n	800a0b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d002      	beq.n	8009e7c <USBD_StdEPReq+0x6e>
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d016      	beq.n	8009ea8 <USBD_StdEPReq+0x9a>
 8009e7a:	e02c      	b.n	8009ed6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00d      	beq.n	8009e9e <USBD_StdEPReq+0x90>
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
 8009e84:	2b80      	cmp	r3, #128	@ 0x80
 8009e86:	d00a      	beq.n	8009e9e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 f92f 	bl	800b0f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e92:	2180      	movs	r1, #128	@ 0x80
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 f92b 	bl	800b0f0 <USBD_LL_StallEP>
 8009e9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e9c:	e020      	b.n	8009ee0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009e9e:	6839      	ldr	r1, [r7, #0]
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fc6f 	bl	800a784 <USBD_CtlError>
              break;
 8009ea6:	e01b      	b.n	8009ee0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	885b      	ldrh	r3, [r3, #2]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10e      	bne.n	8009ece <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00b      	beq.n	8009ece <USBD_StdEPReq+0xc0>
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
 8009eb8:	2b80      	cmp	r3, #128	@ 0x80
 8009eba:	d008      	beq.n	8009ece <USBD_StdEPReq+0xc0>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	88db      	ldrh	r3, [r3, #6]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d104      	bne.n	8009ece <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f001 f911 	bl	800b0f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fd23 	bl	800a91a <USBD_CtlSendStatus>

              break;
 8009ed4:	e004      	b.n	8009ee0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fc53 	bl	800a784 <USBD_CtlError>
              break;
 8009ede:	bf00      	nop
          }
          break;
 8009ee0:	e0ec      	b.n	800a0bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d002      	beq.n	8009ef4 <USBD_StdEPReq+0xe6>
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d016      	beq.n	8009f20 <USBD_StdEPReq+0x112>
 8009ef2:	e030      	b.n	8009f56 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00d      	beq.n	8009f16 <USBD_StdEPReq+0x108>
 8009efa:	7bbb      	ldrb	r3, [r7, #14]
 8009efc:	2b80      	cmp	r3, #128	@ 0x80
 8009efe:	d00a      	beq.n	8009f16 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f001 f8f3 	bl	800b0f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f0a:	2180      	movs	r1, #128	@ 0x80
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 f8ef 	bl	800b0f0 <USBD_LL_StallEP>
 8009f12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f14:	e025      	b.n	8009f62 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fc33 	bl	800a784 <USBD_CtlError>
              break;
 8009f1e:	e020      	b.n	8009f62 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	885b      	ldrh	r3, [r3, #2]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d11b      	bne.n	8009f60 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f28:	7bbb      	ldrb	r3, [r7, #14]
 8009f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d004      	beq.n	8009f3c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 f8f9 	bl	800b12e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fcec 	bl	800a91a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	4798      	blx	r3
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009f54:	e004      	b.n	8009f60 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fc13 	bl	800a784 <USBD_CtlError>
              break;
 8009f5e:	e000      	b.n	8009f62 <USBD_StdEPReq+0x154>
              break;
 8009f60:	bf00      	nop
          }
          break;
 8009f62:	e0ab      	b.n	800a0bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d002      	beq.n	8009f76 <USBD_StdEPReq+0x168>
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d032      	beq.n	8009fda <USBD_StdEPReq+0x1cc>
 8009f74:	e097      	b.n	800a0a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d007      	beq.n	8009f8c <USBD_StdEPReq+0x17e>
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	2b80      	cmp	r3, #128	@ 0x80
 8009f80:	d004      	beq.n	8009f8c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fbfd 	bl	800a784 <USBD_CtlError>
                break;
 8009f8a:	e091      	b.n	800a0b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	da0b      	bge.n	8009fac <USBD_StdEPReq+0x19e>
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	3310      	adds	r3, #16
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	3304      	adds	r3, #4
 8009faa:	e00b      	b.n	8009fc4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fac:	7bbb      	ldrb	r3, [r7, #14]
 8009fae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fc47 	bl	800a866 <USBD_CtlSendData>
              break;
 8009fd8:	e06a      	b.n	800a0b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da11      	bge.n	800a006 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	f003 020f 	and.w	r2, r3, #15
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	440b      	add	r3, r1
 8009ff4:	3324      	adds	r3, #36	@ 0x24
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d117      	bne.n	800a02c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fbc0 	bl	800a784 <USBD_CtlError>
                  break;
 800a004:	e054      	b.n	800a0b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a006:	7bbb      	ldrb	r3, [r7, #14]
 800a008:	f003 020f 	and.w	r2, r3, #15
 800a00c:	6879      	ldr	r1, [r7, #4]
 800a00e:	4613      	mov	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	440b      	add	r3, r1
 800a018:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d104      	bne.n	800a02c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fbad 	bl	800a784 <USBD_CtlError>
                  break;
 800a02a:	e041      	b.n	800a0b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a02c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a030:	2b00      	cmp	r3, #0
 800a032:	da0b      	bge.n	800a04c <USBD_StdEPReq+0x23e>
 800a034:	7bbb      	ldrb	r3, [r7, #14]
 800a036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a03a:	4613      	mov	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	3310      	adds	r3, #16
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	4413      	add	r3, r2
 800a048:	3304      	adds	r3, #4
 800a04a:	e00b      	b.n	800a064 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
 800a04e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a052:	4613      	mov	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	4413      	add	r3, r2
 800a062:	3304      	adds	r3, #4
 800a064:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a066:	7bbb      	ldrb	r3, [r7, #14]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <USBD_StdEPReq+0x264>
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
 800a06e:	2b80      	cmp	r3, #128	@ 0x80
 800a070:	d103      	bne.n	800a07a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]
 800a078:	e00e      	b.n	800a098 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a07a:	7bbb      	ldrb	r3, [r7, #14]
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 f874 	bl	800b16c <USBD_LL_IsStallEP>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2201      	movs	r2, #1
 800a08e:	601a      	str	r2, [r3, #0]
 800a090:	e002      	b.n	800a098 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2200      	movs	r2, #0
 800a096:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2202      	movs	r2, #2
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fbe1 	bl	800a866 <USBD_CtlSendData>
              break;
 800a0a4:	e004      	b.n	800a0b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fb6b 	bl	800a784 <USBD_CtlError>
              break;
 800a0ae:	bf00      	nop
          }
          break;
 800a0b0:	e004      	b.n	800a0bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fb65 	bl	800a784 <USBD_CtlError>
          break;
 800a0ba:	bf00      	nop
      }
      break;
 800a0bc:	e004      	b.n	800a0c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a0be:	6839      	ldr	r1, [r7, #0]
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fb5f 	bl	800a784 <USBD_CtlError>
      break;
 800a0c6:	bf00      	nop
  }

  return ret;
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	885b      	ldrh	r3, [r3, #2]
 800a0ee:	0a1b      	lsrs	r3, r3, #8
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	2b0e      	cmp	r3, #14
 800a0f6:	f200 8152 	bhi.w	800a39e <USBD_GetDescriptor+0x2ca>
 800a0fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a100 <USBD_GetDescriptor+0x2c>)
 800a0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a100:	0800a171 	.word	0x0800a171
 800a104:	0800a189 	.word	0x0800a189
 800a108:	0800a1c9 	.word	0x0800a1c9
 800a10c:	0800a39f 	.word	0x0800a39f
 800a110:	0800a39f 	.word	0x0800a39f
 800a114:	0800a33f 	.word	0x0800a33f
 800a118:	0800a36b 	.word	0x0800a36b
 800a11c:	0800a39f 	.word	0x0800a39f
 800a120:	0800a39f 	.word	0x0800a39f
 800a124:	0800a39f 	.word	0x0800a39f
 800a128:	0800a39f 	.word	0x0800a39f
 800a12c:	0800a39f 	.word	0x0800a39f
 800a130:	0800a39f 	.word	0x0800a39f
 800a134:	0800a39f 	.word	0x0800a39f
 800a138:	0800a13d 	.word	0x0800a13d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00b      	beq.n	800a160 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	7c12      	ldrb	r2, [r2, #16]
 800a154:	f107 0108 	add.w	r1, r7, #8
 800a158:	4610      	mov	r0, r2
 800a15a:	4798      	blx	r3
 800a15c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a15e:	e126      	b.n	800a3ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fb0e 	bl	800a784 <USBD_CtlError>
        err++;
 800a168:	7afb      	ldrb	r3, [r7, #11]
 800a16a:	3301      	adds	r3, #1
 800a16c:	72fb      	strb	r3, [r7, #11]
      break;
 800a16e:	e11e      	b.n	800a3ae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	7c12      	ldrb	r2, [r2, #16]
 800a17c:	f107 0108 	add.w	r1, r7, #8
 800a180:	4610      	mov	r0, r2
 800a182:	4798      	blx	r3
 800a184:	60f8      	str	r0, [r7, #12]
      break;
 800a186:	e112      	b.n	800a3ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	7c1b      	ldrb	r3, [r3, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10d      	bne.n	800a1ac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a198:	f107 0208 	add.w	r2, r7, #8
 800a19c:	4610      	mov	r0, r2
 800a19e:	4798      	blx	r3
 800a1a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1aa:	e100      	b.n	800a3ae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b4:	f107 0208 	add.w	r2, r7, #8
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	4798      	blx	r3
 800a1bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	701a      	strb	r2, [r3, #0]
      break;
 800a1c6:	e0f2      	b.n	800a3ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	885b      	ldrh	r3, [r3, #2]
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b05      	cmp	r3, #5
 800a1d0:	f200 80ac 	bhi.w	800a32c <USBD_GetDescriptor+0x258>
 800a1d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1dc <USBD_GetDescriptor+0x108>)
 800a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1da:	bf00      	nop
 800a1dc:	0800a1f5 	.word	0x0800a1f5
 800a1e0:	0800a229 	.word	0x0800a229
 800a1e4:	0800a25d 	.word	0x0800a25d
 800a1e8:	0800a291 	.word	0x0800a291
 800a1ec:	0800a2c5 	.word	0x0800a2c5
 800a1f0:	0800a2f9 	.word	0x0800a2f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00b      	beq.n	800a218 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	7c12      	ldrb	r2, [r2, #16]
 800a20c:	f107 0108 	add.w	r1, r7, #8
 800a210:	4610      	mov	r0, r2
 800a212:	4798      	blx	r3
 800a214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a216:	e091      	b.n	800a33c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fab2 	bl	800a784 <USBD_CtlError>
            err++;
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	3301      	adds	r3, #1
 800a224:	72fb      	strb	r3, [r7, #11]
          break;
 800a226:	e089      	b.n	800a33c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00b      	beq.n	800a24c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	7c12      	ldrb	r2, [r2, #16]
 800a240:	f107 0108 	add.w	r1, r7, #8
 800a244:	4610      	mov	r0, r2
 800a246:	4798      	blx	r3
 800a248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a24a:	e077      	b.n	800a33c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fa98 	bl	800a784 <USBD_CtlError>
            err++;
 800a254:	7afb      	ldrb	r3, [r7, #11]
 800a256:	3301      	adds	r3, #1
 800a258:	72fb      	strb	r3, [r7, #11]
          break;
 800a25a:	e06f      	b.n	800a33c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	7c12      	ldrb	r2, [r2, #16]
 800a274:	f107 0108 	add.w	r1, r7, #8
 800a278:	4610      	mov	r0, r2
 800a27a:	4798      	blx	r3
 800a27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a27e:	e05d      	b.n	800a33c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fa7e 	bl	800a784 <USBD_CtlError>
            err++;
 800a288:	7afb      	ldrb	r3, [r7, #11]
 800a28a:	3301      	adds	r3, #1
 800a28c:	72fb      	strb	r3, [r7, #11]
          break;
 800a28e:	e055      	b.n	800a33c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00b      	beq.n	800a2b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	7c12      	ldrb	r2, [r2, #16]
 800a2a8:	f107 0108 	add.w	r1, r7, #8
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	4798      	blx	r3
 800a2b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2b2:	e043      	b.n	800a33c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa64 	bl	800a784 <USBD_CtlError>
            err++;
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2c2:	e03b      	b.n	800a33c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00b      	beq.n	800a2e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	7c12      	ldrb	r2, [r2, #16]
 800a2dc:	f107 0108 	add.w	r1, r7, #8
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	4798      	blx	r3
 800a2e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2e6:	e029      	b.n	800a33c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fa4a 	bl	800a784 <USBD_CtlError>
            err++;
 800a2f0:	7afb      	ldrb	r3, [r7, #11]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2f6:	e021      	b.n	800a33c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00b      	beq.n	800a31c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	7c12      	ldrb	r2, [r2, #16]
 800a310:	f107 0108 	add.w	r1, r7, #8
 800a314:	4610      	mov	r0, r2
 800a316:	4798      	blx	r3
 800a318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a31a:	e00f      	b.n	800a33c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fa30 	bl	800a784 <USBD_CtlError>
            err++;
 800a324:	7afb      	ldrb	r3, [r7, #11]
 800a326:	3301      	adds	r3, #1
 800a328:	72fb      	strb	r3, [r7, #11]
          break;
 800a32a:	e007      	b.n	800a33c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fa28 	bl	800a784 <USBD_CtlError>
          err++;
 800a334:	7afb      	ldrb	r3, [r7, #11]
 800a336:	3301      	adds	r3, #1
 800a338:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a33a:	bf00      	nop
      }
      break;
 800a33c:	e037      	b.n	800a3ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	7c1b      	ldrb	r3, [r3, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d109      	bne.n	800a35a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a34c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a34e:	f107 0208 	add.w	r2, r7, #8
 800a352:	4610      	mov	r0, r2
 800a354:	4798      	blx	r3
 800a356:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a358:	e029      	b.n	800a3ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fa11 	bl	800a784 <USBD_CtlError>
        err++;
 800a362:	7afb      	ldrb	r3, [r7, #11]
 800a364:	3301      	adds	r3, #1
 800a366:	72fb      	strb	r3, [r7, #11]
      break;
 800a368:	e021      	b.n	800a3ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	7c1b      	ldrb	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10d      	bne.n	800a38e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37a:	f107 0208 	add.w	r2, r7, #8
 800a37e:	4610      	mov	r0, r2
 800a380:	4798      	blx	r3
 800a382:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	3301      	adds	r3, #1
 800a388:	2207      	movs	r2, #7
 800a38a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a38c:	e00f      	b.n	800a3ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f9f7 	bl	800a784 <USBD_CtlError>
        err++;
 800a396:	7afb      	ldrb	r3, [r7, #11]
 800a398:	3301      	adds	r3, #1
 800a39a:	72fb      	strb	r3, [r7, #11]
      break;
 800a39c:	e007      	b.n	800a3ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f9ef 	bl	800a784 <USBD_CtlError>
      err++;
 800a3a6:	7afb      	ldrb	r3, [r7, #11]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a3ac:	bf00      	nop
  }

  if (err != 0U)
 800a3ae:	7afb      	ldrb	r3, [r7, #11]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d11e      	bne.n	800a3f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	88db      	ldrh	r3, [r3, #6]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d016      	beq.n	800a3ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a3bc:	893b      	ldrh	r3, [r7, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00e      	beq.n	800a3e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	88da      	ldrh	r2, [r3, #6]
 800a3c6:	893b      	ldrh	r3, [r7, #8]
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	bf28      	it	cs
 800a3cc:	4613      	movcs	r3, r2
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3d2:	893b      	ldrh	r3, [r7, #8]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	68f9      	ldr	r1, [r7, #12]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fa44 	bl	800a866 <USBD_CtlSendData>
 800a3de:	e009      	b.n	800a3f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f9ce 	bl	800a784 <USBD_CtlError>
 800a3e8:	e004      	b.n	800a3f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa95 	bl	800a91a <USBD_CtlSendStatus>
 800a3f0:	e000      	b.n	800a3f4 <USBD_GetDescriptor+0x320>
    return;
 800a3f2:	bf00      	nop
  }
}
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop

0800a3fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	889b      	ldrh	r3, [r3, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d131      	bne.n	800a472 <USBD_SetAddress+0x76>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	88db      	ldrh	r3, [r3, #6]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d12d      	bne.n	800a472 <USBD_SetAddress+0x76>
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	885b      	ldrh	r3, [r3, #2]
 800a41a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a41c:	d829      	bhi.n	800a472 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	885b      	ldrh	r3, [r3, #2]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a428:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b03      	cmp	r3, #3
 800a434:	d104      	bne.n	800a440 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f9a3 	bl	800a784 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43e:	e01d      	b.n	800a47c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	7bfa      	ldrb	r2, [r7, #15]
 800a444:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	4619      	mov	r1, r3
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 feb9 	bl	800b1c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa61 	bl	800a91a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d004      	beq.n	800a468 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2202      	movs	r2, #2
 800a462:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a466:	e009      	b.n	800a47c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a470:	e004      	b.n	800a47c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f985 	bl	800a784 <USBD_CtlError>
  }
}
 800a47a:	bf00      	nop
 800a47c:	bf00      	nop
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	885b      	ldrh	r3, [r3, #2]
 800a496:	b2da      	uxtb	r2, r3
 800a498:	4b4c      	ldr	r3, [pc, #304]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a49a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a49c:	4b4b      	ldr	r3, [pc, #300]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d905      	bls.n	800a4b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4a4:	6839      	ldr	r1, [r7, #0]
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f96c 	bl	800a784 <USBD_CtlError>
    return USBD_FAIL;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e088      	b.n	800a5c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d002      	beq.n	800a4c2 <USBD_SetConfig+0x3e>
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	d025      	beq.n	800a50c <USBD_SetConfig+0x88>
 800a4c0:	e071      	b.n	800a5a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4c2:	4b42      	ldr	r3, [pc, #264]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d01c      	beq.n	800a504 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a4ca:	4b40      	ldr	r3, [pc, #256]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4d4:	4b3d      	ldr	r3, [pc, #244]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff f992 	bl	8009804 <USBD_SetClassConfig>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d004      	beq.n	800a4f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f949 	bl	800a784 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4f2:	e065      	b.n	800a5c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fa10 	bl	800a91a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2203      	movs	r2, #3
 800a4fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a502:	e05d      	b.n	800a5c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fa08 	bl	800a91a <USBD_CtlSendStatus>
      break;
 800a50a:	e059      	b.n	800a5c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a50c:	4b2f      	ldr	r3, [pc, #188]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d112      	bne.n	800a53a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a51c:	4b2b      	ldr	r3, [pc, #172]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	461a      	mov	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a526:	4b29      	ldr	r3, [pc, #164]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	4619      	mov	r1, r3
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7ff f985 	bl	800983c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f9f1 	bl	800a91a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a538:	e042      	b.n	800a5c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a53a:	4b24      	ldr	r3, [pc, #144]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	461a      	mov	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	429a      	cmp	r2, r3
 800a546:	d02a      	beq.n	800a59e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff f973 	bl	800983c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a556:	4b1d      	ldr	r3, [pc, #116]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a560:	4b1a      	ldr	r3, [pc, #104]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff f94c 	bl	8009804 <USBD_SetClassConfig>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a570:	7bfb      	ldrb	r3, [r7, #15]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00f      	beq.n	800a596 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f903 	bl	800a784 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	4619      	mov	r1, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff f958 	bl	800983c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a594:	e014      	b.n	800a5c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f9bf 	bl	800a91a <USBD_CtlSendStatus>
      break;
 800a59c:	e010      	b.n	800a5c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f9bb 	bl	800a91a <USBD_CtlSendStatus>
      break;
 800a5a4:	e00c      	b.n	800a5c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f8eb 	bl	800a784 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5ae:	4b07      	ldr	r3, [pc, #28]	@ (800a5cc <USBD_SetConfig+0x148>)
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff f941 	bl	800983c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a5be:	bf00      	nop
  }

  return ret;
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000bb0 	.word	0x20000bb0

0800a5d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	88db      	ldrh	r3, [r3, #6]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d004      	beq.n	800a5ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f8cd 	bl	800a784 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5ea:	e023      	b.n	800a634 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	dc02      	bgt.n	800a5fe <USBD_GetConfig+0x2e>
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	dc03      	bgt.n	800a604 <USBD_GetConfig+0x34>
 800a5fc:	e015      	b.n	800a62a <USBD_GetConfig+0x5a>
 800a5fe:	2b03      	cmp	r3, #3
 800a600:	d00b      	beq.n	800a61a <USBD_GetConfig+0x4a>
 800a602:	e012      	b.n	800a62a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3308      	adds	r3, #8
 800a60e:	2201      	movs	r2, #1
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f927 	bl	800a866 <USBD_CtlSendData>
        break;
 800a618:	e00c      	b.n	800a634 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	3304      	adds	r3, #4
 800a61e:	2201      	movs	r2, #1
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f91f 	bl	800a866 <USBD_CtlSendData>
        break;
 800a628:	e004      	b.n	800a634 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a62a:	6839      	ldr	r1, [r7, #0]
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f8a9 	bl	800a784 <USBD_CtlError>
        break;
 800a632:	bf00      	nop
}
 800a634:	bf00      	nop
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	3b01      	subs	r3, #1
 800a650:	2b02      	cmp	r3, #2
 800a652:	d81e      	bhi.n	800a692 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	88db      	ldrh	r3, [r3, #6]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d004      	beq.n	800a666 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f890 	bl	800a784 <USBD_CtlError>
        break;
 800a664:	e01a      	b.n	800a69c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a672:	2b00      	cmp	r3, #0
 800a674:	d005      	beq.n	800a682 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	f043 0202 	orr.w	r2, r3, #2
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	330c      	adds	r3, #12
 800a686:	2202      	movs	r2, #2
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f8eb 	bl	800a866 <USBD_CtlSendData>
      break;
 800a690:	e004      	b.n	800a69c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f875 	bl	800a784 <USBD_CtlError>
      break;
 800a69a:	bf00      	nop
  }
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	885b      	ldrh	r3, [r3, #2]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d106      	bne.n	800a6c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 f92b 	bl	800a91a <USBD_CtlSendStatus>
  }
}
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d80b      	bhi.n	800a6fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	885b      	ldrh	r3, [r3, #2]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d10c      	bne.n	800a706 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f910 	bl	800a91a <USBD_CtlSendStatus>
      }
      break;
 800a6fa:	e004      	b.n	800a706 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a6fc:	6839      	ldr	r1, [r7, #0]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f840 	bl	800a784 <USBD_CtlError>
      break;
 800a704:	e000      	b.n	800a708 <USBD_ClrFeature+0x3c>
      break;
 800a706:	bf00      	nop
  }
}
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	781a      	ldrb	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3301      	adds	r3, #1
 800a72a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3301      	adds	r3, #1
 800a738:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f7ff fa92 	bl	8009c64 <SWAPBYTE>
 800a740:	4603      	mov	r3, r0
 800a742:	461a      	mov	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	3301      	adds	r3, #1
 800a74c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	3301      	adds	r3, #1
 800a752:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7ff fa85 	bl	8009c64 <SWAPBYTE>
 800a75a:	4603      	mov	r3, r0
 800a75c:	461a      	mov	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3301      	adds	r3, #1
 800a766:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	3301      	adds	r3, #1
 800a76c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7ff fa78 	bl	8009c64 <SWAPBYTE>
 800a774:	4603      	mov	r3, r0
 800a776:	461a      	mov	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	80da      	strh	r2, [r3, #6]
}
 800a77c:	bf00      	nop
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a78e:	2180      	movs	r1, #128	@ 0x80
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fcad 	bl	800b0f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a796:	2100      	movs	r1, #0
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fca9 	bl	800b0f0 <USBD_LL_StallEP>
}
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b086      	sub	sp, #24
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	60f8      	str	r0, [r7, #12]
 800a7ae:	60b9      	str	r1, [r7, #8]
 800a7b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d036      	beq.n	800a82a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a7c0:	6938      	ldr	r0, [r7, #16]
 800a7c2:	f000 f836 	bl	800a832 <USBD_GetLen>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	4413      	add	r3, r2
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	7812      	ldrb	r2, [r2, #0]
 800a7de:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7e0:	7dfb      	ldrb	r3, [r7, #23]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	2203      	movs	r2, #3
 800a7ee:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a7f6:	e013      	b.n	800a820 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a7f8:	7dfb      	ldrb	r3, [r7, #23]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	7812      	ldrb	r2, [r2, #0]
 800a802:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	3301      	adds	r3, #1
 800a808:	613b      	str	r3, [r7, #16]
    idx++;
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
 800a80c:	3301      	adds	r3, #1
 800a80e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a810:	7dfb      	ldrb	r3, [r7, #23]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	4413      	add	r3, r2
 800a816:	2200      	movs	r2, #0
 800a818:	701a      	strb	r2, [r3, #0]
    idx++;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
 800a81c:	3301      	adds	r3, #1
 800a81e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e7      	bne.n	800a7f8 <USBD_GetString+0x52>
 800a828:	e000      	b.n	800a82c <USBD_GetString+0x86>
    return;
 800a82a:	bf00      	nop
  }
}
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a832:	b480      	push	{r7}
 800a834:	b085      	sub	sp, #20
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a842:	e005      	b.n	800a850 <USBD_GetLen+0x1e>
  {
    len++;
 800a844:	7bfb      	ldrb	r3, [r7, #15]
 800a846:	3301      	adds	r3, #1
 800a848:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	3301      	adds	r3, #1
 800a84e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1f5      	bne.n	800a844 <USBD_GetLen+0x12>
  }

  return len;
 800a858:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b084      	sub	sp, #16
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	60f8      	str	r0, [r7, #12]
 800a86e:	60b9      	str	r1, [r7, #8]
 800a870:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2202      	movs	r2, #2
 800a876:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	2100      	movs	r1, #0
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 fcb8 	bl	800b202 <USBD_LL_Transmit>

  return USBD_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f000 fca7 	bl	800b202 <USBD_LL_Transmit>

  return USBD_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b084      	sub	sp, #16
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	60f8      	str	r0, [r7, #12]
 800a8c6:	60b9      	str	r1, [r7, #8]
 800a8c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2203      	movs	r2, #3
 800a8ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f000 fcab 	bl	800b244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	2100      	movs	r1, #0
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 fc9a 	bl	800b244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2204      	movs	r2, #4
 800a926:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a92a:	2300      	movs	r3, #0
 800a92c:	2200      	movs	r2, #0
 800a92e:	2100      	movs	r1, #0
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fc66 	bl	800b202 <USBD_LL_Transmit>

  return USBD_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2205      	movs	r2, #5
 800a94c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a950:	2300      	movs	r3, #0
 800a952:	2200      	movs	r2, #0
 800a954:	2100      	movs	r1, #0
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fc74 	bl	800b244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a96c:	2200      	movs	r2, #0
 800a96e:	4912      	ldr	r1, [pc, #72]	@ (800a9b8 <MX_USB_Device_Init+0x50>)
 800a970:	4812      	ldr	r0, [pc, #72]	@ (800a9bc <MX_USB_Device_Init+0x54>)
 800a972:	f7fe fed9 	bl	8009728 <USBD_Init>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d001      	beq.n	800a980 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a97c:	f7f5 ff63 	bl	8000846 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a980:	490f      	ldr	r1, [pc, #60]	@ (800a9c0 <MX_USB_Device_Init+0x58>)
 800a982:	480e      	ldr	r0, [pc, #56]	@ (800a9bc <MX_USB_Device_Init+0x54>)
 800a984:	f7fe ff00 	bl	8009788 <USBD_RegisterClass>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a98e:	f7f5 ff5a 	bl	8000846 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a992:	490c      	ldr	r1, [pc, #48]	@ (800a9c4 <MX_USB_Device_Init+0x5c>)
 800a994:	4809      	ldr	r0, [pc, #36]	@ (800a9bc <MX_USB_Device_Init+0x54>)
 800a996:	f7fe fe21 	bl	80095dc <USBD_CDC_RegisterInterface>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a9a0:	f7f5 ff51 	bl	8000846 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a9a4:	4805      	ldr	r0, [pc, #20]	@ (800a9bc <MX_USB_Device_Init+0x54>)
 800a9a6:	f7fe ff16 	bl	80097d6 <USBD_Start>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a9b0:	f7f5 ff49 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a9b4:	bf00      	nop
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	20000140 	.word	0x20000140
 800a9bc:	20000bb4 	.word	0x20000bb4
 800a9c0:	20000028 	.word	0x20000028
 800a9c4:	2000012c 	.word	0x2000012c

0800a9c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4905      	ldr	r1, [pc, #20]	@ (800a9e4 <CDC_Init_FS+0x1c>)
 800a9d0:	4805      	ldr	r0, [pc, #20]	@ (800a9e8 <CDC_Init_FS+0x20>)
 800a9d2:	f7fe fe18 	bl	8009606 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9d6:	4905      	ldr	r1, [pc, #20]	@ (800a9ec <CDC_Init_FS+0x24>)
 800a9d8:	4803      	ldr	r0, [pc, #12]	@ (800a9e8 <CDC_Init_FS+0x20>)
 800a9da:	f7fe fe32 	bl	8009642 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a9de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20001284 	.word	0x20001284
 800a9e8:	20000bb4 	.word	0x20000bb4
 800a9ec:	20000e84 	.word	0x20000e84

0800a9f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a9f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	6039      	str	r1, [r7, #0]
 800aa0a:	71fb      	strb	r3, [r7, #7]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa10:	79fb      	ldrb	r3, [r7, #7]
 800aa12:	2b23      	cmp	r3, #35	@ 0x23
 800aa14:	d84a      	bhi.n	800aaac <CDC_Control_FS+0xac>
 800aa16:	a201      	add	r2, pc, #4	@ (adr r2, 800aa1c <CDC_Control_FS+0x1c>)
 800aa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1c:	0800aaad 	.word	0x0800aaad
 800aa20:	0800aaad 	.word	0x0800aaad
 800aa24:	0800aaad 	.word	0x0800aaad
 800aa28:	0800aaad 	.word	0x0800aaad
 800aa2c:	0800aaad 	.word	0x0800aaad
 800aa30:	0800aaad 	.word	0x0800aaad
 800aa34:	0800aaad 	.word	0x0800aaad
 800aa38:	0800aaad 	.word	0x0800aaad
 800aa3c:	0800aaad 	.word	0x0800aaad
 800aa40:	0800aaad 	.word	0x0800aaad
 800aa44:	0800aaad 	.word	0x0800aaad
 800aa48:	0800aaad 	.word	0x0800aaad
 800aa4c:	0800aaad 	.word	0x0800aaad
 800aa50:	0800aaad 	.word	0x0800aaad
 800aa54:	0800aaad 	.word	0x0800aaad
 800aa58:	0800aaad 	.word	0x0800aaad
 800aa5c:	0800aaad 	.word	0x0800aaad
 800aa60:	0800aaad 	.word	0x0800aaad
 800aa64:	0800aaad 	.word	0x0800aaad
 800aa68:	0800aaad 	.word	0x0800aaad
 800aa6c:	0800aaad 	.word	0x0800aaad
 800aa70:	0800aaad 	.word	0x0800aaad
 800aa74:	0800aaad 	.word	0x0800aaad
 800aa78:	0800aaad 	.word	0x0800aaad
 800aa7c:	0800aaad 	.word	0x0800aaad
 800aa80:	0800aaad 	.word	0x0800aaad
 800aa84:	0800aaad 	.word	0x0800aaad
 800aa88:	0800aaad 	.word	0x0800aaad
 800aa8c:	0800aaad 	.word	0x0800aaad
 800aa90:	0800aaad 	.word	0x0800aaad
 800aa94:	0800aaad 	.word	0x0800aaad
 800aa98:	0800aaad 	.word	0x0800aaad
 800aa9c:	0800aaad 	.word	0x0800aaad
 800aaa0:	0800aaad 	.word	0x0800aaad
 800aaa4:	0800aaad 	.word	0x0800aaad
 800aaa8:	0800aaad 	.word	0x0800aaad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aaac:	bf00      	nop
  }

  return (USBD_OK);
 800aaae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	4805      	ldr	r0, [pc, #20]	@ (800aae0 <CDC_Receive_FS+0x24>)
 800aaca:	f7fe fdba 	bl	8009642 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aace:	4804      	ldr	r0, [pc, #16]	@ (800aae0 <CDC_Receive_FS+0x24>)
 800aad0:	f7fe fe00 	bl	80096d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aad4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20000bb4 	.word	0x20000bb4

0800aae4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aaf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ab2c <CDC_Transmit_FS+0x48>)
 800aaf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aafa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e00b      	b.n	800ab22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab0a:	887b      	ldrh	r3, [r7, #2]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	6879      	ldr	r1, [r7, #4]
 800ab10:	4806      	ldr	r0, [pc, #24]	@ (800ab2c <CDC_Transmit_FS+0x48>)
 800ab12:	f7fe fd78 	bl	8009606 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab16:	4805      	ldr	r0, [pc, #20]	@ (800ab2c <CDC_Transmit_FS+0x48>)
 800ab18:	f7fe fdac 	bl	8009674 <USBD_CDC_TransmitPacket>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	20000bb4 	.word	0x20000bb4

0800ab30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	371c      	adds	r7, #28
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
	...

0800ab54 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ab5a:	4b09      	ldr	r3, [pc, #36]	@ (800ab80 <CDC_Transmit_Is_Busy+0x2c>)
 800ab5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab60:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e000      	b.n	800ab72 <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800ab70:	2300      	movs	r3, #0
  }
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	20000bb4 	.word	0x20000bb4

0800ab84 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	6039      	str	r1, [r7, #0]
 800ab8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2212      	movs	r2, #18
 800ab94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ab96:	4b03      	ldr	r3, [pc, #12]	@ (800aba4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	20000160 	.word	0x20000160

0800aba8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	6039      	str	r1, [r7, #0]
 800abb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2204      	movs	r2, #4
 800abb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abba:	4b03      	ldr	r3, [pc, #12]	@ (800abc8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	20000174 	.word	0x20000174

0800abcc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	6039      	str	r1, [r7, #0]
 800abd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d105      	bne.n	800abea <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	4907      	ldr	r1, [pc, #28]	@ (800ac00 <USBD_CDC_ProductStrDescriptor+0x34>)
 800abe2:	4808      	ldr	r0, [pc, #32]	@ (800ac04 <USBD_CDC_ProductStrDescriptor+0x38>)
 800abe4:	f7ff fddf 	bl	800a7a6 <USBD_GetString>
 800abe8:	e004      	b.n	800abf4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	4904      	ldr	r1, [pc, #16]	@ (800ac00 <USBD_CDC_ProductStrDescriptor+0x34>)
 800abee:	4805      	ldr	r0, [pc, #20]	@ (800ac04 <USBD_CDC_ProductStrDescriptor+0x38>)
 800abf0:	f7ff fdd9 	bl	800a7a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abf4:	4b02      	ldr	r3, [pc, #8]	@ (800ac00 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	20001684 	.word	0x20001684
 800ac04:	0800c4bc 	.word	0x0800c4bc

0800ac08 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	6039      	str	r1, [r7, #0]
 800ac12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	4904      	ldr	r1, [pc, #16]	@ (800ac28 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ac18:	4804      	ldr	r0, [pc, #16]	@ (800ac2c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ac1a:	f7ff fdc4 	bl	800a7a6 <USBD_GetString>
  return USBD_StrDesc;
 800ac1e:	4b02      	ldr	r3, [pc, #8]	@ (800ac28 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	20001684 	.word	0x20001684
 800ac2c:	0800c4d4 	.word	0x0800c4d4

0800ac30 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	6039      	str	r1, [r7, #0]
 800ac3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	221a      	movs	r2, #26
 800ac40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac42:	f000 f843 	bl	800accc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac46:	4b02      	ldr	r3, [pc, #8]	@ (800ac50 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20000178 	.word	0x20000178

0800ac54 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	6039      	str	r1, [r7, #0]
 800ac5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d105      	bne.n	800ac72 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	4907      	ldr	r1, [pc, #28]	@ (800ac88 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac6a:	4808      	ldr	r0, [pc, #32]	@ (800ac8c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac6c:	f7ff fd9b 	bl	800a7a6 <USBD_GetString>
 800ac70:	e004      	b.n	800ac7c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	4904      	ldr	r1, [pc, #16]	@ (800ac88 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac76:	4805      	ldr	r0, [pc, #20]	@ (800ac8c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac78:	f7ff fd95 	bl	800a7a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac7c:	4b02      	ldr	r3, [pc, #8]	@ (800ac88 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20001684 	.word	0x20001684
 800ac8c:	0800c4e8 	.word	0x0800c4e8

0800ac90 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	4603      	mov	r3, r0
 800ac98:	6039      	str	r1, [r7, #0]
 800ac9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d105      	bne.n	800acae <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	4907      	ldr	r1, [pc, #28]	@ (800acc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800aca6:	4808      	ldr	r0, [pc, #32]	@ (800acc8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800aca8:	f7ff fd7d 	bl	800a7a6 <USBD_GetString>
 800acac:	e004      	b.n	800acb8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	4904      	ldr	r1, [pc, #16]	@ (800acc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800acb2:	4805      	ldr	r0, [pc, #20]	@ (800acc8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800acb4:	f7ff fd77 	bl	800a7a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acb8:	4b02      	ldr	r3, [pc, #8]	@ (800acc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	20001684 	.word	0x20001684
 800acc8:	0800c4f4 	.word	0x0800c4f4

0800accc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800acd2:	4b0f      	ldr	r3, [pc, #60]	@ (800ad10 <Get_SerialNum+0x44>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800acd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ad14 <Get_SerialNum+0x48>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800acde:	4b0e      	ldr	r3, [pc, #56]	@ (800ad18 <Get_SerialNum+0x4c>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4413      	add	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d009      	beq.n	800ad06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acf2:	2208      	movs	r2, #8
 800acf4:	4909      	ldr	r1, [pc, #36]	@ (800ad1c <Get_SerialNum+0x50>)
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f000 f814 	bl	800ad24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acfc:	2204      	movs	r2, #4
 800acfe:	4908      	ldr	r1, [pc, #32]	@ (800ad20 <Get_SerialNum+0x54>)
 800ad00:	68b8      	ldr	r0, [r7, #8]
 800ad02:	f000 f80f 	bl	800ad24 <IntToUnicode>
  }
}
 800ad06:	bf00      	nop
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	1fff7590 	.word	0x1fff7590
 800ad14:	1fff7594 	.word	0x1fff7594
 800ad18:	1fff7598 	.word	0x1fff7598
 800ad1c:	2000017a 	.word	0x2000017a
 800ad20:	2000018a 	.word	0x2000018a

0800ad24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad36:	2300      	movs	r3, #0
 800ad38:	75fb      	strb	r3, [r7, #23]
 800ad3a:	e027      	b.n	800ad8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	0f1b      	lsrs	r3, r3, #28
 800ad40:	2b09      	cmp	r3, #9
 800ad42:	d80b      	bhi.n	800ad5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	0f1b      	lsrs	r3, r3, #28
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	7dfb      	ldrb	r3, [r7, #23]
 800ad4c:	005b      	lsls	r3, r3, #1
 800ad4e:	4619      	mov	r1, r3
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	440b      	add	r3, r1
 800ad54:	3230      	adds	r2, #48	@ 0x30
 800ad56:	b2d2      	uxtb	r2, r2
 800ad58:	701a      	strb	r2, [r3, #0]
 800ad5a:	e00a      	b.n	800ad72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	0f1b      	lsrs	r3, r3, #28
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	4619      	mov	r1, r3
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	440b      	add	r3, r1
 800ad6c:	3237      	adds	r2, #55	@ 0x37
 800ad6e:	b2d2      	uxtb	r2, r2
 800ad70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	011b      	lsls	r3, r3, #4
 800ad76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	4413      	add	r3, r2
 800ad82:	2200      	movs	r2, #0
 800ad84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	75fb      	strb	r3, [r7, #23]
 800ad8c:	7dfa      	ldrb	r2, [r7, #23]
 800ad8e:	79fb      	ldrb	r3, [r7, #7]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d3d3      	bcc.n	800ad3c <IntToUnicode+0x18>
  }
}
 800ad94:	bf00      	nop
 800ad96:	bf00      	nop
 800ad98:	371c      	adds	r7, #28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
	...

0800ada4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b094      	sub	sp, #80	@ 0x50
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800adac:	f107 030c 	add.w	r3, r7, #12
 800adb0:	2244      	movs	r2, #68	@ 0x44
 800adb2:	2100      	movs	r1, #0
 800adb4:	4618      	mov	r0, r3
 800adb6:	f000 fd03 	bl	800b7c0 <memset>
  if(pcdHandle->Instance==USB)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a15      	ldr	r2, [pc, #84]	@ (800ae14 <HAL_PCD_MspInit+0x70>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d122      	bne.n	800ae0a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800adc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800adc8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800adca:	2300      	movs	r3, #0
 800adcc:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800adce:	f107 030c 	add.w	r3, r7, #12
 800add2:	4618      	mov	r0, r3
 800add4:	f7f9 fd6a 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800adde:	f7f5 fd32 	bl	8000846 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ade2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae18 <HAL_PCD_MspInit+0x74>)
 800ade4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ade6:	4a0c      	ldr	r2, [pc, #48]	@ (800ae18 <HAL_PCD_MspInit+0x74>)
 800ade8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800adec:	6593      	str	r3, [r2, #88]	@ 0x58
 800adee:	4b0a      	ldr	r3, [pc, #40]	@ (800ae18 <HAL_PCD_MspInit+0x74>)
 800adf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adf6:	60bb      	str	r3, [r7, #8]
 800adf8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800adfa:	2200      	movs	r2, #0
 800adfc:	2100      	movs	r1, #0
 800adfe:	2014      	movs	r0, #20
 800ae00:	f7f6 fd33 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae04:	2014      	movs	r0, #20
 800ae06:	f7f6 fd4a 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae0a:	bf00      	nop
 800ae0c:	3750      	adds	r7, #80	@ 0x50
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	40005c00 	.word	0x40005c00
 800ae18:	40021000 	.word	0x40021000

0800ae1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ae30:	4619      	mov	r1, r3
 800ae32:	4610      	mov	r0, r2
 800ae34:	f7fe fd1a 	bl	800986c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ae52:	78fa      	ldrb	r2, [r7, #3]
 800ae54:	6879      	ldr	r1, [r7, #4]
 800ae56:	4613      	mov	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	440b      	add	r3, r1
 800ae60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	78fb      	ldrb	r3, [r7, #3]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	f7fe fd54 	bl	8009916 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ae6e:	bf00      	nop
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	460b      	mov	r3, r1
 800ae80:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ae88:	78fa      	ldrb	r2, [r7, #3]
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	00db      	lsls	r3, r3, #3
 800ae94:	440b      	add	r3, r1
 800ae96:	3324      	adds	r3, #36	@ 0x24
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	78fb      	ldrb	r3, [r7, #3]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	f7fe fd9d 	bl	80099dc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aea2:	bf00      	nop
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b082      	sub	sp, #8
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe feb1 	bl	8009c20 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aebe:	bf00      	nop
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aece:	2301      	movs	r3, #1
 800aed0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	795b      	ldrb	r3, [r3, #5]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d001      	beq.n	800aede <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aeda:	f7f5 fcb4 	bl	8000846 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aee4:	7bfa      	ldrb	r2, [r7, #15]
 800aee6:	4611      	mov	r1, r2
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fe fe5b 	bl	8009ba4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fe fe07 	bl	8009b08 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800aefa:	bf00      	nop
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
	...

0800af04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af12:	4618      	mov	r0, r3
 800af14:	f7fe fe56 	bl	8009bc4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	7a5b      	ldrb	r3, [r3, #9]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d005      	beq.n	800af2c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af20:	4b04      	ldr	r3, [pc, #16]	@ (800af34 <HAL_PCD_SuspendCallback+0x30>)
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	4a03      	ldr	r2, [pc, #12]	@ (800af34 <HAL_PCD_SuspendCallback+0x30>)
 800af26:	f043 0306 	orr.w	r3, r3, #6
 800af2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	e000ed00 	.word	0xe000ed00

0800af38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7a5b      	ldrb	r3, [r3, #9]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d007      	beq.n	800af58 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af48:	4b08      	ldr	r3, [pc, #32]	@ (800af6c <HAL_PCD_ResumeCallback+0x34>)
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	4a07      	ldr	r2, [pc, #28]	@ (800af6c <HAL_PCD_ResumeCallback+0x34>)
 800af4e:	f023 0306 	bic.w	r3, r3, #6
 800af52:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af54:	f000 f9f8 	bl	800b348 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe fe46 	bl	8009bf0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	e000ed00 	.word	0xe000ed00

0800af70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800af78:	4a2b      	ldr	r2, [pc, #172]	@ (800b028 <USBD_LL_Init+0xb8>)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a29      	ldr	r2, [pc, #164]	@ (800b028 <USBD_LL_Init+0xb8>)
 800af84:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800af88:	4b27      	ldr	r3, [pc, #156]	@ (800b028 <USBD_LL_Init+0xb8>)
 800af8a:	4a28      	ldr	r2, [pc, #160]	@ (800b02c <USBD_LL_Init+0xbc>)
 800af8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800af8e:	4b26      	ldr	r3, [pc, #152]	@ (800b028 <USBD_LL_Init+0xb8>)
 800af90:	2208      	movs	r2, #8
 800af92:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af94:	4b24      	ldr	r3, [pc, #144]	@ (800b028 <USBD_LL_Init+0xb8>)
 800af96:	2202      	movs	r2, #2
 800af98:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af9a:	4b23      	ldr	r3, [pc, #140]	@ (800b028 <USBD_LL_Init+0xb8>)
 800af9c:	2202      	movs	r2, #2
 800af9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800afa0:	4b21      	ldr	r3, [pc, #132]	@ (800b028 <USBD_LL_Init+0xb8>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afa6:	4b20      	ldr	r3, [pc, #128]	@ (800b028 <USBD_LL_Init+0xb8>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afac:	4b1e      	ldr	r3, [pc, #120]	@ (800b028 <USBD_LL_Init+0xb8>)
 800afae:	2200      	movs	r2, #0
 800afb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afb2:	4b1d      	ldr	r3, [pc, #116]	@ (800b028 <USBD_LL_Init+0xb8>)
 800afb4:	2200      	movs	r2, #0
 800afb6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800afb8:	481b      	ldr	r0, [pc, #108]	@ (800b028 <USBD_LL_Init+0xb8>)
 800afba:	f7f7 f994 	bl	80022e6 <HAL_PCD_Init>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800afc4:	f7f5 fc3f 	bl	8000846 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800afce:	2318      	movs	r3, #24
 800afd0:	2200      	movs	r2, #0
 800afd2:	2100      	movs	r1, #0
 800afd4:	f7f8 fe1b 	bl	8003c0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800afde:	2358      	movs	r3, #88	@ 0x58
 800afe0:	2200      	movs	r2, #0
 800afe2:	2180      	movs	r1, #128	@ 0x80
 800afe4:	f7f8 fe13 	bl	8003c0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800afee:	23c0      	movs	r3, #192	@ 0xc0
 800aff0:	2200      	movs	r2, #0
 800aff2:	2181      	movs	r1, #129	@ 0x81
 800aff4:	f7f8 fe0b 	bl	8003c0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800affe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b002:	2200      	movs	r2, #0
 800b004:	2101      	movs	r1, #1
 800b006:	f7f8 fe02 	bl	8003c0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b010:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b014:	2200      	movs	r2, #0
 800b016:	2182      	movs	r1, #130	@ 0x82
 800b018:	f7f8 fdf9 	bl	8003c0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	20001884 	.word	0x20001884
 800b02c:	40005c00 	.word	0x40005c00

0800b030 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b046:	4618      	mov	r0, r3
 800b048:	f7f7 fa1b 	bl	8002482 <HAL_PCD_Start>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	4618      	mov	r0, r3
 800b054:	f000 f97e 	bl	800b354 <USBD_Get_USB_Status>
 800b058:	4603      	mov	r3, r0
 800b05a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	4608      	mov	r0, r1
 800b070:	4611      	mov	r1, r2
 800b072:	461a      	mov	r2, r3
 800b074:	4603      	mov	r3, r0
 800b076:	70fb      	strb	r3, [r7, #3]
 800b078:	460b      	mov	r3, r1
 800b07a:	70bb      	strb	r3, [r7, #2]
 800b07c:	4613      	mov	r3, r2
 800b07e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b08e:	78bb      	ldrb	r3, [r7, #2]
 800b090:	883a      	ldrh	r2, [r7, #0]
 800b092:	78f9      	ldrb	r1, [r7, #3]
 800b094:	f7f7 fb62 	bl	800275c <HAL_PCD_EP_Open>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 f958 	bl	800b354 <USBD_Get_USB_Status>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b0cc:	78fa      	ldrb	r2, [r7, #3]
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7f7 fba2 	bl	800281a <HAL_PCD_EP_Close>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 f939 	bl	800b354 <USBD_Get_USB_Status>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b10a:	78fa      	ldrb	r2, [r7, #3]
 800b10c:	4611      	mov	r1, r2
 800b10e:	4618      	mov	r0, r3
 800b110:	f7f7 fc4b 	bl	80029aa <HAL_PCD_EP_SetStall>
 800b114:	4603      	mov	r3, r0
 800b116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f000 f91a 	bl	800b354 <USBD_Get_USB_Status>
 800b120:	4603      	mov	r3, r0
 800b122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b124:	7bbb      	ldrb	r3, [r7, #14]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	460b      	mov	r3, r1
 800b138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b148:	78fa      	ldrb	r2, [r7, #3]
 800b14a:	4611      	mov	r1, r2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7f7 fc7e 	bl	8002a4e <HAL_PCD_EP_ClrStall>
 800b152:	4603      	mov	r3, r0
 800b154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b156:	7bfb      	ldrb	r3, [r7, #15]
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 f8fb 	bl	800b354 <USBD_Get_USB_Status>
 800b15e:	4603      	mov	r3, r0
 800b160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b162:	7bbb      	ldrb	r3, [r7, #14]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b17e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b184:	2b00      	cmp	r3, #0
 800b186:	da0b      	bge.n	800b1a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b188:	78fb      	ldrb	r3, [r7, #3]
 800b18a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b18e:	68f9      	ldr	r1, [r7, #12]
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	00db      	lsls	r3, r3, #3
 800b198:	440b      	add	r3, r1
 800b19a:	3312      	adds	r3, #18
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	e00b      	b.n	800b1b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1a0:	78fb      	ldrb	r3, [r7, #3]
 800b1a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1a6:	68f9      	ldr	r1, [r7, #12]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4413      	add	r3, r2
 800b1ae:	00db      	lsls	r3, r3, #3
 800b1b0:	440b      	add	r3, r1
 800b1b2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b1b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3714      	adds	r7, #20
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b1de:	78fa      	ldrb	r2, [r7, #3]
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7f7 fa96 	bl	8002714 <HAL_PCD_SetAddress>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 f8b0 	bl	800b354 <USBD_Get_USB_Status>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b086      	sub	sp, #24
 800b206:	af00      	add	r7, sp, #0
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	603b      	str	r3, [r7, #0]
 800b20e:	460b      	mov	r3, r1
 800b210:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b216:	2300      	movs	r3, #0
 800b218:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b220:	7af9      	ldrb	r1, [r7, #11]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	f7f7 fb89 	bl	800293c <HAL_PCD_EP_Transmit>
 800b22a:	4603      	mov	r3, r0
 800b22c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
 800b230:	4618      	mov	r0, r3
 800b232:	f000 f88f 	bl	800b354 <USBD_Get_USB_Status>
 800b236:	4603      	mov	r3, r0
 800b238:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b23a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	607a      	str	r2, [r7, #4]
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	460b      	mov	r3, r1
 800b252:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b258:	2300      	movs	r3, #0
 800b25a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b262:	7af9      	ldrb	r1, [r7, #11]
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	f7f7 fb1f 	bl	80028aa <HAL_PCD_EP_Receive>
 800b26c:	4603      	mov	r3, r0
 800b26e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b270:	7dfb      	ldrb	r3, [r7, #23]
 800b272:	4618      	mov	r0, r3
 800b274:	f000 f86e 	bl	800b354 <USBD_Get_USB_Status>
 800b278:	4603      	mov	r3, r0
 800b27a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b27c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3718      	adds	r7, #24
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	460b      	mov	r3, r1
 800b290:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b298:	78fa      	ldrb	r2, [r7, #3]
 800b29a:	4611      	mov	r1, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7f7 fb35 	bl	800290c <HAL_PCD_EP_GetRxCount>
 800b2a2:	4603      	mov	r3, r0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d002      	beq.n	800b2c4 <HAL_PCDEx_LPM_Callback+0x18>
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d013      	beq.n	800b2ea <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b2c2:	e023      	b.n	800b30c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	7a5b      	ldrb	r3, [r3, #9]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d007      	beq.n	800b2dc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b2cc:	f000 f83c 	bl	800b348 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2d0:	4b10      	ldr	r3, [pc, #64]	@ (800b314 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	4a0f      	ldr	r2, [pc, #60]	@ (800b314 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2d6:	f023 0306 	bic.w	r3, r3, #6
 800b2da:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe fc84 	bl	8009bf0 <USBD_LL_Resume>
    break;
 800b2e8:	e010      	b.n	800b30c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7fe fc67 	bl	8009bc4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	7a5b      	ldrb	r3, [r3, #9]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d005      	beq.n	800b30a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2fe:	4b05      	ldr	r3, [pc, #20]	@ (800b314 <HAL_PCDEx_LPM_Callback+0x68>)
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	4a04      	ldr	r2, [pc, #16]	@ (800b314 <HAL_PCDEx_LPM_Callback+0x68>)
 800b304:	f043 0306 	orr.w	r3, r3, #6
 800b308:	6113      	str	r3, [r2, #16]
    break;
 800b30a:	bf00      	nop
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	e000ed00 	.word	0xe000ed00

0800b318 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b320:	4b03      	ldr	r3, [pc, #12]	@ (800b330 <USBD_static_malloc+0x18>)
}
 800b322:	4618      	mov	r0, r3
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	20001b60 	.word	0x20001b60

0800b334 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]

}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b34c:	f7f5 fa30 	bl	80007b0 <SystemClock_Config>
}
 800b350:	bf00      	nop
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b362:	79fb      	ldrb	r3, [r7, #7]
 800b364:	2b03      	cmp	r3, #3
 800b366:	d817      	bhi.n	800b398 <USBD_Get_USB_Status+0x44>
 800b368:	a201      	add	r2, pc, #4	@ (adr r2, 800b370 <USBD_Get_USB_Status+0x1c>)
 800b36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36e:	bf00      	nop
 800b370:	0800b381 	.word	0x0800b381
 800b374:	0800b387 	.word	0x0800b387
 800b378:	0800b38d 	.word	0x0800b38d
 800b37c:	0800b393 	.word	0x0800b393
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b380:	2300      	movs	r3, #0
 800b382:	73fb      	strb	r3, [r7, #15]
    break;
 800b384:	e00b      	b.n	800b39e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b386:	2303      	movs	r3, #3
 800b388:	73fb      	strb	r3, [r7, #15]
    break;
 800b38a:	e008      	b.n	800b39e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b38c:	2301      	movs	r3, #1
 800b38e:	73fb      	strb	r3, [r7, #15]
    break;
 800b390:	e005      	b.n	800b39e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b392:	2303      	movs	r3, #3
 800b394:	73fb      	strb	r3, [r7, #15]
    break;
 800b396:	e002      	b.n	800b39e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b398:	2303      	movs	r3, #3
 800b39a:	73fb      	strb	r3, [r7, #15]
    break;
 800b39c:	bf00      	nop
  }
  return usb_status;
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <std>:
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	b510      	push	{r4, lr}
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3ba:	6083      	str	r3, [r0, #8]
 800b3bc:	8181      	strh	r1, [r0, #12]
 800b3be:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3c0:	81c2      	strh	r2, [r0, #14]
 800b3c2:	6183      	str	r3, [r0, #24]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	2208      	movs	r2, #8
 800b3c8:	305c      	adds	r0, #92	@ 0x5c
 800b3ca:	f000 f9f9 	bl	800b7c0 <memset>
 800b3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b404 <std+0x58>)
 800b3d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b408 <std+0x5c>)
 800b3d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b40c <std+0x60>)
 800b3d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3da:	4b0d      	ldr	r3, [pc, #52]	@ (800b410 <std+0x64>)
 800b3dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3de:	4b0d      	ldr	r3, [pc, #52]	@ (800b414 <std+0x68>)
 800b3e0:	6224      	str	r4, [r4, #32]
 800b3e2:	429c      	cmp	r4, r3
 800b3e4:	d006      	beq.n	800b3f4 <std+0x48>
 800b3e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3ea:	4294      	cmp	r4, r2
 800b3ec:	d002      	beq.n	800b3f4 <std+0x48>
 800b3ee:	33d0      	adds	r3, #208	@ 0xd0
 800b3f0:	429c      	cmp	r4, r3
 800b3f2:	d105      	bne.n	800b400 <std+0x54>
 800b3f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3fc:	f000 ba58 	b.w	800b8b0 <__retarget_lock_init_recursive>
 800b400:	bd10      	pop	{r4, pc}
 800b402:	bf00      	nop
 800b404:	0800b611 	.word	0x0800b611
 800b408:	0800b633 	.word	0x0800b633
 800b40c:	0800b66b 	.word	0x0800b66b
 800b410:	0800b68f 	.word	0x0800b68f
 800b414:	20001d80 	.word	0x20001d80

0800b418 <stdio_exit_handler>:
 800b418:	4a02      	ldr	r2, [pc, #8]	@ (800b424 <stdio_exit_handler+0xc>)
 800b41a:	4903      	ldr	r1, [pc, #12]	@ (800b428 <stdio_exit_handler+0x10>)
 800b41c:	4803      	ldr	r0, [pc, #12]	@ (800b42c <stdio_exit_handler+0x14>)
 800b41e:	f000 b869 	b.w	800b4f4 <_fwalk_sglue>
 800b422:	bf00      	nop
 800b424:	20000194 	.word	0x20000194
 800b428:	0800c16d 	.word	0x0800c16d
 800b42c:	200001a4 	.word	0x200001a4

0800b430 <cleanup_stdio>:
 800b430:	6841      	ldr	r1, [r0, #4]
 800b432:	4b0c      	ldr	r3, [pc, #48]	@ (800b464 <cleanup_stdio+0x34>)
 800b434:	4299      	cmp	r1, r3
 800b436:	b510      	push	{r4, lr}
 800b438:	4604      	mov	r4, r0
 800b43a:	d001      	beq.n	800b440 <cleanup_stdio+0x10>
 800b43c:	f000 fe96 	bl	800c16c <_fflush_r>
 800b440:	68a1      	ldr	r1, [r4, #8]
 800b442:	4b09      	ldr	r3, [pc, #36]	@ (800b468 <cleanup_stdio+0x38>)
 800b444:	4299      	cmp	r1, r3
 800b446:	d002      	beq.n	800b44e <cleanup_stdio+0x1e>
 800b448:	4620      	mov	r0, r4
 800b44a:	f000 fe8f 	bl	800c16c <_fflush_r>
 800b44e:	68e1      	ldr	r1, [r4, #12]
 800b450:	4b06      	ldr	r3, [pc, #24]	@ (800b46c <cleanup_stdio+0x3c>)
 800b452:	4299      	cmp	r1, r3
 800b454:	d004      	beq.n	800b460 <cleanup_stdio+0x30>
 800b456:	4620      	mov	r0, r4
 800b458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b45c:	f000 be86 	b.w	800c16c <_fflush_r>
 800b460:	bd10      	pop	{r4, pc}
 800b462:	bf00      	nop
 800b464:	20001d80 	.word	0x20001d80
 800b468:	20001de8 	.word	0x20001de8
 800b46c:	20001e50 	.word	0x20001e50

0800b470 <global_stdio_init.part.0>:
 800b470:	b510      	push	{r4, lr}
 800b472:	4b0b      	ldr	r3, [pc, #44]	@ (800b4a0 <global_stdio_init.part.0+0x30>)
 800b474:	4c0b      	ldr	r4, [pc, #44]	@ (800b4a4 <global_stdio_init.part.0+0x34>)
 800b476:	4a0c      	ldr	r2, [pc, #48]	@ (800b4a8 <global_stdio_init.part.0+0x38>)
 800b478:	601a      	str	r2, [r3, #0]
 800b47a:	4620      	mov	r0, r4
 800b47c:	2200      	movs	r2, #0
 800b47e:	2104      	movs	r1, #4
 800b480:	f7ff ff94 	bl	800b3ac <std>
 800b484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b488:	2201      	movs	r2, #1
 800b48a:	2109      	movs	r1, #9
 800b48c:	f7ff ff8e 	bl	800b3ac <std>
 800b490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b494:	2202      	movs	r2, #2
 800b496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b49a:	2112      	movs	r1, #18
 800b49c:	f7ff bf86 	b.w	800b3ac <std>
 800b4a0:	20001eb8 	.word	0x20001eb8
 800b4a4:	20001d80 	.word	0x20001d80
 800b4a8:	0800b419 	.word	0x0800b419

0800b4ac <__sfp_lock_acquire>:
 800b4ac:	4801      	ldr	r0, [pc, #4]	@ (800b4b4 <__sfp_lock_acquire+0x8>)
 800b4ae:	f000 ba00 	b.w	800b8b2 <__retarget_lock_acquire_recursive>
 800b4b2:	bf00      	nop
 800b4b4:	20001ec1 	.word	0x20001ec1

0800b4b8 <__sfp_lock_release>:
 800b4b8:	4801      	ldr	r0, [pc, #4]	@ (800b4c0 <__sfp_lock_release+0x8>)
 800b4ba:	f000 b9fb 	b.w	800b8b4 <__retarget_lock_release_recursive>
 800b4be:	bf00      	nop
 800b4c0:	20001ec1 	.word	0x20001ec1

0800b4c4 <__sinit>:
 800b4c4:	b510      	push	{r4, lr}
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	f7ff fff0 	bl	800b4ac <__sfp_lock_acquire>
 800b4cc:	6a23      	ldr	r3, [r4, #32]
 800b4ce:	b11b      	cbz	r3, 800b4d8 <__sinit+0x14>
 800b4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d4:	f7ff bff0 	b.w	800b4b8 <__sfp_lock_release>
 800b4d8:	4b04      	ldr	r3, [pc, #16]	@ (800b4ec <__sinit+0x28>)
 800b4da:	6223      	str	r3, [r4, #32]
 800b4dc:	4b04      	ldr	r3, [pc, #16]	@ (800b4f0 <__sinit+0x2c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1f5      	bne.n	800b4d0 <__sinit+0xc>
 800b4e4:	f7ff ffc4 	bl	800b470 <global_stdio_init.part.0>
 800b4e8:	e7f2      	b.n	800b4d0 <__sinit+0xc>
 800b4ea:	bf00      	nop
 800b4ec:	0800b431 	.word	0x0800b431
 800b4f0:	20001eb8 	.word	0x20001eb8

0800b4f4 <_fwalk_sglue>:
 800b4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	4607      	mov	r7, r0
 800b4fa:	4688      	mov	r8, r1
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	2600      	movs	r6, #0
 800b500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b504:	f1b9 0901 	subs.w	r9, r9, #1
 800b508:	d505      	bpl.n	800b516 <_fwalk_sglue+0x22>
 800b50a:	6824      	ldr	r4, [r4, #0]
 800b50c:	2c00      	cmp	r4, #0
 800b50e:	d1f7      	bne.n	800b500 <_fwalk_sglue+0xc>
 800b510:	4630      	mov	r0, r6
 800b512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b516:	89ab      	ldrh	r3, [r5, #12]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d907      	bls.n	800b52c <_fwalk_sglue+0x38>
 800b51c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b520:	3301      	adds	r3, #1
 800b522:	d003      	beq.n	800b52c <_fwalk_sglue+0x38>
 800b524:	4629      	mov	r1, r5
 800b526:	4638      	mov	r0, r7
 800b528:	47c0      	blx	r8
 800b52a:	4306      	orrs	r6, r0
 800b52c:	3568      	adds	r5, #104	@ 0x68
 800b52e:	e7e9      	b.n	800b504 <_fwalk_sglue+0x10>

0800b530 <iprintf>:
 800b530:	b40f      	push	{r0, r1, r2, r3}
 800b532:	b507      	push	{r0, r1, r2, lr}
 800b534:	4906      	ldr	r1, [pc, #24]	@ (800b550 <iprintf+0x20>)
 800b536:	ab04      	add	r3, sp, #16
 800b538:	6808      	ldr	r0, [r1, #0]
 800b53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b53e:	6881      	ldr	r1, [r0, #8]
 800b540:	9301      	str	r3, [sp, #4]
 800b542:	f000 fae9 	bl	800bb18 <_vfiprintf_r>
 800b546:	b003      	add	sp, #12
 800b548:	f85d eb04 	ldr.w	lr, [sp], #4
 800b54c:	b004      	add	sp, #16
 800b54e:	4770      	bx	lr
 800b550:	200001a0 	.word	0x200001a0

0800b554 <_puts_r>:
 800b554:	6a03      	ldr	r3, [r0, #32]
 800b556:	b570      	push	{r4, r5, r6, lr}
 800b558:	6884      	ldr	r4, [r0, #8]
 800b55a:	4605      	mov	r5, r0
 800b55c:	460e      	mov	r6, r1
 800b55e:	b90b      	cbnz	r3, 800b564 <_puts_r+0x10>
 800b560:	f7ff ffb0 	bl	800b4c4 <__sinit>
 800b564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b566:	07db      	lsls	r3, r3, #31
 800b568:	d405      	bmi.n	800b576 <_puts_r+0x22>
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	0598      	lsls	r0, r3, #22
 800b56e:	d402      	bmi.n	800b576 <_puts_r+0x22>
 800b570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b572:	f000 f99e 	bl	800b8b2 <__retarget_lock_acquire_recursive>
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	0719      	lsls	r1, r3, #28
 800b57a:	d502      	bpl.n	800b582 <_puts_r+0x2e>
 800b57c:	6923      	ldr	r3, [r4, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d135      	bne.n	800b5ee <_puts_r+0x9a>
 800b582:	4621      	mov	r1, r4
 800b584:	4628      	mov	r0, r5
 800b586:	f000 f8c5 	bl	800b714 <__swsetup_r>
 800b58a:	b380      	cbz	r0, 800b5ee <_puts_r+0x9a>
 800b58c:	f04f 35ff 	mov.w	r5, #4294967295
 800b590:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b592:	07da      	lsls	r2, r3, #31
 800b594:	d405      	bmi.n	800b5a2 <_puts_r+0x4e>
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	059b      	lsls	r3, r3, #22
 800b59a:	d402      	bmi.n	800b5a2 <_puts_r+0x4e>
 800b59c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b59e:	f000 f989 	bl	800b8b4 <__retarget_lock_release_recursive>
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	bd70      	pop	{r4, r5, r6, pc}
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	da04      	bge.n	800b5b4 <_puts_r+0x60>
 800b5aa:	69a2      	ldr	r2, [r4, #24]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	dc17      	bgt.n	800b5e0 <_puts_r+0x8c>
 800b5b0:	290a      	cmp	r1, #10
 800b5b2:	d015      	beq.n	800b5e0 <_puts_r+0x8c>
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	6022      	str	r2, [r4, #0]
 800b5ba:	7019      	strb	r1, [r3, #0]
 800b5bc:	68a3      	ldr	r3, [r4, #8]
 800b5be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	60a3      	str	r3, [r4, #8]
 800b5c6:	2900      	cmp	r1, #0
 800b5c8:	d1ed      	bne.n	800b5a6 <_puts_r+0x52>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	da11      	bge.n	800b5f2 <_puts_r+0x9e>
 800b5ce:	4622      	mov	r2, r4
 800b5d0:	210a      	movs	r1, #10
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	f000 f85f 	bl	800b696 <__swbuf_r>
 800b5d8:	3001      	adds	r0, #1
 800b5da:	d0d7      	beq.n	800b58c <_puts_r+0x38>
 800b5dc:	250a      	movs	r5, #10
 800b5de:	e7d7      	b.n	800b590 <_puts_r+0x3c>
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f000 f857 	bl	800b696 <__swbuf_r>
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d1e7      	bne.n	800b5bc <_puts_r+0x68>
 800b5ec:	e7ce      	b.n	800b58c <_puts_r+0x38>
 800b5ee:	3e01      	subs	r6, #1
 800b5f0:	e7e4      	b.n	800b5bc <_puts_r+0x68>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	1c5a      	adds	r2, r3, #1
 800b5f6:	6022      	str	r2, [r4, #0]
 800b5f8:	220a      	movs	r2, #10
 800b5fa:	701a      	strb	r2, [r3, #0]
 800b5fc:	e7ee      	b.n	800b5dc <_puts_r+0x88>
	...

0800b600 <puts>:
 800b600:	4b02      	ldr	r3, [pc, #8]	@ (800b60c <puts+0xc>)
 800b602:	4601      	mov	r1, r0
 800b604:	6818      	ldr	r0, [r3, #0]
 800b606:	f7ff bfa5 	b.w	800b554 <_puts_r>
 800b60a:	bf00      	nop
 800b60c:	200001a0 	.word	0x200001a0

0800b610 <__sread>:
 800b610:	b510      	push	{r4, lr}
 800b612:	460c      	mov	r4, r1
 800b614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b618:	f000 f8fc 	bl	800b814 <_read_r>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	bfab      	itete	ge
 800b620:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b622:	89a3      	ldrhlt	r3, [r4, #12]
 800b624:	181b      	addge	r3, r3, r0
 800b626:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b62a:	bfac      	ite	ge
 800b62c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b62e:	81a3      	strhlt	r3, [r4, #12]
 800b630:	bd10      	pop	{r4, pc}

0800b632 <__swrite>:
 800b632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b636:	461f      	mov	r7, r3
 800b638:	898b      	ldrh	r3, [r1, #12]
 800b63a:	05db      	lsls	r3, r3, #23
 800b63c:	4605      	mov	r5, r0
 800b63e:	460c      	mov	r4, r1
 800b640:	4616      	mov	r6, r2
 800b642:	d505      	bpl.n	800b650 <__swrite+0x1e>
 800b644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b648:	2302      	movs	r3, #2
 800b64a:	2200      	movs	r2, #0
 800b64c:	f000 f8d0 	bl	800b7f0 <_lseek_r>
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b65a:	81a3      	strh	r3, [r4, #12]
 800b65c:	4632      	mov	r2, r6
 800b65e:	463b      	mov	r3, r7
 800b660:	4628      	mov	r0, r5
 800b662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b666:	f000 b8e7 	b.w	800b838 <_write_r>

0800b66a <__sseek>:
 800b66a:	b510      	push	{r4, lr}
 800b66c:	460c      	mov	r4, r1
 800b66e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b672:	f000 f8bd 	bl	800b7f0 <_lseek_r>
 800b676:	1c43      	adds	r3, r0, #1
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	bf15      	itete	ne
 800b67c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b67e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b686:	81a3      	strheq	r3, [r4, #12]
 800b688:	bf18      	it	ne
 800b68a:	81a3      	strhne	r3, [r4, #12]
 800b68c:	bd10      	pop	{r4, pc}

0800b68e <__sclose>:
 800b68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b692:	f000 b89d 	b.w	800b7d0 <_close_r>

0800b696 <__swbuf_r>:
 800b696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b698:	460e      	mov	r6, r1
 800b69a:	4614      	mov	r4, r2
 800b69c:	4605      	mov	r5, r0
 800b69e:	b118      	cbz	r0, 800b6a8 <__swbuf_r+0x12>
 800b6a0:	6a03      	ldr	r3, [r0, #32]
 800b6a2:	b90b      	cbnz	r3, 800b6a8 <__swbuf_r+0x12>
 800b6a4:	f7ff ff0e 	bl	800b4c4 <__sinit>
 800b6a8:	69a3      	ldr	r3, [r4, #24]
 800b6aa:	60a3      	str	r3, [r4, #8]
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	071a      	lsls	r2, r3, #28
 800b6b0:	d501      	bpl.n	800b6b6 <__swbuf_r+0x20>
 800b6b2:	6923      	ldr	r3, [r4, #16]
 800b6b4:	b943      	cbnz	r3, 800b6c8 <__swbuf_r+0x32>
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f000 f82b 	bl	800b714 <__swsetup_r>
 800b6be:	b118      	cbz	r0, 800b6c8 <__swbuf_r+0x32>
 800b6c0:	f04f 37ff 	mov.w	r7, #4294967295
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	6922      	ldr	r2, [r4, #16]
 800b6cc:	1a98      	subs	r0, r3, r2
 800b6ce:	6963      	ldr	r3, [r4, #20]
 800b6d0:	b2f6      	uxtb	r6, r6
 800b6d2:	4283      	cmp	r3, r0
 800b6d4:	4637      	mov	r7, r6
 800b6d6:	dc05      	bgt.n	800b6e4 <__swbuf_r+0x4e>
 800b6d8:	4621      	mov	r1, r4
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f000 fd46 	bl	800c16c <_fflush_r>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d1ed      	bne.n	800b6c0 <__swbuf_r+0x2a>
 800b6e4:	68a3      	ldr	r3, [r4, #8]
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	60a3      	str	r3, [r4, #8]
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	1c5a      	adds	r2, r3, #1
 800b6ee:	6022      	str	r2, [r4, #0]
 800b6f0:	701e      	strb	r6, [r3, #0]
 800b6f2:	6962      	ldr	r2, [r4, #20]
 800b6f4:	1c43      	adds	r3, r0, #1
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d004      	beq.n	800b704 <__swbuf_r+0x6e>
 800b6fa:	89a3      	ldrh	r3, [r4, #12]
 800b6fc:	07db      	lsls	r3, r3, #31
 800b6fe:	d5e1      	bpl.n	800b6c4 <__swbuf_r+0x2e>
 800b700:	2e0a      	cmp	r6, #10
 800b702:	d1df      	bne.n	800b6c4 <__swbuf_r+0x2e>
 800b704:	4621      	mov	r1, r4
 800b706:	4628      	mov	r0, r5
 800b708:	f000 fd30 	bl	800c16c <_fflush_r>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d0d9      	beq.n	800b6c4 <__swbuf_r+0x2e>
 800b710:	e7d6      	b.n	800b6c0 <__swbuf_r+0x2a>
	...

0800b714 <__swsetup_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4b29      	ldr	r3, [pc, #164]	@ (800b7bc <__swsetup_r+0xa8>)
 800b718:	4605      	mov	r5, r0
 800b71a:	6818      	ldr	r0, [r3, #0]
 800b71c:	460c      	mov	r4, r1
 800b71e:	b118      	cbz	r0, 800b728 <__swsetup_r+0x14>
 800b720:	6a03      	ldr	r3, [r0, #32]
 800b722:	b90b      	cbnz	r3, 800b728 <__swsetup_r+0x14>
 800b724:	f7ff fece 	bl	800b4c4 <__sinit>
 800b728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72c:	0719      	lsls	r1, r3, #28
 800b72e:	d422      	bmi.n	800b776 <__swsetup_r+0x62>
 800b730:	06da      	lsls	r2, r3, #27
 800b732:	d407      	bmi.n	800b744 <__swsetup_r+0x30>
 800b734:	2209      	movs	r2, #9
 800b736:	602a      	str	r2, [r5, #0]
 800b738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	f04f 30ff 	mov.w	r0, #4294967295
 800b742:	e033      	b.n	800b7ac <__swsetup_r+0x98>
 800b744:	0758      	lsls	r0, r3, #29
 800b746:	d512      	bpl.n	800b76e <__swsetup_r+0x5a>
 800b748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b74a:	b141      	cbz	r1, 800b75e <__swsetup_r+0x4a>
 800b74c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b750:	4299      	cmp	r1, r3
 800b752:	d002      	beq.n	800b75a <__swsetup_r+0x46>
 800b754:	4628      	mov	r0, r5
 800b756:	f000 f8bd 	bl	800b8d4 <_free_r>
 800b75a:	2300      	movs	r3, #0
 800b75c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	2300      	movs	r3, #0
 800b768:	6063      	str	r3, [r4, #4]
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	f043 0308 	orr.w	r3, r3, #8
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	6923      	ldr	r3, [r4, #16]
 800b778:	b94b      	cbnz	r3, 800b78e <__swsetup_r+0x7a>
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b784:	d003      	beq.n	800b78e <__swsetup_r+0x7a>
 800b786:	4621      	mov	r1, r4
 800b788:	4628      	mov	r0, r5
 800b78a:	f000 fd3d 	bl	800c208 <__smakebuf_r>
 800b78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b792:	f013 0201 	ands.w	r2, r3, #1
 800b796:	d00a      	beq.n	800b7ae <__swsetup_r+0x9a>
 800b798:	2200      	movs	r2, #0
 800b79a:	60a2      	str	r2, [r4, #8]
 800b79c:	6962      	ldr	r2, [r4, #20]
 800b79e:	4252      	negs	r2, r2
 800b7a0:	61a2      	str	r2, [r4, #24]
 800b7a2:	6922      	ldr	r2, [r4, #16]
 800b7a4:	b942      	cbnz	r2, 800b7b8 <__swsetup_r+0xa4>
 800b7a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7aa:	d1c5      	bne.n	800b738 <__swsetup_r+0x24>
 800b7ac:	bd38      	pop	{r3, r4, r5, pc}
 800b7ae:	0799      	lsls	r1, r3, #30
 800b7b0:	bf58      	it	pl
 800b7b2:	6962      	ldrpl	r2, [r4, #20]
 800b7b4:	60a2      	str	r2, [r4, #8]
 800b7b6:	e7f4      	b.n	800b7a2 <__swsetup_r+0x8e>
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	e7f7      	b.n	800b7ac <__swsetup_r+0x98>
 800b7bc:	200001a0 	.word	0x200001a0

0800b7c0 <memset>:
 800b7c0:	4402      	add	r2, r0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d100      	bne.n	800b7ca <memset+0xa>
 800b7c8:	4770      	bx	lr
 800b7ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b7ce:	e7f9      	b.n	800b7c4 <memset+0x4>

0800b7d0 <_close_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4d06      	ldr	r5, [pc, #24]	@ (800b7ec <_close_r+0x1c>)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	4608      	mov	r0, r1
 800b7da:	602b      	str	r3, [r5, #0]
 800b7dc:	f7f5 faeb 	bl	8000db6 <_close>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_close_r+0x1a>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_close_r+0x1a>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20001ebc 	.word	0x20001ebc

0800b7f0 <_lseek_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d07      	ldr	r5, [pc, #28]	@ (800b810 <_lseek_r+0x20>)
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	4608      	mov	r0, r1
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	602a      	str	r2, [r5, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f7f5 fb00 	bl	8000e04 <_lseek>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_lseek_r+0x1e>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_lseek_r+0x1e>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	20001ebc 	.word	0x20001ebc

0800b814 <_read_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	@ (800b834 <_read_r+0x20>)
 800b818:	4604      	mov	r4, r0
 800b81a:	4608      	mov	r0, r1
 800b81c:	4611      	mov	r1, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	602a      	str	r2, [r5, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	f7f5 faaa 	bl	8000d7c <_read>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_read_r+0x1e>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_read_r+0x1e>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	20001ebc 	.word	0x20001ebc

0800b838 <_write_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d07      	ldr	r5, [pc, #28]	@ (800b858 <_write_r+0x20>)
 800b83c:	4604      	mov	r4, r0
 800b83e:	4608      	mov	r0, r1
 800b840:	4611      	mov	r1, r2
 800b842:	2200      	movs	r2, #0
 800b844:	602a      	str	r2, [r5, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	f7f5 fc88 	bl	800115c <_write>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d102      	bne.n	800b856 <_write_r+0x1e>
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	b103      	cbz	r3, 800b856 <_write_r+0x1e>
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	20001ebc 	.word	0x20001ebc

0800b85c <__errno>:
 800b85c:	4b01      	ldr	r3, [pc, #4]	@ (800b864 <__errno+0x8>)
 800b85e:	6818      	ldr	r0, [r3, #0]
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	200001a0 	.word	0x200001a0

0800b868 <__libc_init_array>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	4d0d      	ldr	r5, [pc, #52]	@ (800b8a0 <__libc_init_array+0x38>)
 800b86c:	4c0d      	ldr	r4, [pc, #52]	@ (800b8a4 <__libc_init_array+0x3c>)
 800b86e:	1b64      	subs	r4, r4, r5
 800b870:	10a4      	asrs	r4, r4, #2
 800b872:	2600      	movs	r6, #0
 800b874:	42a6      	cmp	r6, r4
 800b876:	d109      	bne.n	800b88c <__libc_init_array+0x24>
 800b878:	4d0b      	ldr	r5, [pc, #44]	@ (800b8a8 <__libc_init_array+0x40>)
 800b87a:	4c0c      	ldr	r4, [pc, #48]	@ (800b8ac <__libc_init_array+0x44>)
 800b87c:	f000 fd32 	bl	800c2e4 <_init>
 800b880:	1b64      	subs	r4, r4, r5
 800b882:	10a4      	asrs	r4, r4, #2
 800b884:	2600      	movs	r6, #0
 800b886:	42a6      	cmp	r6, r4
 800b888:	d105      	bne.n	800b896 <__libc_init_array+0x2e>
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
 800b88c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b890:	4798      	blx	r3
 800b892:	3601      	adds	r6, #1
 800b894:	e7ee      	b.n	800b874 <__libc_init_array+0xc>
 800b896:	f855 3b04 	ldr.w	r3, [r5], #4
 800b89a:	4798      	blx	r3
 800b89c:	3601      	adds	r6, #1
 800b89e:	e7f2      	b.n	800b886 <__libc_init_array+0x1e>
 800b8a0:	0800c580 	.word	0x0800c580
 800b8a4:	0800c580 	.word	0x0800c580
 800b8a8:	0800c580 	.word	0x0800c580
 800b8ac:	0800c584 	.word	0x0800c584

0800b8b0 <__retarget_lock_init_recursive>:
 800b8b0:	4770      	bx	lr

0800b8b2 <__retarget_lock_acquire_recursive>:
 800b8b2:	4770      	bx	lr

0800b8b4 <__retarget_lock_release_recursive>:
 800b8b4:	4770      	bx	lr

0800b8b6 <memcpy>:
 800b8b6:	440a      	add	r2, r1
 800b8b8:	4291      	cmp	r1, r2
 800b8ba:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8be:	d100      	bne.n	800b8c2 <memcpy+0xc>
 800b8c0:	4770      	bx	lr
 800b8c2:	b510      	push	{r4, lr}
 800b8c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8cc:	4291      	cmp	r1, r2
 800b8ce:	d1f9      	bne.n	800b8c4 <memcpy+0xe>
 800b8d0:	bd10      	pop	{r4, pc}
	...

0800b8d4 <_free_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	2900      	cmp	r1, #0
 800b8da:	d041      	beq.n	800b960 <_free_r+0x8c>
 800b8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8e0:	1f0c      	subs	r4, r1, #4
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bfb8      	it	lt
 800b8e6:	18e4      	addlt	r4, r4, r3
 800b8e8:	f000 f8e0 	bl	800baac <__malloc_lock>
 800b8ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b964 <_free_r+0x90>)
 800b8ee:	6813      	ldr	r3, [r2, #0]
 800b8f0:	b933      	cbnz	r3, 800b900 <_free_r+0x2c>
 800b8f2:	6063      	str	r3, [r4, #4]
 800b8f4:	6014      	str	r4, [r2, #0]
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8fc:	f000 b8dc 	b.w	800bab8 <__malloc_unlock>
 800b900:	42a3      	cmp	r3, r4
 800b902:	d908      	bls.n	800b916 <_free_r+0x42>
 800b904:	6820      	ldr	r0, [r4, #0]
 800b906:	1821      	adds	r1, r4, r0
 800b908:	428b      	cmp	r3, r1
 800b90a:	bf01      	itttt	eq
 800b90c:	6819      	ldreq	r1, [r3, #0]
 800b90e:	685b      	ldreq	r3, [r3, #4]
 800b910:	1809      	addeq	r1, r1, r0
 800b912:	6021      	streq	r1, [r4, #0]
 800b914:	e7ed      	b.n	800b8f2 <_free_r+0x1e>
 800b916:	461a      	mov	r2, r3
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	b10b      	cbz	r3, 800b920 <_free_r+0x4c>
 800b91c:	42a3      	cmp	r3, r4
 800b91e:	d9fa      	bls.n	800b916 <_free_r+0x42>
 800b920:	6811      	ldr	r1, [r2, #0]
 800b922:	1850      	adds	r0, r2, r1
 800b924:	42a0      	cmp	r0, r4
 800b926:	d10b      	bne.n	800b940 <_free_r+0x6c>
 800b928:	6820      	ldr	r0, [r4, #0]
 800b92a:	4401      	add	r1, r0
 800b92c:	1850      	adds	r0, r2, r1
 800b92e:	4283      	cmp	r3, r0
 800b930:	6011      	str	r1, [r2, #0]
 800b932:	d1e0      	bne.n	800b8f6 <_free_r+0x22>
 800b934:	6818      	ldr	r0, [r3, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	6053      	str	r3, [r2, #4]
 800b93a:	4408      	add	r0, r1
 800b93c:	6010      	str	r0, [r2, #0]
 800b93e:	e7da      	b.n	800b8f6 <_free_r+0x22>
 800b940:	d902      	bls.n	800b948 <_free_r+0x74>
 800b942:	230c      	movs	r3, #12
 800b944:	602b      	str	r3, [r5, #0]
 800b946:	e7d6      	b.n	800b8f6 <_free_r+0x22>
 800b948:	6820      	ldr	r0, [r4, #0]
 800b94a:	1821      	adds	r1, r4, r0
 800b94c:	428b      	cmp	r3, r1
 800b94e:	bf04      	itt	eq
 800b950:	6819      	ldreq	r1, [r3, #0]
 800b952:	685b      	ldreq	r3, [r3, #4]
 800b954:	6063      	str	r3, [r4, #4]
 800b956:	bf04      	itt	eq
 800b958:	1809      	addeq	r1, r1, r0
 800b95a:	6021      	streq	r1, [r4, #0]
 800b95c:	6054      	str	r4, [r2, #4]
 800b95e:	e7ca      	b.n	800b8f6 <_free_r+0x22>
 800b960:	bd38      	pop	{r3, r4, r5, pc}
 800b962:	bf00      	nop
 800b964:	20001ec8 	.word	0x20001ec8

0800b968 <sbrk_aligned>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	4e0f      	ldr	r6, [pc, #60]	@ (800b9a8 <sbrk_aligned+0x40>)
 800b96c:	460c      	mov	r4, r1
 800b96e:	6831      	ldr	r1, [r6, #0]
 800b970:	4605      	mov	r5, r0
 800b972:	b911      	cbnz	r1, 800b97a <sbrk_aligned+0x12>
 800b974:	f000 fca6 	bl	800c2c4 <_sbrk_r>
 800b978:	6030      	str	r0, [r6, #0]
 800b97a:	4621      	mov	r1, r4
 800b97c:	4628      	mov	r0, r5
 800b97e:	f000 fca1 	bl	800c2c4 <_sbrk_r>
 800b982:	1c43      	adds	r3, r0, #1
 800b984:	d103      	bne.n	800b98e <sbrk_aligned+0x26>
 800b986:	f04f 34ff 	mov.w	r4, #4294967295
 800b98a:	4620      	mov	r0, r4
 800b98c:	bd70      	pop	{r4, r5, r6, pc}
 800b98e:	1cc4      	adds	r4, r0, #3
 800b990:	f024 0403 	bic.w	r4, r4, #3
 800b994:	42a0      	cmp	r0, r4
 800b996:	d0f8      	beq.n	800b98a <sbrk_aligned+0x22>
 800b998:	1a21      	subs	r1, r4, r0
 800b99a:	4628      	mov	r0, r5
 800b99c:	f000 fc92 	bl	800c2c4 <_sbrk_r>
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	d1f2      	bne.n	800b98a <sbrk_aligned+0x22>
 800b9a4:	e7ef      	b.n	800b986 <sbrk_aligned+0x1e>
 800b9a6:	bf00      	nop
 800b9a8:	20001ec4 	.word	0x20001ec4

0800b9ac <_malloc_r>:
 800b9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b0:	1ccd      	adds	r5, r1, #3
 800b9b2:	f025 0503 	bic.w	r5, r5, #3
 800b9b6:	3508      	adds	r5, #8
 800b9b8:	2d0c      	cmp	r5, #12
 800b9ba:	bf38      	it	cc
 800b9bc:	250c      	movcc	r5, #12
 800b9be:	2d00      	cmp	r5, #0
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	db01      	blt.n	800b9c8 <_malloc_r+0x1c>
 800b9c4:	42a9      	cmp	r1, r5
 800b9c6:	d904      	bls.n	800b9d2 <_malloc_r+0x26>
 800b9c8:	230c      	movs	r3, #12
 800b9ca:	6033      	str	r3, [r6, #0]
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800baa8 <_malloc_r+0xfc>
 800b9d6:	f000 f869 	bl	800baac <__malloc_lock>
 800b9da:	f8d8 3000 	ldr.w	r3, [r8]
 800b9de:	461c      	mov	r4, r3
 800b9e0:	bb44      	cbnz	r4, 800ba34 <_malloc_r+0x88>
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	f7ff ffbf 	bl	800b968 <sbrk_aligned>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	d158      	bne.n	800baa2 <_malloc_r+0xf6>
 800b9f0:	f8d8 4000 	ldr.w	r4, [r8]
 800b9f4:	4627      	mov	r7, r4
 800b9f6:	2f00      	cmp	r7, #0
 800b9f8:	d143      	bne.n	800ba82 <_malloc_r+0xd6>
 800b9fa:	2c00      	cmp	r4, #0
 800b9fc:	d04b      	beq.n	800ba96 <_malloc_r+0xea>
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	4639      	mov	r1, r7
 800ba02:	4630      	mov	r0, r6
 800ba04:	eb04 0903 	add.w	r9, r4, r3
 800ba08:	f000 fc5c 	bl	800c2c4 <_sbrk_r>
 800ba0c:	4581      	cmp	r9, r0
 800ba0e:	d142      	bne.n	800ba96 <_malloc_r+0xea>
 800ba10:	6821      	ldr	r1, [r4, #0]
 800ba12:	1a6d      	subs	r5, r5, r1
 800ba14:	4629      	mov	r1, r5
 800ba16:	4630      	mov	r0, r6
 800ba18:	f7ff ffa6 	bl	800b968 <sbrk_aligned>
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	d03a      	beq.n	800ba96 <_malloc_r+0xea>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	442b      	add	r3, r5
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	f8d8 3000 	ldr.w	r3, [r8]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	bb62      	cbnz	r2, 800ba88 <_malloc_r+0xdc>
 800ba2e:	f8c8 7000 	str.w	r7, [r8]
 800ba32:	e00f      	b.n	800ba54 <_malloc_r+0xa8>
 800ba34:	6822      	ldr	r2, [r4, #0]
 800ba36:	1b52      	subs	r2, r2, r5
 800ba38:	d420      	bmi.n	800ba7c <_malloc_r+0xd0>
 800ba3a:	2a0b      	cmp	r2, #11
 800ba3c:	d917      	bls.n	800ba6e <_malloc_r+0xc2>
 800ba3e:	1961      	adds	r1, r4, r5
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	6025      	str	r5, [r4, #0]
 800ba44:	bf18      	it	ne
 800ba46:	6059      	strne	r1, [r3, #4]
 800ba48:	6863      	ldr	r3, [r4, #4]
 800ba4a:	bf08      	it	eq
 800ba4c:	f8c8 1000 	streq.w	r1, [r8]
 800ba50:	5162      	str	r2, [r4, r5]
 800ba52:	604b      	str	r3, [r1, #4]
 800ba54:	4630      	mov	r0, r6
 800ba56:	f000 f82f 	bl	800bab8 <__malloc_unlock>
 800ba5a:	f104 000b 	add.w	r0, r4, #11
 800ba5e:	1d23      	adds	r3, r4, #4
 800ba60:	f020 0007 	bic.w	r0, r0, #7
 800ba64:	1ac2      	subs	r2, r0, r3
 800ba66:	bf1c      	itt	ne
 800ba68:	1a1b      	subne	r3, r3, r0
 800ba6a:	50a3      	strne	r3, [r4, r2]
 800ba6c:	e7af      	b.n	800b9ce <_malloc_r+0x22>
 800ba6e:	6862      	ldr	r2, [r4, #4]
 800ba70:	42a3      	cmp	r3, r4
 800ba72:	bf0c      	ite	eq
 800ba74:	f8c8 2000 	streq.w	r2, [r8]
 800ba78:	605a      	strne	r2, [r3, #4]
 800ba7a:	e7eb      	b.n	800ba54 <_malloc_r+0xa8>
 800ba7c:	4623      	mov	r3, r4
 800ba7e:	6864      	ldr	r4, [r4, #4]
 800ba80:	e7ae      	b.n	800b9e0 <_malloc_r+0x34>
 800ba82:	463c      	mov	r4, r7
 800ba84:	687f      	ldr	r7, [r7, #4]
 800ba86:	e7b6      	b.n	800b9f6 <_malloc_r+0x4a>
 800ba88:	461a      	mov	r2, r3
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	42a3      	cmp	r3, r4
 800ba8e:	d1fb      	bne.n	800ba88 <_malloc_r+0xdc>
 800ba90:	2300      	movs	r3, #0
 800ba92:	6053      	str	r3, [r2, #4]
 800ba94:	e7de      	b.n	800ba54 <_malloc_r+0xa8>
 800ba96:	230c      	movs	r3, #12
 800ba98:	6033      	str	r3, [r6, #0]
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	f000 f80c 	bl	800bab8 <__malloc_unlock>
 800baa0:	e794      	b.n	800b9cc <_malloc_r+0x20>
 800baa2:	6005      	str	r5, [r0, #0]
 800baa4:	e7d6      	b.n	800ba54 <_malloc_r+0xa8>
 800baa6:	bf00      	nop
 800baa8:	20001ec8 	.word	0x20001ec8

0800baac <__malloc_lock>:
 800baac:	4801      	ldr	r0, [pc, #4]	@ (800bab4 <__malloc_lock+0x8>)
 800baae:	f7ff bf00 	b.w	800b8b2 <__retarget_lock_acquire_recursive>
 800bab2:	bf00      	nop
 800bab4:	20001ec0 	.word	0x20001ec0

0800bab8 <__malloc_unlock>:
 800bab8:	4801      	ldr	r0, [pc, #4]	@ (800bac0 <__malloc_unlock+0x8>)
 800baba:	f7ff befb 	b.w	800b8b4 <__retarget_lock_release_recursive>
 800babe:	bf00      	nop
 800bac0:	20001ec0 	.word	0x20001ec0

0800bac4 <__sfputc_r>:
 800bac4:	6893      	ldr	r3, [r2, #8]
 800bac6:	3b01      	subs	r3, #1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	b410      	push	{r4}
 800bacc:	6093      	str	r3, [r2, #8]
 800bace:	da08      	bge.n	800bae2 <__sfputc_r+0x1e>
 800bad0:	6994      	ldr	r4, [r2, #24]
 800bad2:	42a3      	cmp	r3, r4
 800bad4:	db01      	blt.n	800bada <__sfputc_r+0x16>
 800bad6:	290a      	cmp	r1, #10
 800bad8:	d103      	bne.n	800bae2 <__sfputc_r+0x1e>
 800bada:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bade:	f7ff bdda 	b.w	800b696 <__swbuf_r>
 800bae2:	6813      	ldr	r3, [r2, #0]
 800bae4:	1c58      	adds	r0, r3, #1
 800bae6:	6010      	str	r0, [r2, #0]
 800bae8:	7019      	strb	r1, [r3, #0]
 800baea:	4608      	mov	r0, r1
 800baec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <__sfputs_r>:
 800baf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf4:	4606      	mov	r6, r0
 800baf6:	460f      	mov	r7, r1
 800baf8:	4614      	mov	r4, r2
 800bafa:	18d5      	adds	r5, r2, r3
 800bafc:	42ac      	cmp	r4, r5
 800bafe:	d101      	bne.n	800bb04 <__sfputs_r+0x12>
 800bb00:	2000      	movs	r0, #0
 800bb02:	e007      	b.n	800bb14 <__sfputs_r+0x22>
 800bb04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb08:	463a      	mov	r2, r7
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f7ff ffda 	bl	800bac4 <__sfputc_r>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d1f3      	bne.n	800bafc <__sfputs_r+0xa>
 800bb14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb18 <_vfiprintf_r>:
 800bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb1c:	460d      	mov	r5, r1
 800bb1e:	b09d      	sub	sp, #116	@ 0x74
 800bb20:	4614      	mov	r4, r2
 800bb22:	4698      	mov	r8, r3
 800bb24:	4606      	mov	r6, r0
 800bb26:	b118      	cbz	r0, 800bb30 <_vfiprintf_r+0x18>
 800bb28:	6a03      	ldr	r3, [r0, #32]
 800bb2a:	b90b      	cbnz	r3, 800bb30 <_vfiprintf_r+0x18>
 800bb2c:	f7ff fcca 	bl	800b4c4 <__sinit>
 800bb30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb32:	07d9      	lsls	r1, r3, #31
 800bb34:	d405      	bmi.n	800bb42 <_vfiprintf_r+0x2a>
 800bb36:	89ab      	ldrh	r3, [r5, #12]
 800bb38:	059a      	lsls	r2, r3, #22
 800bb3a:	d402      	bmi.n	800bb42 <_vfiprintf_r+0x2a>
 800bb3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb3e:	f7ff feb8 	bl	800b8b2 <__retarget_lock_acquire_recursive>
 800bb42:	89ab      	ldrh	r3, [r5, #12]
 800bb44:	071b      	lsls	r3, r3, #28
 800bb46:	d501      	bpl.n	800bb4c <_vfiprintf_r+0x34>
 800bb48:	692b      	ldr	r3, [r5, #16]
 800bb4a:	b99b      	cbnz	r3, 800bb74 <_vfiprintf_r+0x5c>
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f7ff fde0 	bl	800b714 <__swsetup_r>
 800bb54:	b170      	cbz	r0, 800bb74 <_vfiprintf_r+0x5c>
 800bb56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb58:	07dc      	lsls	r4, r3, #31
 800bb5a:	d504      	bpl.n	800bb66 <_vfiprintf_r+0x4e>
 800bb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb60:	b01d      	add	sp, #116	@ 0x74
 800bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb66:	89ab      	ldrh	r3, [r5, #12]
 800bb68:	0598      	lsls	r0, r3, #22
 800bb6a:	d4f7      	bmi.n	800bb5c <_vfiprintf_r+0x44>
 800bb6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb6e:	f7ff fea1 	bl	800b8b4 <__retarget_lock_release_recursive>
 800bb72:	e7f3      	b.n	800bb5c <_vfiprintf_r+0x44>
 800bb74:	2300      	movs	r3, #0
 800bb76:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb78:	2320      	movs	r3, #32
 800bb7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb82:	2330      	movs	r3, #48	@ 0x30
 800bb84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd34 <_vfiprintf_r+0x21c>
 800bb88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb8c:	f04f 0901 	mov.w	r9, #1
 800bb90:	4623      	mov	r3, r4
 800bb92:	469a      	mov	sl, r3
 800bb94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb98:	b10a      	cbz	r2, 800bb9e <_vfiprintf_r+0x86>
 800bb9a:	2a25      	cmp	r2, #37	@ 0x25
 800bb9c:	d1f9      	bne.n	800bb92 <_vfiprintf_r+0x7a>
 800bb9e:	ebba 0b04 	subs.w	fp, sl, r4
 800bba2:	d00b      	beq.n	800bbbc <_vfiprintf_r+0xa4>
 800bba4:	465b      	mov	r3, fp
 800bba6:	4622      	mov	r2, r4
 800bba8:	4629      	mov	r1, r5
 800bbaa:	4630      	mov	r0, r6
 800bbac:	f7ff ffa1 	bl	800baf2 <__sfputs_r>
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	f000 80a7 	beq.w	800bd04 <_vfiprintf_r+0x1ec>
 800bbb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbb8:	445a      	add	r2, fp
 800bbba:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 809f 	beq.w	800bd04 <_vfiprintf_r+0x1ec>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbd0:	f10a 0a01 	add.w	sl, sl, #1
 800bbd4:	9304      	str	r3, [sp, #16]
 800bbd6:	9307      	str	r3, [sp, #28]
 800bbd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbdc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbde:	4654      	mov	r4, sl
 800bbe0:	2205      	movs	r2, #5
 800bbe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe6:	4853      	ldr	r0, [pc, #332]	@ (800bd34 <_vfiprintf_r+0x21c>)
 800bbe8:	f7f4 fb1a 	bl	8000220 <memchr>
 800bbec:	9a04      	ldr	r2, [sp, #16]
 800bbee:	b9d8      	cbnz	r0, 800bc28 <_vfiprintf_r+0x110>
 800bbf0:	06d1      	lsls	r1, r2, #27
 800bbf2:	bf44      	itt	mi
 800bbf4:	2320      	movmi	r3, #32
 800bbf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbfa:	0713      	lsls	r3, r2, #28
 800bbfc:	bf44      	itt	mi
 800bbfe:	232b      	movmi	r3, #43	@ 0x2b
 800bc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc04:	f89a 3000 	ldrb.w	r3, [sl]
 800bc08:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc0a:	d015      	beq.n	800bc38 <_vfiprintf_r+0x120>
 800bc0c:	9a07      	ldr	r2, [sp, #28]
 800bc0e:	4654      	mov	r4, sl
 800bc10:	2000      	movs	r0, #0
 800bc12:	f04f 0c0a 	mov.w	ip, #10
 800bc16:	4621      	mov	r1, r4
 800bc18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc1c:	3b30      	subs	r3, #48	@ 0x30
 800bc1e:	2b09      	cmp	r3, #9
 800bc20:	d94b      	bls.n	800bcba <_vfiprintf_r+0x1a2>
 800bc22:	b1b0      	cbz	r0, 800bc52 <_vfiprintf_r+0x13a>
 800bc24:	9207      	str	r2, [sp, #28]
 800bc26:	e014      	b.n	800bc52 <_vfiprintf_r+0x13a>
 800bc28:	eba0 0308 	sub.w	r3, r0, r8
 800bc2c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc30:	4313      	orrs	r3, r2
 800bc32:	9304      	str	r3, [sp, #16]
 800bc34:	46a2      	mov	sl, r4
 800bc36:	e7d2      	b.n	800bbde <_vfiprintf_r+0xc6>
 800bc38:	9b03      	ldr	r3, [sp, #12]
 800bc3a:	1d19      	adds	r1, r3, #4
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	9103      	str	r1, [sp, #12]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	bfbb      	ittet	lt
 800bc44:	425b      	neglt	r3, r3
 800bc46:	f042 0202 	orrlt.w	r2, r2, #2
 800bc4a:	9307      	strge	r3, [sp, #28]
 800bc4c:	9307      	strlt	r3, [sp, #28]
 800bc4e:	bfb8      	it	lt
 800bc50:	9204      	strlt	r2, [sp, #16]
 800bc52:	7823      	ldrb	r3, [r4, #0]
 800bc54:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc56:	d10a      	bne.n	800bc6e <_vfiprintf_r+0x156>
 800bc58:	7863      	ldrb	r3, [r4, #1]
 800bc5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc5c:	d132      	bne.n	800bcc4 <_vfiprintf_r+0x1ac>
 800bc5e:	9b03      	ldr	r3, [sp, #12]
 800bc60:	1d1a      	adds	r2, r3, #4
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	9203      	str	r2, [sp, #12]
 800bc66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc6a:	3402      	adds	r4, #2
 800bc6c:	9305      	str	r3, [sp, #20]
 800bc6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd44 <_vfiprintf_r+0x22c>
 800bc72:	7821      	ldrb	r1, [r4, #0]
 800bc74:	2203      	movs	r2, #3
 800bc76:	4650      	mov	r0, sl
 800bc78:	f7f4 fad2 	bl	8000220 <memchr>
 800bc7c:	b138      	cbz	r0, 800bc8e <_vfiprintf_r+0x176>
 800bc7e:	9b04      	ldr	r3, [sp, #16]
 800bc80:	eba0 000a 	sub.w	r0, r0, sl
 800bc84:	2240      	movs	r2, #64	@ 0x40
 800bc86:	4082      	lsls	r2, r0
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	3401      	adds	r4, #1
 800bc8c:	9304      	str	r3, [sp, #16]
 800bc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc92:	4829      	ldr	r0, [pc, #164]	@ (800bd38 <_vfiprintf_r+0x220>)
 800bc94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc98:	2206      	movs	r2, #6
 800bc9a:	f7f4 fac1 	bl	8000220 <memchr>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d03f      	beq.n	800bd22 <_vfiprintf_r+0x20a>
 800bca2:	4b26      	ldr	r3, [pc, #152]	@ (800bd3c <_vfiprintf_r+0x224>)
 800bca4:	bb1b      	cbnz	r3, 800bcee <_vfiprintf_r+0x1d6>
 800bca6:	9b03      	ldr	r3, [sp, #12]
 800bca8:	3307      	adds	r3, #7
 800bcaa:	f023 0307 	bic.w	r3, r3, #7
 800bcae:	3308      	adds	r3, #8
 800bcb0:	9303      	str	r3, [sp, #12]
 800bcb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb4:	443b      	add	r3, r7
 800bcb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcb8:	e76a      	b.n	800bb90 <_vfiprintf_r+0x78>
 800bcba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	e7a8      	b.n	800bc16 <_vfiprintf_r+0xfe>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	3401      	adds	r4, #1
 800bcc8:	9305      	str	r3, [sp, #20]
 800bcca:	4619      	mov	r1, r3
 800bccc:	f04f 0c0a 	mov.w	ip, #10
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcd6:	3a30      	subs	r2, #48	@ 0x30
 800bcd8:	2a09      	cmp	r2, #9
 800bcda:	d903      	bls.n	800bce4 <_vfiprintf_r+0x1cc>
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0c6      	beq.n	800bc6e <_vfiprintf_r+0x156>
 800bce0:	9105      	str	r1, [sp, #20]
 800bce2:	e7c4      	b.n	800bc6e <_vfiprintf_r+0x156>
 800bce4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce8:	4604      	mov	r4, r0
 800bcea:	2301      	movs	r3, #1
 800bcec:	e7f0      	b.n	800bcd0 <_vfiprintf_r+0x1b8>
 800bcee:	ab03      	add	r3, sp, #12
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	462a      	mov	r2, r5
 800bcf4:	4b12      	ldr	r3, [pc, #72]	@ (800bd40 <_vfiprintf_r+0x228>)
 800bcf6:	a904      	add	r1, sp, #16
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f3af 8000 	nop.w
 800bcfe:	4607      	mov	r7, r0
 800bd00:	1c78      	adds	r0, r7, #1
 800bd02:	d1d6      	bne.n	800bcb2 <_vfiprintf_r+0x19a>
 800bd04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd06:	07d9      	lsls	r1, r3, #31
 800bd08:	d405      	bmi.n	800bd16 <_vfiprintf_r+0x1fe>
 800bd0a:	89ab      	ldrh	r3, [r5, #12]
 800bd0c:	059a      	lsls	r2, r3, #22
 800bd0e:	d402      	bmi.n	800bd16 <_vfiprintf_r+0x1fe>
 800bd10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd12:	f7ff fdcf 	bl	800b8b4 <__retarget_lock_release_recursive>
 800bd16:	89ab      	ldrh	r3, [r5, #12]
 800bd18:	065b      	lsls	r3, r3, #25
 800bd1a:	f53f af1f 	bmi.w	800bb5c <_vfiprintf_r+0x44>
 800bd1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd20:	e71e      	b.n	800bb60 <_vfiprintf_r+0x48>
 800bd22:	ab03      	add	r3, sp, #12
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	462a      	mov	r2, r5
 800bd28:	4b05      	ldr	r3, [pc, #20]	@ (800bd40 <_vfiprintf_r+0x228>)
 800bd2a:	a904      	add	r1, sp, #16
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f000 f879 	bl	800be24 <_printf_i>
 800bd32:	e7e4      	b.n	800bcfe <_vfiprintf_r+0x1e6>
 800bd34:	0800c544 	.word	0x0800c544
 800bd38:	0800c54e 	.word	0x0800c54e
 800bd3c:	00000000 	.word	0x00000000
 800bd40:	0800baf3 	.word	0x0800baf3
 800bd44:	0800c54a 	.word	0x0800c54a

0800bd48 <_printf_common>:
 800bd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd4c:	4616      	mov	r6, r2
 800bd4e:	4698      	mov	r8, r3
 800bd50:	688a      	ldr	r2, [r1, #8]
 800bd52:	690b      	ldr	r3, [r1, #16]
 800bd54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	bfb8      	it	lt
 800bd5c:	4613      	movlt	r3, r2
 800bd5e:	6033      	str	r3, [r6, #0]
 800bd60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd64:	4607      	mov	r7, r0
 800bd66:	460c      	mov	r4, r1
 800bd68:	b10a      	cbz	r2, 800bd6e <_printf_common+0x26>
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	6033      	str	r3, [r6, #0]
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	0699      	lsls	r1, r3, #26
 800bd72:	bf42      	ittt	mi
 800bd74:	6833      	ldrmi	r3, [r6, #0]
 800bd76:	3302      	addmi	r3, #2
 800bd78:	6033      	strmi	r3, [r6, #0]
 800bd7a:	6825      	ldr	r5, [r4, #0]
 800bd7c:	f015 0506 	ands.w	r5, r5, #6
 800bd80:	d106      	bne.n	800bd90 <_printf_common+0x48>
 800bd82:	f104 0a19 	add.w	sl, r4, #25
 800bd86:	68e3      	ldr	r3, [r4, #12]
 800bd88:	6832      	ldr	r2, [r6, #0]
 800bd8a:	1a9b      	subs	r3, r3, r2
 800bd8c:	42ab      	cmp	r3, r5
 800bd8e:	dc26      	bgt.n	800bdde <_printf_common+0x96>
 800bd90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd94:	6822      	ldr	r2, [r4, #0]
 800bd96:	3b00      	subs	r3, #0
 800bd98:	bf18      	it	ne
 800bd9a:	2301      	movne	r3, #1
 800bd9c:	0692      	lsls	r2, r2, #26
 800bd9e:	d42b      	bmi.n	800bdf8 <_printf_common+0xb0>
 800bda0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bda4:	4641      	mov	r1, r8
 800bda6:	4638      	mov	r0, r7
 800bda8:	47c8      	blx	r9
 800bdaa:	3001      	adds	r0, #1
 800bdac:	d01e      	beq.n	800bdec <_printf_common+0xa4>
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	6922      	ldr	r2, [r4, #16]
 800bdb2:	f003 0306 	and.w	r3, r3, #6
 800bdb6:	2b04      	cmp	r3, #4
 800bdb8:	bf02      	ittt	eq
 800bdba:	68e5      	ldreq	r5, [r4, #12]
 800bdbc:	6833      	ldreq	r3, [r6, #0]
 800bdbe:	1aed      	subeq	r5, r5, r3
 800bdc0:	68a3      	ldr	r3, [r4, #8]
 800bdc2:	bf0c      	ite	eq
 800bdc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdc8:	2500      	movne	r5, #0
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	bfc4      	itt	gt
 800bdce:	1a9b      	subgt	r3, r3, r2
 800bdd0:	18ed      	addgt	r5, r5, r3
 800bdd2:	2600      	movs	r6, #0
 800bdd4:	341a      	adds	r4, #26
 800bdd6:	42b5      	cmp	r5, r6
 800bdd8:	d11a      	bne.n	800be10 <_printf_common+0xc8>
 800bdda:	2000      	movs	r0, #0
 800bddc:	e008      	b.n	800bdf0 <_printf_common+0xa8>
 800bdde:	2301      	movs	r3, #1
 800bde0:	4652      	mov	r2, sl
 800bde2:	4641      	mov	r1, r8
 800bde4:	4638      	mov	r0, r7
 800bde6:	47c8      	blx	r9
 800bde8:	3001      	adds	r0, #1
 800bdea:	d103      	bne.n	800bdf4 <_printf_common+0xac>
 800bdec:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf4:	3501      	adds	r5, #1
 800bdf6:	e7c6      	b.n	800bd86 <_printf_common+0x3e>
 800bdf8:	18e1      	adds	r1, r4, r3
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	2030      	movs	r0, #48	@ 0x30
 800bdfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be02:	4422      	add	r2, r4
 800be04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be0c:	3302      	adds	r3, #2
 800be0e:	e7c7      	b.n	800bda0 <_printf_common+0x58>
 800be10:	2301      	movs	r3, #1
 800be12:	4622      	mov	r2, r4
 800be14:	4641      	mov	r1, r8
 800be16:	4638      	mov	r0, r7
 800be18:	47c8      	blx	r9
 800be1a:	3001      	adds	r0, #1
 800be1c:	d0e6      	beq.n	800bdec <_printf_common+0xa4>
 800be1e:	3601      	adds	r6, #1
 800be20:	e7d9      	b.n	800bdd6 <_printf_common+0x8e>
	...

0800be24 <_printf_i>:
 800be24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be28:	7e0f      	ldrb	r7, [r1, #24]
 800be2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be2c:	2f78      	cmp	r7, #120	@ 0x78
 800be2e:	4691      	mov	r9, r2
 800be30:	4680      	mov	r8, r0
 800be32:	460c      	mov	r4, r1
 800be34:	469a      	mov	sl, r3
 800be36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be3a:	d807      	bhi.n	800be4c <_printf_i+0x28>
 800be3c:	2f62      	cmp	r7, #98	@ 0x62
 800be3e:	d80a      	bhi.n	800be56 <_printf_i+0x32>
 800be40:	2f00      	cmp	r7, #0
 800be42:	f000 80d2 	beq.w	800bfea <_printf_i+0x1c6>
 800be46:	2f58      	cmp	r7, #88	@ 0x58
 800be48:	f000 80b9 	beq.w	800bfbe <_printf_i+0x19a>
 800be4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be54:	e03a      	b.n	800becc <_printf_i+0xa8>
 800be56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be5a:	2b15      	cmp	r3, #21
 800be5c:	d8f6      	bhi.n	800be4c <_printf_i+0x28>
 800be5e:	a101      	add	r1, pc, #4	@ (adr r1, 800be64 <_printf_i+0x40>)
 800be60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be64:	0800bebd 	.word	0x0800bebd
 800be68:	0800bed1 	.word	0x0800bed1
 800be6c:	0800be4d 	.word	0x0800be4d
 800be70:	0800be4d 	.word	0x0800be4d
 800be74:	0800be4d 	.word	0x0800be4d
 800be78:	0800be4d 	.word	0x0800be4d
 800be7c:	0800bed1 	.word	0x0800bed1
 800be80:	0800be4d 	.word	0x0800be4d
 800be84:	0800be4d 	.word	0x0800be4d
 800be88:	0800be4d 	.word	0x0800be4d
 800be8c:	0800be4d 	.word	0x0800be4d
 800be90:	0800bfd1 	.word	0x0800bfd1
 800be94:	0800befb 	.word	0x0800befb
 800be98:	0800bf8b 	.word	0x0800bf8b
 800be9c:	0800be4d 	.word	0x0800be4d
 800bea0:	0800be4d 	.word	0x0800be4d
 800bea4:	0800bff3 	.word	0x0800bff3
 800bea8:	0800be4d 	.word	0x0800be4d
 800beac:	0800befb 	.word	0x0800befb
 800beb0:	0800be4d 	.word	0x0800be4d
 800beb4:	0800be4d 	.word	0x0800be4d
 800beb8:	0800bf93 	.word	0x0800bf93
 800bebc:	6833      	ldr	r3, [r6, #0]
 800bebe:	1d1a      	adds	r2, r3, #4
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	6032      	str	r2, [r6, #0]
 800bec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800becc:	2301      	movs	r3, #1
 800bece:	e09d      	b.n	800c00c <_printf_i+0x1e8>
 800bed0:	6833      	ldr	r3, [r6, #0]
 800bed2:	6820      	ldr	r0, [r4, #0]
 800bed4:	1d19      	adds	r1, r3, #4
 800bed6:	6031      	str	r1, [r6, #0]
 800bed8:	0606      	lsls	r6, r0, #24
 800beda:	d501      	bpl.n	800bee0 <_printf_i+0xbc>
 800bedc:	681d      	ldr	r5, [r3, #0]
 800bede:	e003      	b.n	800bee8 <_printf_i+0xc4>
 800bee0:	0645      	lsls	r5, r0, #25
 800bee2:	d5fb      	bpl.n	800bedc <_printf_i+0xb8>
 800bee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bee8:	2d00      	cmp	r5, #0
 800beea:	da03      	bge.n	800bef4 <_printf_i+0xd0>
 800beec:	232d      	movs	r3, #45	@ 0x2d
 800beee:	426d      	negs	r5, r5
 800bef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bef4:	4859      	ldr	r0, [pc, #356]	@ (800c05c <_printf_i+0x238>)
 800bef6:	230a      	movs	r3, #10
 800bef8:	e011      	b.n	800bf1e <_printf_i+0xfa>
 800befa:	6821      	ldr	r1, [r4, #0]
 800befc:	6833      	ldr	r3, [r6, #0]
 800befe:	0608      	lsls	r0, r1, #24
 800bf00:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf04:	d402      	bmi.n	800bf0c <_printf_i+0xe8>
 800bf06:	0649      	lsls	r1, r1, #25
 800bf08:	bf48      	it	mi
 800bf0a:	b2ad      	uxthmi	r5, r5
 800bf0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf0e:	4853      	ldr	r0, [pc, #332]	@ (800c05c <_printf_i+0x238>)
 800bf10:	6033      	str	r3, [r6, #0]
 800bf12:	bf14      	ite	ne
 800bf14:	230a      	movne	r3, #10
 800bf16:	2308      	moveq	r3, #8
 800bf18:	2100      	movs	r1, #0
 800bf1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf1e:	6866      	ldr	r6, [r4, #4]
 800bf20:	60a6      	str	r6, [r4, #8]
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	bfa2      	ittt	ge
 800bf26:	6821      	ldrge	r1, [r4, #0]
 800bf28:	f021 0104 	bicge.w	r1, r1, #4
 800bf2c:	6021      	strge	r1, [r4, #0]
 800bf2e:	b90d      	cbnz	r5, 800bf34 <_printf_i+0x110>
 800bf30:	2e00      	cmp	r6, #0
 800bf32:	d04b      	beq.n	800bfcc <_printf_i+0x1a8>
 800bf34:	4616      	mov	r6, r2
 800bf36:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf3a:	fb03 5711 	mls	r7, r3, r1, r5
 800bf3e:	5dc7      	ldrb	r7, [r0, r7]
 800bf40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf44:	462f      	mov	r7, r5
 800bf46:	42bb      	cmp	r3, r7
 800bf48:	460d      	mov	r5, r1
 800bf4a:	d9f4      	bls.n	800bf36 <_printf_i+0x112>
 800bf4c:	2b08      	cmp	r3, #8
 800bf4e:	d10b      	bne.n	800bf68 <_printf_i+0x144>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	07df      	lsls	r7, r3, #31
 800bf54:	d508      	bpl.n	800bf68 <_printf_i+0x144>
 800bf56:	6923      	ldr	r3, [r4, #16]
 800bf58:	6861      	ldr	r1, [r4, #4]
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	bfde      	ittt	le
 800bf5e:	2330      	movle	r3, #48	@ 0x30
 800bf60:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf64:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf68:	1b92      	subs	r2, r2, r6
 800bf6a:	6122      	str	r2, [r4, #16]
 800bf6c:	f8cd a000 	str.w	sl, [sp]
 800bf70:	464b      	mov	r3, r9
 800bf72:	aa03      	add	r2, sp, #12
 800bf74:	4621      	mov	r1, r4
 800bf76:	4640      	mov	r0, r8
 800bf78:	f7ff fee6 	bl	800bd48 <_printf_common>
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d14a      	bne.n	800c016 <_printf_i+0x1f2>
 800bf80:	f04f 30ff 	mov.w	r0, #4294967295
 800bf84:	b004      	add	sp, #16
 800bf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	f043 0320 	orr.w	r3, r3, #32
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	4833      	ldr	r0, [pc, #204]	@ (800c060 <_printf_i+0x23c>)
 800bf94:	2778      	movs	r7, #120	@ 0x78
 800bf96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	6831      	ldr	r1, [r6, #0]
 800bf9e:	061f      	lsls	r7, r3, #24
 800bfa0:	f851 5b04 	ldr.w	r5, [r1], #4
 800bfa4:	d402      	bmi.n	800bfac <_printf_i+0x188>
 800bfa6:	065f      	lsls	r7, r3, #25
 800bfa8:	bf48      	it	mi
 800bfaa:	b2ad      	uxthmi	r5, r5
 800bfac:	6031      	str	r1, [r6, #0]
 800bfae:	07d9      	lsls	r1, r3, #31
 800bfb0:	bf44      	itt	mi
 800bfb2:	f043 0320 	orrmi.w	r3, r3, #32
 800bfb6:	6023      	strmi	r3, [r4, #0]
 800bfb8:	b11d      	cbz	r5, 800bfc2 <_printf_i+0x19e>
 800bfba:	2310      	movs	r3, #16
 800bfbc:	e7ac      	b.n	800bf18 <_printf_i+0xf4>
 800bfbe:	4827      	ldr	r0, [pc, #156]	@ (800c05c <_printf_i+0x238>)
 800bfc0:	e7e9      	b.n	800bf96 <_printf_i+0x172>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	f023 0320 	bic.w	r3, r3, #32
 800bfc8:	6023      	str	r3, [r4, #0]
 800bfca:	e7f6      	b.n	800bfba <_printf_i+0x196>
 800bfcc:	4616      	mov	r6, r2
 800bfce:	e7bd      	b.n	800bf4c <_printf_i+0x128>
 800bfd0:	6833      	ldr	r3, [r6, #0]
 800bfd2:	6825      	ldr	r5, [r4, #0]
 800bfd4:	6961      	ldr	r1, [r4, #20]
 800bfd6:	1d18      	adds	r0, r3, #4
 800bfd8:	6030      	str	r0, [r6, #0]
 800bfda:	062e      	lsls	r6, r5, #24
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	d501      	bpl.n	800bfe4 <_printf_i+0x1c0>
 800bfe0:	6019      	str	r1, [r3, #0]
 800bfe2:	e002      	b.n	800bfea <_printf_i+0x1c6>
 800bfe4:	0668      	lsls	r0, r5, #25
 800bfe6:	d5fb      	bpl.n	800bfe0 <_printf_i+0x1bc>
 800bfe8:	8019      	strh	r1, [r3, #0]
 800bfea:	2300      	movs	r3, #0
 800bfec:	6123      	str	r3, [r4, #16]
 800bfee:	4616      	mov	r6, r2
 800bff0:	e7bc      	b.n	800bf6c <_printf_i+0x148>
 800bff2:	6833      	ldr	r3, [r6, #0]
 800bff4:	1d1a      	adds	r2, r3, #4
 800bff6:	6032      	str	r2, [r6, #0]
 800bff8:	681e      	ldr	r6, [r3, #0]
 800bffa:	6862      	ldr	r2, [r4, #4]
 800bffc:	2100      	movs	r1, #0
 800bffe:	4630      	mov	r0, r6
 800c000:	f7f4 f90e 	bl	8000220 <memchr>
 800c004:	b108      	cbz	r0, 800c00a <_printf_i+0x1e6>
 800c006:	1b80      	subs	r0, r0, r6
 800c008:	6060      	str	r0, [r4, #4]
 800c00a:	6863      	ldr	r3, [r4, #4]
 800c00c:	6123      	str	r3, [r4, #16]
 800c00e:	2300      	movs	r3, #0
 800c010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c014:	e7aa      	b.n	800bf6c <_printf_i+0x148>
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	4632      	mov	r2, r6
 800c01a:	4649      	mov	r1, r9
 800c01c:	4640      	mov	r0, r8
 800c01e:	47d0      	blx	sl
 800c020:	3001      	adds	r0, #1
 800c022:	d0ad      	beq.n	800bf80 <_printf_i+0x15c>
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	079b      	lsls	r3, r3, #30
 800c028:	d413      	bmi.n	800c052 <_printf_i+0x22e>
 800c02a:	68e0      	ldr	r0, [r4, #12]
 800c02c:	9b03      	ldr	r3, [sp, #12]
 800c02e:	4298      	cmp	r0, r3
 800c030:	bfb8      	it	lt
 800c032:	4618      	movlt	r0, r3
 800c034:	e7a6      	b.n	800bf84 <_printf_i+0x160>
 800c036:	2301      	movs	r3, #1
 800c038:	4632      	mov	r2, r6
 800c03a:	4649      	mov	r1, r9
 800c03c:	4640      	mov	r0, r8
 800c03e:	47d0      	blx	sl
 800c040:	3001      	adds	r0, #1
 800c042:	d09d      	beq.n	800bf80 <_printf_i+0x15c>
 800c044:	3501      	adds	r5, #1
 800c046:	68e3      	ldr	r3, [r4, #12]
 800c048:	9903      	ldr	r1, [sp, #12]
 800c04a:	1a5b      	subs	r3, r3, r1
 800c04c:	42ab      	cmp	r3, r5
 800c04e:	dcf2      	bgt.n	800c036 <_printf_i+0x212>
 800c050:	e7eb      	b.n	800c02a <_printf_i+0x206>
 800c052:	2500      	movs	r5, #0
 800c054:	f104 0619 	add.w	r6, r4, #25
 800c058:	e7f5      	b.n	800c046 <_printf_i+0x222>
 800c05a:	bf00      	nop
 800c05c:	0800c555 	.word	0x0800c555
 800c060:	0800c566 	.word	0x0800c566

0800c064 <__sflush_r>:
 800c064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c06c:	0716      	lsls	r6, r2, #28
 800c06e:	4605      	mov	r5, r0
 800c070:	460c      	mov	r4, r1
 800c072:	d454      	bmi.n	800c11e <__sflush_r+0xba>
 800c074:	684b      	ldr	r3, [r1, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	dc02      	bgt.n	800c080 <__sflush_r+0x1c>
 800c07a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	dd48      	ble.n	800c112 <__sflush_r+0xae>
 800c080:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c082:	2e00      	cmp	r6, #0
 800c084:	d045      	beq.n	800c112 <__sflush_r+0xae>
 800c086:	2300      	movs	r3, #0
 800c088:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c08c:	682f      	ldr	r7, [r5, #0]
 800c08e:	6a21      	ldr	r1, [r4, #32]
 800c090:	602b      	str	r3, [r5, #0]
 800c092:	d030      	beq.n	800c0f6 <__sflush_r+0x92>
 800c094:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c096:	89a3      	ldrh	r3, [r4, #12]
 800c098:	0759      	lsls	r1, r3, #29
 800c09a:	d505      	bpl.n	800c0a8 <__sflush_r+0x44>
 800c09c:	6863      	ldr	r3, [r4, #4]
 800c09e:	1ad2      	subs	r2, r2, r3
 800c0a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0a2:	b10b      	cbz	r3, 800c0a8 <__sflush_r+0x44>
 800c0a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0a6:	1ad2      	subs	r2, r2, r3
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0ac:	6a21      	ldr	r1, [r4, #32]
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	47b0      	blx	r6
 800c0b2:	1c43      	adds	r3, r0, #1
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	d106      	bne.n	800c0c6 <__sflush_r+0x62>
 800c0b8:	6829      	ldr	r1, [r5, #0]
 800c0ba:	291d      	cmp	r1, #29
 800c0bc:	d82b      	bhi.n	800c116 <__sflush_r+0xb2>
 800c0be:	4a2a      	ldr	r2, [pc, #168]	@ (800c168 <__sflush_r+0x104>)
 800c0c0:	410a      	asrs	r2, r1
 800c0c2:	07d6      	lsls	r6, r2, #31
 800c0c4:	d427      	bmi.n	800c116 <__sflush_r+0xb2>
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	6062      	str	r2, [r4, #4]
 800c0ca:	04d9      	lsls	r1, r3, #19
 800c0cc:	6922      	ldr	r2, [r4, #16]
 800c0ce:	6022      	str	r2, [r4, #0]
 800c0d0:	d504      	bpl.n	800c0dc <__sflush_r+0x78>
 800c0d2:	1c42      	adds	r2, r0, #1
 800c0d4:	d101      	bne.n	800c0da <__sflush_r+0x76>
 800c0d6:	682b      	ldr	r3, [r5, #0]
 800c0d8:	b903      	cbnz	r3, 800c0dc <__sflush_r+0x78>
 800c0da:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0de:	602f      	str	r7, [r5, #0]
 800c0e0:	b1b9      	cbz	r1, 800c112 <__sflush_r+0xae>
 800c0e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0e6:	4299      	cmp	r1, r3
 800c0e8:	d002      	beq.n	800c0f0 <__sflush_r+0x8c>
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	f7ff fbf2 	bl	800b8d4 <_free_r>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0f4:	e00d      	b.n	800c112 <__sflush_r+0xae>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	47b0      	blx	r6
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	1c50      	adds	r0, r2, #1
 800c100:	d1c9      	bne.n	800c096 <__sflush_r+0x32>
 800c102:	682b      	ldr	r3, [r5, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d0c6      	beq.n	800c096 <__sflush_r+0x32>
 800c108:	2b1d      	cmp	r3, #29
 800c10a:	d001      	beq.n	800c110 <__sflush_r+0xac>
 800c10c:	2b16      	cmp	r3, #22
 800c10e:	d11e      	bne.n	800c14e <__sflush_r+0xea>
 800c110:	602f      	str	r7, [r5, #0]
 800c112:	2000      	movs	r0, #0
 800c114:	e022      	b.n	800c15c <__sflush_r+0xf8>
 800c116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c11a:	b21b      	sxth	r3, r3
 800c11c:	e01b      	b.n	800c156 <__sflush_r+0xf2>
 800c11e:	690f      	ldr	r7, [r1, #16]
 800c120:	2f00      	cmp	r7, #0
 800c122:	d0f6      	beq.n	800c112 <__sflush_r+0xae>
 800c124:	0793      	lsls	r3, r2, #30
 800c126:	680e      	ldr	r6, [r1, #0]
 800c128:	bf08      	it	eq
 800c12a:	694b      	ldreq	r3, [r1, #20]
 800c12c:	600f      	str	r7, [r1, #0]
 800c12e:	bf18      	it	ne
 800c130:	2300      	movne	r3, #0
 800c132:	eba6 0807 	sub.w	r8, r6, r7
 800c136:	608b      	str	r3, [r1, #8]
 800c138:	f1b8 0f00 	cmp.w	r8, #0
 800c13c:	dde9      	ble.n	800c112 <__sflush_r+0xae>
 800c13e:	6a21      	ldr	r1, [r4, #32]
 800c140:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c142:	4643      	mov	r3, r8
 800c144:	463a      	mov	r2, r7
 800c146:	4628      	mov	r0, r5
 800c148:	47b0      	blx	r6
 800c14a:	2800      	cmp	r0, #0
 800c14c:	dc08      	bgt.n	800c160 <__sflush_r+0xfc>
 800c14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	f04f 30ff 	mov.w	r0, #4294967295
 800c15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c160:	4407      	add	r7, r0
 800c162:	eba8 0800 	sub.w	r8, r8, r0
 800c166:	e7e7      	b.n	800c138 <__sflush_r+0xd4>
 800c168:	dfbffffe 	.word	0xdfbffffe

0800c16c <_fflush_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	690b      	ldr	r3, [r1, #16]
 800c170:	4605      	mov	r5, r0
 800c172:	460c      	mov	r4, r1
 800c174:	b913      	cbnz	r3, 800c17c <_fflush_r+0x10>
 800c176:	2500      	movs	r5, #0
 800c178:	4628      	mov	r0, r5
 800c17a:	bd38      	pop	{r3, r4, r5, pc}
 800c17c:	b118      	cbz	r0, 800c186 <_fflush_r+0x1a>
 800c17e:	6a03      	ldr	r3, [r0, #32]
 800c180:	b90b      	cbnz	r3, 800c186 <_fflush_r+0x1a>
 800c182:	f7ff f99f 	bl	800b4c4 <__sinit>
 800c186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d0f3      	beq.n	800c176 <_fflush_r+0xa>
 800c18e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c190:	07d0      	lsls	r0, r2, #31
 800c192:	d404      	bmi.n	800c19e <_fflush_r+0x32>
 800c194:	0599      	lsls	r1, r3, #22
 800c196:	d402      	bmi.n	800c19e <_fflush_r+0x32>
 800c198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c19a:	f7ff fb8a 	bl	800b8b2 <__retarget_lock_acquire_recursive>
 800c19e:	4628      	mov	r0, r5
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	f7ff ff5f 	bl	800c064 <__sflush_r>
 800c1a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1a8:	07da      	lsls	r2, r3, #31
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	d4e4      	bmi.n	800c178 <_fflush_r+0xc>
 800c1ae:	89a3      	ldrh	r3, [r4, #12]
 800c1b0:	059b      	lsls	r3, r3, #22
 800c1b2:	d4e1      	bmi.n	800c178 <_fflush_r+0xc>
 800c1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1b6:	f7ff fb7d 	bl	800b8b4 <__retarget_lock_release_recursive>
 800c1ba:	e7dd      	b.n	800c178 <_fflush_r+0xc>

0800c1bc <__swhatbuf_r>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	460c      	mov	r4, r1
 800c1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c4:	2900      	cmp	r1, #0
 800c1c6:	b096      	sub	sp, #88	@ 0x58
 800c1c8:	4615      	mov	r5, r2
 800c1ca:	461e      	mov	r6, r3
 800c1cc:	da0d      	bge.n	800c1ea <__swhatbuf_r+0x2e>
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1d4:	f04f 0100 	mov.w	r1, #0
 800c1d8:	bf14      	ite	ne
 800c1da:	2340      	movne	r3, #64	@ 0x40
 800c1dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	6031      	str	r1, [r6, #0]
 800c1e4:	602b      	str	r3, [r5, #0]
 800c1e6:	b016      	add	sp, #88	@ 0x58
 800c1e8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ea:	466a      	mov	r2, sp
 800c1ec:	f000 f848 	bl	800c280 <_fstat_r>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	dbec      	blt.n	800c1ce <__swhatbuf_r+0x12>
 800c1f4:	9901      	ldr	r1, [sp, #4]
 800c1f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1fe:	4259      	negs	r1, r3
 800c200:	4159      	adcs	r1, r3
 800c202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c206:	e7eb      	b.n	800c1e0 <__swhatbuf_r+0x24>

0800c208 <__smakebuf_r>:
 800c208:	898b      	ldrh	r3, [r1, #12]
 800c20a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c20c:	079d      	lsls	r5, r3, #30
 800c20e:	4606      	mov	r6, r0
 800c210:	460c      	mov	r4, r1
 800c212:	d507      	bpl.n	800c224 <__smakebuf_r+0x1c>
 800c214:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	6123      	str	r3, [r4, #16]
 800c21c:	2301      	movs	r3, #1
 800c21e:	6163      	str	r3, [r4, #20]
 800c220:	b003      	add	sp, #12
 800c222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c224:	ab01      	add	r3, sp, #4
 800c226:	466a      	mov	r2, sp
 800c228:	f7ff ffc8 	bl	800c1bc <__swhatbuf_r>
 800c22c:	9f00      	ldr	r7, [sp, #0]
 800c22e:	4605      	mov	r5, r0
 800c230:	4639      	mov	r1, r7
 800c232:	4630      	mov	r0, r6
 800c234:	f7ff fbba 	bl	800b9ac <_malloc_r>
 800c238:	b948      	cbnz	r0, 800c24e <__smakebuf_r+0x46>
 800c23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23e:	059a      	lsls	r2, r3, #22
 800c240:	d4ee      	bmi.n	800c220 <__smakebuf_r+0x18>
 800c242:	f023 0303 	bic.w	r3, r3, #3
 800c246:	f043 0302 	orr.w	r3, r3, #2
 800c24a:	81a3      	strh	r3, [r4, #12]
 800c24c:	e7e2      	b.n	800c214 <__smakebuf_r+0xc>
 800c24e:	89a3      	ldrh	r3, [r4, #12]
 800c250:	6020      	str	r0, [r4, #0]
 800c252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c256:	81a3      	strh	r3, [r4, #12]
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c25e:	b15b      	cbz	r3, 800c278 <__smakebuf_r+0x70>
 800c260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c264:	4630      	mov	r0, r6
 800c266:	f000 f81d 	bl	800c2a4 <_isatty_r>
 800c26a:	b128      	cbz	r0, 800c278 <__smakebuf_r+0x70>
 800c26c:	89a3      	ldrh	r3, [r4, #12]
 800c26e:	f023 0303 	bic.w	r3, r3, #3
 800c272:	f043 0301 	orr.w	r3, r3, #1
 800c276:	81a3      	strh	r3, [r4, #12]
 800c278:	89a3      	ldrh	r3, [r4, #12]
 800c27a:	431d      	orrs	r5, r3
 800c27c:	81a5      	strh	r5, [r4, #12]
 800c27e:	e7cf      	b.n	800c220 <__smakebuf_r+0x18>

0800c280 <_fstat_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4d07      	ldr	r5, [pc, #28]	@ (800c2a0 <_fstat_r+0x20>)
 800c284:	2300      	movs	r3, #0
 800c286:	4604      	mov	r4, r0
 800c288:	4608      	mov	r0, r1
 800c28a:	4611      	mov	r1, r2
 800c28c:	602b      	str	r3, [r5, #0]
 800c28e:	f7f4 fd9e 	bl	8000dce <_fstat>
 800c292:	1c43      	adds	r3, r0, #1
 800c294:	d102      	bne.n	800c29c <_fstat_r+0x1c>
 800c296:	682b      	ldr	r3, [r5, #0]
 800c298:	b103      	cbz	r3, 800c29c <_fstat_r+0x1c>
 800c29a:	6023      	str	r3, [r4, #0]
 800c29c:	bd38      	pop	{r3, r4, r5, pc}
 800c29e:	bf00      	nop
 800c2a0:	20001ebc 	.word	0x20001ebc

0800c2a4 <_isatty_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d06      	ldr	r5, [pc, #24]	@ (800c2c0 <_isatty_r+0x1c>)
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	4608      	mov	r0, r1
 800c2ae:	602b      	str	r3, [r5, #0]
 800c2b0:	f7f4 fd9d 	bl	8000dee <_isatty>
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	d102      	bne.n	800c2be <_isatty_r+0x1a>
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	b103      	cbz	r3, 800c2be <_isatty_r+0x1a>
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	bd38      	pop	{r3, r4, r5, pc}
 800c2c0:	20001ebc 	.word	0x20001ebc

0800c2c4 <_sbrk_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4d06      	ldr	r5, [pc, #24]	@ (800c2e0 <_sbrk_r+0x1c>)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	602b      	str	r3, [r5, #0]
 800c2d0:	f7f4 fda6 	bl	8000e20 <_sbrk>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d102      	bne.n	800c2de <_sbrk_r+0x1a>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	b103      	cbz	r3, 800c2de <_sbrk_r+0x1a>
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	bd38      	pop	{r3, r4, r5, pc}
 800c2e0:	20001ebc 	.word	0x20001ebc

0800c2e4 <_init>:
 800c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e6:	bf00      	nop
 800c2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ea:	bc08      	pop	{r3}
 800c2ec:	469e      	mov	lr, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <_fini>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	bf00      	nop
 800c2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2f6:	bc08      	pop	{r3}
 800c2f8:	469e      	mov	lr, r3
 800c2fa:	4770      	bx	lr
