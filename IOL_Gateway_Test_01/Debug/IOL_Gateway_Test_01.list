
IOL_Gateway_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c500  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800c6e0  0800c6e0  0000d6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c95c  0800c95c  0000e234  2**0
                  CONTENTS
  4 .ARM          00000008  0800c95c  0800c95c  0000d95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c964  0800c964  0000e234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c964  0800c964  0000d964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c968  0800c968  0000d968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0800c96c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cec  20000234  0800cba0  0000e234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f20  0800cba0  0000ef20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb83  00000000  00000000  0000e264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d94  00000000  00000000  0002dde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  00032b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001399  00000000  00000000  00034528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006fd7  00000000  00000000  000358c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022744  00000000  00000000  0003c898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdb53  00000000  00000000  0005efdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cb2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007180  00000000  00000000  0012cb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00133cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000234 	.word	0x20000234
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c6c8 	.word	0x0800c6c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000238 	.word	0x20000238
 800021c:	0800c6c8 	.word	0x0800c6c8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_DMA_Init+0x50>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <MX_DMA_Init+0x50>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_DMA_Init+0x50>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000600 <MX_DMA_Init+0x50>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_DMA_Init+0x50>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f001 fb2f 	bl	8001c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f001 fb46 	bl	8001c82 <HAL_NVIC_EnableIRQ>

}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b43      	ldr	r3, [pc, #268]	@ (8000728 <MX_GPIO_Init+0x124>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a42      	ldr	r2, [pc, #264]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b40      	ldr	r3, [pc, #256]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b3d      	ldr	r3, [pc, #244]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a3c      	ldr	r2, [pc, #240]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b3a      	ldr	r3, [pc, #232]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <MX_GPIO_Init+0x124>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a36      	ldr	r2, [pc, #216]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b34      	ldr	r3, [pc, #208]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	4a30      	ldr	r2, [pc, #192]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066e:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <MX_GPIO_Init+0x124>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000680:	482a      	ldr	r0, [pc, #168]	@ (800072c <MX_GPIO_Init+0x128>)
 8000682:	f001 ffcd 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2140      	movs	r1, #64	@ 0x40
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f001 ffc7 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2101      	movs	r1, #1
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <MX_GPIO_Init+0x12c>)
 8000698:	f001 ffc2 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800069c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	481d      	ldr	r0, [pc, #116]	@ (800072c <MX_GPIO_Init+0x128>)
 80006b6:	f001 fe31 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006ba:	23a0      	movs	r3, #160	@ 0xa0
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d2:	f001 fe23 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006d6:	2340      	movs	r3, #64	@ 0x40
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f001 fe14 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f4:	2301      	movs	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_GPIO_Init+0x12c>)
 800070c:	f001 fe06 	bl	800231c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2017      	movs	r0, #23
 8000716:	f001 fa9a 	bl	8001c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800071a:	2017      	movs	r0, #23
 800071c:	f001 fab1 	bl	8001c82 <HAL_NVIC_EnableIRQ>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	48000800 	.word	0x48000800
 8000730:	48000400 	.word	0x48000400

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f001 f91b 	bl	8001972 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f838 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f7ff ff60 	bl	8000604 <MX_GPIO_Init>
  MX_DMA_Init();
 8000744:	f7ff ff34 	bl	80005b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000748:	f000 fc2c 	bl	8000fa4 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 800074c:	f00a fafe 	bl	800ad4c <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000750:	f000 fbae 	bl	8000eb0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, quedata_arraylength);
 8000754:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000758:	490f      	ldr	r1, [pc, #60]	@ (8000798 <main+0x64>)
 800075a:	4810      	ldr	r0, [pc, #64]	@ (800079c <main+0x68>)
 800075c:	f000 f879 	bl	8000852 <Q_Init>

  HAL_Delay(3000);
 8000760:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000764:	f001 f976 	bl	8001a54 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <main+0x6c>)
 800076a:	f004 fcd9 	bl	8005120 <HAL_TIM_Base_Start_IT>
  GetClockSourcePrint();
 800076e:	f000 fd4f 	bl	8001210 <GetClockSourcePrint>
  BootMessagePrint();
 8000772:	f000 fd1d 	bl	80011b0 <BootMessagePrint>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000776:	2264      	movs	r2, #100	@ 0x64
 8000778:	490a      	ldr	r1, [pc, #40]	@ (80007a4 <main+0x70>)
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <main+0x74>)
 800077c:	f006 ff6a 	bl	8007654 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <main+0x78>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <main+0x78>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0204 	bic.w	r2, r2, #4
 800078e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    User_Toggle_Led();
 8000790:	f000 fcf8 	bl	8001184 <User_Toggle_Led>
 8000794:	e7fc      	b.n	8000790 <main+0x5c>
 8000796:	bf00      	nop
 8000798:	2000079c 	.word	0x2000079c
 800079c:	200003a4 	.word	0x200003a4
 80007a0:	20000258 	.word	0x20000258
 80007a4:	20000b88 	.word	0x20000b88
 80007a8:	200002a4 	.word	0x200002a4
 80007ac:	20000338 	.word	0x20000338

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	@ 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	2238      	movs	r2, #56	@ 0x38
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f00b f9f0 	bl	800bba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f003 fc7a 	bl	80040cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007d8:	2321      	movs	r3, #33	@ 0x21
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007ee:	2306      	movs	r3, #6
 80007f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007f2:	2355      	movs	r3, #85	@ 0x55
 80007f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fd14 	bl	8004234 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000812:	f000 f818 	bl	8000846 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2104      	movs	r1, #4
 800082e:	4618      	mov	r0, r3
 8000830:	f004 f812 	bl	8004858 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800083a:	f000 f804 	bl	8000846 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084a:	b672      	cpsid	i
}
 800084c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <Error_Handler+0x8>

08000852 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	4613      	mov	r3, r2
 800085e:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2200      	movs	r2, #0
 8000864:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2200      	movs	r2, #0
 800086a:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2200      	movs	r2, #0
 8000870:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2200      	movs	r2, #0
 8000876:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	60da      	str	r2, [r3, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	4613      	mov	r3, r2
 800089c:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 800089e:	2300      	movs	r3, #0
 80008a0:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f000 f8ea 	bl	8000a7c <Q_NumEmptyBytes>
 80008a8:	4603      	mov	r3, r0
 80008aa:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	db44      	blt.n	800093e <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	4413      	add	r3, r2
 80008c0:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	8afa      	ldrh	r2, [r7, #22]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d20b      	bcs.n	80008e4 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008d6:	4413      	add	r3, r2
 80008d8:	88fa      	ldrh	r2, [r7, #6]
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	4618      	mov	r0, r3
 80008de:	f00b f9dc 	bl	800bc9a <memcpy>
 80008e2:	e01d      	b.n	8000920 <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	881a      	ldrh	r2, [r3, #0]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008fe:	4413      	add	r3, r2
 8000900:	8aba      	ldrh	r2, [r7, #20]
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	4618      	mov	r0, r3
 8000906:	f00b f9c8 	bl	800bc9a <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	68d8      	ldr	r0, [r3, #12]
 800090e:	8abb      	ldrh	r3, [r7, #20]
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	18d1      	adds	r1, r2, r3
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	8abb      	ldrh	r3, [r7, #20]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	461a      	mov	r2, r3
 800091c:	f00b f9bd 	bl	800bc9a <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	881a      	ldrh	r2, [r3, #0]
 8000924:	8afb      	ldrh	r3, [r7, #22]
 8000926:	fbb3 f1f2 	udiv	r1, r3, r2
 800092a:	fb01 f202 	mul.w	r2, r1, r2
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	b21a      	sxth	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8000938:	2301      	movs	r3, #1
 800093a:	77fb      	strb	r3, [r7, #31]
 800093c:	e00e      	b.n	800095c <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	88db      	ldrh	r3, [r3, #6]
 8000942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000946:	4293      	cmp	r3, r2
 8000948:	d004      	beq.n	8000954 <Q_Write+0xc4>
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	88db      	ldrh	r3, [r3, #6]
 800094e:	3301      	adds	r3, #1
 8000950:	b29a      	uxth	r2, r3
 8000952:	e001      	b.n	8000958 <Q_Write+0xc8>
 8000954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	80da      	strh	r2, [r3, #6]
    return ret;    
 800095c:	7ffb      	ldrb	r3, [r7, #31]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	4613      	mov	r3, r2
 8000972:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f864 	bl	8000a42 <Q_NumContents>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	4293      	cmp	r3, r2
 8000982:	d848      	bhi.n	8000a16 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800098a:	b29a      	uxth	r2, r3
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4413      	add	r3, r2
 8000990:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	8aba      	ldrh	r2, [r7, #20]
 8000998:	429a      	cmp	r2, r3
 800099a:	d20b      	bcs.n	80009b4 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	4619      	mov	r1, r3
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f00b f974 	bl	800bc9a <memcpy>
 80009b2:	e01d      	b.n	80009f0 <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	881a      	ldrh	r2, [r3, #0]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	8a7a      	ldrh	r2, [r7, #18]
 80009d2:	4619      	mov	r1, r3
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f00b f960 	bl	800bc9a <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 80009da:	8a7b      	ldrh	r3, [r7, #18]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	18d0      	adds	r0, r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68d9      	ldr	r1, [r3, #12]
 80009e4:	88fa      	ldrh	r2, [r7, #6]
 80009e6:	8a7b      	ldrh	r3, [r7, #18]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	f00b f955 	bl	800bc9a <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009f6:	461a      	mov	r2, r3
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	4413      	add	r3, r2
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	8812      	ldrh	r2, [r2, #0]
 8000a00:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a04:	fb01 f202 	mul.w	r2, r1, r2
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	b21a      	sxth	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000a10:	2301      	movs	r3, #1
 8000a12:	75fb      	strb	r3, [r7, #23]
 8000a14:	e010      	b.n	8000a38 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	891b      	ldrh	r3, [r3, #8]
 8000a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d004      	beq.n	8000a2c <Q_Read+0xc6>
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	891b      	ldrh	r3, [r3, #8]
 8000a26:	3301      	adds	r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	e001      	b.n	8000a30 <Q_Read+0xca>
 8000a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000a34:	2300      	movs	r3, #0
 8000a36:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a56:	4413      	add	r3, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a5e:	1a9b      	subs	r3, r3, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	8812      	ldrh	r2, [r2, #0]
 8000a64:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a68:	fb01 f202 	mul.w	r2, r1, r2
 8000a6c:	1a9b      	subs	r3, r3, r2
 8000a6e:	b29b      	uxth	r3, r3
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	881c      	ldrh	r4, [r3, #0]
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ffda 	bl	8000a42 <Q_NumContents>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	1ae3      	subs	r3, r4, r3
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b29b      	uxth	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ad6:	f003 fb9d 	bl	8004214 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f000 ff6b 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <DMA1_Channel1_IRQHandler+0x10>)
 8000b4e:	f001 fa96 	bl	800207e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000338 	.word	0x20000338

08000b5c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <USB_LP_IRQHandler+0x10>)
 8000b62:	f001 fea2 	bl	80028aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200018d8 	.word	0x200018d8

08000b70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b74:	2020      	movs	r0, #32
 8000b76:	f001 fd85 	bl	8002684 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b7a:	2080      	movs	r0, #128	@ 0x80
 8000b7c:	f001 fd82 	bl	8002684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b8a:	f004 fb33 	bl	80051f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000258 	.word	0x20000258

08000b98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE)))
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d006      	beq.n	8000bb8 <USART1_IRQHandler+0x20>
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d107      	bne.n	8000bc8 <USART1_IRQHandler+0x30>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart1);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FEFLAG(&huart1);
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <USART1_IRQHandler+0x3c>)
 8000bca:	f005 f869 	bl	8005ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200002a4 	.word	0x200002a4

08000bd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	81fb      	strh	r3, [r7, #14]

  if ( (num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000be4:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000be6:	f7ff ff2c 	bl	8000a42 <Q_NumContents>
 8000bea:	4603      	mov	r3, r0
 8000bec:	81fb      	strh	r3, [r7, #14]
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d016      	beq.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000bf4:	f00a f9a0 	bl	800af38 <CDC_Transmit_Is_Busy>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d011      	beq.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c00:	881a      	ldrh	r2, [r3, #0]
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	4413      	add	r3, r2
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c0a:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	490f      	ldr	r1, [pc, #60]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c12:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c14:	f7ff fea7 	bl	8000966 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c1e:	f00a f953 	bl	800aec8 <CDC_Transmit_FS>
    }
  }

  if (htim->Instance == TIM1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d109      	bne.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    TIM1_CNT_1++;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c34:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c3e:	6013      	str	r3, [r2, #0]
  }
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200003a4 	.word	0x200003a4
 8000c4c:	200003a0 	.word	0x200003a0
 8000c50:	200003b4 	.word	0x200003b4
 8000c54:	40012c00 	.word	0x40012c00
 8000c58:	20000398 	.word	0x20000398
 8000c5c:	2000039c 	.word	0x2000039c

08000c60 <HAL_UARTEx_RxEventCallback>:

uint8_t IOL_Rx_IDLEFlag = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000c6c:	887a      	ldrh	r2, [r7, #2]
 8000c6e:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a2f      	ldr	r2, [pc, #188]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c76:	6013      	str	r3, [r2, #0]
  
  if (huart->Instance == USART1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d153      	bne.n	8000d2a <HAL_UARTEx_RxEventCallback+0xca>
    // {
    //   IOL_RX_CONTINUE_FLAG = 0;
    //   return;
    // }

    if (uart_rx_IDLE_TotalCnt >= 3)
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d912      	bls.n	8000cb0 <HAL_UARTEx_RxEventCallback+0x50>
    {
      DEBUG_GPIO_TOGGLE;
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	482b      	ldr	r0, [pc, #172]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0xdc>)
 8000c8e:	f001 fcdf 	bl	8002650 <HAL_GPIO_TogglePin>
      if (IOL_Rx_IDLEFlag == 1)
 8000c92:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d103      	bne.n	8000ca2 <HAL_UARTEx_RxEventCallback+0x42>
      {
        IOL_Rx_IDLEFlag = 0;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e006      	b.n	8000cb0 <HAL_UARTEx_RxEventCallback+0x50>
      }
      else
      {
        IOL_Rx_IDLEFlag = 1;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
        // IOL_PageTest(Size);
        IOL_StartUp_Seq_Page(Size);
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fd68 	bl	8001780 <IOL_StartUp_Seq_Page>
      }

    }

    __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Instance->CNDTR = UART_RX_IDLE_BUFSIZE;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2264      	movs	r2, #100	@ 0x64
 8000cc6:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart1_rx);
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

    __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	69db      	ldr	r3, [r3, #28]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	e853 3f00 	ldrex	r3, [r3]
 8000cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000d00:	6979      	ldr	r1, [r7, #20]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	e841 2300 	strex	r3, r2, [r1]
 8000d08:	613b      	str	r3, [r7, #16]
   return(result);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e6      	bne.n	8000cde <HAL_UARTEx_RxEventCallback+0x7e>
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000d10:	2264      	movs	r2, #100	@ 0x64
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000d14:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <HAL_UARTEx_RxEventCallback+0xec>)
 8000d16:	f006 fc9d 	bl	8007654 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0204 	bic.w	r2, r2, #4
 8000d28:	601a      	str	r2, [r3, #0]

    // HAL_NVIC_EnableIRQ(USART1_IRQn);
    // HAL_UART_DMAResume(&huart1);

  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000b84 	.word	0x20000b84
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	20000250 	.word	0x20000250
 8000d44:	20000338 	.word	0x20000338
 8000d48:	20000b88 	.word	0x20000b88
 8000d4c:	200002a4 	.word	0x200002a4

08000d50 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <HAL_UART_TxCpltCallback+0x28>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d105      	bne.n	8000d6e <HAL_UART_TxCpltCallback+0x1e>
  {
    IOL_DISABLE;
 8000d62:	2200      	movs	r2, #0
 8000d64:	2140      	movs	r1, #64	@ 0x40
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f001 fc59 	bl	8002620 <HAL_GPIO_WritePin>
    // __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
    // ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40013800 	.word	0x40013800

08000d7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e00a      	b.n	8000da4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d8e:	f3af 8000 	nop.w
 8000d92:	4601      	mov	r1, r0
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	b2ca      	uxtb	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf0      	blt.n	8000d8e <_read+0x12>
  }

  return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dde:	605a      	str	r2, [r3, #4]
  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f00a fef6 	bl	800bc40 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20008000 	.word	0x20008000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	20000254 	.word	0x20000254
 8000e88:	20001f20 	.word	0x20001f20

08000e8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ed0:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <MX_TIM1_Init+0xa4>)
 8000ed2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ed6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ee4:	22a9      	movs	r2, #169	@ 0xa9
 8000ee6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000efa:	4815      	ldr	r0, [pc, #84]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000efc:	f004 f8b8 	bl	8005070 <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f06:	f7ff fc9e 	bl	8000846 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000f18:	f004 fabc 	bl	8005494 <HAL_TIM_ConfigClockSource>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f22:	f7ff fc90 	bl	8000846 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <MX_TIM1_Init+0xa0>)
 8000f38:	f004 fd06 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f42:	f7ff fc80 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000258 	.word	0x20000258
 8000f54:	40012c00 	.word	0x40012c00

08000f58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <HAL_TIM_Base_MspInit+0x44>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d113      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2019      	movs	r0, #25
 8000f88:	f000 fe61 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f8c:	2019      	movs	r0, #25
 8000f8e:	f000 fe78 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000faa:	4a24      	ldr	r2, [pc, #144]	@ (800103c <MX_USART1_UART_Init+0x98>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000fae:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fb0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fbc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff0:	4811      	ldr	r0, [pc, #68]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8000ff2:	f004 fd71 	bl	8005ad8 <HAL_UART_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f7ff fc23 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001000:	2100      	movs	r1, #0
 8001002:	480d      	ldr	r0, [pc, #52]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8001004:	f006 faaa 	bl	800755c <HAL_UARTEx_SetTxFifoThreshold>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800100e:	f7ff fc1a 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001012:	2100      	movs	r1, #0
 8001014:	4808      	ldr	r0, [pc, #32]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8001016:	f006 fadf 	bl	80075d8 <HAL_UARTEx_SetRxFifoThreshold>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001020:	f7ff fc11 	bl	8000846 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <MX_USART1_UART_Init+0x94>)
 8001026:	f006 fa60 	bl	80074ea <HAL_UARTEx_DisableFifoMode>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001030:	f7ff fc09 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200002a4 	.word	0x200002a4
 800103c:	40013800 	.word	0x40013800

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b09a      	sub	sp, #104	@ 0x68
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2244      	movs	r2, #68	@ 0x44
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00a fd9f 	bl	800bba4 <memset>
  if(uartHandle->Instance==USART1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a38      	ldr	r2, [pc, #224]	@ (800114c <HAL_UART_MspInit+0x10c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d169      	bne.n	8001144 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fe07 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff fbdd 	bl	8000846 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108c:	4b30      	ldr	r3, [pc, #192]	@ (8001150 <HAL_UART_MspInit+0x110>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001090:	4a2f      	ldr	r2, [pc, #188]	@ (8001150 <HAL_UART_MspInit+0x110>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001096:	6613      	str	r3, [r2, #96]	@ 0x60
 8001098:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <HAL_UART_MspInit+0x110>)
 800109a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <HAL_UART_MspInit+0x110>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a29      	ldr	r2, [pc, #164]	@ (8001150 <HAL_UART_MspInit+0x110>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <HAL_UART_MspInit+0x110>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ce:	2307      	movs	r3, #7
 80010d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f001 f91e 	bl	800231c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001158 <HAL_UART_MspInit+0x118>)
 80010e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010e8:	2218      	movs	r2, #24
 80010ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_UART_MspInit+0x114>)
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_UART_MspInit+0x114>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001116:	480f      	ldr	r0, [pc, #60]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001118:	f000 fdce 	bl	8001cb8 <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001122:	f7ff fb90 	bl	8000846 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <HAL_UART_MspInit+0x114>)
 800112a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800112e:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <HAL_UART_MspInit+0x114>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2025      	movs	r0, #37	@ 0x25
 800113a:	f000 fd88 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800113e:	2025      	movs	r0, #37	@ 0x25
 8001140:	f000 fd9f 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	3768      	adds	r7, #104	@ 0x68
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013800 	.word	0x40013800
 8001150:	40021000 	.word	0x40021000
 8001154:	20000338 	.word	0x20000338
 8001158:	40020008 	.word	0x40020008

0800115c <_write>:
uint8_t TestValue[10] = {0x70, 0x5D, 0x93, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00};             //checksum Test.

uint8_t UserButton_Flag = 0;

int _write(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	b29b      	uxth	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <_write+0x24>)
 8001172:	f7ff fb8d 	bl	8000890 <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200003a4 	.word	0x200003a4

08001184 <User_Toggle_Led>:

void User_Toggle_Led (void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    if (TIM1_CNT_1 >= 1000)
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <User_Toggle_Led+0x24>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001190:	d307      	bcc.n	80011a2 <User_Toggle_Led+0x1e>
    {
        TIM1_CNT_1 = 0;
 8001192:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <User_Toggle_Led+0x24>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

        // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
        LED_ALL_TOGGLE;
 8001198:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800119c:	4803      	ldr	r0, [pc, #12]	@ (80011ac <User_Toggle_Led+0x28>)
 800119e:	f001 fa57 	bl	8002650 <HAL_GPIO_TogglePin>
    }
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000398 	.word	0x20000398
 80011ac:	48000800 	.word	0x48000800

080011b0 <BootMessagePrint>:
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
}
#else
/* Display Boot Message */
void BootMessagePrint (void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <BootMessagePrint+0x38>)
 80011b6:	f00a fc15 	bl	800b9e4 <puts>
    
    printf(" Project Name        : %s\r\n", PROJECT_NAME );
 80011ba:	490c      	ldr	r1, [pc, #48]	@ (80011ec <BootMessagePrint+0x3c>)
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <BootMessagePrint+0x40>)
 80011be:	f00a fba9 	bl	800b914 <iprintf>
    
    printf(" - HW VERSION        : %s\r\n", STR_HW_VER );
 80011c2:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <BootMessagePrint+0x44>)
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <BootMessagePrint+0x48>)
 80011c6:	f00a fba5 	bl	800b914 <iprintf>
    
    printf(" - FW VERSION        : %s\r\n", STR_FW_VER );
 80011ca:	490c      	ldr	r1, [pc, #48]	@ (80011fc <BootMessagePrint+0x4c>)
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <BootMessagePrint+0x50>)
 80011ce:	f00a fba1 	bl	800b914 <iprintf>
    
    printf(" - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80011d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001204 <BootMessagePrint+0x54>)
 80011d4:	490c      	ldr	r1, [pc, #48]	@ (8001208 <BootMessagePrint+0x58>)
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <BootMessagePrint+0x5c>)
 80011d8:	f00a fb9c 	bl	800b914 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <BootMessagePrint+0x38>)
 80011de:	f00a fc01 	bl	800b9e4 <puts>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800c6e0 	.word	0x0800c6e0
 80011ec:	0800c728 	.word	0x0800c728
 80011f0:	0800c738 	.word	0x0800c738
 80011f4:	0800c754 	.word	0x0800c754
 80011f8:	0800c75c 	.word	0x0800c75c
 80011fc:	0800c778 	.word	0x0800c778
 8001200:	0800c78c 	.word	0x0800c78c
 8001204:	0800c7a8 	.word	0x0800c7a8
 8001208:	0800c7b4 	.word	0x0800c7b4
 800120c:	0800c7c0 	.word	0x0800c7c0

08001210 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
    printf("-------------------------------------------------------------------\r\n");
 8001214:	4819      	ldr	r0, [pc, #100]	@ (800127c <GetClockSourcePrint+0x6c>)
 8001216:	f00a fbe5 	bl	800b9e4 <puts>
    
    printf(" - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 800121a:	f003 fc59 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 800121e:	4603      	mov	r3, r0
 8001220:	4a17      	ldr	r2, [pc, #92]	@ (8001280 <GetClockSourcePrint+0x70>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	4619      	mov	r1, r3
 800122a:	4816      	ldr	r0, [pc, #88]	@ (8001284 <GetClockSourcePrint+0x74>)
 800122c:	f00a fb72 	bl	800b914 <iprintf>
    
    printf(" - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8001230:	f003 fcb0 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8001234:	4603      	mov	r3, r0
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <GetClockSourcePrint+0x70>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	0c9b      	lsrs	r3, r3, #18
 800123e:	4619      	mov	r1, r3
 8001240:	4811      	ldr	r0, [pc, #68]	@ (8001288 <GetClockSourcePrint+0x78>)
 8001242:	f00a fb67 	bl	800b914 <iprintf>
    
    printf(" - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8001246:	f003 fcb1 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 800124a:	4603      	mov	r3, r0
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <GetClockSourcePrint+0x70>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9b      	lsrs	r3, r3, #18
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	@ (800128c <GetClockSourcePrint+0x7c>)
 8001258:	f00a fb5c 	bl	800b914 <iprintf>
    
    printf(" - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 800125c:	f003 fcbc 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8001260:	4603      	mov	r3, r0
 8001262:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <GetClockSourcePrint+0x70>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	0c9b      	lsrs	r3, r3, #18
 800126a:	4619      	mov	r1, r3
 800126c:	4808      	ldr	r0, [pc, #32]	@ (8001290 <GetClockSourcePrint+0x80>)
 800126e:	f00a fb51 	bl	800b914 <iprintf>
    
    printf("-------------------------------------------------------------------\r\n" );
 8001272:	4802      	ldr	r0, [pc, #8]	@ (800127c <GetClockSourcePrint+0x6c>)
 8001274:	f00a fbb6 	bl	800b9e4 <puts>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	0800c6e0 	.word	0x0800c6e0
 8001280:	431bde83 	.word	0x431bde83
 8001284:	0800c7e0 	.word	0x0800c7e0
 8001288:	0800c810 	.word	0x0800c810
 800128c:	0800c840 	.word	0x0800c840
 8001290:	0800c870 	.word	0x0800c870

08001294 <Decode_CKS_GetChecksum>:
    //     return 0;
    // }
}

static uint8_t Decode_CKS_GetChecksum (const uint8_t * pData, uint8_t length)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = 0x52;
 80012a0:	2352      	movs	r3, #82	@ 0x52
 80012a2:	75fb      	strb	r3, [r7, #23]
    uint8_t checksumsize = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	757b      	strb	r3, [r7, #21]

    checksumsize = length;
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	757b      	strb	r3, [r7, #21]

    // ck8 ^= *pData++; // MC Check 

    // ck8 ^= *pData++ & 0xC0; // CKT 6b clear. CKT Check
    // for (uint8_t i = 0; i < checksumsize; i++)
    for (uint8_t i = 0; i < checksumsize; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	75bb      	strb	r3, [r7, #22]
 80012b0:	e009      	b.n	80012c6 <Decode_CKS_GetChecksum+0x32>
    {
        ck8 ^= *pData++;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	4053      	eors	r3, r2
 80012be:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < checksumsize; i++)
 80012c0:	7dbb      	ldrb	r3, [r7, #22]
 80012c2:	3301      	adds	r3, #1
 80012c4:	75bb      	strb	r3, [r7, #22]
 80012c6:	7dba      	ldrb	r2, [r7, #22]
 80012c8:	7d7b      	ldrb	r3, [r7, #21]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3f1      	bcc.n	80012b2 <Decode_CKS_GetChecksum+0x1e>
    // {
    //         ck8 ^= *pData++;
    // }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	09db      	lsrs	r3, r3, #7
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4053      	eors	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4053      	eors	r3, r2
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4053      	eors	r3, r2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	753b      	strb	r3, [r7, #20]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	099b      	lsrs	r3, r3, #6
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4053      	eors	r3, r2
 8001306:	b2da      	uxtb	r2, r3
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4053      	eors	r3, r2
 8001310:	b2da      	uxtb	r2, r3
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	4053      	eors	r3, r2
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	74fb      	strb	r3, [r7, #19]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	09db      	lsrs	r3, r3, #7
 8001322:	b2da      	uxtb	r2, r3
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	099b      	lsrs	r3, r3, #6
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4053      	eors	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	74bb      	strb	r3, [r7, #18]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	b2da      	uxtb	r2, r3
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4053      	eors	r3, r2
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	747b      	strb	r3, [r7, #17]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	b2da      	uxtb	r2, r3
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4053      	eors	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	743b      	strb	r3, [r7, #16]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	085b      	lsrs	r3, r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	4053      	eors	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
    uint8_t ck6 =   bit5 << 5 |
 8001372:	7d3b      	ldrb	r3, [r7, #20]
 8001374:	015b      	lsls	r3, r3, #5
 8001376:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 8001378:	7cfb      	ldrb	r3, [r7, #19]
 800137a:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =   bit5 << 5 |
 800137c:	b25b      	sxtb	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 8001382:	7cbb      	ldrb	r3, [r7, #18]
 8001384:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 8001386:	b25b      	sxtb	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 800138c:	7c7b      	ldrb	r3, [r7, #17]
 800138e:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 8001390:	b25b      	sxtb	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 8001396:	7c3b      	ldrb	r3, [r7, #16]
 8001398:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 80013a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b25b      	sxtb	r3, r3
    uint8_t ck6 =   bit5 << 5 |
 80013a8:	73bb      	strb	r3, [r7, #14]
                    bit0;
    return ck6;
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <IOL_PreOP_ReadWriteCheck>:
    // printf(" Checksum Pass : %d\r\n", ChecksumTorF);
}

// PreOP Mode R/W 체크
static uint8_t IOL_PreOP_ReadWriteCheck (void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    // R/W   Read 체크
    if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 80013bc:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <IOL_PreOP_ReadWriteCheck+0x30>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fa63 	bl	800188c <Decode_MC_ReadWrite>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <IOL_PreOP_ReadWriteCheck+0x18>
    {
        return IOL_RW_Read;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e009      	b.n	80013e4 <IOL_PreOP_ReadWriteCheck+0x2c>
    }
    // R/W   Write 체크
    else if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Write)
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <IOL_PreOP_ReadWriteCheck+0x30>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fa59 	bl	800188c <Decode_MC_ReadWrite>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <IOL_PreOP_ReadWriteCheck+0x2c>
    {
        return IOL_RW_Write;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e7ff      	b.n	80013e4 <IOL_PreOP_ReadWriteCheck+0x2c>
    }
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000b88 	.word	0x20000b88

080013ec <PreOP_CKS_GetChecksum>:

//preOP 모드 Event 비트 포함 CKS 생성
static uint8_t PreOP_CKS_GetChecksum (const uint8_t * pData, uint8_t length, uint8_t eventflag)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
 80013f8:	4613      	mov	r3, r2
 80013fa:	70bb      	strb	r3, [r7, #2]
    uint8_t ck8 = 0x52;
 80013fc:	2352      	movs	r3, #82	@ 0x52
 80013fe:	77fb      	strb	r3, [r7, #31]
    uint8_t checksumsize = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	773b      	strb	r3, [r7, #28]
    uint8_t eventbitset = 0x80;
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	76fb      	strb	r3, [r7, #27]

    checksumsize = length;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	773b      	strb	r3, [r7, #28]

    if (eventflag == 0)
 800140c:	78bb      	ldrb	r3, [r7, #2]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 8081 	bne.w	8001516 <PreOP_CKS_GetChecksum+0x12a>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 8001414:	2300      	movs	r3, #0
 8001416:	77bb      	strb	r3, [r7, #30]
 8001418:	e009      	b.n	800142e <PreOP_CKS_GetChecksum+0x42>
        {
            ck8 ^= *pData++;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	781a      	ldrb	r2, [r3, #0]
 8001422:	7ffb      	ldrb	r3, [r7, #31]
 8001424:	4053      	eors	r3, r2
 8001426:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 8001428:	7fbb      	ldrb	r3, [r7, #30]
 800142a:	3301      	adds	r3, #1
 800142c:	77bb      	strb	r3, [r7, #30]
 800142e:	7fba      	ldrb	r2, [r7, #30]
 8001430:	7f3b      	ldrb	r3, [r7, #28]
 8001432:	429a      	cmp	r2, r3
 8001434:	d3f1      	bcc.n	800141a <PreOP_CKS_GetChecksum+0x2e>
        }
        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8001436:	7ffb      	ldrb	r3, [r7, #31]
 8001438:	09db      	lsrs	r3, r3, #7
 800143a:	b2da      	uxtb	r2, r3
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4053      	eors	r3, r2
 8001444:	b2da      	uxtb	r2, r3
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4053      	eors	r3, r2
 800144e:	b2da      	uxtb	r2, r3
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	085b      	lsrs	r3, r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4053      	eors	r3, r2
 8001458:	b2db      	uxtb	r3, r3
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	74fb      	strb	r3, [r7, #19]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8001460:	7ffb      	ldrb	r3, [r7, #31]
 8001462:	099b      	lsrs	r3, r3, #6
 8001464:	b2da      	uxtb	r2, r3
 8001466:	7ffb      	ldrb	r3, [r7, #31]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4053      	eors	r3, r2
 800146e:	b2da      	uxtb	r2, r3
 8001470:	7ffb      	ldrb	r3, [r7, #31]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4053      	eors	r3, r2
 8001478:	b2da      	uxtb	r2, r3
 800147a:	7ffb      	ldrb	r3, [r7, #31]
 800147c:	4053      	eors	r3, r2
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	74bb      	strb	r3, [r7, #18]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8001486:	7ffb      	ldrb	r3, [r7, #31]
 8001488:	09db      	lsrs	r3, r3, #7
 800148a:	b2da      	uxtb	r2, r3
 800148c:	7ffb      	ldrb	r3, [r7, #31]
 800148e:	099b      	lsrs	r3, r3, #6
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4053      	eors	r3, r2
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	747b      	strb	r3, [r7, #17]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 800149c:	7ffb      	ldrb	r3, [r7, #31]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4053      	eors	r3, r2
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	743b      	strb	r3, [r7, #16]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	7ffb      	ldrb	r3, [r7, #31]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4053      	eors	r3, r2
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80014c8:	7ffb      	ldrb	r3, [r7, #31]
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	4053      	eors	r3, r2
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	73bb      	strb	r3, [r7, #14]
        uint8_t ck6 =   bit5 << 5 |
 80014da:	7cfb      	ldrb	r3, [r7, #19]
 80014dc:	015b      	lsls	r3, r3, #5
 80014de:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80014e0:	7cbb      	ldrb	r3, [r7, #18]
 80014e2:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80014ea:	7c7b      	ldrb	r3, [r7, #17]
 80014ec:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 80014f4:	7c3b      	ldrb	r3, [r7, #16]
 80014f6:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 8001502:	b25b      	sxtb	r3, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8001508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800150c:	4313      	orrs	r3, r2
 800150e:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 8001510:	737b      	strb	r3, [r7, #13]
                        bit0;
        
        return ck6;
 8001512:	7b7b      	ldrb	r3, [r7, #13]
 8001514:	e08b      	b.n	800162e <PreOP_CKS_GetChecksum+0x242>
    }
    else if (eventflag == 1)
 8001516:	78bb      	ldrb	r3, [r7, #2]
 8001518:	2b01      	cmp	r3, #1
 800151a:	f040 8088 	bne.w	800162e <PreOP_CKS_GetChecksum+0x242>
    {
        for (uint8_t i = 0; i < checksumsize; i++)
 800151e:	2300      	movs	r3, #0
 8001520:	777b      	strb	r3, [r7, #29]
 8001522:	e009      	b.n	8001538 <PreOP_CKS_GetChecksum+0x14c>
        {
            ck8 ^= *pData++;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	7ffb      	ldrb	r3, [r7, #31]
 800152e:	4053      	eors	r3, r2
 8001530:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < checksumsize; i++)
 8001532:	7f7b      	ldrb	r3, [r7, #29]
 8001534:	3301      	adds	r3, #1
 8001536:	777b      	strb	r3, [r7, #29]
 8001538:	7f7a      	ldrb	r2, [r7, #29]
 800153a:	7f3b      	ldrb	r3, [r7, #28]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3f1      	bcc.n	8001524 <PreOP_CKS_GetChecksum+0x138>
        }

        ck8 ^= eventbitset;
 8001540:	7ffa      	ldrb	r2, [r7, #31]
 8001542:	7efb      	ldrb	r3, [r7, #27]
 8001544:	4053      	eors	r3, r2
 8001546:	77fb      	strb	r3, [r7, #31]

        //Section A.1.6
        uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	09db      	lsrs	r3, r3, #7
 800154c:	b2da      	uxtb	r2, r3
 800154e:	7ffb      	ldrb	r3, [r7, #31]
 8001550:	095b      	lsrs	r3, r3, #5
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4053      	eors	r3, r2
 8001556:	b2da      	uxtb	r2, r3
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	08db      	lsrs	r3, r3, #3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4053      	eors	r3, r2
 8001560:	b2da      	uxtb	r2, r3
 8001562:	7ffb      	ldrb	r3, [r7, #31]
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4053      	eors	r3, r2
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	76bb      	strb	r3, [r7, #26]
        uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 8001572:	7ffb      	ldrb	r3, [r7, #31]
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	b2da      	uxtb	r2, r3
 8001578:	7ffb      	ldrb	r3, [r7, #31]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4053      	eors	r3, r2
 8001580:	b2da      	uxtb	r2, r3
 8001582:	7ffb      	ldrb	r3, [r7, #31]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4053      	eors	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	7ffb      	ldrb	r3, [r7, #31]
 800158e:	4053      	eors	r3, r2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	767b      	strb	r3, [r7, #25]
        uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	09db      	lsrs	r3, r3, #7
 800159c:	b2da      	uxtb	r2, r3
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4053      	eors	r3, r2
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	763b      	strb	r3, [r7, #24]
        uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	095b      	lsrs	r3, r3, #5
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	7ffb      	ldrb	r3, [r7, #31]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4053      	eors	r3, r2
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	75fb      	strb	r3, [r7, #23]
        uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80015c4:	7ffb      	ldrb	r3, [r7, #31]
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	7ffb      	ldrb	r3, [r7, #31]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4053      	eors	r3, r2
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	75bb      	strb	r3, [r7, #22]
        uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	7ffb      	ldrb	r3, [r7, #31]
 80015e2:	4053      	eors	r3, r2
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	757b      	strb	r3, [r7, #21]
        uint8_t ck6 =   bit5 << 5 |
 80015ec:	7ebb      	ldrb	r3, [r7, #26]
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	b25a      	sxtb	r2, r3
                        bit4 << 4 |
 80015f2:	7e7b      	ldrb	r3, [r7, #25]
 80015f4:	011b      	lsls	r3, r3, #4
        uint8_t ck6 =   bit5 << 5 |
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b25a      	sxtb	r2, r3
                        bit3 << 3 |
 80015fc:	7e3b      	ldrb	r3, [r7, #24]
 80015fe:	00db      	lsls	r3, r3, #3
                        bit4 << 4 |
 8001600:	b25b      	sxtb	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	b25a      	sxtb	r2, r3
                        bit2 << 2 |
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	009b      	lsls	r3, r3, #2
                        bit3 << 3 |
 800160a:	b25b      	sxtb	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 8001610:	7dbb      	ldrb	r3, [r7, #22]
 8001612:	005b      	lsls	r3, r3, #1
                        bit2 << 2 |
 8001614:	b25b      	sxtb	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b25a      	sxtb	r2, r3
                        bit1 << 1 |
 800161a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800161e:	4313      	orrs	r3, r2
 8001620:	b25b      	sxtb	r3, r3
        uint8_t ck6 =   bit5 << 5 |
 8001622:	753b      	strb	r3, [r7, #20]
                        bit0;
        
        return eventbitset | ck6;
 8001624:	7efa      	ldrb	r2, [r7, #27]
 8001626:	7d3b      	ldrb	r3, [r7, #20]
 8001628:	4313      	orrs	r3, r2
 800162a:	b2db      	uxtb	r3, r3
 800162c:	e7ff      	b.n	800162e <PreOP_CKS_GetChecksum+0x242>
                    bit1 << 1 |
                    bit0;
    
    return eventbitset | ck6;
    #endif
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	@ 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <IOL_State_PreOP>:

// if (stateIOLseq == IOL_PreOP)
void IOL_State_PreOP (void)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
    uint8_t i, j = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	71bb      	strb	r3, [r7, #6]
    uint8_t IOL_Commchannel_value = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	717b      	strb	r3, [r7, #5]
    static uint8_t preop_data_arr[PREOP_DATA_LENGTH + 1] = {0}; // + 1   CKS 
    // uint8_t Page_Write_ChecksumValue[0] = {0};

    IOL_Commchannel_value = Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]);
 800164a:	4b48      	ldr	r3, [pc, #288]	@ (800176c <IOL_State_PreOP+0x130>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f93a 	bl	80018c8 <Print_MC_CommunicationChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	717b      	strb	r3, [r7, #5]
    // uint8_t Page_Write_ChecksumValue[1] = {0};

    if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Read)
 8001658:	f7ff feae 	bl	80013b8 <IOL_PreOP_ReadWriteCheck>
 800165c:	4603      	mov	r3, r0
 800165e:	2b01      	cmp	r3, #1
 8001660:	d151      	bne.n	8001706 <IOL_State_PreOP+0xca>
    {
        for (i=0; i < PREOP_DATA_LENGTH; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	e00e      	b.n	8001686 <IOL_State_PreOP+0x4a>
        {
            preop_data_arr[i]= IOL_PreOP_Packet[PreOP_seq_cnt][i];
 8001668:	4b41      	ldr	r3, [pc, #260]	@ (8001770 <IOL_State_PreOP+0x134>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	79fa      	ldrb	r2, [r7, #7]
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4840      	ldr	r0, [pc, #256]	@ (8001774 <IOL_State_PreOP+0x138>)
 8001674:	00c9      	lsls	r1, r1, #3
 8001676:	4401      	add	r1, r0
 8001678:	440a      	add	r2, r1
 800167a:	7811      	ldrb	r1, [r2, #0]
 800167c:	4a3e      	ldr	r2, [pc, #248]	@ (8001778 <IOL_State_PreOP+0x13c>)
 800167e:	54d1      	strb	r1, [r2, r3]
        for (i=0; i < PREOP_DATA_LENGTH; i++)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	3301      	adds	r3, #1
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b07      	cmp	r3, #7
 800168a:	d9ed      	bls.n	8001668 <IOL_State_PreOP+0x2c>
        }

        // PreOP Mode에서 Diagnosis 는 Event flag 있음 PreOP_CKS_GetChecksum 함수의 3번째 인자 1 = event set, 0 = event reset.
        if (IOL_Commchannel_value == IOL_Channel_Diagnosis)
 800168c:	797b      	ldrb	r3, [r7, #5]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d10a      	bne.n	80016a8 <IOL_State_PreOP+0x6c>
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 1);
 8001692:	79fc      	ldrb	r4, [r7, #7]
 8001694:	2201      	movs	r2, #1
 8001696:	2108      	movs	r1, #8
 8001698:	4837      	ldr	r0, [pc, #220]	@ (8001778 <IOL_State_PreOP+0x13c>)
 800169a:	f7ff fea7 	bl	80013ec <PreOP_CKS_GetChecksum>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b35      	ldr	r3, [pc, #212]	@ (8001778 <IOL_State_PreOP+0x13c>)
 80016a4:	551a      	strb	r2, [r3, r4]
 80016a6:	e017      	b.n	80016d8 <IOL_State_PreOP+0x9c>
        }
        else if (IOL_Commchannel_value == IOL_Channel_ISDU)
 80016a8:	797b      	ldrb	r3, [r7, #5]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d10a      	bne.n	80016c4 <IOL_State_PreOP+0x88>
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 80016ae:	79fc      	ldrb	r4, [r7, #7]
 80016b0:	2200      	movs	r2, #0
 80016b2:	2108      	movs	r1, #8
 80016b4:	4830      	ldr	r0, [pc, #192]	@ (8001778 <IOL_State_PreOP+0x13c>)
 80016b6:	f7ff fe99 	bl	80013ec <PreOP_CKS_GetChecksum>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b2e      	ldr	r3, [pc, #184]	@ (8001778 <IOL_State_PreOP+0x13c>)
 80016c0:	551a      	strb	r2, [r3, r4]
 80016c2:	e009      	b.n	80016d8 <IOL_State_PreOP+0x9c>
        }
        else
        {
            preop_data_arr[i] = PreOP_CKS_GetChecksum(&preop_data_arr[0], PREOP_DATA_LENGTH, 0);
 80016c4:	79fc      	ldrb	r4, [r7, #7]
 80016c6:	2200      	movs	r2, #0
 80016c8:	2108      	movs	r1, #8
 80016ca:	482b      	ldr	r0, [pc, #172]	@ (8001778 <IOL_State_PreOP+0x13c>)
 80016cc:	f7ff fe8e 	bl	80013ec <PreOP_CKS_GetChecksum>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b28      	ldr	r3, [pc, #160]	@ (8001778 <IOL_State_PreOP+0x13c>)
 80016d6:	551a      	strb	r2, [r3, r4]
        }
        
        PreOP_seq_cnt++;
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <IOL_State_PreOP+0x134>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <IOL_State_PreOP+0x134>)
 80016e2:	701a      	strb	r2, [r3, #0]

        IOL_ENABLE;
 80016e4:	2201      	movs	r2, #1
 80016e6:	2140      	movs	r1, #64	@ 0x40
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ec:	f000 ff98 	bl	8002620 <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, preop_data_arr, 9) != HAL_OK)
 80016f0:	2209      	movs	r2, #9
 80016f2:	4921      	ldr	r1, [pc, #132]	@ (8001778 <IOL_State_PreOP+0x13c>)
 80016f4:	4821      	ldr	r0, [pc, #132]	@ (800177c <IOL_State_PreOP+0x140>)
 80016f6:	f004 fa3f 	bl	8005b78 <HAL_UART_Transmit_IT>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d030      	beq.n	8001762 <IOL_State_PreOP+0x126>
        {
            Error_Handler();
 8001700:	f7ff f8a1 	bl	8000846 <Error_Handler>
        {
            Error_Handler();
        }

    }
}
 8001704:	e02d      	b.n	8001762 <IOL_State_PreOP+0x126>
    else if (IOL_PreOP_ReadWriteCheck() == IOL_RW_Write)
 8001706:	f7ff fe57 	bl	80013b8 <IOL_PreOP_ReadWriteCheck>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d128      	bne.n	8001762 <IOL_State_PreOP+0x126>
        if ((IOL_Commchannel_value == IOL_Channel_Diagnosis) || (IOL_Commchannel_value == IOL_Channel_ISDU))
 8001710:	797b      	ldrb	r3, [r7, #5]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d002      	beq.n	800171c <IOL_State_PreOP+0xe0>
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d109      	bne.n	8001730 <IOL_State_PreOP+0xf4>
            preop_data_arr[0] = PreOP_CKS_GetChecksum(&preop_data_arr[0], 0, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	2100      	movs	r1, #0
 8001720:	4815      	ldr	r0, [pc, #84]	@ (8001778 <IOL_State_PreOP+0x13c>)
 8001722:	f7ff fe63 	bl	80013ec <PreOP_CKS_GetChecksum>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <IOL_State_PreOP+0x13c>)
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	e008      	b.n	8001742 <IOL_State_PreOP+0x106>
            preop_data_arr[0] = PreOP_CKS_GetChecksum(&preop_data_arr[0], 0, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	4810      	ldr	r0, [pc, #64]	@ (8001778 <IOL_State_PreOP+0x13c>)
 8001736:	f7ff fe59 	bl	80013ec <PreOP_CKS_GetChecksum>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <IOL_State_PreOP+0x13c>)
 8001740:	701a      	strb	r2, [r3, #0]
        IOL_ENABLE;
 8001742:	2201      	movs	r2, #1
 8001744:	2140      	movs	r1, #64	@ 0x40
 8001746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174a:	f000 ff69 	bl	8002620 <HAL_GPIO_WritePin>
        if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) preop_data_arr, 1) != HAL_OK)
 800174e:	2201      	movs	r2, #1
 8001750:	4909      	ldr	r1, [pc, #36]	@ (8001778 <IOL_State_PreOP+0x13c>)
 8001752:	480a      	ldr	r0, [pc, #40]	@ (800177c <IOL_State_PreOP+0x140>)
 8001754:	f004 fa10 	bl	8005b78 <HAL_UART_Transmit_IT>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <IOL_State_PreOP+0x126>
            Error_Handler();
 800175e:	f7ff f872 	bl	8000846 <Error_Handler>
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	bf00      	nop
 800176c:	20000b88 	.word	0x20000b88
 8001770:	20000bef 	.word	0x20000bef
 8001774:	20000014 	.word	0x20000014
 8001778:	20000bf4 	.word	0x20000bf4
 800177c:	200002a4 	.word	0x200002a4

08001780 <IOL_StartUp_Seq_Page>:
        
    }
}

void IOL_StartUp_Seq_Page (uint16_t size)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
    uint8_t rxdataSize = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
    uint8_t eventdebug = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	73bb      	strb	r3, [r7, #14]
    uint8_t Page_Write_ChecksumValue[0] = {0};
    
    rxdataSize = (uint8_t)size;
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	73fb      	strb	r3, [r7, #15]

    // State = StartUP ,   Channel = Page인지 구분
    if ((stateIOLseq == IOL_StartUp) && (Print_MC_CommunicationChannel(uart1_rx_IDLE_buf[0]) == IOL_Channel_Page))
 8001796:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <IOL_StartUp_Seq_Page+0xf0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d15b      	bne.n	8001856 <IOL_StartUp_Seq_Page+0xd6>
 800179e:	4b35      	ldr	r3, [pc, #212]	@ (8001874 <IOL_StartUp_Seq_Page+0xf4>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f890 	bl	80018c8 <Print_MC_CommunicationChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d153      	bne.n	8001856 <IOL_StartUp_Seq_Page+0xd6>
    {
        // R/W   Read 체크
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 80017ae:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <IOL_StartUp_Seq_Page+0xf4>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f86a 	bl	800188c <Decode_MC_ReadWrite>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d123      	bne.n	8001806 <IOL_StartUp_Seq_Page+0x86>
        {
            
            IOL_Page1_Packet[0] = IOL_Page1_SeqValue[Page1_seq++];
 80017be:	4b2e      	ldr	r3, [pc, #184]	@ (8001878 <IOL_StartUp_Seq_Page+0xf8>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	b2d1      	uxtb	r1, r2
 80017c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001878 <IOL_StartUp_Seq_Page+0xf8>)
 80017c8:	7011      	strb	r1, [r2, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <IOL_StartUp_Seq_Page+0xfc>)
 80017ce:	5c9a      	ldrb	r2, [r3, r2]
 80017d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001880 <IOL_StartUp_Seq_Page+0x100>)
 80017d2:	701a      	strb	r2, [r3, #0]

            // IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(IOL_Page1_Packet[0], 1);
            IOL_Page1_Packet[1] = Decode_CKS_GetChecksum(&IOL_Page1_Packet[0], 1);
 80017d4:	2101      	movs	r1, #1
 80017d6:	482a      	ldr	r0, [pc, #168]	@ (8001880 <IOL_StartUp_Seq_Page+0x100>)
 80017d8:	f7ff fd5c 	bl	8001294 <Decode_CKS_GetChecksum>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <IOL_StartUp_Seq_Page+0x100>)
 80017e2:	705a      	strb	r2, [r3, #1]

            IOL_ENABLE;
 80017e4:	2201      	movs	r2, #1
 80017e6:	2140      	movs	r1, #64	@ 0x40
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ec:	f000 ff18 	bl	8002620 <HAL_GPIO_WritePin>
            if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) IOL_Page1_Packet, 2) != HAL_OK)
 80017f0:	2202      	movs	r2, #2
 80017f2:	4923      	ldr	r1, [pc, #140]	@ (8001880 <IOL_StartUp_Seq_Page+0x100>)
 80017f4:	4823      	ldr	r0, [pc, #140]	@ (8001884 <IOL_StartUp_Seq_Page+0x104>)
 80017f6:	f004 f9bf 	bl	8005b78 <HAL_UART_Transmit_IT>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d031      	beq.n	8001864 <IOL_StartUp_Seq_Page+0xe4>
            {
                Error_Handler();
 8001800:	f7ff f821 	bl	8000846 <Error_Handler>
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001804:	e02e      	b.n	8001864 <IOL_StartUp_Seq_Page+0xe4>
            }
            // HAL_UART_Transmit(&huart1,(uint8_t *) IOL_Page1_Packet, 2, 10);
            // IOL_DISABLE;
        }
        // R/W   Write 체크
        else if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Write)
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <IOL_StartUp_Seq_Page+0xf4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f83e 	bl	800188c <Decode_MC_ReadWrite>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d126      	bne.n	8001864 <IOL_StartUp_Seq_Page+0xe4>
        {
            Page_Write_ChecksumValue[0] = Decode_CKS_GetChecksum(&IOL_Checksum_SeedValue, 0);
 8001816:	2100      	movs	r1, #0
 8001818:	481b      	ldr	r0, [pc, #108]	@ (8001888 <IOL_StartUp_Seq_Page+0x108>)
 800181a:	f7ff fd3b 	bl	8001294 <Decode_CKS_GetChecksum>
 800181e:	4603      	mov	r3, r0
 8001820:	733b      	strb	r3, [r7, #12]
            // if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) Decode_CKS_GetChecksum(0x52, 0), 1) != HAL_OK)
            IOL_ENABLE;
 8001822:	2201      	movs	r2, #1
 8001824:	2140      	movs	r1, #64	@ 0x40
 8001826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182a:	f000 fef9 	bl	8002620 <HAL_GPIO_WritePin>
            if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) Page_Write_ChecksumValue, 1) != HAL_OK)
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2201      	movs	r2, #1
 8001834:	4619      	mov	r1, r3
 8001836:	4813      	ldr	r0, [pc, #76]	@ (8001884 <IOL_StartUp_Seq_Page+0x104>)
 8001838:	f004 f99e 	bl	8005b78 <HAL_UART_Transmit_IT>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <IOL_StartUp_Seq_Page+0xc6>
            {
                Error_Handler();
 8001842:	f7ff f800 	bl	8000846 <Error_Handler>
            }

            //Master Command to PreOP.
            if (uart1_rx_IDLE_buf[2] == 0x9A)
 8001846:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <IOL_StartUp_Seq_Page+0xf4>)
 8001848:	789b      	ldrb	r3, [r3, #2]
 800184a:	2b9a      	cmp	r3, #154	@ 0x9a
 800184c:	d10a      	bne.n	8001864 <IOL_StartUp_Seq_Page+0xe4>
            {
                stateIOLseq = IOL_PreOP;
 800184e:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <IOL_StartUp_Seq_Page+0xf0>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001854:	e006      	b.n	8001864 <IOL_StartUp_Seq_Page+0xe4>
            }
            
        }
    }
    else if (stateIOLseq == IOL_PreOP)
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <IOL_StartUp_Seq_Page+0xf0>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d103      	bne.n	8001866 <IOL_StartUp_Seq_Page+0xe6>
    {
        IOL_State_PreOP();
 800185e:	f7ff feed 	bl	800163c <IOL_State_PreOP>
    }
}
 8001862:	e000      	b.n	8001866 <IOL_StartUp_Seq_Page+0xe6>
        if (Decode_MC_ReadWrite(uart1_rx_IDLE_buf[0]) == IOL_RW_Read)
 8001864:	bf00      	nop
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000bf0 	.word	0x20000bf0
 8001874:	20000b88 	.word	0x20000b88
 8001878:	20000bee 	.word	0x20000bee
 800187c:	20000004 	.word	0x20000004
 8001880:	20000bec 	.word	0x20000bec
 8001884:	200002a4 	.word	0x200002a4
 8001888:	20000054 	.word	0x20000054

0800188c <Decode_MC_ReadWrite>:
    #endif
  }
}

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	09db      	lsrs	r3, r3, #7
 80018a2:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <Decode_MC_ReadWrite+0x24>
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d002      	beq.n	80018b4 <Decode_MC_ReadWrite+0x28>
 80018ae:	e003      	b.n	80018b8 <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return IOL_RW_Write;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e002      	b.n	80018ba <Decode_MC_ReadWrite+0x2e>
        case 1 :
            return IOL_RW_Read;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <Decode_MC_ReadWrite+0x2e>
        default :
            // printf("Unexpected value\n");
            return 'X';
 80018b8:	2358      	movs	r3, #88	@ 0x58
    }
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <Print_MC_CommunicationChannel>:

//     return MCdata & 0x03;
// }

static uint8_t Print_MC_CommunicationChannel (uint8_t Data)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d813      	bhi.n	8001914 <Print_MC_CommunicationChannel+0x4c>
 80018ec:	a201      	add	r2, pc, #4	@ (adr r2, 80018f4 <Print_MC_CommunicationChannel+0x2c>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001909 	.word	0x08001909
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	08001911 	.word	0x08001911
    {
        case 0 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_0);
            return IOL_Channel_Process;
 8001904:	2300      	movs	r3, #0
 8001906:	e005      	b.n	8001914 <Print_MC_CommunicationChannel+0x4c>
        case 1 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_1);
            return IOL_Channel_Page;
 8001908:	2301      	movs	r3, #1
 800190a:	e003      	b.n	8001914 <Print_MC_CommunicationChannel+0x4c>
        case 2 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_2);
            return IOL_Channel_Diagnosis;
 800190c:	2302      	movs	r3, #2
 800190e:	e001      	b.n	8001914 <Print_MC_CommunicationChannel+0x4c>
        case 3 :
            // printf("%s,", CommunicationChannel.MC_Com_Ch_3);
            return IOL_Channel_ISDU;
 8001910:	2303      	movs	r3, #3
 8001912:	e7ff      	b.n	8001914 <Print_MC_CommunicationChannel+0x4c>
    }
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001920:	480d      	ldr	r0, [pc, #52]	@ (8001958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001922:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001924:	f7ff fab2 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	@ (800195c <LoopForever+0x6>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	@ (8001960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <LoopForever+0xe>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	@ (800196c <LoopForever+0x16>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800194e:	f00a f97d 	bl	800bc4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001952:	f7fe feef 	bl	8000734 <main>

08001956 <LoopForever>:

LoopForever:
    b LoopForever
 8001956:	e7fe      	b.n	8001956 <LoopForever>
  ldr   r0, =_estack
 8001958:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8001964:	0800c96c 	.word	0x0800c96c
  ldr r2, =_sbss
 8001968:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 800196c:	20001f20 	.word	0x20001f20

08001970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC1_2_IRQHandler>

08001972 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f95b 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001982:	200f      	movs	r0, #15
 8001984:	f000 f80e 	bl	80019a4 <HAL_InitTick>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	71fb      	strb	r3, [r7, #7]
 8001992:	e001      	b.n	8001998 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001994:	f7ff f884 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001998:	79fb      	ldrb	r3, [r7, #7]

}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019b0:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <HAL_InitTick+0x68>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d022      	beq.n	80019fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_InitTick+0x6c>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <HAL_InitTick+0x68>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 f966 	bl	8001c9e <HAL_SYSTICK_Config>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10f      	bne.n	80019f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b0f      	cmp	r3, #15
 80019dc:	d809      	bhi.n	80019f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019de:	2200      	movs	r2, #0
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	f04f 30ff 	mov.w	r0, #4294967295
 80019e6:	f000 f932 	bl	8001c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <HAL_InitTick+0x70>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e007      	b.n	8001a02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	e004      	b.n	8001a02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e001      	b.n	8001a02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000005c 	.word	0x2000005c
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000058 	.word	0x20000058

08001a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_IncTick+0x1c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_IncTick+0x20>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a03      	ldr	r2, [pc, #12]	@ (8001a34 <HAL_IncTick+0x1c>)
 8001a28:	6013      	str	r3, [r2, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	20000c00 	.word	0x20000c00
 8001a38:	2000005c 	.word	0x2000005c

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000c00 	.word	0x20000c00

08001a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff ffee 	bl	8001a3c <HAL_GetTick>
 8001a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d004      	beq.n	8001a78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_Delay+0x40>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a78:	bf00      	nop
 8001a7a:	f7ff ffdf 	bl	8001a3c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d8f7      	bhi.n	8001a7a <HAL_Delay+0x26>
  {
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000005c 	.word	0x2000005c

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db0b      	blt.n	8001b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4907      	ldr	r1, [pc, #28]	@ (8001b34 <__NVIC_EnableIRQ+0x38>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	@ (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	@ (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	@ 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff8e 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff29 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff40 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff90 	bl	8001b8c <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5f 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff33 	bl	8001afc <__NVIC_EnableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffa4 	bl	8001bf4 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e08d      	b.n	8001de6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b47      	ldr	r3, [pc, #284]	@ (8001df0 <HAL_DMA_Init+0x138>)
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d80f      	bhi.n	8001cf6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b45      	ldr	r3, [pc, #276]	@ (8001df4 <HAL_DMA_Init+0x13c>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a45      	ldr	r2, [pc, #276]	@ (8001df8 <HAL_DMA_Init+0x140>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	009a      	lsls	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a42      	ldr	r2, [pc, #264]	@ (8001dfc <HAL_DMA_Init+0x144>)
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cf4:	e00e      	b.n	8001d14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b40      	ldr	r3, [pc, #256]	@ (8001e00 <HAL_DMA_Init+0x148>)
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a3d      	ldr	r2, [pc, #244]	@ (8001df8 <HAL_DMA_Init+0x140>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	009a      	lsls	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a3c      	ldr	r2, [pc, #240]	@ (8001e04 <HAL_DMA_Init+0x14c>)
 8001d12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fa76 	bl	8002258 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d74:	d102      	bne.n	8001d7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d010      	beq.n	8001dbc <HAL_DMA_Init+0x104>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d80c      	bhi.n	8001dbc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fa96 	bl	80022d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	e008      	b.n	8001dce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40020407 	.word	0x40020407
 8001df4:	bffdfff8 	.word	0xbffdfff8
 8001df8:	cccccccd 	.word	0xcccccccd
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	bffdfbf8 	.word	0xbffdfbf8
 8001e04:	40020400 	.word	0x40020400

08001e08 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Start_IT+0x20>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e066      	b.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d155      	bne.n	8001ee8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0201 	bic.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f9bb 	bl	80021dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 020e 	orr.w	r2, r2, #14
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e00f      	b.n	8001ea0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0204 	bic.w	r2, r2, #4
 8001e8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 020a 	orr.w	r2, r2, #10
 8001e9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ebc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ed4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e005      	b.n	8001ef4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d005      	beq.n	8001f22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e037      	b.n	8001f92 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 020e 	bic.w	r2, r2, #14
 8001f30:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f40:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f003 021f 	and.w	r2, r3, #31
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f202 	lsl.w	r2, r1, r2
 8001f64:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f6e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f86:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f90:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	e047      	b.n	8002074 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 020e 	bic.w	r2, r2, #14
 8001ff2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	2101      	movs	r1, #1
 8002022:	fa01 f202 	lsl.w	r2, r1, r2
 8002026:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002030:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00c      	beq.n	8002054 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002044:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002048:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002052:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
    }
  }
  return status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	2204      	movs	r2, #4
 80020a0:	409a      	lsls	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d026      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x7a>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d021      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0204 	bic.w	r2, r2, #4
 80020d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f003 021f 	and.w	r2, r3, #31
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	2104      	movs	r1, #4
 80020e0:	fa01 f202 	lsl.w	r2, r1, r2
 80020e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d071      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020f6:	e06c      	b.n	80021d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	2202      	movs	r2, #2
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d02e      	beq.n	800216a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d029      	beq.n	800216a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 020a 	bic.w	r2, r2, #10
 8002132:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	2102      	movs	r1, #2
 800214a:	fa01 f202 	lsl.w	r2, r1, r2
 800214e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d038      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002168:	e033      	b.n	80021d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2208      	movs	r2, #8
 8002174:	409a      	lsls	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d02a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d025      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 020e 	bic.w	r2, r2, #14
 8002196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
}
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002204:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f003 021f 	and.w	r2, r3, #31
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f202 	lsl.w	r2, r1, r2
 8002218:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b10      	cmp	r3, #16
 8002228:	d108      	bne.n	800223c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800223a:	e007      	b.n	800224c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002268:	429a      	cmp	r2, r3
 800226a:	d802      	bhi.n	8002272 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800226c:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e001      	b.n	8002276 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002272:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002274:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3b08      	subs	r3, #8
 8002282:	4a12      	ldr	r2, [pc, #72]	@ (80022cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	009a      	lsls	r2, r3, #2
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	461a      	mov	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a0b      	ldr	r2, [pc, #44]	@ (80022d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80022a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2201      	movs	r2, #1
 80022ac:	409a      	lsls	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40020407 	.word	0x40020407
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40020820 	.word	0x40020820
 80022cc:	cccccccd 	.word	0xcccccccd
 80022d0:	40020880 	.word	0x40020880

080022d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	461a      	mov	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a08      	ldr	r2, [pc, #32]	@ (8002318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2201      	movs	r2, #1
 8002302:	409a      	lsls	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	1000823f 	.word	0x1000823f
 8002318:	40020940 	.word	0x40020940

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800232a:	e15a      	b.n	80025e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 814c 	beq.w	80025dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d005      	beq.n	800235c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002358:	2b02      	cmp	r3, #2
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0201 	and.w	r2, r3, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d017      	beq.n	80023fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d123      	bne.n	800244e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0203 	and.w	r2, r3, #3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a6 	beq.w	80025dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002490:	4b5b      	ldr	r3, [pc, #364]	@ (8002600 <HAL_GPIO_Init+0x2e4>)
 8002492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002494:	4a5a      	ldr	r2, [pc, #360]	@ (8002600 <HAL_GPIO_Init+0x2e4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6613      	str	r3, [r2, #96]	@ 0x60
 800249c:	4b58      	ldr	r3, [pc, #352]	@ (8002600 <HAL_GPIO_Init+0x2e4>)
 800249e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a8:	4a56      	ldr	r2, [pc, #344]	@ (8002604 <HAL_GPIO_Init+0x2e8>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024d2:	d01f      	beq.n	8002514 <HAL_GPIO_Init+0x1f8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002608 <HAL_GPIO_Init+0x2ec>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d019      	beq.n	8002510 <HAL_GPIO_Init+0x1f4>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a4b      	ldr	r2, [pc, #300]	@ (800260c <HAL_GPIO_Init+0x2f0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d013      	beq.n	800250c <HAL_GPIO_Init+0x1f0>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002610 <HAL_GPIO_Init+0x2f4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00d      	beq.n	8002508 <HAL_GPIO_Init+0x1ec>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a49      	ldr	r2, [pc, #292]	@ (8002614 <HAL_GPIO_Init+0x2f8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d007      	beq.n	8002504 <HAL_GPIO_Init+0x1e8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a48      	ldr	r2, [pc, #288]	@ (8002618 <HAL_GPIO_Init+0x2fc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d101      	bne.n	8002500 <HAL_GPIO_Init+0x1e4>
 80024fc:	2305      	movs	r3, #5
 80024fe:	e00a      	b.n	8002516 <HAL_GPIO_Init+0x1fa>
 8002500:	2306      	movs	r3, #6
 8002502:	e008      	b.n	8002516 <HAL_GPIO_Init+0x1fa>
 8002504:	2304      	movs	r3, #4
 8002506:	e006      	b.n	8002516 <HAL_GPIO_Init+0x1fa>
 8002508:	2303      	movs	r3, #3
 800250a:	e004      	b.n	8002516 <HAL_GPIO_Init+0x1fa>
 800250c:	2302      	movs	r3, #2
 800250e:	e002      	b.n	8002516 <HAL_GPIO_Init+0x1fa>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_GPIO_Init+0x1fa>
 8002514:	2300      	movs	r3, #0
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	f002 0203 	and.w	r2, r2, #3
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	4093      	lsls	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002526:	4937      	ldr	r1, [pc, #220]	@ (8002604 <HAL_GPIO_Init+0x2e8>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002534:	4b39      	ldr	r3, [pc, #228]	@ (800261c <HAL_GPIO_Init+0x300>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002558:	4a30      	ldr	r2, [pc, #192]	@ (800261c <HAL_GPIO_Init+0x300>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800255e:	4b2f      	ldr	r3, [pc, #188]	@ (800261c <HAL_GPIO_Init+0x300>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002582:	4a26      	ldr	r2, [pc, #152]	@ (800261c <HAL_GPIO_Init+0x300>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002588:	4b24      	ldr	r3, [pc, #144]	@ (800261c <HAL_GPIO_Init+0x300>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025ac:	4a1b      	ldr	r2, [pc, #108]	@ (800261c <HAL_GPIO_Init+0x300>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <HAL_GPIO_Init+0x300>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025d6:	4a11      	ldr	r2, [pc, #68]	@ (800261c <HAL_GPIO_Init+0x300>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f ae9d 	bne.w	800232c <HAL_GPIO_Init+0x10>
  }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	48000400 	.word	0x48000400
 800260c:	48000800 	.word	0x48000800
 8002610:	48000c00 	.word	0x48000c00
 8002614:	48001000 	.word	0x48001000
 8002618:	48001400 	.word	0x48001400
 800261c:	40010400 	.word	0x40010400

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800263c:	e002      	b.n	8002644 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	041a      	lsls	r2, r3, #16
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43d9      	mvns	r1, r3
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	400b      	ands	r3, r1
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800268e:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800269a:	4a05      	ldr	r2, [pc, #20]	@ (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f806 	bl	80026b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0c0      	b.n	800285e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f008 fd49 	bl	800b188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2203      	movs	r2, #3
 80026fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f005 f85f 	bl	80077c6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e03e      	b.n	800278c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	3311      	adds	r3, #17
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	3310      	adds	r3, #16
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	440b      	add	r3, r1
 8002744:	3313      	adds	r3, #19
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	3320      	adds	r3, #32
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	3324      	adds	r3, #36	@ 0x24
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	3301      	adds	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	791b      	ldrb	r3, [r3, #4]
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	429a      	cmp	r2, r3
 8002794:	d3bb      	bcc.n	800270e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
 800279a:	e044      	b.n	8002826 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	440b      	add	r3, r1
 8002818:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	3301      	adds	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	791b      	ldrb	r3, [r3, #4]
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	429a      	cmp	r2, r3
 800282e:	d3b5      	bcc.n	800279c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3304      	adds	r3, #4
 8002838:	e893 0006 	ldmia.w	r3, {r1, r2}
 800283c:	f004 ffde 	bl	80077fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7a9b      	ldrb	r3, [r3, #10]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d102      	bne.n	800285c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f001 fc0e 	bl	8004078 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_PCD_Start+0x16>
 8002878:	2302      	movs	r3, #2
 800287a:	e012      	b.n	80028a2 <HAL_PCD_Start+0x3c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f004 ff85 	bl	8007798 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f006 fd62 	bl	800935c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f006 fd67 	bl	800938a <USB_ReadInterrupts>
 80028bc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fb06 	bl	8002eda <PCD_EP_ISR_Handler>

    return;
 80028ce:	e110      	b.n	8002af2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d013      	beq.n	8002902 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ec:	b292      	uxth	r2, r2
 80028ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f008 fcd9 	bl	800b2aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80028f8:	2100      	movs	r1, #0
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f8fc 	bl	8002af8 <HAL_PCD_SetAddress>

    return;
 8002900:	e0f7      	b.n	8002af2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00c      	beq.n	8002926 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002914:	b29a      	uxth	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800291e:	b292      	uxth	r2, r2
 8002920:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002924:	e0e5      	b.n	8002af2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002938:	b29a      	uxth	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002942:	b292      	uxth	r2, r2
 8002944:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002948:	e0d3      	b.n	8002af2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d034      	beq.n	80029be <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800295c:	b29a      	uxth	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0204 	bic.w	r2, r2, #4
 8002966:	b292      	uxth	r2, r2
 8002968:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0208 	bic.w	r2, r2, #8
 800297e:	b292      	uxth	r2, r2
 8002980:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002996:	2100      	movs	r1, #0
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f008 fe79 	bl	800b690 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f008 fcbc 	bl	800b31c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029b6:	b292      	uxth	r2, r2
 80029b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80029bc:	e099      	b.n	8002af2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d027      	beq.n	8002a18 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0208 	orr.w	r2, r2, #8
 80029da:	b292      	uxth	r2, r2
 80029dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029f2:	b292      	uxth	r2, r2
 80029f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0204 	orr.w	r2, r2, #4
 8002a0a:	b292      	uxth	r2, r2
 8002a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f008 fc69 	bl	800b2e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a16:	e06c      	b.n	8002af2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d040      	beq.n	8002aa4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a34:	b292      	uxth	r2, r2
 8002a36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d12b      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0204 	orr.w	r2, r2, #4
 8002a56:	b292      	uxth	r2, r2
 8002a58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0208 	orr.w	r2, r2, #8
 8002a6e:	b292      	uxth	r2, r2
 8002a70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a92:	2101      	movs	r1, #1
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f008 fdfb 	bl	800b690 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002a9a:	e02a      	b.n	8002af2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f008 fc23 	bl	800b2e8 <HAL_PCD_SuspendCallback>
    return;
 8002aa2:	e026      	b.n	8002af2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00f      	beq.n	8002ace <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f008 fbe1 	bl	800b28e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002acc:	e011      	b.n	8002af2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00c      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aea:	b292      	uxth	r2, r2
 8002aec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002af0:	bf00      	nop
  }
}
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_PCD_SetAddress+0x1a>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e012      	b.n	8002b38 <HAL_PCD_SetAddress+0x40>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f006 fc03 	bl	8009334 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	4608      	mov	r0, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	70fb      	strb	r3, [r7, #3]
 8002b52:	460b      	mov	r3, r1
 8002b54:	803b      	strh	r3, [r7, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	da0e      	bge.n	8002b84 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	f003 0207 	and.w	r2, r3, #7
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	3310      	adds	r3, #16
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	705a      	strb	r2, [r3, #1]
 8002b82:	e00e      	b.n	8002ba2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	f003 0207 	and.w	r2, r3, #7
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002bae:	883b      	ldrh	r3, [r7, #0]
 8002bb0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	78ba      	ldrb	r2, [r7, #2]
 8002bbc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bbe:	78bb      	ldrb	r3, [r7, #2]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d102      	bne.n	8002bca <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_PCD_EP_Open+0x98>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e00e      	b.n	8002bf6 <HAL_PCD_EP_Open+0xb6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 fe26 	bl	8007838 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da0e      	bge.n	8002c30 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 0207 	and.w	r2, r3, #7
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	3310      	adds	r3, #16
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	705a      	strb	r2, [r3, #1]
 8002c2e:	e00e      	b.n	8002c4e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	f003 0207 	and.w	r2, r3, #7
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_PCD_EP_Close+0x6a>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e00e      	b.n	8002c86 <HAL_PCD_EP_Close+0x88>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68f9      	ldr	r1, [r7, #12]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f005 fac6 	bl	8008208 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
 8002ca0:	f003 0207 	and.w	r2, r3, #7
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cce:	7afb      	ldrb	r3, [r7, #11]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6979      	ldr	r1, [r7, #20]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f005 fc7e 	bl	80085e2 <USB_EPStartXfer>

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	f003 0207 	and.w	r2, r3, #7
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	f003 0207 	and.w	r2, r3, #7
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	3310      	adds	r3, #16
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6979      	ldr	r1, [r7, #20]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f005 fc2f 	bl	80085e2 <USB_EPStartXfer>

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	7912      	ldrb	r2, [r2, #4]
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d901      	bls.n	8002dac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e03e      	b.n	8002e2a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	da0e      	bge.n	8002dd2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	f003 0207 	and.w	r2, r3, #7
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	3310      	adds	r3, #16
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	705a      	strb	r2, [r3, #1]
 8002dd0:	e00c      	b.n	8002dec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_PCD_EP_SetStall+0x7e>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e00e      	b.n	8002e2a <HAL_PCD_EP_SetStall+0x9c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f006 f990 	bl	8009140 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	7912      	ldrb	r2, [r2, #4]
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e040      	b.n	8002ed2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da0e      	bge.n	8002e76 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 0207 	and.w	r2, r3, #7
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	3310      	adds	r3, #16
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	705a      	strb	r2, [r3, #1]
 8002e74:	e00e      	b.n	8002e94 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 0207 	and.w	r2, r3, #7
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_PCD_EP_ClrStall+0x82>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e00e      	b.n	8002ed2 <HAL_PCD_EP_ClrStall+0xa0>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68f9      	ldr	r1, [r7, #12]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f006 f98d 	bl	80091e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b092      	sub	sp, #72	@ 0x48
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ee2:	e333      	b.n	800354c <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eec:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002eee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8002efa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 8108 	bne.w	8003114 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f04:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d14c      	bne.n	8002fa8 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f1e:	813b      	strh	r3, [r7, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	893b      	ldrh	r3, [r7, #8]
 8002f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3310      	adds	r3, #16
 8002f36:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	4413      	add	r3, r2
 8002f52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	441a      	add	r2, r3
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f6e:	2100      	movs	r1, #0
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f008 f972 	bl	800b25a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7b1b      	ldrb	r3, [r3, #12]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 82e5 	beq.w	800354c <PCD_EP_ISR_Handler+0x672>
 8002f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 82e0 	bne.w	800354c <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7b1b      	ldrb	r3, [r3, #12]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	731a      	strb	r2, [r3, #12]
 8002fa6:	e2d1      	b.n	800354c <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fae:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002fb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002fba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d032      	beq.n	8003028 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ffa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f006 fa16 	bl	800942e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29a      	uxth	r2, r3
 800300a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800300e:	4013      	ands	r3, r2
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	897a      	ldrh	r2, [r7, #10]
 8003018:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800301c:	b292      	uxth	r2, r2
 800301e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f008 f8ed 	bl	800b200 <HAL_PCD_SetupStageCallback>
 8003026:	e291      	b.n	800354c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003028:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800302c:	2b00      	cmp	r3, #0
 800302e:	f280 828d 	bge.w	800354c <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b29a      	uxth	r2, r3
 800303a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800303e:	4013      	ands	r3, r2
 8003040:	81fb      	strh	r3, [r7, #14]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	89fa      	ldrh	r2, [r7, #14]
 8003048:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800304c:	b292      	uxth	r2, r2
 800304e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	4413      	add	r3, r2
 800306a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003076:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d019      	beq.n	80030b4 <PCD_EP_ISR_Handler+0x1da>
 8003080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800308e:	6959      	ldr	r1, [r3, #20]
 8003090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003092:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003096:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003098:	b29b      	uxth	r3, r3
 800309a:	f006 f9c8 	bl	800942e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800309e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	441a      	add	r2, r3
 80030a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030aa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80030ac:	2100      	movs	r1, #0
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f008 f8b8 	bl	800b224 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80030bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80030be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f040 8242 	bne.w	800354c <PCD_EP_ISR_Handler+0x672>
 80030c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80030ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80030ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030d2:	f000 823b 	beq.w	800354c <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e6:	81bb      	strh	r3, [r7, #12]
 80030e8:	89bb      	ldrh	r3, [r7, #12]
 80030ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80030ee:	81bb      	strh	r3, [r7, #12]
 80030f0:	89bb      	ldrh	r3, [r7, #12]
 80030f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030f6:	81bb      	strh	r3, [r7, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	89bb      	ldrh	r3, [r7, #12]
 80030fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800310a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800310e:	b29b      	uxth	r3, r3
 8003110:	8013      	strh	r3, [r2, #0]
 8003112:	e21b      	b.n	800354c <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003126:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800312a:	2b00      	cmp	r3, #0
 800312c:	f280 80f1 	bge.w	8003312 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29a      	uxth	r2, r3
 8003142:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003146:	4013      	ands	r3, r2
 8003148:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800315a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800315e:	b292      	uxth	r2, r2
 8003160:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003162:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800317a:	7b1b      	ldrb	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d123      	bne.n	80031c8 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003188:	b29b      	uxth	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	4413      	add	r3, r2
 800319a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80031a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 808b 	beq.w	80032c8 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031b8:	6959      	ldr	r1, [r3, #20]
 80031ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031bc:	88da      	ldrh	r2, [r3, #6]
 80031be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80031c2:	f006 f934 	bl	800942e <USB_ReadPMA>
 80031c6:	e07f      	b.n	80032c8 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80031c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ca:	78db      	ldrb	r3, [r3, #3]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d109      	bne.n	80031e4 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80031d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80031d2:	461a      	mov	r2, r3
 80031d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f9c6 	bl	8003568 <HAL_PCD_EP_DB_Receive>
 80031dc:	4603      	mov	r3, r0
 80031de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80031e2:	e071      	b.n	80032c8 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800321c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003220:	b29b      	uxth	r3, r3
 8003222:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d022      	beq.n	8003284 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4413      	add	r3, r2
 8003258:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003262:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003266:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800326a:	2b00      	cmp	r3, #0
 800326c:	d02c      	beq.n	80032c8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003274:	6959      	ldr	r1, [r3, #20]
 8003276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003278:	891a      	ldrh	r2, [r3, #8]
 800327a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800327e:	f006 f8d6 	bl	800942e <USB_ReadPMA>
 8003282:	e021      	b.n	80032c8 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800328c:	b29b      	uxth	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	4413      	add	r3, r2
 800329e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80032ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d009      	beq.n	80032c8 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ba:	6959      	ldr	r1, [r3, #20]
 80032bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032be:	895a      	ldrh	r2, [r3, #10]
 80032c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032c4:	f006 f8b3 	bl	800942e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80032c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032d0:	441a      	add	r2, r3
 80032d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032de:	441a      	add	r2, r3
 80032e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <PCD_EP_ISR_Handler+0x41e>
 80032ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80032f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d206      	bcs.n	8003306 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f007 ff90 	bl	800b224 <HAL_PCD_DataOutStageCallback>
 8003304:	e005      	b.n	8003312 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800330c:	4618      	mov	r0, r3
 800330e:	f005 f968 	bl	80085e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003312:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8117 	beq.w	800354c <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800331e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	3310      	adds	r3, #16
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	441a      	add	r2, r3
 800335c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800335e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003366:	b29b      	uxth	r3, r3
 8003368:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800336a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800336c:	78db      	ldrb	r3, [r3, #3]
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 80a1 	bne.w	80034b6 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003376:	2200      	movs	r2, #0
 8003378:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800337a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800337c:	7b1b      	ldrb	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8092 	beq.w	80034a8 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003384:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d046      	beq.n	800341c <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800338e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d126      	bne.n	80033e4 <PCD_EP_ISR_Handler+0x50a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	4413      	add	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	00da      	lsls	r2, r3, #3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	4413      	add	r3, r2
 80033b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033dc:	b29a      	uxth	r2, r3
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	801a      	strh	r2, [r3, #0]
 80033e2:	e061      	b.n	80034a8 <PCD_EP_ISR_Handler+0x5ce>
 80033e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d15d      	bne.n	80034a8 <PCD_EP_ISR_Handler+0x5ce>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	00da      	lsls	r2, r3, #3
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2200      	movs	r2, #0
 8003418:	801a      	strh	r2, [r3, #0]
 800341a:	e045      	b.n	80034a8 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d126      	bne.n	8003478 <PCD_EP_ISR_Handler+0x59e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003438:	b29b      	uxth	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	4413      	add	r3, r2
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
 8003442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	00da      	lsls	r2, r3, #3
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	4413      	add	r3, r2
 800344c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800345c:	b29a      	uxth	r2, r3
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800346c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003470:	b29a      	uxth	r2, r3
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	801a      	strh	r2, [r3, #0]
 8003476:	e017      	b.n	80034a8 <PCD_EP_ISR_Handler+0x5ce>
 8003478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d113      	bne.n	80034a8 <PCD_EP_ISR_Handler+0x5ce>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003488:	b29b      	uxth	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348e:	4413      	add	r3, r2
 8003490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	00da      	lsls	r2, r3, #3
 8003498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349a:	4413      	add	r3, r2
 800349c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	2200      	movs	r2, #0
 80034a6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4619      	mov	r1, r3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f007 fed3 	bl	800b25a <HAL_PCD_DataInStageCallback>
 80034b4:	e04a      	b.n	800354c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80034b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d13f      	bne.n	8003540 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	4413      	add	r3, r2
 80034da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e4:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80034e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d906      	bls.n	80034fe <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80034f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f2:	699a      	ldr	r2, [r3, #24]
 80034f4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80034f6:	1ad2      	subs	r2, r2, r3
 80034f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034fa:	619a      	str	r2, [r3, #24]
 80034fc:	e002      	b.n	8003504 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80034fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003500:	2200      	movs	r2, #0
 8003502:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800350c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f007 fea1 	bl	800b25a <HAL_PCD_DataInStageCallback>
 8003518:	e018      	b.n	800354c <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800351a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003520:	441a      	add	r2, r3
 8003522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003524:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800352c:	441a      	add	r2, r3
 800352e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003530:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003538:	4618      	mov	r0, r3
 800353a:	f005 f852 	bl	80085e2 <USB_EPStartXfer>
 800353e:	e005      	b.n	800354c <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003540:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003542:	461a      	mov	r2, r3
 8003544:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f917 	bl	800377a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003554:	b29b      	uxth	r3, r3
 8003556:	b21b      	sxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f6ff acc3 	blt.w	8002ee4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3748      	adds	r7, #72	@ 0x48
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d07c      	beq.n	800367a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003588:	b29b      	uxth	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	4413      	add	r3, r2
 800359a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	8b7b      	ldrh	r3, [r7, #26]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d306      	bcc.n	80035be <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	8b7b      	ldrh	r3, [r7, #26]
 80035b6:	1ad2      	subs	r2, r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	619a      	str	r2, [r3, #24]
 80035bc:	e002      	b.n	80035c4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d123      	bne.n	8003614 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e6:	833b      	strh	r3, [r7, #24]
 80035e8:	8b3b      	ldrh	r3, [r7, #24]
 80035ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035ee:	833b      	strh	r3, [r7, #24]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	8b3b      	ldrh	r3, [r7, #24]
 8003600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800360c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003610:	b29b      	uxth	r3, r3
 8003612:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01f      	beq.n	800365e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003638:	82fb      	strh	r3, [r7, #22]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	441a      	add	r2, r3
 8003648:	8afb      	ldrh	r3, [r7, #22]
 800364a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800364e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003656:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800365a:	b29b      	uxth	r3, r3
 800365c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800365e:	8b7b      	ldrh	r3, [r7, #26]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8085 	beq.w	8003770 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6959      	ldr	r1, [r3, #20]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	891a      	ldrh	r2, [r3, #8]
 8003672:	8b7b      	ldrh	r3, [r7, #26]
 8003674:	f005 fedb 	bl	800942e <USB_ReadPMA>
 8003678:	e07a      	b.n	8003770 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	4413      	add	r3, r2
 8003694:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800369e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	8b7b      	ldrh	r3, [r7, #26]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d306      	bcc.n	80036b8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	8b7b      	ldrh	r3, [r7, #26]
 80036b0:	1ad2      	subs	r2, r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	619a      	str	r2, [r3, #24]
 80036b6:	e002      	b.n	80036be <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d123      	bne.n	800370e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e0:	83fb      	strh	r3, [r7, #30]
 80036e2:	8bfb      	ldrh	r3, [r7, #30]
 80036e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036e8:	83fb      	strh	r3, [r7, #30]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	441a      	add	r2, r3
 80036f8:	8bfb      	ldrh	r3, [r7, #30]
 80036fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800370a:	b29b      	uxth	r3, r3
 800370c:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11f      	bne.n	8003758 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800372e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003732:	83bb      	strh	r3, [r7, #28]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	8bbb      	ldrh	r3, [r7, #28]
 8003744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800374c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003750:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003758:	8b7b      	ldrh	r3, [r7, #26]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6959      	ldr	r1, [r3, #20]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	895a      	ldrh	r2, [r3, #10]
 800376a:	8b7b      	ldrh	r3, [r7, #26]
 800376c:	f005 fe5f 	bl	800942e <USB_ReadPMA>
    }
  }

  return count;
 8003770:	8b7b      	ldrh	r3, [r7, #26]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b0a6      	sub	sp, #152	@ 0x98
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	4613      	mov	r3, r2
 8003786:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 81f7 	beq.w	8003b82 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d907      	bls.n	80037d8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80037d0:	1ad2      	subs	r2, r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	619a      	str	r2, [r3, #24]
 80037d6:	e002      	b.n	80037de <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2200      	movs	r2, #0
 80037dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f040 80e1 	bne.w	80039aa <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d126      	bne.n	800383e <HAL_PCD_EP_DB_Transmit+0xc4>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037fe:	b29b      	uxth	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	4413      	add	r3, r2
 8003806:	633b      	str	r3, [r7, #48]	@ 0x30
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	00da      	lsls	r2, r3, #3
 800380e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003810:	4413      	add	r3, r2
 8003812:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003822:	b29a      	uxth	r2, r3
 8003824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003836:	b29a      	uxth	r2, r3
 8003838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	e01a      	b.n	8003874 <HAL_PCD_EP_DB_Transmit+0xfa>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	785b      	ldrb	r3, [r3, #1]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d116      	bne.n	8003874 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003854:	b29b      	uxth	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	4413      	add	r3, r2
 800385c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	00da      	lsls	r2, r3, #3
 8003864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003866:	4413      	add	r3, r2
 8003868:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800386c:	637b      	str	r3, [r7, #52]	@ 0x34
 800386e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003870:	2200      	movs	r2, #0
 8003872:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d126      	bne.n	80038d0 <HAL_PCD_EP_DB_Transmit+0x156>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003890:	b29b      	uxth	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	4413      	add	r3, r2
 8003898:	623b      	str	r3, [r7, #32]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	00da      	lsls	r2, r3, #3
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	4413      	add	r3, r2
 80038a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	801a      	strh	r2, [r3, #0]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	e017      	b.n	8003900 <HAL_PCD_EP_DB_Transmit+0x186>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d113      	bne.n	8003900 <HAL_PCD_EP_DB_Transmit+0x186>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	4413      	add	r3, r2
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	00da      	lsls	r2, r3, #3
 80038f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f2:	4413      	add	r3, r2
 80038f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	2200      	movs	r2, #0
 80038fe:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	78db      	ldrb	r3, [r3, #3]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d123      	bne.n	8003950 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800391e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003922:	837b      	strh	r3, [r7, #26]
 8003924:	8b7b      	ldrh	r3, [r7, #26]
 8003926:	f083 0320 	eor.w	r3, r3, #32
 800392a:	837b      	strh	r3, [r7, #26]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	8b7b      	ldrh	r3, [r7, #26]
 800393c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800394c:	b29b      	uxth	r3, r3
 800394e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	4619      	mov	r1, r3
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f007 fc7f 	bl	800b25a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01f      	beq.n	80039a6 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800397c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003980:	833b      	strh	r3, [r7, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	441a      	add	r2, r3
 8003990:	8b3b      	ldrh	r3, [r7, #24]
 8003992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800399a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800399e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e31f      	b.n	8003fea <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d021      	beq.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	441a      	add	r2, r3
 80039e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80039e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	f040 82ca 	bne.w	8003f98 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a0c:	441a      	add	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a1a:	441a      	add	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d309      	bcc.n	8003a40 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	6a1a      	ldr	r2, [r3, #32]
 8003a36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a38:	1ad2      	subs	r2, r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	621a      	str	r2, [r3, #32]
 8003a3e:	e015      	b.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003a48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003a4c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a56:	e009      	b.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	785b      	ldrb	r3, [r3, #1]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d15f      	bne.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a88:	4413      	add	r3, r2
 8003a8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	00da      	lsls	r2, r3, #3
 8003a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a94:	4413      	add	r3, r2
 8003a96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aaa:	801a      	strh	r2, [r3, #0]
 8003aac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	e051      	b.n	8003b6c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003ac8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aca:	2b3e      	cmp	r3, #62	@ 0x3e
 8003acc:	d816      	bhi.n	8003afc <HAL_PCD_EP_DB_Transmit+0x382>
 8003ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	029b      	lsls	r3, r3, #10
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4313      	orrs	r3, r2
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	e037      	b.n	8003b6c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003afc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <HAL_PCD_EP_DB_Transmit+0x398>
 8003b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4313      	orrs	r3, r2
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	e01b      	b.n	8003b6c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d117      	bne.n	8003b6c <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b50:	4413      	add	r3, r2
 8003b52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	00da      	lsls	r2, r3, #3
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b6a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6959      	ldr	r1, [r3, #20]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	891a      	ldrh	r2, [r3, #8]
 8003b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f005 fc15 	bl	80093aa <USB_WritePMA>
 8003b80:	e20a      	b.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d307      	bcc.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003bbe:	1ad2      	subs	r2, r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	619a      	str	r2, [r3, #24]
 8003bc4:	e002      	b.n	8003bcc <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f040 80f6 	bne.w	8003dc2 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	785b      	ldrb	r3, [r3, #1]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d126      	bne.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bf2:	4413      	add	r3, r2
 8003bf4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	00da      	lsls	r2, r3, #3
 8003bfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bfe:	4413      	add	r3, r2
 8003c00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c04:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c14:	801a      	strh	r2, [r3, #0]
 8003c16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	e01a      	b.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d116      	bne.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c48:	4413      	add	r3, r2
 8003c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	00da      	lsls	r2, r3, #3
 8003c52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c54:	4413      	add	r3, r2
 8003c56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c5e:	2200      	movs	r2, #0
 8003c60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d12f      	bne.n	8003cd2 <HAL_PCD_EP_DB_Transmit+0x558>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	00da      	lsls	r2, r3, #3
 8003c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cb6:	801a      	strh	r2, [r3, #0]
 8003cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	e01c      	b.n	8003d0c <HAL_PCD_EP_DB_Transmit+0x592>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d118      	bne.n	8003d0c <HAL_PCD_EP_DB_Transmit+0x592>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cea:	4413      	add	r3, r2
 8003cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	00da      	lsls	r2, r3, #3
 8003cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d08:	2200      	movs	r2, #0
 8003d0a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	78db      	ldrb	r3, [r3, #3]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d127      	bne.n	8003d64 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d2e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003d32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003d36:	f083 0320 	eor.w	r3, r3, #32
 8003d3a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	441a      	add	r2, r3
 8003d4c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003d50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f007 fa75 	bl	800b25a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d121      	bne.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d94:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	441a      	add	r2, r3
 8003da6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8003daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003db2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e113      	b.n	8003fea <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d121      	bne.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	441a      	add	r2, r3
 8003df8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003dfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	f040 80be 	bne.w	8003f98 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e24:	441a      	add	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e32:	441a      	add	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	6a1a      	ldr	r2, [r3, #32]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d309      	bcc.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	6a1a      	ldr	r2, [r3, #32]
 8003e4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e50:	1ad2      	subs	r2, r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	621a      	str	r2, [r3, #32]
 8003e56:	e015      	b.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d107      	bne.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003e60:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e64:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e6e:	e009      	b.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d15f      	bne.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ea6:	4413      	add	r3, r2
 8003ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	00da      	lsls	r2, r3, #3
 8003eb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003eb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003eba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x76c>
 8003ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ee2:	801a      	strh	r2, [r3, #0]
 8003ee4:	e04e      	b.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003ee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ee8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003eea:	d816      	bhi.n	8003f1a <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003eec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ef2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_PCD_EP_DB_Transmit+0x788>
 8003efc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003efe:	3301      	adds	r3, #1
 8003f00:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	029b      	lsls	r3, r3, #10
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f16:	801a      	strh	r2, [r3, #0]
 8003f18:	e034      	b.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003f1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	029b      	lsls	r3, r3, #10
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	e018      	b.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	785b      	ldrb	r3, [r3, #1]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d114      	bne.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x80a>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f68:	4413      	add	r3, r2
 8003f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	00da      	lsls	r2, r3, #3
 8003f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f74:	4413      	add	r3, r2
 8003f76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f82:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6959      	ldr	r1, [r3, #20]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	895a      	ldrh	r2, [r3, #10]
 8003f90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f005 fa09 	bl	80093aa <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fb2:	82fb      	strh	r3, [r7, #22]
 8003fb4:	8afb      	ldrh	r3, [r7, #22]
 8003fb6:	f083 0310 	eor.w	r3, r3, #16
 8003fba:	82fb      	strh	r3, [r7, #22]
 8003fbc:	8afb      	ldrh	r3, [r7, #22]
 8003fbe:	f083 0320 	eor.w	r3, r3, #32
 8003fc2:	82fb      	strh	r3, [r7, #22]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	8afb      	ldrh	r3, [r7, #22]
 8003fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3798      	adds	r7, #152	@ 0x98
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	817b      	strh	r3, [r7, #10]
 8004000:	4613      	mov	r3, r2
 8004002:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004004:	897b      	ldrh	r3, [r7, #10]
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004010:	897b      	ldrh	r3, [r7, #10]
 8004012:	f003 0207 	and.w	r2, r3, #7
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	3310      	adds	r3, #16
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e009      	b.n	800403c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004028:	897a      	ldrh	r2, [r7, #10]
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4413      	add	r3, r2
 800403a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800403c:	893b      	ldrh	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d107      	bne.n	8004052 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	b29a      	uxth	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	80da      	strh	r2, [r3, #6]
 8004050:	e00b      	b.n	800406a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2201      	movs	r2, #1
 8004056:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	b29a      	uxth	r2, r3
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	0c1b      	lsrs	r3, r3, #16
 8004064:	b29a      	uxth	r2, r3
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800409c:	b29b      	uxth	r3, r3
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f043 0302 	orr.w	r3, r3, #2
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d141      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040da:	4b4b      	ldr	r3, [pc, #300]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e6:	d131      	bne.n	800414c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040e8:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ee:	4a46      	ldr	r2, [pc, #280]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f8:	4b43      	ldr	r3, [pc, #268]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004100:	4a41      	ldr	r2, [pc, #260]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004106:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004108:	4b40      	ldr	r3, [pc, #256]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2232      	movs	r2, #50	@ 0x32
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	4a3f      	ldr	r2, [pc, #252]	@ (8004210 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	0c9b      	lsrs	r3, r3, #18
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800411e:	e002      	b.n	8004126 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3b01      	subs	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004126:	4b38      	ldr	r3, [pc, #224]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004132:	d102      	bne.n	800413a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f2      	bne.n	8004120 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800413a:	4b33      	ldr	r3, [pc, #204]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004146:	d158      	bne.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e057      	b.n	80041fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800414c:	4b2e      	ldr	r3, [pc, #184]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004152:	4a2d      	ldr	r2, [pc, #180]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800415c:	e04d      	b.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004164:	d141      	bne.n	80041ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004166:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004172:	d131      	bne.n	80041d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004174:	4b24      	ldr	r3, [pc, #144]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800417a:	4a23      	ldr	r2, [pc, #140]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004184:	4b20      	ldr	r3, [pc, #128]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800418c:	4a1e      	ldr	r2, [pc, #120]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004192:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004194:	4b1d      	ldr	r3, [pc, #116]	@ (800420c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2232      	movs	r2, #50	@ 0x32
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	4a1c      	ldr	r2, [pc, #112]	@ (8004210 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	0c9b      	lsrs	r3, r3, #18
 80041a6:	3301      	adds	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041aa:	e002      	b.n	80041b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041b2:	4b15      	ldr	r3, [pc, #84]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041be:	d102      	bne.n	80041c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f2      	bne.n	80041ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041c6:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d2:	d112      	bne.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e011      	b.n	80041fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041de:	4a0a      	ldr	r2, [pc, #40]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80041e8:	e007      	b.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041ea:	4b07      	ldr	r3, [pc, #28]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041f2:	4a05      	ldr	r2, [pc, #20]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40007000 	.word	0x40007000
 800420c:	20000000 	.word	0x20000000
 8004210:	431bde83 	.word	0x431bde83

08004214 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004218:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a04      	ldr	r2, [pc, #16]	@ (8004230 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800421e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004222:	6093      	str	r3, [r2, #8]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e2fe      	b.n	8004844 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d075      	beq.n	800433e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004252:	4b97      	ldr	r3, [pc, #604]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800425c:	4b94      	ldr	r3, [pc, #592]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d102      	bne.n	8004272 <HAL_RCC_OscConfig+0x3e>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d002      	beq.n	8004278 <HAL_RCC_OscConfig+0x44>
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d10b      	bne.n	8004290 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	4b8d      	ldr	r3, [pc, #564]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d05b      	beq.n	800433c <HAL_RCC_OscConfig+0x108>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d157      	bne.n	800433c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e2d9      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004298:	d106      	bne.n	80042a8 <HAL_RCC_OscConfig+0x74>
 800429a:	4b85      	ldr	r3, [pc, #532]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a84      	ldr	r2, [pc, #528]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e01d      	b.n	80042e4 <HAL_RCC_OscConfig+0xb0>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x98>
 80042b2:	4b7f      	ldr	r3, [pc, #508]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a7e      	ldr	r2, [pc, #504]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b7c      	ldr	r3, [pc, #496]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7b      	ldr	r2, [pc, #492]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0xb0>
 80042cc:	4b78      	ldr	r3, [pc, #480]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a77      	ldr	r2, [pc, #476]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	4b75      	ldr	r3, [pc, #468]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a74      	ldr	r2, [pc, #464]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80042de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fba6 	bl	8001a3c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd fba2 	bl	8001a3c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	@ 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e29e      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004306:	4b6a      	ldr	r3, [pc, #424]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0xc0>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fb92 	bl	8001a3c <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd fb8e 	bl	8001a3c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	@ 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e28a      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800432e:	4b60      	ldr	r3, [pc, #384]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0xe8>
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d075      	beq.n	8004436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800434a:	4b59      	ldr	r3, [pc, #356]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004354:	4b56      	ldr	r3, [pc, #344]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b0c      	cmp	r3, #12
 8004362:	d102      	bne.n	800436a <HAL_RCC_OscConfig+0x136>
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d002      	beq.n	8004370 <HAL_RCC_OscConfig+0x13c>
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d11f      	bne.n	80043b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004370:	4b4f      	ldr	r3, [pc, #316]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCC_OscConfig+0x154>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e25d      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004388:	4b49      	ldr	r3, [pc, #292]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	4946      	ldr	r1, [pc, #280]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800439c:	4b45      	ldr	r3, [pc, #276]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fd faff 	bl	80019a4 <HAL_InitTick>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d043      	beq.n	8004434 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e249      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d023      	beq.n	8004400 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b8:	4b3d      	ldr	r3, [pc, #244]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a3c      	ldr	r2, [pc, #240]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fb3a 	bl	8001a3c <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043cc:	f7fd fb36 	bl	8001a3c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e232      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043de:	4b34      	ldr	r3, [pc, #208]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	4b31      	ldr	r3, [pc, #196]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	061b      	lsls	r3, r3, #24
 80043f8:	492d      	ldr	r1, [pc, #180]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
 80043fe:	e01a      	b.n	8004436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004400:	4b2b      	ldr	r3, [pc, #172]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2a      	ldr	r2, [pc, #168]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004406:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800440a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd fb16 	bl	8001a3c <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004414:	f7fd fb12 	bl	8001a3c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e20e      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004426:	4b22      	ldr	r3, [pc, #136]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x1e0>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d041      	beq.n	80044c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01c      	beq.n	8004484 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444a:	4b19      	ldr	r3, [pc, #100]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800444c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004450:	4a17      	ldr	r2, [pc, #92]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445a:	f7fd faef 	bl	8001a3c <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004462:	f7fd faeb 	bl	8001a3c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e1e7      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004474:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0ef      	beq.n	8004462 <HAL_RCC_OscConfig+0x22e>
 8004482:	e020      	b.n	80044c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004484:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 8004486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800448a:	4a09      	ldr	r2, [pc, #36]	@ (80044b0 <HAL_RCC_OscConfig+0x27c>)
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd fad2 	bl	8001a3c <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800449a:	e00d      	b.n	80044b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800449c:	f7fd face 	bl	8001a3c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d906      	bls.n	80044b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e1ca      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
 80044b4:	20000058 	.word	0x20000058
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044b8:	4b8c      	ldr	r3, [pc, #560]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1ea      	bne.n	800449c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80a6 	beq.w	8004620 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d4:	2300      	movs	r3, #0
 80044d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044d8:	4b84      	ldr	r3, [pc, #528]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_OscConfig+0x2b4>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x2b6>
 80044e8:	2300      	movs	r3, #0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ee:	4b7f      	ldr	r3, [pc, #508]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f2:	4a7e      	ldr	r2, [pc, #504]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80044fa:	4b7c      	ldr	r3, [pc, #496]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800450a:	4b79      	ldr	r3, [pc, #484]	@ (80046f0 <HAL_RCC_OscConfig+0x4bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d118      	bne.n	8004548 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004516:	4b76      	ldr	r3, [pc, #472]	@ (80046f0 <HAL_RCC_OscConfig+0x4bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a75      	ldr	r2, [pc, #468]	@ (80046f0 <HAL_RCC_OscConfig+0x4bc>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fd fa8b 	bl	8001a3c <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452a:	f7fd fa87 	bl	8001a3c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e183      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800453c:	4b6c      	ldr	r3, [pc, #432]	@ (80046f0 <HAL_RCC_OscConfig+0x4bc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d108      	bne.n	8004562 <HAL_RCC_OscConfig+0x32e>
 8004550:	4b66      	ldr	r3, [pc, #408]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004556:	4a65      	ldr	r2, [pc, #404]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004560:	e024      	b.n	80045ac <HAL_RCC_OscConfig+0x378>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b05      	cmp	r3, #5
 8004568:	d110      	bne.n	800458c <HAL_RCC_OscConfig+0x358>
 800456a:	4b60      	ldr	r3, [pc, #384]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004570:	4a5e      	ldr	r2, [pc, #376]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800457a:	4b5c      	ldr	r3, [pc, #368]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004580:	4a5a      	ldr	r2, [pc, #360]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800458a:	e00f      	b.n	80045ac <HAL_RCC_OscConfig+0x378>
 800458c:	4b57      	ldr	r3, [pc, #348]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004592:	4a56      	ldr	r2, [pc, #344]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800459c:	4b53      	ldr	r3, [pc, #332]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a2:	4a52      	ldr	r2, [pc, #328]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d016      	beq.n	80045e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fd fa42 	bl	8001a3c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fd fa3e 	bl	8001a3c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e138      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d2:	4b46      	ldr	r3, [pc, #280]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ed      	beq.n	80045bc <HAL_RCC_OscConfig+0x388>
 80045e0:	e015      	b.n	800460e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e2:	f7fd fa2b 	bl	8001a3c <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fd fa27 	bl	8001a3c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e121      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004600:	4b3a      	ldr	r3, [pc, #232]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1ed      	bne.n	80045ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800460e:	7ffb      	ldrb	r3, [r7, #31]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b35      	ldr	r3, [pc, #212]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004618:	4a34      	ldr	r2, [pc, #208]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800461e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d03c      	beq.n	80046a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01c      	beq.n	800466e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004634:	4b2d      	ldr	r3, [pc, #180]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800463a:	4a2c      	ldr	r2, [pc, #176]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fd f9fa 	bl	8001a3c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800464c:	f7fd f9f6 	bl	8001a3c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0f2      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800465e:	4b23      	ldr	r3, [pc, #140]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004660:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ef      	beq.n	800464c <HAL_RCC_OscConfig+0x418>
 800466c:	e01b      	b.n	80046a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800466e:	4b1f      	ldr	r3, [pc, #124]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004670:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004674:	4a1d      	ldr	r2, [pc, #116]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fd f9dd 	bl	8001a3c <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004686:	f7fd f9d9 	bl	8001a3c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0d5      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004698:	4b14      	ldr	r3, [pc, #80]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 800469a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ef      	bne.n	8004686 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80c9 	beq.w	8004842 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b0:	4b0e      	ldr	r3, [pc, #56]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 030c 	and.w	r3, r3, #12
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	f000 8083 	beq.w	80047c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d15e      	bne.n	8004784 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a08      	ldr	r2, [pc, #32]	@ (80046ec <HAL_RCC_OscConfig+0x4b8>)
 80046cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fd f9b3 	bl	8001a3c <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d8:	e00c      	b.n	80046f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046da:	f7fd f9af 	bl	8001a3c <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d905      	bls.n	80046f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e0ab      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f4:	4b55      	ldr	r3, [pc, #340]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ec      	bne.n	80046da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004700:	4b52      	ldr	r3, [pc, #328]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	4b52      	ldr	r3, [pc, #328]	@ (8004850 <HAL_RCC_OscConfig+0x61c>)
 8004706:	4013      	ands	r3, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6a11      	ldr	r1, [r2, #32]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004710:	3a01      	subs	r2, #1
 8004712:	0112      	lsls	r2, r2, #4
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800471a:	0212      	lsls	r2, r2, #8
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004722:	0852      	lsrs	r2, r2, #1
 8004724:	3a01      	subs	r2, #1
 8004726:	0552      	lsls	r2, r2, #21
 8004728:	4311      	orrs	r1, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800472e:	0852      	lsrs	r2, r2, #1
 8004730:	3a01      	subs	r2, #1
 8004732:	0652      	lsls	r2, r2, #25
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800473a:	06d2      	lsls	r2, r2, #27
 800473c:	430a      	orrs	r2, r1
 800473e:	4943      	ldr	r1, [pc, #268]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 8004740:	4313      	orrs	r3, r2
 8004742:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a40      	ldr	r2, [pc, #256]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800474e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004750:	4b3e      	ldr	r3, [pc, #248]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a3d      	ldr	r2, [pc, #244]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 8004756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800475a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fd f96e 	bl	8001a3c <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fd f96a 	bl	8001a3c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e066      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004776:	4b35      	ldr	r3, [pc, #212]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x530>
 8004782:	e05e      	b.n	8004842 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004784:	4b31      	ldr	r3, [pc, #196]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a30      	ldr	r2, [pc, #192]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 800478a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800478e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fd f954 	bl	8001a3c <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004798:	f7fd f950 	bl	8001a3c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e04c      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047aa:	4b28      	ldr	r3, [pc, #160]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047b6:	4b25      	ldr	r3, [pc, #148]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	4924      	ldr	r1, [pc, #144]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 80047bc:	4b25      	ldr	r3, [pc, #148]	@ (8004854 <HAL_RCC_OscConfig+0x620>)
 80047be:	4013      	ands	r3, r2
 80047c0:	60cb      	str	r3, [r1, #12]
 80047c2:	e03e      	b.n	8004842 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e039      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047d0:	4b1e      	ldr	r3, [pc, #120]	@ (800484c <HAL_RCC_OscConfig+0x618>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f003 0203 	and.w	r2, r3, #3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d12c      	bne.n	800483e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	3b01      	subs	r3, #1
 80047f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d123      	bne.n	800483e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d11b      	bne.n	800483e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d113      	bne.n	800483e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	3b01      	subs	r3, #1
 8004824:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d109      	bne.n	800483e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	3b01      	subs	r3, #1
 8004838:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40021000 	.word	0x40021000
 8004850:	019f800c 	.word	0x019f800c
 8004854:	feeefffc 	.word	0xfeeefffc

08004858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e11e      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004870:	4b91      	ldr	r3, [pc, #580]	@ (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d910      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b8e      	ldr	r3, [pc, #568]	@ (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 020f 	bic.w	r2, r3, #15
 8004886:	498c      	ldr	r1, [pc, #560]	@ (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b8a      	ldr	r3, [pc, #552]	@ (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e106      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d073      	beq.n	8004994 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d129      	bne.n	8004908 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b4:	4b81      	ldr	r3, [pc, #516]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0f4      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048c4:	f000 f99e 	bl	8004c04 <RCC_GetSysClockFreqFromPLLSource>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4a7c      	ldr	r2, [pc, #496]	@ (8004ac0 <HAL_RCC_ClockConfig+0x268>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d93f      	bls.n	8004952 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048d2:	4b7a      	ldr	r3, [pc, #488]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d033      	beq.n	8004952 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d12f      	bne.n	8004952 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048f2:	4b72      	ldr	r3, [pc, #456]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048fa:	4a70      	ldr	r2, [pc, #448]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80048fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004900:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004902:	2380      	movs	r3, #128	@ 0x80
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e024      	b.n	8004952 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d107      	bne.n	8004920 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004910:	4b6a      	ldr	r3, [pc, #424]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0c6      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004920:	4b66      	ldr	r3, [pc, #408]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0be      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004930:	f000 f8ce 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 8004934:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4a61      	ldr	r2, [pc, #388]	@ (8004ac0 <HAL_RCC_ClockConfig+0x268>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d909      	bls.n	8004952 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800493e:	4b5f      	ldr	r3, [pc, #380]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004946:	4a5d      	ldr	r2, [pc, #372]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800494e:	2380      	movs	r3, #128	@ 0x80
 8004950:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004952:	4b5a      	ldr	r3, [pc, #360]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4957      	ldr	r1, [pc, #348]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fd f86a 	bl	8001a3c <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	e00a      	b.n	8004982 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fd f866 	bl	8001a3c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e095      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b4e      	ldr	r3, [pc, #312]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 020c 	and.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d1eb      	bne.n	800496c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d023      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ac:	4b43      	ldr	r3, [pc, #268]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a42      	ldr	r2, [pc, #264]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049c4:	4b3d      	ldr	r3, [pc, #244]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80049cc:	4a3b      	ldr	r2, [pc, #236]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	4b39      	ldr	r3, [pc, #228]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4936      	ldr	r1, [pc, #216]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
 80049e6:	e008      	b.n	80049fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b80      	cmp	r3, #128	@ 0x80
 80049ec:	d105      	bne.n	80049fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049ee:	4b33      	ldr	r3, [pc, #204]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4a32      	ldr	r2, [pc, #200]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049fa:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d21d      	bcs.n	8004a44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a08:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f023 020f 	bic.w	r2, r3, #15
 8004a10:	4929      	ldr	r1, [pc, #164]	@ (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a18:	f7fd f810 	bl	8001a3c <HAL_GetTick>
 8004a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a20:	f7fd f80c 	bl	8001a3c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e03b      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b20      	ldr	r3, [pc, #128]	@ (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d1ed      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a50:	4b1a      	ldr	r3, [pc, #104]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4917      	ldr	r1, [pc, #92]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a6e:	4b13      	ldr	r3, [pc, #76]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	490f      	ldr	r1, [pc, #60]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a82:	f000 f825 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 8004a86:	4602      	mov	r2, r0
 8004a88:	4b0c      	ldr	r3, [pc, #48]	@ (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	490c      	ldr	r1, [pc, #48]	@ (8004ac4 <HAL_RCC_ClockConfig+0x26c>)
 8004a94:	5ccb      	ldrb	r3, [r1, r3]
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac8 <HAL_RCC_ClockConfig+0x270>)
 8004aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004acc <HAL_RCC_ClockConfig+0x274>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fc ff7c 	bl	80019a4 <HAL_InitTick>
 8004aac:	4603      	mov	r3, r0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40022000 	.word	0x40022000
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	04c4b400 	.word	0x04c4b400
 8004ac4:	0800c8e8 	.word	0x0800c8e8
 8004ac8:	20000000 	.word	0x20000000
 8004acc:	20000058 	.word	0x20000058

08004ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d102      	bne.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	e047      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ae8:	4b27      	ldr	r3, [pc, #156]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d102      	bne.n	8004afa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004af4:	4b26      	ldr	r3, [pc, #152]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	e03e      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004afa:	4b23      	ldr	r3, [pc, #140]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b0c      	cmp	r3, #12
 8004b04:	d136      	bne.n	8004b74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b06:	4b20      	ldr	r3, [pc, #128]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b10:	4b1d      	ldr	r3, [pc, #116]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d10c      	bne.n	8004b3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b24:	4a1a      	ldr	r2, [pc, #104]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	4a16      	ldr	r2, [pc, #88]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b2e:	68d2      	ldr	r2, [r2, #12]
 8004b30:	0a12      	lsrs	r2, r2, #8
 8004b32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	617b      	str	r3, [r7, #20]
      break;
 8004b3c:	e00c      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b3e:	4a13      	ldr	r2, [pc, #76]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b46:	4a10      	ldr	r2, [pc, #64]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b48:	68d2      	ldr	r2, [r2, #12]
 8004b4a:	0a12      	lsrs	r2, r2, #8
 8004b4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b50:	fb02 f303 	mul.w	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]
      break;
 8004b56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b58:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	0e5b      	lsrs	r3, r3, #25
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	3301      	adds	r3, #1
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e001      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b78:	693b      	ldr	r3, [r7, #16]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	00f42400 	.word	0x00f42400
 8004b90:	016e3600 	.word	0x016e3600

08004b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b98:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000000 	.word	0x20000000

08004bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bb0:	f7ff fff0 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4904      	ldr	r1, [pc, #16]	@ (8004bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	0800c8f8 	.word	0x0800c8f8

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bdc:	f7ff ffda 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b06      	ldr	r3, [pc, #24]	@ (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	0adb      	lsrs	r3, r3, #11
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4904      	ldr	r1, [pc, #16]	@ (8004c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	0800c8f8 	.word	0x0800c8f8

08004c04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c14:	4b1b      	ldr	r3, [pc, #108]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d10c      	bne.n	8004c42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c28:	4a17      	ldr	r2, [pc, #92]	@ (8004c88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	4a14      	ldr	r2, [pc, #80]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c32:	68d2      	ldr	r2, [r2, #12]
 8004c34:	0a12      	lsrs	r2, r2, #8
 8004c36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	617b      	str	r3, [r7, #20]
    break;
 8004c40:	e00c      	b.n	8004c5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c42:	4a12      	ldr	r2, [pc, #72]	@ (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c4c:	68d2      	ldr	r2, [r2, #12]
 8004c4e:	0a12      	lsrs	r2, r2, #8
 8004c50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]
    break;
 8004c5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c5c:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	0e5b      	lsrs	r3, r3, #25
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	3301      	adds	r3, #1
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c76:	687b      	ldr	r3, [r7, #4]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40021000 	.word	0x40021000
 8004c88:	016e3600 	.word	0x016e3600
 8004c8c:	00f42400 	.word	0x00f42400

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c98:	2300      	movs	r3, #0
 8004c9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8098 	beq.w	8004dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb2:	4b43      	ldr	r3, [pc, #268]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	4b40      	ldr	r3, [pc, #256]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc2:	4a3f      	ldr	r2, [pc, #252]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cca:	4b3d      	ldr	r3, [pc, #244]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cda:	4b3a      	ldr	r3, [pc, #232]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a39      	ldr	r2, [pc, #228]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ce6:	f7fc fea9 	bl	8001a3c <HAL_GetTick>
 8004cea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cec:	e009      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fc fea5 	bl	8001a3c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d902      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	74fb      	strb	r3, [r7, #19]
        break;
 8004d00:	e005      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d02:	4b30      	ldr	r3, [pc, #192]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0ef      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d0e:	7cfb      	ldrb	r3, [r7, #19]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d159      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d14:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01e      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d019      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d30:	4b23      	ldr	r3, [pc, #140]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d3c:	4b20      	ldr	r3, [pc, #128]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d52:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d5c:	4a18      	ldr	r2, [pc, #96]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d016      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fc fe65 	bl	8001a3c <HAL_GetTick>
 8004d72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d74:	e00b      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d76:	f7fc fe61 	bl	8001a3c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d902      	bls.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	74fb      	strb	r3, [r7, #19]
            break;
 8004d8c:	e006      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ec      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da2:	4b07      	ldr	r3, [pc, #28]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	4903      	ldr	r1, [pc, #12]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004db8:	e008      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dba:	7cfb      	ldrb	r3, [r7, #19]
 8004dbc:	74bb      	strb	r3, [r7, #18]
 8004dbe:	e005      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dcc:	7c7b      	ldrb	r3, [r7, #17]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d105      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd2:	4ba6      	ldr	r3, [pc, #664]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd6:	4aa5      	ldr	r2, [pc, #660]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dea:	4ba0      	ldr	r3, [pc, #640]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df0:	f023 0203 	bic.w	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	499c      	ldr	r1, [pc, #624]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e0c:	4b97      	ldr	r3, [pc, #604]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e12:	f023 020c 	bic.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4994      	ldr	r1, [pc, #592]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	498b      	ldr	r1, [pc, #556]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e50:	4b86      	ldr	r3, [pc, #536]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	4983      	ldr	r1, [pc, #524]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e72:	4b7e      	ldr	r3, [pc, #504]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e78:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	497a      	ldr	r1, [pc, #488]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e94:	4b75      	ldr	r3, [pc, #468]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	4972      	ldr	r1, [pc, #456]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	4969      	ldr	r1, [pc, #420]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ed8:	4b64      	ldr	r3, [pc, #400]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ede:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	4961      	ldr	r1, [pc, #388]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004efa:	4b5c      	ldr	r3, [pc, #368]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	4958      	ldr	r1, [pc, #352]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f1c:	4b53      	ldr	r3, [pc, #332]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2a:	4950      	ldr	r1, [pc, #320]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b4b      	ldr	r3, [pc, #300]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a4a      	ldr	r2, [pc, #296]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f54:	4b45      	ldr	r3, [pc, #276]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	4942      	ldr	r1, [pc, #264]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f72:	d105      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b3d      	ldr	r3, [pc, #244]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a3c      	ldr	r2, [pc, #240]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f8c:	4b37      	ldr	r3, [pc, #220]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9a:	4934      	ldr	r1, [pc, #208]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b2f      	ldr	r3, [pc, #188]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fc4:	4b29      	ldr	r3, [pc, #164]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd2:	4926      	ldr	r1, [pc, #152]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe4:	4b21      	ldr	r3, [pc, #132]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a20      	ldr	r2, [pc, #128]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500a:	4918      	ldr	r1, [pc, #96]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501c:	4b13      	ldr	r3, [pc, #76]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a12      	ldr	r2, [pc, #72]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005026:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005034:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005042:	490a      	ldr	r1, [pc, #40]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005052:	d105      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a04      	ldr	r2, [pc, #16]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800505e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005060:	7cbb      	ldrb	r3, [r7, #18]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000

08005070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e049      	b.n	8005116 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fb ff5e 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f000 fb12 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	d001      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e04a      	b.n	80051ce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a21      	ldr	r2, [pc, #132]	@ (80051dc <HAL_TIM_Base_Start_IT+0xbc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005162:	d013      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1d      	ldr	r2, [pc, #116]	@ (80051e0 <HAL_TIM_Base_Start_IT+0xc0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1c      	ldr	r2, [pc, #112]	@ (80051e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1a      	ldr	r2, [pc, #104]	@ (80051e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d115      	bne.n	80051b8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	4b17      	ldr	r3, [pc, #92]	@ (80051f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005194:	4013      	ands	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b06      	cmp	r3, #6
 800519c:	d015      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0xaa>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a4:	d011      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	e008      	b.n	80051ca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e000      	b.n	80051cc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40013400 	.word	0x40013400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	00010007 	.word	0x00010007

080051f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d020      	beq.n	8005258 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01b      	beq.n	8005258 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0202 	mvn.w	r2, #2
 8005228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fa2c 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 8005244:	e005      	b.n	8005252 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa1e 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fa2f 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d020      	beq.n	80052a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01b      	beq.n	80052a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0204 	mvn.w	r2, #4
 8005274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa06 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 8005290:	e005      	b.n	800529e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f9f8 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fa09 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d020      	beq.n	80052f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01b      	beq.n	80052f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0208 	mvn.w	r2, #8
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2204      	movs	r2, #4
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f9e0 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f9d2 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f9e3 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d020      	beq.n	800533c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01b      	beq.n	800533c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0210 	mvn.w	r2, #16
 800530c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2208      	movs	r2, #8
 8005312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f9ba 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9ac 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f9bd 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0201 	mvn.w	r2, #1
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fb fc3c 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005366:	2b00      	cmp	r3, #0
 8005368:	d104      	bne.n	8005374 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00c      	beq.n	800538e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fb69 	bl	8005a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fb61 	bl	8005a74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00c      	beq.n	80053d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f977 	bl	80056c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00c      	beq.n	80053fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f06f 0220 	mvn.w	r2, #32
 80053f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fb29 	bl	8005a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00c      	beq.n	800541e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fb35 	bl	8005a88 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00c      	beq.n	8005442 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800543a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fb2d 	bl	8005a9c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00c      	beq.n	8005466 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800545e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fb25 	bl	8005ab0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00c      	beq.n	800548a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fb1d 	bl	8005ac4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800548a:	bf00      	nop
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIM_ConfigClockSource+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e0de      	b.n	800566e <HAL_TIM_ConfigClockSource+0x1da>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80054ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a63      	ldr	r2, [pc, #396]	@ (8005678 <HAL_TIM_ConfigClockSource+0x1e4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	f000 80a9 	beq.w	8005642 <HAL_TIM_ConfigClockSource+0x1ae>
 80054f0:	4a61      	ldr	r2, [pc, #388]	@ (8005678 <HAL_TIM_ConfigClockSource+0x1e4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	f200 80ae 	bhi.w	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 80054f8:	4a60      	ldr	r2, [pc, #384]	@ (800567c <HAL_TIM_ConfigClockSource+0x1e8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	f000 80a1 	beq.w	8005642 <HAL_TIM_ConfigClockSource+0x1ae>
 8005500:	4a5e      	ldr	r2, [pc, #376]	@ (800567c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	f200 80a6 	bhi.w	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 8005508:	4a5d      	ldr	r2, [pc, #372]	@ (8005680 <HAL_TIM_ConfigClockSource+0x1ec>)
 800550a:	4293      	cmp	r3, r2
 800550c:	f000 8099 	beq.w	8005642 <HAL_TIM_ConfigClockSource+0x1ae>
 8005510:	4a5b      	ldr	r2, [pc, #364]	@ (8005680 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005512:	4293      	cmp	r3, r2
 8005514:	f200 809e 	bhi.w	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 8005518:	4a5a      	ldr	r2, [pc, #360]	@ (8005684 <HAL_TIM_ConfigClockSource+0x1f0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	f000 8091 	beq.w	8005642 <HAL_TIM_ConfigClockSource+0x1ae>
 8005520:	4a58      	ldr	r2, [pc, #352]	@ (8005684 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	f200 8096 	bhi.w	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 8005528:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800552c:	f000 8089 	beq.w	8005642 <HAL_TIM_ConfigClockSource+0x1ae>
 8005530:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005534:	f200 808e 	bhi.w	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 8005538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800553c:	d03e      	beq.n	80055bc <HAL_TIM_ConfigClockSource+0x128>
 800553e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005542:	f200 8087 	bhi.w	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 8005546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800554a:	f000 8086 	beq.w	800565a <HAL_TIM_ConfigClockSource+0x1c6>
 800554e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005552:	d87f      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 8005554:	2b70      	cmp	r3, #112	@ 0x70
 8005556:	d01a      	beq.n	800558e <HAL_TIM_ConfigClockSource+0xfa>
 8005558:	2b70      	cmp	r3, #112	@ 0x70
 800555a:	d87b      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 800555c:	2b60      	cmp	r3, #96	@ 0x60
 800555e:	d050      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x16e>
 8005560:	2b60      	cmp	r3, #96	@ 0x60
 8005562:	d877      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 8005564:	2b50      	cmp	r3, #80	@ 0x50
 8005566:	d03c      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x14e>
 8005568:	2b50      	cmp	r3, #80	@ 0x50
 800556a:	d873      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 800556c:	2b40      	cmp	r3, #64	@ 0x40
 800556e:	d058      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x18e>
 8005570:	2b40      	cmp	r3, #64	@ 0x40
 8005572:	d86f      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 8005574:	2b30      	cmp	r3, #48	@ 0x30
 8005576:	d064      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x1ae>
 8005578:	2b30      	cmp	r3, #48	@ 0x30
 800557a:	d86b      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 800557c:	2b20      	cmp	r3, #32
 800557e:	d060      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x1ae>
 8005580:	2b20      	cmp	r3, #32
 8005582:	d867      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d05c      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x1ae>
 8005588:	2b10      	cmp	r3, #16
 800558a:	d05a      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x1ae>
 800558c:	e062      	b.n	8005654 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800559e:	f000 f9b3 	bl	8005908 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	609a      	str	r2, [r3, #8]
      break;
 80055ba:	e04f      	b.n	800565c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055cc:	f000 f99c 	bl	8005908 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055de:	609a      	str	r2, [r3, #8]
      break;
 80055e0:	e03c      	b.n	800565c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	461a      	mov	r2, r3
 80055f0:	f000 f90e 	bl	8005810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2150      	movs	r1, #80	@ 0x50
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f967 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 8005600:	e02c      	b.n	800565c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800560e:	461a      	mov	r2, r3
 8005610:	f000 f92d 	bl	800586e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2160      	movs	r1, #96	@ 0x60
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f957 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 8005620:	e01c      	b.n	800565c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800562e:	461a      	mov	r2, r3
 8005630:	f000 f8ee 	bl	8005810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2140      	movs	r1, #64	@ 0x40
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f947 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 8005640:	e00c      	b.n	800565c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4619      	mov	r1, r3
 800564c:	4610      	mov	r0, r2
 800564e:	f000 f93e 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 8005652:	e003      	b.n	800565c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	73fb      	strb	r3, [r7, #15]
      break;
 8005658:	e000      	b.n	800565c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800565a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	00100070 	.word	0x00100070
 800567c:	00100040 	.word	0x00100040
 8005680:	00100030 	.word	0x00100030
 8005684:	00100020 	.word	0x00100020

08005688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a42      	ldr	r2, [pc, #264]	@ (80057f4 <TIM_Base_SetConfig+0x11c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00f      	beq.n	8005710 <TIM_Base_SetConfig+0x38>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f6:	d00b      	beq.n	8005710 <TIM_Base_SetConfig+0x38>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3f      	ldr	r2, [pc, #252]	@ (80057f8 <TIM_Base_SetConfig+0x120>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_Base_SetConfig+0x38>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a3e      	ldr	r2, [pc, #248]	@ (80057fc <TIM_Base_SetConfig+0x124>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0x38>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3d      	ldr	r2, [pc, #244]	@ (8005800 <TIM_Base_SetConfig+0x128>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d108      	bne.n	8005722 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a33      	ldr	r2, [pc, #204]	@ (80057f4 <TIM_Base_SetConfig+0x11c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01b      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005730:	d017      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a30      	ldr	r2, [pc, #192]	@ (80057f8 <TIM_Base_SetConfig+0x120>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2f      	ldr	r2, [pc, #188]	@ (80057fc <TIM_Base_SetConfig+0x124>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00f      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2e      	ldr	r2, [pc, #184]	@ (8005800 <TIM_Base_SetConfig+0x128>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00b      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a2d      	ldr	r2, [pc, #180]	@ (8005804 <TIM_Base_SetConfig+0x12c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d007      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2c      	ldr	r2, [pc, #176]	@ (8005808 <TIM_Base_SetConfig+0x130>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a2b      	ldr	r2, [pc, #172]	@ (800580c <TIM_Base_SetConfig+0x134>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d108      	bne.n	8005774 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a16      	ldr	r2, [pc, #88]	@ (80057f4 <TIM_Base_SetConfig+0x11c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00f      	beq.n	80057c0 <TIM_Base_SetConfig+0xe8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a17      	ldr	r2, [pc, #92]	@ (8005800 <TIM_Base_SetConfig+0x128>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_Base_SetConfig+0xe8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a16      	ldr	r2, [pc, #88]	@ (8005804 <TIM_Base_SetConfig+0x12c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_Base_SetConfig+0xe8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a15      	ldr	r2, [pc, #84]	@ (8005808 <TIM_Base_SetConfig+0x130>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0xe8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a14      	ldr	r2, [pc, #80]	@ (800580c <TIM_Base_SetConfig+0x134>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d103      	bne.n	80057c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d105      	bne.n	80057e6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f023 0201 	bic.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	611a      	str	r2, [r3, #16]
  }
}
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40013400 	.word	0x40013400
 8005804:	40014000 	.word	0x40014000
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800

08005810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0201 	bic.w	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800583a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 030a 	bic.w	r3, r3, #10
 800584c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586e:	b480      	push	{r7}
 8005870:	b087      	sub	sp, #28
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	f023 0210 	bic.w	r2, r3, #16
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005898:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	031b      	lsls	r3, r3, #12
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80058e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f043 0307 	orr.w	r3, r3, #7
 80058f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	021a      	lsls	r2, r3, #8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	431a      	orrs	r2, r3
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4313      	orrs	r3, r2
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	609a      	str	r2, [r3, #8]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800595c:	2302      	movs	r3, #2
 800595e:	e065      	b.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a2c      	ldr	r2, [pc, #176]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d108      	bne.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800599a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80059ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d018      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d6:	d013      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a18      	ldr	r2, [pc, #96]	@ (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00e      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a17      	ldr	r2, [pc, #92]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a12      	ldr	r2, [pc, #72]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a13      	ldr	r2, [pc, #76]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d10c      	bne.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40013400 	.word	0x40013400
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40014000 	.word	0x40014000

08005a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e042      	b.n	8005b70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7fb fa9f 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2224      	movs	r2, #36	@ 0x24
 8005b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fee8 	bl	80068f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fc19 	bl	8006360 <UART_SetConfig>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e01b      	b.n	8005b70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 ff67 	bl	8006a3c <UART_CheckIdleState>
 8005b6e:	4603      	mov	r3, r0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b091      	sub	sp, #68	@ 0x44
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	4613      	mov	r3, r2
 8005b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d178      	bne.n	8005c82 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_UART_Transmit_IT+0x24>
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e071      	b.n	8005c84 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	88fa      	ldrh	r2, [r7, #6]
 8005bb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2221      	movs	r2, #33	@ 0x21
 8005bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bd4:	d12a      	bne.n	8005c2c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bde:	d107      	bne.n	8005bf0 <HAL_UART_Transmit_IT+0x78>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4a29      	ldr	r2, [pc, #164]	@ (8005c90 <HAL_UART_Transmit_IT+0x118>)
 8005bec:	679a      	str	r2, [r3, #120]	@ 0x78
 8005bee:	e002      	b.n	8005bf6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4a28      	ldr	r2, [pc, #160]	@ (8005c94 <HAL_UART_Transmit_IT+0x11c>)
 8005bf4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c16:	637a      	str	r2, [r7, #52]	@ 0x34
 8005c18:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <HAL_UART_Transmit_IT+0x7e>
 8005c2a:	e028      	b.n	8005c7e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c34:	d107      	bne.n	8005c46 <HAL_UART_Transmit_IT+0xce>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a15      	ldr	r2, [pc, #84]	@ (8005c98 <HAL_UART_Transmit_IT+0x120>)
 8005c42:	679a      	str	r2, [r3, #120]	@ 0x78
 8005c44:	e002      	b.n	8005c4c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a14      	ldr	r2, [pc, #80]	@ (8005c9c <HAL_UART_Transmit_IT+0x124>)
 8005c4a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6a:	623b      	str	r3, [r7, #32]
 8005c6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	69f9      	ldr	r1, [r7, #28]
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e6      	bne.n	8005c4c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e000      	b.n	8005c84 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005c82:	2302      	movs	r3, #2
  }
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3744      	adds	r7, #68	@ 0x44
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	0800736f 	.word	0x0800736f
 8005c94:	0800728f 	.word	0x0800728f
 8005c98:	080071cd 	.word	0x080071cd
 8005c9c:	08007115 	.word	0x08007115

08005ca0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b0ba      	sub	sp, #232	@ 0xe8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005cca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005cce:	4013      	ands	r3, r2
 8005cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d11b      	bne.n	8005d14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d015      	beq.n	8005d14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d105      	bne.n	8005d00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d009      	beq.n	8005d14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8300 	beq.w	800630a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
      }
      return;
 8005d12:	e2fa      	b.n	800630a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8123 	beq.w	8005f64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005d22:	4b8d      	ldr	r3, [pc, #564]	@ (8005f58 <HAL_UART_IRQHandler+0x2b8>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005d2e:	4b8b      	ldr	r3, [pc, #556]	@ (8005f5c <HAL_UART_IRQHandler+0x2bc>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8116 	beq.w	8005f64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d011      	beq.n	8005d68 <HAL_UART_IRQHandler+0xc8>
 8005d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2201      	movs	r2, #1
 8005d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d011      	beq.n	8005d98 <HAL_UART_IRQHandler+0xf8>
 8005d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2202      	movs	r2, #2
 8005d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8e:	f043 0204 	orr.w	r2, r3, #4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d011      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x128>
 8005da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00b      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2204      	movs	r2, #4
 8005db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dbe:	f043 0202 	orr.w	r2, r3, #2
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d017      	beq.n	8005e04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005de0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005de4:	4b5c      	ldr	r3, [pc, #368]	@ (8005f58 <HAL_UART_IRQHandler+0x2b8>)
 8005de6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2208      	movs	r2, #8
 8005df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfa:	f043 0208 	orr.w	r2, r3, #8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d012      	beq.n	8005e36 <HAL_UART_IRQHandler+0x196>
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00c      	beq.n	8005e36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8266 	beq.w	800630e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d013      	beq.n	8005e76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d105      	bne.n	8005e66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8a:	2b40      	cmp	r3, #64	@ 0x40
 8005e8c:	d005      	beq.n	8005e9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d054      	beq.n	8005f44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 ffcd 	bl	8006e3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eaa:	2b40      	cmp	r3, #64	@ 0x40
 8005eac:	d146      	bne.n	8005f3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005eda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ede:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ee6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1d9      	bne.n	8005eae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d017      	beq.n	8005f34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f0a:	4a15      	ldr	r2, [pc, #84]	@ (8005f60 <HAL_UART_IRQHandler+0x2c0>)
 8005f0c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fc f84b 	bl	8001fb0 <HAL_DMA_Abort_IT>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d019      	beq.n	8005f54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005f2e:	4610      	mov	r0, r2
 8005f30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f32:	e00f      	b.n	8005f54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fa09 	bl	800634c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3a:	e00b      	b.n	8005f54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fa05 	bl	800634c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f42:	e007      	b.n	8005f54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa01 	bl	800634c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005f52:	e1dc      	b.n	800630e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	bf00      	nop
    return;
 8005f56:	e1da      	b.n	800630e <HAL_UART_IRQHandler+0x66e>
 8005f58:	10000001 	.word	0x10000001
 8005f5c:	04000120 	.word	0x04000120
 8005f60:	080070f1 	.word	0x080070f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	f040 8170 	bne.w	800624e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8169 	beq.w	800624e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8162 	beq.w	800624e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2210      	movs	r2, #16
 8005f90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9c:	2b40      	cmp	r3, #64	@ 0x40
 8005f9e:	f040 80d8 	bne.w	8006152 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80af 	beq.w	8006118 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	f080 80a7 	bcs.w	8006118 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 8087 	bne.w	80060f6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006012:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006016:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800601e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800602a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1da      	bne.n	8005fe8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006042:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006056:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800605a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800605e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006068:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e1      	bne.n	8006032 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3308      	adds	r3, #8
 8006074:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800607e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006092:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006094:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006098:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e3      	bne.n	800606e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060c4:	f023 0310 	bic.w	r3, r3, #16
 80060c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e4      	bne.n	80060b4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fb ff04 	bl	8001efe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006108:	b29b      	uxth	r3, r3
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	b29b      	uxth	r3, r3
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fa fda5 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006116:	e0fc      	b.n	8006312 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800611e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006122:	429a      	cmp	r2, r3
 8006124:	f040 80f5 	bne.w	8006312 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b20      	cmp	r3, #32
 8006138:	f040 80eb 	bne.w	8006312 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fa fd88 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
      return;
 8006150:	e0df      	b.n	8006312 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800615e:	b29b      	uxth	r3, r3
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80d1 	beq.w	8006316 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80cc 	beq.w	8006316 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800618c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006192:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e4      	bne.n	800617e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3308      	adds	r3, #8
 80061ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	623b      	str	r3, [r7, #32]
   return(result);
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ca:	f023 0301 	bic.w	r3, r3, #1
 80061ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80061de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e1      	bne.n	80061b4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	60fb      	str	r3, [r7, #12]
   return(result);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f023 0310 	bic.w	r3, r3, #16
 8006218:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	69b9      	ldr	r1, [r7, #24]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	617b      	str	r3, [r7, #20]
   return(result);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e4      	bne.n	8006204 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fa fd0a 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800624c:	e063      	b.n	8006316 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00e      	beq.n	8006278 <HAL_UART_IRQHandler+0x5d8>
 800625a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800625e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800626e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f001 f91c 	bl	80074ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006276:	e051      	b.n	800631c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800627c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006280:	2b00      	cmp	r3, #0
 8006282:	d014      	beq.n	80062ae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800628c:	2b00      	cmp	r3, #0
 800628e:	d105      	bne.n	800629c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006294:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d03a      	beq.n	800631a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
    }
    return;
 80062ac:	e035      	b.n	800631a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d009      	beq.n	80062ce <HAL_UART_IRQHandler+0x62e>
 80062ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 f8c6 	bl	8007458 <UART_EndTransmit_IT>
    return;
 80062cc:	e026      	b.n	800631c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80062ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <HAL_UART_IRQHandler+0x64e>
 80062da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 f8f5 	bl	80074d6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062ec:	e016      	b.n	800631c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d010      	beq.n	800631c <HAL_UART_IRQHandler+0x67c>
 80062fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	da0c      	bge.n	800631c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 f8dd 	bl	80074c2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006308:	e008      	b.n	800631c <HAL_UART_IRQHandler+0x67c>
      return;
 800630a:	bf00      	nop
 800630c:	e006      	b.n	800631c <HAL_UART_IRQHandler+0x67c>
    return;
 800630e:	bf00      	nop
 8006310:	e004      	b.n	800631c <HAL_UART_IRQHandler+0x67c>
      return;
 8006312:	bf00      	nop
 8006314:	e002      	b.n	800631c <HAL_UART_IRQHandler+0x67c>
      return;
 8006316:	bf00      	nop
 8006318:	e000      	b.n	800631c <HAL_UART_IRQHandler+0x67c>
    return;
 800631a:	bf00      	nop
  }
}
 800631c:	37e8      	adds	r7, #232	@ 0xe8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop

08006324 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006364:	b08c      	sub	sp, #48	@ 0x30
 8006366:	af00      	add	r7, sp, #0
 8006368:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	431a      	orrs	r2, r3
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	431a      	orrs	r2, r3
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	4313      	orrs	r3, r2
 8006386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4bab      	ldr	r3, [pc, #684]	@ (800663c <UART_SetConfig+0x2dc>)
 8006390:	4013      	ands	r3, r2
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006398:	430b      	orrs	r3, r1
 800639a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4aa0      	ldr	r2, [pc, #640]	@ (8006640 <UART_SetConfig+0x2e0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063c8:	4313      	orrs	r3, r2
 80063ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80063d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063e0:	430b      	orrs	r3, r1
 80063e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	f023 010f 	bic.w	r1, r3, #15
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a91      	ldr	r2, [pc, #580]	@ (8006644 <UART_SetConfig+0x2e4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d125      	bne.n	8006450 <UART_SetConfig+0xf0>
 8006404:	4b90      	ldr	r3, [pc, #576]	@ (8006648 <UART_SetConfig+0x2e8>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b03      	cmp	r3, #3
 8006410:	d81a      	bhi.n	8006448 <UART_SetConfig+0xe8>
 8006412:	a201      	add	r2, pc, #4	@ (adr r2, 8006418 <UART_SetConfig+0xb8>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	08006429 	.word	0x08006429
 800641c:	08006439 	.word	0x08006439
 8006420:	08006431 	.word	0x08006431
 8006424:	08006441 	.word	0x08006441
 8006428:	2301      	movs	r3, #1
 800642a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800642e:	e0d6      	b.n	80065de <UART_SetConfig+0x27e>
 8006430:	2302      	movs	r3, #2
 8006432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006436:	e0d2      	b.n	80065de <UART_SetConfig+0x27e>
 8006438:	2304      	movs	r3, #4
 800643a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800643e:	e0ce      	b.n	80065de <UART_SetConfig+0x27e>
 8006440:	2308      	movs	r3, #8
 8006442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006446:	e0ca      	b.n	80065de <UART_SetConfig+0x27e>
 8006448:	2310      	movs	r3, #16
 800644a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800644e:	e0c6      	b.n	80065de <UART_SetConfig+0x27e>
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a7d      	ldr	r2, [pc, #500]	@ (800664c <UART_SetConfig+0x2ec>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d138      	bne.n	80064cc <UART_SetConfig+0x16c>
 800645a:	4b7b      	ldr	r3, [pc, #492]	@ (8006648 <UART_SetConfig+0x2e8>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006460:	f003 030c 	and.w	r3, r3, #12
 8006464:	2b0c      	cmp	r3, #12
 8006466:	d82d      	bhi.n	80064c4 <UART_SetConfig+0x164>
 8006468:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <UART_SetConfig+0x110>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	080064a5 	.word	0x080064a5
 8006474:	080064c5 	.word	0x080064c5
 8006478:	080064c5 	.word	0x080064c5
 800647c:	080064c5 	.word	0x080064c5
 8006480:	080064b5 	.word	0x080064b5
 8006484:	080064c5 	.word	0x080064c5
 8006488:	080064c5 	.word	0x080064c5
 800648c:	080064c5 	.word	0x080064c5
 8006490:	080064ad 	.word	0x080064ad
 8006494:	080064c5 	.word	0x080064c5
 8006498:	080064c5 	.word	0x080064c5
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064bd 	.word	0x080064bd
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064aa:	e098      	b.n	80065de <UART_SetConfig+0x27e>
 80064ac:	2302      	movs	r3, #2
 80064ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064b2:	e094      	b.n	80065de <UART_SetConfig+0x27e>
 80064b4:	2304      	movs	r3, #4
 80064b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ba:	e090      	b.n	80065de <UART_SetConfig+0x27e>
 80064bc:	2308      	movs	r3, #8
 80064be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064c2:	e08c      	b.n	80065de <UART_SetConfig+0x27e>
 80064c4:	2310      	movs	r3, #16
 80064c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ca:	e088      	b.n	80065de <UART_SetConfig+0x27e>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a5f      	ldr	r2, [pc, #380]	@ (8006650 <UART_SetConfig+0x2f0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d125      	bne.n	8006522 <UART_SetConfig+0x1c2>
 80064d6:	4b5c      	ldr	r3, [pc, #368]	@ (8006648 <UART_SetConfig+0x2e8>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064e0:	2b30      	cmp	r3, #48	@ 0x30
 80064e2:	d016      	beq.n	8006512 <UART_SetConfig+0x1b2>
 80064e4:	2b30      	cmp	r3, #48	@ 0x30
 80064e6:	d818      	bhi.n	800651a <UART_SetConfig+0x1ba>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d00a      	beq.n	8006502 <UART_SetConfig+0x1a2>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d814      	bhi.n	800651a <UART_SetConfig+0x1ba>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <UART_SetConfig+0x19a>
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d008      	beq.n	800650a <UART_SetConfig+0x1aa>
 80064f8:	e00f      	b.n	800651a <UART_SetConfig+0x1ba>
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006500:	e06d      	b.n	80065de <UART_SetConfig+0x27e>
 8006502:	2302      	movs	r3, #2
 8006504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006508:	e069      	b.n	80065de <UART_SetConfig+0x27e>
 800650a:	2304      	movs	r3, #4
 800650c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006510:	e065      	b.n	80065de <UART_SetConfig+0x27e>
 8006512:	2308      	movs	r3, #8
 8006514:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006518:	e061      	b.n	80065de <UART_SetConfig+0x27e>
 800651a:	2310      	movs	r3, #16
 800651c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006520:	e05d      	b.n	80065de <UART_SetConfig+0x27e>
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a4b      	ldr	r2, [pc, #300]	@ (8006654 <UART_SetConfig+0x2f4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d125      	bne.n	8006578 <UART_SetConfig+0x218>
 800652c:	4b46      	ldr	r3, [pc, #280]	@ (8006648 <UART_SetConfig+0x2e8>)
 800652e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006532:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006536:	2bc0      	cmp	r3, #192	@ 0xc0
 8006538:	d016      	beq.n	8006568 <UART_SetConfig+0x208>
 800653a:	2bc0      	cmp	r3, #192	@ 0xc0
 800653c:	d818      	bhi.n	8006570 <UART_SetConfig+0x210>
 800653e:	2b80      	cmp	r3, #128	@ 0x80
 8006540:	d00a      	beq.n	8006558 <UART_SetConfig+0x1f8>
 8006542:	2b80      	cmp	r3, #128	@ 0x80
 8006544:	d814      	bhi.n	8006570 <UART_SetConfig+0x210>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <UART_SetConfig+0x1f0>
 800654a:	2b40      	cmp	r3, #64	@ 0x40
 800654c:	d008      	beq.n	8006560 <UART_SetConfig+0x200>
 800654e:	e00f      	b.n	8006570 <UART_SetConfig+0x210>
 8006550:	2300      	movs	r3, #0
 8006552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006556:	e042      	b.n	80065de <UART_SetConfig+0x27e>
 8006558:	2302      	movs	r3, #2
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800655e:	e03e      	b.n	80065de <UART_SetConfig+0x27e>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006566:	e03a      	b.n	80065de <UART_SetConfig+0x27e>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800656e:	e036      	b.n	80065de <UART_SetConfig+0x27e>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006576:	e032      	b.n	80065de <UART_SetConfig+0x27e>
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a30      	ldr	r2, [pc, #192]	@ (8006640 <UART_SetConfig+0x2e0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d12a      	bne.n	80065d8 <UART_SetConfig+0x278>
 8006582:	4b31      	ldr	r3, [pc, #196]	@ (8006648 <UART_SetConfig+0x2e8>)
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006588:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800658c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006590:	d01a      	beq.n	80065c8 <UART_SetConfig+0x268>
 8006592:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006596:	d81b      	bhi.n	80065d0 <UART_SetConfig+0x270>
 8006598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800659c:	d00c      	beq.n	80065b8 <UART_SetConfig+0x258>
 800659e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a2:	d815      	bhi.n	80065d0 <UART_SetConfig+0x270>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <UART_SetConfig+0x250>
 80065a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ac:	d008      	beq.n	80065c0 <UART_SetConfig+0x260>
 80065ae:	e00f      	b.n	80065d0 <UART_SetConfig+0x270>
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065b6:	e012      	b.n	80065de <UART_SetConfig+0x27e>
 80065b8:	2302      	movs	r3, #2
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065be:	e00e      	b.n	80065de <UART_SetConfig+0x27e>
 80065c0:	2304      	movs	r3, #4
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065c6:	e00a      	b.n	80065de <UART_SetConfig+0x27e>
 80065c8:	2308      	movs	r3, #8
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ce:	e006      	b.n	80065de <UART_SetConfig+0x27e>
 80065d0:	2310      	movs	r3, #16
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065d6:	e002      	b.n	80065de <UART_SetConfig+0x27e>
 80065d8:	2310      	movs	r3, #16
 80065da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a17      	ldr	r2, [pc, #92]	@ (8006640 <UART_SetConfig+0x2e0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	f040 80a8 	bne.w	800673a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d834      	bhi.n	800665c <UART_SetConfig+0x2fc>
 80065f2:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <UART_SetConfig+0x298>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	0800665d 	.word	0x0800665d
 8006600:	08006625 	.word	0x08006625
 8006604:	0800665d 	.word	0x0800665d
 8006608:	0800662b 	.word	0x0800662b
 800660c:	0800665d 	.word	0x0800665d
 8006610:	0800665d 	.word	0x0800665d
 8006614:	0800665d 	.word	0x0800665d
 8006618:	08006633 	.word	0x08006633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800661c:	f7fe fac6 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8006620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006622:	e021      	b.n	8006668 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006624:	4b0c      	ldr	r3, [pc, #48]	@ (8006658 <UART_SetConfig+0x2f8>)
 8006626:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006628:	e01e      	b.n	8006668 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800662a:	f7fe fa51 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 800662e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006630:	e01a      	b.n	8006668 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006638:	e016      	b.n	8006668 <UART_SetConfig+0x308>
 800663a:	bf00      	nop
 800663c:	cfff69f3 	.word	0xcfff69f3
 8006640:	40008000 	.word	0x40008000
 8006644:	40013800 	.word	0x40013800
 8006648:	40021000 	.word	0x40021000
 800664c:	40004400 	.word	0x40004400
 8006650:	40004800 	.word	0x40004800
 8006654:	40004c00 	.word	0x40004c00
 8006658:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006666:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 812a 	beq.w	80068c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006674:	4a9e      	ldr	r2, [pc, #632]	@ (80068f0 <UART_SetConfig+0x590>)
 8006676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800667a:	461a      	mov	r2, r3
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006682:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	4613      	mov	r3, r2
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	4413      	add	r3, r2
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	429a      	cmp	r2, r3
 8006692:	d305      	bcc.n	80066a0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	429a      	cmp	r2, r3
 800669e:	d903      	bls.n	80066a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066a6:	e10d      	b.n	80068c4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	2200      	movs	r2, #0
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	60fa      	str	r2, [r7, #12]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b4:	4a8e      	ldr	r2, [pc, #568]	@ (80068f0 <UART_SetConfig+0x590>)
 80066b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2200      	movs	r2, #0
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066ca:	f7f9 fdf9 	bl	80002c0 <__aeabi_uldivmod>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4610      	mov	r0, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	f04f 0200 	mov.w	r2, #0
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	020b      	lsls	r3, r1, #8
 80066e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066e4:	0202      	lsls	r2, r0, #8
 80066e6:	6979      	ldr	r1, [r7, #20]
 80066e8:	6849      	ldr	r1, [r1, #4]
 80066ea:	0849      	lsrs	r1, r1, #1
 80066ec:	2000      	movs	r0, #0
 80066ee:	460c      	mov	r4, r1
 80066f0:	4605      	mov	r5, r0
 80066f2:	eb12 0804 	adds.w	r8, r2, r4
 80066f6:	eb43 0905 	adc.w	r9, r3, r5
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	469a      	mov	sl, r3
 8006702:	4693      	mov	fp, r2
 8006704:	4652      	mov	r2, sl
 8006706:	465b      	mov	r3, fp
 8006708:	4640      	mov	r0, r8
 800670a:	4649      	mov	r1, r9
 800670c:	f7f9 fdd8 	bl	80002c0 <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4613      	mov	r3, r2
 8006716:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800671e:	d308      	bcc.n	8006732 <UART_SetConfig+0x3d2>
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006726:	d204      	bcs.n	8006732 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6a3a      	ldr	r2, [r7, #32]
 800672e:	60da      	str	r2, [r3, #12]
 8006730:	e0c8      	b.n	80068c4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006738:	e0c4      	b.n	80068c4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006742:	d167      	bne.n	8006814 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006744:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006748:	2b08      	cmp	r3, #8
 800674a:	d828      	bhi.n	800679e <UART_SetConfig+0x43e>
 800674c:	a201      	add	r2, pc, #4	@ (adr r2, 8006754 <UART_SetConfig+0x3f4>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006779 	.word	0x08006779
 8006758:	08006781 	.word	0x08006781
 800675c:	08006789 	.word	0x08006789
 8006760:	0800679f 	.word	0x0800679f
 8006764:	0800678f 	.word	0x0800678f
 8006768:	0800679f 	.word	0x0800679f
 800676c:	0800679f 	.word	0x0800679f
 8006770:	0800679f 	.word	0x0800679f
 8006774:	08006797 	.word	0x08006797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006778:	f7fe fa18 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 800677c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800677e:	e014      	b.n	80067aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006780:	f7fe fa2a 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8006784:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006786:	e010      	b.n	80067aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006788:	4b5a      	ldr	r3, [pc, #360]	@ (80068f4 <UART_SetConfig+0x594>)
 800678a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800678c:	e00d      	b.n	80067aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800678e:	f7fe f99f 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 8006792:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006794:	e009      	b.n	80067aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800679a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800679c:	e005      	b.n	80067aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80067a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8089 	beq.w	80068c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b6:	4a4e      	ldr	r2, [pc, #312]	@ (80068f0 <UART_SetConfig+0x590>)
 80067b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067bc:	461a      	mov	r2, r3
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067c4:	005a      	lsls	r2, r3, #1
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	085b      	lsrs	r3, r3, #1
 80067cc:	441a      	add	r2, r3
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	2b0f      	cmp	r3, #15
 80067dc:	d916      	bls.n	800680c <UART_SetConfig+0x4ac>
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e4:	d212      	bcs.n	800680c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f023 030f 	bic.w	r3, r3, #15
 80067ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	085b      	lsrs	r3, r3, #1
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	8bfb      	ldrh	r3, [r7, #30]
 80067fe:	4313      	orrs	r3, r2
 8006800:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	8bfa      	ldrh	r2, [r7, #30]
 8006808:	60da      	str	r2, [r3, #12]
 800680a:	e05b      	b.n	80068c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006812:	e057      	b.n	80068c4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006814:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006818:	2b08      	cmp	r3, #8
 800681a:	d828      	bhi.n	800686e <UART_SetConfig+0x50e>
 800681c:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <UART_SetConfig+0x4c4>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	0800686f 	.word	0x0800686f
 8006834:	0800685f 	.word	0x0800685f
 8006838:	0800686f 	.word	0x0800686f
 800683c:	0800686f 	.word	0x0800686f
 8006840:	0800686f 	.word	0x0800686f
 8006844:	08006867 	.word	0x08006867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fe f9b0 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 800684c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800684e:	e014      	b.n	800687a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006850:	f7fe f9c2 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8006854:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006856:	e010      	b.n	800687a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006858:	4b26      	ldr	r3, [pc, #152]	@ (80068f4 <UART_SetConfig+0x594>)
 800685a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800685c:	e00d      	b.n	800687a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800685e:	f7fe f937 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 8006862:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006864:	e009      	b.n	800687a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800686a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800686c:	e005      	b.n	800687a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006878:	bf00      	nop
    }

    if (pclk != 0U)
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d021      	beq.n	80068c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006884:	4a1a      	ldr	r2, [pc, #104]	@ (80068f0 <UART_SetConfig+0x590>)
 8006886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800688a:	461a      	mov	r2, r3
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	441a      	add	r2, r3
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2b0f      	cmp	r3, #15
 80068a8:	d909      	bls.n	80068be <UART_SetConfig+0x55e>
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b0:	d205      	bcs.n	80068be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	60da      	str	r2, [r3, #12]
 80068bc:	e002      	b.n	80068c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2200      	movs	r2, #0
 80068d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2200      	movs	r2, #0
 80068de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80068e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3730      	adds	r7, #48	@ 0x30
 80068e8:	46bd      	mov	sp, r7
 80068ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ee:	bf00      	nop
 80068f0:	0800c900 	.word	0x0800c900
 80068f4:	00f42400 	.word	0x00f42400

080068f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01a      	beq.n	8006a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069f6:	d10a      	bne.n	8006a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	605a      	str	r2, [r3, #4]
  }
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b098      	sub	sp, #96	@ 0x60
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a4c:	f7fa fff6 	bl	8001a3c <HAL_GetTick>
 8006a50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d12f      	bne.n	8006ac0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f88e 	bl	8006b90 <UART_WaitOnFlagUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d022      	beq.n	8006ac0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e6      	bne.n	8006a7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e063      	b.n	8006b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d149      	bne.n	8006b62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ace:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f857 	bl	8006b90 <UART_WaitOnFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d03c      	beq.n	8006b62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	623b      	str	r3, [r7, #32]
   return(result);
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e6      	bne.n	8006ae8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3308      	adds	r3, #8
 8006b20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f023 0301 	bic.w	r3, r3, #1
 8006b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3308      	adds	r3, #8
 8006b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b3a:	61fa      	str	r2, [r7, #28]
 8006b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	69b9      	ldr	r1, [r7, #24]
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	617b      	str	r3, [r7, #20]
   return(result);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e5      	bne.n	8006b1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e012      	b.n	8006b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3758      	adds	r7, #88	@ 0x58
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba0:	e04f      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba8:	d04b      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006baa:	f7fa ff47 	bl	8001a3c <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d302      	bcc.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e04e      	b.n	8006c62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d037      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b80      	cmp	r3, #128	@ 0x80
 8006bd6:	d034      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b40      	cmp	r3, #64	@ 0x40
 8006bdc:	d031      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d110      	bne.n	8006c0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f920 	bl	8006e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e029      	b.n	8006c62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c1c:	d111      	bne.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f906 	bl	8006e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e00f      	b.n	8006c62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	bf0c      	ite	eq
 8006c52:	2301      	moveq	r3, #1
 8006c54:	2300      	movne	r3, #0
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d0a0      	beq.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b096      	sub	sp, #88	@ 0x58
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2222      	movs	r2, #34	@ 0x22
 8006c94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d02d      	beq.n	8006cfe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ca8:	4a40      	ldr	r2, [pc, #256]	@ (8006dac <UART_Start_Receive_DMA+0x140>)
 8006caa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8006db0 <UART_Start_Receive_DMA+0x144>)
 8006cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8006db4 <UART_Start_Receive_DMA+0x148>)
 8006cbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3324      	adds	r3, #36	@ 0x24
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cdc:	461a      	mov	r2, r3
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	f7fb f892 	bl	8001e08 <HAL_DMA_Start_IT>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2210      	movs	r2, #16
 8006cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e051      	b.n	8006da2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d018      	beq.n	8006d38 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d26:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e6      	bne.n	8006d06 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d58:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e5      	bne.n	8006d38 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3308      	adds	r3, #8
 8006d8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d8c:	623a      	str	r2, [r7, #32]
 8006d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	69f9      	ldr	r1, [r7, #28]
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e5      	bne.n	8006d6c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3758      	adds	r7, #88	@ 0x58
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	08006f07 	.word	0x08006f07
 8006db0:	08007033 	.word	0x08007033
 8006db4:	08007071 	.word	0x08007071

08006db8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b08f      	sub	sp, #60	@ 0x3c
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006de0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006de4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e6      	bne.n	8006dc0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e12:	61ba      	str	r2, [r7, #24]
 8006e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6979      	ldr	r1, [r7, #20]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e5      	bne.n	8006df2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006e2e:	bf00      	nop
 8006e30:	373c      	adds	r7, #60	@ 0x3c
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b095      	sub	sp, #84	@ 0x54
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e60:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e68:	e841 2300 	strex	r3, r2, [r1]
 8006e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e6      	bne.n	8006e42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e8a:	f023 0301 	bic.w	r3, r3, #1
 8006e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3308      	adds	r3, #8
 8006e96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e3      	bne.n	8006e74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d118      	bne.n	8006ee6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f023 0310 	bic.w	r3, r3, #16
 8006ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ed2:	61bb      	str	r3, [r7, #24]
 8006ed4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6979      	ldr	r1, [r7, #20]
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e6      	bne.n	8006eb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006efa:	bf00      	nop
 8006efc:	3754      	adds	r7, #84	@ 0x54
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b09c      	sub	sp, #112	@ 0x70
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d171      	bne.n	8007006 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f4a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e6      	bne.n	8006f2a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3308      	adds	r3, #8
 8006f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f7c:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f7e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e5      	bne.n	8006f5c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3308      	adds	r3, #8
 8006fae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006fb0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e5      	bne.n	8006f90 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d118      	bne.n	8007006 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f023 0310 	bic.w	r3, r3, #16
 8006fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	69b9      	ldr	r1, [r7, #24]
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e6      	bne.n	8006fd4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007008:	2200      	movs	r2, #0
 800700a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800700c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800700e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007010:	2b01      	cmp	r3, #1
 8007012:	d107      	bne.n	8007024 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007016:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800701a:	4619      	mov	r1, r3
 800701c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800701e:	f7f9 fe1f 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007022:	e002      	b.n	800702a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007024:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007026:	f7ff f97d 	bl	8006324 <HAL_UART_RxCpltCallback>
}
 800702a:	bf00      	nop
 800702c:	3770      	adds	r7, #112	@ 0x70
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800704a:	2b01      	cmp	r3, #1
 800704c:	d109      	bne.n	8007062 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	b29b      	uxth	r3, r3
 8007058:	4619      	mov	r1, r3
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f7f9 fe00 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007060:	e002      	b.n	8007068 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f7ff f968 	bl	8006338 <HAL_UART_RxHalfCpltCallback>
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007084:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800708c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007098:	2b80      	cmp	r3, #128	@ 0x80
 800709a:	d109      	bne.n	80070b0 <UART_DMAError+0x40>
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b21      	cmp	r3, #33	@ 0x21
 80070a0:	d106      	bne.n	80070b0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f7ff fe84 	bl	8006db8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ba:	2b40      	cmp	r3, #64	@ 0x40
 80070bc:	d109      	bne.n	80070d2 <UART_DMAError+0x62>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b22      	cmp	r3, #34	@ 0x22
 80070c2:	d106      	bne.n	80070d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80070cc:	6978      	ldr	r0, [r7, #20]
 80070ce:	f7ff feb4 	bl	8006e3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d8:	f043 0210 	orr.w	r2, r3, #16
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070e2:	6978      	ldr	r0, [r7, #20]
 80070e4:	f7ff f932 	bl	800634c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e8:	bf00      	nop
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7ff f920 	bl	800634c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007114:	b480      	push	{r7}
 8007116:	b08f      	sub	sp, #60	@ 0x3c
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007122:	2b21      	cmp	r3, #33	@ 0x21
 8007124:	d14c      	bne.n	80071c0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d132      	bne.n	8007198 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007152:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e6      	bne.n	8007132 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	60bb      	str	r3, [r7, #8]
   return(result);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007178:	633b      	str	r3, [r7, #48]	@ 0x30
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6979      	ldr	r1, [r7, #20]
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	613b      	str	r3, [r7, #16]
   return(result);
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e6      	bne.n	8007164 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007196:	e013      	b.n	80071c0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80071c0:	bf00      	nop
 80071c2:	373c      	adds	r7, #60	@ 0x3c
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b091      	sub	sp, #68	@ 0x44
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071da:	2b21      	cmp	r3, #33	@ 0x21
 80071dc:	d151      	bne.n	8007282 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d132      	bne.n	8007250 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	623b      	str	r3, [r7, #32]
   return(result);
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007208:	633b      	str	r3, [r7, #48]	@ 0x30
 800720a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800720e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007210:	e841 2300 	strex	r3, r2, [r1]
 8007214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1e6      	bne.n	80071ea <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	60fb      	str	r3, [r7, #12]
   return(result);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007230:	637b      	str	r3, [r7, #52]	@ 0x34
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723a:	61fb      	str	r3, [r7, #28]
 800723c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	69b9      	ldr	r1, [r7, #24]
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	617b      	str	r3, [r7, #20]
   return(result);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e6      	bne.n	800721c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800724e:	e018      	b.n	8007282 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007254:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007264:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800726a:	1c9a      	adds	r2, r3, #2
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007282:	bf00      	nop
 8007284:	3744      	adds	r7, #68	@ 0x44
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800728e:	b480      	push	{r7}
 8007290:	b091      	sub	sp, #68	@ 0x44
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800729c:	2b21      	cmp	r3, #33	@ 0x21
 800729e:	d160      	bne.n	8007362 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80072a8:	e057      	b.n	800735a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d133      	bne.n	800731e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	623b      	str	r3, [r7, #32]
   return(result);
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80072cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3308      	adds	r3, #8
 80072d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80072d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e5      	bne.n	80072b6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	69b9      	ldr	r1, [r7, #24]
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	617b      	str	r3, [r7, #20]
   return(result);
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e6      	bne.n	80072ea <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800731c:	e021      	b.n	8007362 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007328:	2b00      	cmp	r3, #0
 800732a:	d013      	beq.n	8007354 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007330:	781a      	ldrb	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007354:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007356:	3b01      	subs	r3, #1
 8007358:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800735a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1a4      	bne.n	80072aa <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007360:	e7ff      	b.n	8007362 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007362:	bf00      	nop
 8007364:	3744      	adds	r7, #68	@ 0x44
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800736e:	b480      	push	{r7}
 8007370:	b091      	sub	sp, #68	@ 0x44
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800737c:	2b21      	cmp	r3, #33	@ 0x21
 800737e:	d165      	bne.n	800744c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007386:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007388:	e05c      	b.n	8007444 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d133      	bne.n	80073fe <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3308      	adds	r3, #8
 800739c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80073ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3308      	adds	r3, #8
 80073b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e5      	bne.n	8007396 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073de:	633b      	str	r3, [r7, #48]	@ 0x30
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	61bb      	str	r3, [r7, #24]
 80073ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6979      	ldr	r1, [r7, #20]
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	e841 2300 	strex	r3, r2, [r1]
 80073f4:	613b      	str	r3, [r7, #16]
   return(result);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e6      	bne.n	80073ca <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80073fc:	e026      	b.n	800744c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007408:	2b00      	cmp	r3, #0
 800740a:	d018      	beq.n	800743e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007410:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007420:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007426:	1c9a      	adds	r2, r3, #2
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800743e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007440:	3b01      	subs	r3, #1
 8007442:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007444:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007446:	2b00      	cmp	r3, #0
 8007448:	d19f      	bne.n	800738a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800744a:	e7ff      	b.n	800744c <UART_TxISR_16BIT_FIFOEN+0xde>
 800744c:	bf00      	nop
 800744e:	3744      	adds	r7, #68	@ 0x44
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	60bb      	str	r3, [r7, #8]
   return(result);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007474:	61fb      	str	r3, [r7, #28]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	6979      	ldr	r1, [r7, #20]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	613b      	str	r3, [r7, #16]
   return(result);
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e6      	bne.n	8007460 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7f9 fc55 	bl	8000d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074a6:	bf00      	nop
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_UARTEx_DisableFifoMode+0x16>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e027      	b.n	8007550 <HAL_UARTEx_DisableFifoMode+0x66>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2224      	movs	r2, #36	@ 0x24
 800750c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0201 	bic.w	r2, r2, #1
 8007526:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800752e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007570:	2302      	movs	r3, #2
 8007572:	e02d      	b.n	80075d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2224      	movs	r2, #36	@ 0x24
 8007580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0201 	bic.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f8a3 	bl	80076fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e02d      	b.n	800764c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2224      	movs	r2, #36	@ 0x24
 80075fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0201 	bic.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f865 	bl	80076fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2220      	movs	r2, #32
 800763e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08c      	sub	sp, #48	@ 0x30
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007668:	2b20      	cmp	r3, #32
 800766a:	d142      	bne.n	80076f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e03b      	b.n	80076f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2201      	movs	r2, #1
 8007680:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	461a      	mov	r2, r3
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff faec 	bl	8006c6c <UART_Start_Receive_DMA>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800769a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d124      	bne.n	80076ec <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d11d      	bne.n	80076e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2210      	movs	r2, #16
 80076b0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	617b      	str	r3, [r7, #20]
   return(result);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f043 0310 	orr.w	r3, r3, #16
 80076c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076d2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6a39      	ldr	r1, [r7, #32]
 80076d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e6      	bne.n	80076b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80076e4:	e002      	b.n	80076ec <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80076ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076f0:	e000      	b.n	80076f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80076f2:	2302      	movs	r3, #2
  }
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3730      	adds	r7, #48	@ 0x30
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007708:	2b00      	cmp	r3, #0
 800770a:	d108      	bne.n	800771e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800771c:	e031      	b.n	8007782 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800771e:	2308      	movs	r3, #8
 8007720:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007722:	2308      	movs	r3, #8
 8007724:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	0e5b      	lsrs	r3, r3, #25
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	0f5b      	lsrs	r3, r3, #29
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	7b3a      	ldrb	r2, [r7, #12]
 800774a:	4911      	ldr	r1, [pc, #68]	@ (8007790 <UARTEx_SetNbDataToProcess+0x94>)
 800774c:	5c8a      	ldrb	r2, [r1, r2]
 800774e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007752:	7b3a      	ldrb	r2, [r7, #12]
 8007754:	490f      	ldr	r1, [pc, #60]	@ (8007794 <UARTEx_SetNbDataToProcess+0x98>)
 8007756:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007758:	fb93 f3f2 	sdiv	r3, r3, r2
 800775c:	b29a      	uxth	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	7b7a      	ldrb	r2, [r7, #13]
 8007768:	4909      	ldr	r1, [pc, #36]	@ (8007790 <UARTEx_SetNbDataToProcess+0x94>)
 800776a:	5c8a      	ldrb	r2, [r1, r2]
 800776c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007770:	7b7a      	ldrb	r2, [r7, #13]
 8007772:	4908      	ldr	r1, [pc, #32]	@ (8007794 <UARTEx_SetNbDataToProcess+0x98>)
 8007774:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007776:	fb93 f3f2 	sdiv	r3, r3, r2
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007782:	bf00      	nop
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	0800c918 	.word	0x0800c918
 8007794:	0800c920 	.word	0x0800c920

08007798 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077a8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80077ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077ce:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80077d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	43db      	mvns	r3, r3
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4013      	ands	r3, r2
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	1d3b      	adds	r3, r7, #4
 8007806:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007838:	b480      	push	{r7}
 800783a:	b0a7      	sub	sp, #156	@ 0x9c
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800785a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800785e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	78db      	ldrb	r3, [r3, #3]
 8007866:	2b03      	cmp	r3, #3
 8007868:	d81f      	bhi.n	80078aa <USB_ActivateEndpoint+0x72>
 800786a:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <USB_ActivateEndpoint+0x38>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007881 	.word	0x08007881
 8007874:	0800789d 	.word	0x0800789d
 8007878:	080078b3 	.word	0x080078b3
 800787c:	0800788f 	.word	0x0800788f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007880:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007884:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007888:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800788c:	e012      	b.n	80078b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800788e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007892:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007896:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800789a:	e00b      	b.n	80078b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800789c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80078a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80078a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80078a8:	e004      	b.n	80078b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80078b0:	e000      	b.n	80078b4 <USB_ActivateEndpoint+0x7c>
      break;
 80078b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	441a      	add	r2, r3
 80078be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80078c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	b21b      	sxth	r3, r3
 80078e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ee:	b21a      	sxth	r2, r3
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b21b      	sxth	r3, r3
 80078f6:	4313      	orrs	r3, r2
 80078f8:	b21b      	sxth	r3, r3
 80078fa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	441a      	add	r2, r3
 8007908:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800790c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800791c:	b29b      	uxth	r3, r3
 800791e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	7b1b      	ldrb	r3, [r3, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f040 8180 	bne.w	8007c2a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8084 	beq.w	8007a3c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	61bb      	str	r3, [r7, #24]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	4413      	add	r3, r2
 8007946:	61bb      	str	r3, [r7, #24]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	00da      	lsls	r2, r3, #3
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	88db      	ldrh	r3, [r3, #6]
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	b29b      	uxth	r3, r3
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	827b      	strh	r3, [r7, #18]
 8007976:	8a7b      	ldrh	r3, [r7, #18]
 8007978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01b      	beq.n	80079b8 <USB_ActivateEndpoint+0x180>
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007996:	823b      	strh	r3, [r7, #16]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	441a      	add	r2, r3
 80079a2:	8a3b      	ldrh	r3, [r7, #16]
 80079a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	78db      	ldrb	r3, [r3, #3]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d020      	beq.n	8007a02 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079d6:	81bb      	strh	r3, [r7, #12]
 80079d8:	89bb      	ldrh	r3, [r7, #12]
 80079da:	f083 0320 	eor.w	r3, r3, #32
 80079de:	81bb      	strh	r3, [r7, #12]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	441a      	add	r2, r3
 80079ea:	89bb      	ldrh	r3, [r7, #12]
 80079ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	8013      	strh	r3, [r2, #0]
 8007a00:	e3f9      	b.n	80081f6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a18:	81fb      	strh	r3, [r7, #14]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	441a      	add	r2, r3
 8007a24:	89fb      	ldrh	r3, [r7, #14]
 8007a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	8013      	strh	r3, [r2, #0]
 8007a3a:	e3dc      	b.n	80081f6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	4413      	add	r3, r2
 8007a4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	00da      	lsls	r2, r3, #3
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	4413      	add	r3, r2
 8007a5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	88db      	ldrh	r3, [r3, #6]
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a80:	4413      	add	r3, r2
 8007a82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	00da      	lsls	r2, r3, #3
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <USB_ActivateEndpoint+0x28a>
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	e041      	b.n	8007b46 <USB_ActivateEndpoint+0x30e>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ac8:	d81c      	bhi.n	8007b04 <USB_ActivateEndpoint+0x2cc>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	085b      	lsrs	r3, r3, #1
 8007ad0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d004      	beq.n	8007aea <USB_ActivateEndpoint+0x2b2>
 8007ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	029b      	lsls	r3, r3, #10
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	4313      	orrs	r3, r2
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	801a      	strh	r2, [r3, #0]
 8007b02:	e020      	b.n	8007b46 <USB_ActivateEndpoint+0x30e>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f003 031f 	and.w	r3, r3, #31
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d104      	bne.n	8007b24 <USB_ActivateEndpoint+0x2ec>
 8007b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	029b      	lsls	r3, r3, #10
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	4313      	orrs	r3, r2
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007b54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d01b      	beq.n	8007b96 <USB_ActivateEndpoint+0x35e>
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b74:	843b      	strh	r3, [r7, #32]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	441a      	add	r2, r3
 8007b80:	8c3b      	ldrh	r3, [r7, #32]
 8007b82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d124      	bne.n	8007be8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb4:	83bb      	strh	r3, [r7, #28]
 8007bb6:	8bbb      	ldrh	r3, [r7, #28]
 8007bb8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bbc:	83bb      	strh	r3, [r7, #28]
 8007bbe:	8bbb      	ldrh	r3, [r7, #28]
 8007bc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007bc4:	83bb      	strh	r3, [r7, #28]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	441a      	add	r2, r3
 8007bd0:	8bbb      	ldrh	r3, [r7, #28]
 8007bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	8013      	strh	r3, [r2, #0]
 8007be6:	e306      	b.n	80081f6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bfe:	83fb      	strh	r3, [r7, #30]
 8007c00:	8bfb      	ldrh	r3, [r7, #30]
 8007c02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c06:	83fb      	strh	r3, [r7, #30]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	8bfb      	ldrh	r3, [r7, #30]
 8007c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	8013      	strh	r3, [r2, #0]
 8007c28:	e2e5      	b.n	80081f6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	78db      	ldrb	r3, [r3, #3]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d11e      	bne.n	8007c70 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c48:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	441a      	add	r2, r3
 8007c56:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8007c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c62:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	8013      	strh	r3, [r2, #0]
 8007c6e:	e01d      	b.n	8007cac <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c86:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8007c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007cbc:	4413      	add	r3, r2
 8007cbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	00da      	lsls	r2, r3, #3
 8007cc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cce:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	891b      	ldrh	r3, [r3, #8]
 8007cd4:	085b      	lsrs	r3, r3, #1
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cf0:	4413      	add	r3, r2
 8007cf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	00da      	lsls	r2, r3, #3
 8007cfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d02:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	895b      	ldrh	r3, [r3, #10]
 8007d08:	085b      	lsrs	r3, r3, #1
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 81af 	bne.w	800807c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8007d2e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01d      	beq.n	8007d76 <USB_ActivateEndpoint+0x53e>
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d50:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	441a      	add	r2, r3
 8007d5e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8007d86:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d01d      	beq.n	8007dce <USB_ActivateEndpoint+0x596>
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	441a      	add	r2, r3
 8007db6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dc6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	785b      	ldrb	r3, [r3, #1]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d16b      	bne.n	8007eae <USB_ActivateEndpoint+0x676>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007de6:	4413      	add	r3, r2
 8007de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	00da      	lsls	r2, r3, #3
 8007df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007df2:	4413      	add	r3, r2
 8007df4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007df8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e08:	801a      	strh	r2, [r3, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <USB_ActivateEndpoint+0x5f0>
 8007e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e24:	801a      	strh	r2, [r3, #0]
 8007e26:	e05d      	b.n	8007ee4 <USB_ActivateEndpoint+0x6ac>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e2e:	d81c      	bhi.n	8007e6a <USB_ActivateEndpoint+0x632>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	085b      	lsrs	r3, r3, #1
 8007e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <USB_ActivateEndpoint+0x618>
 8007e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	029b      	lsls	r3, r3, #10
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	4313      	orrs	r3, r2
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e66:	801a      	strh	r2, [r3, #0]
 8007e68:	e03c      	b.n	8007ee4 <USB_ActivateEndpoint+0x6ac>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	095b      	lsrs	r3, r3, #5
 8007e70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f003 031f 	and.w	r3, r3, #31
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <USB_ActivateEndpoint+0x652>
 8007e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e84:	3b01      	subs	r3, #1
 8007e86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	029b      	lsls	r3, r3, #10
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eaa:	801a      	strh	r2, [r3, #0]
 8007eac:	e01a      	b.n	8007ee4 <USB_ActivateEndpoint+0x6ac>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d116      	bne.n	8007ee4 <USB_ActivateEndpoint+0x6ac>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ec6:	4413      	add	r3, r2
 8007ec8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	00da      	lsls	r2, r3, #3
 8007ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ed8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ee2:	801a      	strh	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d16b      	bne.n	8007fc8 <USB_ActivateEndpoint+0x790>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f00:	4413      	add	r3, r2
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	00da      	lsls	r2, r3, #3
 8007f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f22:	801a      	strh	r2, [r3, #0]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <USB_ActivateEndpoint+0x70a>
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	e05b      	b.n	8007ffa <USB_ActivateEndpoint+0x7c2>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f48:	d81c      	bhi.n	8007f84 <USB_ActivateEndpoint+0x74c>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <USB_ActivateEndpoint+0x732>
 8007f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f64:	3301      	adds	r3, #1
 8007f66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	029b      	lsls	r3, r3, #10
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	801a      	strh	r2, [r3, #0]
 8007f82:	e03a      	b.n	8007ffa <USB_ActivateEndpoint+0x7c2>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	095b      	lsrs	r3, r3, #5
 8007f8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f003 031f 	and.w	r3, r3, #31
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d104      	bne.n	8007fa4 <USB_ActivateEndpoint+0x76c>
 8007f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	029b      	lsls	r3, r3, #10
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	e018      	b.n	8007ffa <USB_ActivateEndpoint+0x7c2>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d114      	bne.n	8007ffa <USB_ActivateEndpoint+0x7c2>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fdc:	4413      	add	r3, r2
 8007fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	00da      	lsls	r2, r3, #3
 8007fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fe8:	4413      	add	r3, r2
 8007fea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fee:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ff8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800800c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008010:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008012:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008014:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008018:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800801a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800801c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008020:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	441a      	add	r2, r3
 800802c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800802e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800803a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800803e:	b29b      	uxth	r3, r3
 8008040:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008058:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	441a      	add	r2, r3
 8008064:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800806a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800806e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008076:	b29b      	uxth	r3, r3
 8008078:	8013      	strh	r3, [r2, #0]
 800807a:	e0bc      	b.n	80081f6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800808c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01d      	beq.n	80080d4 <USB_ActivateEndpoint+0x89c>
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	441a      	add	r2, r3
 80080bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80080c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80080e4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80080e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01d      	beq.n	800812c <USB_ActivateEndpoint+0x8f4>
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008106:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	441a      	add	r2, r3
 8008114:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800811c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008124:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008128:	b29b      	uxth	r3, r3
 800812a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	78db      	ldrb	r3, [r3, #3]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d024      	beq.n	800817e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800814a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800814e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008152:	f083 0320 	eor.w	r3, r3, #32
 8008156:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	441a      	add	r2, r3
 8008164:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008168:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800816c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008178:	b29b      	uxth	r3, r3
 800817a:	8013      	strh	r3, [r2, #0]
 800817c:	e01d      	b.n	80081ba <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008194:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	441a      	add	r2, r3
 80081a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80081a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	441a      	add	r2, r3
 80081de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80081e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80081f6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	379c      	adds	r7, #156	@ 0x9c
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop

08008208 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008208:	b480      	push	{r7}
 800820a:	b08d      	sub	sp, #52	@ 0x34
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	7b1b      	ldrb	r3, [r3, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	f040 808e 	bne.w	8008338 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	785b      	ldrb	r3, [r3, #1]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d044      	beq.n	80082ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	81bb      	strh	r3, [r7, #12]
 8008232:	89bb      	ldrh	r3, [r7, #12]
 8008234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d01b      	beq.n	8008274 <USB_DeactivateEndpoint+0x6c>
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800824e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008252:	817b      	strh	r3, [r7, #10]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	441a      	add	r2, r3
 800825e:	897b      	ldrh	r3, [r7, #10]
 8008260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800826c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008270:	b29b      	uxth	r3, r3
 8008272:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29b      	uxth	r3, r3
 8008282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800828a:	813b      	strh	r3, [r7, #8]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	441a      	add	r2, r3
 8008296:	893b      	ldrh	r3, [r7, #8]
 8008298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800829c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	8013      	strh	r3, [r2, #0]
 80082ac:	e192      	b.n	80085d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	827b      	strh	r3, [r7, #18]
 80082bc:	8a7b      	ldrh	r3, [r7, #18]
 80082be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d01b      	beq.n	80082fe <USB_DeactivateEndpoint+0xf6>
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082dc:	823b      	strh	r3, [r7, #16]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	441a      	add	r2, r3
 80082e8:	8a3b      	ldrh	r3, [r7, #16]
 80082ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008314:	81fb      	strh	r3, [r7, #14]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	441a      	add	r2, r3
 8008320:	89fb      	ldrh	r3, [r7, #14]
 8008322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800832a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800832e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008332:	b29b      	uxth	r3, r3
 8008334:	8013      	strh	r3, [r2, #0]
 8008336:	e14d      	b.n	80085d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	785b      	ldrb	r3, [r3, #1]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 80a5 	bne.w	800848c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	843b      	strh	r3, [r7, #32]
 8008350:	8c3b      	ldrh	r3, [r7, #32]
 8008352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01b      	beq.n	8008392 <USB_DeactivateEndpoint+0x18a>
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800836c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008370:	83fb      	strh	r3, [r7, #30]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	441a      	add	r2, r3
 800837c:	8bfb      	ldrh	r3, [r7, #30]
 800837e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008386:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800838a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800838e:	b29b      	uxth	r3, r3
 8008390:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	83bb      	strh	r3, [r7, #28]
 80083a0:	8bbb      	ldrh	r3, [r7, #28]
 80083a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d01b      	beq.n	80083e2 <USB_DeactivateEndpoint+0x1da>
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c0:	837b      	strh	r3, [r7, #26]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	441a      	add	r2, r3
 80083cc:	8b7b      	ldrh	r3, [r7, #26]
 80083ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083de:	b29b      	uxth	r3, r3
 80083e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f8:	833b      	strh	r3, [r7, #24]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	441a      	add	r2, r3
 8008404:	8b3b      	ldrh	r3, [r7, #24]
 8008406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800840a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800840e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008412:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008416:	b29b      	uxth	r3, r3
 8008418:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800842c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008430:	82fb      	strh	r3, [r7, #22]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	441a      	add	r2, r3
 800843c:	8afb      	ldrh	r3, [r7, #22]
 800843e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800844a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800844e:	b29b      	uxth	r3, r3
 8008450:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008468:	82bb      	strh	r3, [r7, #20]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	441a      	add	r2, r3
 8008474:	8abb      	ldrh	r3, [r7, #20]
 8008476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800847a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800847e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008486:	b29b      	uxth	r3, r3
 8008488:	8013      	strh	r3, [r2, #0]
 800848a:	e0a3      	b.n	80085d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800849a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800849c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01b      	beq.n	80084dc <USB_DeactivateEndpoint+0x2d4>
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	441a      	add	r2, r3
 80084c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80084c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80084d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d8:	b29b      	uxth	r3, r3
 80084da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80084ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80084ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01b      	beq.n	800852c <USB_DeactivateEndpoint+0x324>
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800850a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	441a      	add	r2, r3
 8008516:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800851c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008524:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008528:	b29b      	uxth	r3, r3
 800852a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800853e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008542:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	441a      	add	r2, r3
 800854e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008558:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800855c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008560:	b29b      	uxth	r3, r3
 8008562:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	b29b      	uxth	r3, r3
 8008572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800857a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	441a      	add	r2, r3
 8008586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800858c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008598:	b29b      	uxth	r3, r3
 800859a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	441a      	add	r2, r3
 80085be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80085c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3734      	adds	r7, #52	@ 0x34
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b0ac      	sub	sp, #176	@ 0xb0
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	f040 84ca 	bne.w	8008f8a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d904      	bls.n	800860c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800860a:	e003      	b.n	8008614 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	7b1b      	ldrb	r3, [r3, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d122      	bne.n	8008662 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	6959      	ldr	r1, [r3, #20]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	88da      	ldrh	r2, [r3, #6]
 8008624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008628:	b29b      	uxth	r3, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 febd 	bl	80093aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800863a:	b29b      	uxth	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	4413      	add	r3, r2
 8008642:	613b      	str	r3, [r7, #16]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	00da      	lsls	r2, r3, #3
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	4413      	add	r3, r2
 800864e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008658:	b29a      	uxth	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	801a      	strh	r2, [r3, #0]
 800865e:	f000 bc6f 	b.w	8008f40 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	78db      	ldrb	r3, [r3, #3]
 8008666:	2b02      	cmp	r3, #2
 8008668:	f040 831e 	bne.w	8008ca8 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	6a1a      	ldr	r2, [r3, #32]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	429a      	cmp	r2, r3
 8008676:	f240 82cf 	bls.w	8008c18 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800868c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008690:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	441a      	add	r2, r3
 800869e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80086a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80086ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	6a1a      	ldr	r2, [r3, #32]
 80086ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086be:	1ad2      	subs	r2, r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 814f 	beq.w	800897a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	633b      	str	r3, [r7, #48]	@ 0x30
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d16b      	bne.n	80087c0 <USB_EPStartXfer+0x1de>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	461a      	mov	r2, r3
 80086f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f8:	4413      	add	r3, r2
 80086fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	00da      	lsls	r2, r3, #3
 8008702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008704:	4413      	add	r3, r2
 8008706:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800870a:	627b      	str	r3, [r7, #36]	@ 0x24
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	b29b      	uxth	r3, r3
 8008712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008716:	b29a      	uxth	r2, r3
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	801a      	strh	r2, [r3, #0]
 800871c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <USB_EPStartXfer+0x158>
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800872e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008732:	b29a      	uxth	r2, r3
 8008734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008736:	801a      	strh	r2, [r3, #0]
 8008738:	e05b      	b.n	80087f2 <USB_EPStartXfer+0x210>
 800873a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800873e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008740:	d81c      	bhi.n	800877c <USB_EPStartXfer+0x19a>
 8008742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008746:	085b      	lsrs	r3, r3, #1
 8008748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800874c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	d004      	beq.n	8008762 <USB_EPStartXfer+0x180>
 8008758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800875c:	3301      	adds	r3, #1
 800875e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29a      	uxth	r2, r3
 8008768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800876c:	b29b      	uxth	r3, r3
 800876e:	029b      	lsls	r3, r3, #10
 8008770:	b29b      	uxth	r3, r3
 8008772:	4313      	orrs	r3, r2
 8008774:	b29a      	uxth	r2, r3
 8008776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008778:	801a      	strh	r2, [r3, #0]
 800877a:	e03a      	b.n	80087f2 <USB_EPStartXfer+0x210>
 800877c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008780:	095b      	lsrs	r3, r3, #5
 8008782:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800878a:	f003 031f 	and.w	r3, r3, #31
 800878e:	2b00      	cmp	r3, #0
 8008790:	d104      	bne.n	800879c <USB_EPStartXfer+0x1ba>
 8008792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008796:	3b01      	subs	r3, #1
 8008798:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	029b      	lsls	r3, r3, #10
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	4313      	orrs	r3, r2
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087bc:	801a      	strh	r2, [r3, #0]
 80087be:	e018      	b.n	80087f2 <USB_EPStartXfer+0x210>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d114      	bne.n	80087f2 <USB_EPStartXfer+0x210>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	461a      	mov	r2, r3
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	4413      	add	r3, r2
 80087d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	00da      	lsls	r2, r3, #3
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	4413      	add	r3, r2
 80087e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80087e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	895b      	ldrh	r3, [r3, #10]
 80087f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	6959      	ldr	r1, [r3, #20]
 80087fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008802:	b29b      	uxth	r3, r3
 8008804:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fdce 	bl	80093aa <USB_WritePMA>
            ep->xfer_buff += len;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	695a      	ldr	r2, [r3, #20]
 8008812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008816:	441a      	add	r2, r3
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	6a1a      	ldr	r2, [r3, #32]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	429a      	cmp	r2, r3
 8008826:	d907      	bls.n	8008838 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	6a1a      	ldr	r2, [r3, #32]
 800882c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008830:	1ad2      	subs	r2, r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	621a      	str	r2, [r3, #32]
 8008836:	e006      	b.n	8008846 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	6a1b      	ldr	r3, [r3, #32]
 800883c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2200      	movs	r2, #0
 8008844:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d16b      	bne.n	8008926 <USB_EPStartXfer+0x344>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	61bb      	str	r3, [r7, #24]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008858:	b29b      	uxth	r3, r3
 800885a:	461a      	mov	r2, r3
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	4413      	add	r3, r2
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	00da      	lsls	r2, r3, #3
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	4413      	add	r3, r2
 800886c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008870:	617b      	str	r3, [r7, #20]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29b      	uxth	r3, r3
 8008878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800887c:	b29a      	uxth	r2, r3
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	801a      	strh	r2, [r3, #0]
 8008882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10a      	bne.n	80088a0 <USB_EPStartXfer+0x2be>
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008898:	b29a      	uxth	r2, r3
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	801a      	strh	r2, [r3, #0]
 800889e:	e05d      	b.n	800895c <USB_EPStartXfer+0x37a>
 80088a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80088a6:	d81c      	bhi.n	80088e2 <USB_EPStartXfer+0x300>
 80088a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ac:	085b      	lsrs	r3, r3, #1
 80088ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d004      	beq.n	80088c8 <USB_EPStartXfer+0x2e6>
 80088be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80088c2:	3301      	adds	r3, #1
 80088c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	029b      	lsls	r3, r3, #10
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	4313      	orrs	r3, r2
 80088da:	b29a      	uxth	r2, r3
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	e03c      	b.n	800895c <USB_EPStartXfer+0x37a>
 80088e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088e6:	095b      	lsrs	r3, r3, #5
 80088e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088f0:	f003 031f 	and.w	r3, r3, #31
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d104      	bne.n	8008902 <USB_EPStartXfer+0x320>
 80088f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80088fc:	3b01      	subs	r3, #1
 80088fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	b29a      	uxth	r2, r3
 8008908:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800890c:	b29b      	uxth	r3, r3
 800890e:	029b      	lsls	r3, r3, #10
 8008910:	b29b      	uxth	r3, r3
 8008912:	4313      	orrs	r3, r2
 8008914:	b29b      	uxth	r3, r3
 8008916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800891e:	b29a      	uxth	r2, r3
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	801a      	strh	r2, [r3, #0]
 8008924:	e01a      	b.n	800895c <USB_EPStartXfer+0x37a>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d116      	bne.n	800895c <USB_EPStartXfer+0x37a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	623b      	str	r3, [r7, #32]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008938:	b29b      	uxth	r3, r3
 800893a:	461a      	mov	r2, r3
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	4413      	add	r3, r2
 8008940:	623b      	str	r3, [r7, #32]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	00da      	lsls	r2, r3, #3
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	4413      	add	r3, r2
 800894c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008950:	61fb      	str	r3, [r7, #28]
 8008952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008956:	b29a      	uxth	r2, r3
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	891b      	ldrh	r3, [r3, #8]
 8008960:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	6959      	ldr	r1, [r3, #20]
 8008968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800896c:	b29b      	uxth	r3, r3
 800896e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fd19 	bl	80093aa <USB_WritePMA>
 8008978:	e2e2      	b.n	8008f40 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	785b      	ldrb	r3, [r3, #1]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d16b      	bne.n	8008a5a <USB_EPStartXfer+0x478>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800898c:	b29b      	uxth	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008992:	4413      	add	r3, r2
 8008994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	00da      	lsls	r2, r3, #3
 800899c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800899e:	4413      	add	r3, r2
 80089a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80089a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089b4:	801a      	strh	r2, [r3, #0]
 80089b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <USB_EPStartXfer+0x3f2>
 80089be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089d0:	801a      	strh	r2, [r3, #0]
 80089d2:	e05d      	b.n	8008a90 <USB_EPStartXfer+0x4ae>
 80089d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80089da:	d81c      	bhi.n	8008a16 <USB_EPStartXfer+0x434>
 80089dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089e0:	085b      	lsrs	r3, r3, #1
 80089e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d004      	beq.n	80089fc <USB_EPStartXfer+0x41a>
 80089f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089f6:	3301      	adds	r3, #1
 80089f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	029b      	lsls	r3, r3, #10
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a12:	801a      	strh	r2, [r3, #0]
 8008a14:	e03c      	b.n	8008a90 <USB_EPStartXfer+0x4ae>
 8008a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <USB_EPStartXfer+0x454>
 8008a2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a30:	3b01      	subs	r3, #1
 8008a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	029b      	lsls	r3, r3, #10
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	4313      	orrs	r3, r2
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a56:	801a      	strh	r2, [r3, #0]
 8008a58:	e01a      	b.n	8008a90 <USB_EPStartXfer+0x4ae>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d116      	bne.n	8008a90 <USB_EPStartXfer+0x4ae>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	461a      	mov	r2, r3
 8008a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a72:	4413      	add	r3, r2
 8008a74:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	00da      	lsls	r2, r3, #3
 8008a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a7e:	4413      	add	r3, r2
 8008a80:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	891b      	ldrh	r3, [r3, #8]
 8008a94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	6959      	ldr	r1, [r3, #20]
 8008a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fc7f 	bl	80093aa <USB_WritePMA>
            ep->xfer_buff += len;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ab4:	441a      	add	r2, r3
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6a1a      	ldr	r2, [r3, #32]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d907      	bls.n	8008ad6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	6a1a      	ldr	r2, [r3, #32]
 8008aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ace:	1ad2      	subs	r2, r2, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	621a      	str	r2, [r3, #32]
 8008ad4:	e006      	b.n	8008ae4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	785b      	ldrb	r3, [r3, #1]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d16b      	bne.n	8008bc8 <USB_EPStartXfer+0x5e6>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	461a      	mov	r2, r3
 8008afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b00:	4413      	add	r3, r2
 8008b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	00da      	lsls	r2, r3, #3
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b22:	801a      	strh	r2, [r3, #0]
 8008b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10a      	bne.n	8008b42 <USB_EPStartXfer+0x560>
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	e05b      	b.n	8008bfa <USB_EPStartXfer+0x618>
 8008b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b46:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b48:	d81c      	bhi.n	8008b84 <USB_EPStartXfer+0x5a2>
 8008b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d004      	beq.n	8008b6a <USB_EPStartXfer+0x588>
 8008b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b64:	3301      	adds	r3, #1
 8008b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	029b      	lsls	r3, r3, #10
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b80:	801a      	strh	r2, [r3, #0]
 8008b82:	e03a      	b.n	8008bfa <USB_EPStartXfer+0x618>
 8008b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b88:	095b      	lsrs	r3, r3, #5
 8008b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b92:	f003 031f 	and.w	r3, r3, #31
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d104      	bne.n	8008ba4 <USB_EPStartXfer+0x5c2>
 8008b9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	029b      	lsls	r3, r3, #10
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	801a      	strh	r2, [r3, #0]
 8008bc6:	e018      	b.n	8008bfa <USB_EPStartXfer+0x618>
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d114      	bne.n	8008bfa <USB_EPStartXfer+0x618>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bdc:	4413      	add	r3, r2
 8008bde:	643b      	str	r3, [r7, #64]	@ 0x40
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	00da      	lsls	r2, r3, #3
 8008be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008be8:	4413      	add	r3, r2
 8008bea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	895b      	ldrh	r3, [r3, #10]
 8008bfe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6959      	ldr	r1, [r3, #20]
 8008c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fbca 	bl	80093aa <USB_WritePMA>
 8008c16:	e193      	b.n	8008f40 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c36:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	441a      	add	r2, r3
 8008c44:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008c48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c6c:	4413      	add	r3, r2
 8008c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	00da      	lsls	r2, r3, #3
 8008c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c78:	4413      	add	r3, r2
 8008c7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	891b      	ldrh	r3, [r3, #8]
 8008c8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	6959      	ldr	r1, [r3, #20]
 8008c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fb82 	bl	80093aa <USB_WritePMA>
 8008ca6:	e14b      	b.n	8008f40 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	6a1a      	ldr	r2, [r3, #32]
 8008cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cb0:	1ad2      	subs	r2, r2, r3
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 809a 	beq.w	8008e02 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d16b      	bne.n	8008db2 <USB_EPStartXfer+0x7d0>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cea:	4413      	add	r3, r2
 8008cec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	00da      	lsls	r2, r3, #3
 8008cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008cfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d0c:	801a      	strh	r2, [r3, #0]
 8008d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10a      	bne.n	8008d2c <USB_EPStartXfer+0x74a>
 8008d16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d28:	801a      	strh	r2, [r3, #0]
 8008d2a:	e05b      	b.n	8008de4 <USB_EPStartXfer+0x802>
 8008d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d30:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d32:	d81c      	bhi.n	8008d6e <USB_EPStartXfer+0x78c>
 8008d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d004      	beq.n	8008d54 <USB_EPStartXfer+0x772>
 8008d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d4e:	3301      	adds	r3, #1
 8008d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	029b      	lsls	r3, r3, #10
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	4313      	orrs	r3, r2
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d6a:	801a      	strh	r2, [r3, #0]
 8008d6c:	e03a      	b.n	8008de4 <USB_EPStartXfer+0x802>
 8008d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d72:	095b      	lsrs	r3, r3, #5
 8008d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d7c:	f003 031f 	and.w	r3, r3, #31
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d104      	bne.n	8008d8e <USB_EPStartXfer+0x7ac>
 8008d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	029b      	lsls	r3, r3, #10
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dae:	801a      	strh	r2, [r3, #0]
 8008db0:	e018      	b.n	8008de4 <USB_EPStartXfer+0x802>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d114      	bne.n	8008de4 <USB_EPStartXfer+0x802>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008dc6:	4413      	add	r3, r2
 8008dc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	00da      	lsls	r2, r3, #3
 8008dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008de2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	895b      	ldrh	r3, [r3, #10]
 8008de8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	6959      	ldr	r1, [r3, #20]
 8008df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fad5 	bl	80093aa <USB_WritePMA>
 8008e00:	e09e      	b.n	8008f40 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	785b      	ldrb	r3, [r3, #1]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d16b      	bne.n	8008ee2 <USB_EPStartXfer+0x900>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	461a      	mov	r2, r3
 8008e18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e1a:	4413      	add	r3, r2
 8008e1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	00da      	lsls	r2, r3, #3
 8008e24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e26:	4413      	add	r3, r2
 8008e28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e3c:	801a      	strh	r2, [r3, #0]
 8008e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10a      	bne.n	8008e5c <USB_EPStartXfer+0x87a>
 8008e46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e58:	801a      	strh	r2, [r3, #0]
 8008e5a:	e063      	b.n	8008f24 <USB_EPStartXfer+0x942>
 8008e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e62:	d81c      	bhi.n	8008e9e <USB_EPStartXfer+0x8bc>
 8008e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d004      	beq.n	8008e84 <USB_EPStartXfer+0x8a2>
 8008e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008e7e:	3301      	adds	r3, #1
 8008e80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	029b      	lsls	r3, r3, #10
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4313      	orrs	r3, r2
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e9a:	801a      	strh	r2, [r3, #0]
 8008e9c:	e042      	b.n	8008f24 <USB_EPStartXfer+0x942>
 8008e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eac:	f003 031f 	and.w	r3, r3, #31
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d104      	bne.n	8008ebe <USB_EPStartXfer+0x8dc>
 8008eb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	029b      	lsls	r3, r3, #10
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ede:	801a      	strh	r2, [r3, #0]
 8008ee0:	e020      	b.n	8008f24 <USB_EPStartXfer+0x942>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	785b      	ldrb	r3, [r3, #1]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d11c      	bne.n	8008f24 <USB_EPStartXfer+0x942>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008efe:	4413      	add	r3, r2
 8008f00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	00da      	lsls	r2, r3, #3
 8008f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f0e:	4413      	add	r3, r2
 8008f10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	891b      	ldrh	r3, [r3, #8]
 8008f28:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	6959      	ldr	r1, [r3, #20]
 8008f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fa35 	bl	80093aa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f56:	817b      	strh	r3, [r7, #10]
 8008f58:	897b      	ldrh	r3, [r7, #10]
 8008f5a:	f083 0310 	eor.w	r3, r3, #16
 8008f5e:	817b      	strh	r3, [r7, #10]
 8008f60:	897b      	ldrh	r3, [r7, #10]
 8008f62:	f083 0320 	eor.w	r3, r3, #32
 8008f66:	817b      	strh	r3, [r7, #10]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	441a      	add	r2, r3
 8008f72:	897b      	ldrh	r3, [r7, #10]
 8008f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	8013      	strh	r3, [r2, #0]
 8008f88:	e0d5      	b.n	8009136 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	7b1b      	ldrb	r3, [r3, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d156      	bne.n	8009040 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d122      	bne.n	8008fe0 <USB_EPStartXfer+0x9fe>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	78db      	ldrb	r3, [r3, #3]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d11e      	bne.n	8008fe0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fb8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	441a      	add	r2, r3
 8008fc6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fd2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	8013      	strh	r3, [r2, #0]
 8008fde:	e01d      	b.n	800901c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	441a      	add	r2, r3
 8009004:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800900c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009018:	b29b      	uxth	r3, r3
 800901a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	699a      	ldr	r2, [r3, #24]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	429a      	cmp	r2, r3
 8009026:	d907      	bls.n	8009038 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	699a      	ldr	r2, [r3, #24]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	1ad2      	subs	r2, r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	619a      	str	r2, [r3, #24]
 8009036:	e054      	b.n	80090e2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2200      	movs	r2, #0
 800903c:	619a      	str	r2, [r3, #24]
 800903e:	e050      	b.n	80090e2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	78db      	ldrb	r3, [r3, #3]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d142      	bne.n	80090ce <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	69db      	ldr	r3, [r3, #28]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d048      	beq.n	80090e2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009060:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d005      	beq.n	8009078 <USB_EPStartXfer+0xa96>
 800906c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10b      	bne.n	8009090 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009078:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800907c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009080:	2b00      	cmp	r3, #0
 8009082:	d12e      	bne.n	80090e2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009084:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d128      	bne.n	80090e2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	b29b      	uxth	r3, r3
 800909e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a6:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	441a      	add	r2, r3
 80090b4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80090b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	8013      	strh	r3, [r2, #0]
 80090cc:	e009      	b.n	80090e2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	78db      	ldrb	r3, [r3, #3]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d103      	bne.n	80090de <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2200      	movs	r2, #0
 80090da:	619a      	str	r2, [r3, #24]
 80090dc:	e001      	b.n	80090e2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e02a      	b.n	8009138 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090f8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80090fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009100:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009104:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009108:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800910c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009110:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	441a      	add	r2, r3
 800911e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800912a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800912e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009132:	b29b      	uxth	r3, r3
 8009134:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	37b0      	adds	r7, #176	@ 0xb0
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	785b      	ldrb	r3, [r3, #1]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d020      	beq.n	8009194 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4413      	add	r3, r2
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	b29b      	uxth	r3, r3
 8009160:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009168:	81bb      	strh	r3, [r7, #12]
 800916a:	89bb      	ldrh	r3, [r7, #12]
 800916c:	f083 0310 	eor.w	r3, r3, #16
 8009170:	81bb      	strh	r3, [r7, #12]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	441a      	add	r2, r3
 800917c:	89bb      	ldrh	r3, [r7, #12]
 800917e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009182:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800918a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800918e:	b29b      	uxth	r3, r3
 8009190:	8013      	strh	r3, [r2, #0]
 8009192:	e01f      	b.n	80091d4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091aa:	81fb      	strh	r3, [r7, #14]
 80091ac:	89fb      	ldrh	r3, [r7, #14]
 80091ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80091b2:	81fb      	strh	r3, [r7, #14]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	441a      	add	r2, r3
 80091be:	89fb      	ldrh	r3, [r7, #14]
 80091c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b087      	sub	sp, #28
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d04c      	beq.n	800928e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	823b      	strh	r3, [r7, #16]
 8009202:	8a3b      	ldrh	r3, [r7, #16]
 8009204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01b      	beq.n	8009244 <USB_EPClearStall+0x62>
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	881b      	ldrh	r3, [r3, #0]
 8009218:	b29b      	uxth	r3, r3
 800921a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800921e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009222:	81fb      	strh	r3, [r7, #14]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	441a      	add	r2, r3
 800922e:	89fb      	ldrh	r3, [r7, #14]
 8009230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800923c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009240:	b29b      	uxth	r3, r3
 8009242:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	78db      	ldrb	r3, [r3, #3]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d06c      	beq.n	8009326 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	b29b      	uxth	r3, r3
 800925a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800925e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009262:	81bb      	strh	r3, [r7, #12]
 8009264:	89bb      	ldrh	r3, [r7, #12]
 8009266:	f083 0320 	eor.w	r3, r3, #32
 800926a:	81bb      	strh	r3, [r7, #12]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	441a      	add	r2, r3
 8009276:	89bb      	ldrh	r3, [r7, #12]
 8009278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800927c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009288:	b29b      	uxth	r3, r3
 800928a:	8013      	strh	r3, [r2, #0]
 800928c:	e04b      	b.n	8009326 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	82fb      	strh	r3, [r7, #22]
 800929c:	8afb      	ldrh	r3, [r7, #22]
 800929e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d01b      	beq.n	80092de <USB_EPClearStall+0xfc>
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092bc:	82bb      	strh	r3, [r7, #20]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	441a      	add	r2, r3
 80092c8:	8abb      	ldrh	r3, [r7, #20]
 80092ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092da:	b29b      	uxth	r3, r3
 80092dc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f4:	827b      	strh	r3, [r7, #18]
 80092f6:	8a7b      	ldrh	r3, [r7, #18]
 80092f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80092fc:	827b      	strh	r3, [r7, #18]
 80092fe:	8a7b      	ldrh	r3, [r7, #18]
 8009300:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009304:	827b      	strh	r3, [r7, #18]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	441a      	add	r2, r3
 8009310:	8a7b      	ldrh	r3, [r7, #18]
 8009312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800931a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800931e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009322:	b29b      	uxth	r3, r3
 8009324:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	371c      	adds	r7, #28
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d103      	bne.n	800934e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2280      	movs	r2, #128	@ 0x80
 800934a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800936a:	b29b      	uxth	r3, r3
 800936c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009374:	b29a      	uxth	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800938a:	b480      	push	{r7}
 800938c:	b085      	sub	sp, #20
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009398:	b29b      	uxth	r3, r3
 800939a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800939c:	68fb      	ldr	r3, [r7, #12]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b08b      	sub	sp, #44	@ 0x2c
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	4611      	mov	r1, r2
 80093b6:	461a      	mov	r2, r3
 80093b8:	460b      	mov	r3, r1
 80093ba:	80fb      	strh	r3, [r7, #6]
 80093bc:	4613      	mov	r3, r2
 80093be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80093c0:	88bb      	ldrh	r3, [r7, #4]
 80093c2:	3301      	adds	r3, #1
 80093c4:	085b      	lsrs	r3, r3, #1
 80093c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80093d0:	88fa      	ldrh	r2, [r7, #6]
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093da:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e0:	e01b      	b.n	800941a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	3301      	adds	r3, #1
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	b21a      	sxth	r2, r3
 80093f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	b21b      	sxth	r3, r3
 80093fa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	8a7a      	ldrh	r2, [r7, #18]
 8009400:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	3302      	adds	r3, #2
 8009406:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	3301      	adds	r3, #1
 800940c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	3301      	adds	r3, #1
 8009412:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009416:	3b01      	subs	r3, #1
 8009418:	627b      	str	r3, [r7, #36]	@ 0x24
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1e0      	bne.n	80093e2 <USB_WritePMA+0x38>
  }
}
 8009420:	bf00      	nop
 8009422:	bf00      	nop
 8009424:	372c      	adds	r7, #44	@ 0x2c
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800942e:	b480      	push	{r7}
 8009430:	b08b      	sub	sp, #44	@ 0x2c
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	60b9      	str	r1, [r7, #8]
 8009438:	4611      	mov	r1, r2
 800943a:	461a      	mov	r2, r3
 800943c:	460b      	mov	r3, r1
 800943e:	80fb      	strh	r3, [r7, #6]
 8009440:	4613      	mov	r3, r2
 8009442:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009444:	88bb      	ldrh	r3, [r7, #4]
 8009446:	085b      	lsrs	r3, r3, #1
 8009448:	b29b      	uxth	r3, r3
 800944a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009454:	88fa      	ldrh	r2, [r7, #6]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800945e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	627b      	str	r3, [r7, #36]	@ 0x24
 8009464:	e018      	b.n	8009498 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	b29b      	uxth	r3, r3
 800946c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	3302      	adds	r3, #2
 8009472:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	b2da      	uxtb	r2, r3
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	3301      	adds	r3, #1
 8009480:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	0a1b      	lsrs	r3, r3, #8
 8009486:	b2da      	uxtb	r2, r3
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	3301      	adds	r3, #1
 8009490:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009494:	3b01      	subs	r3, #1
 8009496:	627b      	str	r3, [r7, #36]	@ 0x24
 8009498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e3      	bne.n	8009466 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800949e:	88bb      	ldrh	r3, [r7, #4]
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	701a      	strb	r2, [r3, #0]
  }
}
 80094ba:	bf00      	nop
 80094bc:	372c      	adds	r7, #44	@ 0x2c
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094d2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80094d6:	f002 f911 	bl	800b6fc <USBD_static_malloc>
 80094da:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d105      	bne.n	80094ee <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80094ea:	2302      	movs	r3, #2
 80094ec:	e066      	b.n	80095bc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	7c1b      	ldrb	r3, [r3, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d119      	bne.n	8009532 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80094fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009502:	2202      	movs	r2, #2
 8009504:	2181      	movs	r1, #129	@ 0x81
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 ff9f 	bl	800b44a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009516:	2202      	movs	r2, #2
 8009518:	2101      	movs	r1, #1
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 ff95 	bl	800b44a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2210      	movs	r2, #16
 800952c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009530:	e016      	b.n	8009560 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009532:	2340      	movs	r3, #64	@ 0x40
 8009534:	2202      	movs	r2, #2
 8009536:	2181      	movs	r1, #129	@ 0x81
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 ff86 	bl	800b44a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009544:	2340      	movs	r3, #64	@ 0x40
 8009546:	2202      	movs	r2, #2
 8009548:	2101      	movs	r1, #1
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 ff7d 	bl	800b44a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2210      	movs	r2, #16
 800955c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009560:	2308      	movs	r3, #8
 8009562:	2203      	movs	r2, #3
 8009564:	2182      	movs	r1, #130	@ 0x82
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 ff6f 	bl	800b44a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7c1b      	ldrb	r3, [r3, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d109      	bne.n	80095aa <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800959c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095a0:	2101      	movs	r1, #1
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f002 f840 	bl	800b628 <USBD_LL_PrepareReceive>
 80095a8:	e007      	b.n	80095ba <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095b0:	2340      	movs	r3, #64	@ 0x40
 80095b2:	2101      	movs	r1, #1
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f002 f837 	bl	800b628 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80095d0:	2181      	movs	r1, #129	@ 0x81
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 ff5f 	bl	800b496 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80095de:	2101      	movs	r1, #1
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 ff58 	bl	800b496 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80095ee:	2182      	movs	r1, #130	@ 0x82
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 ff50 	bl	800b496 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00e      	beq.n	800962e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009620:	4618      	mov	r0, r3
 8009622:	f002 f879 	bl	800b718 <USBD_static_free>
    pdev->pClassData = NULL;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009648:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800965c:	2303      	movs	r3, #3
 800965e:	e0af      	b.n	80097c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009668:	2b00      	cmp	r3, #0
 800966a:	d03f      	beq.n	80096ec <USBD_CDC_Setup+0xb4>
 800966c:	2b20      	cmp	r3, #32
 800966e:	f040 809f 	bne.w	80097b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	88db      	ldrh	r3, [r3, #6]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d02e      	beq.n	80096d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	b25b      	sxtb	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	da16      	bge.n	80096b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009690:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	88d2      	ldrh	r2, [r2, #6]
 8009696:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	88db      	ldrh	r3, [r3, #6]
 800969c:	2b07      	cmp	r3, #7
 800969e:	bf28      	it	cs
 80096a0:	2307      	movcs	r3, #7
 80096a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	89fa      	ldrh	r2, [r7, #14]
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f001 facd 	bl	800ac4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80096b0:	e085      	b.n	80097be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	785a      	ldrb	r2, [r3, #1]
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	88db      	ldrh	r3, [r3, #6]
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80096c8:	6939      	ldr	r1, [r7, #16]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	88db      	ldrh	r3, [r3, #6]
 80096ce:	461a      	mov	r2, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f001 fae6 	bl	800aca2 <USBD_CtlPrepareRx>
      break;
 80096d6:	e072      	b.n	80097be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	7850      	ldrb	r0, [r2, #1]
 80096e4:	2200      	movs	r2, #0
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	4798      	blx	r3
      break;
 80096ea:	e068      	b.n	80097be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	785b      	ldrb	r3, [r3, #1]
 80096f0:	2b0b      	cmp	r3, #11
 80096f2:	d852      	bhi.n	800979a <USBD_CDC_Setup+0x162>
 80096f4:	a201      	add	r2, pc, #4	@ (adr r2, 80096fc <USBD_CDC_Setup+0xc4>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	0800972d 	.word	0x0800972d
 8009700:	080097a9 	.word	0x080097a9
 8009704:	0800979b 	.word	0x0800979b
 8009708:	0800979b 	.word	0x0800979b
 800970c:	0800979b 	.word	0x0800979b
 8009710:	0800979b 	.word	0x0800979b
 8009714:	0800979b 	.word	0x0800979b
 8009718:	0800979b 	.word	0x0800979b
 800971c:	0800979b 	.word	0x0800979b
 8009720:	0800979b 	.word	0x0800979b
 8009724:	08009757 	.word	0x08009757
 8009728:	08009781 	.word	0x08009781
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b03      	cmp	r3, #3
 8009736:	d107      	bne.n	8009748 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009738:	f107 030a 	add.w	r3, r7, #10
 800973c:	2202      	movs	r2, #2
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f001 fa82 	bl	800ac4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009746:	e032      	b.n	80097ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 fa0c 	bl	800ab68 <USBD_CtlError>
            ret = USBD_FAIL;
 8009750:	2303      	movs	r3, #3
 8009752:	75fb      	strb	r3, [r7, #23]
          break;
 8009754:	e02b      	b.n	80097ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b03      	cmp	r3, #3
 8009760:	d107      	bne.n	8009772 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009762:	f107 030d 	add.w	r3, r7, #13
 8009766:	2201      	movs	r2, #1
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 fa6d 	bl	800ac4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009770:	e01d      	b.n	80097ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f001 f9f7 	bl	800ab68 <USBD_CtlError>
            ret = USBD_FAIL;
 800977a:	2303      	movs	r3, #3
 800977c:	75fb      	strb	r3, [r7, #23]
          break;
 800977e:	e016      	b.n	80097ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b03      	cmp	r3, #3
 800978a:	d00f      	beq.n	80097ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f001 f9ea 	bl	800ab68 <USBD_CtlError>
            ret = USBD_FAIL;
 8009794:	2303      	movs	r3, #3
 8009796:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009798:	e008      	b.n	80097ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f001 f9e3 	bl	800ab68 <USBD_CtlError>
          ret = USBD_FAIL;
 80097a2:	2303      	movs	r3, #3
 80097a4:	75fb      	strb	r3, [r7, #23]
          break;
 80097a6:	e002      	b.n	80097ae <USBD_CDC_Setup+0x176>
          break;
 80097a8:	bf00      	nop
 80097aa:	e008      	b.n	80097be <USBD_CDC_Setup+0x186>
          break;
 80097ac:	bf00      	nop
      }
      break;
 80097ae:	e006      	b.n	80097be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 f9d8 	bl	800ab68 <USBD_CtlError>
      ret = USBD_FAIL;
 80097b8:	2303      	movs	r3, #3
 80097ba:	75fb      	strb	r3, [r7, #23]
      break;
 80097bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80097be:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80097da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e04f      	b.n	800988a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80097f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80097f2:	78fa      	ldrb	r2, [r7, #3]
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	4613      	mov	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	440b      	add	r3, r1
 8009800:	3318      	adds	r3, #24
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d029      	beq.n	800985c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009808:	78fa      	ldrb	r2, [r7, #3]
 800980a:	6879      	ldr	r1, [r7, #4]
 800980c:	4613      	mov	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	440b      	add	r3, r1
 8009816:	3318      	adds	r3, #24
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	78f9      	ldrb	r1, [r7, #3]
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	460b      	mov	r3, r1
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	00db      	lsls	r3, r3, #3
 8009826:	4403      	add	r3, r0
 8009828:	3320      	adds	r3, #32
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009830:	fb01 f303 	mul.w	r3, r1, r3
 8009834:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009836:	2b00      	cmp	r3, #0
 8009838:	d110      	bne.n	800985c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800983a:	78fa      	ldrb	r2, [r7, #3]
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	440b      	add	r3, r1
 8009848:	3318      	adds	r3, #24
 800984a:	2200      	movs	r2, #0
 800984c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800984e:	78f9      	ldrb	r1, [r7, #3]
 8009850:	2300      	movs	r3, #0
 8009852:	2200      	movs	r2, #0
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f001 fec6 	bl	800b5e6 <USBD_LL_Transmit>
 800985a:	e015      	b.n	8009888 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2200      	movs	r2, #0
 8009860:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009884:	78fa      	ldrb	r2, [r7, #3]
 8009886:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	460b      	mov	r3, r1
 800989c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80098a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e015      	b.n	80098e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	4619      	mov	r1, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f001 fed6 	bl	800b66a <USBD_LL_GetRxDataSize>
 80098be:	4602      	mov	r2, r0
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80098da:	4611      	mov	r1, r2
 80098dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80098f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80098fe:	2303      	movs	r3, #3
 8009900:	e01a      	b.n	8009938 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d014      	beq.n	8009936 <USBD_CDC_EP0_RxReady+0x4e>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009912:	2bff      	cmp	r3, #255	@ 0xff
 8009914:	d00f      	beq.n	8009936 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009924:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800992c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	22ff      	movs	r2, #255	@ 0xff
 8009932:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2243      	movs	r2, #67	@ 0x43
 800994c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800994e:	4b03      	ldr	r3, [pc, #12]	@ (800995c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009950:	4618      	mov	r0, r3
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	200000e8 	.word	0x200000e8

08009960 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2243      	movs	r2, #67	@ 0x43
 800996c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800996e:	4b03      	ldr	r3, [pc, #12]	@ (800997c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	200000a4 	.word	0x200000a4

08009980 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2243      	movs	r2, #67	@ 0x43
 800998c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800998e:	4b03      	ldr	r3, [pc, #12]	@ (800999c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009990:	4618      	mov	r0, r3
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	2000012c 	.word	0x2000012c

080099a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	220a      	movs	r2, #10
 80099ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80099ae:	4b03      	ldr	r3, [pc, #12]	@ (80099bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	20000060 	.word	0x20000060

080099c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e004      	b.n	80099de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b087      	sub	sp, #28
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80099fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e008      	b.n	8009a1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b085      	sub	sp, #20
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e004      	b.n	8009a4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e01a      	b.n	8009ab0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d114      	bne.n	8009aae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009aa2:	2181      	movs	r1, #129	@ 0x81
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 fd9e 	bl	800b5e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e016      	b.n	8009b04 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	7c1b      	ldrb	r3, [r3, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d109      	bne.n	8009af2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ae4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ae8:	2101      	movs	r1, #1
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f001 fd9c 	bl	800b628 <USBD_LL_PrepareReceive>
 8009af0:	e007      	b.n	8009b02 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009af8:	2340      	movs	r3, #64	@ 0x40
 8009afa:	2101      	movs	r1, #1
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f001 fd93 	bl	800b628 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	4613      	mov	r3, r2
 8009b18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e01f      	b.n	8009b64 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d003      	beq.n	8009b4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	79fa      	ldrb	r2, [r7, #7]
 8009b56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f001 fbfb 	bl	800b354 <USBD_LL_Init>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d101      	bne.n	8009b84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e016      	b.n	8009bb2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00b      	beq.n	8009bb0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba0:	f107 020e 	add.w	r2, r7, #14
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	4798      	blx	r3
 8009ba8:	4602      	mov	r2, r0
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b082      	sub	sp, #8
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f001 fc26 	bl	800b414 <USBD_LL_Start>
 8009bc8:	4603      	mov	r3, r0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d009      	beq.n	8009c16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	78fa      	ldrb	r2, [r7, #3]
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	4798      	blx	r3
 8009c12:	4603      	mov	r3, r0
 8009c14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d007      	beq.n	8009c46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	78fa      	ldrb	r2, [r7, #3]
 8009c40:	4611      	mov	r1, r2
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	4798      	blx	r3
  }

  return USBD_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 ff46 	bl	800aaf4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009c76:	461a      	mov	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009c84:	f003 031f 	and.w	r3, r3, #31
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d01a      	beq.n	8009cc2 <USBD_LL_SetupStage+0x72>
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d822      	bhi.n	8009cd6 <USBD_LL_SetupStage+0x86>
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <USBD_LL_SetupStage+0x4a>
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d00a      	beq.n	8009cae <USBD_LL_SetupStage+0x5e>
 8009c98:	e01d      	b.n	8009cd6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f9ee 	bl	800a084 <USBD_StdDevReq>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]
      break;
 8009cac:	e020      	b.n	8009cf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fa52 	bl	800a160 <USBD_StdItfReq>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc0:	e016      	b.n	8009cf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fa91 	bl	800a1f2 <USBD_StdEPReq>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd4:	e00c      	b.n	8009cf0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009cdc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 fbf5 	bl	800b4d4 <USBD_LL_StallEP>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]
      break;
 8009cee:	bf00      	nop
  }

  return ret;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	60f8      	str	r0, [r7, #12]
 8009d02:	460b      	mov	r3, r1
 8009d04:	607a      	str	r2, [r7, #4]
 8009d06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d138      	bne.n	8009d80 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009d14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d1c:	2b03      	cmp	r3, #3
 8009d1e:	d14a      	bne.n	8009db6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d913      	bls.n	8009d54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	1ad2      	subs	r2, r2, r3
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	68da      	ldr	r2, [r3, #12]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	4293      	cmp	r3, r2
 8009d44:	bf28      	it	cs
 8009d46:	4613      	movcs	r3, r2
 8009d48:	461a      	mov	r2, r3
 8009d4a:	6879      	ldr	r1, [r7, #4]
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 ffc5 	bl	800acdc <USBD_CtlContinueRx>
 8009d52:	e030      	b.n	8009db6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d10b      	bne.n	8009d78 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d005      	beq.n	8009d78 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 ffc0 	bl	800acfe <USBD_CtlSendStatus>
 8009d7e:	e01a      	b.n	8009db6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	d114      	bne.n	8009db6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00e      	beq.n	8009db6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	7afa      	ldrb	r2, [r7, #11]
 8009da2:	4611      	mov	r1, r2
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	4798      	blx	r3
 8009da8:	4603      	mov	r3, r0
 8009daa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
 8009db4:	e000      	b.n	8009db8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009dce:	7afb      	ldrb	r3, [r7, #11]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d16b      	bne.n	8009eac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3314      	adds	r3, #20
 8009dd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d156      	bne.n	8009e92 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	689a      	ldr	r2, [r3, #8]
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d914      	bls.n	8009e1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	1ad2      	subs	r2, r2, r3
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	461a      	mov	r2, r3
 8009e04:	6879      	ldr	r1, [r7, #4]
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f000 ff3a 	bl	800ac80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2100      	movs	r1, #0
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f001 fc08 	bl	800b628 <USBD_LL_PrepareReceive>
 8009e18:	e03b      	b.n	8009e92 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	68da      	ldr	r2, [r3, #12]
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d11c      	bne.n	8009e60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d316      	bcc.n	8009e60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d20f      	bcs.n	8009e60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e40:	2200      	movs	r2, #0
 8009e42:	2100      	movs	r1, #0
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f000 ff1b 	bl	800ac80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e52:	2300      	movs	r3, #0
 8009e54:	2200      	movs	r2, #0
 8009e56:	2100      	movs	r1, #0
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f001 fbe5 	bl	800b628 <USBD_LL_PrepareReceive>
 8009e5e:	e018      	b.n	8009e92 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	d10b      	bne.n	8009e84 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d005      	beq.n	8009e84 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e84:	2180      	movs	r1, #128	@ 0x80
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f001 fb24 	bl	800b4d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 ff49 	bl	800ad24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d122      	bne.n	8009ee2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f7ff fe98 	bl	8009bd2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009eaa:	e01a      	b.n	8009ee2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d114      	bne.n	8009ee2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00e      	beq.n	8009ee2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	7afa      	ldrb	r2, [r7, #11]
 8009ece:	4611      	mov	r1, r2
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	4798      	blx	r3
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
 8009ee0:	e000      	b.n	8009ee4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e02f      	b.n	8009f80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00f      	beq.n	8009f4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d009      	beq.n	8009f4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6852      	ldr	r2, [r2, #4]
 8009f42:	b2d2      	uxtb	r2, r2
 8009f44:	4611      	mov	r1, r2
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f4a:	2340      	movs	r3, #64	@ 0x40
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2100      	movs	r1, #0
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fa7a 	bl	800b44a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2240      	movs	r2, #64	@ 0x40
 8009f62:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f66:	2340      	movs	r3, #64	@ 0x40
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2180      	movs	r1, #128	@ 0x80
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 fa6c 	bl	800b44a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2240      	movs	r2, #64	@ 0x40
 8009f7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	78fa      	ldrb	r2, [r7, #3]
 8009f98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2204      	movs	r2, #4
 8009fc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b04      	cmp	r3, #4
 8009fe6:	d106      	bne.n	8009ff6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009fee:	b2da      	uxtb	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a016:	2303      	movs	r3, #3
 800a018:	e012      	b.n	800a040 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b03      	cmp	r3, #3
 800a024:	d10b      	bne.n	800a03e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d005      	beq.n	800a03e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	3301      	adds	r3, #1
 800a05e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a066:	8a3b      	ldrh	r3, [r7, #16]
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	b21a      	sxth	r2, r3
 800a06c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a070:	4313      	orrs	r3, r2
 800a072:	b21b      	sxth	r3, r3
 800a074:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a076:	89fb      	ldrh	r3, [r7, #14]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	371c      	adds	r7, #28
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a09a:	2b40      	cmp	r3, #64	@ 0x40
 800a09c:	d005      	beq.n	800a0aa <USBD_StdDevReq+0x26>
 800a09e:	2b40      	cmp	r3, #64	@ 0x40
 800a0a0:	d853      	bhi.n	800a14a <USBD_StdDevReq+0xc6>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <USBD_StdDevReq+0x3a>
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	d14f      	bne.n	800a14a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	4798      	blx	r3
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a0bc:	e04a      	b.n	800a154 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	785b      	ldrb	r3, [r3, #1]
 800a0c2:	2b09      	cmp	r3, #9
 800a0c4:	d83b      	bhi.n	800a13e <USBD_StdDevReq+0xba>
 800a0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0cc <USBD_StdDevReq+0x48>)
 800a0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0cc:	0800a121 	.word	0x0800a121
 800a0d0:	0800a135 	.word	0x0800a135
 800a0d4:	0800a13f 	.word	0x0800a13f
 800a0d8:	0800a12b 	.word	0x0800a12b
 800a0dc:	0800a13f 	.word	0x0800a13f
 800a0e0:	0800a0ff 	.word	0x0800a0ff
 800a0e4:	0800a0f5 	.word	0x0800a0f5
 800a0e8:	0800a13f 	.word	0x0800a13f
 800a0ec:	0800a117 	.word	0x0800a117
 800a0f0:	0800a109 	.word	0x0800a109
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f9de 	bl	800a4b8 <USBD_GetDescriptor>
          break;
 800a0fc:	e024      	b.n	800a148 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fb6d 	bl	800a7e0 <USBD_SetAddress>
          break;
 800a106:	e01f      	b.n	800a148 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fbac 	bl	800a868 <USBD_SetConfig>
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]
          break;
 800a114:	e018      	b.n	800a148 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fc4b 	bl	800a9b4 <USBD_GetConfig>
          break;
 800a11e:	e013      	b.n	800a148 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fc7c 	bl	800aa20 <USBD_GetStatus>
          break;
 800a128:	e00e      	b.n	800a148 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fcab 	bl	800aa88 <USBD_SetFeature>
          break;
 800a132:	e009      	b.n	800a148 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fcba 	bl	800aab0 <USBD_ClrFeature>
          break;
 800a13c:	e004      	b.n	800a148 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fd11 	bl	800ab68 <USBD_CtlError>
          break;
 800a146:	bf00      	nop
      }
      break;
 800a148:	e004      	b.n	800a154 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fd0b 	bl	800ab68 <USBD_CtlError>
      break;
 800a152:	bf00      	nop
  }

  return ret;
 800a154:	7bfb      	ldrb	r3, [r7, #15]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop

0800a160 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a176:	2b40      	cmp	r3, #64	@ 0x40
 800a178:	d005      	beq.n	800a186 <USBD_StdItfReq+0x26>
 800a17a:	2b40      	cmp	r3, #64	@ 0x40
 800a17c:	d82f      	bhi.n	800a1de <USBD_StdItfReq+0x7e>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <USBD_StdItfReq+0x26>
 800a182:	2b20      	cmp	r3, #32
 800a184:	d12b      	bne.n	800a1de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	3b01      	subs	r3, #1
 800a190:	2b02      	cmp	r3, #2
 800a192:	d81d      	bhi.n	800a1d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	889b      	ldrh	r3, [r3, #4]
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d813      	bhi.n	800a1c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	4798      	blx	r3
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	88db      	ldrh	r3, [r3, #6]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d110      	bne.n	800a1da <USBD_StdItfReq+0x7a>
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10d      	bne.n	800a1da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fd9d 	bl	800acfe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1c4:	e009      	b.n	800a1da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fccd 	bl	800ab68 <USBD_CtlError>
          break;
 800a1ce:	e004      	b.n	800a1da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fcc8 	bl	800ab68 <USBD_CtlError>
          break;
 800a1d8:	e000      	b.n	800a1dc <USBD_StdItfReq+0x7c>
          break;
 800a1da:	bf00      	nop
      }
      break;
 800a1dc:	e004      	b.n	800a1e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fcc1 	bl	800ab68 <USBD_CtlError>
      break;
 800a1e6:	bf00      	nop
  }

  return ret;
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	889b      	ldrh	r3, [r3, #4]
 800a204:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a20e:	2b40      	cmp	r3, #64	@ 0x40
 800a210:	d007      	beq.n	800a222 <USBD_StdEPReq+0x30>
 800a212:	2b40      	cmp	r3, #64	@ 0x40
 800a214:	f200 8145 	bhi.w	800a4a2 <USBD_StdEPReq+0x2b0>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00c      	beq.n	800a236 <USBD_StdEPReq+0x44>
 800a21c:	2b20      	cmp	r3, #32
 800a21e:	f040 8140 	bne.w	800a4a2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	4798      	blx	r3
 800a230:	4603      	mov	r3, r0
 800a232:	73fb      	strb	r3, [r7, #15]
      break;
 800a234:	e13a      	b.n	800a4ac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d007      	beq.n	800a24e <USBD_StdEPReq+0x5c>
 800a23e:	2b03      	cmp	r3, #3
 800a240:	f300 8129 	bgt.w	800a496 <USBD_StdEPReq+0x2a4>
 800a244:	2b00      	cmp	r3, #0
 800a246:	d07f      	beq.n	800a348 <USBD_StdEPReq+0x156>
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d03c      	beq.n	800a2c6 <USBD_StdEPReq+0xd4>
 800a24c:	e123      	b.n	800a496 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b02      	cmp	r3, #2
 800a258:	d002      	beq.n	800a260 <USBD_StdEPReq+0x6e>
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d016      	beq.n	800a28c <USBD_StdEPReq+0x9a>
 800a25e:	e02c      	b.n	800a2ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a260:	7bbb      	ldrb	r3, [r7, #14]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00d      	beq.n	800a282 <USBD_StdEPReq+0x90>
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	2b80      	cmp	r3, #128	@ 0x80
 800a26a:	d00a      	beq.n	800a282 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a26c:	7bbb      	ldrb	r3, [r7, #14]
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f001 f92f 	bl	800b4d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a276:	2180      	movs	r1, #128	@ 0x80
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f001 f92b 	bl	800b4d4 <USBD_LL_StallEP>
 800a27e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a280:	e020      	b.n	800a2c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fc6f 	bl	800ab68 <USBD_CtlError>
              break;
 800a28a:	e01b      	b.n	800a2c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	885b      	ldrh	r3, [r3, #2]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10e      	bne.n	800a2b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00b      	beq.n	800a2b2 <USBD_StdEPReq+0xc0>
 800a29a:	7bbb      	ldrb	r3, [r7, #14]
 800a29c:	2b80      	cmp	r3, #128	@ 0x80
 800a29e:	d008      	beq.n	800a2b2 <USBD_StdEPReq+0xc0>
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	88db      	ldrh	r3, [r3, #6]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d104      	bne.n	800a2b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f001 f911 	bl	800b4d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fd23 	bl	800acfe <USBD_CtlSendStatus>

              break;
 800a2b8:	e004      	b.n	800a2c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fc53 	bl	800ab68 <USBD_CtlError>
              break;
 800a2c2:	bf00      	nop
          }
          break;
 800a2c4:	e0ec      	b.n	800a4a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d002      	beq.n	800a2d8 <USBD_StdEPReq+0xe6>
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d016      	beq.n	800a304 <USBD_StdEPReq+0x112>
 800a2d6:	e030      	b.n	800a33a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00d      	beq.n	800a2fa <USBD_StdEPReq+0x108>
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	2b80      	cmp	r3, #128	@ 0x80
 800a2e2:	d00a      	beq.n	800a2fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 f8f3 	bl	800b4d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2ee:	2180      	movs	r1, #128	@ 0x80
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 f8ef 	bl	800b4d4 <USBD_LL_StallEP>
 800a2f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2f8:	e025      	b.n	800a346 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fc33 	bl	800ab68 <USBD_CtlError>
              break;
 800a302:	e020      	b.n	800a346 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	885b      	ldrh	r3, [r3, #2]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d11b      	bne.n	800a344 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a312:	2b00      	cmp	r3, #0
 800a314:	d004      	beq.n	800a320 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 f8f9 	bl	800b512 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fcec 	bl	800acfe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	4798      	blx	r3
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a338:	e004      	b.n	800a344 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fc13 	bl	800ab68 <USBD_CtlError>
              break;
 800a342:	e000      	b.n	800a346 <USBD_StdEPReq+0x154>
              break;
 800a344:	bf00      	nop
          }
          break;
 800a346:	e0ab      	b.n	800a4a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b02      	cmp	r3, #2
 800a352:	d002      	beq.n	800a35a <USBD_StdEPReq+0x168>
 800a354:	2b03      	cmp	r3, #3
 800a356:	d032      	beq.n	800a3be <USBD_StdEPReq+0x1cc>
 800a358:	e097      	b.n	800a48a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a35a:	7bbb      	ldrb	r3, [r7, #14]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d007      	beq.n	800a370 <USBD_StdEPReq+0x17e>
 800a360:	7bbb      	ldrb	r3, [r7, #14]
 800a362:	2b80      	cmp	r3, #128	@ 0x80
 800a364:	d004      	beq.n	800a370 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fbfd 	bl	800ab68 <USBD_CtlError>
                break;
 800a36e:	e091      	b.n	800a494 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a374:	2b00      	cmp	r3, #0
 800a376:	da0b      	bge.n	800a390 <USBD_StdEPReq+0x19e>
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a37e:	4613      	mov	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	3310      	adds	r3, #16
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	4413      	add	r3, r2
 800a38c:	3304      	adds	r3, #4
 800a38e:	e00b      	b.n	800a3a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a390:	7bbb      	ldrb	r3, [r7, #14]
 800a392:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a396:	4613      	mov	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fc47 	bl	800ac4a <USBD_CtlSendData>
              break;
 800a3bc:	e06a      	b.n	800a494 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a3be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	da11      	bge.n	800a3ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
 800a3c8:	f003 020f 	and.w	r2, r3, #15
 800a3cc:	6879      	ldr	r1, [r7, #4]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	440b      	add	r3, r1
 800a3d8:	3324      	adds	r3, #36	@ 0x24
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d117      	bne.n	800a410 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fbc0 	bl	800ab68 <USBD_CtlError>
                  break;
 800a3e8:	e054      	b.n	800a494 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a3ea:	7bbb      	ldrb	r3, [r7, #14]
 800a3ec:	f003 020f 	and.w	r2, r3, #15
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	440b      	add	r3, r1
 800a3fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d104      	bne.n	800a410 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fbad 	bl	800ab68 <USBD_CtlError>
                  break;
 800a40e:	e041      	b.n	800a494 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a414:	2b00      	cmp	r3, #0
 800a416:	da0b      	bge.n	800a430 <USBD_StdEPReq+0x23e>
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a41e:	4613      	mov	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	3310      	adds	r3, #16
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	4413      	add	r3, r2
 800a42c:	3304      	adds	r3, #4
 800a42e:	e00b      	b.n	800a448 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a430:	7bbb      	ldrb	r3, [r7, #14]
 800a432:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	4413      	add	r3, r2
 800a446:	3304      	adds	r3, #4
 800a448:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <USBD_StdEPReq+0x264>
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	2b80      	cmp	r3, #128	@ 0x80
 800a454:	d103      	bne.n	800a45e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	e00e      	b.n	800a47c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a45e:	7bbb      	ldrb	r3, [r7, #14]
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f001 f874 	bl	800b550 <USBD_LL_IsStallEP>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2201      	movs	r2, #1
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	e002      	b.n	800a47c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	2202      	movs	r2, #2
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fbe1 	bl	800ac4a <USBD_CtlSendData>
              break;
 800a488:	e004      	b.n	800a494 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fb6b 	bl	800ab68 <USBD_CtlError>
              break;
 800a492:	bf00      	nop
          }
          break;
 800a494:	e004      	b.n	800a4a0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fb65 	bl	800ab68 <USBD_CtlError>
          break;
 800a49e:	bf00      	nop
      }
      break;
 800a4a0:	e004      	b.n	800a4ac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fb5f 	bl	800ab68 <USBD_CtlError>
      break;
 800a4aa:	bf00      	nop
  }

  return ret;
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	885b      	ldrh	r3, [r3, #2]
 800a4d2:	0a1b      	lsrs	r3, r3, #8
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	2b0e      	cmp	r3, #14
 800a4da:	f200 8152 	bhi.w	800a782 <USBD_GetDescriptor+0x2ca>
 800a4de:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e4 <USBD_GetDescriptor+0x2c>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a555 	.word	0x0800a555
 800a4e8:	0800a56d 	.word	0x0800a56d
 800a4ec:	0800a5ad 	.word	0x0800a5ad
 800a4f0:	0800a783 	.word	0x0800a783
 800a4f4:	0800a783 	.word	0x0800a783
 800a4f8:	0800a723 	.word	0x0800a723
 800a4fc:	0800a74f 	.word	0x0800a74f
 800a500:	0800a783 	.word	0x0800a783
 800a504:	0800a783 	.word	0x0800a783
 800a508:	0800a783 	.word	0x0800a783
 800a50c:	0800a783 	.word	0x0800a783
 800a510:	0800a783 	.word	0x0800a783
 800a514:	0800a783 	.word	0x0800a783
 800a518:	0800a783 	.word	0x0800a783
 800a51c:	0800a521 	.word	0x0800a521
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00b      	beq.n	800a544 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a532:	69db      	ldr	r3, [r3, #28]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	7c12      	ldrb	r2, [r2, #16]
 800a538:	f107 0108 	add.w	r1, r7, #8
 800a53c:	4610      	mov	r0, r2
 800a53e:	4798      	blx	r3
 800a540:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a542:	e126      	b.n	800a792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fb0e 	bl	800ab68 <USBD_CtlError>
        err++;
 800a54c:	7afb      	ldrb	r3, [r7, #11]
 800a54e:	3301      	adds	r3, #1
 800a550:	72fb      	strb	r3, [r7, #11]
      break;
 800a552:	e11e      	b.n	800a792 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	7c12      	ldrb	r2, [r2, #16]
 800a560:	f107 0108 	add.w	r1, r7, #8
 800a564:	4610      	mov	r0, r2
 800a566:	4798      	blx	r3
 800a568:	60f8      	str	r0, [r7, #12]
      break;
 800a56a:	e112      	b.n	800a792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	7c1b      	ldrb	r3, [r3, #16]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10d      	bne.n	800a590 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57c:	f107 0208 	add.w	r2, r7, #8
 800a580:	4610      	mov	r0, r2
 800a582:	4798      	blx	r3
 800a584:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3301      	adds	r3, #1
 800a58a:	2202      	movs	r2, #2
 800a58c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a58e:	e100      	b.n	800a792 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a598:	f107 0208 	add.w	r2, r7, #8
 800a59c:	4610      	mov	r0, r2
 800a59e:	4798      	blx	r3
 800a5a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	701a      	strb	r2, [r3, #0]
      break;
 800a5aa:	e0f2      	b.n	800a792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	885b      	ldrh	r3, [r3, #2]
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b05      	cmp	r3, #5
 800a5b4:	f200 80ac 	bhi.w	800a710 <USBD_GetDescriptor+0x258>
 800a5b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a5c0 <USBD_GetDescriptor+0x108>)
 800a5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5be:	bf00      	nop
 800a5c0:	0800a5d9 	.word	0x0800a5d9
 800a5c4:	0800a60d 	.word	0x0800a60d
 800a5c8:	0800a641 	.word	0x0800a641
 800a5cc:	0800a675 	.word	0x0800a675
 800a5d0:	0800a6a9 	.word	0x0800a6a9
 800a5d4:	0800a6dd 	.word	0x0800a6dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	7c12      	ldrb	r2, [r2, #16]
 800a5f0:	f107 0108 	add.w	r1, r7, #8
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4798      	blx	r3
 800a5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5fa:	e091      	b.n	800a720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fab2 	bl	800ab68 <USBD_CtlError>
            err++;
 800a604:	7afb      	ldrb	r3, [r7, #11]
 800a606:	3301      	adds	r3, #1
 800a608:	72fb      	strb	r3, [r7, #11]
          break;
 800a60a:	e089      	b.n	800a720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	7c12      	ldrb	r2, [r2, #16]
 800a624:	f107 0108 	add.w	r1, r7, #8
 800a628:	4610      	mov	r0, r2
 800a62a:	4798      	blx	r3
 800a62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a62e:	e077      	b.n	800a720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa98 	bl	800ab68 <USBD_CtlError>
            err++;
 800a638:	7afb      	ldrb	r3, [r7, #11]
 800a63a:	3301      	adds	r3, #1
 800a63c:	72fb      	strb	r3, [r7, #11]
          break;
 800a63e:	e06f      	b.n	800a720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	7c12      	ldrb	r2, [r2, #16]
 800a658:	f107 0108 	add.w	r1, r7, #8
 800a65c:	4610      	mov	r0, r2
 800a65e:	4798      	blx	r3
 800a660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a662:	e05d      	b.n	800a720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fa7e 	bl	800ab68 <USBD_CtlError>
            err++;
 800a66c:	7afb      	ldrb	r3, [r7, #11]
 800a66e:	3301      	adds	r3, #1
 800a670:	72fb      	strb	r3, [r7, #11]
          break;
 800a672:	e055      	b.n	800a720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00b      	beq.n	800a698 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	7c12      	ldrb	r2, [r2, #16]
 800a68c:	f107 0108 	add.w	r1, r7, #8
 800a690:	4610      	mov	r0, r2
 800a692:	4798      	blx	r3
 800a694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a696:	e043      	b.n	800a720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fa64 	bl	800ab68 <USBD_CtlError>
            err++;
 800a6a0:	7afb      	ldrb	r3, [r7, #11]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a6a6:	e03b      	b.n	800a720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00b      	beq.n	800a6cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	7c12      	ldrb	r2, [r2, #16]
 800a6c0:	f107 0108 	add.w	r1, r7, #8
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	4798      	blx	r3
 800a6c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ca:	e029      	b.n	800a720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fa4a 	bl	800ab68 <USBD_CtlError>
            err++;
 800a6d4:	7afb      	ldrb	r3, [r7, #11]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6da:	e021      	b.n	800a720 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00b      	beq.n	800a700 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	7c12      	ldrb	r2, [r2, #16]
 800a6f4:	f107 0108 	add.w	r1, r7, #8
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	4798      	blx	r3
 800a6fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6fe:	e00f      	b.n	800a720 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fa30 	bl	800ab68 <USBD_CtlError>
            err++;
 800a708:	7afb      	ldrb	r3, [r7, #11]
 800a70a:	3301      	adds	r3, #1
 800a70c:	72fb      	strb	r3, [r7, #11]
          break;
 800a70e:	e007      	b.n	800a720 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fa28 	bl	800ab68 <USBD_CtlError>
          err++;
 800a718:	7afb      	ldrb	r3, [r7, #11]
 800a71a:	3301      	adds	r3, #1
 800a71c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a71e:	bf00      	nop
      }
      break;
 800a720:	e037      	b.n	800a792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	7c1b      	ldrb	r3, [r3, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d109      	bne.n	800a73e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a732:	f107 0208 	add.w	r2, r7, #8
 800a736:	4610      	mov	r0, r2
 800a738:	4798      	blx	r3
 800a73a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a73c:	e029      	b.n	800a792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fa11 	bl	800ab68 <USBD_CtlError>
        err++;
 800a746:	7afb      	ldrb	r3, [r7, #11]
 800a748:	3301      	adds	r3, #1
 800a74a:	72fb      	strb	r3, [r7, #11]
      break;
 800a74c:	e021      	b.n	800a792 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	7c1b      	ldrb	r3, [r3, #16]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10d      	bne.n	800a772 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a75c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a75e:	f107 0208 	add.w	r2, r7, #8
 800a762:	4610      	mov	r0, r2
 800a764:	4798      	blx	r3
 800a766:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	3301      	adds	r3, #1
 800a76c:	2207      	movs	r2, #7
 800a76e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a770:	e00f      	b.n	800a792 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f9f7 	bl	800ab68 <USBD_CtlError>
        err++;
 800a77a:	7afb      	ldrb	r3, [r7, #11]
 800a77c:	3301      	adds	r3, #1
 800a77e:	72fb      	strb	r3, [r7, #11]
      break;
 800a780:	e007      	b.n	800a792 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f9ef 	bl	800ab68 <USBD_CtlError>
      err++;
 800a78a:	7afb      	ldrb	r3, [r7, #11]
 800a78c:	3301      	adds	r3, #1
 800a78e:	72fb      	strb	r3, [r7, #11]
      break;
 800a790:	bf00      	nop
  }

  if (err != 0U)
 800a792:	7afb      	ldrb	r3, [r7, #11]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d11e      	bne.n	800a7d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	88db      	ldrh	r3, [r3, #6]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d016      	beq.n	800a7ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a7a0:	893b      	ldrh	r3, [r7, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00e      	beq.n	800a7c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	88da      	ldrh	r2, [r3, #6]
 800a7aa:	893b      	ldrh	r3, [r7, #8]
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	bf28      	it	cs
 800a7b0:	4613      	movcs	r3, r2
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a7b6:	893b      	ldrh	r3, [r7, #8]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	68f9      	ldr	r1, [r7, #12]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fa44 	bl	800ac4a <USBD_CtlSendData>
 800a7c2:	e009      	b.n	800a7d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f9ce 	bl	800ab68 <USBD_CtlError>
 800a7cc:	e004      	b.n	800a7d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fa95 	bl	800acfe <USBD_CtlSendStatus>
 800a7d4:	e000      	b.n	800a7d8 <USBD_GetDescriptor+0x320>
    return;
 800a7d6:	bf00      	nop
  }
}
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop

0800a7e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	889b      	ldrh	r3, [r3, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d131      	bne.n	800a856 <USBD_SetAddress+0x76>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	88db      	ldrh	r3, [r3, #6]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d12d      	bne.n	800a856 <USBD_SetAddress+0x76>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	885b      	ldrh	r3, [r3, #2]
 800a7fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800a800:	d829      	bhi.n	800a856 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	885b      	ldrh	r3, [r3, #2]
 800a806:	b2db      	uxtb	r3, r3
 800a808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a80c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b03      	cmp	r3, #3
 800a818:	d104      	bne.n	800a824 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f9a3 	bl	800ab68 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a822:	e01d      	b.n	800a860 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	7bfa      	ldrb	r2, [r7, #15]
 800a828:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a82c:	7bfb      	ldrb	r3, [r7, #15]
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 feb9 	bl	800b5a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fa61 	bl	800acfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d004      	beq.n	800a84c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2202      	movs	r2, #2
 800a846:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a84a:	e009      	b.n	800a860 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a854:	e004      	b.n	800a860 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f985 	bl	800ab68 <USBD_CtlError>
  }
}
 800a85e:	bf00      	nop
 800a860:	bf00      	nop
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	885b      	ldrh	r3, [r3, #2]
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	4b4c      	ldr	r3, [pc, #304]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a87e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a880:	4b4b      	ldr	r3, [pc, #300]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d905      	bls.n	800a894 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f96c 	bl	800ab68 <USBD_CtlError>
    return USBD_FAIL;
 800a890:	2303      	movs	r3, #3
 800a892:	e088      	b.n	800a9a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d002      	beq.n	800a8a6 <USBD_SetConfig+0x3e>
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d025      	beq.n	800a8f0 <USBD_SetConfig+0x88>
 800a8a4:	e071      	b.n	800a98a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a8a6:	4b42      	ldr	r3, [pc, #264]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d01c      	beq.n	800a8e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a8ae:	4b40      	ldr	r3, [pc, #256]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a8b8:	4b3d      	ldr	r3, [pc, #244]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f7ff f992 	bl	8009be8 <USBD_SetClassConfig>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d004      	beq.n	800a8d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a8ce:	6839      	ldr	r1, [r7, #0]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 f949 	bl	800ab68 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a8d6:	e065      	b.n	800a9a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 fa10 	bl	800acfe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2203      	movs	r2, #3
 800a8e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a8e6:	e05d      	b.n	800a9a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fa08 	bl	800acfe <USBD_CtlSendStatus>
      break;
 800a8ee:	e059      	b.n	800a9a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a8f0:	4b2f      	ldr	r3, [pc, #188]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d112      	bne.n	800a91e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a900:	4b2b      	ldr	r3, [pc, #172]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	461a      	mov	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a90a:	4b29      	ldr	r3, [pc, #164]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff f985 	bl	8009c20 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f9f1 	bl	800acfe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a91c:	e042      	b.n	800a9a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a91e:	4b24      	ldr	r3, [pc, #144]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d02a      	beq.n	800a982 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	b2db      	uxtb	r3, r3
 800a932:	4619      	mov	r1, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7ff f973 	bl	8009c20 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a93a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a944:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff f94c 	bl	8009be8 <USBD_SetClassConfig>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00f      	beq.n	800a97a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f903 	bl	800ab68 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff f958 	bl	8009c20 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a978:	e014      	b.n	800a9a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f9bf 	bl	800acfe <USBD_CtlSendStatus>
      break;
 800a980:	e010      	b.n	800a9a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f9bb 	bl	800acfe <USBD_CtlSendStatus>
      break;
 800a988:	e00c      	b.n	800a9a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a98a:	6839      	ldr	r1, [r7, #0]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f8eb 	bl	800ab68 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a992:	4b07      	ldr	r3, [pc, #28]	@ (800a9b0 <USBD_SetConfig+0x148>)
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7ff f941 	bl	8009c20 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9a2:	bf00      	nop
  }

  return ret;
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20000c04 	.word	0x20000c04

0800a9b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	88db      	ldrh	r3, [r3, #6]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d004      	beq.n	800a9d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f8cd 	bl	800ab68 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a9ce:	e023      	b.n	800aa18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	dc02      	bgt.n	800a9e2 <USBD_GetConfig+0x2e>
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	dc03      	bgt.n	800a9e8 <USBD_GetConfig+0x34>
 800a9e0:	e015      	b.n	800aa0e <USBD_GetConfig+0x5a>
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d00b      	beq.n	800a9fe <USBD_GetConfig+0x4a>
 800a9e6:	e012      	b.n	800aa0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	3308      	adds	r3, #8
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f927 	bl	800ac4a <USBD_CtlSendData>
        break;
 800a9fc:	e00c      	b.n	800aa18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	3304      	adds	r3, #4
 800aa02:	2201      	movs	r2, #1
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f91f 	bl	800ac4a <USBD_CtlSendData>
        break;
 800aa0c:	e004      	b.n	800aa18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f8a9 	bl	800ab68 <USBD_CtlError>
        break;
 800aa16:	bf00      	nop
}
 800aa18:	bf00      	nop
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	3b01      	subs	r3, #1
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d81e      	bhi.n	800aa76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	88db      	ldrh	r3, [r3, #6]
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d004      	beq.n	800aa4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f890 	bl	800ab68 <USBD_CtlError>
        break;
 800aa48:	e01a      	b.n	800aa80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d005      	beq.n	800aa66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	f043 0202 	orr.w	r2, r3, #2
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	330c      	adds	r3, #12
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f8eb 	bl	800ac4a <USBD_CtlSendData>
      break;
 800aa74:	e004      	b.n	800aa80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f875 	bl	800ab68 <USBD_CtlError>
      break;
 800aa7e:	bf00      	nop
  }
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	885b      	ldrh	r3, [r3, #2]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d106      	bne.n	800aaa8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f92b 	bl	800acfe <USBD_CtlSendStatus>
  }
}
 800aaa8:	bf00      	nop
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	3b01      	subs	r3, #1
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d80b      	bhi.n	800aae0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	885b      	ldrh	r3, [r3, #2]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d10c      	bne.n	800aaea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 f910 	bl	800acfe <USBD_CtlSendStatus>
      }
      break;
 800aade:	e004      	b.n	800aaea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f840 	bl	800ab68 <USBD_CtlError>
      break;
 800aae8:	e000      	b.n	800aaec <USBD_ClrFeature+0x3c>
      break;
 800aaea:	bf00      	nop
  }
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	781a      	ldrb	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	781a      	ldrb	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7ff fa92 	bl	800a048 <SWAPBYTE>
 800ab24:	4603      	mov	r3, r0
 800ab26:	461a      	mov	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	3301      	adds	r3, #1
 800ab36:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f7ff fa85 	bl	800a048 <SWAPBYTE>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	461a      	mov	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f7ff fa78 	bl	800a048 <SWAPBYTE>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	80da      	strh	r2, [r3, #6]
}
 800ab60:	bf00      	nop
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab72:	2180      	movs	r1, #128	@ 0x80
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fcad 	bl	800b4d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fca9 	bl	800b4d4 <USBD_LL_StallEP>
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b086      	sub	sp, #24
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab96:	2300      	movs	r3, #0
 800ab98:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d036      	beq.n	800ac0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aba4:	6938      	ldr	r0, [r7, #16]
 800aba6:	f000 f836 	bl	800ac16 <USBD_GetLen>
 800abaa:	4603      	mov	r3, r0
 800abac:	3301      	adds	r3, #1
 800abae:	b29b      	uxth	r3, r3
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	4413      	add	r3, r2
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	7812      	ldrb	r2, [r2, #0]
 800abc2:	701a      	strb	r2, [r3, #0]
  idx++;
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
 800abc6:	3301      	adds	r3, #1
 800abc8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	4413      	add	r3, r2
 800abd0:	2203      	movs	r2, #3
 800abd2:	701a      	strb	r2, [r3, #0]
  idx++;
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
 800abd6:	3301      	adds	r3, #1
 800abd8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800abda:	e013      	b.n	800ac04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	4413      	add	r3, r2
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	7812      	ldrb	r2, [r2, #0]
 800abe6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	3301      	adds	r3, #1
 800abec:	613b      	str	r3, [r7, #16]
    idx++;
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	3301      	adds	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800abf4:	7dfb      	ldrb	r3, [r7, #23]
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	4413      	add	r3, r2
 800abfa:	2200      	movs	r2, #0
 800abfc:	701a      	strb	r2, [r3, #0]
    idx++;
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	3301      	adds	r3, #1
 800ac02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e7      	bne.n	800abdc <USBD_GetString+0x52>
 800ac0c:	e000      	b.n	800ac10 <USBD_GetString+0x86>
    return;
 800ac0e:	bf00      	nop
  }
}
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b085      	sub	sp, #20
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ac26:	e005      	b.n	800ac34 <USBD_GetLen+0x1e>
  {
    len++;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	3301      	adds	r3, #1
 800ac32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1f5      	bne.n	800ac28 <USBD_GetLen+0x12>
  }

  return len;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	60b9      	str	r1, [r7, #8]
 800ac54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2202      	movs	r2, #2
 800ac5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	2100      	movs	r1, #0
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 fcb8 	bl	800b5e6 <USBD_LL_Transmit>

  return USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	2100      	movs	r1, #0
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 fca7 	bl	800b5e6 <USBD_LL_Transmit>

  return USBD_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	60b9      	str	r1, [r7, #8]
 800acac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2203      	movs	r2, #3
 800acb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	2100      	movs	r1, #0
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 fcab 	bl	800b628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	2100      	movs	r1, #0
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f000 fc9a 	bl	800b628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b082      	sub	sp, #8
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2204      	movs	r2, #4
 800ad0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad0e:	2300      	movs	r3, #0
 800ad10:	2200      	movs	r2, #0
 800ad12:	2100      	movs	r1, #0
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fc66 	bl	800b5e6 <USBD_LL_Transmit>

  return USBD_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2205      	movs	r2, #5
 800ad30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad34:	2300      	movs	r3, #0
 800ad36:	2200      	movs	r2, #0
 800ad38:	2100      	movs	r1, #0
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fc74 	bl	800b628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ad50:	2200      	movs	r2, #0
 800ad52:	4912      	ldr	r1, [pc, #72]	@ (800ad9c <MX_USB_Device_Init+0x50>)
 800ad54:	4812      	ldr	r0, [pc, #72]	@ (800ada0 <MX_USB_Device_Init+0x54>)
 800ad56:	f7fe fed9 	bl	8009b0c <USBD_Init>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ad60:	f7f5 fd71 	bl	8000846 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ad64:	490f      	ldr	r1, [pc, #60]	@ (800ada4 <MX_USB_Device_Init+0x58>)
 800ad66:	480e      	ldr	r0, [pc, #56]	@ (800ada0 <MX_USB_Device_Init+0x54>)
 800ad68:	f7fe ff00 	bl	8009b6c <USBD_RegisterClass>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ad72:	f7f5 fd68 	bl	8000846 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ad76:	490c      	ldr	r1, [pc, #48]	@ (800ada8 <MX_USB_Device_Init+0x5c>)
 800ad78:	4809      	ldr	r0, [pc, #36]	@ (800ada0 <MX_USB_Device_Init+0x54>)
 800ad7a:	f7fe fe21 	bl	80099c0 <USBD_CDC_RegisterInterface>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ad84:	f7f5 fd5f 	bl	8000846 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ad88:	4805      	ldr	r0, [pc, #20]	@ (800ada0 <MX_USB_Device_Init+0x54>)
 800ad8a:	f7fe ff16 	bl	8009bba <USBD_Start>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ad94:	f7f5 fd57 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ad98:	bf00      	nop
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	20000184 	.word	0x20000184
 800ada0:	20000c08 	.word	0x20000c08
 800ada4:	2000006c 	.word	0x2000006c
 800ada8:	20000170 	.word	0x20000170

0800adac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800adb0:	2200      	movs	r2, #0
 800adb2:	4905      	ldr	r1, [pc, #20]	@ (800adc8 <CDC_Init_FS+0x1c>)
 800adb4:	4805      	ldr	r0, [pc, #20]	@ (800adcc <CDC_Init_FS+0x20>)
 800adb6:	f7fe fe18 	bl	80099ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800adba:	4905      	ldr	r1, [pc, #20]	@ (800add0 <CDC_Init_FS+0x24>)
 800adbc:	4803      	ldr	r0, [pc, #12]	@ (800adcc <CDC_Init_FS+0x20>)
 800adbe:	f7fe fe32 	bl	8009a26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800adc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	200012d8 	.word	0x200012d8
 800adcc:	20000c08 	.word	0x20000c08
 800add0:	20000ed8 	.word	0x20000ed8

0800add4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800add4:	b480      	push	{r7}
 800add6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800add8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800adda:	4618      	mov	r0, r3
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	71fb      	strb	r3, [r7, #7]
 800adf0:	4613      	mov	r3, r2
 800adf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800adf4:	79fb      	ldrb	r3, [r7, #7]
 800adf6:	2b23      	cmp	r3, #35	@ 0x23
 800adf8:	d84a      	bhi.n	800ae90 <CDC_Control_FS+0xac>
 800adfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ae00 <CDC_Control_FS+0x1c>)
 800adfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae00:	0800ae91 	.word	0x0800ae91
 800ae04:	0800ae91 	.word	0x0800ae91
 800ae08:	0800ae91 	.word	0x0800ae91
 800ae0c:	0800ae91 	.word	0x0800ae91
 800ae10:	0800ae91 	.word	0x0800ae91
 800ae14:	0800ae91 	.word	0x0800ae91
 800ae18:	0800ae91 	.word	0x0800ae91
 800ae1c:	0800ae91 	.word	0x0800ae91
 800ae20:	0800ae91 	.word	0x0800ae91
 800ae24:	0800ae91 	.word	0x0800ae91
 800ae28:	0800ae91 	.word	0x0800ae91
 800ae2c:	0800ae91 	.word	0x0800ae91
 800ae30:	0800ae91 	.word	0x0800ae91
 800ae34:	0800ae91 	.word	0x0800ae91
 800ae38:	0800ae91 	.word	0x0800ae91
 800ae3c:	0800ae91 	.word	0x0800ae91
 800ae40:	0800ae91 	.word	0x0800ae91
 800ae44:	0800ae91 	.word	0x0800ae91
 800ae48:	0800ae91 	.word	0x0800ae91
 800ae4c:	0800ae91 	.word	0x0800ae91
 800ae50:	0800ae91 	.word	0x0800ae91
 800ae54:	0800ae91 	.word	0x0800ae91
 800ae58:	0800ae91 	.word	0x0800ae91
 800ae5c:	0800ae91 	.word	0x0800ae91
 800ae60:	0800ae91 	.word	0x0800ae91
 800ae64:	0800ae91 	.word	0x0800ae91
 800ae68:	0800ae91 	.word	0x0800ae91
 800ae6c:	0800ae91 	.word	0x0800ae91
 800ae70:	0800ae91 	.word	0x0800ae91
 800ae74:	0800ae91 	.word	0x0800ae91
 800ae78:	0800ae91 	.word	0x0800ae91
 800ae7c:	0800ae91 	.word	0x0800ae91
 800ae80:	0800ae91 	.word	0x0800ae91
 800ae84:	0800ae91 	.word	0x0800ae91
 800ae88:	0800ae91 	.word	0x0800ae91
 800ae8c:	0800ae91 	.word	0x0800ae91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae90:	bf00      	nop
  }

  return (USBD_OK);
 800ae92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	4805      	ldr	r0, [pc, #20]	@ (800aec4 <CDC_Receive_FS+0x24>)
 800aeae:	f7fe fdba 	bl	8009a26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aeb2:	4804      	ldr	r0, [pc, #16]	@ (800aec4 <CDC_Receive_FS+0x24>)
 800aeb4:	f7fe fe00 	bl	8009ab8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aeb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	20000c08 	.word	0x20000c08

0800aec8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aed8:	4b0d      	ldr	r3, [pc, #52]	@ (800af10 <CDC_Transmit_FS+0x48>)
 800aeda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aede:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e00b      	b.n	800af06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aeee:	887b      	ldrh	r3, [r7, #2]
 800aef0:	461a      	mov	r2, r3
 800aef2:	6879      	ldr	r1, [r7, #4]
 800aef4:	4806      	ldr	r0, [pc, #24]	@ (800af10 <CDC_Transmit_FS+0x48>)
 800aef6:	f7fe fd78 	bl	80099ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aefa:	4805      	ldr	r0, [pc, #20]	@ (800af10 <CDC_Transmit_FS+0x48>)
 800aefc:	f7fe fdac 	bl	8009a58 <USBD_CDC_TransmitPacket>
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800af04:	7bfb      	ldrb	r3, [r7, #15]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20000c08 	.word	0x20000c08

0800af14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800af14:	b480      	push	{r7}
 800af16:	b087      	sub	sp, #28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	4613      	mov	r3, r2
 800af20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800af26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	371c      	adds	r7, #28
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
	...

0800af38 <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800af3e:	4b09      	ldr	r3, [pc, #36]	@ (800af64 <CDC_Transmit_Is_Busy+0x2c>)
 800af40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af44:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <CDC_Transmit_Is_Busy+0x1c>
  {
    return USBD_BUSY;
 800af50:	2301      	movs	r3, #1
 800af52:	e000      	b.n	800af56 <CDC_Transmit_Is_Busy+0x1e>
  }  
  else
  {
    return USBD_OK;
 800af54:	2300      	movs	r3, #0
  }
}
 800af56:	4618      	mov	r0, r3
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20000c08 	.word	0x20000c08

0800af68 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	6039      	str	r1, [r7, #0]
 800af72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2212      	movs	r2, #18
 800af78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800af7a:	4b03      	ldr	r3, [pc, #12]	@ (800af88 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	200001a4 	.word	0x200001a4

0800af8c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	6039      	str	r1, [r7, #0]
 800af96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2204      	movs	r2, #4
 800af9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af9e:	4b03      	ldr	r3, [pc, #12]	@ (800afac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	200001b8 	.word	0x200001b8

0800afb0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	4603      	mov	r3, r0
 800afb8:	6039      	str	r1, [r7, #0]
 800afba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d105      	bne.n	800afce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	4907      	ldr	r1, [pc, #28]	@ (800afe4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800afc6:	4808      	ldr	r0, [pc, #32]	@ (800afe8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800afc8:	f7ff fddf 	bl	800ab8a <USBD_GetString>
 800afcc:	e004      	b.n	800afd8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	4904      	ldr	r1, [pc, #16]	@ (800afe4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800afd2:	4805      	ldr	r0, [pc, #20]	@ (800afe8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800afd4:	f7ff fdd9 	bl	800ab8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800afd8:	4b02      	ldr	r3, [pc, #8]	@ (800afe4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	200016d8 	.word	0x200016d8
 800afe8:	0800c8a0 	.word	0x0800c8a0

0800afec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	6039      	str	r1, [r7, #0]
 800aff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	4904      	ldr	r1, [pc, #16]	@ (800b00c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800affc:	4804      	ldr	r0, [pc, #16]	@ (800b010 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800affe:	f7ff fdc4 	bl	800ab8a <USBD_GetString>
  return USBD_StrDesc;
 800b002:	4b02      	ldr	r3, [pc, #8]	@ (800b00c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b004:	4618      	mov	r0, r3
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	200016d8 	.word	0x200016d8
 800b010:	0800c8b8 	.word	0x0800c8b8

0800b014 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	4603      	mov	r3, r0
 800b01c:	6039      	str	r1, [r7, #0]
 800b01e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	221a      	movs	r2, #26
 800b024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b026:	f000 f843 	bl	800b0b0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b02a:	4b02      	ldr	r3, [pc, #8]	@ (800b034 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	200001bc 	.word	0x200001bc

0800b038 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	4603      	mov	r3, r0
 800b040:	6039      	str	r1, [r7, #0]
 800b042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b044:	79fb      	ldrb	r3, [r7, #7]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d105      	bne.n	800b056 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	4907      	ldr	r1, [pc, #28]	@ (800b06c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b04e:	4808      	ldr	r0, [pc, #32]	@ (800b070 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b050:	f7ff fd9b 	bl	800ab8a <USBD_GetString>
 800b054:	e004      	b.n	800b060 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	4904      	ldr	r1, [pc, #16]	@ (800b06c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b05a:	4805      	ldr	r0, [pc, #20]	@ (800b070 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b05c:	f7ff fd95 	bl	800ab8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b060:	4b02      	ldr	r3, [pc, #8]	@ (800b06c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	200016d8 	.word	0x200016d8
 800b070:	0800c8cc 	.word	0x0800c8cc

0800b074 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	4603      	mov	r3, r0
 800b07c:	6039      	str	r1, [r7, #0]
 800b07e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d105      	bne.n	800b092 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	4907      	ldr	r1, [pc, #28]	@ (800b0a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b08a:	4808      	ldr	r0, [pc, #32]	@ (800b0ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b08c:	f7ff fd7d 	bl	800ab8a <USBD_GetString>
 800b090:	e004      	b.n	800b09c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	4904      	ldr	r1, [pc, #16]	@ (800b0a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b096:	4805      	ldr	r0, [pc, #20]	@ (800b0ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b098:	f7ff fd77 	bl	800ab8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b09c:	4b02      	ldr	r3, [pc, #8]	@ (800b0a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	200016d8 	.word	0x200016d8
 800b0ac:	0800c8d8 	.word	0x0800c8d8

0800b0b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f4 <Get_SerialNum+0x44>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b0bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b0f8 <Get_SerialNum+0x48>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b0c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b0fc <Get_SerialNum+0x4c>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d009      	beq.n	800b0ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b0d6:	2208      	movs	r2, #8
 800b0d8:	4909      	ldr	r1, [pc, #36]	@ (800b100 <Get_SerialNum+0x50>)
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f000 f814 	bl	800b108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b0e0:	2204      	movs	r2, #4
 800b0e2:	4908      	ldr	r1, [pc, #32]	@ (800b104 <Get_SerialNum+0x54>)
 800b0e4:	68b8      	ldr	r0, [r7, #8]
 800b0e6:	f000 f80f 	bl	800b108 <IntToUnicode>
  }
}
 800b0ea:	bf00      	nop
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	1fff7590 	.word	0x1fff7590
 800b0f8:	1fff7594 	.word	0x1fff7594
 800b0fc:	1fff7598 	.word	0x1fff7598
 800b100:	200001be 	.word	0x200001be
 800b104:	200001ce 	.word	0x200001ce

0800b108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b108:	b480      	push	{r7}
 800b10a:	b087      	sub	sp, #28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	4613      	mov	r3, r2
 800b114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b116:	2300      	movs	r3, #0
 800b118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b11a:	2300      	movs	r3, #0
 800b11c:	75fb      	strb	r3, [r7, #23]
 800b11e:	e027      	b.n	800b170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	0f1b      	lsrs	r3, r3, #28
 800b124:	2b09      	cmp	r3, #9
 800b126:	d80b      	bhi.n	800b140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	0f1b      	lsrs	r3, r3, #28
 800b12c:	b2da      	uxtb	r2, r3
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	4619      	mov	r1, r3
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	440b      	add	r3, r1
 800b138:	3230      	adds	r2, #48	@ 0x30
 800b13a:	b2d2      	uxtb	r2, r2
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	e00a      	b.n	800b156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	0f1b      	lsrs	r3, r3, #28
 800b144:	b2da      	uxtb	r2, r3
 800b146:	7dfb      	ldrb	r3, [r7, #23]
 800b148:	005b      	lsls	r3, r3, #1
 800b14a:	4619      	mov	r1, r3
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	440b      	add	r3, r1
 800b150:	3237      	adds	r2, #55	@ 0x37
 800b152:	b2d2      	uxtb	r2, r2
 800b154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	011b      	lsls	r3, r3, #4
 800b15a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	005b      	lsls	r3, r3, #1
 800b160:	3301      	adds	r3, #1
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	4413      	add	r3, r2
 800b166:	2200      	movs	r2, #0
 800b168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	3301      	adds	r3, #1
 800b16e:	75fb      	strb	r3, [r7, #23]
 800b170:	7dfa      	ldrb	r2, [r7, #23]
 800b172:	79fb      	ldrb	r3, [r7, #7]
 800b174:	429a      	cmp	r2, r3
 800b176:	d3d3      	bcc.n	800b120 <IntToUnicode+0x18>
  }
}
 800b178:	bf00      	nop
 800b17a:	bf00      	nop
 800b17c:	371c      	adds	r7, #28
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
	...

0800b188 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b094      	sub	sp, #80	@ 0x50
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b190:	f107 030c 	add.w	r3, r7, #12
 800b194:	2244      	movs	r2, #68	@ 0x44
 800b196:	2100      	movs	r1, #0
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fd03 	bl	800bba4 <memset>
  if(pcdHandle->Instance==USB)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a15      	ldr	r2, [pc, #84]	@ (800b1f8 <HAL_PCD_MspInit+0x70>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d122      	bne.n	800b1ee <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b1a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b1ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b1b2:	f107 030c 	add.w	r3, r7, #12
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7f9 fd6a 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b1c2:	f7f5 fb40 	bl	8000846 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1fc <HAL_PCD_MspInit+0x74>)
 800b1c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b1fc <HAL_PCD_MspInit+0x74>)
 800b1cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b1d0:	6593      	str	r3, [r2, #88]	@ 0x58
 800b1d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b1fc <HAL_PCD_MspInit+0x74>)
 800b1d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1da:	60bb      	str	r3, [r7, #8]
 800b1dc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b1de:	2200      	movs	r2, #0
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	2014      	movs	r0, #20
 800b1e4:	f7f6 fd33 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b1e8:	2014      	movs	r0, #20
 800b1ea:	f7f6 fd4a 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b1ee:	bf00      	nop
 800b1f0:	3750      	adds	r7, #80	@ 0x50
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	40005c00 	.word	0x40005c00
 800b1fc:	40021000 	.word	0x40021000

0800b200 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b214:	4619      	mov	r1, r3
 800b216:	4610      	mov	r0, r2
 800b218:	f7fe fd1a 	bl	8009c50 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b21c:	bf00      	nop
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b236:	78fa      	ldrb	r2, [r7, #3]
 800b238:	6879      	ldr	r1, [r7, #4]
 800b23a:	4613      	mov	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	00db      	lsls	r3, r3, #3
 800b242:	440b      	add	r3, r1
 800b244:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	78fb      	ldrb	r3, [r7, #3]
 800b24c:	4619      	mov	r1, r3
 800b24e:	f7fe fd54 	bl	8009cfa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b252:	bf00      	nop
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b082      	sub	sp, #8
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	460b      	mov	r3, r1
 800b264:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b26c:	78fa      	ldrb	r2, [r7, #3]
 800b26e:	6879      	ldr	r1, [r7, #4]
 800b270:	4613      	mov	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	440b      	add	r3, r1
 800b27a:	3324      	adds	r3, #36	@ 0x24
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	78fb      	ldrb	r3, [r7, #3]
 800b280:	4619      	mov	r1, r3
 800b282:	f7fe fd9d 	bl	8009dc0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b286:	bf00      	nop
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b082      	sub	sp, #8
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fe feb1 	bl	800a004 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b2a2:	bf00      	nop
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b084      	sub	sp, #16
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	795b      	ldrb	r3, [r3, #5]
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d001      	beq.n	800b2c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b2be:	f7f5 fac2 	bl	8000846 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b2c8:	7bfa      	ldrb	r2, [r7, #15]
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fe fe5b 	bl	8009f88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe fe07 	bl	8009eec <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b2de:	bf00      	nop
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe fe56 	bl	8009fa8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	7a5b      	ldrb	r3, [r3, #9]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d005      	beq.n	800b310 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b304:	4b04      	ldr	r3, [pc, #16]	@ (800b318 <HAL_PCD_SuspendCallback+0x30>)
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	4a03      	ldr	r2, [pc, #12]	@ (800b318 <HAL_PCD_SuspendCallback+0x30>)
 800b30a:	f043 0306 	orr.w	r3, r3, #6
 800b30e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	e000ed00 	.word	0xe000ed00

0800b31c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	7a5b      	ldrb	r3, [r3, #9]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d007      	beq.n	800b33c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b32c:	4b08      	ldr	r3, [pc, #32]	@ (800b350 <HAL_PCD_ResumeCallback+0x34>)
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	4a07      	ldr	r2, [pc, #28]	@ (800b350 <HAL_PCD_ResumeCallback+0x34>)
 800b332:	f023 0306 	bic.w	r3, r3, #6
 800b336:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b338:	f000 f9f8 	bl	800b72c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b342:	4618      	mov	r0, r3
 800b344:	f7fe fe46 	bl	8009fd4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	e000ed00 	.word	0xe000ed00

0800b354 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b35c:	4a2b      	ldr	r2, [pc, #172]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a29      	ldr	r2, [pc, #164]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b368:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b36c:	4b27      	ldr	r3, [pc, #156]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b36e:	4a28      	ldr	r2, [pc, #160]	@ (800b410 <USBD_LL_Init+0xbc>)
 800b370:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b372:	4b26      	ldr	r3, [pc, #152]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b374:	2208      	movs	r2, #8
 800b376:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b378:	4b24      	ldr	r3, [pc, #144]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b37a:	2202      	movs	r2, #2
 800b37c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b37e:	4b23      	ldr	r3, [pc, #140]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b380:	2202      	movs	r2, #2
 800b382:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b384:	4b21      	ldr	r3, [pc, #132]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b386:	2200      	movs	r2, #0
 800b388:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b38a:	4b20      	ldr	r3, [pc, #128]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b390:	4b1e      	ldr	r3, [pc, #120]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b392:	2200      	movs	r2, #0
 800b394:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b396:	4b1d      	ldr	r3, [pc, #116]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b398:	2200      	movs	r2, #0
 800b39a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b39c:	481b      	ldr	r0, [pc, #108]	@ (800b40c <USBD_LL_Init+0xb8>)
 800b39e:	f7f7 f994 	bl	80026ca <HAL_PCD_Init>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b3a8:	f7f5 fa4d 	bl	8000846 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b3b2:	2318      	movs	r3, #24
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	f7f8 fe1b 	bl	8003ff2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b3c2:	2358      	movs	r3, #88	@ 0x58
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	2180      	movs	r1, #128	@ 0x80
 800b3c8:	f7f8 fe13 	bl	8003ff2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b3d2:	23c0      	movs	r3, #192	@ 0xc0
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	2181      	movs	r1, #129	@ 0x81
 800b3d8:	f7f8 fe0b 	bl	8003ff2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b3e2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	f7f8 fe02 	bl	8003ff2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b3f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2182      	movs	r1, #130	@ 0x82
 800b3fc:	f7f8 fdf9 	bl	8003ff2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	200018d8 	.word	0x200018d8
 800b410:	40005c00 	.word	0x40005c00

0800b414 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b420:	2300      	movs	r3, #0
 800b422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7f7 fa1b 	bl	8002866 <HAL_PCD_Start>
 800b430:	4603      	mov	r3, r0
 800b432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	4618      	mov	r0, r3
 800b438:	f000 f97e 	bl	800b738 <USBD_Get_USB_Status>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b440:	7bbb      	ldrb	r3, [r7, #14]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b084      	sub	sp, #16
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	4608      	mov	r0, r1
 800b454:	4611      	mov	r1, r2
 800b456:	461a      	mov	r2, r3
 800b458:	4603      	mov	r3, r0
 800b45a:	70fb      	strb	r3, [r7, #3]
 800b45c:	460b      	mov	r3, r1
 800b45e:	70bb      	strb	r3, [r7, #2]
 800b460:	4613      	mov	r3, r2
 800b462:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b464:	2300      	movs	r3, #0
 800b466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b472:	78bb      	ldrb	r3, [r7, #2]
 800b474:	883a      	ldrh	r2, [r7, #0]
 800b476:	78f9      	ldrb	r1, [r7, #3]
 800b478:	f7f7 fb62 	bl	8002b40 <HAL_PCD_EP_Open>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	4618      	mov	r0, r3
 800b484:	f000 f958 	bl	800b738 <USBD_Get_USB_Status>
 800b488:	4603      	mov	r3, r0
 800b48a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b48c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b4b0:	78fa      	ldrb	r2, [r7, #3]
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7f7 fba2 	bl	8002bfe <HAL_PCD_EP_Close>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 f939 	bl	800b738 <USBD_Get_USB_Status>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b4ee:	78fa      	ldrb	r2, [r7, #3]
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7f7 fc4b 	bl	8002d8e <HAL_PCD_EP_SetStall>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 f91a 	bl	800b738 <USBD_Get_USB_Status>
 800b504:	4603      	mov	r3, r0
 800b506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b508:	7bbb      	ldrb	r3, [r7, #14]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	460b      	mov	r3, r1
 800b51c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b52c:	78fa      	ldrb	r2, [r7, #3]
 800b52e:	4611      	mov	r1, r2
 800b530:	4618      	mov	r0, r3
 800b532:	f7f7 fc7e 	bl	8002e32 <HAL_PCD_EP_ClrStall>
 800b536:	4603      	mov	r3, r0
 800b538:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 f8fb 	bl	800b738 <USBD_Get_USB_Status>
 800b542:	4603      	mov	r3, r0
 800b544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b546:	7bbb      	ldrb	r3, [r7, #14]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b562:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	da0b      	bge.n	800b584 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b572:	68f9      	ldr	r1, [r7, #12]
 800b574:	4613      	mov	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4413      	add	r3, r2
 800b57a:	00db      	lsls	r3, r3, #3
 800b57c:	440b      	add	r3, r1
 800b57e:	3312      	adds	r3, #18
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	e00b      	b.n	800b59c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b584:	78fb      	ldrb	r3, [r7, #3]
 800b586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b58a:	68f9      	ldr	r1, [r7, #12]
 800b58c:	4613      	mov	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4413      	add	r3, r2
 800b592:	00db      	lsls	r3, r3, #3
 800b594:	440b      	add	r3, r1
 800b596:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b59a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b5c2:	78fa      	ldrb	r2, [r7, #3]
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f7 fa96 	bl	8002af8 <HAL_PCD_SetAddress>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 f8b0 	bl	800b738 <USBD_Get_USB_Status>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b086      	sub	sp, #24
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	60f8      	str	r0, [r7, #12]
 800b5ee:	607a      	str	r2, [r7, #4]
 800b5f0:	603b      	str	r3, [r7, #0]
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b604:	7af9      	ldrb	r1, [r7, #11]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	f7f7 fb89 	bl	8002d20 <HAL_PCD_EP_Transmit>
 800b60e:	4603      	mov	r3, r0
 800b610:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b612:	7dfb      	ldrb	r3, [r7, #23]
 800b614:	4618      	mov	r0, r3
 800b616:	f000 f88f 	bl	800b738 <USBD_Get_USB_Status>
 800b61a:	4603      	mov	r3, r0
 800b61c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b61e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3718      	adds	r7, #24
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	607a      	str	r2, [r7, #4]
 800b632:	603b      	str	r3, [r7, #0]
 800b634:	460b      	mov	r3, r1
 800b636:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b638:	2300      	movs	r3, #0
 800b63a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b646:	7af9      	ldrb	r1, [r7, #11]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	f7f7 fb1f 	bl	8002c8e <HAL_PCD_EP_Receive>
 800b650:	4603      	mov	r3, r0
 800b652:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b654:	7dfb      	ldrb	r3, [r7, #23]
 800b656:	4618      	mov	r0, r3
 800b658:	f000 f86e 	bl	800b738 <USBD_Get_USB_Status>
 800b65c:	4603      	mov	r3, r0
 800b65e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b660:	7dbb      	ldrb	r3, [r7, #22]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b082      	sub	sp, #8
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	460b      	mov	r3, r1
 800b674:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b67c:	78fa      	ldrb	r2, [r7, #3]
 800b67e:	4611      	mov	r1, r2
 800b680:	4618      	mov	r0, r3
 800b682:	f7f7 fb35 	bl	8002cf0 <HAL_PCD_EP_GetRxCount>
 800b686:	4603      	mov	r3, r0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b69c:	78fb      	ldrb	r3, [r7, #3]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <HAL_PCDEx_LPM_Callback+0x18>
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d013      	beq.n	800b6ce <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b6a6:	e023      	b.n	800b6f0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	7a5b      	ldrb	r3, [r3, #9]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d007      	beq.n	800b6c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b6b0:	f000 f83c 	bl	800b72c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6b4:	4b10      	ldr	r3, [pc, #64]	@ (800b6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	4a0f      	ldr	r2, [pc, #60]	@ (800b6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b6ba:	f023 0306 	bic.w	r3, r3, #6
 800b6be:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe fc84 	bl	8009fd4 <USBD_LL_Resume>
    break;
 800b6cc:	e010      	b.n	800b6f0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fe fc67 	bl	8009fa8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7a5b      	ldrb	r3, [r3, #9]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d005      	beq.n	800b6ee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6e2:	4b05      	ldr	r3, [pc, #20]	@ (800b6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	4a04      	ldr	r2, [pc, #16]	@ (800b6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b6e8:	f043 0306 	orr.w	r3, r3, #6
 800b6ec:	6113      	str	r3, [r2, #16]
    break;
 800b6ee:	bf00      	nop
}
 800b6f0:	bf00      	nop
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	e000ed00 	.word	0xe000ed00

0800b6fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b704:	4b03      	ldr	r3, [pc, #12]	@ (800b714 <USBD_static_malloc+0x18>)
}
 800b706:	4618      	mov	r0, r3
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	20001bb4 	.word	0x20001bb4

0800b718 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]

}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b730:	f7f5 f83e 	bl	80007b0 <SystemClock_Config>
}
 800b734:	bf00      	nop
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	4603      	mov	r3, r0
 800b740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b746:	79fb      	ldrb	r3, [r7, #7]
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d817      	bhi.n	800b77c <USBD_Get_USB_Status+0x44>
 800b74c:	a201      	add	r2, pc, #4	@ (adr r2, 800b754 <USBD_Get_USB_Status+0x1c>)
 800b74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b752:	bf00      	nop
 800b754:	0800b765 	.word	0x0800b765
 800b758:	0800b76b 	.word	0x0800b76b
 800b75c:	0800b771 	.word	0x0800b771
 800b760:	0800b777 	.word	0x0800b777
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b764:	2300      	movs	r3, #0
 800b766:	73fb      	strb	r3, [r7, #15]
    break;
 800b768:	e00b      	b.n	800b782 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b76a:	2303      	movs	r3, #3
 800b76c:	73fb      	strb	r3, [r7, #15]
    break;
 800b76e:	e008      	b.n	800b782 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b770:	2301      	movs	r3, #1
 800b772:	73fb      	strb	r3, [r7, #15]
    break;
 800b774:	e005      	b.n	800b782 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b776:	2303      	movs	r3, #3
 800b778:	73fb      	strb	r3, [r7, #15]
    break;
 800b77a:	e002      	b.n	800b782 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b77c:	2303      	movs	r3, #3
 800b77e:	73fb      	strb	r3, [r7, #15]
    break;
 800b780:	bf00      	nop
  }
  return usb_status;
 800b782:	7bfb      	ldrb	r3, [r7, #15]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <std>:
 800b790:	2300      	movs	r3, #0
 800b792:	b510      	push	{r4, lr}
 800b794:	4604      	mov	r4, r0
 800b796:	e9c0 3300 	strd	r3, r3, [r0]
 800b79a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b79e:	6083      	str	r3, [r0, #8]
 800b7a0:	8181      	strh	r1, [r0, #12]
 800b7a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7a4:	81c2      	strh	r2, [r0, #14]
 800b7a6:	6183      	str	r3, [r0, #24]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	2208      	movs	r2, #8
 800b7ac:	305c      	adds	r0, #92	@ 0x5c
 800b7ae:	f000 f9f9 	bl	800bba4 <memset>
 800b7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e8 <std+0x58>)
 800b7b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7ec <std+0x5c>)
 800b7b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f0 <std+0x60>)
 800b7bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7be:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f4 <std+0x64>)
 800b7c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f8 <std+0x68>)
 800b7c4:	6224      	str	r4, [r4, #32]
 800b7c6:	429c      	cmp	r4, r3
 800b7c8:	d006      	beq.n	800b7d8 <std+0x48>
 800b7ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7ce:	4294      	cmp	r4, r2
 800b7d0:	d002      	beq.n	800b7d8 <std+0x48>
 800b7d2:	33d0      	adds	r3, #208	@ 0xd0
 800b7d4:	429c      	cmp	r4, r3
 800b7d6:	d105      	bne.n	800b7e4 <std+0x54>
 800b7d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7e0:	f000 ba58 	b.w	800bc94 <__retarget_lock_init_recursive>
 800b7e4:	bd10      	pop	{r4, pc}
 800b7e6:	bf00      	nop
 800b7e8:	0800b9f5 	.word	0x0800b9f5
 800b7ec:	0800ba17 	.word	0x0800ba17
 800b7f0:	0800ba4f 	.word	0x0800ba4f
 800b7f4:	0800ba73 	.word	0x0800ba73
 800b7f8:	20001dd4 	.word	0x20001dd4

0800b7fc <stdio_exit_handler>:
 800b7fc:	4a02      	ldr	r2, [pc, #8]	@ (800b808 <stdio_exit_handler+0xc>)
 800b7fe:	4903      	ldr	r1, [pc, #12]	@ (800b80c <stdio_exit_handler+0x10>)
 800b800:	4803      	ldr	r0, [pc, #12]	@ (800b810 <stdio_exit_handler+0x14>)
 800b802:	f000 b869 	b.w	800b8d8 <_fwalk_sglue>
 800b806:	bf00      	nop
 800b808:	200001d8 	.word	0x200001d8
 800b80c:	0800c551 	.word	0x0800c551
 800b810:	200001e8 	.word	0x200001e8

0800b814 <cleanup_stdio>:
 800b814:	6841      	ldr	r1, [r0, #4]
 800b816:	4b0c      	ldr	r3, [pc, #48]	@ (800b848 <cleanup_stdio+0x34>)
 800b818:	4299      	cmp	r1, r3
 800b81a:	b510      	push	{r4, lr}
 800b81c:	4604      	mov	r4, r0
 800b81e:	d001      	beq.n	800b824 <cleanup_stdio+0x10>
 800b820:	f000 fe96 	bl	800c550 <_fflush_r>
 800b824:	68a1      	ldr	r1, [r4, #8]
 800b826:	4b09      	ldr	r3, [pc, #36]	@ (800b84c <cleanup_stdio+0x38>)
 800b828:	4299      	cmp	r1, r3
 800b82a:	d002      	beq.n	800b832 <cleanup_stdio+0x1e>
 800b82c:	4620      	mov	r0, r4
 800b82e:	f000 fe8f 	bl	800c550 <_fflush_r>
 800b832:	68e1      	ldr	r1, [r4, #12]
 800b834:	4b06      	ldr	r3, [pc, #24]	@ (800b850 <cleanup_stdio+0x3c>)
 800b836:	4299      	cmp	r1, r3
 800b838:	d004      	beq.n	800b844 <cleanup_stdio+0x30>
 800b83a:	4620      	mov	r0, r4
 800b83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b840:	f000 be86 	b.w	800c550 <_fflush_r>
 800b844:	bd10      	pop	{r4, pc}
 800b846:	bf00      	nop
 800b848:	20001dd4 	.word	0x20001dd4
 800b84c:	20001e3c 	.word	0x20001e3c
 800b850:	20001ea4 	.word	0x20001ea4

0800b854 <global_stdio_init.part.0>:
 800b854:	b510      	push	{r4, lr}
 800b856:	4b0b      	ldr	r3, [pc, #44]	@ (800b884 <global_stdio_init.part.0+0x30>)
 800b858:	4c0b      	ldr	r4, [pc, #44]	@ (800b888 <global_stdio_init.part.0+0x34>)
 800b85a:	4a0c      	ldr	r2, [pc, #48]	@ (800b88c <global_stdio_init.part.0+0x38>)
 800b85c:	601a      	str	r2, [r3, #0]
 800b85e:	4620      	mov	r0, r4
 800b860:	2200      	movs	r2, #0
 800b862:	2104      	movs	r1, #4
 800b864:	f7ff ff94 	bl	800b790 <std>
 800b868:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b86c:	2201      	movs	r2, #1
 800b86e:	2109      	movs	r1, #9
 800b870:	f7ff ff8e 	bl	800b790 <std>
 800b874:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b878:	2202      	movs	r2, #2
 800b87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b87e:	2112      	movs	r1, #18
 800b880:	f7ff bf86 	b.w	800b790 <std>
 800b884:	20001f0c 	.word	0x20001f0c
 800b888:	20001dd4 	.word	0x20001dd4
 800b88c:	0800b7fd 	.word	0x0800b7fd

0800b890 <__sfp_lock_acquire>:
 800b890:	4801      	ldr	r0, [pc, #4]	@ (800b898 <__sfp_lock_acquire+0x8>)
 800b892:	f000 ba00 	b.w	800bc96 <__retarget_lock_acquire_recursive>
 800b896:	bf00      	nop
 800b898:	20001f15 	.word	0x20001f15

0800b89c <__sfp_lock_release>:
 800b89c:	4801      	ldr	r0, [pc, #4]	@ (800b8a4 <__sfp_lock_release+0x8>)
 800b89e:	f000 b9fb 	b.w	800bc98 <__retarget_lock_release_recursive>
 800b8a2:	bf00      	nop
 800b8a4:	20001f15 	.word	0x20001f15

0800b8a8 <__sinit>:
 800b8a8:	b510      	push	{r4, lr}
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	f7ff fff0 	bl	800b890 <__sfp_lock_acquire>
 800b8b0:	6a23      	ldr	r3, [r4, #32]
 800b8b2:	b11b      	cbz	r3, 800b8bc <__sinit+0x14>
 800b8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8b8:	f7ff bff0 	b.w	800b89c <__sfp_lock_release>
 800b8bc:	4b04      	ldr	r3, [pc, #16]	@ (800b8d0 <__sinit+0x28>)
 800b8be:	6223      	str	r3, [r4, #32]
 800b8c0:	4b04      	ldr	r3, [pc, #16]	@ (800b8d4 <__sinit+0x2c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1f5      	bne.n	800b8b4 <__sinit+0xc>
 800b8c8:	f7ff ffc4 	bl	800b854 <global_stdio_init.part.0>
 800b8cc:	e7f2      	b.n	800b8b4 <__sinit+0xc>
 800b8ce:	bf00      	nop
 800b8d0:	0800b815 	.word	0x0800b815
 800b8d4:	20001f0c 	.word	0x20001f0c

0800b8d8 <_fwalk_sglue>:
 800b8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8dc:	4607      	mov	r7, r0
 800b8de:	4688      	mov	r8, r1
 800b8e0:	4614      	mov	r4, r2
 800b8e2:	2600      	movs	r6, #0
 800b8e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8e8:	f1b9 0901 	subs.w	r9, r9, #1
 800b8ec:	d505      	bpl.n	800b8fa <_fwalk_sglue+0x22>
 800b8ee:	6824      	ldr	r4, [r4, #0]
 800b8f0:	2c00      	cmp	r4, #0
 800b8f2:	d1f7      	bne.n	800b8e4 <_fwalk_sglue+0xc>
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8fa:	89ab      	ldrh	r3, [r5, #12]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d907      	bls.n	800b910 <_fwalk_sglue+0x38>
 800b900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b904:	3301      	adds	r3, #1
 800b906:	d003      	beq.n	800b910 <_fwalk_sglue+0x38>
 800b908:	4629      	mov	r1, r5
 800b90a:	4638      	mov	r0, r7
 800b90c:	47c0      	blx	r8
 800b90e:	4306      	orrs	r6, r0
 800b910:	3568      	adds	r5, #104	@ 0x68
 800b912:	e7e9      	b.n	800b8e8 <_fwalk_sglue+0x10>

0800b914 <iprintf>:
 800b914:	b40f      	push	{r0, r1, r2, r3}
 800b916:	b507      	push	{r0, r1, r2, lr}
 800b918:	4906      	ldr	r1, [pc, #24]	@ (800b934 <iprintf+0x20>)
 800b91a:	ab04      	add	r3, sp, #16
 800b91c:	6808      	ldr	r0, [r1, #0]
 800b91e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b922:	6881      	ldr	r1, [r0, #8]
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	f000 fae9 	bl	800befc <_vfiprintf_r>
 800b92a:	b003      	add	sp, #12
 800b92c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b930:	b004      	add	sp, #16
 800b932:	4770      	bx	lr
 800b934:	200001e4 	.word	0x200001e4

0800b938 <_puts_r>:
 800b938:	6a03      	ldr	r3, [r0, #32]
 800b93a:	b570      	push	{r4, r5, r6, lr}
 800b93c:	6884      	ldr	r4, [r0, #8]
 800b93e:	4605      	mov	r5, r0
 800b940:	460e      	mov	r6, r1
 800b942:	b90b      	cbnz	r3, 800b948 <_puts_r+0x10>
 800b944:	f7ff ffb0 	bl	800b8a8 <__sinit>
 800b948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b94a:	07db      	lsls	r3, r3, #31
 800b94c:	d405      	bmi.n	800b95a <_puts_r+0x22>
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	0598      	lsls	r0, r3, #22
 800b952:	d402      	bmi.n	800b95a <_puts_r+0x22>
 800b954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b956:	f000 f99e 	bl	800bc96 <__retarget_lock_acquire_recursive>
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	0719      	lsls	r1, r3, #28
 800b95e:	d502      	bpl.n	800b966 <_puts_r+0x2e>
 800b960:	6923      	ldr	r3, [r4, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d135      	bne.n	800b9d2 <_puts_r+0x9a>
 800b966:	4621      	mov	r1, r4
 800b968:	4628      	mov	r0, r5
 800b96a:	f000 f8c5 	bl	800baf8 <__swsetup_r>
 800b96e:	b380      	cbz	r0, 800b9d2 <_puts_r+0x9a>
 800b970:	f04f 35ff 	mov.w	r5, #4294967295
 800b974:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b976:	07da      	lsls	r2, r3, #31
 800b978:	d405      	bmi.n	800b986 <_puts_r+0x4e>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	059b      	lsls	r3, r3, #22
 800b97e:	d402      	bmi.n	800b986 <_puts_r+0x4e>
 800b980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b982:	f000 f989 	bl	800bc98 <__retarget_lock_release_recursive>
 800b986:	4628      	mov	r0, r5
 800b988:	bd70      	pop	{r4, r5, r6, pc}
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	da04      	bge.n	800b998 <_puts_r+0x60>
 800b98e:	69a2      	ldr	r2, [r4, #24]
 800b990:	429a      	cmp	r2, r3
 800b992:	dc17      	bgt.n	800b9c4 <_puts_r+0x8c>
 800b994:	290a      	cmp	r1, #10
 800b996:	d015      	beq.n	800b9c4 <_puts_r+0x8c>
 800b998:	6823      	ldr	r3, [r4, #0]
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	6022      	str	r2, [r4, #0]
 800b99e:	7019      	strb	r1, [r3, #0]
 800b9a0:	68a3      	ldr	r3, [r4, #8]
 800b9a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	60a3      	str	r3, [r4, #8]
 800b9aa:	2900      	cmp	r1, #0
 800b9ac:	d1ed      	bne.n	800b98a <_puts_r+0x52>
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	da11      	bge.n	800b9d6 <_puts_r+0x9e>
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	210a      	movs	r1, #10
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f000 f85f 	bl	800ba7a <__swbuf_r>
 800b9bc:	3001      	adds	r0, #1
 800b9be:	d0d7      	beq.n	800b970 <_puts_r+0x38>
 800b9c0:	250a      	movs	r5, #10
 800b9c2:	e7d7      	b.n	800b974 <_puts_r+0x3c>
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	f000 f857 	bl	800ba7a <__swbuf_r>
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	d1e7      	bne.n	800b9a0 <_puts_r+0x68>
 800b9d0:	e7ce      	b.n	800b970 <_puts_r+0x38>
 800b9d2:	3e01      	subs	r6, #1
 800b9d4:	e7e4      	b.n	800b9a0 <_puts_r+0x68>
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	6022      	str	r2, [r4, #0]
 800b9dc:	220a      	movs	r2, #10
 800b9de:	701a      	strb	r2, [r3, #0]
 800b9e0:	e7ee      	b.n	800b9c0 <_puts_r+0x88>
	...

0800b9e4 <puts>:
 800b9e4:	4b02      	ldr	r3, [pc, #8]	@ (800b9f0 <puts+0xc>)
 800b9e6:	4601      	mov	r1, r0
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	f7ff bfa5 	b.w	800b938 <_puts_r>
 800b9ee:	bf00      	nop
 800b9f0:	200001e4 	.word	0x200001e4

0800b9f4 <__sread>:
 800b9f4:	b510      	push	{r4, lr}
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fc:	f000 f8fc 	bl	800bbf8 <_read_r>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	bfab      	itete	ge
 800ba04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba06:	89a3      	ldrhlt	r3, [r4, #12]
 800ba08:	181b      	addge	r3, r3, r0
 800ba0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba0e:	bfac      	ite	ge
 800ba10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba12:	81a3      	strhlt	r3, [r4, #12]
 800ba14:	bd10      	pop	{r4, pc}

0800ba16 <__swrite>:
 800ba16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1a:	461f      	mov	r7, r3
 800ba1c:	898b      	ldrh	r3, [r1, #12]
 800ba1e:	05db      	lsls	r3, r3, #23
 800ba20:	4605      	mov	r5, r0
 800ba22:	460c      	mov	r4, r1
 800ba24:	4616      	mov	r6, r2
 800ba26:	d505      	bpl.n	800ba34 <__swrite+0x1e>
 800ba28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f000 f8d0 	bl	800bbd4 <_lseek_r>
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba3e:	81a3      	strh	r3, [r4, #12]
 800ba40:	4632      	mov	r2, r6
 800ba42:	463b      	mov	r3, r7
 800ba44:	4628      	mov	r0, r5
 800ba46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4a:	f000 b8e7 	b.w	800bc1c <_write_r>

0800ba4e <__sseek>:
 800ba4e:	b510      	push	{r4, lr}
 800ba50:	460c      	mov	r4, r1
 800ba52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba56:	f000 f8bd 	bl	800bbd4 <_lseek_r>
 800ba5a:	1c43      	adds	r3, r0, #1
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	bf15      	itete	ne
 800ba60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba6a:	81a3      	strheq	r3, [r4, #12]
 800ba6c:	bf18      	it	ne
 800ba6e:	81a3      	strhne	r3, [r4, #12]
 800ba70:	bd10      	pop	{r4, pc}

0800ba72 <__sclose>:
 800ba72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba76:	f000 b89d 	b.w	800bbb4 <_close_r>

0800ba7a <__swbuf_r>:
 800ba7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7c:	460e      	mov	r6, r1
 800ba7e:	4614      	mov	r4, r2
 800ba80:	4605      	mov	r5, r0
 800ba82:	b118      	cbz	r0, 800ba8c <__swbuf_r+0x12>
 800ba84:	6a03      	ldr	r3, [r0, #32]
 800ba86:	b90b      	cbnz	r3, 800ba8c <__swbuf_r+0x12>
 800ba88:	f7ff ff0e 	bl	800b8a8 <__sinit>
 800ba8c:	69a3      	ldr	r3, [r4, #24]
 800ba8e:	60a3      	str	r3, [r4, #8]
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	071a      	lsls	r2, r3, #28
 800ba94:	d501      	bpl.n	800ba9a <__swbuf_r+0x20>
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	b943      	cbnz	r3, 800baac <__swbuf_r+0x32>
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	f000 f82b 	bl	800baf8 <__swsetup_r>
 800baa2:	b118      	cbz	r0, 800baac <__swbuf_r+0x32>
 800baa4:	f04f 37ff 	mov.w	r7, #4294967295
 800baa8:	4638      	mov	r0, r7
 800baaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	6922      	ldr	r2, [r4, #16]
 800bab0:	1a98      	subs	r0, r3, r2
 800bab2:	6963      	ldr	r3, [r4, #20]
 800bab4:	b2f6      	uxtb	r6, r6
 800bab6:	4283      	cmp	r3, r0
 800bab8:	4637      	mov	r7, r6
 800baba:	dc05      	bgt.n	800bac8 <__swbuf_r+0x4e>
 800babc:	4621      	mov	r1, r4
 800babe:	4628      	mov	r0, r5
 800bac0:	f000 fd46 	bl	800c550 <_fflush_r>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d1ed      	bne.n	800baa4 <__swbuf_r+0x2a>
 800bac8:	68a3      	ldr	r3, [r4, #8]
 800baca:	3b01      	subs	r3, #1
 800bacc:	60a3      	str	r3, [r4, #8]
 800bace:	6823      	ldr	r3, [r4, #0]
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	6022      	str	r2, [r4, #0]
 800bad4:	701e      	strb	r6, [r3, #0]
 800bad6:	6962      	ldr	r2, [r4, #20]
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	429a      	cmp	r2, r3
 800badc:	d004      	beq.n	800bae8 <__swbuf_r+0x6e>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	07db      	lsls	r3, r3, #31
 800bae2:	d5e1      	bpl.n	800baa8 <__swbuf_r+0x2e>
 800bae4:	2e0a      	cmp	r6, #10
 800bae6:	d1df      	bne.n	800baa8 <__swbuf_r+0x2e>
 800bae8:	4621      	mov	r1, r4
 800baea:	4628      	mov	r0, r5
 800baec:	f000 fd30 	bl	800c550 <_fflush_r>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d0d9      	beq.n	800baa8 <__swbuf_r+0x2e>
 800baf4:	e7d6      	b.n	800baa4 <__swbuf_r+0x2a>
	...

0800baf8 <__swsetup_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	4b29      	ldr	r3, [pc, #164]	@ (800bba0 <__swsetup_r+0xa8>)
 800bafc:	4605      	mov	r5, r0
 800bafe:	6818      	ldr	r0, [r3, #0]
 800bb00:	460c      	mov	r4, r1
 800bb02:	b118      	cbz	r0, 800bb0c <__swsetup_r+0x14>
 800bb04:	6a03      	ldr	r3, [r0, #32]
 800bb06:	b90b      	cbnz	r3, 800bb0c <__swsetup_r+0x14>
 800bb08:	f7ff fece 	bl	800b8a8 <__sinit>
 800bb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb10:	0719      	lsls	r1, r3, #28
 800bb12:	d422      	bmi.n	800bb5a <__swsetup_r+0x62>
 800bb14:	06da      	lsls	r2, r3, #27
 800bb16:	d407      	bmi.n	800bb28 <__swsetup_r+0x30>
 800bb18:	2209      	movs	r2, #9
 800bb1a:	602a      	str	r2, [r5, #0]
 800bb1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	f04f 30ff 	mov.w	r0, #4294967295
 800bb26:	e033      	b.n	800bb90 <__swsetup_r+0x98>
 800bb28:	0758      	lsls	r0, r3, #29
 800bb2a:	d512      	bpl.n	800bb52 <__swsetup_r+0x5a>
 800bb2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb2e:	b141      	cbz	r1, 800bb42 <__swsetup_r+0x4a>
 800bb30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb34:	4299      	cmp	r1, r3
 800bb36:	d002      	beq.n	800bb3e <__swsetup_r+0x46>
 800bb38:	4628      	mov	r0, r5
 800bb3a:	f000 f8bd 	bl	800bcb8 <_free_r>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb48:	81a3      	strh	r3, [r4, #12]
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	6063      	str	r3, [r4, #4]
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	f043 0308 	orr.w	r3, r3, #8
 800bb58:	81a3      	strh	r3, [r4, #12]
 800bb5a:	6923      	ldr	r3, [r4, #16]
 800bb5c:	b94b      	cbnz	r3, 800bb72 <__swsetup_r+0x7a>
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bb64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb68:	d003      	beq.n	800bb72 <__swsetup_r+0x7a>
 800bb6a:	4621      	mov	r1, r4
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	f000 fd3d 	bl	800c5ec <__smakebuf_r>
 800bb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb76:	f013 0201 	ands.w	r2, r3, #1
 800bb7a:	d00a      	beq.n	800bb92 <__swsetup_r+0x9a>
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	60a2      	str	r2, [r4, #8]
 800bb80:	6962      	ldr	r2, [r4, #20]
 800bb82:	4252      	negs	r2, r2
 800bb84:	61a2      	str	r2, [r4, #24]
 800bb86:	6922      	ldr	r2, [r4, #16]
 800bb88:	b942      	cbnz	r2, 800bb9c <__swsetup_r+0xa4>
 800bb8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bb8e:	d1c5      	bne.n	800bb1c <__swsetup_r+0x24>
 800bb90:	bd38      	pop	{r3, r4, r5, pc}
 800bb92:	0799      	lsls	r1, r3, #30
 800bb94:	bf58      	it	pl
 800bb96:	6962      	ldrpl	r2, [r4, #20]
 800bb98:	60a2      	str	r2, [r4, #8]
 800bb9a:	e7f4      	b.n	800bb86 <__swsetup_r+0x8e>
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	e7f7      	b.n	800bb90 <__swsetup_r+0x98>
 800bba0:	200001e4 	.word	0x200001e4

0800bba4 <memset>:
 800bba4:	4402      	add	r2, r0
 800bba6:	4603      	mov	r3, r0
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d100      	bne.n	800bbae <memset+0xa>
 800bbac:	4770      	bx	lr
 800bbae:	f803 1b01 	strb.w	r1, [r3], #1
 800bbb2:	e7f9      	b.n	800bba8 <memset+0x4>

0800bbb4 <_close_r>:
 800bbb4:	b538      	push	{r3, r4, r5, lr}
 800bbb6:	4d06      	ldr	r5, [pc, #24]	@ (800bbd0 <_close_r+0x1c>)
 800bbb8:	2300      	movs	r3, #0
 800bbba:	4604      	mov	r4, r0
 800bbbc:	4608      	mov	r0, r1
 800bbbe:	602b      	str	r3, [r5, #0]
 800bbc0:	f7f5 f8f9 	bl	8000db6 <_close>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_close_r+0x1a>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_close_r+0x1a>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	20001f10 	.word	0x20001f10

0800bbd4 <_lseek_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4d07      	ldr	r5, [pc, #28]	@ (800bbf4 <_lseek_r+0x20>)
 800bbd8:	4604      	mov	r4, r0
 800bbda:	4608      	mov	r0, r1
 800bbdc:	4611      	mov	r1, r2
 800bbde:	2200      	movs	r2, #0
 800bbe0:	602a      	str	r2, [r5, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f7f5 f90e 	bl	8000e04 <_lseek>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <_lseek_r+0x1e>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	b103      	cbz	r3, 800bbf2 <_lseek_r+0x1e>
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	20001f10 	.word	0x20001f10

0800bbf8 <_read_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4d07      	ldr	r5, [pc, #28]	@ (800bc18 <_read_r+0x20>)
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	4608      	mov	r0, r1
 800bc00:	4611      	mov	r1, r2
 800bc02:	2200      	movs	r2, #0
 800bc04:	602a      	str	r2, [r5, #0]
 800bc06:	461a      	mov	r2, r3
 800bc08:	f7f5 f8b8 	bl	8000d7c <_read>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_read_r+0x1e>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_read_r+0x1e>
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	20001f10 	.word	0x20001f10

0800bc1c <_write_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4d07      	ldr	r5, [pc, #28]	@ (800bc3c <_write_r+0x20>)
 800bc20:	4604      	mov	r4, r0
 800bc22:	4608      	mov	r0, r1
 800bc24:	4611      	mov	r1, r2
 800bc26:	2200      	movs	r2, #0
 800bc28:	602a      	str	r2, [r5, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	f7f5 fa96 	bl	800115c <_write>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d102      	bne.n	800bc3a <_write_r+0x1e>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	b103      	cbz	r3, 800bc3a <_write_r+0x1e>
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	20001f10 	.word	0x20001f10

0800bc40 <__errno>:
 800bc40:	4b01      	ldr	r3, [pc, #4]	@ (800bc48 <__errno+0x8>)
 800bc42:	6818      	ldr	r0, [r3, #0]
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	200001e4 	.word	0x200001e4

0800bc4c <__libc_init_array>:
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	4d0d      	ldr	r5, [pc, #52]	@ (800bc84 <__libc_init_array+0x38>)
 800bc50:	4c0d      	ldr	r4, [pc, #52]	@ (800bc88 <__libc_init_array+0x3c>)
 800bc52:	1b64      	subs	r4, r4, r5
 800bc54:	10a4      	asrs	r4, r4, #2
 800bc56:	2600      	movs	r6, #0
 800bc58:	42a6      	cmp	r6, r4
 800bc5a:	d109      	bne.n	800bc70 <__libc_init_array+0x24>
 800bc5c:	4d0b      	ldr	r5, [pc, #44]	@ (800bc8c <__libc_init_array+0x40>)
 800bc5e:	4c0c      	ldr	r4, [pc, #48]	@ (800bc90 <__libc_init_array+0x44>)
 800bc60:	f000 fd32 	bl	800c6c8 <_init>
 800bc64:	1b64      	subs	r4, r4, r5
 800bc66:	10a4      	asrs	r4, r4, #2
 800bc68:	2600      	movs	r6, #0
 800bc6a:	42a6      	cmp	r6, r4
 800bc6c:	d105      	bne.n	800bc7a <__libc_init_array+0x2e>
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc74:	4798      	blx	r3
 800bc76:	3601      	adds	r6, #1
 800bc78:	e7ee      	b.n	800bc58 <__libc_init_array+0xc>
 800bc7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc7e:	4798      	blx	r3
 800bc80:	3601      	adds	r6, #1
 800bc82:	e7f2      	b.n	800bc6a <__libc_init_array+0x1e>
 800bc84:	0800c964 	.word	0x0800c964
 800bc88:	0800c964 	.word	0x0800c964
 800bc8c:	0800c964 	.word	0x0800c964
 800bc90:	0800c968 	.word	0x0800c968

0800bc94 <__retarget_lock_init_recursive>:
 800bc94:	4770      	bx	lr

0800bc96 <__retarget_lock_acquire_recursive>:
 800bc96:	4770      	bx	lr

0800bc98 <__retarget_lock_release_recursive>:
 800bc98:	4770      	bx	lr

0800bc9a <memcpy>:
 800bc9a:	440a      	add	r2, r1
 800bc9c:	4291      	cmp	r1, r2
 800bc9e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bca2:	d100      	bne.n	800bca6 <memcpy+0xc>
 800bca4:	4770      	bx	lr
 800bca6:	b510      	push	{r4, lr}
 800bca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcb0:	4291      	cmp	r1, r2
 800bcb2:	d1f9      	bne.n	800bca8 <memcpy+0xe>
 800bcb4:	bd10      	pop	{r4, pc}
	...

0800bcb8 <_free_r>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	4605      	mov	r5, r0
 800bcbc:	2900      	cmp	r1, #0
 800bcbe:	d041      	beq.n	800bd44 <_free_r+0x8c>
 800bcc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcc4:	1f0c      	subs	r4, r1, #4
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	bfb8      	it	lt
 800bcca:	18e4      	addlt	r4, r4, r3
 800bccc:	f000 f8e0 	bl	800be90 <__malloc_lock>
 800bcd0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd48 <_free_r+0x90>)
 800bcd2:	6813      	ldr	r3, [r2, #0]
 800bcd4:	b933      	cbnz	r3, 800bce4 <_free_r+0x2c>
 800bcd6:	6063      	str	r3, [r4, #4]
 800bcd8:	6014      	str	r4, [r2, #0]
 800bcda:	4628      	mov	r0, r5
 800bcdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bce0:	f000 b8dc 	b.w	800be9c <__malloc_unlock>
 800bce4:	42a3      	cmp	r3, r4
 800bce6:	d908      	bls.n	800bcfa <_free_r+0x42>
 800bce8:	6820      	ldr	r0, [r4, #0]
 800bcea:	1821      	adds	r1, r4, r0
 800bcec:	428b      	cmp	r3, r1
 800bcee:	bf01      	itttt	eq
 800bcf0:	6819      	ldreq	r1, [r3, #0]
 800bcf2:	685b      	ldreq	r3, [r3, #4]
 800bcf4:	1809      	addeq	r1, r1, r0
 800bcf6:	6021      	streq	r1, [r4, #0]
 800bcf8:	e7ed      	b.n	800bcd6 <_free_r+0x1e>
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	b10b      	cbz	r3, 800bd04 <_free_r+0x4c>
 800bd00:	42a3      	cmp	r3, r4
 800bd02:	d9fa      	bls.n	800bcfa <_free_r+0x42>
 800bd04:	6811      	ldr	r1, [r2, #0]
 800bd06:	1850      	adds	r0, r2, r1
 800bd08:	42a0      	cmp	r0, r4
 800bd0a:	d10b      	bne.n	800bd24 <_free_r+0x6c>
 800bd0c:	6820      	ldr	r0, [r4, #0]
 800bd0e:	4401      	add	r1, r0
 800bd10:	1850      	adds	r0, r2, r1
 800bd12:	4283      	cmp	r3, r0
 800bd14:	6011      	str	r1, [r2, #0]
 800bd16:	d1e0      	bne.n	800bcda <_free_r+0x22>
 800bd18:	6818      	ldr	r0, [r3, #0]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	6053      	str	r3, [r2, #4]
 800bd1e:	4408      	add	r0, r1
 800bd20:	6010      	str	r0, [r2, #0]
 800bd22:	e7da      	b.n	800bcda <_free_r+0x22>
 800bd24:	d902      	bls.n	800bd2c <_free_r+0x74>
 800bd26:	230c      	movs	r3, #12
 800bd28:	602b      	str	r3, [r5, #0]
 800bd2a:	e7d6      	b.n	800bcda <_free_r+0x22>
 800bd2c:	6820      	ldr	r0, [r4, #0]
 800bd2e:	1821      	adds	r1, r4, r0
 800bd30:	428b      	cmp	r3, r1
 800bd32:	bf04      	itt	eq
 800bd34:	6819      	ldreq	r1, [r3, #0]
 800bd36:	685b      	ldreq	r3, [r3, #4]
 800bd38:	6063      	str	r3, [r4, #4]
 800bd3a:	bf04      	itt	eq
 800bd3c:	1809      	addeq	r1, r1, r0
 800bd3e:	6021      	streq	r1, [r4, #0]
 800bd40:	6054      	str	r4, [r2, #4]
 800bd42:	e7ca      	b.n	800bcda <_free_r+0x22>
 800bd44:	bd38      	pop	{r3, r4, r5, pc}
 800bd46:	bf00      	nop
 800bd48:	20001f1c 	.word	0x20001f1c

0800bd4c <sbrk_aligned>:
 800bd4c:	b570      	push	{r4, r5, r6, lr}
 800bd4e:	4e0f      	ldr	r6, [pc, #60]	@ (800bd8c <sbrk_aligned+0x40>)
 800bd50:	460c      	mov	r4, r1
 800bd52:	6831      	ldr	r1, [r6, #0]
 800bd54:	4605      	mov	r5, r0
 800bd56:	b911      	cbnz	r1, 800bd5e <sbrk_aligned+0x12>
 800bd58:	f000 fca6 	bl	800c6a8 <_sbrk_r>
 800bd5c:	6030      	str	r0, [r6, #0]
 800bd5e:	4621      	mov	r1, r4
 800bd60:	4628      	mov	r0, r5
 800bd62:	f000 fca1 	bl	800c6a8 <_sbrk_r>
 800bd66:	1c43      	adds	r3, r0, #1
 800bd68:	d103      	bne.n	800bd72 <sbrk_aligned+0x26>
 800bd6a:	f04f 34ff 	mov.w	r4, #4294967295
 800bd6e:	4620      	mov	r0, r4
 800bd70:	bd70      	pop	{r4, r5, r6, pc}
 800bd72:	1cc4      	adds	r4, r0, #3
 800bd74:	f024 0403 	bic.w	r4, r4, #3
 800bd78:	42a0      	cmp	r0, r4
 800bd7a:	d0f8      	beq.n	800bd6e <sbrk_aligned+0x22>
 800bd7c:	1a21      	subs	r1, r4, r0
 800bd7e:	4628      	mov	r0, r5
 800bd80:	f000 fc92 	bl	800c6a8 <_sbrk_r>
 800bd84:	3001      	adds	r0, #1
 800bd86:	d1f2      	bne.n	800bd6e <sbrk_aligned+0x22>
 800bd88:	e7ef      	b.n	800bd6a <sbrk_aligned+0x1e>
 800bd8a:	bf00      	nop
 800bd8c:	20001f18 	.word	0x20001f18

0800bd90 <_malloc_r>:
 800bd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd94:	1ccd      	adds	r5, r1, #3
 800bd96:	f025 0503 	bic.w	r5, r5, #3
 800bd9a:	3508      	adds	r5, #8
 800bd9c:	2d0c      	cmp	r5, #12
 800bd9e:	bf38      	it	cc
 800bda0:	250c      	movcc	r5, #12
 800bda2:	2d00      	cmp	r5, #0
 800bda4:	4606      	mov	r6, r0
 800bda6:	db01      	blt.n	800bdac <_malloc_r+0x1c>
 800bda8:	42a9      	cmp	r1, r5
 800bdaa:	d904      	bls.n	800bdb6 <_malloc_r+0x26>
 800bdac:	230c      	movs	r3, #12
 800bdae:	6033      	str	r3, [r6, #0]
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be8c <_malloc_r+0xfc>
 800bdba:	f000 f869 	bl	800be90 <__malloc_lock>
 800bdbe:	f8d8 3000 	ldr.w	r3, [r8]
 800bdc2:	461c      	mov	r4, r3
 800bdc4:	bb44      	cbnz	r4, 800be18 <_malloc_r+0x88>
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f7ff ffbf 	bl	800bd4c <sbrk_aligned>
 800bdce:	1c43      	adds	r3, r0, #1
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	d158      	bne.n	800be86 <_malloc_r+0xf6>
 800bdd4:	f8d8 4000 	ldr.w	r4, [r8]
 800bdd8:	4627      	mov	r7, r4
 800bdda:	2f00      	cmp	r7, #0
 800bddc:	d143      	bne.n	800be66 <_malloc_r+0xd6>
 800bdde:	2c00      	cmp	r4, #0
 800bde0:	d04b      	beq.n	800be7a <_malloc_r+0xea>
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	4639      	mov	r1, r7
 800bde6:	4630      	mov	r0, r6
 800bde8:	eb04 0903 	add.w	r9, r4, r3
 800bdec:	f000 fc5c 	bl	800c6a8 <_sbrk_r>
 800bdf0:	4581      	cmp	r9, r0
 800bdf2:	d142      	bne.n	800be7a <_malloc_r+0xea>
 800bdf4:	6821      	ldr	r1, [r4, #0]
 800bdf6:	1a6d      	subs	r5, r5, r1
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7ff ffa6 	bl	800bd4c <sbrk_aligned>
 800be00:	3001      	adds	r0, #1
 800be02:	d03a      	beq.n	800be7a <_malloc_r+0xea>
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	442b      	add	r3, r5
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	f8d8 3000 	ldr.w	r3, [r8]
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	bb62      	cbnz	r2, 800be6c <_malloc_r+0xdc>
 800be12:	f8c8 7000 	str.w	r7, [r8]
 800be16:	e00f      	b.n	800be38 <_malloc_r+0xa8>
 800be18:	6822      	ldr	r2, [r4, #0]
 800be1a:	1b52      	subs	r2, r2, r5
 800be1c:	d420      	bmi.n	800be60 <_malloc_r+0xd0>
 800be1e:	2a0b      	cmp	r2, #11
 800be20:	d917      	bls.n	800be52 <_malloc_r+0xc2>
 800be22:	1961      	adds	r1, r4, r5
 800be24:	42a3      	cmp	r3, r4
 800be26:	6025      	str	r5, [r4, #0]
 800be28:	bf18      	it	ne
 800be2a:	6059      	strne	r1, [r3, #4]
 800be2c:	6863      	ldr	r3, [r4, #4]
 800be2e:	bf08      	it	eq
 800be30:	f8c8 1000 	streq.w	r1, [r8]
 800be34:	5162      	str	r2, [r4, r5]
 800be36:	604b      	str	r3, [r1, #4]
 800be38:	4630      	mov	r0, r6
 800be3a:	f000 f82f 	bl	800be9c <__malloc_unlock>
 800be3e:	f104 000b 	add.w	r0, r4, #11
 800be42:	1d23      	adds	r3, r4, #4
 800be44:	f020 0007 	bic.w	r0, r0, #7
 800be48:	1ac2      	subs	r2, r0, r3
 800be4a:	bf1c      	itt	ne
 800be4c:	1a1b      	subne	r3, r3, r0
 800be4e:	50a3      	strne	r3, [r4, r2]
 800be50:	e7af      	b.n	800bdb2 <_malloc_r+0x22>
 800be52:	6862      	ldr	r2, [r4, #4]
 800be54:	42a3      	cmp	r3, r4
 800be56:	bf0c      	ite	eq
 800be58:	f8c8 2000 	streq.w	r2, [r8]
 800be5c:	605a      	strne	r2, [r3, #4]
 800be5e:	e7eb      	b.n	800be38 <_malloc_r+0xa8>
 800be60:	4623      	mov	r3, r4
 800be62:	6864      	ldr	r4, [r4, #4]
 800be64:	e7ae      	b.n	800bdc4 <_malloc_r+0x34>
 800be66:	463c      	mov	r4, r7
 800be68:	687f      	ldr	r7, [r7, #4]
 800be6a:	e7b6      	b.n	800bdda <_malloc_r+0x4a>
 800be6c:	461a      	mov	r2, r3
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	42a3      	cmp	r3, r4
 800be72:	d1fb      	bne.n	800be6c <_malloc_r+0xdc>
 800be74:	2300      	movs	r3, #0
 800be76:	6053      	str	r3, [r2, #4]
 800be78:	e7de      	b.n	800be38 <_malloc_r+0xa8>
 800be7a:	230c      	movs	r3, #12
 800be7c:	6033      	str	r3, [r6, #0]
 800be7e:	4630      	mov	r0, r6
 800be80:	f000 f80c 	bl	800be9c <__malloc_unlock>
 800be84:	e794      	b.n	800bdb0 <_malloc_r+0x20>
 800be86:	6005      	str	r5, [r0, #0]
 800be88:	e7d6      	b.n	800be38 <_malloc_r+0xa8>
 800be8a:	bf00      	nop
 800be8c:	20001f1c 	.word	0x20001f1c

0800be90 <__malloc_lock>:
 800be90:	4801      	ldr	r0, [pc, #4]	@ (800be98 <__malloc_lock+0x8>)
 800be92:	f7ff bf00 	b.w	800bc96 <__retarget_lock_acquire_recursive>
 800be96:	bf00      	nop
 800be98:	20001f14 	.word	0x20001f14

0800be9c <__malloc_unlock>:
 800be9c:	4801      	ldr	r0, [pc, #4]	@ (800bea4 <__malloc_unlock+0x8>)
 800be9e:	f7ff befb 	b.w	800bc98 <__retarget_lock_release_recursive>
 800bea2:	bf00      	nop
 800bea4:	20001f14 	.word	0x20001f14

0800bea8 <__sfputc_r>:
 800bea8:	6893      	ldr	r3, [r2, #8]
 800beaa:	3b01      	subs	r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	b410      	push	{r4}
 800beb0:	6093      	str	r3, [r2, #8]
 800beb2:	da08      	bge.n	800bec6 <__sfputc_r+0x1e>
 800beb4:	6994      	ldr	r4, [r2, #24]
 800beb6:	42a3      	cmp	r3, r4
 800beb8:	db01      	blt.n	800bebe <__sfputc_r+0x16>
 800beba:	290a      	cmp	r1, #10
 800bebc:	d103      	bne.n	800bec6 <__sfputc_r+0x1e>
 800bebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bec2:	f7ff bdda 	b.w	800ba7a <__swbuf_r>
 800bec6:	6813      	ldr	r3, [r2, #0]
 800bec8:	1c58      	adds	r0, r3, #1
 800beca:	6010      	str	r0, [r2, #0]
 800becc:	7019      	strb	r1, [r3, #0]
 800bece:	4608      	mov	r0, r1
 800bed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <__sfputs_r>:
 800bed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed8:	4606      	mov	r6, r0
 800beda:	460f      	mov	r7, r1
 800bedc:	4614      	mov	r4, r2
 800bede:	18d5      	adds	r5, r2, r3
 800bee0:	42ac      	cmp	r4, r5
 800bee2:	d101      	bne.n	800bee8 <__sfputs_r+0x12>
 800bee4:	2000      	movs	r0, #0
 800bee6:	e007      	b.n	800bef8 <__sfputs_r+0x22>
 800bee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beec:	463a      	mov	r2, r7
 800beee:	4630      	mov	r0, r6
 800bef0:	f7ff ffda 	bl	800bea8 <__sfputc_r>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d1f3      	bne.n	800bee0 <__sfputs_r+0xa>
 800bef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800befc <_vfiprintf_r>:
 800befc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf00:	460d      	mov	r5, r1
 800bf02:	b09d      	sub	sp, #116	@ 0x74
 800bf04:	4614      	mov	r4, r2
 800bf06:	4698      	mov	r8, r3
 800bf08:	4606      	mov	r6, r0
 800bf0a:	b118      	cbz	r0, 800bf14 <_vfiprintf_r+0x18>
 800bf0c:	6a03      	ldr	r3, [r0, #32]
 800bf0e:	b90b      	cbnz	r3, 800bf14 <_vfiprintf_r+0x18>
 800bf10:	f7ff fcca 	bl	800b8a8 <__sinit>
 800bf14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf16:	07d9      	lsls	r1, r3, #31
 800bf18:	d405      	bmi.n	800bf26 <_vfiprintf_r+0x2a>
 800bf1a:	89ab      	ldrh	r3, [r5, #12]
 800bf1c:	059a      	lsls	r2, r3, #22
 800bf1e:	d402      	bmi.n	800bf26 <_vfiprintf_r+0x2a>
 800bf20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf22:	f7ff feb8 	bl	800bc96 <__retarget_lock_acquire_recursive>
 800bf26:	89ab      	ldrh	r3, [r5, #12]
 800bf28:	071b      	lsls	r3, r3, #28
 800bf2a:	d501      	bpl.n	800bf30 <_vfiprintf_r+0x34>
 800bf2c:	692b      	ldr	r3, [r5, #16]
 800bf2e:	b99b      	cbnz	r3, 800bf58 <_vfiprintf_r+0x5c>
 800bf30:	4629      	mov	r1, r5
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7ff fde0 	bl	800baf8 <__swsetup_r>
 800bf38:	b170      	cbz	r0, 800bf58 <_vfiprintf_r+0x5c>
 800bf3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf3c:	07dc      	lsls	r4, r3, #31
 800bf3e:	d504      	bpl.n	800bf4a <_vfiprintf_r+0x4e>
 800bf40:	f04f 30ff 	mov.w	r0, #4294967295
 800bf44:	b01d      	add	sp, #116	@ 0x74
 800bf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4a:	89ab      	ldrh	r3, [r5, #12]
 800bf4c:	0598      	lsls	r0, r3, #22
 800bf4e:	d4f7      	bmi.n	800bf40 <_vfiprintf_r+0x44>
 800bf50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf52:	f7ff fea1 	bl	800bc98 <__retarget_lock_release_recursive>
 800bf56:	e7f3      	b.n	800bf40 <_vfiprintf_r+0x44>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf5c:	2320      	movs	r3, #32
 800bf5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf62:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf66:	2330      	movs	r3, #48	@ 0x30
 800bf68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c118 <_vfiprintf_r+0x21c>
 800bf6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf70:	f04f 0901 	mov.w	r9, #1
 800bf74:	4623      	mov	r3, r4
 800bf76:	469a      	mov	sl, r3
 800bf78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf7c:	b10a      	cbz	r2, 800bf82 <_vfiprintf_r+0x86>
 800bf7e:	2a25      	cmp	r2, #37	@ 0x25
 800bf80:	d1f9      	bne.n	800bf76 <_vfiprintf_r+0x7a>
 800bf82:	ebba 0b04 	subs.w	fp, sl, r4
 800bf86:	d00b      	beq.n	800bfa0 <_vfiprintf_r+0xa4>
 800bf88:	465b      	mov	r3, fp
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	4629      	mov	r1, r5
 800bf8e:	4630      	mov	r0, r6
 800bf90:	f7ff ffa1 	bl	800bed6 <__sfputs_r>
 800bf94:	3001      	adds	r0, #1
 800bf96:	f000 80a7 	beq.w	800c0e8 <_vfiprintf_r+0x1ec>
 800bf9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf9c:	445a      	add	r2, fp
 800bf9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfa0:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 809f 	beq.w	800c0e8 <_vfiprintf_r+0x1ec>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfb4:	f10a 0a01 	add.w	sl, sl, #1
 800bfb8:	9304      	str	r3, [sp, #16]
 800bfba:	9307      	str	r3, [sp, #28]
 800bfbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bfc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfc2:	4654      	mov	r4, sl
 800bfc4:	2205      	movs	r2, #5
 800bfc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfca:	4853      	ldr	r0, [pc, #332]	@ (800c118 <_vfiprintf_r+0x21c>)
 800bfcc:	f7f4 f928 	bl	8000220 <memchr>
 800bfd0:	9a04      	ldr	r2, [sp, #16]
 800bfd2:	b9d8      	cbnz	r0, 800c00c <_vfiprintf_r+0x110>
 800bfd4:	06d1      	lsls	r1, r2, #27
 800bfd6:	bf44      	itt	mi
 800bfd8:	2320      	movmi	r3, #32
 800bfda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfde:	0713      	lsls	r3, r2, #28
 800bfe0:	bf44      	itt	mi
 800bfe2:	232b      	movmi	r3, #43	@ 0x2b
 800bfe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfe8:	f89a 3000 	ldrb.w	r3, [sl]
 800bfec:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfee:	d015      	beq.n	800c01c <_vfiprintf_r+0x120>
 800bff0:	9a07      	ldr	r2, [sp, #28]
 800bff2:	4654      	mov	r4, sl
 800bff4:	2000      	movs	r0, #0
 800bff6:	f04f 0c0a 	mov.w	ip, #10
 800bffa:	4621      	mov	r1, r4
 800bffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c000:	3b30      	subs	r3, #48	@ 0x30
 800c002:	2b09      	cmp	r3, #9
 800c004:	d94b      	bls.n	800c09e <_vfiprintf_r+0x1a2>
 800c006:	b1b0      	cbz	r0, 800c036 <_vfiprintf_r+0x13a>
 800c008:	9207      	str	r2, [sp, #28]
 800c00a:	e014      	b.n	800c036 <_vfiprintf_r+0x13a>
 800c00c:	eba0 0308 	sub.w	r3, r0, r8
 800c010:	fa09 f303 	lsl.w	r3, r9, r3
 800c014:	4313      	orrs	r3, r2
 800c016:	9304      	str	r3, [sp, #16]
 800c018:	46a2      	mov	sl, r4
 800c01a:	e7d2      	b.n	800bfc2 <_vfiprintf_r+0xc6>
 800c01c:	9b03      	ldr	r3, [sp, #12]
 800c01e:	1d19      	adds	r1, r3, #4
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	9103      	str	r1, [sp, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	bfbb      	ittet	lt
 800c028:	425b      	neglt	r3, r3
 800c02a:	f042 0202 	orrlt.w	r2, r2, #2
 800c02e:	9307      	strge	r3, [sp, #28]
 800c030:	9307      	strlt	r3, [sp, #28]
 800c032:	bfb8      	it	lt
 800c034:	9204      	strlt	r2, [sp, #16]
 800c036:	7823      	ldrb	r3, [r4, #0]
 800c038:	2b2e      	cmp	r3, #46	@ 0x2e
 800c03a:	d10a      	bne.n	800c052 <_vfiprintf_r+0x156>
 800c03c:	7863      	ldrb	r3, [r4, #1]
 800c03e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c040:	d132      	bne.n	800c0a8 <_vfiprintf_r+0x1ac>
 800c042:	9b03      	ldr	r3, [sp, #12]
 800c044:	1d1a      	adds	r2, r3, #4
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	9203      	str	r2, [sp, #12]
 800c04a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c04e:	3402      	adds	r4, #2
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c128 <_vfiprintf_r+0x22c>
 800c056:	7821      	ldrb	r1, [r4, #0]
 800c058:	2203      	movs	r2, #3
 800c05a:	4650      	mov	r0, sl
 800c05c:	f7f4 f8e0 	bl	8000220 <memchr>
 800c060:	b138      	cbz	r0, 800c072 <_vfiprintf_r+0x176>
 800c062:	9b04      	ldr	r3, [sp, #16]
 800c064:	eba0 000a 	sub.w	r0, r0, sl
 800c068:	2240      	movs	r2, #64	@ 0x40
 800c06a:	4082      	lsls	r2, r0
 800c06c:	4313      	orrs	r3, r2
 800c06e:	3401      	adds	r4, #1
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c076:	4829      	ldr	r0, [pc, #164]	@ (800c11c <_vfiprintf_r+0x220>)
 800c078:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c07c:	2206      	movs	r2, #6
 800c07e:	f7f4 f8cf 	bl	8000220 <memchr>
 800c082:	2800      	cmp	r0, #0
 800c084:	d03f      	beq.n	800c106 <_vfiprintf_r+0x20a>
 800c086:	4b26      	ldr	r3, [pc, #152]	@ (800c120 <_vfiprintf_r+0x224>)
 800c088:	bb1b      	cbnz	r3, 800c0d2 <_vfiprintf_r+0x1d6>
 800c08a:	9b03      	ldr	r3, [sp, #12]
 800c08c:	3307      	adds	r3, #7
 800c08e:	f023 0307 	bic.w	r3, r3, #7
 800c092:	3308      	adds	r3, #8
 800c094:	9303      	str	r3, [sp, #12]
 800c096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c098:	443b      	add	r3, r7
 800c09a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c09c:	e76a      	b.n	800bf74 <_vfiprintf_r+0x78>
 800c09e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	2001      	movs	r0, #1
 800c0a6:	e7a8      	b.n	800bffa <_vfiprintf_r+0xfe>
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	3401      	adds	r4, #1
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	f04f 0c0a 	mov.w	ip, #10
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0ba:	3a30      	subs	r2, #48	@ 0x30
 800c0bc:	2a09      	cmp	r2, #9
 800c0be:	d903      	bls.n	800c0c8 <_vfiprintf_r+0x1cc>
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d0c6      	beq.n	800c052 <_vfiprintf_r+0x156>
 800c0c4:	9105      	str	r1, [sp, #20]
 800c0c6:	e7c4      	b.n	800c052 <_vfiprintf_r+0x156>
 800c0c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e7f0      	b.n	800c0b4 <_vfiprintf_r+0x1b8>
 800c0d2:	ab03      	add	r3, sp, #12
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	462a      	mov	r2, r5
 800c0d8:	4b12      	ldr	r3, [pc, #72]	@ (800c124 <_vfiprintf_r+0x228>)
 800c0da:	a904      	add	r1, sp, #16
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f3af 8000 	nop.w
 800c0e2:	4607      	mov	r7, r0
 800c0e4:	1c78      	adds	r0, r7, #1
 800c0e6:	d1d6      	bne.n	800c096 <_vfiprintf_r+0x19a>
 800c0e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0ea:	07d9      	lsls	r1, r3, #31
 800c0ec:	d405      	bmi.n	800c0fa <_vfiprintf_r+0x1fe>
 800c0ee:	89ab      	ldrh	r3, [r5, #12]
 800c0f0:	059a      	lsls	r2, r3, #22
 800c0f2:	d402      	bmi.n	800c0fa <_vfiprintf_r+0x1fe>
 800c0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0f6:	f7ff fdcf 	bl	800bc98 <__retarget_lock_release_recursive>
 800c0fa:	89ab      	ldrh	r3, [r5, #12]
 800c0fc:	065b      	lsls	r3, r3, #25
 800c0fe:	f53f af1f 	bmi.w	800bf40 <_vfiprintf_r+0x44>
 800c102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c104:	e71e      	b.n	800bf44 <_vfiprintf_r+0x48>
 800c106:	ab03      	add	r3, sp, #12
 800c108:	9300      	str	r3, [sp, #0]
 800c10a:	462a      	mov	r2, r5
 800c10c:	4b05      	ldr	r3, [pc, #20]	@ (800c124 <_vfiprintf_r+0x228>)
 800c10e:	a904      	add	r1, sp, #16
 800c110:	4630      	mov	r0, r6
 800c112:	f000 f879 	bl	800c208 <_printf_i>
 800c116:	e7e4      	b.n	800c0e2 <_vfiprintf_r+0x1e6>
 800c118:	0800c928 	.word	0x0800c928
 800c11c:	0800c932 	.word	0x0800c932
 800c120:	00000000 	.word	0x00000000
 800c124:	0800bed7 	.word	0x0800bed7
 800c128:	0800c92e 	.word	0x0800c92e

0800c12c <_printf_common>:
 800c12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c130:	4616      	mov	r6, r2
 800c132:	4698      	mov	r8, r3
 800c134:	688a      	ldr	r2, [r1, #8]
 800c136:	690b      	ldr	r3, [r1, #16]
 800c138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c13c:	4293      	cmp	r3, r2
 800c13e:	bfb8      	it	lt
 800c140:	4613      	movlt	r3, r2
 800c142:	6033      	str	r3, [r6, #0]
 800c144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c148:	4607      	mov	r7, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	b10a      	cbz	r2, 800c152 <_printf_common+0x26>
 800c14e:	3301      	adds	r3, #1
 800c150:	6033      	str	r3, [r6, #0]
 800c152:	6823      	ldr	r3, [r4, #0]
 800c154:	0699      	lsls	r1, r3, #26
 800c156:	bf42      	ittt	mi
 800c158:	6833      	ldrmi	r3, [r6, #0]
 800c15a:	3302      	addmi	r3, #2
 800c15c:	6033      	strmi	r3, [r6, #0]
 800c15e:	6825      	ldr	r5, [r4, #0]
 800c160:	f015 0506 	ands.w	r5, r5, #6
 800c164:	d106      	bne.n	800c174 <_printf_common+0x48>
 800c166:	f104 0a19 	add.w	sl, r4, #25
 800c16a:	68e3      	ldr	r3, [r4, #12]
 800c16c:	6832      	ldr	r2, [r6, #0]
 800c16e:	1a9b      	subs	r3, r3, r2
 800c170:	42ab      	cmp	r3, r5
 800c172:	dc26      	bgt.n	800c1c2 <_printf_common+0x96>
 800c174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c178:	6822      	ldr	r2, [r4, #0]
 800c17a:	3b00      	subs	r3, #0
 800c17c:	bf18      	it	ne
 800c17e:	2301      	movne	r3, #1
 800c180:	0692      	lsls	r2, r2, #26
 800c182:	d42b      	bmi.n	800c1dc <_printf_common+0xb0>
 800c184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c188:	4641      	mov	r1, r8
 800c18a:	4638      	mov	r0, r7
 800c18c:	47c8      	blx	r9
 800c18e:	3001      	adds	r0, #1
 800c190:	d01e      	beq.n	800c1d0 <_printf_common+0xa4>
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	6922      	ldr	r2, [r4, #16]
 800c196:	f003 0306 	and.w	r3, r3, #6
 800c19a:	2b04      	cmp	r3, #4
 800c19c:	bf02      	ittt	eq
 800c19e:	68e5      	ldreq	r5, [r4, #12]
 800c1a0:	6833      	ldreq	r3, [r6, #0]
 800c1a2:	1aed      	subeq	r5, r5, r3
 800c1a4:	68a3      	ldr	r3, [r4, #8]
 800c1a6:	bf0c      	ite	eq
 800c1a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1ac:	2500      	movne	r5, #0
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	bfc4      	itt	gt
 800c1b2:	1a9b      	subgt	r3, r3, r2
 800c1b4:	18ed      	addgt	r5, r5, r3
 800c1b6:	2600      	movs	r6, #0
 800c1b8:	341a      	adds	r4, #26
 800c1ba:	42b5      	cmp	r5, r6
 800c1bc:	d11a      	bne.n	800c1f4 <_printf_common+0xc8>
 800c1be:	2000      	movs	r0, #0
 800c1c0:	e008      	b.n	800c1d4 <_printf_common+0xa8>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	4652      	mov	r2, sl
 800c1c6:	4641      	mov	r1, r8
 800c1c8:	4638      	mov	r0, r7
 800c1ca:	47c8      	blx	r9
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	d103      	bne.n	800c1d8 <_printf_common+0xac>
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d8:	3501      	adds	r5, #1
 800c1da:	e7c6      	b.n	800c16a <_printf_common+0x3e>
 800c1dc:	18e1      	adds	r1, r4, r3
 800c1de:	1c5a      	adds	r2, r3, #1
 800c1e0:	2030      	movs	r0, #48	@ 0x30
 800c1e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c1e6:	4422      	add	r2, r4
 800c1e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c1ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c1f0:	3302      	adds	r3, #2
 800c1f2:	e7c7      	b.n	800c184 <_printf_common+0x58>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	4622      	mov	r2, r4
 800c1f8:	4641      	mov	r1, r8
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	47c8      	blx	r9
 800c1fe:	3001      	adds	r0, #1
 800c200:	d0e6      	beq.n	800c1d0 <_printf_common+0xa4>
 800c202:	3601      	adds	r6, #1
 800c204:	e7d9      	b.n	800c1ba <_printf_common+0x8e>
	...

0800c208 <_printf_i>:
 800c208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c20c:	7e0f      	ldrb	r7, [r1, #24]
 800c20e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c210:	2f78      	cmp	r7, #120	@ 0x78
 800c212:	4691      	mov	r9, r2
 800c214:	4680      	mov	r8, r0
 800c216:	460c      	mov	r4, r1
 800c218:	469a      	mov	sl, r3
 800c21a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c21e:	d807      	bhi.n	800c230 <_printf_i+0x28>
 800c220:	2f62      	cmp	r7, #98	@ 0x62
 800c222:	d80a      	bhi.n	800c23a <_printf_i+0x32>
 800c224:	2f00      	cmp	r7, #0
 800c226:	f000 80d2 	beq.w	800c3ce <_printf_i+0x1c6>
 800c22a:	2f58      	cmp	r7, #88	@ 0x58
 800c22c:	f000 80b9 	beq.w	800c3a2 <_printf_i+0x19a>
 800c230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c238:	e03a      	b.n	800c2b0 <_printf_i+0xa8>
 800c23a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c23e:	2b15      	cmp	r3, #21
 800c240:	d8f6      	bhi.n	800c230 <_printf_i+0x28>
 800c242:	a101      	add	r1, pc, #4	@ (adr r1, 800c248 <_printf_i+0x40>)
 800c244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c248:	0800c2a1 	.word	0x0800c2a1
 800c24c:	0800c2b5 	.word	0x0800c2b5
 800c250:	0800c231 	.word	0x0800c231
 800c254:	0800c231 	.word	0x0800c231
 800c258:	0800c231 	.word	0x0800c231
 800c25c:	0800c231 	.word	0x0800c231
 800c260:	0800c2b5 	.word	0x0800c2b5
 800c264:	0800c231 	.word	0x0800c231
 800c268:	0800c231 	.word	0x0800c231
 800c26c:	0800c231 	.word	0x0800c231
 800c270:	0800c231 	.word	0x0800c231
 800c274:	0800c3b5 	.word	0x0800c3b5
 800c278:	0800c2df 	.word	0x0800c2df
 800c27c:	0800c36f 	.word	0x0800c36f
 800c280:	0800c231 	.word	0x0800c231
 800c284:	0800c231 	.word	0x0800c231
 800c288:	0800c3d7 	.word	0x0800c3d7
 800c28c:	0800c231 	.word	0x0800c231
 800c290:	0800c2df 	.word	0x0800c2df
 800c294:	0800c231 	.word	0x0800c231
 800c298:	0800c231 	.word	0x0800c231
 800c29c:	0800c377 	.word	0x0800c377
 800c2a0:	6833      	ldr	r3, [r6, #0]
 800c2a2:	1d1a      	adds	r2, r3, #4
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6032      	str	r2, [r6, #0]
 800c2a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e09d      	b.n	800c3f0 <_printf_i+0x1e8>
 800c2b4:	6833      	ldr	r3, [r6, #0]
 800c2b6:	6820      	ldr	r0, [r4, #0]
 800c2b8:	1d19      	adds	r1, r3, #4
 800c2ba:	6031      	str	r1, [r6, #0]
 800c2bc:	0606      	lsls	r6, r0, #24
 800c2be:	d501      	bpl.n	800c2c4 <_printf_i+0xbc>
 800c2c0:	681d      	ldr	r5, [r3, #0]
 800c2c2:	e003      	b.n	800c2cc <_printf_i+0xc4>
 800c2c4:	0645      	lsls	r5, r0, #25
 800c2c6:	d5fb      	bpl.n	800c2c0 <_printf_i+0xb8>
 800c2c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c2cc:	2d00      	cmp	r5, #0
 800c2ce:	da03      	bge.n	800c2d8 <_printf_i+0xd0>
 800c2d0:	232d      	movs	r3, #45	@ 0x2d
 800c2d2:	426d      	negs	r5, r5
 800c2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2d8:	4859      	ldr	r0, [pc, #356]	@ (800c440 <_printf_i+0x238>)
 800c2da:	230a      	movs	r3, #10
 800c2dc:	e011      	b.n	800c302 <_printf_i+0xfa>
 800c2de:	6821      	ldr	r1, [r4, #0]
 800c2e0:	6833      	ldr	r3, [r6, #0]
 800c2e2:	0608      	lsls	r0, r1, #24
 800c2e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c2e8:	d402      	bmi.n	800c2f0 <_printf_i+0xe8>
 800c2ea:	0649      	lsls	r1, r1, #25
 800c2ec:	bf48      	it	mi
 800c2ee:	b2ad      	uxthmi	r5, r5
 800c2f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c2f2:	4853      	ldr	r0, [pc, #332]	@ (800c440 <_printf_i+0x238>)
 800c2f4:	6033      	str	r3, [r6, #0]
 800c2f6:	bf14      	ite	ne
 800c2f8:	230a      	movne	r3, #10
 800c2fa:	2308      	moveq	r3, #8
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c302:	6866      	ldr	r6, [r4, #4]
 800c304:	60a6      	str	r6, [r4, #8]
 800c306:	2e00      	cmp	r6, #0
 800c308:	bfa2      	ittt	ge
 800c30a:	6821      	ldrge	r1, [r4, #0]
 800c30c:	f021 0104 	bicge.w	r1, r1, #4
 800c310:	6021      	strge	r1, [r4, #0]
 800c312:	b90d      	cbnz	r5, 800c318 <_printf_i+0x110>
 800c314:	2e00      	cmp	r6, #0
 800c316:	d04b      	beq.n	800c3b0 <_printf_i+0x1a8>
 800c318:	4616      	mov	r6, r2
 800c31a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c31e:	fb03 5711 	mls	r7, r3, r1, r5
 800c322:	5dc7      	ldrb	r7, [r0, r7]
 800c324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c328:	462f      	mov	r7, r5
 800c32a:	42bb      	cmp	r3, r7
 800c32c:	460d      	mov	r5, r1
 800c32e:	d9f4      	bls.n	800c31a <_printf_i+0x112>
 800c330:	2b08      	cmp	r3, #8
 800c332:	d10b      	bne.n	800c34c <_printf_i+0x144>
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	07df      	lsls	r7, r3, #31
 800c338:	d508      	bpl.n	800c34c <_printf_i+0x144>
 800c33a:	6923      	ldr	r3, [r4, #16]
 800c33c:	6861      	ldr	r1, [r4, #4]
 800c33e:	4299      	cmp	r1, r3
 800c340:	bfde      	ittt	le
 800c342:	2330      	movle	r3, #48	@ 0x30
 800c344:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c348:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c34c:	1b92      	subs	r2, r2, r6
 800c34e:	6122      	str	r2, [r4, #16]
 800c350:	f8cd a000 	str.w	sl, [sp]
 800c354:	464b      	mov	r3, r9
 800c356:	aa03      	add	r2, sp, #12
 800c358:	4621      	mov	r1, r4
 800c35a:	4640      	mov	r0, r8
 800c35c:	f7ff fee6 	bl	800c12c <_printf_common>
 800c360:	3001      	adds	r0, #1
 800c362:	d14a      	bne.n	800c3fa <_printf_i+0x1f2>
 800c364:	f04f 30ff 	mov.w	r0, #4294967295
 800c368:	b004      	add	sp, #16
 800c36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	f043 0320 	orr.w	r3, r3, #32
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	4833      	ldr	r0, [pc, #204]	@ (800c444 <_printf_i+0x23c>)
 800c378:	2778      	movs	r7, #120	@ 0x78
 800c37a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	6831      	ldr	r1, [r6, #0]
 800c382:	061f      	lsls	r7, r3, #24
 800c384:	f851 5b04 	ldr.w	r5, [r1], #4
 800c388:	d402      	bmi.n	800c390 <_printf_i+0x188>
 800c38a:	065f      	lsls	r7, r3, #25
 800c38c:	bf48      	it	mi
 800c38e:	b2ad      	uxthmi	r5, r5
 800c390:	6031      	str	r1, [r6, #0]
 800c392:	07d9      	lsls	r1, r3, #31
 800c394:	bf44      	itt	mi
 800c396:	f043 0320 	orrmi.w	r3, r3, #32
 800c39a:	6023      	strmi	r3, [r4, #0]
 800c39c:	b11d      	cbz	r5, 800c3a6 <_printf_i+0x19e>
 800c39e:	2310      	movs	r3, #16
 800c3a0:	e7ac      	b.n	800c2fc <_printf_i+0xf4>
 800c3a2:	4827      	ldr	r0, [pc, #156]	@ (800c440 <_printf_i+0x238>)
 800c3a4:	e7e9      	b.n	800c37a <_printf_i+0x172>
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	f023 0320 	bic.w	r3, r3, #32
 800c3ac:	6023      	str	r3, [r4, #0]
 800c3ae:	e7f6      	b.n	800c39e <_printf_i+0x196>
 800c3b0:	4616      	mov	r6, r2
 800c3b2:	e7bd      	b.n	800c330 <_printf_i+0x128>
 800c3b4:	6833      	ldr	r3, [r6, #0]
 800c3b6:	6825      	ldr	r5, [r4, #0]
 800c3b8:	6961      	ldr	r1, [r4, #20]
 800c3ba:	1d18      	adds	r0, r3, #4
 800c3bc:	6030      	str	r0, [r6, #0]
 800c3be:	062e      	lsls	r6, r5, #24
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	d501      	bpl.n	800c3c8 <_printf_i+0x1c0>
 800c3c4:	6019      	str	r1, [r3, #0]
 800c3c6:	e002      	b.n	800c3ce <_printf_i+0x1c6>
 800c3c8:	0668      	lsls	r0, r5, #25
 800c3ca:	d5fb      	bpl.n	800c3c4 <_printf_i+0x1bc>
 800c3cc:	8019      	strh	r1, [r3, #0]
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	6123      	str	r3, [r4, #16]
 800c3d2:	4616      	mov	r6, r2
 800c3d4:	e7bc      	b.n	800c350 <_printf_i+0x148>
 800c3d6:	6833      	ldr	r3, [r6, #0]
 800c3d8:	1d1a      	adds	r2, r3, #4
 800c3da:	6032      	str	r2, [r6, #0]
 800c3dc:	681e      	ldr	r6, [r3, #0]
 800c3de:	6862      	ldr	r2, [r4, #4]
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	f7f3 ff1c 	bl	8000220 <memchr>
 800c3e8:	b108      	cbz	r0, 800c3ee <_printf_i+0x1e6>
 800c3ea:	1b80      	subs	r0, r0, r6
 800c3ec:	6060      	str	r0, [r4, #4]
 800c3ee:	6863      	ldr	r3, [r4, #4]
 800c3f0:	6123      	str	r3, [r4, #16]
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3f8:	e7aa      	b.n	800c350 <_printf_i+0x148>
 800c3fa:	6923      	ldr	r3, [r4, #16]
 800c3fc:	4632      	mov	r2, r6
 800c3fe:	4649      	mov	r1, r9
 800c400:	4640      	mov	r0, r8
 800c402:	47d0      	blx	sl
 800c404:	3001      	adds	r0, #1
 800c406:	d0ad      	beq.n	800c364 <_printf_i+0x15c>
 800c408:	6823      	ldr	r3, [r4, #0]
 800c40a:	079b      	lsls	r3, r3, #30
 800c40c:	d413      	bmi.n	800c436 <_printf_i+0x22e>
 800c40e:	68e0      	ldr	r0, [r4, #12]
 800c410:	9b03      	ldr	r3, [sp, #12]
 800c412:	4298      	cmp	r0, r3
 800c414:	bfb8      	it	lt
 800c416:	4618      	movlt	r0, r3
 800c418:	e7a6      	b.n	800c368 <_printf_i+0x160>
 800c41a:	2301      	movs	r3, #1
 800c41c:	4632      	mov	r2, r6
 800c41e:	4649      	mov	r1, r9
 800c420:	4640      	mov	r0, r8
 800c422:	47d0      	blx	sl
 800c424:	3001      	adds	r0, #1
 800c426:	d09d      	beq.n	800c364 <_printf_i+0x15c>
 800c428:	3501      	adds	r5, #1
 800c42a:	68e3      	ldr	r3, [r4, #12]
 800c42c:	9903      	ldr	r1, [sp, #12]
 800c42e:	1a5b      	subs	r3, r3, r1
 800c430:	42ab      	cmp	r3, r5
 800c432:	dcf2      	bgt.n	800c41a <_printf_i+0x212>
 800c434:	e7eb      	b.n	800c40e <_printf_i+0x206>
 800c436:	2500      	movs	r5, #0
 800c438:	f104 0619 	add.w	r6, r4, #25
 800c43c:	e7f5      	b.n	800c42a <_printf_i+0x222>
 800c43e:	bf00      	nop
 800c440:	0800c939 	.word	0x0800c939
 800c444:	0800c94a 	.word	0x0800c94a

0800c448 <__sflush_r>:
 800c448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c450:	0716      	lsls	r6, r2, #28
 800c452:	4605      	mov	r5, r0
 800c454:	460c      	mov	r4, r1
 800c456:	d454      	bmi.n	800c502 <__sflush_r+0xba>
 800c458:	684b      	ldr	r3, [r1, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	dc02      	bgt.n	800c464 <__sflush_r+0x1c>
 800c45e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c460:	2b00      	cmp	r3, #0
 800c462:	dd48      	ble.n	800c4f6 <__sflush_r+0xae>
 800c464:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c466:	2e00      	cmp	r6, #0
 800c468:	d045      	beq.n	800c4f6 <__sflush_r+0xae>
 800c46a:	2300      	movs	r3, #0
 800c46c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c470:	682f      	ldr	r7, [r5, #0]
 800c472:	6a21      	ldr	r1, [r4, #32]
 800c474:	602b      	str	r3, [r5, #0]
 800c476:	d030      	beq.n	800c4da <__sflush_r+0x92>
 800c478:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	0759      	lsls	r1, r3, #29
 800c47e:	d505      	bpl.n	800c48c <__sflush_r+0x44>
 800c480:	6863      	ldr	r3, [r4, #4]
 800c482:	1ad2      	subs	r2, r2, r3
 800c484:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c486:	b10b      	cbz	r3, 800c48c <__sflush_r+0x44>
 800c488:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c48a:	1ad2      	subs	r2, r2, r3
 800c48c:	2300      	movs	r3, #0
 800c48e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c490:	6a21      	ldr	r1, [r4, #32]
 800c492:	4628      	mov	r0, r5
 800c494:	47b0      	blx	r6
 800c496:	1c43      	adds	r3, r0, #1
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	d106      	bne.n	800c4aa <__sflush_r+0x62>
 800c49c:	6829      	ldr	r1, [r5, #0]
 800c49e:	291d      	cmp	r1, #29
 800c4a0:	d82b      	bhi.n	800c4fa <__sflush_r+0xb2>
 800c4a2:	4a2a      	ldr	r2, [pc, #168]	@ (800c54c <__sflush_r+0x104>)
 800c4a4:	410a      	asrs	r2, r1
 800c4a6:	07d6      	lsls	r6, r2, #31
 800c4a8:	d427      	bmi.n	800c4fa <__sflush_r+0xb2>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	6062      	str	r2, [r4, #4]
 800c4ae:	04d9      	lsls	r1, r3, #19
 800c4b0:	6922      	ldr	r2, [r4, #16]
 800c4b2:	6022      	str	r2, [r4, #0]
 800c4b4:	d504      	bpl.n	800c4c0 <__sflush_r+0x78>
 800c4b6:	1c42      	adds	r2, r0, #1
 800c4b8:	d101      	bne.n	800c4be <__sflush_r+0x76>
 800c4ba:	682b      	ldr	r3, [r5, #0]
 800c4bc:	b903      	cbnz	r3, 800c4c0 <__sflush_r+0x78>
 800c4be:	6560      	str	r0, [r4, #84]	@ 0x54
 800c4c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4c2:	602f      	str	r7, [r5, #0]
 800c4c4:	b1b9      	cbz	r1, 800c4f6 <__sflush_r+0xae>
 800c4c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4ca:	4299      	cmp	r1, r3
 800c4cc:	d002      	beq.n	800c4d4 <__sflush_r+0x8c>
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7ff fbf2 	bl	800bcb8 <_free_r>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4d8:	e00d      	b.n	800c4f6 <__sflush_r+0xae>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	4628      	mov	r0, r5
 800c4de:	47b0      	blx	r6
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	1c50      	adds	r0, r2, #1
 800c4e4:	d1c9      	bne.n	800c47a <__sflush_r+0x32>
 800c4e6:	682b      	ldr	r3, [r5, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d0c6      	beq.n	800c47a <__sflush_r+0x32>
 800c4ec:	2b1d      	cmp	r3, #29
 800c4ee:	d001      	beq.n	800c4f4 <__sflush_r+0xac>
 800c4f0:	2b16      	cmp	r3, #22
 800c4f2:	d11e      	bne.n	800c532 <__sflush_r+0xea>
 800c4f4:	602f      	str	r7, [r5, #0]
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	e022      	b.n	800c540 <__sflush_r+0xf8>
 800c4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4fe:	b21b      	sxth	r3, r3
 800c500:	e01b      	b.n	800c53a <__sflush_r+0xf2>
 800c502:	690f      	ldr	r7, [r1, #16]
 800c504:	2f00      	cmp	r7, #0
 800c506:	d0f6      	beq.n	800c4f6 <__sflush_r+0xae>
 800c508:	0793      	lsls	r3, r2, #30
 800c50a:	680e      	ldr	r6, [r1, #0]
 800c50c:	bf08      	it	eq
 800c50e:	694b      	ldreq	r3, [r1, #20]
 800c510:	600f      	str	r7, [r1, #0]
 800c512:	bf18      	it	ne
 800c514:	2300      	movne	r3, #0
 800c516:	eba6 0807 	sub.w	r8, r6, r7
 800c51a:	608b      	str	r3, [r1, #8]
 800c51c:	f1b8 0f00 	cmp.w	r8, #0
 800c520:	dde9      	ble.n	800c4f6 <__sflush_r+0xae>
 800c522:	6a21      	ldr	r1, [r4, #32]
 800c524:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c526:	4643      	mov	r3, r8
 800c528:	463a      	mov	r2, r7
 800c52a:	4628      	mov	r0, r5
 800c52c:	47b0      	blx	r6
 800c52e:	2800      	cmp	r0, #0
 800c530:	dc08      	bgt.n	800c544 <__sflush_r+0xfc>
 800c532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	f04f 30ff 	mov.w	r0, #4294967295
 800c540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c544:	4407      	add	r7, r0
 800c546:	eba8 0800 	sub.w	r8, r8, r0
 800c54a:	e7e7      	b.n	800c51c <__sflush_r+0xd4>
 800c54c:	dfbffffe 	.word	0xdfbffffe

0800c550 <_fflush_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	690b      	ldr	r3, [r1, #16]
 800c554:	4605      	mov	r5, r0
 800c556:	460c      	mov	r4, r1
 800c558:	b913      	cbnz	r3, 800c560 <_fflush_r+0x10>
 800c55a:	2500      	movs	r5, #0
 800c55c:	4628      	mov	r0, r5
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	b118      	cbz	r0, 800c56a <_fflush_r+0x1a>
 800c562:	6a03      	ldr	r3, [r0, #32]
 800c564:	b90b      	cbnz	r3, 800c56a <_fflush_r+0x1a>
 800c566:	f7ff f99f 	bl	800b8a8 <__sinit>
 800c56a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d0f3      	beq.n	800c55a <_fflush_r+0xa>
 800c572:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c574:	07d0      	lsls	r0, r2, #31
 800c576:	d404      	bmi.n	800c582 <_fflush_r+0x32>
 800c578:	0599      	lsls	r1, r3, #22
 800c57a:	d402      	bmi.n	800c582 <_fflush_r+0x32>
 800c57c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c57e:	f7ff fb8a 	bl	800bc96 <__retarget_lock_acquire_recursive>
 800c582:	4628      	mov	r0, r5
 800c584:	4621      	mov	r1, r4
 800c586:	f7ff ff5f 	bl	800c448 <__sflush_r>
 800c58a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c58c:	07da      	lsls	r2, r3, #31
 800c58e:	4605      	mov	r5, r0
 800c590:	d4e4      	bmi.n	800c55c <_fflush_r+0xc>
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	059b      	lsls	r3, r3, #22
 800c596:	d4e1      	bmi.n	800c55c <_fflush_r+0xc>
 800c598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c59a:	f7ff fb7d 	bl	800bc98 <__retarget_lock_release_recursive>
 800c59e:	e7dd      	b.n	800c55c <_fflush_r+0xc>

0800c5a0 <__swhatbuf_r>:
 800c5a0:	b570      	push	{r4, r5, r6, lr}
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a8:	2900      	cmp	r1, #0
 800c5aa:	b096      	sub	sp, #88	@ 0x58
 800c5ac:	4615      	mov	r5, r2
 800c5ae:	461e      	mov	r6, r3
 800c5b0:	da0d      	bge.n	800c5ce <__swhatbuf_r+0x2e>
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5b8:	f04f 0100 	mov.w	r1, #0
 800c5bc:	bf14      	ite	ne
 800c5be:	2340      	movne	r3, #64	@ 0x40
 800c5c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	6031      	str	r1, [r6, #0]
 800c5c8:	602b      	str	r3, [r5, #0]
 800c5ca:	b016      	add	sp, #88	@ 0x58
 800c5cc:	bd70      	pop	{r4, r5, r6, pc}
 800c5ce:	466a      	mov	r2, sp
 800c5d0:	f000 f848 	bl	800c664 <_fstat_r>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	dbec      	blt.n	800c5b2 <__swhatbuf_r+0x12>
 800c5d8:	9901      	ldr	r1, [sp, #4]
 800c5da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c5de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c5e2:	4259      	negs	r1, r3
 800c5e4:	4159      	adcs	r1, r3
 800c5e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5ea:	e7eb      	b.n	800c5c4 <__swhatbuf_r+0x24>

0800c5ec <__smakebuf_r>:
 800c5ec:	898b      	ldrh	r3, [r1, #12]
 800c5ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5f0:	079d      	lsls	r5, r3, #30
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	d507      	bpl.n	800c608 <__smakebuf_r+0x1c>
 800c5f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	6123      	str	r3, [r4, #16]
 800c600:	2301      	movs	r3, #1
 800c602:	6163      	str	r3, [r4, #20]
 800c604:	b003      	add	sp, #12
 800c606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c608:	ab01      	add	r3, sp, #4
 800c60a:	466a      	mov	r2, sp
 800c60c:	f7ff ffc8 	bl	800c5a0 <__swhatbuf_r>
 800c610:	9f00      	ldr	r7, [sp, #0]
 800c612:	4605      	mov	r5, r0
 800c614:	4639      	mov	r1, r7
 800c616:	4630      	mov	r0, r6
 800c618:	f7ff fbba 	bl	800bd90 <_malloc_r>
 800c61c:	b948      	cbnz	r0, 800c632 <__smakebuf_r+0x46>
 800c61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c622:	059a      	lsls	r2, r3, #22
 800c624:	d4ee      	bmi.n	800c604 <__smakebuf_r+0x18>
 800c626:	f023 0303 	bic.w	r3, r3, #3
 800c62a:	f043 0302 	orr.w	r3, r3, #2
 800c62e:	81a3      	strh	r3, [r4, #12]
 800c630:	e7e2      	b.n	800c5f8 <__smakebuf_r+0xc>
 800c632:	89a3      	ldrh	r3, [r4, #12]
 800c634:	6020      	str	r0, [r4, #0]
 800c636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c63a:	81a3      	strh	r3, [r4, #12]
 800c63c:	9b01      	ldr	r3, [sp, #4]
 800c63e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c642:	b15b      	cbz	r3, 800c65c <__smakebuf_r+0x70>
 800c644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c648:	4630      	mov	r0, r6
 800c64a:	f000 f81d 	bl	800c688 <_isatty_r>
 800c64e:	b128      	cbz	r0, 800c65c <__smakebuf_r+0x70>
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	f023 0303 	bic.w	r3, r3, #3
 800c656:	f043 0301 	orr.w	r3, r3, #1
 800c65a:	81a3      	strh	r3, [r4, #12]
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	431d      	orrs	r5, r3
 800c660:	81a5      	strh	r5, [r4, #12]
 800c662:	e7cf      	b.n	800c604 <__smakebuf_r+0x18>

0800c664 <_fstat_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4d07      	ldr	r5, [pc, #28]	@ (800c684 <_fstat_r+0x20>)
 800c668:	2300      	movs	r3, #0
 800c66a:	4604      	mov	r4, r0
 800c66c:	4608      	mov	r0, r1
 800c66e:	4611      	mov	r1, r2
 800c670:	602b      	str	r3, [r5, #0]
 800c672:	f7f4 fbac 	bl	8000dce <_fstat>
 800c676:	1c43      	adds	r3, r0, #1
 800c678:	d102      	bne.n	800c680 <_fstat_r+0x1c>
 800c67a:	682b      	ldr	r3, [r5, #0]
 800c67c:	b103      	cbz	r3, 800c680 <_fstat_r+0x1c>
 800c67e:	6023      	str	r3, [r4, #0]
 800c680:	bd38      	pop	{r3, r4, r5, pc}
 800c682:	bf00      	nop
 800c684:	20001f10 	.word	0x20001f10

0800c688 <_isatty_r>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4d06      	ldr	r5, [pc, #24]	@ (800c6a4 <_isatty_r+0x1c>)
 800c68c:	2300      	movs	r3, #0
 800c68e:	4604      	mov	r4, r0
 800c690:	4608      	mov	r0, r1
 800c692:	602b      	str	r3, [r5, #0]
 800c694:	f7f4 fbab 	bl	8000dee <_isatty>
 800c698:	1c43      	adds	r3, r0, #1
 800c69a:	d102      	bne.n	800c6a2 <_isatty_r+0x1a>
 800c69c:	682b      	ldr	r3, [r5, #0]
 800c69e:	b103      	cbz	r3, 800c6a2 <_isatty_r+0x1a>
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	bd38      	pop	{r3, r4, r5, pc}
 800c6a4:	20001f10 	.word	0x20001f10

0800c6a8 <_sbrk_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	4d06      	ldr	r5, [pc, #24]	@ (800c6c4 <_sbrk_r+0x1c>)
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	602b      	str	r3, [r5, #0]
 800c6b4:	f7f4 fbb4 	bl	8000e20 <_sbrk>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_sbrk_r+0x1a>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_sbrk_r+0x1a>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	20001f10 	.word	0x20001f10

0800c6c8 <_init>:
 800c6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ca:	bf00      	nop
 800c6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ce:	bc08      	pop	{r3}
 800c6d0:	469e      	mov	lr, r3
 800c6d2:	4770      	bx	lr

0800c6d4 <_fini>:
 800c6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d6:	bf00      	nop
 800c6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6da:	bc08      	pop	{r3}
 800c6dc:	469e      	mov	lr, r3
 800c6de:	4770      	bx	lr
